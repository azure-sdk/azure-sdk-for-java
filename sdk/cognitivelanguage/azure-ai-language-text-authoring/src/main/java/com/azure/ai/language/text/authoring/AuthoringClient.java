// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring;

import com.azure.ai.language.text.authoring.implementation.JsonMergePatchHelper;
import com.azure.ai.language.text.authoring.implementation.TextAnalysisAuthoringsImpl;
import com.azure.ai.language.text.authoring.implementation.models.CopyProjectAuthorizationRequest;
import com.azure.ai.language.text.authoring.models.ExportedProject;
import com.azure.ai.language.text.authoring.models.ProjectKind;
import com.azure.ai.language.text.authoring.models.StringIndexType;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringAssignDeploymentResourcesJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringAssignDeploymentResourcesOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringAssignedDeploymentResource;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringAssignedProjectDeploymentsMetadata;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringCopyProjectJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringCopyProjectOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringCreateDeploymentOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringCreateProjectOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringDeleteDeploymentOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringDeploymentDeleteFromResourcesJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringDeploymentJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringDocumentEvaluationResult;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationJobResult;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringEvaluationSummary;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportProjectJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedModelJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedModelManifest;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedModelOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringExportedTrainedModel;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringImportProjectJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringLoadSnapshotJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringPrebuiltEntity;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringProjectDeletionJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringProjectDeployment;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringProjectMetadata;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringProjectTrainedModel;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringSupportedLanguage;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringSwapDeploymentsJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringSwapDeploymentsOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringTrainingConfigVersion;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringTrainingJobOptions;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringTrainingJobResult;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringTrainingJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringUnassignDeploymentResourcesJobState;
import com.azure.ai.language.text.authoring.models.TextAnalysisAuthoringUnassignDeploymentResourcesOptions;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;

/**
 * Initializes a new instance of the synchronous AuthoringClient type.
 */
@ServiceClient(builder = AuthoringClientBuilder.class)
public final class AuthoringClient {
    @Generated
    private final TextAnalysisAuthoringsImpl serviceClient;

    /**
     * Initializes an instance of AuthoringClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AuthoringClient(TextAnalysisAuthoringsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists the existing projects.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     storageInputContainerName: String (Required)
     *     settings (Optional): {
     *         confidenceThreshold: Double (Optional)
     *         amlProjectPath: String (Optional)
     *         isLabelingLocked: Boolean (Optional)
     *         runGptPredictions: Boolean (Optional)
     *         gptPredictiveLookahead: Integer (Optional)
     *     }
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringProjectMetadata items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listProjects(RequestOptions requestOptions) {
        return this.serviceClient.listProjects(requestOptions);
    }

    /**
     * Gets the details of a project.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     storageInputContainerName: String (Required)
     *     settings (Optional): {
     *         confidenceThreshold: Double (Optional)
     *         amlProjectPath: String (Optional)
     *         isLabelingLocked: Boolean (Optional)
     *         runGptPredictions: Boolean (Optional)
     *         gptPredictiveLookahead: Integer (Optional)
     *     }
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a project along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProjectWithResponse(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.getProjectWithResponse(projectName, requestOptions);
    }

    /**
     * The most basic operation that applies to a resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Optional, Required on create)
     *     storageInputContainerName: String (Optional, Required on create)
     *     settings (Optional): {
     *         confidenceThreshold: Double (Optional)
     *         amlProjectPath: String (Optional)
     *         isLabelingLocked: Boolean (Optional)
     *         runGptPredictions: Boolean (Optional)
     *         gptPredictiveLookahead: Integer (Optional)
     *     }
     *     projectName: String (Optional, Required on create)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Optional, Required on create)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     lastModifiedDateTime: OffsetDateTime (Required)
     *     lastTrainedDateTime: OffsetDateTime (Optional)
     *     lastDeployedDateTime: OffsetDateTime (Optional)
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     storageInputContainerName: String (Required)
     *     settings (Optional): {
     *         confidenceThreshold: Double (Optional)
     *         amlProjectPath: String (Optional)
     *         isLabelingLocked: Boolean (Optional)
     *         runGptPredictions: Boolean (Optional)
     *         gptPredictiveLookahead: Integer (Optional)
     *     }
     *     projectName: String (Required)
     *     multilingual: Boolean (Optional)
     *     description: String (Optional)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param body The request body.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the metadata of a project along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createProjectWithResponse(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createProjectWithResponse(projectName, body, requestOptions);
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteProject(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteProject(projectName, requestOptions);
    }

    /**
     * Generates a copy project operation authorization to the current target Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     storageInputContainerName: String (Optional)
     *     allowOverwrite: Boolean (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param copyProjectAuthorizationRequest The copyProjectAuthorizationRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the options for copying an existing project to another Azure resource along with
     * {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> copyProjectAuthorizationWithResponse(String projectName,
        BinaryData copyProjectAuthorizationRequest, RequestOptions requestOptions) {
        return this.serviceClient.copyProjectAuthorizationWithResponse(projectName, copyProjectAuthorizationRequest,
            requestOptions);
    }

    /**
     * Copies an existing project to another Azure resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     targetProjectName: String (Required)
     *     accessToken: String (Required)
     *     expiresAt: OffsetDateTime (Required)
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCopyProject(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCopyProject(projectName, body, requestOptions);
    }

    /**
     * Triggers a job to export a project's data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>assetKind</td><td>String</td><td>No</td><td>Kind of asset to export.</td></tr>
     * <tr><td>trainedModelLabel</td><td>String</td><td>No</td><td>Trained model label to export. If the
     * trainedModelLabel is null, the default behavior is to export the current working copy.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginExport(String projectName, String stringIndexType,
        RequestOptions requestOptions) {
        return this.serviceClient.beginExport(projectName, stringIndexType, requestOptions);
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>format</td><td>String</td><td>No</td><td>The format of the project to import. The currently supported
     * formats are json and aml formats. If not provided, the default is set to json.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectFileVersion: String (Required)
     *     stringIndexType: String(Utf16CodeUnit) (Required)
     *     metadata (Required): {
     *         projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Optional, Required on create)
     *         storageInputContainerName: String (Optional, Required on create)
     *         settings (Optional): {
     *             confidenceThreshold: Double (Optional)
     *             amlProjectPath: String (Optional)
     *             isLabelingLocked: Boolean (Optional)
     *             runGptPredictions: Boolean (Optional)
     *             gptPredictiveLookahead: Integer (Optional)
     *         }
     *         projectName: String (Optional, Required on create)
     *         multilingual: Boolean (Optional)
     *         description: String (Optional)
     *         language: String (Optional, Required on create)
     *     }
     *     assets (Optional): {
     *         projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginImportMethod(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginImportMethod(projectName, body, requestOptions);
    }

    /**
     * Triggers a training job for a project.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelLabel: String (Required)
     *     trainingConfigVersion: String (Required)
     *     evaluationOptions (Optional): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     *     dataGenerationSettings (Optional): {
     *         enableDataGeneration: boolean (Required)
     *         dataGenerationConnectionInfo (Required): {
     *             kind: String (Required)
     *             resourceId: String (Required)
     *             deploymentName: String (Required)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginTrain(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginTrain(projectName, body, requestOptions);
    }

    /**
     * Gets the status of an existing copy project job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing copy project job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getCopyProjectStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getCopyProjectStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Lists the deployments belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringProjectDeployment items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeployments(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listDeployments(projectName, requestOptions);
    }

    /**
     * Gets the details of a deployment.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     deploymentName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastDeployedDateTime: OffsetDateTime (Required)
     *     deploymentExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     assignedResources (Required): [
     *          (Required){
     *             resourceId: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a deployment along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentWithResponse(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentWithResponse(projectName, deploymentName, requestOptions);
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginDeployProject(String projectName, String deploymentName,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginDeployProject(projectName, deploymentName, body, requestOptions);
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteDeployment(String projectName, String deploymentName,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteDeployment(projectName, deploymentName, requestOptions);
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginDeleteDeploymentFromResources(String projectName,
        String deploymentName, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteDeploymentFromResources(projectName, deploymentName, body, requestOptions);
    }

    /**
     * Gets the status of an existing delete deployment from specific resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing delete deployment from specific resources job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentDeleteFromResourcesStatusWithResponse(String projectName,
        String deploymentName, String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentDeleteFromResourcesStatusWithResponse(projectName, deploymentName, jobId,
            requestOptions);
    }

    /**
     * Gets the status of an existing deployment job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing deployment job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDeploymentStatusWithResponse(String projectName, String deploymentName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getDeploymentStatusWithResponse(projectName, deploymentName, jobId, requestOptions);
    }

    /**
     * Swaps two existing deployments with each other.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     firstDeploymentName: String (Required)
     *     secondDeploymentName: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSwapDeployments(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginSwapDeployments(projectName, body, requestOptions);
    }

    /**
     * Gets the status of an existing swap deployment job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing swap deployment job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSwapDeploymentsStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getSwapDeploymentsStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Gets the status of an export job. Once job completes, returns the project metadata, and assets.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     resultUrl: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an export job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getExportStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Lists the exported models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringExportedTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listExportedModels(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listExportedModels(projectName, requestOptions);
    }

    /**
     * Gets the details of an exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     exportedModelName: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastExportedModelDateTime: OffsetDateTime (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of an exported model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportedModelWithResponse(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        return this.serviceClient.getExportedModelWithResponse(projectName, exportedModelName, requestOptions);
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainedModelLabel: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateOrUpdateExportedModel(String projectName,
        String exportedModelName, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrUpdateExportedModel(projectName, exportedModelName, body,
            requestOptions);
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteExportedModel(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteExportedModel(projectName, exportedModelName, requestOptions);
    }

    /**
     * Gets the status for an existing job to create or update an exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an existing job to create or update an exported model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportedModelJobStatusWithResponse(String projectName, String exportedModelName,
        String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getExportedModelJobStatusWithResponse(projectName, exportedModelName, jobId,
            requestOptions);
    }

    /**
     * Gets the details and URL needed to download the exported model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     modelFiles (Required): [
     *          (Required){
     *             name: String (Required)
     *             contentUri: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details and URL needed to download the exported model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getExportedModelManifestWithResponse(String projectName, String exportedModelName,
        RequestOptions requestOptions) {
        return this.serviceClient.getExportedModelManifestWithResponse(projectName, exportedModelName, requestOptions);
    }

    /**
     * Gets the status for an import.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an import along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getImportStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getImportStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Lists the trained models belonging to a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringProjectTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTrainedModels(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listTrainedModels(projectName, requestOptions);
    }

    /**
     * Gets the details of a trained model.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     label: String (Required)
     *     modelId: String (Required)
     *     lastTrainedDateTime: OffsetDateTime (Required)
     *     lastTrainingDurationInSeconds: int (Required)
     *     modelExpirationDate: LocalDate (Required)
     *     modelTrainingConfigVersion: String (Required)
     *     hasSnapshot: boolean (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of a trained model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainedModelWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        return this.serviceClient.getTrainedModelWithResponse(projectName, trainedModelLabel, requestOptions);
    }

    /**
     * Deletes an existing trained model.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTrainedModelWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteTrainedModelWithResponse(projectName, trainedModelLabel, requestOptions);
    }

    /**
     * Triggers evaluation operation on a trained model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     kind: String(percentage/manual) (Optional)
     *     trainingSplitPercentage: Integer (Optional)
     *     testingSplitPercentage: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginEvaluateModel(String projectName, String trainedModelLabel,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.beginEvaluateModel(projectName, trainedModelLabel, body, requestOptions);
    }

    /**
     * Long-running operation.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginLoadSnapshot(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        return this.serviceClient.beginLoadSnapshot(projectName, trainedModelLabel, requestOptions);
    }

    /**
     * Gets the status for an evaluation job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         evaluationOptions (Required): {
     *             kind: String(percentage/manual) (Optional)
     *             trainingSplitPercentage: Integer (Optional)
     *             testingSplitPercentage: Integer (Optional)
     *         }
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         percentComplete: int (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for an evaluation job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getEvaluationStatusWithResponse(String projectName, String trainedModelLabel,
        String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getEvaluationStatusWithResponse(projectName, trainedModelLabel, jobId,
            requestOptions);
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     location: String (Required)
     *     language: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets. Allowed values: "Utf16CodeUnit".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the detailed results of the evaluation for a trained model as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getModelEvaluationResults(String projectName, String trainedModelLabel,
        String stringIndexType, RequestOptions requestOptions) {
        return this.serviceClient.getModelEvaluationResults(projectName, trainedModelLabel, stringIndexType,
            requestOptions);
    }

    /**
     * Gets the evaluation summary of a trained model. The summary includes high level performance measurements of the
     * model e.g., F1, Precision, Recall, etc.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectKind: String(CustomSingleLabelClassification/CustomMultiLabelClassification/CustomEntityRecognition/CustomAbstractiveSummarization/CustomHealthcare/CustomTextSentiment) (Required)
     *     evaluationOptions (Required): {
     *         kind: String(percentage/manual) (Optional)
     *         trainingSplitPercentage: Integer (Optional)
     *         testingSplitPercentage: Integer (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the evaluation summary of a trained model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getModelEvaluationSummaryWithResponse(String projectName, String trainedModelLabel,
        RequestOptions requestOptions) {
        return this.serviceClient.getModelEvaluationSummaryWithResponse(projectName, trainedModelLabel, requestOptions);
    }

    /**
     * Gets the status for loading a snapshot.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for loading a snapshot along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLoadSnapshotStatusWithResponse(String projectName, String trainedModelLabel,
        String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getLoadSnapshotStatusWithResponse(projectName, trainedModelLabel, jobId,
            requestOptions);
    }

    /**
     * Lists the deployments resources assigned to the project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     azureResourceId: String (Required)
     *     region: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringAssignedDeploymentResource items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listDeploymentResources(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listDeploymentResources(projectName, requestOptions);
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourcesMetadata (Required): [
     *          (Required){
     *             azureResourceId: String (Required)
     *             customDomain: String (Required)
     *             region: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAssignDeploymentResources(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginAssignDeploymentResources(projectName, body, requestOptions);
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     assignedResourceIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginUnassignDeploymentResources(String projectName, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.beginUnassignDeploymentResources(projectName, body, requestOptions);
    }

    /**
     * Gets the status of an existing assign deployment resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing assign deployment resources job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAssignDeploymentResourcesStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAssignDeploymentResourcesStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Gets the status of an existing unassign deployment resources job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an existing unassign deployment resources job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUnassignDeploymentResourcesStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getUnassignDeploymentResourcesStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringTrainingJobState items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTrainingJobs(String projectName, RequestOptions requestOptions) {
        return this.serviceClient.listTrainingJobs(projectName, requestOptions);
    }

    /**
     * Gets the status for a training job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     *     result (Required): {
     *         modelLabel: String (Required)
     *         trainingConfigVersion: String (Required)
     *         trainingStatus (Required): {
     *             percentComplete: int (Required)
     *             startDateTime: OffsetDateTime (Optional)
     *             endDateTime: OffsetDateTime (Optional)
     *             status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *         }
     *         evaluationStatus (Optional): (recursive schema, see evaluationStatus above)
     *         estimatedEndDateTime: OffsetDateTime (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for a training job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.getTrainingStatusWithResponse(projectName, jobId, requestOptions);
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancelTrainingJob(String projectName, String jobId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCancelTrainingJob(projectName, jobId, requestOptions);
    }

    /**
     * Gets the status for a project deletion job.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     jobId: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     expirationDateTime: OffsetDateTime (Optional)
     *     status: String(notStarted/running/succeeded/failed/cancelled/cancelling/partiallyCompleted) (Required)
     *     warnings (Optional): [
     *          (Optional){
     *             code: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     *     errors (Optional): [
     *          (Optional){
     *             code: String(InvalidRequest/InvalidArgument/Unauthorized/Forbidden/NotFound/ProjectNotFound/OperationNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchIndexNotFound/TooManyRequests/AzureCognitiveSearchThrottling/AzureCognitiveSearchIndexLimitReached/InternalServerError/ServiceUnavailable/Timeout/QuotaExceeded/Conflict/Warning) (Required)
     *             message: String (Required)
     *             target: String (Optional)
     *             details (Optional): [
     *                 (recursive schema, see above)
     *             ]
     *             innererror (Optional): {
     *                 code: String(InvalidRequest/InvalidParameterValue/KnowledgeBaseNotFound/AzureCognitiveSearchNotFound/AzureCognitiveSearchThrottling/ExtractionFailure/InvalidRequestBodyFormat/EmptyRequest/MissingInputDocuments/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint) (Required)
     *                 message: String (Required)
     *                 details (Optional): {
     *                     String: String (Required)
     *                 }
     *                 target: String (Optional)
     *                 innererror (Optional): (recursive schema, see innererror above)
     *             }
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param jobId The job ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status for a project deletion job along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getProjectDeletionStatusWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getProjectDeletionStatusWithResponse(jobId, requestOptions);
    }

    /**
     * Lists the deployments to which an Azure resource is assigned. This doesn't return deployments belonging to
     * projects owned by this resource. It only returns deployments belonging to projects owned by other resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     projectName: String (Required)
     *     deploymentsMetadata (Required): [
     *          (Required){
     *             deploymentName: String (Required)
     *             lastDeployedDateTime: OffsetDateTime (Required)
     *             deploymentExpirationDate: LocalDate (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringAssignedProjectDeploymentsMetadata items as paginated response
     * with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAssignedResourceDeployments(RequestOptions requestOptions) {
        return this.serviceClient.listAssignedResourceDeployments(requestOptions);
    }

    /**
     * Lists the supported languages.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>projectKind</td><td>String</td><td>No</td><td>The project kind, default value is
     * CustomSingleLabelClassification. Allowed values: "CustomSingleLabelClassification",
     * "CustomMultiLabelClassification", "CustomEntityRecognition", "CustomAbstractiveSummarization",
     * "CustomHealthcare", "CustomTextSentiment".</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     languageName: String (Required)
     *     languageCode: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringSupportedLanguage items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getSupportedLanguages(RequestOptions requestOptions) {
        return this.serviceClient.getSupportedLanguages(requestOptions);
    }

    /**
     * Lists the supported prebuilt entities that can be used while creating composed entities.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     category: String (Required)
     *     description: String (Required)
     *     examples: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringPrebuiltEntity items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getSupportedPrebuiltEntities(RequestOptions requestOptions) {
        return this.serviceClient.getSupportedPrebuiltEntities(requestOptions);
    }

    /**
     * Lists the support training config version for a given project type.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>projectKind</td><td>String</td><td>No</td><td>The project kind, default value is
     * CustomSingleLabelClassification. Allowed values: "CustomSingleLabelClassification",
     * "CustomMultiLabelClassification", "CustomEntityRecognition", "CustomAbstractiveSummarization",
     * "CustomHealthcare", "CustomTextSentiment".</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     trainingConfigVersion: String (Required)
     *     modelExpirationDate: LocalDate (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of TextAnalysisAuthoringTrainingConfigVersion items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTrainingConfigVersions(RequestOptions requestOptions) {
        return this.serviceClient.listTrainingConfigVersions(requestOptions);
    }

    /**
     * Lists the existing projects.
     * 
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringProjectMetadata items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringProjectMetadata> listProjects(Integer top, Integer skip) {
        // Generated convenience method for listProjects
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listProjects(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringProjectMetadata.class));
    }

    /**
     * Lists the existing projects.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringProjectMetadata items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringProjectMetadata> listProjects() {
        // Generated convenience method for listProjects
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listProjects(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringProjectMetadata.class));
    }

    /**
     * Gets the details of a project.
     * 
     * @param projectName The new project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a project.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringProjectMetadata getProject(String projectName) {
        // Generated convenience method for getProjectWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getProjectWithResponse(projectName, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringProjectMetadata.class);
    }

    /**
     * The most basic operation that applies to a resource.
     * 
     * @param projectName The new project name.
     * @param body The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the metadata of a project.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringProjectMetadata createProject(String projectName,
        TextAnalysisAuthoringCreateProjectOptions body) {
        // Generated convenience method for createProjectWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getTextAnalysisAuthoringCreateProjectOptionsAccessor()
            .prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getTextAnalysisAuthoringCreateProjectOptionsAccessor()
            .prepareModelForJsonMergePatch(body, false);
        return createProjectWithResponse(projectName, bodyInBinaryData, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringProjectMetadata.class);
    }

    /**
     * Deletes a project.
     * 
     * @param projectName The name of the project to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringProjectDeletionJobState, Void> beginDeleteProject(String projectName) {
        // Generated convenience method for beginDeleteProjectWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteProjectWithModel(projectName, requestOptions);
    }

    /**
     * Generates a copy project operation authorization to the current target Azure resource.
     * 
     * @param projectName The new project name.
     * @param projectKind Represents the project kind.
     * @param storageInputContainerName The name of the storage container.
     * @param allowOverwrite Whether to allow an existing project to be overwritten using the resulting copy
     * authorization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the options for copying an existing project to another Azure resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringCopyProjectOptions copyProjectAuthorization(String projectName, ProjectKind projectKind,
        String storageInputContainerName, Boolean allowOverwrite) {
        // Generated convenience method for copyProjectAuthorizationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CopyProjectAuthorizationRequest copyProjectAuthorizationRequestObj
            = new CopyProjectAuthorizationRequest(projectKind).setStorageInputContainerName(storageInputContainerName)
                .setAllowOverwrite(allowOverwrite);
        BinaryData copyProjectAuthorizationRequest = BinaryData.fromObject(copyProjectAuthorizationRequestObj);
        return copyProjectAuthorizationWithResponse(projectName, copyProjectAuthorizationRequest, requestOptions)
            .getValue()
            .toObject(TextAnalysisAuthoringCopyProjectOptions.class);
    }

    /**
     * Generates a copy project operation authorization to the current target Azure resource.
     * 
     * @param projectName The new project name.
     * @param projectKind Represents the project kind.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the options for copying an existing project to another Azure resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringCopyProjectOptions copyProjectAuthorization(String projectName,
        ProjectKind projectKind) {
        // Generated convenience method for copyProjectAuthorizationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CopyProjectAuthorizationRequest copyProjectAuthorizationRequestObj
            = new CopyProjectAuthorizationRequest(projectKind);
        BinaryData copyProjectAuthorizationRequest = BinaryData.fromObject(copyProjectAuthorizationRequestObj);
        return copyProjectAuthorizationWithResponse(projectName, copyProjectAuthorizationRequest, requestOptions)
            .getValue()
            .toObject(TextAnalysisAuthoringCopyProjectOptions.class);
    }

    /**
     * Copies an existing project to another Azure resource.
     * 
     * @param projectName The name of the project to use.
     * @param body The copy project info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringCopyProjectJobState, Void> beginCopyProject(String projectName,
        TextAnalysisAuthoringCopyProjectOptions body) {
        // Generated convenience method for beginCopyProjectWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCopyProjectWithModel(projectName, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Triggers a job to export a project's data.
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets.
     * @param assetKind Kind of asset to export.
     * @param trainedModelLabel Trained model label to export. If the trainedModelLabel is null, the default behavior is
     * to export the current working copy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringExportProjectJobState, Void> beginExport(String projectName,
        StringIndexType stringIndexType, String assetKind, String trainedModelLabel) {
        // Generated convenience method for beginExportWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (assetKind != null) {
            requestOptions.addQueryParam("assetKind", assetKind, false);
        }
        if (trainedModelLabel != null) {
            requestOptions.addQueryParam("trainedModelLabel", trainedModelLabel, false);
        }
        return serviceClient.beginExportWithModel(projectName, stringIndexType.toString(), requestOptions);
    }

    /**
     * Triggers a job to export a project's data.
     * 
     * @param projectName The name of the project to use.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringExportProjectJobState, Void> beginExport(String projectName,
        StringIndexType stringIndexType) {
        // Generated convenience method for beginExportWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginExportWithModel(projectName, stringIndexType.toString(), requestOptions);
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @param format The format of the project to import. The currently supported formats are json and aml formats. If
     * not provided, the default is set to json.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringImportProjectJobState, Void> beginImportMethod(String projectName,
        ExportedProject body, String format) {
        // Generated convenience method for beginImportMethodWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (format != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("format"), format);
        }
        return serviceClient.beginImportMethodWithModel(projectName, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Triggers a job to import a project. If a project with the same name already exists, the data of that project is
     * replaced.
     * 
     * @param projectName The name of the project to use.
     * @param body The project data to import.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringImportProjectJobState, Void> beginImportMethod(String projectName,
        ExportedProject body) {
        // Generated convenience method for beginImportMethodWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginImportMethodWithModel(projectName, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Triggers a training job for a project.
     * 
     * @param projectName The name of the project to use.
     * @param body The training input parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringTrainingJobState, TextAnalysisAuthoringTrainingJobResult>
        beginTrain(String projectName, TextAnalysisAuthoringTrainingJobOptions body) {
        // Generated convenience method for beginTrainWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainWithModel(projectName, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Gets the status of an existing copy project job.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an existing copy project job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringCopyProjectJobState getCopyProjectStatus(String projectName, String jobId) {
        // Generated convenience method for getCopyProjectStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getCopyProjectStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringCopyProjectJobState.class);
    }

    /**
     * Lists the deployments belonging to a project.
     * 
     * @param projectName The new project name.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringProjectDeployment items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringProjectDeployment> listDeployments(String projectName, Integer top,
        Integer skip) {
        // Generated convenience method for listDeployments
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listDeployments(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringProjectDeployment.class));
    }

    /**
     * Lists the deployments belonging to a project.
     * 
     * @param projectName The new project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringProjectDeployment items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringProjectDeployment> listDeployments(String projectName) {
        // Generated convenience method for listDeployments
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDeployments(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringProjectDeployment.class));
    }

    /**
     * Gets the details of a deployment.
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a deployment.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringProjectDeployment getDeployment(String projectName, String deploymentName) {
        // Generated convenience method for getDeploymentWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentWithResponse(projectName, deploymentName, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringProjectDeployment.class);
    }

    /**
     * Creates a new deployment or replaces an existing one.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The new deployment info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringDeploymentJobState, Void> beginDeployProject(String projectName,
        String deploymentName, TextAnalysisAuthoringCreateDeploymentOptions body) {
        // Generated convenience method for beginDeployProjectWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeployProjectWithModel(projectName, deploymentName, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Deletes a project deployment.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringDeploymentJobState, Void> beginDeleteDeployment(String projectName,
        String deploymentName) {
        // Generated convenience method for beginDeleteDeploymentWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteDeploymentWithModel(projectName, deploymentName, requestOptions);
    }

    /**
     * Deletes a project deployment from the specified assigned resources.
     * 
     * @param projectName The name of the project to use.
     * @param deploymentName The name of the specific deployment of the project to use.
     * @param body The options for deleting the deployment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringDeploymentDeleteFromResourcesJobState, Void>
        beginDeleteDeploymentFromResources(String projectName, String deploymentName,
            TextAnalysisAuthoringDeleteDeploymentOptions body) {
        // Generated convenience method for beginDeleteDeploymentFromResourcesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteDeploymentFromResourcesWithModel(projectName, deploymentName,
            BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Gets the status of an existing delete deployment from specific resources job.
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an existing delete deployment from specific resources job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringDeploymentDeleteFromResourcesJobState
        getDeploymentDeleteFromResourcesStatus(String projectName, String deploymentName, String jobId) {
        // Generated convenience method for getDeploymentDeleteFromResourcesStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentDeleteFromResourcesStatusWithResponse(projectName, deploymentName, jobId, requestOptions)
            .getValue()
            .toObject(TextAnalysisAuthoringDeploymentDeleteFromResourcesJobState.class);
    }

    /**
     * Gets the status of an existing deployment job.
     * 
     * @param projectName The new project name.
     * @param deploymentName Represents deployment name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an existing deployment job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringDeploymentJobState getDeploymentStatus(String projectName, String deploymentName,
        String jobId) {
        // Generated convenience method for getDeploymentStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDeploymentStatusWithResponse(projectName, deploymentName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringDeploymentJobState.class);
    }

    /**
     * Swaps two existing deployments with each other.
     * 
     * @param projectName The name of the project to use.
     * @param body The job object to swap two deployments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringSwapDeploymentsJobState, Void> beginSwapDeployments(String projectName,
        TextAnalysisAuthoringSwapDeploymentsOptions body) {
        // Generated convenience method for beginSwapDeploymentsWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginSwapDeploymentsWithModel(projectName, BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Gets the status of an existing swap deployment job.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an existing swap deployment job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringSwapDeploymentsJobState getSwapDeploymentsStatus(String projectName, String jobId) {
        // Generated convenience method for getSwapDeploymentsStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSwapDeploymentsStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringSwapDeploymentsJobState.class);
    }

    /**
     * Gets the status of an export job. Once job completes, returns the project metadata, and assets.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an export job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringExportProjectJobState getExportStatus(String projectName, String jobId) {
        // Generated convenience method for getExportStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExportStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringExportProjectJobState.class);
    }

    /**
     * Lists the exported models belonging to a project.
     * 
     * @param projectName The new project name.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringExportedTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringExportedTrainedModel> listExportedModels(String projectName, Integer top,
        Integer skip) {
        // Generated convenience method for listExportedModels
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listExportedModels(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringExportedTrainedModel.class));
    }

    /**
     * Lists the exported models belonging to a project.
     * 
     * @param projectName The new project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringExportedTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringExportedTrainedModel> listExportedModels(String projectName) {
        // Generated convenience method for listExportedModels
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listExportedModels(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringExportedTrainedModel.class));
    }

    /**
     * Gets the details of an exported model.
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an exported model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringExportedTrainedModel getExportedModel(String projectName, String exportedModelName) {
        // Generated convenience method for getExportedModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExportedModelWithResponse(projectName, exportedModelName, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringExportedTrainedModel.class);
    }

    /**
     * Creates a new exported model or replaces an existing one.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @param body The exported model info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringExportedModelJobState, Void> beginCreateOrUpdateExportedModel(
        String projectName, String exportedModelName, TextAnalysisAuthoringExportedModelOptions body) {
        // Generated convenience method for beginCreateOrUpdateExportedModelWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateOrUpdateExportedModelWithModel(projectName, exportedModelName,
            BinaryData.fromObject(body), requestOptions);
    }

    /**
     * Deletes an existing exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringExportedModelJobState, Void> beginDeleteExportedModel(String projectName,
        String exportedModelName) {
        // Generated convenience method for beginDeleteExportedModelWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteExportedModelWithModel(projectName, exportedModelName, requestOptions);
    }

    /**
     * Gets the status for an existing job to create or update an exported model.
     * 
     * @param projectName The new project name.
     * @param exportedModelName The exported model name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status for an existing job to create or update an exported model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringExportedModelJobState getExportedModelJobStatus(String projectName,
        String exportedModelName, String jobId) {
        // Generated convenience method for getExportedModelJobStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExportedModelJobStatusWithResponse(projectName, exportedModelName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringExportedModelJobState.class);
    }

    /**
     * Gets the details and URL needed to download the exported model.
     * 
     * @param projectName The name of the project to use.
     * @param exportedModelName The exported model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details and URL needed to download the exported model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringExportedModelManifest getExportedModelManifest(String projectName,
        String exportedModelName) {
        // Generated convenience method for getExportedModelManifestWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getExportedModelManifestWithResponse(projectName, exportedModelName, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringExportedModelManifest.class);
    }

    /**
     * Gets the status for an import.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status for an import.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringImportProjectJobState getImportStatus(String projectName, String jobId) {
        // Generated convenience method for getImportStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getImportStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringImportProjectJobState.class);
    }

    /**
     * Lists the trained models belonging to a project.
     * 
     * @param projectName The new project name.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringProjectTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringProjectTrainedModel> listTrainedModels(String projectName, Integer top,
        Integer skip) {
        // Generated convenience method for listTrainedModels
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listTrainedModels(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringProjectTrainedModel.class));
    }

    /**
     * Lists the trained models belonging to a project.
     * 
     * @param projectName The new project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringProjectTrainedModel items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringProjectTrainedModel> listTrainedModels(String projectName) {
        // Generated convenience method for listTrainedModels
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTrainedModels(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringProjectTrainedModel.class));
    }

    /**
     * Gets the details of a trained model.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of a trained model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringProjectTrainedModel getTrainedModel(String projectName, String trainedModelLabel) {
        // Generated convenience method for getTrainedModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTrainedModelWithResponse(projectName, trainedModelLabel, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringProjectTrainedModel.class);
    }

    /**
     * Deletes an existing trained model.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTrainedModel(String projectName, String trainedModelLabel) {
        // Generated convenience method for deleteTrainedModelWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTrainedModelWithResponse(projectName, trainedModelLabel, requestOptions).getValue();
    }

    /**
     * Triggers evaluation operation on a trained model.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @param body The training input parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringEvaluationJobState, TextAnalysisAuthoringEvaluationJobResult>
        beginEvaluateModel(String projectName, String trainedModelLabel, TextAnalysisAuthoringEvaluationOptions body) {
        // Generated convenience method for beginEvaluateModelWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginEvaluateModelWithModel(projectName, trainedModelLabel, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Long-running operation.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringLoadSnapshotJobState, Void> beginLoadSnapshot(String projectName,
        String trainedModelLabel) {
        // Generated convenience method for beginLoadSnapshotWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginLoadSnapshotWithModel(projectName, trainedModelLabel, requestOptions);
    }

    /**
     * Gets the status for an evaluation job.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status for an evaluation job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringEvaluationJobState getEvaluationStatus(String projectName, String trainedModelLabel,
        String jobId) {
        // Generated convenience method for getEvaluationStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getEvaluationStatusWithResponse(projectName, trainedModelLabel, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringEvaluationJobState.class);
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed results of the evaluation for a trained model as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringDocumentEvaluationResult> getModelEvaluationResults(String projectName,
        String trainedModelLabel, StringIndexType stringIndexType, Integer top, Integer skip) {
        // Generated convenience method for getModelEvaluationResults
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient
            .getModelEvaluationResults(projectName, trainedModelLabel, stringIndexType.toString(), requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringDocumentEvaluationResult.class));
    }

    /**
     * Gets the detailed results of the evaluation for a trained model. This includes the raw inference results for the
     * data included in the evaluation process.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param stringIndexType Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the detailed results of the evaluation for a trained model as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringDocumentEvaluationResult> getModelEvaluationResults(String projectName,
        String trainedModelLabel, StringIndexType stringIndexType) {
        // Generated convenience method for getModelEvaluationResults
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient
            .getModelEvaluationResults(projectName, trainedModelLabel, stringIndexType.toString(), requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringDocumentEvaluationResult.class));
    }

    /**
     * Gets the evaluation summary of a trained model. The summary includes high level performance measurements of the
     * model e.g., F1, Precision, Recall, etc.
     * 
     * @param projectName The name of the project to use.
     * @param trainedModelLabel The trained model label.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the evaluation summary of a trained model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringEvaluationSummary getModelEvaluationSummary(String projectName,
        String trainedModelLabel) {
        // Generated convenience method for getModelEvaluationSummaryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getModelEvaluationSummaryWithResponse(projectName, trainedModelLabel, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringEvaluationSummary.class);
    }

    /**
     * Gets the status for loading a snapshot.
     * 
     * @param projectName The new project name.
     * @param trainedModelLabel The trained model label.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status for loading a snapshot.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringLoadSnapshotJobState getLoadSnapshotStatus(String projectName, String trainedModelLabel,
        String jobId) {
        // Generated convenience method for getLoadSnapshotStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLoadSnapshotStatusWithResponse(projectName, trainedModelLabel, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringLoadSnapshotJobState.class);
    }

    /**
     * Lists the deployments resources assigned to the project.
     * 
     * @param projectName The new project name.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringAssignedDeploymentResource items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringAssignedDeploymentResource> listDeploymentResources(String projectName,
        Integer top, Integer skip) {
        // Generated convenience method for listDeploymentResources
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listDeploymentResources(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringAssignedDeploymentResource.class));
    }

    /**
     * Lists the deployments resources assigned to the project.
     * 
     * @param projectName The new project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringAssignedDeploymentResource items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringAssignedDeploymentResource> listDeploymentResources(String projectName) {
        // Generated convenience method for listDeploymentResources
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listDeploymentResources(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringAssignedDeploymentResource.class));
    }

    /**
     * Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only
     * via AAD authentication and not supported via subscription key authentication. For more details about AAD
     * authentication, check here:
     * https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.
     * 
     * @param projectName The name of the project to use.
     * @param body The new project resources info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringAssignDeploymentResourcesJobState, Void>
        beginAssignDeploymentResources(String projectName, TextAnalysisAuthoringAssignDeploymentResourcesOptions body) {
        // Generated convenience method for beginAssignDeploymentResourcesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginAssignDeploymentResourcesWithModel(projectName, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Unassign resources from a project. This disallows deploying new deployments to these resources, and deletes
     * existing deployments assigned to them.
     * 
     * @param projectName The name of the project to use.
     * @param body The info for the deployment resources to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringUnassignDeploymentResourcesJobState, Void> beginUnassignDeploymentResources(
        String projectName, TextAnalysisAuthoringUnassignDeploymentResourcesOptions body) {
        // Generated convenience method for beginUnassignDeploymentResourcesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginUnassignDeploymentResourcesWithModel(projectName, BinaryData.fromObject(body),
            requestOptions);
    }

    /**
     * Gets the status of an existing assign deployment resources job.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an existing assign deployment resources job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringAssignDeploymentResourcesJobState getAssignDeploymentResourcesStatus(String projectName,
        String jobId) {
        // Generated convenience method for getAssignDeploymentResourcesStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAssignDeploymentResourcesStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringAssignDeploymentResourcesJobState.class);
    }

    /**
     * Gets the status of an existing unassign deployment resources job.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status of an existing unassign deployment resources job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringUnassignDeploymentResourcesJobState
        getUnassignDeploymentResourcesStatus(String projectName, String jobId) {
        // Generated convenience method for getUnassignDeploymentResourcesStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getUnassignDeploymentResourcesStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringUnassignDeploymentResourcesJobState.class);
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * 
     * @param projectName The new project name.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringTrainingJobState items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringTrainingJobState> listTrainingJobs(String projectName, Integer top,
        Integer skip) {
        // Generated convenience method for listTrainingJobs
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listTrainingJobs(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringTrainingJobState.class));
    }

    /**
     * Lists the non-expired training jobs created for a project.
     * 
     * @param projectName The new project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringTrainingJobState items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringTrainingJobState> listTrainingJobs(String projectName) {
        // Generated convenience method for listTrainingJobs
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTrainingJobs(projectName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringTrainingJobState.class));
    }

    /**
     * Gets the status for a training job.
     * 
     * @param projectName The new project name.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status for a training job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringTrainingJobState getTrainingStatus(String projectName, String jobId) {
        // Generated convenience method for getTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTrainingStatusWithResponse(projectName, jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringTrainingJobState.class);
    }

    /**
     * Triggers a cancellation for a running training job.
     * 
     * @param projectName The name of the project to use.
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<TextAnalysisAuthoringTrainingJobState, TextAnalysisAuthoringTrainingJobResult>
        beginCancelTrainingJob(String projectName, String jobId) {
        // Generated convenience method for beginCancelTrainingJobWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCancelTrainingJobWithModel(projectName, jobId, requestOptions);
    }

    /**
     * Gets the status for a project deletion job.
     * 
     * @param jobId The job ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the status for a project deletion job.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TextAnalysisAuthoringProjectDeletionJobState getProjectDeletionStatus(String jobId) {
        // Generated convenience method for getProjectDeletionStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getProjectDeletionStatusWithResponse(jobId, requestOptions).getValue()
            .toObject(TextAnalysisAuthoringProjectDeletionJobState.class);
    }

    /**
     * Lists the deployments to which an Azure resource is assigned. This doesn't return deployments belonging to
     * projects owned by this resource. It only returns deployments belonging to projects owned by other resources.
     * 
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringAssignedProjectDeploymentsMetadata items as paginated response
     * with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringAssignedProjectDeploymentsMetadata>
        listAssignedResourceDeployments(Integer top, Integer skip) {
        // Generated convenience method for listAssignedResourceDeployments
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listAssignedResourceDeployments(requestOptions)
            .mapPage(
                bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringAssignedProjectDeploymentsMetadata.class));
    }

    /**
     * Lists the deployments to which an Azure resource is assigned. This doesn't return deployments belonging to
     * projects owned by this resource. It only returns deployments belonging to projects owned by other resources.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringAssignedProjectDeploymentsMetadata items as paginated response
     * with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringAssignedProjectDeploymentsMetadata> listAssignedResourceDeployments() {
        // Generated convenience method for listAssignedResourceDeployments
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listAssignedResourceDeployments(requestOptions)
            .mapPage(
                bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringAssignedProjectDeploymentsMetadata.class));
    }

    /**
     * Lists the supported languages.
     * 
     * @param projectKind The project kind, default value is CustomSingleLabelClassification.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringSupportedLanguage items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringSupportedLanguage> getSupportedLanguages(ProjectKind projectKind,
        Integer top, Integer skip) {
        // Generated convenience method for getSupportedLanguages
        RequestOptions requestOptions = new RequestOptions();
        if (projectKind != null) {
            requestOptions.addQueryParam("projectKind", projectKind.toString(), false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.getSupportedLanguages(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringSupportedLanguage.class));
    }

    /**
     * Lists the supported languages.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringSupportedLanguage items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringSupportedLanguage> getSupportedLanguages() {
        // Generated convenience method for getSupportedLanguages
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getSupportedLanguages(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringSupportedLanguage.class));
    }

    /**
     * Lists the supported prebuilt entities that can be used while creating composed entities.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringPrebuiltEntity items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringPrebuiltEntity> getSupportedPrebuiltEntities() {
        // Generated convenience method for getSupportedPrebuiltEntities
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.getSupportedPrebuiltEntities(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringPrebuiltEntity.class));
    }

    /**
     * Lists the support training config version for a given project type.
     * 
     * @param projectKind The project kind, default value is CustomSingleLabelClassification.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringTrainingConfigVersion items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringTrainingConfigVersion> listTrainingConfigVersions(ProjectKind projectKind,
        Integer top, Integer skip) {
        // Generated convenience method for listTrainingConfigVersions
        RequestOptions requestOptions = new RequestOptions();
        if (projectKind != null) {
            requestOptions.addQueryParam("projectKind", projectKind.toString(), false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return serviceClient.listTrainingConfigVersions(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringTrainingConfigVersion.class));
    }

    /**
     * Lists the support training config version for a given project type.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of TextAnalysisAuthoringTrainingConfigVersion items as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TextAnalysisAuthoringTrainingConfigVersion> listTrainingConfigVersions() {
        // Generated convenience method for listTrainingConfigVersions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTrainingConfigVersions(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TextAnalysisAuthoringTrainingConfigVersion.class));
    }
}
