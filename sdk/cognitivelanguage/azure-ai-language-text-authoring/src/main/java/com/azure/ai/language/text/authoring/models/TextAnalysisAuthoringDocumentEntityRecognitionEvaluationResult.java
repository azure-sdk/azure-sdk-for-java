// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the entity recognition evaluation result for a document.
 */
@Immutable
public final class TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult
    implements JsonSerializable<TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult> {
    /*
     * Represents the document labelled entities.
     */
    @Generated
    private final List<TextAnalysisAuthoringDocumentEntityRegionEvaluationResult> entities;

    /**
     * Creates an instance of TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult class.
     * 
     * @param entities the entities value to set.
     */
    @Generated
    private TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult(
        List<TextAnalysisAuthoringDocumentEntityRegionEvaluationResult> entities) {
        this.entities = entities;
    }

    /**
     * Get the entities property: Represents the document labelled entities.
     * 
     * @return the entities value.
     */
    @Generated
    public List<TextAnalysisAuthoringDocumentEntityRegionEvaluationResult> getEntities() {
        return this.entities;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("entities", this.entities, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<TextAnalysisAuthoringDocumentEntityRegionEvaluationResult> entities = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entities".equals(fieldName)) {
                    entities = reader.readArray(
                        reader1 -> TextAnalysisAuthoringDocumentEntityRegionEvaluationResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringDocumentEntityRecognitionEvaluationResult(entities);
        });
    }
}
