// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the comparison between the expected and predicted classes that are result from the evaluation operation.
 */
@Immutable
public final class TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult
    implements JsonSerializable<TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult> {
    /*
     * Represents the document's expected classes.
     */
    @Generated
    private final List<String> expectedClasses;

    /*
     * Represents the document's predicted classes.
     */
    @Generated
    private final List<String> predictedClasses;

    /**
     * Creates an instance of TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult class.
     * 
     * @param expectedClasses the expectedClasses value to set.
     * @param predictedClasses the predictedClasses value to set.
     */
    @Generated
    private TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult(List<String> expectedClasses,
        List<String> predictedClasses) {
        this.expectedClasses = expectedClasses;
        this.predictedClasses = predictedClasses;
    }

    /**
     * Get the expectedClasses property: Represents the document's expected classes.
     * 
     * @return the expectedClasses value.
     */
    @Generated
    public List<String> getExpectedClasses() {
        return this.expectedClasses;
    }

    /**
     * Get the predictedClasses property: Represents the document's predicted classes.
     * 
     * @return the predictedClasses value.
     */
    @Generated
    public List<String> getPredictedClasses() {
        return this.predictedClasses;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("expectedClasses", this.expectedClasses,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("predictedClasses", this.predictedClasses,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult if the JsonReader
     * was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> expectedClasses = null;
            List<String> predictedClasses = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expectedClasses".equals(fieldName)) {
                    expectedClasses = reader.readArray(reader1 -> reader1.getString());
                } else if ("predictedClasses".equals(fieldName)) {
                    predictedClasses = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringDocumentMultiLabelClassificationEvaluationResult(expectedClasses,
                predictedClasses);
        });
    }
}
