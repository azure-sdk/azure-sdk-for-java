// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the connection info for the Azure resource to use during data generation as part of training a custom
 * model.
 */
@Immutable
public final class DataGenerationConnectionInfo implements JsonSerializable<DataGenerationConnectionInfo> {
    /*
     * Connection type for data generation settings. Currently only supports Azure Open AI.
     */
    @Generated
    private final String kind = "azureOpenAI";

    /*
     * Resource ID for the data generation resource. Looks something like
     * "/subscriptions/<SUBSCRIPTION-ID-GUID>/resourceGroups/<RG-NAME>/providers/Microsoft.CognitiveServices/accounts/<AOAI-ACCOUNT-NAME>".
     */
    @Generated
    private final String resourceId;

    /*
     * Deployment name of model to be used for synthetic data generation.
     */
    @Generated
    private final String deploymentName;

    /**
     * Creates an instance of DataGenerationConnectionInfo class.
     * 
     * @param resourceId the resourceId value to set.
     * @param deploymentName the deploymentName value to set.
     */
    @Generated
    public DataGenerationConnectionInfo(String resourceId, String deploymentName) {
        this.resourceId = resourceId;
        this.deploymentName = deploymentName;
    }

    /**
     * Get the kind property: Connection type for data generation settings. Currently only supports Azure Open AI.
     * 
     * @return the kind value.
     */
    @Generated
    public String getKind() {
        return this.kind;
    }

    /**
     * Get the resourceId property: Resource ID for the data generation resource. Looks something like
     * "/subscriptions/&lt;SUBSCRIPTION-ID-GUID&gt;/resourceGroups/&lt;RG-NAME&gt;/providers/Microsoft.CognitiveServices/accounts/&lt;AOAI-ACCOUNT-NAME&gt;".
     * 
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the deploymentName property: Deployment name of model to be used for synthetic data generation.
     * 
     * @return the deploymentName value.
     */
    @Generated
    public String getDeploymentName() {
        return this.deploymentName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("deploymentName", this.deploymentName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataGenerationConnectionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataGenerationConnectionInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataGenerationConnectionInfo.
     */
    @Generated
    public static DataGenerationConnectionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String resourceId = null;
            String deploymentName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    resourceId = reader.getString();
                } else if ("deploymentName".equals(fieldName)) {
                    deploymentName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new DataGenerationConnectionInfo(resourceId, deploymentName);
        });
    }
}
