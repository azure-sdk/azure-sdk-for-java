// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a sub-list inside a list component.
 */
@Fluent
public final class TextAnalysisAuthoringExportedEntitySublist
    implements JsonSerializable<TextAnalysisAuthoringExportedEntitySublist> {
    /*
     * The key of the sub-list.
     */
    @Generated
    private String listKey;

    /*
     * The phrases of that correspond to the sub-list.
     */
    @Generated
    private List<TextAnalysisAuthoringExportedEntityListSynonym> synonyms;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedEntitySublist class.
     */
    @Generated
    public TextAnalysisAuthoringExportedEntitySublist() {
    }

    /**
     * Get the listKey property: The key of the sub-list.
     * 
     * @return the listKey value.
     */
    @Generated
    public String getListKey() {
        return this.listKey;
    }

    /**
     * Set the listKey property: The key of the sub-list.
     * 
     * @param listKey the listKey value to set.
     * @return the TextAnalysisAuthoringExportedEntitySublist object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedEntitySublist setListKey(String listKey) {
        this.listKey = listKey;
        return this;
    }

    /**
     * Get the synonyms property: The phrases of that correspond to the sub-list.
     * 
     * @return the synonyms value.
     */
    @Generated
    public List<TextAnalysisAuthoringExportedEntityListSynonym> getSynonyms() {
        return this.synonyms;
    }

    /**
     * Set the synonyms property: The phrases of that correspond to the sub-list.
     * 
     * @param synonyms the synonyms value to set.
     * @return the TextAnalysisAuthoringExportedEntitySublist object itself.
     */
    @Generated
    public TextAnalysisAuthoringExportedEntitySublist
        setSynonyms(List<TextAnalysisAuthoringExportedEntityListSynonym> synonyms) {
        this.synonyms = synonyms;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("listKey", this.listKey);
        jsonWriter.writeArrayField("synonyms", this.synonyms, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedEntitySublist from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedEntitySublist if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringExportedEntitySublist.
     */
    @Generated
    public static TextAnalysisAuthoringExportedEntitySublist fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringExportedEntitySublist deserializedTextAnalysisAuthoringExportedEntitySublist
                = new TextAnalysisAuthoringExportedEntitySublist();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("listKey".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringExportedEntitySublist.listKey = reader.getString();
                } else if ("synonyms".equals(fieldName)) {
                    List<TextAnalysisAuthoringExportedEntityListSynonym> synonyms
                        = reader.readArray(reader1 -> TextAnalysisAuthoringExportedEntityListSynonym.fromJson(reader1));
                    deserializedTextAnalysisAuthoringExportedEntitySublist.synonyms = synonyms;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringExportedEntitySublist;
        });
    }
}
