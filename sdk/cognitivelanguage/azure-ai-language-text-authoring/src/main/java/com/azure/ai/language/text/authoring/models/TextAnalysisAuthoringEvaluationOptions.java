// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the options used running the evaluation.
 */
@Fluent
public final class TextAnalysisAuthoringEvaluationOptions
    implements JsonSerializable<TextAnalysisAuthoringEvaluationOptions> {
    /*
     * Represents the evaluation kind. By default, the evaluation kind is set to percentage.
     */
    @Generated
    private EvaluationKind kind;

    /*
     * Represents the training dataset split percentage. Only needed in case the evaluation kind is percentage.
     */
    @Generated
    private Integer trainingSplitPercentage;

    /*
     * Represents the testing dataset split percentage. Only needed in case the evaluation kind is percentage.
     */
    @Generated
    private Integer testingSplitPercentage;

    /**
     * Creates an instance of TextAnalysisAuthoringEvaluationOptions class.
     */
    @Generated
    public TextAnalysisAuthoringEvaluationOptions() {
    }

    /**
     * Get the kind property: Represents the evaluation kind. By default, the evaluation kind is set to percentage.
     * 
     * @return the kind value.
     */
    @Generated
    public EvaluationKind getKind() {
        return this.kind;
    }

    /**
     * Set the kind property: Represents the evaluation kind. By default, the evaluation kind is set to percentage.
     * 
     * @param kind the kind value to set.
     * @return the TextAnalysisAuthoringEvaluationOptions object itself.
     */
    @Generated
    public TextAnalysisAuthoringEvaluationOptions setKind(EvaluationKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the trainingSplitPercentage property: Represents the training dataset split percentage. Only needed in case
     * the evaluation kind is percentage.
     * 
     * @return the trainingSplitPercentage value.
     */
    @Generated
    public Integer getTrainingSplitPercentage() {
        return this.trainingSplitPercentage;
    }

    /**
     * Set the trainingSplitPercentage property: Represents the training dataset split percentage. Only needed in case
     * the evaluation kind is percentage.
     * 
     * @param trainingSplitPercentage the trainingSplitPercentage value to set.
     * @return the TextAnalysisAuthoringEvaluationOptions object itself.
     */
    @Generated
    public TextAnalysisAuthoringEvaluationOptions setTrainingSplitPercentage(Integer trainingSplitPercentage) {
        this.trainingSplitPercentage = trainingSplitPercentage;
        return this;
    }

    /**
     * Get the testingSplitPercentage property: Represents the testing dataset split percentage. Only needed in case the
     * evaluation kind is percentage.
     * 
     * @return the testingSplitPercentage value.
     */
    @Generated
    public Integer getTestingSplitPercentage() {
        return this.testingSplitPercentage;
    }

    /**
     * Set the testingSplitPercentage property: Represents the testing dataset split percentage. Only needed in case the
     * evaluation kind is percentage.
     * 
     * @param testingSplitPercentage the testingSplitPercentage value to set.
     * @return the TextAnalysisAuthoringEvaluationOptions object itself.
     */
    @Generated
    public TextAnalysisAuthoringEvaluationOptions setTestingSplitPercentage(Integer testingSplitPercentage) {
        this.testingSplitPercentage = testingSplitPercentage;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeNumberField("trainingSplitPercentage", this.trainingSplitPercentage);
        jsonWriter.writeNumberField("testingSplitPercentage", this.testingSplitPercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringEvaluationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringEvaluationOptions if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringEvaluationOptions.
     */
    @Generated
    public static TextAnalysisAuthoringEvaluationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringEvaluationOptions deserializedTextAnalysisAuthoringEvaluationOptions
                = new TextAnalysisAuthoringEvaluationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringEvaluationOptions.kind
                        = EvaluationKind.fromString(reader.getString());
                } else if ("trainingSplitPercentage".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringEvaluationOptions.trainingSplitPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("testingSplitPercentage".equals(fieldName)) {
                    deserializedTextAnalysisAuthoringEvaluationOptions.testingSplitPercentage
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringEvaluationOptions;
        });
    }
}
