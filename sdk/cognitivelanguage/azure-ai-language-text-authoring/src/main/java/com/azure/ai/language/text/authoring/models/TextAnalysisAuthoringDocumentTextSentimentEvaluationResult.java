// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the comparison between the expected and predicted sentiment that result from an evaluation operation.
 */
@Immutable
public final class TextAnalysisAuthoringDocumentTextSentimentEvaluationResult
    implements JsonSerializable<TextAnalysisAuthoringDocumentTextSentimentEvaluationResult> {
    /*
     * Represents the document's expected sentiment labels.
     */
    @Generated
    private final List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> expectedSentimentSpans;

    /*
     * Represents the document's predicted sentiment labels.
     */
    @Generated
    private final List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> predictedSentimentSpans;

    /**
     * Creates an instance of TextAnalysisAuthoringDocumentTextSentimentEvaluationResult class.
     * 
     * @param expectedSentimentSpans the expectedSentimentSpans value to set.
     * @param predictedSentimentSpans the predictedSentimentSpans value to set.
     */
    @Generated
    private TextAnalysisAuthoringDocumentTextSentimentEvaluationResult(
        List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> expectedSentimentSpans,
        List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> predictedSentimentSpans) {
        this.expectedSentimentSpans = expectedSentimentSpans;
        this.predictedSentimentSpans = predictedSentimentSpans;
    }

    /**
     * Get the expectedSentimentSpans property: Represents the document's expected sentiment labels.
     * 
     * @return the expectedSentimentSpans value.
     */
    @Generated
    public List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> getExpectedSentimentSpans() {
        return this.expectedSentimentSpans;
    }

    /**
     * Get the predictedSentimentSpans property: Represents the document's predicted sentiment labels.
     * 
     * @return the predictedSentimentSpans value.
     */
    @Generated
    public List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> getPredictedSentimentSpans() {
        return this.predictedSentimentSpans;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("expectedSentimentSpans", this.expectedSentimentSpans,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("predictedSentimentSpans", this.predictedSentimentSpans,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDocumentTextSentimentEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDocumentTextSentimentEvaluationResult if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringDocumentTextSentimentEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringDocumentTextSentimentEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> expectedSentimentSpans = null;
            List<TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult> predictedSentimentSpans = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expectedSentimentSpans".equals(fieldName)) {
                    expectedSentimentSpans = reader.readArray(
                        reader1 -> TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult.fromJson(reader1));
                } else if ("predictedSentimentSpans".equals(fieldName)) {
                    predictedSentimentSpans = reader.readArray(
                        reader1 -> TextAnalysisAuthoringDocumentSentimentLabelEvaluationResult.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringDocumentTextSentimentEvaluationResult(expectedSentimentSpans,
                predictedSentimentSpans);
        });
    }
}
