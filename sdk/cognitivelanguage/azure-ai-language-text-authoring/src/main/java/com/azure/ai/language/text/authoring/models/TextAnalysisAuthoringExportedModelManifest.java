// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the properties for the exported model manifest.
 */
@Immutable
public final class TextAnalysisAuthoringExportedModelManifest
    implements JsonSerializable<TextAnalysisAuthoringExportedModelManifest> {
    /*
     * The model files belonging to this model.
     */
    @Generated
    private final List<TextAnalysisAuthoringModelFile> modelFiles;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedModelManifest class.
     * 
     * @param modelFiles the modelFiles value to set.
     */
    @Generated
    private TextAnalysisAuthoringExportedModelManifest(List<TextAnalysisAuthoringModelFile> modelFiles) {
        this.modelFiles = modelFiles;
    }

    /**
     * Get the modelFiles property: The model files belonging to this model.
     * 
     * @return the modelFiles value.
     */
    @Generated
    public List<TextAnalysisAuthoringModelFile> getModelFiles() {
        return this.modelFiles;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("modelFiles", this.modelFiles, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedModelManifest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedModelManifest if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringExportedModelManifest.
     */
    @Generated
    public static TextAnalysisAuthoringExportedModelManifest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<TextAnalysisAuthoringModelFile> modelFiles = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelFiles".equals(fieldName)) {
                    modelFiles = reader.readArray(reader1 -> TextAnalysisAuthoringModelFile.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringExportedModelManifest(modelFiles);
        });
    }
}
