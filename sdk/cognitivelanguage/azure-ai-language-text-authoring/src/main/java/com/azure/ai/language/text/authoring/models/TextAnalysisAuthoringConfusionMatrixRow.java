// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The TextAnalysisAuthoringConfusionMatrixRow model.
 */
@Immutable
public final class TextAnalysisAuthoringConfusionMatrixRow
    implements JsonSerializable<TextAnalysisAuthoringConfusionMatrixRow> {
    /*
     * Additional properties
     */
    @Generated
    private Map<String, TextAnalysisAuthoringConfusionMatrixCell> additionalProperties;

    /**
     * Creates an instance of TextAnalysisAuthoringConfusionMatrixRow class.
     */
    @Generated
    private TextAnalysisAuthoringConfusionMatrixRow() {
    }

    /**
     * Get the additionalProperties property: Additional properties.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, TextAnalysisAuthoringConfusionMatrixCell> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (additionalProperties != null) {
            for (Map.Entry<String, TextAnalysisAuthoringConfusionMatrixCell> additionalProperty : additionalProperties
                .entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringConfusionMatrixRow from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringConfusionMatrixRow if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringConfusionMatrixRow.
     */
    @Generated
    public static TextAnalysisAuthoringConfusionMatrixRow fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringConfusionMatrixRow deserializedTextAnalysisAuthoringConfusionMatrixRow
                = new TextAnalysisAuthoringConfusionMatrixRow();
            Map<String, TextAnalysisAuthoringConfusionMatrixCell> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if (additionalProperties == null) {
                    additionalProperties = new LinkedHashMap<>();
                }

                additionalProperties.put(fieldName, TextAnalysisAuthoringConfusionMatrixCell.fromJson(reader));
            }
            deserializedTextAnalysisAuthoringConfusionMatrixRow.additionalProperties = additionalProperties;

            return deserializedTextAnalysisAuthoringConfusionMatrixRow;
        });
    }
}
