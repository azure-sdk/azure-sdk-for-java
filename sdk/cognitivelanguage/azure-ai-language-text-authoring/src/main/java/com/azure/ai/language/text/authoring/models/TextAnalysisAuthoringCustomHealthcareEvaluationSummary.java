// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the evaluation summary for a custom health care project.
 */
@Immutable
public final class TextAnalysisAuthoringCustomHealthcareEvaluationSummary
    extends TextAnalysisAuthoringEvaluationSummary {
    /*
     * Represents the project type that the evaluation ran on.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.CUSTOM_HEALTHCARE;

    /*
     * Contains the data related to health care evaluation.
     */
    @Generated
    private final TextAnalysisAuthoringEntityRecognitionEvaluationSummary customHealthcareEvaluation;

    /**
     * Creates an instance of TextAnalysisAuthoringCustomHealthcareEvaluationSummary class.
     * 
     * @param evaluationOptions the evaluationOptions value to set.
     * @param customHealthcareEvaluation the customHealthcareEvaluation value to set.
     */
    @Generated
    private TextAnalysisAuthoringCustomHealthcareEvaluationSummary(
        TextAnalysisAuthoringEvaluationOptions evaluationOptions,
        TextAnalysisAuthoringEntityRecognitionEvaluationSummary customHealthcareEvaluation) {
        super(evaluationOptions);
        this.customHealthcareEvaluation = customHealthcareEvaluation;
    }

    /**
     * Get the projectKind property: Represents the project type that the evaluation ran on.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the customHealthcareEvaluation property: Contains the data related to health care evaluation.
     * 
     * @return the customHealthcareEvaluation value.
     */
    @Generated
    public TextAnalysisAuthoringEntityRecognitionEvaluationSummary getCustomHealthcareEvaluation() {
        return this.customHealthcareEvaluation;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("evaluationOptions", getEvaluationOptions());
        jsonWriter.writeJsonField("customHealthcareEvaluation", this.customHealthcareEvaluation);
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringCustomHealthcareEvaluationSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringCustomHealthcareEvaluationSummary if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringCustomHealthcareEvaluationSummary.
     */
    @Generated
    public static TextAnalysisAuthoringCustomHealthcareEvaluationSummary fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringEvaluationOptions evaluationOptions = null;
            TextAnalysisAuthoringEntityRecognitionEvaluationSummary customHealthcareEvaluation = null;
            ProjectKind projectKind = ProjectKind.CUSTOM_HEALTHCARE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("evaluationOptions".equals(fieldName)) {
                    evaluationOptions = TextAnalysisAuthoringEvaluationOptions.fromJson(reader);
                } else if ("customHealthcareEvaluation".equals(fieldName)) {
                    customHealthcareEvaluation
                        = TextAnalysisAuthoringEntityRecognitionEvaluationSummary.fromJson(reader);
                } else if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringCustomHealthcareEvaluationSummary deserializedTextAnalysisAuthoringCustomHealthcareEvaluationSummary
                = new TextAnalysisAuthoringCustomHealthcareEvaluationSummary(evaluationOptions,
                    customHealthcareEvaluation);
            deserializedTextAnalysisAuthoringCustomHealthcareEvaluationSummary.projectKind = projectKind;

            return deserializedTextAnalysisAuthoringCustomHealthcareEvaluationSummary;
        });
    }
}
