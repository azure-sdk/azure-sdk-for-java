// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Represents the evaluation summary for a custom sentiment project.
 */
@Immutable
public final class TextAnalysisAuthoringSpanSentimentEvaluationSummary
    implements JsonSerializable<TextAnalysisAuthoringSpanSentimentEvaluationSummary> {
    /*
     * Represents the confusion matrix between two sentiments (the two sentiments can be the same). The matrix is
     * between the sentiment that was labelled and the sentiment that was predicted.
     */
    @Generated
    private final TextAnalysisAuthoringConfusionMatrix confusionMatrix;

    /*
     * Represents the sentiment evaluation
     */
    @Generated
    private final Map<String, TextAnalysisAuthoringSentimentEvaluationSummary> sentiments;

    /*
     * Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     */
    @Generated
    private final double microF1;

    /*
     * Represents the micro precision. Expected value is a float between 0 and 1 inclusive.
     */
    @Generated
    private final double microPrecision;

    /*
     * Represents the micro recall. Expected value is a float between 0 and 1 inclusive.
     */
    @Generated
    private final double microRecall;

    /*
     * Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     */
    @Generated
    private final double macroF1;

    /*
     * Represents the macro precision. Expected value is a float between 0 and 1 inclusive.
     */
    @Generated
    private final double macroPrecision;

    /*
     * Represents the macro recall. Expected value is a float between 0 and 1 inclusive.
     */
    @Generated
    private final double macroRecall;

    /**
     * Creates an instance of TextAnalysisAuthoringSpanSentimentEvaluationSummary class.
     * 
     * @param confusionMatrix the confusionMatrix value to set.
     * @param sentiments the sentiments value to set.
     * @param microF1 the microF1 value to set.
     * @param microPrecision the microPrecision value to set.
     * @param microRecall the microRecall value to set.
     * @param macroF1 the macroF1 value to set.
     * @param macroPrecision the macroPrecision value to set.
     * @param macroRecall the macroRecall value to set.
     */
    @Generated
    private TextAnalysisAuthoringSpanSentimentEvaluationSummary(TextAnalysisAuthoringConfusionMatrix confusionMatrix,
        Map<String, TextAnalysisAuthoringSentimentEvaluationSummary> sentiments, double microF1, double microPrecision,
        double microRecall, double macroF1, double macroPrecision, double macroRecall) {
        this.confusionMatrix = confusionMatrix;
        this.sentiments = sentiments;
        this.microF1 = microF1;
        this.microPrecision = microPrecision;
        this.microRecall = microRecall;
        this.macroF1 = macroF1;
        this.macroPrecision = macroPrecision;
        this.macroRecall = macroRecall;
    }

    /**
     * Get the confusionMatrix property: Represents the confusion matrix between two sentiments (the two sentiments can
     * be the same). The matrix is between the sentiment that was labelled and the sentiment that was predicted.
     * 
     * @return the confusionMatrix value.
     */
    @Generated
    public TextAnalysisAuthoringConfusionMatrix getConfusionMatrix() {
        return this.confusionMatrix;
    }

    /**
     * Get the sentiments property: Represents the sentiment evaluation.
     * 
     * @return the sentiments value.
     */
    @Generated
    public Map<String, TextAnalysisAuthoringSentimentEvaluationSummary> getSentiments() {
        return this.sentiments;
    }

    /**
     * Get the microF1 property: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     * 
     * @return the microF1 value.
     */
    @Generated
    public double getMicroF1() {
        return this.microF1;
    }

    /**
     * Get the microPrecision property: Represents the micro precision. Expected value is a float between 0 and 1
     * inclusive.
     * 
     * @return the microPrecision value.
     */
    @Generated
    public double getMicroPrecision() {
        return this.microPrecision;
    }

    /**
     * Get the microRecall property: Represents the micro recall. Expected value is a float between 0 and 1 inclusive.
     * 
     * @return the microRecall value.
     */
    @Generated
    public double getMicroRecall() {
        return this.microRecall;
    }

    /**
     * Get the macroF1 property: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     * 
     * @return the macroF1 value.
     */
    @Generated
    public double getMacroF1() {
        return this.macroF1;
    }

    /**
     * Get the macroPrecision property: Represents the macro precision. Expected value is a float between 0 and 1
     * inclusive.
     * 
     * @return the macroPrecision value.
     */
    @Generated
    public double getMacroPrecision() {
        return this.macroPrecision;
    }

    /**
     * Get the macroRecall property: Represents the macro recall. Expected value is a float between 0 and 1 inclusive.
     * 
     * @return the macroRecall value.
     */
    @Generated
    public double getMacroRecall() {
        return this.macroRecall;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("confusionMatrix", this.confusionMatrix);
        jsonWriter.writeMapField("sentiments", this.sentiments, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeDoubleField("microF1", this.microF1);
        jsonWriter.writeDoubleField("microPrecision", this.microPrecision);
        jsonWriter.writeDoubleField("microRecall", this.microRecall);
        jsonWriter.writeDoubleField("macroF1", this.macroF1);
        jsonWriter.writeDoubleField("macroPrecision", this.macroPrecision);
        jsonWriter.writeDoubleField("macroRecall", this.macroRecall);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringSpanSentimentEvaluationSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringSpanSentimentEvaluationSummary if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringSpanSentimentEvaluationSummary.
     */
    @Generated
    public static TextAnalysisAuthoringSpanSentimentEvaluationSummary fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringConfusionMatrix confusionMatrix = null;
            Map<String, TextAnalysisAuthoringSentimentEvaluationSummary> sentiments = null;
            double microF1 = 0.0;
            double microPrecision = 0.0;
            double microRecall = 0.0;
            double macroF1 = 0.0;
            double macroPrecision = 0.0;
            double macroRecall = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("confusionMatrix".equals(fieldName)) {
                    confusionMatrix = TextAnalysisAuthoringConfusionMatrix.fromJson(reader);
                } else if ("sentiments".equals(fieldName)) {
                    sentiments
                        = reader.readMap(reader1 -> TextAnalysisAuthoringSentimentEvaluationSummary.fromJson(reader1));
                } else if ("microF1".equals(fieldName)) {
                    microF1 = reader.getDouble();
                } else if ("microPrecision".equals(fieldName)) {
                    microPrecision = reader.getDouble();
                } else if ("microRecall".equals(fieldName)) {
                    microRecall = reader.getDouble();
                } else if ("macroF1".equals(fieldName)) {
                    macroF1 = reader.getDouble();
                } else if ("macroPrecision".equals(fieldName)) {
                    macroPrecision = reader.getDouble();
                } else if ("macroRecall".equals(fieldName)) {
                    macroRecall = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringSpanSentimentEvaluationSummary(confusionMatrix, sentiments, microF1,
                microPrecision, microRecall, macroF1, macroPrecision, macroRecall);
        });
    }
}
