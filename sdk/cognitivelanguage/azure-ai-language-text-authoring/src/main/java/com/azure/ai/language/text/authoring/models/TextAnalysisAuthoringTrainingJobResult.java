// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents the output of a training job.
 */
@Immutable
public final class TextAnalysisAuthoringTrainingJobResult
    implements JsonSerializable<TextAnalysisAuthoringTrainingJobResult> {
    /*
     * Represents trained model label.
     */
    @Generated
    private final String modelLabel;

    /*
     * Represents training config version.
     */
    @Generated
    private final String trainingConfigVersion;

    /*
     * Represents model train status.
     */
    @Generated
    private final TextAnalysisAuthoringSubTrainingJobState trainingStatus;

    /*
     * Represents model evaluation status.
     */
    @Generated
    private TextAnalysisAuthoringSubTrainingJobState evaluationStatus;

    /*
     * Represents the estimate end date time for training and evaluation.
     */
    @Generated
    private OffsetDateTime estimatedEndDateTime;

    /**
     * Creates an instance of TextAnalysisAuthoringTrainingJobResult class.
     * 
     * @param modelLabel the modelLabel value to set.
     * @param trainingConfigVersion the trainingConfigVersion value to set.
     * @param trainingStatus the trainingStatus value to set.
     */
    @Generated
    private TextAnalysisAuthoringTrainingJobResult(String modelLabel, String trainingConfigVersion,
        TextAnalysisAuthoringSubTrainingJobState trainingStatus) {
        this.modelLabel = modelLabel;
        this.trainingConfigVersion = trainingConfigVersion;
        this.trainingStatus = trainingStatus;
    }

    /**
     * Get the modelLabel property: Represents trained model label.
     * 
     * @return the modelLabel value.
     */
    @Generated
    public String getModelLabel() {
        return this.modelLabel;
    }

    /**
     * Get the trainingConfigVersion property: Represents training config version.
     * 
     * @return the trainingConfigVersion value.
     */
    @Generated
    public String getTrainingConfigVersion() {
        return this.trainingConfigVersion;
    }

    /**
     * Get the trainingStatus property: Represents model train status.
     * 
     * @return the trainingStatus value.
     */
    @Generated
    public TextAnalysisAuthoringSubTrainingJobState getTrainingStatus() {
        return this.trainingStatus;
    }

    /**
     * Get the evaluationStatus property: Represents model evaluation status.
     * 
     * @return the evaluationStatus value.
     */
    @Generated
    public TextAnalysisAuthoringSubTrainingJobState getEvaluationStatus() {
        return this.evaluationStatus;
    }

    /**
     * Get the estimatedEndDateTime property: Represents the estimate end date time for training and evaluation.
     * 
     * @return the estimatedEndDateTime value.
     */
    @Generated
    public OffsetDateTime getEstimatedEndDateTime() {
        return this.estimatedEndDateTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelLabel", this.modelLabel);
        jsonWriter.writeStringField("trainingConfigVersion", this.trainingConfigVersion);
        jsonWriter.writeJsonField("trainingStatus", this.trainingStatus);
        jsonWriter.writeJsonField("evaluationStatus", this.evaluationStatus);
        jsonWriter.writeStringField("estimatedEndDateTime",
            this.estimatedEndDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.estimatedEndDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringTrainingJobResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringTrainingJobResult if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringTrainingJobResult.
     */
    @Generated
    public static TextAnalysisAuthoringTrainingJobResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String modelLabel = null;
            String trainingConfigVersion = null;
            TextAnalysisAuthoringSubTrainingJobState trainingStatus = null;
            TextAnalysisAuthoringSubTrainingJobState evaluationStatus = null;
            OffsetDateTime estimatedEndDateTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelLabel".equals(fieldName)) {
                    modelLabel = reader.getString();
                } else if ("trainingConfigVersion".equals(fieldName)) {
                    trainingConfigVersion = reader.getString();
                } else if ("trainingStatus".equals(fieldName)) {
                    trainingStatus = TextAnalysisAuthoringSubTrainingJobState.fromJson(reader);
                } else if ("evaluationStatus".equals(fieldName)) {
                    evaluationStatus = TextAnalysisAuthoringSubTrainingJobState.fromJson(reader);
                } else if ("estimatedEndDateTime".equals(fieldName)) {
                    estimatedEndDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringTrainingJobResult deserializedTextAnalysisAuthoringTrainingJobResult
                = new TextAnalysisAuthoringTrainingJobResult(modelLabel, trainingConfigVersion, trainingStatus);
            deserializedTextAnalysisAuthoringTrainingJobResult.evaluationStatus = evaluationStatus;
            deserializedTextAnalysisAuthoringTrainingJobResult.estimatedEndDateTime = estimatedEndDateTime;

            return deserializedTextAnalysisAuthoringTrainingJobResult;
        });
    }
}
