// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a cell in a confusion matrix.
 */
@Immutable
public final class TextAnalysisAuthoringConfusionMatrixCell
    implements JsonSerializable<TextAnalysisAuthoringConfusionMatrixCell> {
    /*
     * Represents normalized value in percentages.
     */
    @Generated
    private final double normalizedValue;

    /*
     * Represents raw value.
     */
    @Generated
    private final double rawValue;

    /**
     * Creates an instance of TextAnalysisAuthoringConfusionMatrixCell class.
     * 
     * @param normalizedValue the normalizedValue value to set.
     * @param rawValue the rawValue value to set.
     */
    @Generated
    private TextAnalysisAuthoringConfusionMatrixCell(double normalizedValue, double rawValue) {
        this.normalizedValue = normalizedValue;
        this.rawValue = rawValue;
    }

    /**
     * Get the normalizedValue property: Represents normalized value in percentages.
     * 
     * @return the normalizedValue value.
     */
    @Generated
    public double getNormalizedValue() {
        return this.normalizedValue;
    }

    /**
     * Get the rawValue property: Represents raw value.
     * 
     * @return the rawValue value.
     */
    @Generated
    public double getRawValue() {
        return this.rawValue;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("normalizedValue", this.normalizedValue);
        jsonWriter.writeDoubleField("rawValue", this.rawValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringConfusionMatrixCell from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringConfusionMatrixCell if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringConfusionMatrixCell.
     */
    @Generated
    public static TextAnalysisAuthoringConfusionMatrixCell fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double normalizedValue = 0.0;
            double rawValue = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("normalizedValue".equals(fieldName)) {
                    normalizedValue = reader.getDouble();
                } else if ("rawValue".equals(fieldName)) {
                    rawValue = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringConfusionMatrixCell(normalizedValue, rawValue);
        });
    }
}
