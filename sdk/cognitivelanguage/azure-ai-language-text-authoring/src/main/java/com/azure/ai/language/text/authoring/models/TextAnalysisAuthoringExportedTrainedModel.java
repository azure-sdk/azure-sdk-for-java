// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

/**
 * Represents an exported trained model.
 */
@Immutable
public final class TextAnalysisAuthoringExportedTrainedModel
    implements JsonSerializable<TextAnalysisAuthoringExportedTrainedModel> {
    /*
     * The exported model name.
     */
    @Generated
    private String exportedModelName;

    /*
     * The model ID.
     */
    @Generated
    private final String modelId;

    /*
     * The last trained date time of the model.
     */
    @Generated
    private final OffsetDateTime lastTrainedDateTime;

    /*
     * The last exported date time of the model.
     */
    @Generated
    private final OffsetDateTime lastExportedModelDateTime;

    /*
     * The model expiration date.
     */
    @Generated
    private final LocalDate modelExpirationDate;

    /*
     * The model training config version.
     */
    @Generated
    private final String modelTrainingConfigVersion;

    /**
     * Creates an instance of TextAnalysisAuthoringExportedTrainedModel class.
     * 
     * @param modelId the modelId value to set.
     * @param lastTrainedDateTime the lastTrainedDateTime value to set.
     * @param lastExportedModelDateTime the lastExportedModelDateTime value to set.
     * @param modelExpirationDate the modelExpirationDate value to set.
     * @param modelTrainingConfigVersion the modelTrainingConfigVersion value to set.
     */
    @Generated
    private TextAnalysisAuthoringExportedTrainedModel(String modelId, OffsetDateTime lastTrainedDateTime,
        OffsetDateTime lastExportedModelDateTime, LocalDate modelExpirationDate, String modelTrainingConfigVersion) {
        this.modelId = modelId;
        this.lastTrainedDateTime = lastTrainedDateTime;
        this.lastExportedModelDateTime = lastExportedModelDateTime;
        this.modelExpirationDate = modelExpirationDate;
        this.modelTrainingConfigVersion = modelTrainingConfigVersion;
    }

    /**
     * Get the exportedModelName property: The exported model name.
     * 
     * @return the exportedModelName value.
     */
    @Generated
    public String getExportedModelName() {
        return this.exportedModelName;
    }

    /**
     * Get the modelId property: The model ID.
     * 
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Get the lastTrainedDateTime property: The last trained date time of the model.
     * 
     * @return the lastTrainedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastTrainedDateTime() {
        return this.lastTrainedDateTime;
    }

    /**
     * Get the lastExportedModelDateTime property: The last exported date time of the model.
     * 
     * @return the lastExportedModelDateTime value.
     */
    @Generated
    public OffsetDateTime getLastExportedModelDateTime() {
        return this.lastExportedModelDateTime;
    }

    /**
     * Get the modelExpirationDate property: The model expiration date.
     * 
     * @return the modelExpirationDate value.
     */
    @Generated
    public LocalDate getModelExpirationDate() {
        return this.modelExpirationDate;
    }

    /**
     * Get the modelTrainingConfigVersion property: The model training config version.
     * 
     * @return the modelTrainingConfigVersion value.
     */
    @Generated
    public String getModelTrainingConfigVersion() {
        return this.modelTrainingConfigVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("lastTrainedDateTime",
            this.lastTrainedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastTrainedDateTime));
        jsonWriter.writeStringField("lastExportedModelDateTime",
            this.lastExportedModelDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastExportedModelDateTime));
        jsonWriter.writeStringField("modelExpirationDate", Objects.toString(this.modelExpirationDate, null));
        jsonWriter.writeStringField("modelTrainingConfigVersion", this.modelTrainingConfigVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringExportedTrainedModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringExportedTrainedModel if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringExportedTrainedModel.
     */
    @Generated
    public static TextAnalysisAuthoringExportedTrainedModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String exportedModelName = null;
            String modelId = null;
            OffsetDateTime lastTrainedDateTime = null;
            OffsetDateTime lastExportedModelDateTime = null;
            LocalDate modelExpirationDate = null;
            String modelTrainingConfigVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("exportedModelName".equals(fieldName)) {
                    exportedModelName = reader.getString();
                } else if ("modelId".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("lastTrainedDateTime".equals(fieldName)) {
                    lastTrainedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastExportedModelDateTime".equals(fieldName)) {
                    lastExportedModelDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("modelExpirationDate".equals(fieldName)) {
                    modelExpirationDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("modelTrainingConfigVersion".equals(fieldName)) {
                    modelTrainingConfigVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringExportedTrainedModel deserializedTextAnalysisAuthoringExportedTrainedModel
                = new TextAnalysisAuthoringExportedTrainedModel(modelId, lastTrainedDateTime, lastExportedModelDateTime,
                    modelExpirationDate, modelTrainingConfigVersion);
            deserializedTextAnalysisAuthoringExportedTrainedModel.exportedModelName = exportedModelName;

            return deserializedTextAnalysisAuthoringExportedTrainedModel;
        });
    }
}
