// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents an exported project.
 */
@Fluent
public final class ExportedProject implements JsonSerializable<ExportedProject> {
    /*
     * The version of the exported file.
     */
    @Generated
    private final String projectFileVersion;

    /*
     * Specifies the method used to interpret string offsets. For additional information see
     * https://aka.ms/text-analytics-offsets.
     */
    @Generated
    private final StringIndexType stringIndexType;

    /*
     * Represents the project metadata.
     */
    @Generated
    private final TextAnalysisAuthoringCreateProjectOptions metadata;

    /*
     * Represents the project assets.
     */
    @Generated
    private ExportedProjectAssets assets;

    /**
     * Creates an instance of ExportedProject class.
     * 
     * @param projectFileVersion the projectFileVersion value to set.
     * @param stringIndexType the stringIndexType value to set.
     * @param metadata the metadata value to set.
     */
    @Generated
    public ExportedProject(String projectFileVersion, StringIndexType stringIndexType,
        TextAnalysisAuthoringCreateProjectOptions metadata) {
        this.projectFileVersion = projectFileVersion;
        this.stringIndexType = stringIndexType;
        this.metadata = metadata;
    }

    /**
     * Get the projectFileVersion property: The version of the exported file.
     * 
     * @return the projectFileVersion value.
     */
    @Generated
    public String getProjectFileVersion() {
        return this.projectFileVersion;
    }

    /**
     * Get the stringIndexType property: Specifies the method used to interpret string offsets. For additional
     * information see https://aka.ms/text-analytics-offsets.
     * 
     * @return the stringIndexType value.
     */
    @Generated
    public StringIndexType getStringIndexType() {
        return this.stringIndexType;
    }

    /**
     * Get the metadata property: Represents the project metadata.
     * 
     * @return the metadata value.
     */
    @Generated
    public TextAnalysisAuthoringCreateProjectOptions getMetadata() {
        return this.metadata;
    }

    /**
     * Get the assets property: Represents the project assets.
     * 
     * @return the assets value.
     */
    @Generated
    public ExportedProjectAssets getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Represents the project assets.
     * 
     * @param assets the assets value to set.
     * @return the ExportedProject object itself.
     */
    @Generated
    public ExportedProject setAssets(ExportedProjectAssets assets) {
        this.assets = assets;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectFileVersion", this.projectFileVersion);
        jsonWriter.writeStringField("stringIndexType",
            this.stringIndexType == null ? null : this.stringIndexType.toString());
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeJsonField("assets", this.assets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportedProject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportedProject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportedProject.
     */
    @Generated
    public static ExportedProject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String projectFileVersion = null;
            StringIndexType stringIndexType = null;
            TextAnalysisAuthoringCreateProjectOptions metadata = null;
            ExportedProjectAssets assets = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectFileVersion".equals(fieldName)) {
                    projectFileVersion = reader.getString();
                } else if ("stringIndexType".equals(fieldName)) {
                    stringIndexType = StringIndexType.fromString(reader.getString());
                } else if ("metadata".equals(fieldName)) {
                    metadata = TextAnalysisAuthoringCreateProjectOptions.fromJson(reader);
                } else if ("assets".equals(fieldName)) {
                    assets = ExportedProjectAssets.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ExportedProject deserializedExportedProject
                = new ExportedProject(projectFileVersion, stringIndexType, metadata);
            deserializedExportedProject.assets = assets;

            return deserializedExportedProject;
        });
    }
}
