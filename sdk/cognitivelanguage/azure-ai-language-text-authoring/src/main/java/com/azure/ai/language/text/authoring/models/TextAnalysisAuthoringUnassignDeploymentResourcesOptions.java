// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the options to unassign Azure resources from a project.
 */
@Immutable
public final class TextAnalysisAuthoringUnassignDeploymentResourcesOptions
    implements JsonSerializable<TextAnalysisAuthoringUnassignDeploymentResourcesOptions> {
    /*
     * Represents the assigned resource IDs to be unassigned.
     */
    @Generated
    private final List<String> assignedResourceIds;

    /**
     * Creates an instance of TextAnalysisAuthoringUnassignDeploymentResourcesOptions class.
     * 
     * @param assignedResourceIds the assignedResourceIds value to set.
     */
    @Generated
    public TextAnalysisAuthoringUnassignDeploymentResourcesOptions(List<String> assignedResourceIds) {
        this.assignedResourceIds = assignedResourceIds;
    }

    /**
     * Get the assignedResourceIds property: Represents the assigned resource IDs to be unassigned.
     * 
     * @return the assignedResourceIds value.
     */
    @Generated
    public List<String> getAssignedResourceIds() {
        return this.assignedResourceIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("assignedResourceIds", this.assignedResourceIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringUnassignDeploymentResourcesOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringUnassignDeploymentResourcesOptions if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringUnassignDeploymentResourcesOptions.
     */
    @Generated
    public static TextAnalysisAuthoringUnassignDeploymentResourcesOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> assignedResourceIds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assignedResourceIds".equals(fieldName)) {
                    assignedResourceIds = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringUnassignDeploymentResourcesOptions(assignedResourceIds);
        });
    }
}
