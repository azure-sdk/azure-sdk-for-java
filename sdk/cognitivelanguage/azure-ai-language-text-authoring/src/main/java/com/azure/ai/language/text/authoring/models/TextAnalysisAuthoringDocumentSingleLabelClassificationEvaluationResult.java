// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the comparison between the expected and predicted class that result from an evaluation operation.
 */
@Immutable
public final class TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult
    implements JsonSerializable<TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult> {
    /*
     * Represents the document's expected class.
     */
    @Generated
    private final String expectedClass;

    /*
     * Represents the document's predicted class.
     */
    @Generated
    private final String predictedClass;

    /**
     * Creates an instance of TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult class.
     * 
     * @param expectedClass the expectedClass value to set.
     * @param predictedClass the predictedClass value to set.
     */
    @Generated
    private TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult(String expectedClass,
        String predictedClass) {
        this.expectedClass = expectedClass;
        this.predictedClass = predictedClass;
    }

    /**
     * Get the expectedClass property: Represents the document's expected class.
     * 
     * @return the expectedClass value.
     */
    @Generated
    public String getExpectedClass() {
        return this.expectedClass;
    }

    /**
     * Get the predictedClass property: Represents the document's predicted class.
     * 
     * @return the predictedClass value.
     */
    @Generated
    public String getPredictedClass() {
        return this.predictedClass;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expectedClass", this.expectedClass);
        jsonWriter.writeStringField("predictedClass", this.predictedClass);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult if the JsonReader
     * was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String expectedClass = null;
            String predictedClass = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expectedClass".equals(fieldName)) {
                    expectedClass = reader.getString();
                } else if ("predictedClass".equals(fieldName)) {
                    predictedClass = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringDocumentSingleLabelClassificationEvaluationResult(expectedClass,
                predictedClass);
        });
    }
}
