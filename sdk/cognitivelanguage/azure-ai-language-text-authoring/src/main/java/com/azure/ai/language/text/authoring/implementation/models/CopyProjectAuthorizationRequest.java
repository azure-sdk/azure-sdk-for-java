// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.implementation.models;

import com.azure.ai.language.text.authoring.models.ProjectKind;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CopyProjectAuthorizationRequest model.
 */
@Fluent
public final class CopyProjectAuthorizationRequest implements JsonSerializable<CopyProjectAuthorizationRequest> {
    /*
     * Represents the project kind.
     */
    @Generated
    private final ProjectKind projectKind;

    /*
     * The name of the storage container.
     */
    @Generated
    private String storageInputContainerName;

    /*
     * Whether to allow an existing project to be overwritten using the resulting copy authorization.
     */
    @Generated
    private Boolean allowOverwrite;

    /**
     * Creates an instance of CopyProjectAuthorizationRequest class.
     * 
     * @param projectKind the projectKind value to set.
     */
    @Generated
    public CopyProjectAuthorizationRequest(ProjectKind projectKind) {
        this.projectKind = projectKind;
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the storageInputContainerName property: The name of the storage container.
     * 
     * @return the storageInputContainerName value.
     */
    @Generated
    public String getStorageInputContainerName() {
        return this.storageInputContainerName;
    }

    /**
     * Set the storageInputContainerName property: The name of the storage container.
     * 
     * @param storageInputContainerName the storageInputContainerName value to set.
     * @return the CopyProjectAuthorizationRequest object itself.
     */
    @Generated
    public CopyProjectAuthorizationRequest setStorageInputContainerName(String storageInputContainerName) {
        this.storageInputContainerName = storageInputContainerName;
        return this;
    }

    /**
     * Get the allowOverwrite property: Whether to allow an existing project to be overwritten using the resulting copy
     * authorization.
     * 
     * @return the allowOverwrite value.
     */
    @Generated
    public Boolean isAllowOverwrite() {
        return this.allowOverwrite;
    }

    /**
     * Set the allowOverwrite property: Whether to allow an existing project to be overwritten using the resulting copy
     * authorization.
     * 
     * @param allowOverwrite the allowOverwrite value to set.
     * @return the CopyProjectAuthorizationRequest object itself.
     */
    @Generated
    public CopyProjectAuthorizationRequest setAllowOverwrite(Boolean allowOverwrite) {
        this.allowOverwrite = allowOverwrite;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        jsonWriter.writeStringField("storageInputContainerName", this.storageInputContainerName);
        jsonWriter.writeBooleanField("allowOverwrite", this.allowOverwrite);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CopyProjectAuthorizationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CopyProjectAuthorizationRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CopyProjectAuthorizationRequest.
     */
    @Generated
    public static CopyProjectAuthorizationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectKind projectKind = null;
            String storageInputContainerName = null;
            Boolean allowOverwrite = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else if ("storageInputContainerName".equals(fieldName)) {
                    storageInputContainerName = reader.getString();
                } else if ("allowOverwrite".equals(fieldName)) {
                    allowOverwrite = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            CopyProjectAuthorizationRequest deserializedCopyProjectAuthorizationRequest
                = new CopyProjectAuthorizationRequest(projectKind);
            deserializedCopyProjectAuthorizationRequest.storageInputContainerName = storageInputContainerName;
            deserializedCopyProjectAuthorizationRequest.allowOverwrite = allowOverwrite;

            return deserializedCopyProjectAuthorizationRequest;
        });
    }
}
