// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

/**
 * Represents a trained model.
 */
@Immutable
public final class TextAnalysisAuthoringProjectTrainedModel
    implements JsonSerializable<TextAnalysisAuthoringProjectTrainedModel> {
    /*
     * The trained model label.
     */
    @Generated
    private String label;

    /*
     * The model ID.
     */
    @Generated
    private final String modelId;

    /*
     * The last trained date time of the model.
     */
    @Generated
    private final OffsetDateTime lastTrainedDateTime;

    /*
     * The duration of the model's last training request in seconds.
     */
    @Generated
    private final int lastTrainingDurationInSeconds;

    /*
     * The model expiration date.
     */
    @Generated
    private final LocalDate modelExpirationDate;

    /*
     * The model training config version.
     */
    @Generated
    private final String modelTrainingConfigVersion;

    /*
     * The flag to indicate if the trained model has a snapshot ready.
     */
    @Generated
    private final boolean hasSnapshot;

    /**
     * Creates an instance of TextAnalysisAuthoringProjectTrainedModel class.
     * 
     * @param modelId the modelId value to set.
     * @param lastTrainedDateTime the lastTrainedDateTime value to set.
     * @param lastTrainingDurationInSeconds the lastTrainingDurationInSeconds value to set.
     * @param modelExpirationDate the modelExpirationDate value to set.
     * @param modelTrainingConfigVersion the modelTrainingConfigVersion value to set.
     * @param hasSnapshot the hasSnapshot value to set.
     */
    @Generated
    private TextAnalysisAuthoringProjectTrainedModel(String modelId, OffsetDateTime lastTrainedDateTime,
        int lastTrainingDurationInSeconds, LocalDate modelExpirationDate, String modelTrainingConfigVersion,
        boolean hasSnapshot) {
        this.modelId = modelId;
        this.lastTrainedDateTime = lastTrainedDateTime;
        this.lastTrainingDurationInSeconds = lastTrainingDurationInSeconds;
        this.modelExpirationDate = modelExpirationDate;
        this.modelTrainingConfigVersion = modelTrainingConfigVersion;
        this.hasSnapshot = hasSnapshot;
    }

    /**
     * Get the label property: The trained model label.
     * 
     * @return the label value.
     */
    @Generated
    public String getLabel() {
        return this.label;
    }

    /**
     * Get the modelId property: The model ID.
     * 
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Get the lastTrainedDateTime property: The last trained date time of the model.
     * 
     * @return the lastTrainedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastTrainedDateTime() {
        return this.lastTrainedDateTime;
    }

    /**
     * Get the lastTrainingDurationInSeconds property: The duration of the model's last training request in seconds.
     * 
     * @return the lastTrainingDurationInSeconds value.
     */
    @Generated
    public int getLastTrainingDurationInSeconds() {
        return this.lastTrainingDurationInSeconds;
    }

    /**
     * Get the modelExpirationDate property: The model expiration date.
     * 
     * @return the modelExpirationDate value.
     */
    @Generated
    public LocalDate getModelExpirationDate() {
        return this.modelExpirationDate;
    }

    /**
     * Get the modelTrainingConfigVersion property: The model training config version.
     * 
     * @return the modelTrainingConfigVersion value.
     */
    @Generated
    public String getModelTrainingConfigVersion() {
        return this.modelTrainingConfigVersion;
    }

    /**
     * Get the hasSnapshot property: The flag to indicate if the trained model has a snapshot ready.
     * 
     * @return the hasSnapshot value.
     */
    @Generated
    public boolean isHasSnapshot() {
        return this.hasSnapshot;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("lastTrainedDateTime",
            this.lastTrainedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastTrainedDateTime));
        jsonWriter.writeIntField("lastTrainingDurationInSeconds", this.lastTrainingDurationInSeconds);
        jsonWriter.writeStringField("modelExpirationDate", Objects.toString(this.modelExpirationDate, null));
        jsonWriter.writeStringField("modelTrainingConfigVersion", this.modelTrainingConfigVersion);
        jsonWriter.writeBooleanField("hasSnapshot", this.hasSnapshot);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringProjectTrainedModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringProjectTrainedModel if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringProjectTrainedModel.
     */
    @Generated
    public static TextAnalysisAuthoringProjectTrainedModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String label = null;
            String modelId = null;
            OffsetDateTime lastTrainedDateTime = null;
            int lastTrainingDurationInSeconds = 0;
            LocalDate modelExpirationDate = null;
            String modelTrainingConfigVersion = null;
            boolean hasSnapshot = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("label".equals(fieldName)) {
                    label = reader.getString();
                } else if ("modelId".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("lastTrainedDateTime".equals(fieldName)) {
                    lastTrainedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastTrainingDurationInSeconds".equals(fieldName)) {
                    lastTrainingDurationInSeconds = reader.getInt();
                } else if ("modelExpirationDate".equals(fieldName)) {
                    modelExpirationDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("modelTrainingConfigVersion".equals(fieldName)) {
                    modelTrainingConfigVersion = reader.getString();
                } else if ("hasSnapshot".equals(fieldName)) {
                    hasSnapshot = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringProjectTrainedModel deserializedTextAnalysisAuthoringProjectTrainedModel
                = new TextAnalysisAuthoringProjectTrainedModel(modelId, lastTrainedDateTime,
                    lastTrainingDurationInSeconds, modelExpirationDate, modelTrainingConfigVersion, hasSnapshot);
            deserializedTextAnalysisAuthoringProjectTrainedModel.label = label;

            return deserializedTextAnalysisAuthoringProjectTrainedModel;
        });
    }
}
