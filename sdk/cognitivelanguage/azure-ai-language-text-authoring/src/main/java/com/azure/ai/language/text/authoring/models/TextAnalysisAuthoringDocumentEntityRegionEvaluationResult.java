// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the evaluation comparison between the expected and predicted entities of a document region.
 */
@Immutable
public final class TextAnalysisAuthoringDocumentEntityRegionEvaluationResult
    implements JsonSerializable<TextAnalysisAuthoringDocumentEntityRegionEvaluationResult> {
    /*
     * Represents the region's expected entity labels.
     */
    @Generated
    private final List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> expectedEntities;

    /*
     * Represents the region's predicted entity labels.
     */
    @Generated
    private final List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> predictedEntities;

    /*
     * Represents the region offset.
     */
    @Generated
    private final int regionOffset;

    /*
     * Represents the region length.
     */
    @Generated
    private final int regionLength;

    /**
     * Creates an instance of TextAnalysisAuthoringDocumentEntityRegionEvaluationResult class.
     * 
     * @param expectedEntities the expectedEntities value to set.
     * @param predictedEntities the predictedEntities value to set.
     * @param regionOffset the regionOffset value to set.
     * @param regionLength the regionLength value to set.
     */
    @Generated
    private TextAnalysisAuthoringDocumentEntityRegionEvaluationResult(
        List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> expectedEntities,
        List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> predictedEntities, int regionOffset,
        int regionLength) {
        this.expectedEntities = expectedEntities;
        this.predictedEntities = predictedEntities;
        this.regionOffset = regionOffset;
        this.regionLength = regionLength;
    }

    /**
     * Get the expectedEntities property: Represents the region's expected entity labels.
     * 
     * @return the expectedEntities value.
     */
    @Generated
    public List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> getExpectedEntities() {
        return this.expectedEntities;
    }

    /**
     * Get the predictedEntities property: Represents the region's predicted entity labels.
     * 
     * @return the predictedEntities value.
     */
    @Generated
    public List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> getPredictedEntities() {
        return this.predictedEntities;
    }

    /**
     * Get the regionOffset property: Represents the region offset.
     * 
     * @return the regionOffset value.
     */
    @Generated
    public int getRegionOffset() {
        return this.regionOffset;
    }

    /**
     * Get the regionLength property: Represents the region length.
     * 
     * @return the regionLength value.
     */
    @Generated
    public int getRegionLength() {
        return this.regionLength;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("expectedEntities", this.expectedEntities,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("predictedEntities", this.predictedEntities,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeIntField("regionOffset", this.regionOffset);
        jsonWriter.writeIntField("regionLength", this.regionLength);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDocumentEntityRegionEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDocumentEntityRegionEvaluationResult if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringDocumentEntityRegionEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringDocumentEntityRegionEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> expectedEntities = null;
            List<TextAnalysisAuthoringDocumentEntityLabelEvaluationResult> predictedEntities = null;
            int regionOffset = 0;
            int regionLength = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expectedEntities".equals(fieldName)) {
                    expectedEntities = reader.readArray(
                        reader1 -> TextAnalysisAuthoringDocumentEntityLabelEvaluationResult.fromJson(reader1));
                } else if ("predictedEntities".equals(fieldName)) {
                    predictedEntities = reader.readArray(
                        reader1 -> TextAnalysisAuthoringDocumentEntityLabelEvaluationResult.fromJson(reader1));
                } else if ("regionOffset".equals(fieldName)) {
                    regionOffset = reader.getInt();
                } else if ("regionLength".equals(fieldName)) {
                    regionLength = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new TextAnalysisAuthoringDocumentEntityRegionEvaluationResult(expectedEntities, predictedEntities,
                regionOffset, regionLength);
        });
    }
}
