// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the document evaluation result for a custom sentiment project.
 */
@Immutable
public final class TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult
    extends TextAnalysisAuthoringDocumentEvaluationResult {
    /*
     * Represents the project kind.
     */
    @Generated
    private ProjectKind projectKind = ProjectKind.CUSTOM_TEXT_SENTIMENT;

    /*
     * Represents the evaluation prediction for text sentiment.
     */
    @Generated
    private final TextAnalysisAuthoringDocumentTextSentimentEvaluationResult customTextSentimentResult;

    /**
     * Creates an instance of TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult class.
     * 
     * @param location the location value to set.
     * @param language the language value to set.
     * @param customTextSentimentResult the customTextSentimentResult value to set.
     */
    @Generated
    private TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult(String location, String language,
        TextAnalysisAuthoringDocumentTextSentimentEvaluationResult customTextSentimentResult) {
        super(location, language);
        this.customTextSentimentResult = customTextSentimentResult;
    }

    /**
     * Get the projectKind property: Represents the project kind.
     * 
     * @return the projectKind value.
     */
    @Generated
    @Override
    public ProjectKind getProjectKind() {
        return this.projectKind;
    }

    /**
     * Get the customTextSentimentResult property: Represents the evaluation prediction for text sentiment.
     * 
     * @return the customTextSentimentResult value.
     */
    @Generated
    public TextAnalysisAuthoringDocumentTextSentimentEvaluationResult getCustomTextSentimentResult() {
        return this.customTextSentimentResult;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", getLocation());
        jsonWriter.writeStringField("language", getLanguage());
        jsonWriter.writeJsonField("customTextSentimentResult", this.customTextSentimentResult);
        jsonWriter.writeStringField("projectKind", this.projectKind == null ? null : this.projectKind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult.
     */
    @Generated
    public static TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String location = null;
            String language = null;
            TextAnalysisAuthoringDocumentTextSentimentEvaluationResult customTextSentimentResult = null;
            ProjectKind projectKind = ProjectKind.CUSTOM_TEXT_SENTIMENT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("customTextSentimentResult".equals(fieldName)) {
                    customTextSentimentResult
                        = TextAnalysisAuthoringDocumentTextSentimentEvaluationResult.fromJson(reader);
                } else if ("projectKind".equals(fieldName)) {
                    projectKind = ProjectKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult deserializedTextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult
                = new TextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult(location, language,
                    customTextSentimentResult);
            deserializedTextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult.projectKind = projectKind;

            return deserializedTextAnalysisAuthoringCustomTextSentimentDocumentEvaluationResult;
        });
    }
}
