// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.language.text.authoring.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the options for deleting a project deployment.
 */
@Fluent
public final class TextAnalysisAuthoringDeleteDeploymentOptions
    implements JsonSerializable<TextAnalysisAuthoringDeleteDeploymentOptions> {
    /*
     * Represents the resource IDs to delete the deployment from. If not provided, the deployment will be rolled out
     * from all the resources it is deployed to. If provided, it will delete the deployment only from the specified
     * assigned resources, and leave it for the rest.
     */
    @Generated
    private List<String> assignedResourceIds;

    /**
     * Creates an instance of TextAnalysisAuthoringDeleteDeploymentOptions class.
     */
    @Generated
    public TextAnalysisAuthoringDeleteDeploymentOptions() {
    }

    /**
     * Get the assignedResourceIds property: Represents the resource IDs to delete the deployment from. If not provided,
     * the deployment will be rolled out from all the resources it is deployed to. If provided, it will delete the
     * deployment only from the specified assigned resources, and leave it for the rest.
     * 
     * @return the assignedResourceIds value.
     */
    @Generated
    public List<String> getAssignedResourceIds() {
        return this.assignedResourceIds;
    }

    /**
     * Set the assignedResourceIds property: Represents the resource IDs to delete the deployment from. If not provided,
     * the deployment will be rolled out from all the resources it is deployed to. If provided, it will delete the
     * deployment only from the specified assigned resources, and leave it for the rest.
     * 
     * @param assignedResourceIds the assignedResourceIds value to set.
     * @return the TextAnalysisAuthoringDeleteDeploymentOptions object itself.
     */
    @Generated
    public TextAnalysisAuthoringDeleteDeploymentOptions setAssignedResourceIds(List<String> assignedResourceIds) {
        this.assignedResourceIds = assignedResourceIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("assignedResourceIds", this.assignedResourceIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TextAnalysisAuthoringDeleteDeploymentOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TextAnalysisAuthoringDeleteDeploymentOptions if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TextAnalysisAuthoringDeleteDeploymentOptions.
     */
    @Generated
    public static TextAnalysisAuthoringDeleteDeploymentOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextAnalysisAuthoringDeleteDeploymentOptions deserializedTextAnalysisAuthoringDeleteDeploymentOptions
                = new TextAnalysisAuthoringDeleteDeploymentOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assignedResourceIds".equals(fieldName)) {
                    List<String> assignedResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedTextAnalysisAuthoringDeleteDeploymentOptions.assignedResourceIds = assignedResourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTextAnalysisAuthoringDeleteDeploymentOptions;
        });
    }
}
