// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Query Parameters for Detailed carbon emissions by pageSize.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "reportType")
@JsonTypeName("ItemDetailsReport")
@Fluent
public final class ItemDetailsQueryFilter extends QueryFilter {
    /*
     * Item Category type
     */
    @JsonProperty(value = "categoryType", required = true)
    private CategoryTypeEnum categoryType;

    /*
     * Order by column name
     */
    @JsonProperty(value = "orderBy", required = true)
    private String orderBy;

    /*
     * Direction for sorting
     */
    @JsonProperty(value = "sortDirection", required = true)
    private String sortDirection;

    /*
     * Group category name
     */
    @JsonProperty(value = "groupCategory", required = true)
    private String groupCategory;

    /*
     * Number of items to return
     */
    @JsonProperty(value = "pageSize", required = true)
    private int pageSize;

    /*
     * The number of result items to skip
     */
    @JsonProperty(value = "skipToken")
    private String skipToken;

    /**
     * Creates an instance of ItemDetailsQueryFilter class.
     */
    public ItemDetailsQueryFilter() {
    }

    /**
     * Get the categoryType property: Item Category type.
     * 
     * @return the categoryType value.
     */
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Set the categoryType property: Item Category type.
     * 
     * @param categoryType the categoryType value to set.
     * @return the ItemDetailsQueryFilter object itself.
     */
    public ItemDetailsQueryFilter withCategoryType(CategoryTypeEnum categoryType) {
        this.categoryType = categoryType;
        return this;
    }

    /**
     * Get the orderBy property: Order by column name.
     * 
     * @return the orderBy value.
     */
    public String orderBy() {
        return this.orderBy;
    }

    /**
     * Set the orderBy property: Order by column name.
     * 
     * @param orderBy the orderBy value to set.
     * @return the ItemDetailsQueryFilter object itself.
     */
    public ItemDetailsQueryFilter withOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Get the sortDirection property: Direction for sorting.
     * 
     * @return the sortDirection value.
     */
    public String sortDirection() {
        return this.sortDirection;
    }

    /**
     * Set the sortDirection property: Direction for sorting.
     * 
     * @param sortDirection the sortDirection value to set.
     * @return the ItemDetailsQueryFilter object itself.
     */
    public ItemDetailsQueryFilter withSortDirection(String sortDirection) {
        this.sortDirection = sortDirection;
        return this;
    }

    /**
     * Get the groupCategory property: Group category name.
     * 
     * @return the groupCategory value.
     */
    public String groupCategory() {
        return this.groupCategory;
    }

    /**
     * Set the groupCategory property: Group category name.
     * 
     * @param groupCategory the groupCategory value to set.
     * @return the ItemDetailsQueryFilter object itself.
     */
    public ItemDetailsQueryFilter withGroupCategory(String groupCategory) {
        this.groupCategory = groupCategory;
        return this;
    }

    /**
     * Get the pageSize property: Number of items to return.
     * 
     * @return the pageSize value.
     */
    public int pageSize() {
        return this.pageSize;
    }

    /**
     * Set the pageSize property: Number of items to return.
     * 
     * @param pageSize the pageSize value to set.
     * @return the ItemDetailsQueryFilter object itself.
     */
    public ItemDetailsQueryFilter withPageSize(int pageSize) {
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Get the skipToken property: The number of result items to skip.
     * 
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: The number of result items to skip.
     * 
     * @param skipToken the skipToken value to set.
     * @return the ItemDetailsQueryFilter object itself.
     */
    public ItemDetailsQueryFilter withSkipToken(String skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDetailsQueryFilter withDateRange(DateRange dateRange) {
        super.withDateRange(dateRange);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDetailsQueryFilter withSubscriptionList(List<String> subscriptionList) {
        super.withSubscriptionList(subscriptionList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDetailsQueryFilter withResourceGroupUrlList(List<String> resourceGroupUrlList) {
        super.withResourceGroupUrlList(resourceGroupUrlList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDetailsQueryFilter withResourceTypeList(List<String> resourceTypeList) {
        super.withResourceTypeList(resourceTypeList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDetailsQueryFilter withLocationList(List<String> locationList) {
        super.withLocationList(locationList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ItemDetailsQueryFilter withCarbonScopeList(List<EmissionScopeEnum> carbonScopeList) {
        super.withCarbonScopeList(carbonScopeList);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (categoryType() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property categoryType in model ItemDetailsQueryFilter"));
        }
        if (orderBy() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property orderBy in model ItemDetailsQueryFilter"));
        }
        if (sortDirection() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property sortDirection in model ItemDetailsQueryFilter"));
        }
        if (groupCategory() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property groupCategory in model ItemDetailsQueryFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ItemDetailsQueryFilter.class);
}
