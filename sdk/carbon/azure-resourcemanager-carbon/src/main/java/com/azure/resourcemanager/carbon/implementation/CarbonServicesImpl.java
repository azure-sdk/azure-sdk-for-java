// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.carbon.fluent.CarbonServicesClient;
import com.azure.resourcemanager.carbon.fluent.models.CarbonEmissionDataAvailableDateRangeInner;
import com.azure.resourcemanager.carbon.fluent.models.CarbonEmissionDataInner;
import com.azure.resourcemanager.carbon.models.CarbonEmissionData;
import com.azure.resourcemanager.carbon.models.CarbonEmissionDataAvailableDateRange;
import com.azure.resourcemanager.carbon.models.CarbonServices;
import com.azure.resourcemanager.carbon.models.QueryFilter;

public final class CarbonServicesImpl implements CarbonServices {
    private static final ClientLogger LOGGER = new ClientLogger(CarbonServicesImpl.class);

    private final CarbonServicesClient innerClient;

    private final com.azure.resourcemanager.carbon.CarbonManager serviceManager;

    public CarbonServicesImpl(CarbonServicesClient innerClient,
        com.azure.resourcemanager.carbon.CarbonManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<CarbonEmissionData> listCarbonEmissionReports(QueryFilter queryParameters) {
        PagedIterable<CarbonEmissionDataInner> inner = this.serviceClient().listCarbonEmissionReports(queryParameters);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CarbonEmissionDataImpl(inner1, this.manager()));
    }

    public PagedIterable<CarbonEmissionData> listCarbonEmissionReports(QueryFilter queryParameters, Context context) {
        PagedIterable<CarbonEmissionDataInner> inner
            = this.serviceClient().listCarbonEmissionReports(queryParameters, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CarbonEmissionDataImpl(inner1, this.manager()));
    }

    public Response<CarbonEmissionDataAvailableDateRange>
        queryCarbonEmissionDataAvailableDateRangeWithResponse(Context context) {
        Response<CarbonEmissionDataAvailableDateRangeInner> inner
            = this.serviceClient().queryCarbonEmissionDataAvailableDateRangeWithResponse(context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CarbonEmissionDataAvailableDateRangeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CarbonEmissionDataAvailableDateRange queryCarbonEmissionDataAvailableDateRange() {
        CarbonEmissionDataAvailableDateRangeInner inner
            = this.serviceClient().queryCarbonEmissionDataAvailableDateRange();
        if (inner != null) {
            return new CarbonEmissionDataAvailableDateRangeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private CarbonServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.carbon.CarbonManager manager() {
        return this.serviceManager;
    }
}
