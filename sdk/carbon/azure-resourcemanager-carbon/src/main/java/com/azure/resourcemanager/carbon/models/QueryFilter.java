// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Query filter parameter specified by users.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "reportType",
    defaultImpl = QueryFilter.class)
@JsonTypeName("QueryFilter")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "ItemDetailsReport", value = ItemDetailsQueryFilter.class),
    @JsonSubTypes.Type(name = "MonthlySummaryReport", value = MonthlySummaryReportQueryFilter.class),
    @JsonSubTypes.Type(name = "OverallSummaryReport", value = OverallSummaryReportQueryFilter.class),
    @JsonSubTypes.Type(name = "TopItemsMonthlySummaryReport", value = TopItemsMonthlySummaryReportQueryFilter.class),
    @JsonSubTypes.Type(name = "TopItemsSummaryReport", value = TopItemsSummaryReportQueryFilter.class) })
@Fluent
public class QueryFilter {
    /*
     * The start date and end date for carbon emissions data
     */
    @JsonProperty(value = "dateRange", required = true)
    private DateRange dateRange;

    /*
     * SubscriptionId list for carbon emissions data
     */
    @JsonProperty(value = "subscriptionList", required = true)
    private List<String> subscriptionList;

    /*
     * resourceGroupUrl list for carbon emissions data
     */
    @JsonProperty(value = "resourceGroupUrlList")
    private List<String> resourceGroupUrlList;

    /*
     * resource type list for carbon emissions data
     */
    @JsonProperty(value = "resourceTypeList")
    private List<String> resourceTypeList;

    /*
     * Location list for carbon emissions data
     */
    @JsonProperty(value = "locationList")
    private List<String> locationList;

    /*
     * Carbon emission scope for carbon emissions data
     */
    @JsonProperty(value = "carbonScopeList", required = true)
    private List<EmissionScopeEnum> carbonScopeList;

    /**
     * Creates an instance of QueryFilter class.
     */
    public QueryFilter() {
    }

    /**
     * Get the dateRange property: The start date and end date for carbon emissions data.
     * 
     * @return the dateRange value.
     */
    public DateRange dateRange() {
        return this.dateRange;
    }

    /**
     * Set the dateRange property: The start date and end date for carbon emissions data.
     * 
     * @param dateRange the dateRange value to set.
     * @return the QueryFilter object itself.
     */
    public QueryFilter withDateRange(DateRange dateRange) {
        this.dateRange = dateRange;
        return this;
    }

    /**
     * Get the subscriptionList property: SubscriptionId list for carbon emissions data.
     * 
     * @return the subscriptionList value.
     */
    public List<String> subscriptionList() {
        return this.subscriptionList;
    }

    /**
     * Set the subscriptionList property: SubscriptionId list for carbon emissions data.
     * 
     * @param subscriptionList the subscriptionList value to set.
     * @return the QueryFilter object itself.
     */
    public QueryFilter withSubscriptionList(List<String> subscriptionList) {
        this.subscriptionList = subscriptionList;
        return this;
    }

    /**
     * Get the resourceGroupUrlList property: resourceGroupUrl list for carbon emissions data.
     * 
     * @return the resourceGroupUrlList value.
     */
    public List<String> resourceGroupUrlList() {
        return this.resourceGroupUrlList;
    }

    /**
     * Set the resourceGroupUrlList property: resourceGroupUrl list for carbon emissions data.
     * 
     * @param resourceGroupUrlList the resourceGroupUrlList value to set.
     * @return the QueryFilter object itself.
     */
    public QueryFilter withResourceGroupUrlList(List<String> resourceGroupUrlList) {
        this.resourceGroupUrlList = resourceGroupUrlList;
        return this;
    }

    /**
     * Get the resourceTypeList property: resource type list for carbon emissions data.
     * 
     * @return the resourceTypeList value.
     */
    public List<String> resourceTypeList() {
        return this.resourceTypeList;
    }

    /**
     * Set the resourceTypeList property: resource type list for carbon emissions data.
     * 
     * @param resourceTypeList the resourceTypeList value to set.
     * @return the QueryFilter object itself.
     */
    public QueryFilter withResourceTypeList(List<String> resourceTypeList) {
        this.resourceTypeList = resourceTypeList;
        return this;
    }

    /**
     * Get the locationList property: Location list for carbon emissions data.
     * 
     * @return the locationList value.
     */
    public List<String> locationList() {
        return this.locationList;
    }

    /**
     * Set the locationList property: Location list for carbon emissions data.
     * 
     * @param locationList the locationList value to set.
     * @return the QueryFilter object itself.
     */
    public QueryFilter withLocationList(List<String> locationList) {
        this.locationList = locationList;
        return this;
    }

    /**
     * Get the carbonScopeList property: Carbon emission scope for carbon emissions data.
     * 
     * @return the carbonScopeList value.
     */
    public List<EmissionScopeEnum> carbonScopeList() {
        return this.carbonScopeList;
    }

    /**
     * Set the carbonScopeList property: Carbon emission scope for carbon emissions data.
     * 
     * @param carbonScopeList the carbonScopeList value to set.
     * @return the QueryFilter object itself.
     */
    public QueryFilter withCarbonScopeList(List<EmissionScopeEnum> carbonScopeList) {
        this.carbonScopeList = carbonScopeList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dateRange() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property dateRange in model QueryFilter"));
        } else {
            dateRange().validate();
        }
        if (subscriptionList() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property subscriptionList in model QueryFilter"));
        }
        if (carbonScopeList() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property carbonScopeList in model QueryFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(QueryFilter.class);
}
