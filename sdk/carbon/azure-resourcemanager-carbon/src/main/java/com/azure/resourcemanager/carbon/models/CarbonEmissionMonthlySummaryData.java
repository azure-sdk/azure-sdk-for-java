// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.carbon.fluent.models.CarbonEmissionDataInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Response for Monthly Carbon Emissions Summary.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "dataType")
@JsonTypeName("MonthlySummaryData")
@Fluent
public final class CarbonEmissionMonthlySummaryData extends CarbonEmissionDataInner {
    /*
     * Monthly date string
     */
    @JsonProperty(value = "date", required = true)
    private String date;

    /*
     * Carbon Intensity
     */
    @JsonProperty(value = "carbonIntensity", required = true)
    private double carbonIntensity;

    /**
     * Creates an instance of CarbonEmissionMonthlySummaryData class.
     */
    public CarbonEmissionMonthlySummaryData() {
    }

    /**
     * Get the date property: Monthly date string.
     * 
     * @return the date value.
     */
    public String date() {
        return this.date;
    }

    /**
     * Set the date property: Monthly date string.
     * 
     * @param date the date value to set.
     * @return the CarbonEmissionMonthlySummaryData object itself.
     */
    public CarbonEmissionMonthlySummaryData withDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * Get the carbonIntensity property: Carbon Intensity.
     * 
     * @return the carbonIntensity value.
     */
    public double carbonIntensity() {
        return this.carbonIntensity;
    }

    /**
     * Set the carbonIntensity property: Carbon Intensity.
     * 
     * @param carbonIntensity the carbonIntensity value to set.
     * @return the CarbonEmissionMonthlySummaryData object itself.
     */
    public CarbonEmissionMonthlySummaryData withCarbonIntensity(double carbonIntensity) {
        this.carbonIntensity = carbonIntensity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CarbonEmissionMonthlySummaryData withTotalCarbonEmission(double totalCarbonEmission) {
        super.withTotalCarbonEmission(totalCarbonEmission);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CarbonEmissionMonthlySummaryData withTotalCarbonEmissionLastMonth(double totalCarbonEmissionLastMonth) {
        super.withTotalCarbonEmissionLastMonth(totalCarbonEmissionLastMonth);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CarbonEmissionMonthlySummaryData withChangeRatioForLastMonth(double changeRatioForLastMonth) {
        super.withChangeRatioForLastMonth(changeRatioForLastMonth);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CarbonEmissionMonthlySummaryData withTotalCarbonEmission12MonthsAgo(double totalCarbonEmission12MonthsAgo) {
        super.withTotalCarbonEmission12MonthsAgo(totalCarbonEmission12MonthsAgo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CarbonEmissionMonthlySummaryData withChangeRatioFor12Months(double changeRatioFor12Months) {
        super.withChangeRatioFor12Months(changeRatioFor12Months);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CarbonEmissionMonthlySummaryData withChangeValueMonthOverMonth(Double changeValueMonthOverMonth) {
        super.withChangeValueMonthOverMonth(changeValueMonthOverMonth);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (date() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property date in model CarbonEmissionMonthlySummaryData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CarbonEmissionMonthlySummaryData.class);
}
