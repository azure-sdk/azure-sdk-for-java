// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response for top items carbon emissions by month for resource.
 */
@Fluent
public final class ResourceCarbonEmissionTopItemMonthlySummaryData extends CarbonEmissionData {
    /*
     * The data type of the query result, indicating the format of the returned response.
     */
    private ResponseDataTypeEnum dataType = ResponseDataTypeEnum.RESOURCE_TOP_ITEMS_MONTHLY_SUMMARY_DATA;

    /*
     * The resource name of resource for Resource Category
     */
    private String itemName;

    /*
     * Resource Item category
     */
    private CategoryTypeEnum categoryType;

    /*
     * Monthly date string, format is yyyy-MM-dd
     */
    private String date;

    /*
     * Subscription Id
     */
    private String subscriptionId;

    /*
     * Resource Group
     */
    private String resourceGroup;

    /*
     * The fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{
     * resourceType}/{resourceName}
     */
    private String resourceId;

    /**
     * Creates an instance of ResourceCarbonEmissionTopItemMonthlySummaryData class.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData() {
    }

    /**
     * Get the dataType property: The data type of the query result, indicating the format of the returned response.
     * 
     * @return the dataType value.
     */
    @Override
    public ResponseDataTypeEnum dataType() {
        return this.dataType;
    }

    /**
     * Get the itemName property: The resource name of resource for Resource Category.
     * 
     * @return the itemName value.
     */
    public String itemName() {
        return this.itemName;
    }

    /**
     * Set the itemName property: The resource name of resource for Resource Category.
     * 
     * @param itemName the itemName value to set.
     * @return the ResourceCarbonEmissionTopItemMonthlySummaryData object itself.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData withItemName(String itemName) {
        this.itemName = itemName;
        return this;
    }

    /**
     * Get the categoryType property: Resource Item category.
     * 
     * @return the categoryType value.
     */
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Set the categoryType property: Resource Item category.
     * 
     * @param categoryType the categoryType value to set.
     * @return the ResourceCarbonEmissionTopItemMonthlySummaryData object itself.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData withCategoryType(CategoryTypeEnum categoryType) {
        this.categoryType = categoryType;
        return this;
    }

    /**
     * Get the date property: Monthly date string, format is yyyy-MM-dd.
     * 
     * @return the date value.
     */
    public String date() {
        return this.date;
    }

    /**
     * Set the date property: Monthly date string, format is yyyy-MM-dd.
     * 
     * @param date the date value to set.
     * @return the ResourceCarbonEmissionTopItemMonthlySummaryData object itself.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData withDate(String date) {
        this.date = date;
        return this;
    }

    /**
     * Get the subscriptionId property: Subscription Id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: Subscription Id.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the ResourceCarbonEmissionTopItemMonthlySummaryData object itself.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Get the resourceGroup property: Resource Group.
     * 
     * @return the resourceGroup value.
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Set the resourceGroup property: Resource Group.
     * 
     * @param resourceGroup the resourceGroup value to set.
     * @return the ResourceCarbonEmissionTopItemMonthlySummaryData object itself.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData withResourceGroup(String resourceGroup) {
        this.resourceGroup = resourceGroup;
        return this;
    }

    /**
     * Get the resourceId property: The fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The fully qualified resource ID for the resource. Ex -
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ResourceCarbonEmissionTopItemMonthlySummaryData object itself.
     */
    public ResourceCarbonEmissionTopItemMonthlySummaryData withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceCarbonEmissionTopItemMonthlySummaryData withLatestMonthEmissions(double latestMonthEmissions) {
        super.withLatestMonthEmissions(latestMonthEmissions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceCarbonEmissionTopItemMonthlySummaryData withPreviousMonthEmissions(double previousMonthEmissions) {
        super.withPreviousMonthEmissions(previousMonthEmissions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceCarbonEmissionTopItemMonthlySummaryData
        withMonthOverMonthEmissionsChangeRatio(Double monthOverMonthEmissionsChangeRatio) {
        super.withMonthOverMonthEmissionsChangeRatio(monthOverMonthEmissionsChangeRatio);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceCarbonEmissionTopItemMonthlySummaryData
        withMonthlyEmissionsChangeValue(Double monthlyEmissionsChangeValue) {
        super.withMonthlyEmissionsChangeValue(monthlyEmissionsChangeValue);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (itemName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property itemName in model ResourceCarbonEmissionTopItemMonthlySummaryData"));
        }
        if (categoryType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property categoryType in model ResourceCarbonEmissionTopItemMonthlySummaryData"));
        }
        if (date() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property date in model ResourceCarbonEmissionTopItemMonthlySummaryData"));
        }
        if (subscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionId in model ResourceCarbonEmissionTopItemMonthlySummaryData"));
        }
        if (resourceGroup() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceGroup in model ResourceCarbonEmissionTopItemMonthlySummaryData"));
        }
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model ResourceCarbonEmissionTopItemMonthlySummaryData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceCarbonEmissionTopItemMonthlySummaryData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("latestMonthEmissions", latestMonthEmissions());
        jsonWriter.writeDoubleField("previousMonthEmissions", previousMonthEmissions());
        jsonWriter.writeNumberField("monthOverMonthEmissionsChangeRatio", monthOverMonthEmissionsChangeRatio());
        jsonWriter.writeNumberField("monthlyEmissionsChangeValue", monthlyEmissionsChangeValue());
        jsonWriter.writeStringField("itemName", this.itemName);
        jsonWriter.writeStringField("categoryType", this.categoryType == null ? null : this.categoryType.toString());
        jsonWriter.writeStringField("date", this.date);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceCarbonEmissionTopItemMonthlySummaryData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceCarbonEmissionTopItemMonthlySummaryData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceCarbonEmissionTopItemMonthlySummaryData.
     */
    public static ResourceCarbonEmissionTopItemMonthlySummaryData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceCarbonEmissionTopItemMonthlySummaryData deserializedResourceCarbonEmissionTopItemMonthlySummaryData
                = new ResourceCarbonEmissionTopItemMonthlySummaryData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latestMonthEmissions".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData
                        .withLatestMonthEmissions(reader.getDouble());
                } else if ("previousMonthEmissions".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData
                        .withPreviousMonthEmissions(reader.getDouble());
                } else if ("monthOverMonthEmissionsChangeRatio".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData
                        .withMonthOverMonthEmissionsChangeRatio(reader.getNullable(JsonReader::getDouble));
                } else if ("monthlyEmissionsChangeValue".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData
                        .withMonthlyEmissionsChangeValue(reader.getNullable(JsonReader::getDouble));
                } else if ("itemName".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.itemName = reader.getString();
                } else if ("categoryType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.categoryType
                        = CategoryTypeEnum.fromString(reader.getString());
                } else if ("date".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.date = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.resourceGroup = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.resourceId = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedResourceCarbonEmissionTopItemMonthlySummaryData.dataType
                        = ResponseDataTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceCarbonEmissionTopItemMonthlySummaryData;
        });
    }
}
