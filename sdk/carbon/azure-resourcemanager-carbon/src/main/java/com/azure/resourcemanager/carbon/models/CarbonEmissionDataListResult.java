// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.carbon.fluent.models.CarbonEmissionDataInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * List of carbon emission results.
 */
@Fluent
public final class CarbonEmissionDataListResult {
    /*
     * The CarbonEmissionData items on this page
     */
    @JsonProperty(value = "value", required = true)
    private List<CarbonEmissionDataInner> value;

    /*
     * The number of result items to skip for next page
     */
    @JsonProperty(value = "skipToken")
    private String skipToken;

    /*
     * The link to the next page of items
     */
    @JsonProperty(value = "nextLink")
    private String nextLink;

    /*
     * The access decision list for each input subscription
     */
    @JsonProperty(value = "subscriptionAccessDecisionList")
    private List<SubscriptionAccessDecision> subscriptionAccessDecisionList;

    /**
     * Creates an instance of CarbonEmissionDataListResult class.
     */
    public CarbonEmissionDataListResult() {
    }

    /**
     * Get the value property: The CarbonEmissionData items on this page.
     * 
     * @return the value value.
     */
    public List<CarbonEmissionDataInner> value() {
        return this.value;
    }

    /**
     * Set the value property: The CarbonEmissionData items on this page.
     * 
     * @param value the value value to set.
     * @return the CarbonEmissionDataListResult object itself.
     */
    public CarbonEmissionDataListResult withValue(List<CarbonEmissionDataInner> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the skipToken property: The number of result items to skip for next page.
     * 
     * @return the skipToken value.
     */
    public String skipToken() {
        return this.skipToken;
    }

    /**
     * Set the skipToken property: The number of result items to skip for next page.
     * 
     * @param skipToken the skipToken value to set.
     * @return the CarbonEmissionDataListResult object itself.
     */
    public CarbonEmissionDataListResult withSkipToken(String skipToken) {
        this.skipToken = skipToken;
        return this;
    }

    /**
     * Get the nextLink property: The link to the next page of items.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Set the nextLink property: The link to the next page of items.
     * 
     * @param nextLink the nextLink value to set.
     * @return the CarbonEmissionDataListResult object itself.
     */
    public CarbonEmissionDataListResult withNextLink(String nextLink) {
        this.nextLink = nextLink;
        return this;
    }

    /**
     * Get the subscriptionAccessDecisionList property: The access decision list for each input subscription.
     * 
     * @return the subscriptionAccessDecisionList value.
     */
    public List<SubscriptionAccessDecision> subscriptionAccessDecisionList() {
        return this.subscriptionAccessDecisionList;
    }

    /**
     * Set the subscriptionAccessDecisionList property: The access decision list for each input subscription.
     * 
     * @param subscriptionAccessDecisionList the subscriptionAccessDecisionList value to set.
     * @return the CarbonEmissionDataListResult object itself.
     */
    public CarbonEmissionDataListResult
        withSubscriptionAccessDecisionList(List<SubscriptionAccessDecision> subscriptionAccessDecisionList) {
        this.subscriptionAccessDecisionList = subscriptionAccessDecisionList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property value in model CarbonEmissionDataListResult"));
        } else {
            value().forEach(e -> e.validate());
        }
        if (subscriptionAccessDecisionList() != null) {
            subscriptionAccessDecisionList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CarbonEmissionDataListResult.class);
}
