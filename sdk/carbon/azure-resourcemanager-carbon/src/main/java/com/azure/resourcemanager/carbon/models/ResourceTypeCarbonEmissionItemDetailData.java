// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.carbon.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.carbon.fluent.models.CarbonEmissionDataInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Response for detailed carbon emissions.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "dataType")
@JsonTypeName("ResourceTypeItemDetailsData")
@Fluent
public final class ResourceTypeCarbonEmissionItemDetailData extends CarbonEmissionDataInner {
    /*
     * Item name, resource type name
     */
    @JsonProperty(value = "itemName", required = true)
    private String itemName;

    /*
     * Item group name
     */
    @JsonProperty(value = "resourceTypeFriendlyName", required = true)
    private String resourceTypeFriendlyName;

    /*
     * Item category, which is ResourceType
     */
    @JsonProperty(value = "categoryType", required = true)
    private CategoryTypeEnum categoryType;

    /**
     * Creates an instance of ResourceTypeCarbonEmissionItemDetailData class.
     */
    public ResourceTypeCarbonEmissionItemDetailData() {
    }

    /**
     * Get the itemName property: Item name, resource type name.
     * 
     * @return the itemName value.
     */
    public String itemName() {
        return this.itemName;
    }

    /**
     * Set the itemName property: Item name, resource type name.
     * 
     * @param itemName the itemName value to set.
     * @return the ResourceTypeCarbonEmissionItemDetailData object itself.
     */
    public ResourceTypeCarbonEmissionItemDetailData withItemName(String itemName) {
        this.itemName = itemName;
        return this;
    }

    /**
     * Get the resourceTypeFriendlyName property: Item group name.
     * 
     * @return the resourceTypeFriendlyName value.
     */
    public String resourceTypeFriendlyName() {
        return this.resourceTypeFriendlyName;
    }

    /**
     * Set the resourceTypeFriendlyName property: Item group name.
     * 
     * @param resourceTypeFriendlyName the resourceTypeFriendlyName value to set.
     * @return the ResourceTypeCarbonEmissionItemDetailData object itself.
     */
    public ResourceTypeCarbonEmissionItemDetailData withResourceTypeFriendlyName(String resourceTypeFriendlyName) {
        this.resourceTypeFriendlyName = resourceTypeFriendlyName;
        return this;
    }

    /**
     * Get the categoryType property: Item category, which is ResourceType.
     * 
     * @return the categoryType value.
     */
    public CategoryTypeEnum categoryType() {
        return this.categoryType;
    }

    /**
     * Set the categoryType property: Item category, which is ResourceType.
     * 
     * @param categoryType the categoryType value to set.
     * @return the ResourceTypeCarbonEmissionItemDetailData object itself.
     */
    public ResourceTypeCarbonEmissionItemDetailData withCategoryType(CategoryTypeEnum categoryType) {
        this.categoryType = categoryType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeCarbonEmissionItemDetailData withTotalCarbonEmission(double totalCarbonEmission) {
        super.withTotalCarbonEmission(totalCarbonEmission);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeCarbonEmissionItemDetailData
        withTotalCarbonEmissionLastMonth(double totalCarbonEmissionLastMonth) {
        super.withTotalCarbonEmissionLastMonth(totalCarbonEmissionLastMonth);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeCarbonEmissionItemDetailData withChangeRatioForLastMonth(double changeRatioForLastMonth) {
        super.withChangeRatioForLastMonth(changeRatioForLastMonth);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeCarbonEmissionItemDetailData
        withTotalCarbonEmission12MonthsAgo(double totalCarbonEmission12MonthsAgo) {
        super.withTotalCarbonEmission12MonthsAgo(totalCarbonEmission12MonthsAgo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeCarbonEmissionItemDetailData withChangeRatioFor12Months(double changeRatioFor12Months) {
        super.withChangeRatioFor12Months(changeRatioFor12Months);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeCarbonEmissionItemDetailData withChangeValueMonthOverMonth(Double changeValueMonthOverMonth) {
        super.withChangeValueMonthOverMonth(changeValueMonthOverMonth);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (itemName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property itemName in model ResourceTypeCarbonEmissionItemDetailData"));
        }
        if (resourceTypeFriendlyName() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property resourceTypeFriendlyName in model ResourceTypeCarbonEmissionItemDetailData"));
        }
        if (categoryType() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property categoryType in model ResourceTypeCarbonEmissionItemDetailData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceTypeCarbonEmissionItemDetailData.class);
}
