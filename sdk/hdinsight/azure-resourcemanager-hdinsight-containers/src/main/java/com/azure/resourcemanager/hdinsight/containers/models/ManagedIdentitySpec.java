// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The details of a managed identity.
 */
@Fluent
public final class ManagedIdentitySpec {
    /*
     * The type of managed identity.
     */
    @JsonProperty(value = "type", required = true)
    private ManagedIdentityType type;

    /*
     * ResourceId of the managed identity.
     */
    @JsonProperty(value = "resourceId", required = true)
    private String resourceId;

    /*
     * ClientId of the managed identity.
     */
    @JsonProperty(value = "clientId", required = true)
    private String clientId;

    /*
     * ObjectId of the managed identity.
     */
    @JsonProperty(value = "objectId", required = true)
    private String objectId;

    /**
     * Creates an instance of ManagedIdentitySpec class.
     */
    public ManagedIdentitySpec() {
    }

    /**
     * Get the type property: The type of managed identity.
     * 
     * @return the type value.
     */
    public ManagedIdentityType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of managed identity.
     * 
     * @param type the type value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withType(ManagedIdentityType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the resourceId property: ResourceId of the managed identity.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ResourceId of the managed identity.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the clientId property: ClientId of the managed identity.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: ClientId of the managed identity.
     * 
     * @param clientId the clientId value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the objectId property: ObjectId of the managed identity.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: ObjectId of the managed identity.
     * 
     * @param objectId the objectId value to set.
     * @return the ManagedIdentitySpec object itself.
     */
    public ManagedIdentitySpec withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property type in model ManagedIdentitySpec"));
        }
        if (resourceId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property resourceId in model ManagedIdentitySpec"));
        }
        if (clientId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property clientId in model ManagedIdentitySpec"));
        }
        if (objectId() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property objectId in model ManagedIdentitySpec"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedIdentitySpec.class);
}
