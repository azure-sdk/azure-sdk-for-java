// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsight.containers.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Properties of a Maven library in the cluster.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", defaultImpl = MavenLibraryProperties.class, visible = true)
@JsonTypeName("maven")
@Fluent
public final class MavenLibraryProperties extends ClusterLibraryProperties {
    /*
     * Type of the library.
     */
    @JsonTypeId
    @JsonProperty(value = "type", required = true)
    private Type type = Type.MAVEN;

    /*
     * GroupId of the Maven package.
     */
    @JsonProperty(value = "groupId", required = true)
    private String groupId;

    /*
     * ArtifactId of the Maven package.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Version of the Maven package.
     */
    @JsonProperty(value = "version")
    private String version;

    /**
     * Creates an instance of MavenLibraryProperties class.
     */
    public MavenLibraryProperties() {
    }

    /**
     * Get the type property: Type of the library.
     * 
     * @return the type value.
     */
    @Override
    public Type type() {
        return this.type;
    }

    /**
     * Get the groupId property: GroupId of the Maven package.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: GroupId of the Maven package.
     * 
     * @param groupId the groupId value to set.
     * @return the MavenLibraryProperties object itself.
     */
    public MavenLibraryProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the name property: ArtifactId of the Maven package.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: ArtifactId of the Maven package.
     * 
     * @param name the name value to set.
     * @return the MavenLibraryProperties object itself.
     */
    public MavenLibraryProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the version property: Version of the Maven package.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Version of the Maven package.
     * 
     * @param version the version value to set.
     * @return the MavenLibraryProperties object itself.
     */
    public MavenLibraryProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MavenLibraryProperties withRemarks(String remarks) {
        super.withRemarks(remarks);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (groupId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property groupId in model MavenLibraryProperties"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model MavenLibraryProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MavenLibraryProperties.class);
}
