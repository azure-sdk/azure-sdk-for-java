// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.adp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Location of a Data Pool.
 */
@Fluent
public final class DataPoolLocation implements JsonSerializable<DataPoolLocation> {
    /*
     * The location name
     */
    private String name;

    /*
     * Encryption properties of a Data Pool location
     */
    private DataPoolEncryption encryption;

    /*
     * The Storage SKU. Default: Standard_ZRS.
     */
    private StorageSku storageSku;

    /*
     * The amount of storage accounts provisioned per Data Pool. Default: 5
     */
    private Integer storageAccountCount;

    /**
     * Creates an instance of DataPoolLocation class.
     */
    public DataPoolLocation() {
    }

    /**
     * Get the name property: The location name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The location name.
     * 
     * @param name the name value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the encryption property: Encryption properties of a Data Pool location.
     * 
     * @return the encryption value.
     */
    public DataPoolEncryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: Encryption properties of a Data Pool location.
     * 
     * @param encryption the encryption value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withEncryption(DataPoolEncryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the storageSku property: The Storage SKU. Default: Standard_ZRS.
     * 
     * @return the storageSku value.
     */
    public StorageSku storageSku() {
        return this.storageSku;
    }

    /**
     * Set the storageSku property: The Storage SKU. Default: Standard_ZRS.
     * 
     * @param storageSku the storageSku value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withStorageSku(StorageSku storageSku) {
        this.storageSku = storageSku;
        return this;
    }

    /**
     * Get the storageAccountCount property: The amount of storage accounts provisioned per Data Pool. Default: 5.
     * 
     * @return the storageAccountCount value.
     */
    public Integer storageAccountCount() {
        return this.storageAccountCount;
    }

    /**
     * Set the storageAccountCount property: The amount of storage accounts provisioned per Data Pool. Default: 5.
     * 
     * @param storageAccountCount the storageAccountCount value to set.
     * @return the DataPoolLocation object itself.
     */
    public DataPoolLocation withStorageAccountCount(Integer storageAccountCount) {
        this.storageAccountCount = storageAccountCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DataPoolLocation"));
        }
        if (encryption() != null) {
            encryption().validate();
        }
        if (storageSku() != null) {
            storageSku().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataPoolLocation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeJsonField("storageSku", this.storageSku);
        jsonWriter.writeNumberField("storageAccountCount", this.storageAccountCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataPoolLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataPoolLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataPoolLocation.
     */
    public static DataPoolLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataPoolLocation deserializedDataPoolLocation = new DataPoolLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataPoolLocation.name = reader.getString();
                } else if ("encryption".equals(fieldName)) {
                    deserializedDataPoolLocation.encryption = DataPoolEncryption.fromJson(reader);
                } else if ("storageSku".equals(fieldName)) {
                    deserializedDataPoolLocation.storageSku = StorageSku.fromJson(reader);
                } else if ("storageAccountCount".equals(fieldName)) {
                    deserializedDataPoolLocation.storageAccountCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataPoolLocation;
        });
    }
}
