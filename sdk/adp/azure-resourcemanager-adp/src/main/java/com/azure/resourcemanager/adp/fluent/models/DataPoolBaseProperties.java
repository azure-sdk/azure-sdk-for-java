// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.adp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.adp.models.DataPoolLocation;
import com.azure.resourcemanager.adp.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Data Pool properties.
 */
@Fluent
public class DataPoolBaseProperties implements JsonSerializable<DataPoolBaseProperties> {
    /*
     * The Data Pool's data-plane ID
     */
    private String dataPoolId;

    /*
     * Gets the status of the data pool at the time the operation was called
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the collection of locations where Data Pool resources should be created
     */
    private List<DataPoolLocation> locations;

    /*
     * Resource tags
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of DataPoolBaseProperties class.
     */
    public DataPoolBaseProperties() {
    }

    /**
     * Get the dataPoolId property: The Data Pool's data-plane ID.
     * 
     * @return the dataPoolId value.
     */
    public String dataPoolId() {
        return this.dataPoolId;
    }

    /**
     * Set the dataPoolId property: The Data Pool's data-plane ID.
     * 
     * @param dataPoolId the dataPoolId value to set.
     * @return the DataPoolBaseProperties object itself.
     */
    DataPoolBaseProperties withDataPoolId(String dataPoolId) {
        this.dataPoolId = dataPoolId;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the data pool at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets the status of the data pool at the time the operation was called.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DataPoolBaseProperties object itself.
     */
    DataPoolBaseProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the locations property: Gets or sets the collection of locations where Data Pool resources should be created.
     * 
     * @return the locations value.
     */
    public List<DataPoolLocation> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: Gets or sets the collection of locations where Data Pool resources should be created.
     * 
     * @param locations the locations value to set.
     * @return the DataPoolBaseProperties object itself.
     */
    public DataPoolBaseProperties withLocations(List<DataPoolLocation> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the DataPoolBaseProperties object itself.
     */
    public DataPoolBaseProperties withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locations() != null) {
            locations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataPoolBaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataPoolBaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataPoolBaseProperties.
     */
    public static DataPoolBaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataPoolBaseProperties deserializedDataPoolBaseProperties = new DataPoolBaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataPoolId".equals(fieldName)) {
                    deserializedDataPoolBaseProperties.dataPoolId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataPoolBaseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("locations".equals(fieldName)) {
                    List<DataPoolLocation> locations = reader.readArray(reader1 -> DataPoolLocation.fromJson(reader1));
                    deserializedDataPoolBaseProperties.locations = locations;
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataPoolBaseProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataPoolBaseProperties;
        });
    }
}
