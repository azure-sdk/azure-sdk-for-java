// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.adp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.adp.models.DataPoolLocation;
import com.azure.resourcemanager.adp.models.ProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * ADP Data Pool.
 */
@Fluent
public final class DataPoolInner extends ProxyResource {
    /*
     * List of data pool properties
     */
    private DataPoolProperties innerProperties;

    /*
     * The system meta data relating to this resource
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of DataPoolInner class.
     */
    public DataPoolInner() {
    }

    /**
     * Get the innerProperties property: List of data pool properties.
     * 
     * @return the innerProperties value.
     */
    private DataPoolProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: The system meta data relating to this resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the dataPoolId property: The Data Pool's data-plane ID.
     * 
     * @return the dataPoolId value.
     */
    public String dataPoolId() {
        return this.innerProperties() == null ? null : this.innerProperties().dataPoolId();
    }

    /**
     * Get the provisioningState property: Gets the status of the data pool at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the locations property: Gets or sets the collection of locations where Data Pool resources should be created.
     * 
     * @return the locations value.
     */
    public List<DataPoolLocation> locations() {
        return this.innerProperties() == null ? null : this.innerProperties().locations();
    }

    /**
     * Set the locations property: Gets or sets the collection of locations where Data Pool resources should be created.
     * 
     * @param locations the locations value to set.
     * @return the DataPoolInner object itself.
     */
    public DataPoolInner withLocations(List<DataPoolLocation> locations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataPoolProperties();
        }
        this.innerProperties().withLocations(locations);
        return this;
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.innerProperties() == null ? null : this.innerProperties().tags();
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the DataPoolInner object itself.
     */
    public DataPoolInner withTags(Map<String, String> tags) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataPoolProperties();
        }
        this.innerProperties().withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataPoolInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataPoolInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataPoolInner.
     */
    public static DataPoolInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataPoolInner deserializedDataPoolInner = new DataPoolInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDataPoolInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDataPoolInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDataPoolInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDataPoolInner.innerProperties = DataPoolProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDataPoolInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataPoolInner;
        });
    }
}
