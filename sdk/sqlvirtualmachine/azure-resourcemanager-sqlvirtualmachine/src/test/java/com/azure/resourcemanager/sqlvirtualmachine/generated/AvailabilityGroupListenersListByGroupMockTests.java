// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.models.AvailabilityGroupListener;
import com.azure.resourcemanager.sqlvirtualmachine.models.Commit;
import com.azure.resourcemanager.sqlvirtualmachine.models.Failover;
import com.azure.resourcemanager.sqlvirtualmachine.models.ReadableSecondary;
import com.azure.resourcemanager.sqlvirtualmachine.models.Role;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvailabilityGroupListenersListByGroupMockTests {
    @Test
    public void testListByGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"qhakauhashsf\",\"availabilityGroupName\":\"osow\",\"loadBalancerConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"i\",\"subnetResourceId\":\"ooxdjebwpuc\"},\"publicIpAddressResourceId\":\"fvovbvmeuecivy\",\"loadBalancerResourceId\":\"ce\",\"probePort\":1339093969,\"sqlVirtualMachineInstances\":[\"rw\",\"ueiotwmcdyt\",\"x\"]},{\"privateIpAddress\":{\"ipAddress\":\"xnrj\",\"subnetResourceId\":\"gqwgxhniskxfbkp\"},\"publicIpAddressResourceId\":\"gklwn\",\"loadBalancerResourceId\":\"hjdauwhvylwz\",\"probePort\":793428235,\"sqlVirtualMachineInstances\":[\"ujznb\",\"pow\",\"wpr\"]},{\"privateIpAddress\":{\"ipAddress\":\"veual\",\"subnetResourceId\":\"j\"},\"publicIpAddressResourceId\":\"hfxobbcswsrtj\",\"loadBalancerResourceId\":\"plrbpbewtghf\",\"probePort\":602671814,\"sqlVirtualMachineInstances\":[\"wxzvlvqhjkb\"]}],\"multiSubnetIpConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"t\",\"subnetResourceId\":\"xiebwwaloayqcg\"},\"sqlVirtualMachineInstance\":\"rtzju\"},{\"privateIpAddress\":{\"ipAddress\":\"wyzmhtxon\",\"subnetResourceId\":\"ts\"},\"sqlVirtualMachineInstance\":\"vjcbpwxqpsrknf\"},{\"privateIpAddress\":{\"ipAddress\":\"uvriuhprwm\",\"subnetResourceId\":\"vxqtayriwwroyqbe\"},\"sqlVirtualMachineInstance\":\"rmcqiby\"},{\"privateIpAddress\":{\"ipAddress\":\"ojvknmefqsgzvaha\",\"subnetResourceId\":\"y\"},\"sqlVirtualMachineInstance\":\"hpvgqz\"}],\"createDefaultAvailabilityGroupIfNotExist\":true,\"port\":391970506,\"availabilityGroupConfiguration\":{\"replicas\":[{\"sqlVirtualMachineInstanceId\":\"mwlxk\",\"role\":\"Secondary\",\"commit\":\"Asynchronous_Commit\",\"failover\":\"Manual\",\"readableSecondary\":\"No\"},{\"sqlVirtualMachineInstanceId\":\"jvzunluthnnp\",\"role\":\"Secondary\",\"commit\":\"Asynchronous_Commit\",\"failover\":\"Manual\",\"readableSecondary\":\"All\"},{\"sqlVirtualMachineInstanceId\":\"zuaejxd\",\"role\":\"Secondary\",\"commit\":\"Synchronous_Commit\",\"failover\":\"Manual\",\"readableSecondary\":\"All\"},{\"sqlVirtualMachineInstanceId\":\"zumveekgpwo\",\"role\":\"Primary\",\"commit\":\"Asynchronous_Commit\",\"failover\":\"Automatic\",\"readableSecondary\":\"All\"}]}},\"id\":\"ofd\",\"name\":\"luu\",\"type\":\"dttouwaboekqvkel\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SqlVirtualMachineManager manager = SqlVirtualMachineManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<AvailabilityGroupListener> response = manager.availabilityGroupListeners()
            .listByGroup("isgwbnbbeldawkz", "ali", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("osow", response.iterator().next().availabilityGroupName());
        Assertions.assertEquals("i",
            response.iterator().next().loadBalancerConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("ooxdjebwpuc",
            response.iterator().next().loadBalancerConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("fvovbvmeuecivy",
            response.iterator().next().loadBalancerConfigurations().get(0).publicIpAddressResourceId());
        Assertions.assertEquals("ce",
            response.iterator().next().loadBalancerConfigurations().get(0).loadBalancerResourceId());
        Assertions.assertEquals(1339093969, response.iterator().next().loadBalancerConfigurations().get(0).probePort());
        Assertions.assertEquals("rw",
            response.iterator().next().loadBalancerConfigurations().get(0).sqlVirtualMachineInstances().get(0));
        Assertions.assertEquals("t",
            response.iterator().next().multiSubnetIpConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("xiebwwaloayqcg",
            response.iterator().next().multiSubnetIpConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("rtzju",
            response.iterator().next().multiSubnetIpConfigurations().get(0).sqlVirtualMachineInstance());
        Assertions.assertTrue(response.iterator().next().createDefaultAvailabilityGroupIfNotExist());
        Assertions.assertEquals(391970506, response.iterator().next().port());
        Assertions.assertEquals("mwlxk",
            response.iterator()
                .next()
                .availabilityGroupConfiguration()
                .replicas()
                .get(0)
                .sqlVirtualMachineInstanceId());
        Assertions.assertEquals(Role.SECONDARY,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).role());
        Assertions.assertEquals(Commit.ASYNCHRONOUS_COMMIT,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).commit());
        Assertions.assertEquals(Failover.MANUAL,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).failover());
        Assertions.assertEquals(ReadableSecondary.NO,
            response.iterator().next().availabilityGroupConfiguration().replicas().get(0).readableSecondary());
    }
}
