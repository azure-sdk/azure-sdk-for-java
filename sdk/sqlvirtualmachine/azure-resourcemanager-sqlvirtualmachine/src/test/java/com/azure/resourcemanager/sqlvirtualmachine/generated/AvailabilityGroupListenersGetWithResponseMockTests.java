// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.models.AvailabilityGroupListener;
import com.azure.resourcemanager.sqlvirtualmachine.models.Commit;
import com.azure.resourcemanager.sqlvirtualmachine.models.Failover;
import com.azure.resourcemanager.sqlvirtualmachine.models.ReadableSecondary;
import com.azure.resourcemanager.sqlvirtualmachine.models.Role;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvailabilityGroupListenersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"mkfssxqukkfplgm\",\"availabilityGroupName\":\"xnkjzkdesl\",\"loadBalancerConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"wiyighxpkdw\",\"subnetResourceId\":\"aiuebbaumnyqu\"},\"publicIpAddressResourceId\":\"deoj\",\"loadBalancerResourceId\":\"bckhsmtxpsi\",\"probePort\":2000521047,\"sqlVirtualMachineInstances\":[\"vpesapskrdqmhjjd\",\"tldwkyzxuutk\",\"cwscwsvlx\",\"togt\"]},{\"privateIpAddress\":{\"ipAddress\":\"pqsxvnmicy\",\"subnetResourceId\":\"ceoveilovno\"},\"publicIpAddressResourceId\":\"fj\",\"loadBalancerResourceId\":\"njbkcnxdhbttkph\",\"probePort\":1501927720,\"sqlVirtualMachineInstances\":[\"jtoqne\",\"mclfplphoxuscr\",\"abgy\",\"psbjta\"]}],\"multiSubnetIpConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"xywpmueefjzwfqkq\",\"subnetResourceId\":\"ids\"},\"sqlVirtualMachineInstance\":\"yonobgl\"},{\"privateIpAddress\":{\"ipAddress\":\"cq\",\"subnetResourceId\":\"ccm\"},\"sqlVirtualMachineInstance\":\"yudxytlmoy\"},{\"privateIpAddress\":{\"ipAddress\":\"vwfudwpzntxhd\",\"subnetResourceId\":\"lrqjbhckfr\"},\"sqlVirtualMachineInstance\":\"hrxsbk\"}],\"createDefaultAvailabilityGroupIfNotExist\":true,\"port\":289990060,\"availabilityGroupConfiguration\":{\"replicas\":[{\"sqlVirtualMachineInstanceId\":\"bpzkafkuwbc\",\"role\":\"Primary\",\"commit\":\"Asynchronous_Commit\",\"failover\":\"Automatic\",\"readableSecondary\":\"No\"},{\"sqlVirtualMachineInstanceId\":\"yvjusrtslhsp\",\"role\":\"Secondary\",\"commit\":\"Asynchronous_Commit\",\"failover\":\"Manual\",\"readableSecondary\":\"Read_Only\"},{\"sqlVirtualMachineInstanceId\":\"ag\",\"role\":\"Primary\",\"commit\":\"Synchronous_Commit\",\"failover\":\"Manual\",\"readableSecondary\":\"No\"}]}},\"id\":\"hahvljuahaq\",\"name\":\"hcdhmdual\",\"type\":\"exq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SqlVirtualMachineManager manager = SqlVirtualMachineManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AvailabilityGroupListener response = manager.availabilityGroupListeners()
            .getWithResponse("lcuhxwtctyqiklb", "ovplw", "bhvgy", "gu", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xnkjzkdesl", response.availabilityGroupName());
        Assertions.assertEquals("wiyighxpkdw",
            response.loadBalancerConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("aiuebbaumnyqu",
            response.loadBalancerConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("deoj", response.loadBalancerConfigurations().get(0).publicIpAddressResourceId());
        Assertions.assertEquals("bckhsmtxpsi", response.loadBalancerConfigurations().get(0).loadBalancerResourceId());
        Assertions.assertEquals(2000521047, response.loadBalancerConfigurations().get(0).probePort());
        Assertions.assertEquals("vpesapskrdqmhjjd",
            response.loadBalancerConfigurations().get(0).sqlVirtualMachineInstances().get(0));
        Assertions.assertEquals("xywpmueefjzwfqkq",
            response.multiSubnetIpConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("ids",
            response.multiSubnetIpConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("yonobgl", response.multiSubnetIpConfigurations().get(0).sqlVirtualMachineInstance());
        Assertions.assertTrue(response.createDefaultAvailabilityGroupIfNotExist());
        Assertions.assertEquals(289990060, response.port());
        Assertions.assertEquals("bpzkafkuwbc",
            response.availabilityGroupConfiguration().replicas().get(0).sqlVirtualMachineInstanceId());
        Assertions.assertEquals(Role.PRIMARY, response.availabilityGroupConfiguration().replicas().get(0).role());
        Assertions.assertEquals(Commit.ASYNCHRONOUS_COMMIT,
            response.availabilityGroupConfiguration().replicas().get(0).commit());
        Assertions.assertEquals(Failover.AUTOMATIC,
            response.availabilityGroupConfiguration().replicas().get(0).failover());
        Assertions.assertEquals(ReadableSecondary.NO,
            response.availabilityGroupConfiguration().replicas().get(0).readableSecondary());
    }
}
