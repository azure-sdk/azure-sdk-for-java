// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.sqlvirtualmachine.SqlVirtualMachineManager;
import com.azure.resourcemanager.sqlvirtualmachine.models.AgConfiguration;
import com.azure.resourcemanager.sqlvirtualmachine.models.AgReplica;
import com.azure.resourcemanager.sqlvirtualmachine.models.AvailabilityGroupListener;
import com.azure.resourcemanager.sqlvirtualmachine.models.Commit;
import com.azure.resourcemanager.sqlvirtualmachine.models.Failover;
import com.azure.resourcemanager.sqlvirtualmachine.models.LoadBalancerConfiguration;
import com.azure.resourcemanager.sqlvirtualmachine.models.MultiSubnetIpConfiguration;
import com.azure.resourcemanager.sqlvirtualmachine.models.PrivateIPAddress;
import com.azure.resourcemanager.sqlvirtualmachine.models.ReadableSecondary;
import com.azure.resourcemanager.sqlvirtualmachine.models.Role;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvailabilityGroupListenersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"availabilityGroupName\":\"mcwyhzdxssadb\",\"loadBalancerConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"fznudaodvxzb\",\"subnetResourceId\":\"blylpstdbh\"},\"publicIpAddressResourceId\":\"srzdzucerscdn\",\"loadBalancerResourceId\":\"evfiwjmygt\",\"probePort\":1448354996,\"sqlVirtualMachineInstances\":[\"wtmwerio\"]},{\"privateIpAddress\":{\"ipAddress\":\"yqsemwa\",\"subnetResourceId\":\"ets\"},\"publicIpAddressResourceId\":\"szhedplvw\",\"loadBalancerResourceId\":\"ubmwmbesld\",\"probePort\":1383076937,\"sqlVirtualMachineInstances\":[\"pp\",\"flcxoga\"]},{\"privateIpAddress\":{\"ipAddress\":\"nzmnsikvm\",\"subnetResourceId\":\"ze\"},\"publicIpAddressResourceId\":\"kdltfzxmhhvhg\",\"loadBalancerResourceId\":\"eodkwobda\",\"probePort\":933543231,\"sqlVirtualMachineInstances\":[\"qdxbxwa\",\"bogqxndlkzgxhu\"]}],\"multiSubnetIpConfigurations\":[{\"privateIpAddress\":{\"ipAddress\":\"bpodxunkbebxm\",\"subnetResourceId\":\"yyntwl\"},\"sqlVirtualMachineInstance\":\"bqtkoievseotgqr\"},{\"privateIpAddress\":{\"ipAddress\":\"tmuwlauwzi\",\"subnetResourceId\":\"bm\"},\"sqlVirtualMachineInstance\":\"gcj\"},{\"privateIpAddress\":{\"ipAddress\":\"u\",\"subnetResourceId\":\"uvpb\"},\"sqlVirtualMachineInstance\":\"tdum\"}],\"createDefaultAvailabilityGroupIfNotExist\":false,\"port\":360418478,\"availabilityGroupConfiguration\":{\"replicas\":[{\"sqlVirtualMachineInstanceId\":\"zbtbhj\",\"role\":\"Primary\",\"commit\":\"Asynchronous_Commit\",\"failover\":\"Automatic\",\"readableSecondary\":\"All\"}]}},\"id\":\"euel\",\"name\":\"phsdyhto\",\"type\":\"fikdowwqu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SqlVirtualMachineManager manager = SqlVirtualMachineManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AvailabilityGroupListener response
            = manager.availabilityGroupListeners()
                .define("aln")
                .withExistingSqlVirtualMachineGroup("smv", "xwyjsflhhc")
                .withAvailabilityGroupName("iidzyexzne")
                .withLoadBalancerConfigurations(Arrays.asList(
                    new LoadBalancerConfiguration()
                        .withPrivateIpAddress(
                            new PrivateIPAddress().withIpAddress("rzt").withSubnetResourceId("lhbnxkna"))
                        .withPublicIpAddressResourceId("ulppggdtpnapnyir")
                        .withLoadBalancerResourceId("uhpigvp")
                        .withProbePort(882329549)
                        .withSqlVirtualMachineInstances(Arrays.asList("git", "medjvcslynqwwncw")),
                    new LoadBalancerConfiguration()
                        .withPrivateIpAddress(
                            new PrivateIPAddress().withIpAddress("xgk").withSubnetResourceId("mgucna"))
                        .withPublicIpAddressResourceId("t")
                        .withLoadBalancerResourceId("ellwptfdy")
                        .withProbePort(622690283)
                        .withSqlVirtualMachineInstances(Arrays.asList("uaceopzfqrhhu")),
                    new LoadBalancerConfiguration()
                        .withPrivateIpAddress(
                            new PrivateIPAddress().withIpAddress("ppcqeqxolz").withSubnetResourceId("hzxct"))
                        .withPublicIpAddressResourceId("gbkdmoizpos")
                        .withLoadBalancerResourceId("grcfb")
                        .withProbePort(1194461063)
                        .withSqlVirtualMachineInstances(
                            Arrays.asList("qjhhkxbpv", "ymjhxxjyngudivkr", "swbxqz", "szjfauvjfdxxivet"))))
                .withMultiSubnetIpConfigurations(Arrays.asList(
                    new MultiSubnetIpConfiguration()
                        .withPrivateIpAddress(
                            new PrivateIPAddress().withIpAddress("aqtdoqmcbx").withSubnetResourceId("vxysl"))
                        .withSqlVirtualMachineInstance("bhsfxob"),
                    new MultiSubnetIpConfiguration()
                        .withPrivateIpAddress(
                            new PrivateIPAddress().withIpAddress("tkblmpewww").withSubnetResourceId("krvrns"))
                        .withSqlVirtualMachineInstance("shqjohxcrsbf"),
                    new MultiSubnetIpConfiguration()
                        .withPrivateIpAddress(
                            new PrivateIPAddress().withIpAddress("asrru").withSubnetResourceId("bhsqfsubcgjbirxb"))
                        .withSqlVirtualMachineInstance("ybsrfbjfdtwss")))
                .withCreateDefaultAvailabilityGroupIfNotExist(true)
                .withPort(1553831435)
                .withAvailabilityGroupConfiguration(new AgConfiguration().withReplicas(Arrays.asList(
                    new AgReplica().withSqlVirtualMachineInstanceId("exilzznfqqnvwpmq")
                        .withRole(Role.PRIMARY)
                        .withCommit(Commit.ASYNCHRONOUS_COMMIT)
                        .withFailover(Failover.MANUAL)
                        .withReadableSecondary(ReadableSecondary.ALL),
                    new AgReplica().withSqlVirtualMachineInstanceId("jhwqytjrybnw")
                        .withRole(Role.SECONDARY)
                        .withCommit(Commit.ASYNCHRONOUS_COMMIT)
                        .withFailover(Failover.MANUAL)
                        .withReadableSecondary(ReadableSecondary.NO),
                    new AgReplica().withSqlVirtualMachineInstanceId("naenqpehindo")
                        .withRole(Role.SECONDARY)
                        .withCommit(Commit.SYNCHRONOUS_COMMIT)
                        .withFailover(Failover.MANUAL)
                        .withReadableSecondary(ReadableSecondary.ALL),
                    new AgReplica().withSqlVirtualMachineInstanceId("ndslgnayqigynduh")
                        .withRole(Role.SECONDARY)
                        .withCommit(Commit.SYNCHRONOUS_COMMIT)
                        .withFailover(Failover.AUTOMATIC)
                        .withReadableSecondary(ReadableSecondary.ALL))))
                .create();

        Assertions.assertEquals("mcwyhzdxssadb", response.availabilityGroupName());
        Assertions.assertEquals("fznudaodvxzb",
            response.loadBalancerConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("blylpstdbh",
            response.loadBalancerConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("srzdzucerscdn",
            response.loadBalancerConfigurations().get(0).publicIpAddressResourceId());
        Assertions.assertEquals("evfiwjmygt", response.loadBalancerConfigurations().get(0).loadBalancerResourceId());
        Assertions.assertEquals(1448354996, response.loadBalancerConfigurations().get(0).probePort());
        Assertions.assertEquals("wtmwerio",
            response.loadBalancerConfigurations().get(0).sqlVirtualMachineInstances().get(0));
        Assertions.assertEquals("bpodxunkbebxm",
            response.multiSubnetIpConfigurations().get(0).privateIpAddress().ipAddress());
        Assertions.assertEquals("yyntwl",
            response.multiSubnetIpConfigurations().get(0).privateIpAddress().subnetResourceId());
        Assertions.assertEquals("bqtkoievseotgqr",
            response.multiSubnetIpConfigurations().get(0).sqlVirtualMachineInstance());
        Assertions.assertFalse(response.createDefaultAvailabilityGroupIfNotExist());
        Assertions.assertEquals(360418478, response.port());
        Assertions.assertEquals("zbtbhj",
            response.availabilityGroupConfiguration().replicas().get(0).sqlVirtualMachineInstanceId());
        Assertions.assertEquals(Role.PRIMARY, response.availabilityGroupConfiguration().replicas().get(0).role());
        Assertions.assertEquals(Commit.ASYNCHRONOUS_COMMIT,
            response.availabilityGroupConfiguration().replicas().get(0).commit());
        Assertions.assertEquals(Failover.AUTOMATIC,
            response.availabilityGroupConfiguration().replicas().get(0).failover());
        Assertions.assertEquals(ReadableSecondary.ALL,
            response.availabilityGroupConfiguration().replicas().get(0).readableSecondary());
    }
}
