// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Enable AAD authentication for SQL VM.
 */
@Fluent
public final class AADAuthenticationSettings implements JsonSerializable<AADAuthenticationSettings> {
    /*
     * The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system
     * assigned Managed Identity
     */
    private String clientId;

    /**
     * Creates an instance of AADAuthenticationSettings class.
     */
    public AADAuthenticationSettings() {
    }

    /**
     * Get the clientId property: The client Id of the Managed Identity to query Microsoft Graph API. An empty string
     * must be used for the system assigned Managed Identity.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The client Id of the Managed Identity to query Microsoft Graph API. An empty string
     * must be used for the system assigned Managed Identity.
     * 
     * @param clientId the clientId value to set.
     * @return the AADAuthenticationSettings object itself.
     */
    public AADAuthenticationSettings withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientId", this.clientId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AADAuthenticationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AADAuthenticationSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AADAuthenticationSettings.
     */
    public static AADAuthenticationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AADAuthenticationSettings deserializedAADAuthenticationSettings = new AADAuthenticationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientId".equals(fieldName)) {
                    deserializedAADAuthenticationSettings.clientId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAADAuthenticationSettings;
        });
    }
}
