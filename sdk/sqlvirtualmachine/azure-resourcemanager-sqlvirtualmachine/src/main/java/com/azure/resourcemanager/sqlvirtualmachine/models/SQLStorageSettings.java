// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Set disk storage settings for SQL Server.
 */
@Fluent
public final class SQLStorageSettings implements JsonSerializable<SQLStorageSettings> {
    /*
     * Logical Unit Numbers for the disks.
     */
    private List<Integer> luns;

    /*
     * SQL Server default file path
     */
    private String defaultFilePath;

    /*
     * Use storage pool to build a drive if true or not provided
     */
    private Boolean useStoragePool;

    /**
     * Creates an instance of SQLStorageSettings class.
     */
    public SQLStorageSettings() {
    }

    /**
     * Get the luns property: Logical Unit Numbers for the disks.
     * 
     * @return the luns value.
     */
    public List<Integer> luns() {
        return this.luns;
    }

    /**
     * Set the luns property: Logical Unit Numbers for the disks.
     * 
     * @param luns the luns value to set.
     * @return the SQLStorageSettings object itself.
     */
    public SQLStorageSettings withLuns(List<Integer> luns) {
        this.luns = luns;
        return this;
    }

    /**
     * Get the defaultFilePath property: SQL Server default file path.
     * 
     * @return the defaultFilePath value.
     */
    public String defaultFilePath() {
        return this.defaultFilePath;
    }

    /**
     * Set the defaultFilePath property: SQL Server default file path.
     * 
     * @param defaultFilePath the defaultFilePath value to set.
     * @return the SQLStorageSettings object itself.
     */
    public SQLStorageSettings withDefaultFilePath(String defaultFilePath) {
        this.defaultFilePath = defaultFilePath;
        return this;
    }

    /**
     * Get the useStoragePool property: Use storage pool to build a drive if true or not provided.
     * 
     * @return the useStoragePool value.
     */
    public Boolean useStoragePool() {
        return this.useStoragePool;
    }

    /**
     * Set the useStoragePool property: Use storage pool to build a drive if true or not provided.
     * 
     * @param useStoragePool the useStoragePool value to set.
     * @return the SQLStorageSettings object itself.
     */
    public SQLStorageSettings withUseStoragePool(Boolean useStoragePool) {
        this.useStoragePool = useStoragePool;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("luns", this.luns, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeStringField("defaultFilePath", this.defaultFilePath);
        jsonWriter.writeBooleanField("useStoragePool", this.useStoragePool);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SQLStorageSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SQLStorageSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SQLStorageSettings.
     */
    public static SQLStorageSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SQLStorageSettings deserializedSQLStorageSettings = new SQLStorageSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("luns".equals(fieldName)) {
                    List<Integer> luns = reader.readArray(reader1 -> reader1.getInt());
                    deserializedSQLStorageSettings.luns = luns;
                } else if ("defaultFilePath".equals(fieldName)) {
                    deserializedSQLStorageSettings.defaultFilePath = reader.getString();
                } else if ("useStoragePool".equals(fieldName)) {
                    deserializedSQLStorageSettings.useStoragePool = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSQLStorageSettings;
        });
    }
}
