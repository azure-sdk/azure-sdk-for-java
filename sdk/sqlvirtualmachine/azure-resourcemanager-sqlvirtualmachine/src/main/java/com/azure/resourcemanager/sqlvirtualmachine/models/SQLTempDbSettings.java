// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Set tempDb storage settings for SQL Server.
 */
@Fluent
public final class SQLTempDbSettings implements JsonSerializable<SQLTempDbSettings> {
    /*
     * SQL Server tempdb data file size
     */
    private Integer dataFileSize;

    /*
     * SQL Server tempdb data file autoGrowth size
     */
    private Integer dataGrowth;

    /*
     * SQL Server tempdb log file size
     */
    private Integer logFileSize;

    /*
     * SQL Server tempdb log file autoGrowth size
     */
    private Integer logGrowth;

    /*
     * SQL Server tempdb data file count
     */
    private Integer dataFileCount;

    /*
     * SQL Server tempdb persist folder choice
     */
    private Boolean persistFolder;

    /*
     * SQL Server tempdb persist folder location
     */
    private String persistFolderPath;

    /*
     * Logical Unit Numbers for the disks.
     */
    private List<Integer> luns;

    /*
     * SQL Server default file path
     */
    private String defaultFilePath;

    /*
     * Use storage pool to build a drive if true or not provided
     */
    private Boolean useStoragePool;

    /**
     * Creates an instance of SQLTempDbSettings class.
     */
    public SQLTempDbSettings() {
    }

    /**
     * Get the dataFileSize property: SQL Server tempdb data file size.
     * 
     * @return the dataFileSize value.
     */
    public Integer dataFileSize() {
        return this.dataFileSize;
    }

    /**
     * Set the dataFileSize property: SQL Server tempdb data file size.
     * 
     * @param dataFileSize the dataFileSize value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withDataFileSize(Integer dataFileSize) {
        this.dataFileSize = dataFileSize;
        return this;
    }

    /**
     * Get the dataGrowth property: SQL Server tempdb data file autoGrowth size.
     * 
     * @return the dataGrowth value.
     */
    public Integer dataGrowth() {
        return this.dataGrowth;
    }

    /**
     * Set the dataGrowth property: SQL Server tempdb data file autoGrowth size.
     * 
     * @param dataGrowth the dataGrowth value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withDataGrowth(Integer dataGrowth) {
        this.dataGrowth = dataGrowth;
        return this;
    }

    /**
     * Get the logFileSize property: SQL Server tempdb log file size.
     * 
     * @return the logFileSize value.
     */
    public Integer logFileSize() {
        return this.logFileSize;
    }

    /**
     * Set the logFileSize property: SQL Server tempdb log file size.
     * 
     * @param logFileSize the logFileSize value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withLogFileSize(Integer logFileSize) {
        this.logFileSize = logFileSize;
        return this;
    }

    /**
     * Get the logGrowth property: SQL Server tempdb log file autoGrowth size.
     * 
     * @return the logGrowth value.
     */
    public Integer logGrowth() {
        return this.logGrowth;
    }

    /**
     * Set the logGrowth property: SQL Server tempdb log file autoGrowth size.
     * 
     * @param logGrowth the logGrowth value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withLogGrowth(Integer logGrowth) {
        this.logGrowth = logGrowth;
        return this;
    }

    /**
     * Get the dataFileCount property: SQL Server tempdb data file count.
     * 
     * @return the dataFileCount value.
     */
    public Integer dataFileCount() {
        return this.dataFileCount;
    }

    /**
     * Set the dataFileCount property: SQL Server tempdb data file count.
     * 
     * @param dataFileCount the dataFileCount value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withDataFileCount(Integer dataFileCount) {
        this.dataFileCount = dataFileCount;
        return this;
    }

    /**
     * Get the persistFolder property: SQL Server tempdb persist folder choice.
     * 
     * @return the persistFolder value.
     */
    public Boolean persistFolder() {
        return this.persistFolder;
    }

    /**
     * Set the persistFolder property: SQL Server tempdb persist folder choice.
     * 
     * @param persistFolder the persistFolder value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withPersistFolder(Boolean persistFolder) {
        this.persistFolder = persistFolder;
        return this;
    }

    /**
     * Get the persistFolderPath property: SQL Server tempdb persist folder location.
     * 
     * @return the persistFolderPath value.
     */
    public String persistFolderPath() {
        return this.persistFolderPath;
    }

    /**
     * Set the persistFolderPath property: SQL Server tempdb persist folder location.
     * 
     * @param persistFolderPath the persistFolderPath value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withPersistFolderPath(String persistFolderPath) {
        this.persistFolderPath = persistFolderPath;
        return this;
    }

    /**
     * Get the luns property: Logical Unit Numbers for the disks.
     * 
     * @return the luns value.
     */
    public List<Integer> luns() {
        return this.luns;
    }

    /**
     * Set the luns property: Logical Unit Numbers for the disks.
     * 
     * @param luns the luns value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withLuns(List<Integer> luns) {
        this.luns = luns;
        return this;
    }

    /**
     * Get the defaultFilePath property: SQL Server default file path.
     * 
     * @return the defaultFilePath value.
     */
    public String defaultFilePath() {
        return this.defaultFilePath;
    }

    /**
     * Set the defaultFilePath property: SQL Server default file path.
     * 
     * @param defaultFilePath the defaultFilePath value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withDefaultFilePath(String defaultFilePath) {
        this.defaultFilePath = defaultFilePath;
        return this;
    }

    /**
     * Get the useStoragePool property: Use storage pool to build a drive if true or not provided.
     * 
     * @return the useStoragePool value.
     */
    public Boolean useStoragePool() {
        return this.useStoragePool;
    }

    /**
     * Set the useStoragePool property: Use storage pool to build a drive if true or not provided.
     * 
     * @param useStoragePool the useStoragePool value to set.
     * @return the SQLTempDbSettings object itself.
     */
    public SQLTempDbSettings withUseStoragePool(Boolean useStoragePool) {
        this.useStoragePool = useStoragePool;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("dataFileSize", this.dataFileSize);
        jsonWriter.writeNumberField("dataGrowth", this.dataGrowth);
        jsonWriter.writeNumberField("logFileSize", this.logFileSize);
        jsonWriter.writeNumberField("logGrowth", this.logGrowth);
        jsonWriter.writeNumberField("dataFileCount", this.dataFileCount);
        jsonWriter.writeBooleanField("persistFolder", this.persistFolder);
        jsonWriter.writeStringField("persistFolderPath", this.persistFolderPath);
        jsonWriter.writeArrayField("luns", this.luns, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeStringField("defaultFilePath", this.defaultFilePath);
        jsonWriter.writeBooleanField("useStoragePool", this.useStoragePool);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SQLTempDbSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SQLTempDbSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SQLTempDbSettings.
     */
    public static SQLTempDbSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SQLTempDbSettings deserializedSQLTempDbSettings = new SQLTempDbSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataFileSize".equals(fieldName)) {
                    deserializedSQLTempDbSettings.dataFileSize = reader.getNullable(JsonReader::getInt);
                } else if ("dataGrowth".equals(fieldName)) {
                    deserializedSQLTempDbSettings.dataGrowth = reader.getNullable(JsonReader::getInt);
                } else if ("logFileSize".equals(fieldName)) {
                    deserializedSQLTempDbSettings.logFileSize = reader.getNullable(JsonReader::getInt);
                } else if ("logGrowth".equals(fieldName)) {
                    deserializedSQLTempDbSettings.logGrowth = reader.getNullable(JsonReader::getInt);
                } else if ("dataFileCount".equals(fieldName)) {
                    deserializedSQLTempDbSettings.dataFileCount = reader.getNullable(JsonReader::getInt);
                } else if ("persistFolder".equals(fieldName)) {
                    deserializedSQLTempDbSettings.persistFolder = reader.getNullable(JsonReader::getBoolean);
                } else if ("persistFolderPath".equals(fieldName)) {
                    deserializedSQLTempDbSettings.persistFolderPath = reader.getString();
                } else if ("luns".equals(fieldName)) {
                    List<Integer> luns = reader.readArray(reader1 -> reader1.getInt());
                    deserializedSQLTempDbSettings.luns = luns;
                } else if ("defaultFilePath".equals(fieldName)) {
                    deserializedSQLTempDbSettings.defaultFilePath = reader.getString();
                } else if ("useStoragePool".equals(fieldName)) {
                    deserializedSQLTempDbSettings.useStoragePool = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSQLTempDbSettings;
        });
    }
}
