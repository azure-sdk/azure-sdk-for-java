// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.sqlvirtualmachine.fluent.AvailabilityGroupListenersClient;
import com.azure.resourcemanager.sqlvirtualmachine.fluent.models.AvailabilityGroupListenerInner;
import com.azure.resourcemanager.sqlvirtualmachine.implementation.models.AvailabilityGroupListenerListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AvailabilityGroupListenersClient.
 */
public final class AvailabilityGroupListenersClientImpl implements AvailabilityGroupListenersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AvailabilityGroupListenersService service;

    /**
     * The service client containing this operation class.
     */
    private final SqlVirtualMachineClientImpl client;

    /**
     * Initializes an instance of AvailabilityGroupListenersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AvailabilityGroupListenersClientImpl(SqlVirtualMachineClientImpl client) {
        this.service = RestProxy.create(AvailabilityGroupListenersService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SqlVirtualMachineClientAvailabilityGroupListeners to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SqlVirtualMachineCli")
    public interface AvailabilityGroupListenersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AvailabilityGroupListenerInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @PathParam("availabilityGroupListenerName") String availabilityGroupListenerName,
            @QueryParam("$expand") String expand, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AvailabilityGroupListenerInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @PathParam("availabilityGroupListenerName") String availabilityGroupListenerName,
            @QueryParam("$expand") String expand, @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @PathParam("availabilityGroupListenerName") String availabilityGroupListenerName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") AvailabilityGroupListenerInner parameters, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @PathParam("availabilityGroupListenerName") String availabilityGroupListenerName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") AvailabilityGroupListenerInner parameters, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @PathParam("availabilityGroupListenerName") String availabilityGroupListenerName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @PathParam("availabilityGroupListenerName") String availabilityGroupListenerName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AvailabilityGroupListenerListResult>> listByGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AvailabilityGroupListenerListResult> listByGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlVirtualMachineGroupName") String sqlVirtualMachineGroupName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AvailabilityGroupListenerListResult>> listByGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AvailabilityGroupListenerListResult> listByGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param expand The child resources to include in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an availability group listener along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AvailabilityGroupListenerInner>> getWithResponseAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName, String availabilityGroupListenerName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
                availabilityGroupListenerName, expand, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an availability group listener on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AvailabilityGroupListenerInner> getAsync(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName) {
        final String expand = null;
        return getWithResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName,
            expand).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param expand The child resources to include in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an availability group listener along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AvailabilityGroupListenerInner> getWithResponse(String resourceGroupName,
        String sqlVirtualMachineGroupName, String availabilityGroupListenerName, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, expand, accept, context);
    }

    /**
     * Gets an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an availability group listener.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AvailabilityGroupListenerInner get(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName) {
        final String expand = null;
        return getWithResponse(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, expand,
            Context.NONE).getValue();
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server availability group listener along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName, String availabilityGroupListenerName,
        AvailabilityGroupListenerInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
                availabilityGroupListenerName, contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server availability group listener along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
            availabilityGroupListenerName, contentType, accept, parameters, Context.NONE);
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server availability group listener along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
            availabilityGroupListenerName, contentType, accept, parameters, context);
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a SQL Server availability group listener.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AvailabilityGroupListenerInner>, AvailabilityGroupListenerInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String sqlVirtualMachineGroupName,
            String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters);
        return this.client.<AvailabilityGroupListenerInner, AvailabilityGroupListenerInner>getLroResult(mono,
            this.client.getHttpPipeline(), AvailabilityGroupListenerInner.class, AvailabilityGroupListenerInner.class,
            this.client.getContext());
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SQL Server availability group listener.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AvailabilityGroupListenerInner>, AvailabilityGroupListenerInner> beginCreateOrUpdate(
        String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName,
        AvailabilityGroupListenerInner parameters) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, sqlVirtualMachineGroupName,
            availabilityGroupListenerName, parameters);
        return this.client.<AvailabilityGroupListenerInner, AvailabilityGroupListenerInner>getLroResult(response,
            AvailabilityGroupListenerInner.class, AvailabilityGroupListenerInner.class, Context.NONE);
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SQL Server availability group listener.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AvailabilityGroupListenerInner>, AvailabilityGroupListenerInner> beginCreateOrUpdate(
        String resourceGroupName, String sqlVirtualMachineGroupName, String availabilityGroupListenerName,
        AvailabilityGroupListenerInner parameters, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, sqlVirtualMachineGroupName,
            availabilityGroupListenerName, parameters, context);
        return this.client.<AvailabilityGroupListenerInner, AvailabilityGroupListenerInner>getLroResult(response,
            AvailabilityGroupListenerInner.class, AvailabilityGroupListenerInner.class, context);
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server availability group listener on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AvailabilityGroupListenerInner> createOrUpdateAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName, String availabilityGroupListenerName,
        AvailabilityGroupListenerInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName,
            parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server availability group listener.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AvailabilityGroupListenerInner createOrUpdate(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters) {
        return beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName,
            parameters).getFinalResult();
    }

    /**
     * Creates or updates an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param parameters The availability group listener.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Server availability group listener.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AvailabilityGroupListenerInner createOrUpdate(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, AvailabilityGroupListenerInner parameters, Context context) {
        return beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName,
            parameters, context).getFinalResult();
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
                availabilityGroupListenerName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
            availabilityGroupListenerName, accept, Context.NONE);
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        if (availabilityGroupListenerName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter availabilityGroupListenerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName,
            availabilityGroupListenerName, accept, context);
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName, String availabilityGroupListenerName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName) {
        return beginDeleteAsync(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName) {
        beginDelete(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName).getFinalResult();
    }

    /**
     * Deletes an availability group listener.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param availabilityGroupListenerName Name of the availability group listener.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlVirtualMachineGroupName,
        String availabilityGroupListenerName, Context context) {
        beginDelete(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, context)
            .getFinalResult();
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AvailabilityGroupListenerInner>> listByGroupSinglePageAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName, accept, context))
            .<PagedResponse<AvailabilityGroupListenerInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AvailabilityGroupListenerInner> listByGroupAsync(String resourceGroupName,
        String sqlVirtualMachineGroupName) {
        return new PagedFlux<>(() -> listByGroupSinglePageAsync(resourceGroupName, sqlVirtualMachineGroupName),
            nextLink -> listByGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AvailabilityGroupListenerInner> listByGroupSinglePage(String resourceGroupName,
        String sqlVirtualMachineGroupName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AvailabilityGroupListenerListResult> res
            = service.listByGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AvailabilityGroupListenerInner> listByGroupSinglePage(String resourceGroupName,
        String sqlVirtualMachineGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlVirtualMachineGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter sqlVirtualMachineGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AvailabilityGroupListenerListResult> res
            = service.listByGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, sqlVirtualMachineGroupName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AvailabilityGroupListenerInner> listByGroup(String resourceGroupName,
        String sqlVirtualMachineGroupName) {
        return new PagedIterable<>(() -> listByGroupSinglePage(resourceGroupName, sqlVirtualMachineGroupName),
            nextLink -> listByGroupNextSinglePage(nextLink));
    }

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AvailabilityGroupListenerInner> listByGroup(String resourceGroupName,
        String sqlVirtualMachineGroupName, Context context) {
        return new PagedIterable<>(() -> listByGroupSinglePage(resourceGroupName, sqlVirtualMachineGroupName, context),
            nextLink -> listByGroupNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AvailabilityGroupListenerInner>> listByGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AvailabilityGroupListenerInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AvailabilityGroupListenerInner> listByGroupNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AvailabilityGroupListenerListResult> res
            = service.listByGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AvailabilityGroupListener list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AvailabilityGroupListenerInner> listByGroupNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AvailabilityGroupListenerListResult> res
            = service.listByGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(AvailabilityGroupListenersClientImpl.class);
}
