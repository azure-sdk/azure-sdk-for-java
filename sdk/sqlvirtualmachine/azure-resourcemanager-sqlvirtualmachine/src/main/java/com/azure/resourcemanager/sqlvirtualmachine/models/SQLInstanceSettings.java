// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sqlvirtualmachine.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Set the server/instance-level settings for SQL Server.
 */
@Fluent
public final class SQLInstanceSettings implements JsonSerializable<SQLInstanceSettings> {
    /*
     * SQL Server Collation.
     */
    private String collation;

    /*
     * SQL Server MAXDOP.
     */
    private Integer maxDop;

    /*
     * SQL Server Optimize for Adhoc workloads.
     */
    private Boolean isOptimizeForAdHocWorkloadsEnabled;

    /*
     * SQL Server minimum memory.
     */
    private Integer minServerMemoryMB;

    /*
     * SQL Server maximum memory.
     */
    private Integer maxServerMemoryMB;

    /*
     * SQL Server LPIM.
     */
    private Boolean isLpimEnabled;

    /*
     * SQL Server IFI.
     */
    private Boolean isIfiEnabled;

    /**
     * Creates an instance of SQLInstanceSettings class.
     */
    public SQLInstanceSettings() {
    }

    /**
     * Get the collation property: SQL Server Collation.
     * 
     * @return the collation value.
     */
    public String collation() {
        return this.collation;
    }

    /**
     * Set the collation property: SQL Server Collation.
     * 
     * @param collation the collation value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withCollation(String collation) {
        this.collation = collation;
        return this;
    }

    /**
     * Get the maxDop property: SQL Server MAXDOP.
     * 
     * @return the maxDop value.
     */
    public Integer maxDop() {
        return this.maxDop;
    }

    /**
     * Set the maxDop property: SQL Server MAXDOP.
     * 
     * @param maxDop the maxDop value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withMaxDop(Integer maxDop) {
        this.maxDop = maxDop;
        return this;
    }

    /**
     * Get the isOptimizeForAdHocWorkloadsEnabled property: SQL Server Optimize for Adhoc workloads.
     * 
     * @return the isOptimizeForAdHocWorkloadsEnabled value.
     */
    public Boolean isOptimizeForAdHocWorkloadsEnabled() {
        return this.isOptimizeForAdHocWorkloadsEnabled;
    }

    /**
     * Set the isOptimizeForAdHocWorkloadsEnabled property: SQL Server Optimize for Adhoc workloads.
     * 
     * @param isOptimizeForAdHocWorkloadsEnabled the isOptimizeForAdHocWorkloadsEnabled value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withIsOptimizeForAdHocWorkloadsEnabled(Boolean isOptimizeForAdHocWorkloadsEnabled) {
        this.isOptimizeForAdHocWorkloadsEnabled = isOptimizeForAdHocWorkloadsEnabled;
        return this;
    }

    /**
     * Get the minServerMemoryMB property: SQL Server minimum memory.
     * 
     * @return the minServerMemoryMB value.
     */
    public Integer minServerMemoryMB() {
        return this.minServerMemoryMB;
    }

    /**
     * Set the minServerMemoryMB property: SQL Server minimum memory.
     * 
     * @param minServerMemoryMB the minServerMemoryMB value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withMinServerMemoryMB(Integer minServerMemoryMB) {
        this.minServerMemoryMB = minServerMemoryMB;
        return this;
    }

    /**
     * Get the maxServerMemoryMB property: SQL Server maximum memory.
     * 
     * @return the maxServerMemoryMB value.
     */
    public Integer maxServerMemoryMB() {
        return this.maxServerMemoryMB;
    }

    /**
     * Set the maxServerMemoryMB property: SQL Server maximum memory.
     * 
     * @param maxServerMemoryMB the maxServerMemoryMB value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withMaxServerMemoryMB(Integer maxServerMemoryMB) {
        this.maxServerMemoryMB = maxServerMemoryMB;
        return this;
    }

    /**
     * Get the isLpimEnabled property: SQL Server LPIM.
     * 
     * @return the isLpimEnabled value.
     */
    public Boolean isLpimEnabled() {
        return this.isLpimEnabled;
    }

    /**
     * Set the isLpimEnabled property: SQL Server LPIM.
     * 
     * @param isLpimEnabled the isLpimEnabled value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withIsLpimEnabled(Boolean isLpimEnabled) {
        this.isLpimEnabled = isLpimEnabled;
        return this;
    }

    /**
     * Get the isIfiEnabled property: SQL Server IFI.
     * 
     * @return the isIfiEnabled value.
     */
    public Boolean isIfiEnabled() {
        return this.isIfiEnabled;
    }

    /**
     * Set the isIfiEnabled property: SQL Server IFI.
     * 
     * @param isIfiEnabled the isIfiEnabled value to set.
     * @return the SQLInstanceSettings object itself.
     */
    public SQLInstanceSettings withIsIfiEnabled(Boolean isIfiEnabled) {
        this.isIfiEnabled = isIfiEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("collation", this.collation);
        jsonWriter.writeNumberField("maxDop", this.maxDop);
        jsonWriter.writeBooleanField("isOptimizeForAdHocWorkloadsEnabled", this.isOptimizeForAdHocWorkloadsEnabled);
        jsonWriter.writeNumberField("minServerMemoryMB", this.minServerMemoryMB);
        jsonWriter.writeNumberField("maxServerMemoryMB", this.maxServerMemoryMB);
        jsonWriter.writeBooleanField("isLpimEnabled", this.isLpimEnabled);
        jsonWriter.writeBooleanField("isIfiEnabled", this.isIfiEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SQLInstanceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SQLInstanceSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SQLInstanceSettings.
     */
    public static SQLInstanceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SQLInstanceSettings deserializedSQLInstanceSettings = new SQLInstanceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collation".equals(fieldName)) {
                    deserializedSQLInstanceSettings.collation = reader.getString();
                } else if ("maxDop".equals(fieldName)) {
                    deserializedSQLInstanceSettings.maxDop = reader.getNullable(JsonReader::getInt);
                } else if ("isOptimizeForAdHocWorkloadsEnabled".equals(fieldName)) {
                    deserializedSQLInstanceSettings.isOptimizeForAdHocWorkloadsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("minServerMemoryMB".equals(fieldName)) {
                    deserializedSQLInstanceSettings.minServerMemoryMB = reader.getNullable(JsonReader::getInt);
                } else if ("maxServerMemoryMB".equals(fieldName)) {
                    deserializedSQLInstanceSettings.maxServerMemoryMB = reader.getNullable(JsonReader::getInt);
                } else if ("isLpimEnabled".equals(fieldName)) {
                    deserializedSQLInstanceSettings.isLpimEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("isIfiEnabled".equals(fieldName)) {
                    deserializedSQLInstanceSettings.isIfiEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSQLInstanceSettings;
        });
    }
}
