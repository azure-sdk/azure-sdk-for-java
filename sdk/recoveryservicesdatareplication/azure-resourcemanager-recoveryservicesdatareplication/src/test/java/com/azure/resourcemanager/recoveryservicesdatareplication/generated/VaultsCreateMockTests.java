// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ManagedServiceIdentity;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.ReplicationVaultType;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.UserAssignedIdentity;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModel;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.VaultModelProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VaultsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"serviceResourceId\":\"ujtv\",\"vaultType\":\"DisasterRecovery\"},\"identity\":{\"principalId\":\"yxrxmunj\",\"tenantId\":\"vg\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"iypfp\":{\"clientId\":\"lxpaglqivbgkcv\",\"principalId\":\"pzvuqdflvo\"}}},\"location\":\"cpzgpxtiv\",\"tags\":{\"n\":\"nidibgqjxg\",\"kqmhhaowjr\":\"hgovfgp\"},\"id\":\"zvuporqzdfuydz\",\"name\":\"kfvxcnq\",\"type\":\"xqpswok\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        VaultModel response = manager.vaults()
            .define("rgxffmshkw")
            .withRegion("uunfprnjletlxsm")
            .withExistingResourceGroup("ctctbrxkjz")
            .withTags(mapOf("ifamowazi", "do", "hxqszdtmaajquh", "nknlqwzdvpi"))
            .withProperties(new VaultModelProperties().withVaultType(ReplicationVaultType.MIGRATE))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("w", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("cpzgpxtiv", response.location());
        Assertions.assertEquals("nidibgqjxg", response.tags().get("n"));
        Assertions.assertEquals(ReplicationVaultType.DISASTER_RECOVERY, response.properties().vaultType());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
