// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionProxy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionProxieMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Deleting\",\"remotePrivateEndpoint\":{\"id\":\"ehnmnaoyankco\",\"privateLinkServiceConnections\":[{\"name\":\"ankltytm\",\"groupIds\":[\"oznnhdrlktgj\",\"sggux\",\"eml\",\"ywaeeczgf\"],\"requestMessage\":\"kklelssxblycs\"},{\"name\":\"ujksrlsmdesqplpv\",\"groupIds\":[\"doewbidyvt\",\"owx\",\"gpiudeug\"],\"requestMessage\":\"xzecpaxwkufykhvu\"},{\"name\":\"epmrut\",\"groupIds\":[\"baobn\",\"lujdjltymkmv\",\"uihywart\",\"pphkixkykxds\"],\"requestMessage\":\"pemmucfxhik\"}],\"manualPrivateLinkServiceConnections\":[{\"name\":\"mymyincqlhri\",\"groupIds\":[\"lmiiiovg\"],\"requestMessage\":\"gxuugqkctotio\"},{\"name\":\"xteqdptjgwdtg\",\"groupIds\":[\"anblwphqlkccu\",\"gygqwah\",\"iul\",\"gniiprglvaw\"],\"requestMessage\":\"z\"},{\"name\":\"fypiv\",\"groupIds\":[\"bjpmcubk\",\"ifoxxkubvphav\",\"mhbrbqgvg\"],\"requestMessage\":\"pbbttefjoknss\"},{\"name\":\"zqedikdfrdbi\",\"groupIds\":[\"jgeihfqlggwfi\",\"zcxmjpbyep\"],\"requestMessage\":\"gt\"}],\"privateLinkServiceProxies\":[{\"id\":\"rc\",\"remotePrivateLinkServiceConnectionState\":{},\"remotePrivateEndpointConnection\":{},\"groupConnectivityInformation\":[{}]}],\"connectionDetails\":[{\"id\":\"hnp\",\"privateIpAddress\":\"yqwcabvnuil\",\"linkIdentifier\":\"yaswlpaugmr\",\"groupId\":\"jlrxwtoaukhfk\",\"memberName\":\"isizm\"},{\"id\":\"eds\",\"privateIpAddress\":\"wuived\",\"linkIdentifier\":\"gyeewxeiq\",\"groupId\":\"smgomguaml\",\"memberName\":\"l\"},{\"id\":\"msplzgaufcshhvn\",\"privateIpAddress\":\"gnxkympqan\",\"linkIdentifier\":\"jk\",\"groupId\":\"tw\",\"memberName\":\"aoypny\"},{\"id\":\"shxcylhkg\",\"privateIpAddress\":\"sghpx\",\"linkIdentifier\":\"phdrw\",\"groupId\":\"khv\",\"memberName\":\"macl\"}]}},\"etag\":\"vxnqmhrpqpd\",\"id\":\"mkoisqcssf\",\"name\":\"xuifmcsypobkdqz\",\"type\":\"dzsylollgtrczz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnectionProxy response = manager.privateEndpointConnectionProxies()
            .getWithResponse("czcswka", "ve", "yfdvlvhbwrnfxtgd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ehnmnaoyankco", response.properties().remotePrivateEndpoint().id());
        Assertions.assertEquals("ankltytm",
            response.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("oznnhdrlktgj",
            response.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).groupIds().get(0));
        Assertions.assertEquals("kklelssxblycs",
            response.properties().remotePrivateEndpoint().privateLinkServiceConnections().get(0).requestMessage());
        Assertions.assertEquals("mymyincqlhri",
            response.properties().remotePrivateEndpoint().manualPrivateLinkServiceConnections().get(0).name());
        Assertions.assertEquals("lmiiiovg",
            response.properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .groupIds()
                .get(0));
        Assertions.assertEquals("gxuugqkctotio",
            response.properties()
                .remotePrivateEndpoint()
                .manualPrivateLinkServiceConnections()
                .get(0)
                .requestMessage());
        Assertions.assertEquals("rc",
            response.properties().remotePrivateEndpoint().privateLinkServiceProxies().get(0).id());
        Assertions.assertEquals("hnp", response.properties().remotePrivateEndpoint().connectionDetails().get(0).id());
        Assertions.assertEquals("yqwcabvnuil",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).privateIpAddress());
        Assertions.assertEquals("yaswlpaugmr",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).linkIdentifier());
        Assertions.assertEquals("jlrxwtoaukhfk",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).groupId());
        Assertions.assertEquals("isizm",
            response.properties().remotePrivateEndpoint().connectionDetails().get(0).memberName());
        Assertions.assertEquals("vxnqmhrpqpd", response.etag());
    }
}
