// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservicesdatareplication.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservicesdatareplication.RecoveryServicesDataReplicationManager;
import com.azure.resourcemanager.recoveryservicesdatareplication.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpoint;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnection;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionResponseProperties;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateEndpointConnectionStatus;
import com.azure.resourcemanager.recoveryservicesdatareplication.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsUpdatMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Failed\",\"privateEndpoint\":{\"id\":\"a\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"qtljqobbpihehc\",\"actionsRequired\":\"ybmrqbrjbbmp\"}},\"id\":\"lvykfrex\",\"name\":\"rseqwjksghudgz\",\"type\":\"xog\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesDataReplicationManager manager = RecoveryServicesDataReplicationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response
            = manager.privateEndpointConnections()
                .updateWithResponse("jcitdigsxcdglj", "lkeuac", "tomflrytswfpf",
                    new PrivateEndpointConnectionInner()
                        .withProperties(new PrivateEndpointConnectionResponseProperties()
                            .withPrivateEndpoint(new PrivateEndpoint().withId("nmskwhqj"))
                            .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                                .withStatus(PrivateEndpointConnectionStatus.PENDING)
                                .withDescription("rlpshhkv")
                                .withActionsRequired("dwqslsrhmpqvw"))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("a", response.properties().privateEndpoint().id());
        Assertions.assertEquals(PrivateEndpointConnectionStatus.APPROVED,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("qtljqobbpihehc",
            response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("ybmrqbrjbbmp",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
