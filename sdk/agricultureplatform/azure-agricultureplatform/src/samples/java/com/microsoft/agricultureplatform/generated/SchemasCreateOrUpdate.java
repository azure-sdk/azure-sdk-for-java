// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.generated;

import com.azure.core.credential.KeyCredential;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.microsoft.agricultureplatform.AgriculturePlatformClientBuilder;
import com.microsoft.agricultureplatform.SchemasOperationsClient;
import com.microsoft.agricultureplatform.models.Schema;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

public class SchemasCreateOrUpdate {
    public static void main(String[] args) {
        SchemasOperationsClient schemasOperationsClient = new AgriculturePlatformClientBuilder()
            .credential(new KeyCredential(Configuration.getGlobalConfiguration().get("API_KEY")))
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
            .buildSchemasOperationsClient();
        // BEGIN:com.microsoft.agricultureplatform.generated.schemasoperationscreateorupdate.schemascreateorupdate
        Schema response = schemasOperationsClient.createOrUpdate("SCHEMA123",
            new Schema().setSchemaModel(
                mapOf("type", BinaryData.fromBytes("object".getBytes(StandardCharsets.UTF_8)), "properties",
                    BinaryData.fromBytes("{name={type=string, minLength=2, maxLength=100}, geometry={type=object}}"
                        .getBytes(StandardCharsets.UTF_8)))));
        // END:com.microsoft.agricultureplatform.generated.schemasoperationscreateorupdate.schemascreateorupdate
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
