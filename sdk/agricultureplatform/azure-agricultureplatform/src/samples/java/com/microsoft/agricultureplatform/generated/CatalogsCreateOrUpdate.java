// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.generated;

import com.azure.core.credential.KeyCredential;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.microsoft.agricultureplatform.AgriculturePlatformClientBuilder;
import com.microsoft.agricultureplatform.CatalogsOperationsClient;
import com.microsoft.agricultureplatform.models.Catalog;
import com.microsoft.agricultureplatform.models.DestinationType;
import com.microsoft.agricultureplatform.models.Link;
import com.microsoft.agricultureplatform.models.RelationshipType;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class CatalogsCreateOrUpdate {
    public static void main(String[] args) {
        CatalogsOperationsClient catalogsOperationsClient = new AgriculturePlatformClientBuilder()
            .credential(new KeyCredential(Configuration.getGlobalConfiguration().get("API_KEY")))
            .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
            .buildCatalogsOperationsClient();
        // BEGIN:com.microsoft.agricultureplatform.generated.catalogsoperationscreateorupdate.catalogscreateorupdate
        Catalog response = catalogsOperationsClient.createOrUpdate("CATALOG123",
            new Catalog().setLinks(Arrays.asList(
                new Link().setRel(RelationshipType.DERIVED_FROM).setHref("string").setType(DestinationType.CATALOG)))
                .setStatus("string")
                .setSource("string")
                .setName("string")
                .setDescription("string")
                .setProperties(mapOf("key1", BinaryData.fromBytes("value1".getBytes(StandardCharsets.UTF_8)), "key2",
                    BinaryData.fromBytes("123.45".getBytes(StandardCharsets.UTF_8)))));
        // END:com.microsoft.agricultureplatform.generated.catalogsoperationscreateorupdate.catalogscreateorupdate
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
