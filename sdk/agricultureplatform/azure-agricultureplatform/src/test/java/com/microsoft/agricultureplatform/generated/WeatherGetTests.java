// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.generated;

import com.microsoft.agricultureplatform.models.ApiKeyAuthCredentials;
import com.microsoft.agricultureplatform.models.ErrorForLocation;
import com.microsoft.agricultureplatform.models.KeyVaultProperties;
import com.microsoft.agricultureplatform.models.Measures;
import com.microsoft.agricultureplatform.models.WeatherData;
import com.microsoft.agricultureplatform.models.WeatherDataErrors;
import com.microsoft.agricultureplatform.models.WeatherLocation;
import com.microsoft.agricultureplatform.models.WeatherLocationData;
import com.microsoft.agricultureplatform.models.WeatherMetadata;
import com.microsoft.agricultureplatform.models.WeatherResponse;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class WeatherGetTests extends AgriculturePlatformClientTestBase {
    @Test
    @Disabled
    public void testWeatherGetTests() {
        // method invocation
        WeatherResponse response = weatherOperationsClient.get("string", "string", "string", "en-US",
            new ApiKeyAuthCredentials(
                new KeyVaultProperties("fakeTokenPlaceholder", "fakeTokenPlaceholder", "fakeTokenPlaceholder")),
            Arrays.asList(new WeatherLocation("string", "string")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "weatherMetadata"
        WeatherMetadata responseWeatherMetadata = response.getWeatherMetadata();
        Assertions.assertNotNull(responseWeatherMetadata);
        Assertions.assertEquals("IBM.TWC", responseWeatherMetadata.getProviderName());
        Assertions.assertEquals("7-day-daily-forecast", responseWeatherMetadata.getProviderApiName());
        Assertions.assertEquals("hi-IN", responseWeatherMetadata.getLanguage());
        Assertions.assertEquals("e", responseWeatherMetadata.getUnits());
        Assertions.assertEquals("forecast", responseWeatherMetadata.getWeatherDataType());
        // verify property "status"
        Assertions.assertEquals("Succeeded", response.getStatus());
        // verify property "locations"
        List<WeatherLocationData> responseLocations = response.getLocations();
        WeatherLocationData responseLocationsFirstItem = responseLocations.iterator().next();
        Assertions.assertNotNull(responseLocationsFirstItem);
        WeatherLocation responseLocationsFirstItemLocation = responseLocationsFirstItem.getLocation();
        Assertions.assertNotNull(responseLocationsFirstItemLocation);
        Assertions.assertEquals("LatLong", responseLocationsFirstItemLocation.getType());
        Assertions.assertEquals("1,40", responseLocationsFirstItemLocation.getValue());
        Assertions.assertNotNull(responseLocationsFirstItem.getLastRefreshedDateTime());
        WeatherData responseLocationsFirstItemData = responseLocationsFirstItem.getData();
        Assertions.assertNotNull(responseLocationsFirstItemData);
        Assertions.assertNotNull(responseLocationsFirstItemData.getAdditionalAttributes());
        Measures responseLocationsFirstItemDataCloudCover = responseLocationsFirstItemData.getCloudCover();
        Assertions.assertNotNull(responseLocationsFirstItemDataCloudCover);
        Assertions.assertEquals("percentage", responseLocationsFirstItemDataCloudCover.getUnit());
        List<Double> responseLocationsFirstItemDataCloudCoverValue
            = responseLocationsFirstItemDataCloudCover.getValue();
        Assertions.assertEquals(63.0, responseLocationsFirstItemDataCloudCoverValue.iterator().next());
        List<String> responseLocationsFirstItemDataDayOfWeek = responseLocationsFirstItemData.getDayOfWeek();
        Assertions.assertEquals("शुक्रवार", responseLocationsFirstItemDataDayOfWeek.iterator().next());
        List<String> responseLocationsFirstItemDataDayOrNight = responseLocationsFirstItemData.getDayOrNight();
        Assertions.assertEquals("D", responseLocationsFirstItemDataDayOrNight.iterator().next());
        List<String> responseLocationsFirstItemDataExpirationTime = responseLocationsFirstItemData.getExpirationTime();
        Assertions.assertEquals("2024-10-04T09:33:27Z", responseLocationsFirstItemDataExpirationTime.iterator().next());
        List<Integer> responseLocationsFirstItemDataIconCode = responseLocationsFirstItemData.getIconCode();
        Assertions.assertEquals(30, responseLocationsFirstItemDataIconCode.iterator().next());
        List<Integer> responseLocationsFirstItemDataIconCodeExtend = responseLocationsFirstItemData.getIconCodeExtend();
        Assertions.assertEquals(3000, responseLocationsFirstItemDataIconCodeExtend.iterator().next());
        Measures responseLocationsFirstItemDataRelativeHumidity = responseLocationsFirstItemData.getRelativeHumidity();
        Assertions.assertNotNull(responseLocationsFirstItemDataRelativeHumidity);
        Assertions.assertEquals("percentage", responseLocationsFirstItemDataRelativeHumidity.getUnit());
        List<Double> responseLocationsFirstItemDataRelativeHumidityValue
            = responseLocationsFirstItemDataRelativeHumidity.getValue();
        Assertions.assertEquals(30.0, responseLocationsFirstItemDataRelativeHumidityValue.iterator().next());
        Measures responseLocationsFirstItemDataTemperature = responseLocationsFirstItemData.getTemperature();
        Assertions.assertNotNull(responseLocationsFirstItemDataTemperature);
        Assertions.assertEquals("fahrenheit", responseLocationsFirstItemDataTemperature.getUnit());
        List<Double> responseLocationsFirstItemDataTemperatureValue
            = responseLocationsFirstItemDataTemperature.getValue();
        Assertions.assertEquals(99.0, responseLocationsFirstItemDataTemperatureValue.iterator().next());
        Measures responseLocationsFirstItemDataTemperatureHeatIndex
            = responseLocationsFirstItemData.getTemperatureHeatIndex();
        Assertions.assertNotNull(responseLocationsFirstItemDataTemperatureHeatIndex);
        Assertions.assertEquals("fahrenheit", responseLocationsFirstItemDataTemperatureHeatIndex.getUnit());
        List<Double> responseLocationsFirstItemDataTemperatureHeatIndexValue
            = responseLocationsFirstItemDataTemperatureHeatIndex.getValue();
        Assertions.assertEquals(99.0, responseLocationsFirstItemDataTemperatureHeatIndexValue.iterator().next());
        Measures responseLocationsFirstItemDataTemperatureWindChill
            = responseLocationsFirstItemData.getTemperatureWindChill();
        Assertions.assertNotNull(responseLocationsFirstItemDataTemperatureWindChill);
        Assertions.assertEquals("fahrenheit", responseLocationsFirstItemDataTemperatureWindChill.getUnit());
        List<Double> responseLocationsFirstItemDataTemperatureWindChillValue
            = responseLocationsFirstItemDataTemperatureWindChill.getValue();
        Assertions.assertEquals(93.0, responseLocationsFirstItemDataTemperatureWindChillValue.iterator().next());
        List<String> responseLocationsFirstItemDataUvDescription = responseLocationsFirstItemData.getUvDescription();
        Assertions.assertEquals("अति", responseLocationsFirstItemDataUvDescription.iterator().next());
        List<Double> responseLocationsFirstItemDataUvIndex = responseLocationsFirstItemData.getUvIndex();
        Assertions.assertEquals(11.0, responseLocationsFirstItemDataUvIndex.iterator().next());
        List<String> responseLocationsFirstItemDataValidTimeLocal = responseLocationsFirstItemData.getValidTimeLocal();
        Assertions.assertEquals("2024-10-04T07:00:00+0300",
            responseLocationsFirstItemDataValidTimeLocal.iterator().next());
        List<String> responseLocationsFirstItemDataValidTime = responseLocationsFirstItemData.getValidTime();
        Assertions.assertEquals("2024-10-04T04:00:00Z", responseLocationsFirstItemDataValidTime.iterator().next());
        Measures responseLocationsFirstItemDataWindDirection = responseLocationsFirstItemData.getWindDirection();
        Assertions.assertNotNull(responseLocationsFirstItemDataWindDirection);
        Assertions.assertEquals("degree", responseLocationsFirstItemDataWindDirection.getUnit());
        List<Double> responseLocationsFirstItemDataWindDirectionValue
            = responseLocationsFirstItemDataWindDirection.getValue();
        Assertions.assertEquals(164.0, responseLocationsFirstItemDataWindDirectionValue.iterator().next());
        Measures responseLocationsFirstItemDataWindSpeed = responseLocationsFirstItemData.getWindSpeed();
        Assertions.assertNotNull(responseLocationsFirstItemDataWindSpeed);
        Assertions.assertEquals("miles/hour", responseLocationsFirstItemDataWindSpeed.getUnit());
        List<Double> responseLocationsFirstItemDataWindSpeedValue = responseLocationsFirstItemDataWindSpeed.getValue();
        Assertions.assertEquals(14.0, responseLocationsFirstItemDataWindSpeedValue.iterator().next());
        List<String> responseLocationsFirstItemDataWxPhraseLong = responseLocationsFirstItemData.getWxPhraseLong();
        Assertions.assertEquals("आंशिक रूप से बादल छाये हुए",
            responseLocationsFirstItemDataWxPhraseLong.iterator().next());
        List<String> responseLocationsFirstItemDataWxPhraseShort = responseLocationsFirstItemData.getWxPhraseShort();
        Assertions.assertEquals("", responseLocationsFirstItemDataWxPhraseShort.iterator().next());
        // verify property "errors"
        WeatherDataErrors responseErrors = response.getErrors();
        Assertions.assertNotNull(responseErrors);
        List<ErrorForLocation> responseErrorsLocations = responseErrors.getLocations();
        Assertions.assertEquals(0, responseErrorsLocations.size());
    }
}
