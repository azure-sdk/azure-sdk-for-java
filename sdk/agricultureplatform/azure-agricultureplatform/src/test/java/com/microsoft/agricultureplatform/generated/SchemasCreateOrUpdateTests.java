// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.generated;

import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.models.CatalogCollection;
import com.microsoft.agricultureplatform.models.Schema;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class SchemasCreateOrUpdateTests extends AgriculturePlatformClientTestBase {
    @Test
    @Disabled
    public void testSchemasCreateOrUpdateTests() {
        // method invocation
        Schema response = schemasOperationsClient.createOrUpdate("SCHEMA123",
            new Schema().setSchemaModel(
                mapOf("type", BinaryData.fromBytes("object".getBytes(StandardCharsets.UTF_8)), "properties",
                    BinaryData.fromBytes("{name={type=string, minLength=2, maxLength=100}, geometry={type=object}}"
                        .getBytes(StandardCharsets.UTF_8)))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "eTag"
        Assertions.assertEquals("0e003976-0000-0100-0000-66ff8fb20000", response.getETag());
        // verify property "createdDateTime"
        Assertions.assertNotNull(response.getCreatedDateTime());
        // verify property "modifiedDateTime"
        Assertions.assertNotNull(response.getModifiedDateTime());
        // verify property "dependentCollections"
        List<CatalogCollection> responseDependentCollections = response.getDependentCollections();
        Assertions.assertEquals(0, responseDependentCollections.size());
        // verify property "schemaModel"
        Assertions.assertNotNull(response.getSchemaModel());
        // verify property "id"
        Assertions.assertEquals("SCHEMA123", response.getId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
