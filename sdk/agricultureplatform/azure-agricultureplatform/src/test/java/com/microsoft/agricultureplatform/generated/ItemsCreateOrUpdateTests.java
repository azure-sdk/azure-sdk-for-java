// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.generated;

import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.models.Asset;
import com.microsoft.agricultureplatform.models.DataFormat;
import com.microsoft.agricultureplatform.models.DestinationType;
import com.microsoft.agricultureplatform.models.Item;
import com.microsoft.agricultureplatform.models.Link;
import com.microsoft.agricultureplatform.models.RelationshipType;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class ItemsCreateOrUpdateTests extends AgriculturePlatformClientTestBase {
    @Test
    @Disabled
    public void testItemsCreateOrUpdateTests() {
        // method invocation
        Item response = itemsOperationsClient.createOrUpdate("CATALOG123", "COLLECTION123", "ITEM123",
            new Item().setLinks(Arrays.asList(
                new Link().setRel(RelationshipType.DERIVED_FROM).setHref("string").setType(DestinationType.CATALOG)))
                .setStatus("string")
                .setSource("string")
                .setName("string")
                .setDescription("string")
                .setProperties(mapOf("key1", BinaryData.fromBytes("value1".getBytes(StandardCharsets.UTF_8)), "key2",
                    BinaryData.fromBytes("123.45".getBytes(StandardCharsets.UTF_8))))
                .setData(mapOf("Company", BinaryData.fromBytes("string".getBytes(StandardCharsets.UTF_8)), "name",
                    BinaryData.fromBytes("string".getBytes(StandardCharsets.UTF_8))))
                .setOwnerItemId("lavi-item")
                .setAssets(Arrays.asList(new Asset().setType(DataFormat.IMAGE).setName("string").setHref("string"))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "links"
        List<Link> responseLinks = response.getLinks();
        Link responseLinksFirstItem = responseLinks.iterator().next();
        Assertions.assertNotNull(responseLinksFirstItem);
        Assertions.assertEquals(RelationshipType.DERIVED_FROM, responseLinksFirstItem.getRel());
        Assertions.assertEquals("string", responseLinksFirstItem.getHref());
        Assertions.assertEquals(DestinationType.CATALOG, responseLinksFirstItem.getType());
        // verify property "eTag"
        Assertions.assertEquals("0f009dc6-0000-0100-0000-66ffb1c00000", response.getETag());
        // verify property "status"
        Assertions.assertEquals("string", response.getStatus());
        // verify property "createdDateTime"
        Assertions.assertNotNull(response.getCreatedDateTime());
        // verify property "modifiedDateTime"
        Assertions.assertNotNull(response.getModifiedDateTime());
        // verify property "source"
        Assertions.assertEquals("string", response.getSource());
        // verify property "name"
        Assertions.assertEquals("string", response.getName());
        // verify property "description"
        Assertions.assertEquals("string", response.getDescription());
        // verify property "properties"
        Assertions.assertNotNull(response.getProperties());
        // verify property "data"
        Assertions.assertNotNull(response.getData());
        // verify property "ownerItemId"
        Assertions.assertEquals("lavi-item", response.getOwnerItemId());
        // verify property "catalogId"
        Assertions.assertEquals("CATALOG123", response.getCatalogId());
        // verify property "collectionId"
        Assertions.assertEquals("COLLECTION123", response.getCollectionId());
        // verify property "assets"
        List<Asset> responseAssets = response.getAssets();
        Asset responseAssetsFirstItem = responseAssets.iterator().next();
        Assertions.assertNotNull(responseAssetsFirstItem);
        Assertions.assertEquals(DataFormat.IMAGE, responseAssetsFirstItem.getType());
        Assertions.assertEquals("string", responseAssetsFirstItem.getName());
        Assertions.assertEquals("string", responseAssetsFirstItem.getHref());
        // verify property "id"
        Assertions.assertEquals("ITEM123", response.getId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
