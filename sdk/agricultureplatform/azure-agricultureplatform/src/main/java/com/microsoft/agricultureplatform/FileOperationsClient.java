// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.implementation.FileOperationsImpl;
import com.microsoft.agricultureplatform.implementation.models.DeleteRequest;
import com.microsoft.agricultureplatform.implementation.models.DownloadRequest;
import com.microsoft.agricultureplatform.models.AcceptHeaderEnum;
import com.microsoft.agricultureplatform.models.FileModel;

/**
 * Initializes a new instance of the synchronous AgriculturePlatformClient type.
 */
@ServiceClient(builder = AgriculturePlatformClientBuilder.class)
public final class FileOperationsClient {
    @Generated
    private final FileOperationsImpl serviceClient;

    /**
     * Initializes an instance of FileOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FileOperationsClient(FileOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes file.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     filePath: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param deleteRequest The deleteRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(BinaryData deleteRequest, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(deleteRequest, requestOptions);
    }

    /**
     * Downloads and returns file Stream as response for the given input filePath.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     filePath: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * byte[]
     * }
     * </pre>
     * 
     * @param accept Accept header. Allowed values: "application/json", "application/octet-stream".
     * @param downloadRequest The downloadRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represent a byte array along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadWithResponse(String accept, BinaryData downloadRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.downloadWithResponse(accept, downloadRequest, requestOptions);
    }

    /**
     * Uploads a file.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     filePath: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return file along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> uploadWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.uploadWithResponse(requestOptions);
    }

    /**
     * Deletes file.
     * 
     * @param filePath FilePath.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String filePath) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        DeleteRequest deleteRequestObj = new DeleteRequest(filePath);
        BinaryData deleteRequest = BinaryData.fromObject(deleteRequestObj);
        deleteWithResponse(deleteRequest, requestOptions).getValue();
    }

    /**
     * Downloads and returns file Stream as response for the given input filePath.
     * 
     * @param accept Accept header.
     * @param filePath FilePath.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represent a byte array.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public byte[] download(AcceptHeaderEnum accept, String filePath) {
        // Generated convenience method for downloadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        DownloadRequest downloadRequestObj = new DownloadRequest(filePath);
        BinaryData downloadRequest = BinaryData.fromObject(downloadRequestObj);
        return downloadWithResponse(accept.toString(), downloadRequest, requestOptions).getValue()
            .toObject(byte[].class);
    }

    /**
     * Uploads a file.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FileModel upload() {
        // Generated convenience method for uploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return uploadWithResponse(requestOptions).getValue().toObject(FileModel.class);
    }
}
