// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.implementation.SatelliteOperationsImpl;
import com.microsoft.agricultureplatform.implementation.models.FetchItemsRequest;
import com.microsoft.agricultureplatform.implementation.models.SearchItemsRequest;
import com.microsoft.agricultureplatform.models.FetchItemsOptions;
import com.microsoft.agricultureplatform.models.SatelliteFetchResponse;
import com.microsoft.agricultureplatform.models.SearchFeaturesResponse;
import com.microsoft.agricultureplatform.models.SearchItemsOptions;

/**
 * Initializes a new instance of the synchronous AgriculturePlatformClient type.
 */
@ServiceClient(builder = AgriculturePlatformClientBuilder.class)
public final class SatelliteOperationsClient {
    @Generated
    private final SatelliteOperationsImpl serviceClient;

    /**
     * Initializes an instance of SatelliteOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SatelliteOperationsClient(SatelliteOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetches Satellite data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 1,
     * Maximum = 100, Default
     * value = 10.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startDateTime: OffsetDateTime (Optional)
     *     credentials (Required): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         clientId: String (Required)
     *         clientSecret (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     endDateTime: OffsetDateTime (Optional)
     *     provider: String (Required)
     *     itemUri: String (Required)
     *     data (Required): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     providerCollectionId: String (Required)
     *     featureId: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             dateTime: OffsetDateTime (Optional)
     *             provider: String (Optional)
     *             providerCollectionId: String (Required)
     *             featureId: String (Optional)
     *             imageFiles (Optional): [
     *                  (Optional){
     *                     filePath: String (Optional)
     *                     name: String (Required)
     *                     imageFormat: String(TIF) (Optional)
     *                     resolution: Double (Optional)
     *                 }
     *             ]
     *             itemUri: String (Optional)
     *             id: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param fetchItemsRequest The fetchItemsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return satellite Fetch Response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> fetchItemsWithResponse(BinaryData fetchItemsRequest, RequestOptions requestOptions) {
        return this.serviceClient.fetchItemsWithResponse(fetchItemsRequest, requestOptions);
    }

    /**
     * Searches for STAC items by collection id, bbox, intersecting geometry, start
     * and end datetime.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 1,
     * Maximum = 100, Default
     * value = 10.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startDateTime: OffsetDateTime (Optional)
     *     credentials (Required): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         clientId: String (Required)
     *         clientSecret (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     provider: String (Required)
     *     endDateTime: OffsetDateTime (Optional)
     *     intersects (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     featureIds (Optional): [
     *         String (Optional)
     *     ]
     *     providerCollectionId: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     features (Required): [
     *          (Required){
     *             stacVersion: String (Required)
     *             stacExtensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             type: String (Required)
     *             geometry: BinaryData (Optional)
     *             bbox (Optional): [
     *                 double (Optional)
     *             ]
     *             properties: BinaryData (Required)
     *             links (Required): [
     *                  (Required){
     *                     href: String (Optional)
     *                     rel: String (Optional)
     *                     type: String (Optional)
     *                     title: String (Optional)
     *                 }
     *             ]
     *             assets (Required): {
     *                 String (Required): {
     *                     href: String (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             providerCollectionId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param searchItemsRequest The searchItemsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of items and next property to get the next set of
     * results along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchItemsWithResponse(BinaryData searchItemsRequest, RequestOptions requestOptions) {
        return this.serviceClient.searchItemsWithResponse(searchItemsRequest, requestOptions);
    }

    /**
     * Fetches Satellite data.
     * 
     * @param options Options for fetchItems API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return satellite Fetch Response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SatelliteFetchResponse fetchItems(FetchItemsOptions options) {
        // Generated convenience method for fetchItemsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Integer maxPageSize = options.getMaxpagesize();
        Integer skip = options.getSkip();
        FetchItemsRequest fetchItemsRequestObj
            = new FetchItemsRequest(options.getCredentials(), options.getProvider(), options.getItemUri(),
                options.getData(), options.getProviderCollectionId()).setStartDateTime(options.getStartDateTime())
                    .setEndDateTime(options.getEndDateTime())
                    .setFeatureId(options.getFeatureId());
        BinaryData fetchItemsRequest = BinaryData.fromObject(fetchItemsRequestObj);
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return fetchItemsWithResponse(fetchItemsRequest, requestOptions).getValue()
            .toObject(SatelliteFetchResponse.class);
    }

    /**
     * Searches for STAC items by collection id, bbox, intersecting geometry, start
     * and end datetime.
     * 
     * @param options Options for searchItems API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged response contains list of items and next property to get the next set of
     * results.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SearchFeaturesResponse searchItems(SearchItemsOptions options) {
        // Generated convenience method for searchItemsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Integer maxPageSize = options.getMaxpagesize();
        Integer skip = options.getSkip();
        SearchItemsRequest searchItemsRequestObj
            = new SearchItemsRequest(options.getCredentials(), options.getProvider(), options.getProviderCollectionId())
                .setStartDateTime(options.getStartDateTime())
                .setEndDateTime(options.getEndDateTime())
                .setIntersects(options.getIntersects())
                .setBbox(options.getBbox())
                .setFeatureIds(options.getFeatureIds());
        BinaryData searchItemsRequest = BinaryData.fromObject(searchItemsRequestObj);
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        return searchItemsWithResponse(searchItemsRequest, requestOptions).getValue()
            .toObject(SearchFeaturesResponse.class);
    }
}
