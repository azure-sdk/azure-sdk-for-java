// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * SamplePartnerResponse.
 */
@Immutable
public final class SamplePartnerResponse implements JsonSerializable<SamplePartnerResponse> {
    /*
     * Id.
     */
    @Generated
    private String id;

    /*
     * Message.
     */
    @Generated
    private String message;

    /*
     * Status.
     */
    @Generated
    private String status;

    /*
     * JobCreatedDateTime.
     */
    @Generated
    private OffsetDateTime jobCreatedDateTime;

    /*
     * JobLastActionDateTime.
     */
    @Generated
    private OffsetDateTime jobLastActionDateTime;

    /*
     * E2eid.
     */
    @Generated
    private String e2Eid;

    /*
     * SamplePartnerRequestBody.
     */
    @Generated
    private SamplePartnerRequestBody partnerRequestBody;

    /**
     * Creates an instance of SamplePartnerResponse class.
     */
    @Generated
    private SamplePartnerResponse() {
    }

    /**
     * Get the id property: Id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the message property: Message.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the status property: Status.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the jobCreatedDateTime property: JobCreatedDateTime.
     * 
     * @return the jobCreatedDateTime value.
     */
    @Generated
    public OffsetDateTime getJobCreatedDateTime() {
        return this.jobCreatedDateTime;
    }

    /**
     * Get the jobLastActionDateTime property: JobLastActionDateTime.
     * 
     * @return the jobLastActionDateTime value.
     */
    @Generated
    public OffsetDateTime getJobLastActionDateTime() {
        return this.jobLastActionDateTime;
    }

    /**
     * Get the e2Eid property: E2eid.
     * 
     * @return the e2Eid value.
     */
    @Generated
    public String getE2Eid() {
        return this.e2Eid;
    }

    /**
     * Get the partnerRequestBody property: SamplePartnerRequestBody.
     * 
     * @return the partnerRequestBody value.
     */
    @Generated
    public SamplePartnerRequestBody getPartnerRequestBody() {
        return this.partnerRequestBody;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("jobCreatedDateTime",
            this.jobCreatedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.jobCreatedDateTime));
        jsonWriter.writeStringField("jobLastActionDateTime",
            this.jobLastActionDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.jobLastActionDateTime));
        jsonWriter.writeStringField("e2eid", this.e2Eid);
        jsonWriter.writeJsonField("partnerRequestBody", this.partnerRequestBody);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SamplePartnerResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SamplePartnerResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SamplePartnerResponse.
     */
    @Generated
    public static SamplePartnerResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SamplePartnerResponse deserializedSamplePartnerResponse = new SamplePartnerResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSamplePartnerResponse.id = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedSamplePartnerResponse.message = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSamplePartnerResponse.status = reader.getString();
                } else if ("jobCreatedDateTime".equals(fieldName)) {
                    deserializedSamplePartnerResponse.jobCreatedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobLastActionDateTime".equals(fieldName)) {
                    deserializedSamplePartnerResponse.jobLastActionDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("e2eid".equals(fieldName)) {
                    deserializedSamplePartnerResponse.e2Eid = reader.getString();
                } else if ("partnerRequestBody".equals(fieldName)) {
                    deserializedSamplePartnerResponse.partnerRequestBody = SamplePartnerRequestBody.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSamplePartnerResponse;
        });
    }
}
