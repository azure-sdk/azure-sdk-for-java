// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Point geometry.
 */
@Immutable
public final class Point extends GeoJsonObject {
    /*
     * Type of GeoJSON object.
     */
    @Generated
    private GeoJsonObjectType type = GeoJsonObjectType.POINT;

    /*
     * Gets or sets the coordinate of this point.
     * It must be an array of 2 or 3 elements for a 2D or 3D system.
     */
    @Generated
    private final List<Double> coordinates;

    /**
     * Creates an instance of Point class.
     * 
     * @param coordinates the coordinates value to set.
     */
    @Generated
    public Point(List<Double> coordinates) {
        this.coordinates = coordinates;
    }

    /**
     * Get the type property: Type of GeoJSON object.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public GeoJsonObjectType getType() {
        return this.type;
    }

    /**
     * Get the coordinates property: Gets or sets the coordinate of this point.
     * It must be an array of 2 or 3 elements for a 2D or 3D system.
     * 
     * @return the coordinates value.
     */
    @Generated
    public List<Double> getCoordinates() {
        return this.coordinates;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Point from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Point if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Point.
     */
    @Generated
    public static Point fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<Double> coordinates = null;
            GeoJsonObjectType type = GeoJsonObjectType.POINT;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coordinates".equals(fieldName)) {
                    coordinates = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("type".equals(fieldName)) {
                    type = GeoJsonObjectType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Point deserializedPoint = new Point(coordinates);
            deserializedPoint.type = type;

            return deserializedPoint;
        });
    }
}
