// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.microsoft.agricultureplatform.models.GeoJsonObject;
import com.microsoft.agricultureplatform.models.OauthClientCredentials;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The SearchItemsRequest model.
 */
@Fluent
public final class SearchItemsRequest implements JsonSerializable<SearchItemsRequest> {
    /*
     * Start datetime of the time interval in which to search for Items.
     */
    @Generated
    private OffsetDateTime startDateTime;

    /*
     * OAuthClientCredentials for clientId clientSecret auth.
     */
    @Generated
    private final OauthClientCredentials credentials;

    /*
     * Provider of satellite data. Available Value: SentinelHub.
     */
    @Generated
    private final String provider;

    /*
     * End datetime of the time interval in which to search for Items.
     */
    @Generated
    private OffsetDateTime endDateTime;

    /*
     * GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
     * expected in [Longitude, Latitude] format.
     */
    @Generated
    private GeoJsonObject intersects;

    /*
     * Only items that have a geometry that intersects the bounding box are selected.
     * The bounding box is provided as four numbers. The coordinate reference system
     * of the values is WGS84 longitude/latitude.
     */
    @Generated
    private List<Double> bbox;

    /*
     * Array of feature ids to return.
     */
    @Generated
    private List<String> featureIds;

    /*
     * Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.
     */
    @Generated
    private final String providerCollectionId;

    /**
     * Creates an instance of SearchItemsRequest class.
     * 
     * @param credentials the credentials value to set.
     * @param provider the provider value to set.
     * @param providerCollectionId the providerCollectionId value to set.
     */
    @Generated
    public SearchItemsRequest(OauthClientCredentials credentials, String provider, String providerCollectionId) {
        this.credentials = credentials;
        this.provider = provider;
        this.providerCollectionId = providerCollectionId;
    }

    /**
     * Get the startDateTime property: Start datetime of the time interval in which to search for Items.
     * 
     * @return the startDateTime value.
     */
    @Generated
    public OffsetDateTime getStartDateTime() {
        return this.startDateTime;
    }

    /**
     * Set the startDateTime property: Start datetime of the time interval in which to search for Items.
     * 
     * @param startDateTime the startDateTime value to set.
     * @return the SearchItemsRequest object itself.
     */
    @Generated
    public SearchItemsRequest setStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }

    /**
     * Get the credentials property: OAuthClientCredentials for clientId clientSecret auth.
     * 
     * @return the credentials value.
     */
    @Generated
    public OauthClientCredentials getCredentials() {
        return this.credentials;
    }

    /**
     * Get the provider property: Provider of satellite data. Available Value: SentinelHub.
     * 
     * @return the provider value.
     */
    @Generated
    public String getProvider() {
        return this.provider;
    }

    /**
     * Get the endDateTime property: End datetime of the time interval in which to search for Items.
     * 
     * @return the endDateTime value.
     */
    @Generated
    public OffsetDateTime getEndDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: End datetime of the time interval in which to search for Items.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the SearchItemsRequest object itself.
     */
    @Generated
    public SearchItemsRequest setEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Get the intersects property: GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
     * expected in [Longitude, Latitude] format.
     * 
     * @return the intersects value.
     */
    @Generated
    public GeoJsonObject getIntersects() {
        return this.intersects;
    }

    /**
     * Set the intersects property: GeoJSON (For more details: https://geojson.org/). Note: Coordinates are
     * expected in [Longitude, Latitude] format.
     * 
     * @param intersects the intersects value to set.
     * @return the SearchItemsRequest object itself.
     */
    @Generated
    public SearchItemsRequest setIntersects(GeoJsonObject intersects) {
        this.intersects = intersects;
        return this;
    }

    /**
     * Get the bbox property: Only items that have a geometry that intersects the bounding box are selected.
     * The bounding box is provided as four numbers. The coordinate reference system
     * of the values is WGS84 longitude/latitude.
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Set the bbox property: Only items that have a geometry that intersects the bounding box are selected.
     * The bounding box is provided as four numbers. The coordinate reference system
     * of the values is WGS84 longitude/latitude.
     * 
     * @param bbox the bbox value to set.
     * @return the SearchItemsRequest object itself.
     */
    @Generated
    public SearchItemsRequest setBbox(List<Double> bbox) {
        this.bbox = bbox;
        return this;
    }

    /**
     * Get the featureIds property: Array of feature ids to return.
     * 
     * @return the featureIds value.
     */
    @Generated
    public List<String> getFeatureIds() {
        return this.featureIds;
    }

    /**
     * Set the featureIds property: Array of feature ids to return.
     * 
     * @param featureIds the featureIds value to set.
     * @return the SearchItemsRequest object itself.
     */
    @Generated
    public SearchItemsRequest setFeatureIds(List<String> featureIds) {
        this.featureIds = featureIds;
        return this;
    }

    /**
     * Get the providerCollectionId property: Collection of satellite data. Available Value: sentinel-2-l2a,
     * sentinel-2-l1c.
     * 
     * @return the providerCollectionId value.
     */
    @Generated
    public String getProviderCollectionId() {
        return this.providerCollectionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("credentials", this.credentials);
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("providerCollectionId", this.providerCollectionId);
        jsonWriter.writeStringField("startDateTime",
            this.startDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDateTime));
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        jsonWriter.writeJsonField("intersects", this.intersects);
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("featureIds", this.featureIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchItemsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchItemsRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchItemsRequest.
     */
    @Generated
    public static SearchItemsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OauthClientCredentials credentials = null;
            String provider = null;
            String providerCollectionId = null;
            OffsetDateTime startDateTime = null;
            OffsetDateTime endDateTime = null;
            GeoJsonObject intersects = null;
            List<Double> bbox = null;
            List<String> featureIds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("credentials".equals(fieldName)) {
                    credentials = OauthClientCredentials.fromJson(reader);
                } else if ("provider".equals(fieldName)) {
                    provider = reader.getString();
                } else if ("providerCollectionId".equals(fieldName)) {
                    providerCollectionId = reader.getString();
                } else if ("startDateTime".equals(fieldName)) {
                    startDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("intersects".equals(fieldName)) {
                    intersects = GeoJsonObject.fromJson(reader);
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("featureIds".equals(fieldName)) {
                    featureIds = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            SearchItemsRequest deserializedSearchItemsRequest
                = new SearchItemsRequest(credentials, provider, providerCollectionId);
            deserializedSearchItemsRequest.startDateTime = startDateTime;
            deserializedSearchItemsRequest.endDateTime = endDateTime;
            deserializedSearchItemsRequest.intersects = intersects;
            deserializedSearchItemsRequest.bbox = bbox;
            deserializedSearchItemsRequest.featureIds = featureIds;

            return deserializedSearchItemsRequest;
        });
    }
}
