// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model for errors encountered for all failed locations.
 */
@Immutable
public final class WeatherDataErrors implements JsonSerializable<WeatherDataErrors> {
    /*
     * List of errors encountered for all failed locations.
     */
    @Generated
    private List<ErrorForLocation> locations;

    /**
     * Creates an instance of WeatherDataErrors class.
     */
    @Generated
    private WeatherDataErrors() {
    }

    /**
     * Get the locations property: List of errors encountered for all failed locations.
     * 
     * @return the locations value.
     */
    @Generated
    public List<ErrorForLocation> getLocations() {
        return this.locations;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherDataErrors from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherDataErrors if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherDataErrors.
     */
    @Generated
    public static WeatherDataErrors fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherDataErrors deserializedWeatherDataErrors = new WeatherDataErrors();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locations".equals(fieldName)) {
                    List<ErrorForLocation> locations = reader.readArray(reader1 -> ErrorForLocation.fromJson(reader1));
                    deserializedWeatherDataErrors.locations = locations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWeatherDataErrors;
        });
    }
}
