// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.microsoft.agricultureplatform.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Item.
 */
@Fluent
public final class Item implements JsonSerializable<Item> {
    /*
     * Links for referencing other objects.
     */
    @Generated
    private List<Link> links;

    /*
     * The ETag value to implement optimistic concurrency.
     */
    @Generated
    private String eTag;

    /*
     * Status of the resource.
     */
    @Generated
    private String status;

    /*
     * Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
     */
    @Generated
    private OffsetDateTime modifiedDateTime;

    /*
     * Source of the resource.
     */
    @Generated
    private String source;

    /*
     * Name to identify resource.
     */
    @Generated
    private String name;

    /*
     * Textual description of the resource.
     */
    @Generated
    private String description;

    /*
     * Created by user/tenant id.
     */
    @Generated
    private String createdBy;

    /*
     * Modified by user/tenant id.
     */
    @Generated
    private String modifiedBy;

    /*
     * A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     */
    @Generated
    private Map<String, BinaryData> properties;

    /*
     * Schema for records under the dataset.
     */
    @Generated
    private Map<String, BinaryData> data;

    /*
     * Owner Item Ids of the resource
     */
    @Generated
    private String ownerItemId;

    /*
     * Id of the Catalog resource.
     */
    @Generated
    private String catalogId;

    /*
     * Id of the Collection resource.
     */
    @Generated
    private String collectionId;

    /*
     * Assets.
     */
    @Generated
    private List<Asset> assets;

    /*
     * Id of the Item.
     */
    @Generated
    private String id;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setItemAccessor(new JsonMergePatchHelper.ItemAccessor() {
            @Override
            public Item prepareModelForJsonMergePatch(Item model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Item model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of Item class.
     */
    @Generated
    public Item() {
    }

    /**
     * Get the links property: Links for referencing other objects.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Set the links property: Links for referencing other objects.
     * 
     * @param links the links value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setLinks(List<Link> links) {
        this.links = links;
        this.updatedProperties.add("links");
        return this;
    }

    /**
     * Get the eTag property: The ETag value to implement optimistic concurrency.
     * 
     * @return the eTag value.
     */
    @Generated
    public String getETag() {
        return this.eTag;
    }

    /**
     * Get the status property: Status of the resource.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Status of the resource.
     * 
     * @param status the status value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setStatus(String status) {
        this.status = status;
        this.updatedProperties.add("status");
        return this;
    }

    /**
     * Get the createdDateTime property: Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the modifiedDateTime property: Date-time when resource was last modified, sample format:
     * yyyy-MM-ddTHH:mm:ssZ.
     * 
     * @return the modifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getModifiedDateTime() {
        return this.modifiedDateTime;
    }

    /**
     * Get the source property: Source of the resource.
     * 
     * @return the source value.
     */
    @Generated
    public String getSource() {
        return this.source;
    }

    /**
     * Set the source property: Source of the resource.
     * 
     * @param source the source value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setSource(String source) {
        this.source = source;
        this.updatedProperties.add("source");
        return this;
    }

    /**
     * Get the name property: Name to identify resource.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name to identify resource.
     * 
     * @param name the name value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setName(String name) {
        this.name = name;
        this.updatedProperties.add("name");
        return this;
    }

    /**
     * Get the description property: Textual description of the resource.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Textual description of the resource.
     * 
     * @param description the description value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the createdBy property: Created by user/tenant id.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the modifiedBy property: Modified by user/tenant id.
     * 
     * @return the modifiedBy value.
     */
    @Generated
    public String getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Get the properties property: A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, BinaryData> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     * 
     * @param properties the properties value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setProperties(Map<String, BinaryData> properties) {
        this.properties = properties;
        this.updatedProperties.add("properties");
        return this;
    }

    /**
     * Get the data property: Schema for records under the dataset.
     * 
     * @return the data value.
     */
    @Generated
    public Map<String, BinaryData> getData() {
        return this.data;
    }

    /**
     * Set the data property: Schema for records under the dataset.
     * <p>Required when create the resource.</p>
     * 
     * @param data the data value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setData(Map<String, BinaryData> data) {
        this.data = data;
        this.updatedProperties.add("data");
        return this;
    }

    /**
     * Get the ownerItemId property: Owner Item Ids of the resource.
     * 
     * @return the ownerItemId value.
     */
    @Generated
    public String getOwnerItemId() {
        return this.ownerItemId;
    }

    /**
     * Set the ownerItemId property: Owner Item Ids of the resource.
     * 
     * @param ownerItemId the ownerItemId value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setOwnerItemId(String ownerItemId) {
        this.ownerItemId = ownerItemId;
        this.updatedProperties.add("ownerItemId");
        return this;
    }

    /**
     * Get the catalogId property: Id of the Catalog resource.
     * 
     * @return the catalogId value.
     */
    @Generated
    public String getCatalogId() {
        return this.catalogId;
    }

    /**
     * Get the collectionId property: Id of the Collection resource.
     * 
     * @return the collectionId value.
     */
    @Generated
    public String getCollectionId() {
        return this.collectionId;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public List<Asset> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Assets.
     * 
     * @param assets the assets value to set.
     * @return the Item object itself.
     */
    @Generated
    public Item setAssets(List<Asset> assets) {
        this.assets = assets;
        this.updatedProperties.add("assets");
        return this;
    }

    /**
     * Get the id property: Id of the Item.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
            jsonWriter.writeStringField("status", this.status);
            jsonWriter.writeStringField("source", this.source);
            jsonWriter.writeStringField("name", this.name);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeMapField("properties", this.properties,
                (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
            jsonWriter.writeMapField("data", this.data,
                (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
            jsonWriter.writeStringField("ownerItemId", this.ownerItemId);
            jsonWriter.writeArrayField("assets", this.assets, (writer, element) -> writer.writeJson(element));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("links")) {
            if (this.links == null) {
                jsonWriter.writeNullField("links");
            } else {
                jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
            }
        }
        if (updatedProperties.contains("status")) {
            if (this.status == null) {
                jsonWriter.writeNullField("status");
            } else {
                jsonWriter.writeStringField("status", this.status);
            }
        }
        if (updatedProperties.contains("source")) {
            if (this.source == null) {
                jsonWriter.writeNullField("source");
            } else {
                jsonWriter.writeStringField("source", this.source);
            }
        }
        if (updatedProperties.contains("name")) {
            if (this.name == null) {
                jsonWriter.writeNullField("name");
            } else {
                jsonWriter.writeStringField("name", this.name);
            }
        }
        if (updatedProperties.contains("description")) {
            if (this.description == null) {
                jsonWriter.writeNullField("description");
            } else {
                jsonWriter.writeStringField("description", this.description);
            }
        }
        if (updatedProperties.contains("properties")) {
            if (this.properties == null) {
                jsonWriter.writeNullField("properties");
            } else {
                jsonWriter.writeMapField("properties", this.properties, (writer, element) -> {
                    if (element != null) {
                        writer.writeUntyped(element == null ? null : element.toObject(Object.class));
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("data")) {
            if (this.data == null) {
                jsonWriter.writeNullField("data");
            } else {
                jsonWriter.writeMapField("data", this.data, (writer, element) -> {
                    if (element != null) {
                        writer.writeUntyped(element == null ? null : element.toObject(Object.class));
                    } else {
                        writer.writeNull();
                    }
                });
            }
        }
        if (updatedProperties.contains("ownerItemId")) {
            if (this.ownerItemId == null) {
                jsonWriter.writeNullField("ownerItemId");
            } else {
                jsonWriter.writeStringField("ownerItemId", this.ownerItemId);
            }
        }
        if (updatedProperties.contains("assets")) {
            if (this.assets == null) {
                jsonWriter.writeNullField("assets");
            } else {
                jsonWriter.writeArrayField("assets", this.assets, (writer, element) -> writer.writeJson(element));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Item from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Item if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Item.
     */
    @Generated
    public static Item fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Item deserializedItem = new Item();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedItem.id = reader.getString();
                } else if ("links".equals(fieldName)) {
                    List<Link> links = reader.readArray(reader1 -> Link.fromJson(reader1));
                    deserializedItem.links = links;
                } else if ("eTag".equals(fieldName)) {
                    deserializedItem.eTag = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedItem.status = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedItem.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("modifiedDateTime".equals(fieldName)) {
                    deserializedItem.modifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("source".equals(fieldName)) {
                    deserializedItem.source = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedItem.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedItem.description = reader.getString();
                } else if ("createdBy".equals(fieldName)) {
                    deserializedItem.createdBy = reader.getString();
                } else if ("modifiedBy".equals(fieldName)) {
                    deserializedItem.modifiedBy = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, BinaryData> properties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedItem.properties = properties;
                } else if ("data".equals(fieldName)) {
                    Map<String, BinaryData> data = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedItem.data = data;
                } else if ("ownerItemId".equals(fieldName)) {
                    deserializedItem.ownerItemId = reader.getString();
                } else if ("catalogId".equals(fieldName)) {
                    deserializedItem.catalogId = reader.getString();
                } else if ("collectionId".equals(fieldName)) {
                    deserializedItem.collectionId = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    List<Asset> assets = reader.readArray(reader1 -> Asset.fromJson(reader1));
                    deserializedItem.assets = assets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedItem;
        });
    }
}
