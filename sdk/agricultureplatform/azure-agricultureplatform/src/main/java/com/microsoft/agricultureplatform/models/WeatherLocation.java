// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of Location data.
 */
@Immutable
public final class WeatherLocation implements JsonSerializable<WeatherLocation> {
    /*
     * Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey.
     */
    @Generated
    private final String type;

    /*
     * Location Value eg. "10,-25" for LocationType Type "LatLong".
     */
    @Generated
    private final String value;

    /**
     * Creates an instance of WeatherLocation class.
     * 
     * @param type the type value to set.
     * @param value the value value to set.
     */
    @Generated
    public WeatherLocation(String type, String value) {
        this.type = type;
        this.value = value;
    }

    /**
     * Get the type property: Location Type eg. LatLong/IataCode/IcaoCode/Placeid/PostalKey.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the value property: Location Value eg. "10,-25" for LocationType Type "LatLong".
     * 
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WeatherLocation.
     */
    @Generated
    public static WeatherLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String type = null;
            String value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new WeatherLocation(type, value);
        });
    }
}
