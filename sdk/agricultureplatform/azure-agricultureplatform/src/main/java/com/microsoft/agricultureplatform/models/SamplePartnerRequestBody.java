// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * SamplePartnerRequestBody.
 */
@Immutable
public final class SamplePartnerRequestBody implements JsonSerializable<SamplePartnerRequestBody> {
    /*
     * SolutionId.
     */
    @Generated
    private String solutionId;

    /*
     * PartyId.
     */
    @Generated
    private String partyId;

    /*
     * GddStartDate.
     */
    @Generated
    private OffsetDateTime gddStartDate;

    /*
     * GddEndDate.
     */
    @Generated
    private OffsetDateTime gddEndDate;

    /*
     * ResourceId.
     */
    @Generated
    private String resourceId;

    /*
     * ResourceType.
     */
    @Generated
    private String resourceType;

    /*
     * Crop.
     */
    @Generated
    private String crop;

    /*
     * TemperatureUnit.
     */
    @Generated
    private String temperatureUnit;

    /*
     * Method.
     */
    @Generated
    private String method;

    /**
     * Creates an instance of SamplePartnerRequestBody class.
     */
    @Generated
    private SamplePartnerRequestBody() {
    }

    /**
     * Get the solutionId property: SolutionId.
     * 
     * @return the solutionId value.
     */
    @Generated
    public String getSolutionId() {
        return this.solutionId;
    }

    /**
     * Get the partyId property: PartyId.
     * 
     * @return the partyId value.
     */
    @Generated
    public String getPartyId() {
        return this.partyId;
    }

    /**
     * Get the gddStartDate property: GddStartDate.
     * 
     * @return the gddStartDate value.
     */
    @Generated
    public OffsetDateTime getGddStartDate() {
        return this.gddStartDate;
    }

    /**
     * Get the gddEndDate property: GddEndDate.
     * 
     * @return the gddEndDate value.
     */
    @Generated
    public OffsetDateTime getGddEndDate() {
        return this.gddEndDate;
    }

    /**
     * Get the resourceId property: ResourceId.
     * 
     * @return the resourceId value.
     */
    @Generated
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the resourceType property: ResourceType.
     * 
     * @return the resourceType value.
     */
    @Generated
    public String getResourceType() {
        return this.resourceType;
    }

    /**
     * Get the crop property: Crop.
     * 
     * @return the crop value.
     */
    @Generated
    public String getCrop() {
        return this.crop;
    }

    /**
     * Get the temperatureUnit property: TemperatureUnit.
     * 
     * @return the temperatureUnit value.
     */
    @Generated
    public String getTemperatureUnit() {
        return this.temperatureUnit;
    }

    /**
     * Get the method property: Method.
     * 
     * @return the method value.
     */
    @Generated
    public String getMethod() {
        return this.method;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeStringField("partyId", this.partyId);
        jsonWriter.writeStringField("gddStartDate",
            this.gddStartDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.gddStartDate));
        jsonWriter.writeStringField("gddEndDate",
            this.gddEndDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.gddEndDate));
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("crop", this.crop);
        jsonWriter.writeStringField("temperatureUnit", this.temperatureUnit);
        jsonWriter.writeStringField("method", this.method);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SamplePartnerRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SamplePartnerRequestBody if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SamplePartnerRequestBody.
     */
    @Generated
    public static SamplePartnerRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SamplePartnerRequestBody deserializedSamplePartnerRequestBody = new SamplePartnerRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.solutionId = reader.getString();
                } else if ("partyId".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.partyId = reader.getString();
                } else if ("gddStartDate".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.gddStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("gddEndDate".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.gddEndDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resourceId".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.resourceId = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.resourceType = reader.getString();
                } else if ("crop".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.crop = reader.getString();
                } else if ("temperatureUnit".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.temperatureUnit = reader.getString();
                } else if ("method".equals(fieldName)) {
                    deserializedSamplePartnerRequestBody.method = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSamplePartnerRequestBody;
        });
    }
}
