// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.microsoft.agricultureplatform.implementation.CatalogsOperationsImpl;
import com.microsoft.agricultureplatform.implementation.JsonMergePatchHelper;
import com.microsoft.agricultureplatform.models.Catalog;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous AgriculturePlatformClient type.
 */
@ServiceClient(builder = AgriculturePlatformClientBuilder.class, isAsync = true)
public final class CatalogsOperationsAsyncClient {
    @Generated
    private final CatalogsOperationsImpl serviceClient;

    /**
     * Initializes an instance of CatalogsOperationsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CatalogsOperationsAsyncClient(CatalogsOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Returns a paginated list of Catalog resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>names</td><td>List&lt;String&gt;</td><td>No</td><td>Names of the resource. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>propertyFilters</td><td>List&lt;String&gt;</td><td>No</td><td>Filters on key-value pairs within the
     * Properties object.
     * eg. "{testKey} eq {testValue}". Call {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>statuses</td><td>List&lt;String&gt;</td><td>No</td><td>Statuses of the resource. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>ids</td><td>List&lt;String&gt;</td><td>No</td><td>Ids of the resource. Call
     * {@link RequestOptions#addQueryParam} to add string to array.</td></tr>
     * <tr><td>minCreatedDateTime</td><td>OffsetDateTime</td><td>No</td><td>Minimum creation date of resource
     * (inclusive).</td></tr>
     * <tr><td>maxCreatedDateTime</td><td>OffsetDateTime</td><td>No</td><td>Maximum creation date of resource
     * (inclusive).</td></tr>
     * <tr><td>minLastModifiedDateTime</td><td>OffsetDateTime</td><td>No</td><td>Minimum last modified date of resource
     * (inclusive).</td></tr>
     * <tr><td>maxLastModifiedDateTime</td><td>OffsetDateTime</td><td>No</td><td>Maximum last modified date of resource
     * (inclusive).</td></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive).
     * Minimum = 10, Maximum = 1000, Default value = 50.</td></tr>
     * <tr><td>skipToken</td><td>String</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Catalog items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.listAsync(requestOptions);
    }

    /**
     * Gets a specified Catalog resource.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specified Catalog resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String catalogId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(catalogId, requestOptions);
    }

    /**
     * Creates or updates a Catalog resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return catalog along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String catalogId, BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponseAsync(catalogId, body, requestOptions);
    }

    /**
     * Deletes Catalog for given Catalog id.
     * 
     * @param catalogId Id of the Catalog.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String catalogId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(catalogId, requestOptions);
    }

    /**
     * Returns a paginated list of Catalog resources.
     * 
     * @param names Names of the resource.
     * @param propertyFilters Filters on key-value pairs within the Properties object.
     * eg. "{testKey} eq {testValue}".
     * @param statuses Statuses of the resource.
     * @param ids Ids of the resource.
     * @param minCreatedDateTime Minimum creation date of resource (inclusive).
     * @param maxCreatedDateTime Maximum creation date of resource (inclusive).
     * @param minLastModifiedDateTime Minimum last modified date of resource (inclusive).
     * @param maxLastModifiedDateTime Maximum last modified date of resource (inclusive).
     * @param skipToken Skip token for getting next set of results.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Catalog items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Catalog> list(List<String> names, List<String> propertyFilters, List<String> statuses,
        List<String> ids, OffsetDateTime minCreatedDateTime, OffsetDateTime maxCreatedDateTime,
        OffsetDateTime minLastModifiedDateTime, OffsetDateTime maxLastModifiedDateTime, String skipToken) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (names != null) {
            for (String paramItemValue : names) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("names", paramItemValue, false);
                }
            }
        }
        if (propertyFilters != null) {
            for (String paramItemValue : propertyFilters) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("propertyFilters", paramItemValue, false);
                }
            }
        }
        if (statuses != null) {
            for (String paramItemValue : statuses) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("statuses", paramItemValue, false);
                }
            }
        }
        if (ids != null) {
            for (String paramItemValue : ids) {
                if (paramItemValue != null) {
                    requestOptions.addQueryParam("ids", paramItemValue, false);
                }
            }
        }
        if (minCreatedDateTime != null) {
            requestOptions.addQueryParam("minCreatedDateTime", String.valueOf(minCreatedDateTime), false);
        }
        if (maxCreatedDateTime != null) {
            requestOptions.addQueryParam("maxCreatedDateTime", String.valueOf(maxCreatedDateTime), false);
        }
        if (minLastModifiedDateTime != null) {
            requestOptions.addQueryParam("minLastModifiedDateTime", String.valueOf(minLastModifiedDateTime), false);
        }
        if (maxLastModifiedDateTime != null) {
            requestOptions.addQueryParam("maxLastModifiedDateTime", String.valueOf(maxLastModifiedDateTime), false);
        }
        if (skipToken != null) {
            requestOptions.addQueryParam("skipToken", skipToken, false);
        }
        PagedFlux<BinaryData> pagedFluxResponse = list(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Catalog>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Returns a paginated list of Catalog resources.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Catalog items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Catalog> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = list(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Catalog>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }

    /**
     * Gets a specified Catalog resource.
     * 
     * @param catalogId Id of the Catalog.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specified Catalog resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Catalog> get(String catalogId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(catalogId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class));
    }

    /**
     * Creates or updates a Catalog resource.
     * 
     * @param catalogId Id of the Catalog.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return catalog on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Catalog> createOrUpdate(String catalogId, Catalog body) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getCatalogAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getCatalogAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateWithResponse(catalogId, bodyInBinaryData, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Catalog.class));
    }

    /**
     * Deletes Catalog for given Catalog id.
     * 
     * @param catalogId Id of the Catalog.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete(String catalogId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(catalogId, requestOptions).flatMap(FluxUtil::toMono);
    }
}
