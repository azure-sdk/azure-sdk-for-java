// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.microsoft.agricultureplatform.AgricultureplatformServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SatelliteOperations.
 */
public final class SatelliteOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SatelliteOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriculturePlatformClientImpl client;

    /**
     * Initializes an instance of SatelliteOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SatelliteOperationsImpl(AgriculturePlatformClientImpl client) {
        this.service = RestProxy.create(SatelliteOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AgricultureplatformServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AgriculturePlatformClientSatelliteOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AgriculturePlatformC")
    public interface SatelliteOperationsService {
        @Post("/external/satellite:fetch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> fetchItems(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData fetchItemsRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/satellite:fetch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> fetchItemsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData fetchItemsRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/satellite:stac")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> searchItems(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData searchItemsRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/satellite:stac")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> searchItemsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData searchItemsRequest,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Fetches Satellite data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 1,
     * Maximum = 100, Default
     * value = 10.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startDateTime: OffsetDateTime (Optional)
     *     credentials (Required): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         clientId: String (Required)
     *         clientSecret (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     endDateTime: OffsetDateTime (Optional)
     *     provider: String (Required)
     *     itemUri: String (Required)
     *     data (Required): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     providerCollectionId: String (Required)
     *     featureId: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             dateTime: OffsetDateTime (Optional)
     *             provider: String (Optional)
     *             providerCollectionId: String (Required)
     *             featureId: String (Optional)
     *             imageFiles (Optional): [
     *                  (Optional){
     *                     filePath: String (Optional)
     *                     name: String (Required)
     *                     imageFormat: String(TIF) (Optional)
     *                     resolution: Double (Optional)
     *                 }
     *             ]
     *             itemUri: String (Optional)
     *             id: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param fetchItemsRequest The fetchItemsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return satellite Fetch Response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> fetchItemsWithResponseAsync(BinaryData fetchItemsRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.fetchItems(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, fetchItemsRequest, requestOptions, context));
    }

    /**
     * Fetches Satellite data.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 1,
     * Maximum = 100, Default
     * value = 10.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startDateTime: OffsetDateTime (Optional)
     *     credentials (Required): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         clientId: String (Required)
     *         clientSecret (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     endDateTime: OffsetDateTime (Optional)
     *     provider: String (Required)
     *     itemUri: String (Required)
     *     data (Required): {
     *         imageNames (Optional): [
     *             String (Optional)
     *         ]
     *         imageFormats (Optional): [
     *             String (Optional)
     *         ]
     *         imageResolutions (Optional): [
     *             double (Optional)
     *         ]
     *     }
     *     providerCollectionId: String (Required)
     *     featureId: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Optional): [
     *          (Optional){
     *             dateTime: OffsetDateTime (Optional)
     *             provider: String (Optional)
     *             providerCollectionId: String (Required)
     *             featureId: String (Optional)
     *             imageFiles (Optional): [
     *                  (Optional){
     *                     filePath: String (Optional)
     *                     name: String (Required)
     *                     imageFormat: String(TIF) (Optional)
     *                     resolution: Double (Optional)
     *                 }
     *             ]
     *             itemUri: String (Optional)
     *             id: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param fetchItemsRequest The fetchItemsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return satellite Fetch Response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> fetchItemsWithResponse(BinaryData fetchItemsRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.fetchItemsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, fetchItemsRequest, requestOptions, Context.NONE);
    }

    /**
     * Searches for STAC items by collection id, bbox, intersecting geometry, start
     * and end datetime.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 1,
     * Maximum = 100, Default
     * value = 10.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startDateTime: OffsetDateTime (Optional)
     *     credentials (Required): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         clientId: String (Required)
     *         clientSecret (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     provider: String (Required)
     *     endDateTime: OffsetDateTime (Optional)
     *     intersects (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     featureIds (Optional): [
     *         String (Optional)
     *     ]
     *     providerCollectionId: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     features (Required): [
     *          (Required){
     *             stacVersion: String (Required)
     *             stacExtensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             type: String (Required)
     *             geometry: BinaryData (Optional)
     *             bbox (Optional): [
     *                 double (Optional)
     *             ]
     *             properties: BinaryData (Required)
     *             links (Required): [
     *                  (Required){
     *                     href: String (Optional)
     *                     rel: String (Optional)
     *                     type: String (Optional)
     *                     title: String (Optional)
     *                 }
     *             ]
     *             assets (Required): {
     *                 String (Required): {
     *                     href: String (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             providerCollectionId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param searchItemsRequest The searchItemsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of items and next property to get the next set of
     * results along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchItemsWithResponseAsync(BinaryData searchItemsRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.searchItems(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, searchItemsRequest, requestOptions, context));
    }

    /**
     * Searches for STAC items by collection id, bbox, intersecting geometry, start
     * and end datetime.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 1,
     * Maximum = 100, Default
     * value = 10.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>Skip token for getting next set of results.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     startDateTime: OffsetDateTime (Optional)
     *     credentials (Required): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         clientId: String (Required)
     *         clientSecret (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     provider: String (Required)
     *     endDateTime: OffsetDateTime (Optional)
     *     intersects (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     bbox (Optional): [
     *         double (Optional)
     *     ]
     *     featureIds (Optional): [
     *         String (Optional)
     *     ]
     *     providerCollectionId: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     features (Required): [
     *          (Required){
     *             stacVersion: String (Required)
     *             stacExtensions (Optional): [
     *                 String (Optional)
     *             ]
     *             id: String (Required)
     *             type: String (Required)
     *             geometry: BinaryData (Optional)
     *             bbox (Optional): [
     *                 double (Optional)
     *             ]
     *             properties: BinaryData (Required)
     *             links (Required): [
     *                  (Required){
     *                     href: String (Optional)
     *                     rel: String (Optional)
     *                     type: String (Optional)
     *                     title: String (Optional)
     *                 }
     *             ]
     *             assets (Required): {
     *                 String (Required): {
     *                     href: String (Optional)
     *                     title: String (Optional)
     *                     description: String (Optional)
     *                     type: String (Optional)
     *                     roles (Optional): [
     *                         String (Optional)
     *                     ]
     *                 }
     *             }
     *             providerCollectionId: String (Optional)
     *         }
     *     ]
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param searchItemsRequest The searchItemsRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged response contains list of items and next property to get the next set of
     * results along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchItemsWithResponse(BinaryData searchItemsRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.searchItemsSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, searchItemsRequest, requestOptions, Context.NONE);
    }
}
