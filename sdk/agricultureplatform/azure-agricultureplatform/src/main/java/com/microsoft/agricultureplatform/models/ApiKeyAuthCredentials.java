// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Api Key Auth Credentials class for API Key based Auth.
 */
@Immutable
public final class ApiKeyAuthCredentials extends AuthCredentials {
    /*
     * Enum for different types of AuthCredentials supported.
     */
    @Generated
    private AuthCredentialsKind kind = AuthCredentialsKind.API_KEY_AUTH_CREDENTIALS;

    /*
     * Properties of the key vault.
     */
    @Generated
    private final KeyVaultProperties apiKey;

    /**
     * Creates an instance of ApiKeyAuthCredentials class.
     * 
     * @param apiKey the apiKey value to set.
     */
    @Generated
    public ApiKeyAuthCredentials(KeyVaultProperties apiKey) {
        this.apiKey = apiKey;
    }

    /**
     * Get the kind property: Enum for different types of AuthCredentials supported.
     * 
     * @return the kind value.
     */
    @Generated
    @Override
    public AuthCredentialsKind getKind() {
        return this.kind;
    }

    /**
     * Get the apiKey property: Properties of the key vault.
     * 
     * @return the apiKey value.
     */
    @Generated
    public KeyVaultProperties getApiKey() {
        return this.apiKey;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("apiKey", this.apiKey);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeyAuthCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeyAuthCredentials if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiKeyAuthCredentials.
     */
    @Generated
    public static ApiKeyAuthCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeyVaultProperties apiKey = null;
            AuthCredentialsKind kind = AuthCredentialsKind.API_KEY_AUTH_CREDENTIALS;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("apiKey".equals(fieldName)) {
                    apiKey = KeyVaultProperties.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = AuthCredentialsKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ApiKeyAuthCredentials deserializedApiKeyAuthCredentials = new ApiKeyAuthCredentials(apiKey);
            deserializedApiKeyAuthCredentials.kind = kind;

            return deserializedApiKeyAuthCredentials;
        });
    }
}
