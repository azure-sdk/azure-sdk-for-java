// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The GetDataRequest model.
 */
@Immutable
public final class GetDataRequest implements JsonSerializable<GetDataRequest> {
    /*
     * SolutionId.
     */
    @Generated
    private final String solutionId;

    /*
     * RequestPath.
     */
    @Generated
    private final String requestPath;

    /*
     * Properties.
     */
    @Generated
    private final Map<String, BinaryData> partnerRequestBody;

    /*
     * Properties.
     */
    @Generated
    private final Map<String, BinaryData> partnerRequestHeaders;

    /*
     * Input Data.
     */
    @Generated
    private final Map<String, BinaryData> inputData;

    /**
     * Creates an instance of GetDataRequest class.
     * 
     * @param solutionId the solutionId value to set.
     * @param requestPath the requestPath value to set.
     * @param partnerRequestBody the partnerRequestBody value to set.
     * @param partnerRequestHeaders the partnerRequestHeaders value to set.
     * @param inputData the inputData value to set.
     */
    @Generated
    public GetDataRequest(String solutionId, String requestPath, Map<String, BinaryData> partnerRequestBody,
        Map<String, BinaryData> partnerRequestHeaders, Map<String, BinaryData> inputData) {
        this.solutionId = solutionId;
        this.requestPath = requestPath;
        this.partnerRequestBody = partnerRequestBody;
        this.partnerRequestHeaders = partnerRequestHeaders;
        this.inputData = inputData;
    }

    /**
     * Get the solutionId property: SolutionId.
     * 
     * @return the solutionId value.
     */
    @Generated
    public String getSolutionId() {
        return this.solutionId;
    }

    /**
     * Get the requestPath property: RequestPath.
     * 
     * @return the requestPath value.
     */
    @Generated
    public String getRequestPath() {
        return this.requestPath;
    }

    /**
     * Get the partnerRequestBody property: Properties.
     * 
     * @return the partnerRequestBody value.
     */
    @Generated
    public Map<String, BinaryData> getPartnerRequestBody() {
        return this.partnerRequestBody;
    }

    /**
     * Get the partnerRequestHeaders property: Properties.
     * 
     * @return the partnerRequestHeaders value.
     */
    @Generated
    public Map<String, BinaryData> getPartnerRequestHeaders() {
        return this.partnerRequestHeaders;
    }

    /**
     * Get the inputData property: Input Data.
     * 
     * @return the inputData value.
     */
    @Generated
    public Map<String, BinaryData> getInputData() {
        return this.inputData;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeStringField("requestPath", this.requestPath);
        jsonWriter.writeMapField("partnerRequestBody", this.partnerRequestBody,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeMapField("partnerRequestHeaders", this.partnerRequestHeaders,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeMapField("inputData", this.inputData,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetDataRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetDataRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetDataRequest.
     */
    @Generated
    public static GetDataRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String solutionId = null;
            String requestPath = null;
            Map<String, BinaryData> partnerRequestBody = null;
            Map<String, BinaryData> partnerRequestHeaders = null;
            Map<String, BinaryData> inputData = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    solutionId = reader.getString();
                } else if ("requestPath".equals(fieldName)) {
                    requestPath = reader.getString();
                } else if ("partnerRequestBody".equals(fieldName)) {
                    partnerRequestBody = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("partnerRequestHeaders".equals(fieldName)) {
                    partnerRequestHeaders = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("inputData".equals(fieldName)) {
                    inputData = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            return new GetDataRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, inputData);
        });
    }
}
