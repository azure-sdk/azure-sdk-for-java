// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.microsoft.agricultureplatform.AgricultureplatformServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in WeatherOperations.
 */
public final class WeatherOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final WeatherOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriculturePlatformClientImpl client;

    /**
     * Initializes an instance of WeatherOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    WeatherOperationsImpl(AgriculturePlatformClientImpl client) {
        this.service
            = RestProxy.create(WeatherOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AgricultureplatformServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AgriculturePlatformClientWeatherOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AgriculturePlatformC")
    public interface WeatherOperationsService {
        @Post("/external/weather:fetch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData getRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/weather:fetch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData getRequest,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Returns a list of WeatherData.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     providerName: String (Required)
     *     providerApiName: String (Required)
     *     language: String (Optional)
     *     units: String (Required)
     *     credentials (Optional): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         apiKey (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     locations (Optional): [
     *          (Optional){
     *             type: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     weatherMetadata (Required): {
     *         providerName: String (Required)
     *         providerApiName: String (Required)
     *         language: String (Optional)
     *         units: String (Required)
     *         weatherDataType: String (Required)
     *     }
     *     status: String (Optional)
     *     locations (Optional): [
     *          (Optional){
     *             location (Optional): {
     *                 type: String (Required)
     *                 value: String (Required)
     *             }
     *             requestCompletionTime: String (Optional)
     *             lastRefreshedDateTime: OffsetDateTime (Optional)
     *             data (Optional): {
     *                 additionalAttributes (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *                 wetBulbTemperature (Optional): {
     *                     unit: String (Optional)
     *                     value (Optional): [
     *                         double (Optional)
     *                     ]
     *                 }
     *                 cloudCover (Optional): (recursive schema, see cloudCover above)
     *                 dayOfWeek (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dayOrNight (Optional): [
     *                     String (Optional)
     *                 ]
     *                 expirationTime (Optional): [
     *                     String (Optional)
     *                 ]
     *                 iconCode (Optional): [
     *                     int (Optional)
     *                 ]
     *                 iconCodeExtend (Optional): [
     *                     int (Optional)
     *                 ]
     *                 hasPrecipitation (Optional): [
     *                     boolean (Optional)
     *                 ]
     *                 pressureMeanSeaLevel (Optional): (recursive schema, see pressureMeanSeaLevel above)
     *                 relativeHumidity (Optional): (recursive schema, see relativeHumidity above)
     *                 temperature (Optional): (recursive schema, see temperature above)
     *                 temperatureDewPoint (Optional): (recursive schema, see temperatureDewPoint above)
     *                 temperatureFeelsLike (Optional): (recursive schema, see temperatureFeelsLike above)
     *                 temperatureHeatIndex (Optional): (recursive schema, see temperatureHeatIndex above)
     *                 temperatureWindChill (Optional): (recursive schema, see temperatureWindChill above)
     *                 uvDescription (Optional): [
     *                     String (Optional)
     *                 ]
     *                 uvIndex (Optional): [
     *                     double (Optional)
     *                 ]
     *                 validTimeLocal (Optional): [
     *                     String (Optional)
     *                 ]
     *                 validTime (Optional): [
     *                     String (Optional)
     *                 ]
     *                 visibility (Optional): (recursive schema, see visibility above)
     *                 windDirection (Optional): (recursive schema, see windDirection above)
     *                 windGust (Optional): (recursive schema, see windGust above)
     *                 windSpeed (Optional): (recursive schema, see windSpeed above)
     *                 wxPhraseLong (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wxPhraseShort (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         }
     *     ]
     *     errors (Optional): {
     *         locations (Optional): [
     *              (Optional){
     *                 location (Optional): (recursive schema, see location above)
     *                 code: Integer (Optional)
     *                 description: String (Optional)
     *                 retryable: Boolean (Optional)
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getRequest The getRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return schema of Weather Data Provider Response along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(BinaryData getRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, getRequest, requestOptions, context));
    }

    /**
     * Returns a list of WeatherData.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     providerName: String (Required)
     *     providerApiName: String (Required)
     *     language: String (Optional)
     *     units: String (Required)
     *     credentials (Optional): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         apiKey (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     locations (Optional): [
     *          (Optional){
     *             type: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     weatherMetadata (Required): {
     *         providerName: String (Required)
     *         providerApiName: String (Required)
     *         language: String (Optional)
     *         units: String (Required)
     *         weatherDataType: String (Required)
     *     }
     *     status: String (Optional)
     *     locations (Optional): [
     *          (Optional){
     *             location (Optional): {
     *                 type: String (Required)
     *                 value: String (Required)
     *             }
     *             requestCompletionTime: String (Optional)
     *             lastRefreshedDateTime: OffsetDateTime (Optional)
     *             data (Optional): {
     *                 additionalAttributes (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *                 wetBulbTemperature (Optional): {
     *                     unit: String (Optional)
     *                     value (Optional): [
     *                         double (Optional)
     *                     ]
     *                 }
     *                 cloudCover (Optional): (recursive schema, see cloudCover above)
     *                 dayOfWeek (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dayOrNight (Optional): [
     *                     String (Optional)
     *                 ]
     *                 expirationTime (Optional): [
     *                     String (Optional)
     *                 ]
     *                 iconCode (Optional): [
     *                     int (Optional)
     *                 ]
     *                 iconCodeExtend (Optional): [
     *                     int (Optional)
     *                 ]
     *                 hasPrecipitation (Optional): [
     *                     boolean (Optional)
     *                 ]
     *                 pressureMeanSeaLevel (Optional): (recursive schema, see pressureMeanSeaLevel above)
     *                 relativeHumidity (Optional): (recursive schema, see relativeHumidity above)
     *                 temperature (Optional): (recursive schema, see temperature above)
     *                 temperatureDewPoint (Optional): (recursive schema, see temperatureDewPoint above)
     *                 temperatureFeelsLike (Optional): (recursive schema, see temperatureFeelsLike above)
     *                 temperatureHeatIndex (Optional): (recursive schema, see temperatureHeatIndex above)
     *                 temperatureWindChill (Optional): (recursive schema, see temperatureWindChill above)
     *                 uvDescription (Optional): [
     *                     String (Optional)
     *                 ]
     *                 uvIndex (Optional): [
     *                     double (Optional)
     *                 ]
     *                 validTimeLocal (Optional): [
     *                     String (Optional)
     *                 ]
     *                 validTime (Optional): [
     *                     String (Optional)
     *                 ]
     *                 visibility (Optional): (recursive schema, see visibility above)
     *                 windDirection (Optional): (recursive schema, see windDirection above)
     *                 windGust (Optional): (recursive schema, see windGust above)
     *                 windSpeed (Optional): (recursive schema, see windSpeed above)
     *                 wxPhraseLong (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wxPhraseShort (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         }
     *     ]
     *     errors (Optional): {
     *         locations (Optional): [
     *              (Optional){
     *                 location (Optional): (recursive schema, see location above)
     *                 code: Integer (Optional)
     *                 description: String (Optional)
     *                 retryable: Boolean (Optional)
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getRequest The getRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return schema of Weather Data Provider Response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(BinaryData getRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, getRequest, requestOptions, Context.NONE);
    }
}
