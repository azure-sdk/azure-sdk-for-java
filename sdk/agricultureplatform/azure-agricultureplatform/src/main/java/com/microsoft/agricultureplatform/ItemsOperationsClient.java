// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.implementation.ItemsOperationsImpl;
import com.microsoft.agricultureplatform.implementation.JsonMergePatchHelper;
import com.microsoft.agricultureplatform.implementation.models.CreateRequest;
import com.microsoft.agricultureplatform.implementation.models.GetAllUnderCollectionRequest;
import com.microsoft.agricultureplatform.implementation.models.SearchAcrossCollectionRequest;
import com.microsoft.agricultureplatform.models.CreateOptions;
import com.microsoft.agricultureplatform.models.GetAllUnderCollectionOptions;
import com.microsoft.agricultureplatform.models.Item;
import com.microsoft.agricultureplatform.models.ItemListResponse;
import com.microsoft.agricultureplatform.models.ItemResponse;
import com.microsoft.agricultureplatform.models.SearchAcrossCollectionOptions;

/**
 * Initializes a new instance of the synchronous AgriculturePlatformClient type.
 */
@ServiceClient(builder = AgriculturePlatformClientBuilder.class)
public final class ItemsOperationsClient {
    @Generated
    private final ItemsOperationsImpl serviceClient;

    /**
     * Initializes an instance of ItemsOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    ItemsOperationsClient(ItemsOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates or updates a Item resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     status: String (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return itemResponse model for Items api along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String catalogId, String collectionId, BinaryData createRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createWithResponse(catalogId, collectionId, createRequest, requestOptions);
    }

    /**
     * Gets a specified Item resource.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specified Item resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String catalogId, String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(catalogId, collectionId, itemId, requestOptions);
    }

    /**
     * Creates or updates a Item resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return item along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String catalogId, String collectionId, String itemId,
        BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateWithResponse(catalogId, collectionId, itemId, body, requestOptions);
    }

    /**
     * Deletes Item for given Item id.
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String catalogId, String collectionId, String itemId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(catalogId, collectionId, itemId, requestOptions);
    }

    /**
     * Search for Items across all parties by intersecting geometry.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 10,
     * Maximum = 1000,
     * Default Value = 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ownerItemIds (Optional): [
     *         String (Optional)
     *     ]
     *     dataFilters (Optional): [
     *         String (Optional)
     *     ]
     *     intersectsWithGeometry (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     minCreatedDateTime: OffsetDateTime (Optional)
     *     maxCreatedDateTime: OffsetDateTime (Optional)
     *     minLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxPageSize: Integer (Optional)
     *     skipToken: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             links (Optional): [
     *                  (Optional){
     *                     rel: String(DerivedFrom/Child/Parent) (Optional)
     *                     href: String (Optional)
     *                     type: String(Catalog/Collection/Item/Asset) (Optional)
     *                 }
     *             ]
     *             eTag: String (Optional)
     *             status: String (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *             modifiedDateTime: OffsetDateTime (Optional)
     *             source: String (Optional)
     *             name: String (Optional)
     *             description: String (Optional)
     *             createdBy: String (Optional)
     *             modifiedBy: String (Optional)
     *             properties (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             data (Optional, Required on create): {
     *                 String: BinaryData (Required)
     *             }
     *             ownerItemId: String (Optional)
     *             catalogId: String (Optional)
     *             collectionId: String (Optional)
     *             assets (Optional): [
     *                  (Optional){
     *                     type: String(Image/Shapefile/Binary) (Optional)
     *                     name: String (Optional)
     *                     href: String (Optional)
     *                 }
     *             ]
     *             id: String (Required)
     *         }
     *     ]
     *     skipToken: String (Optional)
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param getAllUnderCollectionRequest The getAllUnderCollectionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a response containing a list of items along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllUnderCollectionWithResponse(String catalogId, String collectionId,
        BinaryData getAllUnderCollectionRequest, RequestOptions requestOptions) {
        return this.serviceClient.getAllUnderCollectionWithResponse(catalogId, collectionId,
            getAllUnderCollectionRequest, requestOptions);
    }

    /**
     * Search for Items across all collections.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 10,
     * Maximum = 1000,
     * Default Value = 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ownerItemIds (Optional): [
     *         String (Optional)
     *     ]
     *     dataFilters (Optional): [
     *         String (Optional)
     *     ]
     *     intersectsWithGeometry (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     minCreatedDateTime: OffsetDateTime (Optional)
     *     maxCreatedDateTime: OffsetDateTime (Optional)
     *     minLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxPageSize: Integer (Optional)
     *     skipToken: String (Optional)
     *     collectionIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             links (Optional): [
     *                  (Optional){
     *                     rel: String(DerivedFrom/Child/Parent) (Optional)
     *                     href: String (Optional)
     *                     type: String(Catalog/Collection/Item/Asset) (Optional)
     *                 }
     *             ]
     *             eTag: String (Optional)
     *             status: String (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *             modifiedDateTime: OffsetDateTime (Optional)
     *             source: String (Optional)
     *             name: String (Optional)
     *             description: String (Optional)
     *             createdBy: String (Optional)
     *             modifiedBy: String (Optional)
     *             properties (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             data (Optional, Required on create): {
     *                 String: BinaryData (Required)
     *             }
     *             ownerItemId: String (Optional)
     *             catalogId: String (Optional)
     *             collectionId: String (Optional)
     *             assets (Optional): [
     *                  (Optional){
     *                     type: String(Image/Shapefile/Binary) (Optional)
     *                     name: String (Optional)
     *                     href: String (Optional)
     *                 }
     *             ]
     *             id: String (Required)
     *         }
     *     ]
     *     skipToken: String (Optional)
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param searchAcrossCollectionRequest The searchAcrossCollectionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a response containing a list of items along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchAcrossCollectionWithResponse(String catalogId,
        BinaryData searchAcrossCollectionRequest, RequestOptions requestOptions) {
        return this.serviceClient.searchAcrossCollectionWithResponse(catalogId, searchAcrossCollectionRequest,
            requestOptions);
    }

    /**
     * Creates or updates a Item resource.
     * 
     * @param options Options for create API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return itemResponse model for Items api.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemResponse create(CreateOptions options) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String catalogId = options.getCatalogId();
        String collectionId = options.getCollectionId();
        CreateRequest createRequestObj = new CreateRequest(options.getData()).setLinks(options.getLinks())
            .setStatus(options.getStatus())
            .setSource(options.getSource())
            .setName(options.getName())
            .setDescription(options.getDescription())
            .setProperties(options.getProperties())
            .setOwnerItemId(options.getOwnerItemId())
            .setAssets(options.getAssets());
        BinaryData createRequest = BinaryData.fromObject(createRequestObj);
        return createWithResponse(catalogId, collectionId, createRequest, requestOptions).getValue()
            .toObject(ItemResponse.class);
    }

    /**
     * Gets a specified Item resource.
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specified Item resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Item get(String catalogId, String collectionId, String itemId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(catalogId, collectionId, itemId, requestOptions).getValue().toObject(Item.class);
    }

    /**
     * Creates or updates a Item resource.
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param body The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return item.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Item createOrUpdate(String catalogId, String collectionId, String itemId, Item body) {
        // Generated convenience method for createOrUpdateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getItemAccessor().prepareModelForJsonMergePatch(body, true);
        BinaryData bodyInBinaryData = BinaryData.fromObject(body);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        bodyInBinaryData.getLength();
        JsonMergePatchHelper.getItemAccessor().prepareModelForJsonMergePatch(body, false);
        return createOrUpdateWithResponse(catalogId, collectionId, itemId, bodyInBinaryData, requestOptions).getValue()
            .toObject(Item.class);
    }

    /**
     * Deletes Item for given Item id.
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String catalogId, String collectionId, String itemId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(catalogId, collectionId, itemId, requestOptions).getValue();
    }

    /**
     * Search for Items across all parties by intersecting geometry.
     * 
     * @param options Options for getAllUnderCollection API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a response containing a list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemListResponse getAllUnderCollection(GetAllUnderCollectionOptions options) {
        // Generated convenience method for getAllUnderCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String catalogId = options.getCatalogId();
        String collectionId = options.getCollectionId();
        Integer maximumPageSize = options.getMaximumPageSize();
        GetAllUnderCollectionRequest getAllUnderCollectionRequestObj
            = new GetAllUnderCollectionRequest().setOwnerItemIds(options.getOwnerItemIds())
                .setDataFilters(options.getDataFilters())
                .setIntersectsWithGeometry(options.getIntersectsWithGeometry())
                .setIds(options.getIds())
                .setMinCreatedDateTime(options.getMinCreatedDateTime())
                .setMaxCreatedDateTime(options.getMaxCreatedDateTime())
                .setMinLastModifiedDateTime(options.getMinLastModifiedDateTime())
                .setMaxLastModifiedDateTime(options.getMaxLastModifiedDateTime())
                .setMaxPageSize(options.getMaxPageSize())
                .setSkipToken(options.getSkipToken());
        BinaryData getAllUnderCollectionRequest = BinaryData.fromObject(getAllUnderCollectionRequestObj);
        if (maximumPageSize != null) {
            requestOptions.addQueryParam("maxPageSize", String.valueOf(maximumPageSize), false);
        }
        return getAllUnderCollectionWithResponse(catalogId, collectionId, getAllUnderCollectionRequest, requestOptions)
            .getValue()
            .toObject(ItemListResponse.class);
    }

    /**
     * Search for Items across all collections.
     * 
     * @param options Options for searchAcrossCollection API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a response containing a list of items.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ItemListResponse searchAcrossCollection(SearchAcrossCollectionOptions options) {
        // Generated convenience method for searchAcrossCollectionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String catalogId = options.getCatalogId();
        Integer maximumPageSize = options.getMaximumPageSize();
        SearchAcrossCollectionRequest searchAcrossCollectionRequestObj
            = new SearchAcrossCollectionRequest().setOwnerItemIds(options.getOwnerItemIds())
                .setDataFilters(options.getDataFilters())
                .setIntersectsWithGeometry(options.getIntersectsWithGeometry())
                .setIds(options.getIds())
                .setMinCreatedDateTime(options.getMinCreatedDateTime())
                .setMaxCreatedDateTime(options.getMaxCreatedDateTime())
                .setMinLastModifiedDateTime(options.getMinLastModifiedDateTime())
                .setMaxLastModifiedDateTime(options.getMaxLastModifiedDateTime())
                .setMaxPageSize(options.getMaxPageSize())
                .setSkipToken(options.getSkipToken())
                .setCollectionIds(options.getCollectionIds());
        BinaryData searchAcrossCollectionRequest = BinaryData.fromObject(searchAcrossCollectionRequestObj);
        if (maximumPageSize != null) {
            requestOptions.addQueryParam("maxPageSize", String.valueOf(maximumPageSize), false);
        }
        return searchAcrossCollectionWithResponse(catalogId, searchAcrossCollectionRequest, requestOptions).getValue()
            .toObject(ItemListResponse.class);
    }
}
