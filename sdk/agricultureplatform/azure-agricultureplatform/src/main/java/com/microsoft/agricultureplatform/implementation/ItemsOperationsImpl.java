// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.microsoft.agricultureplatform.AgricultureplatformServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ItemsOperations.
 */
public final class ItemsOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ItemsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriculturePlatformClientImpl client;

    /**
     * Initializes an instance of ItemsOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ItemsOperationsImpl(AgriculturePlatformClientImpl client) {
        this.service
            = RestProxy.create(ItemsOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AgricultureplatformServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AgriculturePlatformClientItemsOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AgriculturePlatformC")
    public interface ItemsOperationsService {
        @Post("/catalogs/{catalogId}/collections/{collectionId}/items:create")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createRequest,
            RequestOptions requestOptions, Context context);

        @Post("/catalogs/{catalogId}/collections/{collectionId}/items:create")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createRequest,
            RequestOptions requestOptions, Context context);

        @Get("/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Patch("/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData body, RequestOptions requestOptions, Context context);

        @Patch("/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/merge-patch+json") BinaryData body, RequestOptions requestOptions, Context context);

        @Delete("/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @PathParam("itemId") String itemId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/catalogs/{catalogId}/collections/{collectionId}/items/{itemId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteSync(@HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("catalogId") String catalogId, @PathParam("collectionId") String collectionId,
            @PathParam("itemId") String itemId, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Post("/catalogs/{catalogId}/collections/{collectionId}/items:search")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAllUnderCollection(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData getAllUnderCollectionRequest, RequestOptions requestOptions,
            Context context);

        @Post("/catalogs/{catalogId}/collections/{collectionId}/items:search")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAllUnderCollectionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @PathParam("collectionId") String collectionId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData getAllUnderCollectionRequest, RequestOptions requestOptions,
            Context context);

        @Post("/catalogs/{catalogId}/items:search")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> searchAcrossCollection(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData searchAcrossCollectionRequest, RequestOptions requestOptions,
            Context context);

        @Post("/catalogs/{catalogId}/items:search")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> searchAcrossCollectionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("catalogId") String catalogId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData searchAcrossCollectionRequest, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Creates or updates a Item resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     status: String (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return itemResponse model for Items api along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(String catalogId, String collectionId,
        BinaryData createRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.create(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                catalogId, collectionId, contentType, accept, createRequest, requestOptions, context));
    }

    /**
     * Creates or updates a Item resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     status: String (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Required): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return itemResponse model for Items api along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String catalogId, String collectionId, BinaryData createRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), catalogId,
            collectionId, contentType, accept, createRequest, requestOptions, Context.NONE);
    }

    /**
     * Gets a specified Item resource.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specified Item resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String catalogId, String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                catalogId, collectionId, itemId, accept, requestOptions, context));
    }

    /**
     * Gets a specified Item resource.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a specified Item resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String catalogId, String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), catalogId,
            collectionId, itemId, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates or updates a Item resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponseAsync(String catalogId, String collectionId,
        String itemId, BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                catalogId, collectionId, itemId, contentType, accept, body, requestOptions, context));
    }

    /**
     * Creates or updates a Item resource.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): [
     *          (Optional){
     *             rel: String(DerivedFrom/Child/Parent) (Optional)
     *             href: String (Optional)
     *             type: String(Catalog/Collection/Item/Asset) (Optional)
     *         }
     *     ]
     *     eTag: String (Optional)
     *     status: String (Optional)
     *     createdDateTime: OffsetDateTime (Optional)
     *     modifiedDateTime: OffsetDateTime (Optional)
     *     source: String (Optional)
     *     name: String (Optional)
     *     description: String (Optional)
     *     createdBy: String (Optional)
     *     modifiedBy: String (Optional)
     *     properties (Optional): {
     *         String: BinaryData (Required)
     *     }
     *     data (Optional, Required on create): {
     *         String: BinaryData (Required)
     *     }
     *     ownerItemId: String (Optional)
     *     catalogId: String (Optional)
     *     collectionId: String (Optional)
     *     assets (Optional): [
     *          (Optional){
     *             type: String(Image/Shapefile/Binary) (Optional)
     *             name: String (Optional)
     *             href: String (Optional)
     *         }
     *     ]
     *     id: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param body The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String catalogId, String collectionId, String itemId,
        BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/merge-patch+json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            catalogId, collectionId, itemId, contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Deletes Item for given Item id.
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String catalogId, String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.delete(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                catalogId, collectionId, itemId, accept, requestOptions, context));
    }

    /**
     * Deletes Item for given Item id.
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param itemId Id of the Item.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String catalogId, String collectionId, String itemId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), catalogId,
            collectionId, itemId, accept, requestOptions, Context.NONE);
    }

    /**
     * Search for Items across all parties by intersecting geometry.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 10,
     * Maximum = 1000,
     * Default Value = 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ownerItemIds (Optional): [
     *         String (Optional)
     *     ]
     *     dataFilters (Optional): [
     *         String (Optional)
     *     ]
     *     intersectsWithGeometry (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     minCreatedDateTime: OffsetDateTime (Optional)
     *     maxCreatedDateTime: OffsetDateTime (Optional)
     *     minLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxPageSize: Integer (Optional)
     *     skipToken: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             links (Optional): [
     *                  (Optional){
     *                     rel: String(DerivedFrom/Child/Parent) (Optional)
     *                     href: String (Optional)
     *                     type: String(Catalog/Collection/Item/Asset) (Optional)
     *                 }
     *             ]
     *             eTag: String (Optional)
     *             status: String (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *             modifiedDateTime: OffsetDateTime (Optional)
     *             source: String (Optional)
     *             name: String (Optional)
     *             description: String (Optional)
     *             createdBy: String (Optional)
     *             modifiedBy: String (Optional)
     *             properties (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             data (Optional, Required on create): {
     *                 String: BinaryData (Required)
     *             }
     *             ownerItemId: String (Optional)
     *             catalogId: String (Optional)
     *             collectionId: String (Optional)
     *             assets (Optional): [
     *                  (Optional){
     *                     type: String(Image/Shapefile/Binary) (Optional)
     *                     name: String (Optional)
     *                     href: String (Optional)
     *                 }
     *             ]
     *             id: String (Required)
     *         }
     *     ]
     *     skipToken: String (Optional)
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param getAllUnderCollectionRequest The getAllUnderCollectionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a response containing a list of items along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAllUnderCollectionWithResponseAsync(String catalogId, String collectionId,
        BinaryData getAllUnderCollectionRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAllUnderCollection(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), catalogId, collectionId, contentType, accept,
            getAllUnderCollectionRequest, requestOptions, context));
    }

    /**
     * Search for Items across all parties by intersecting geometry.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 10,
     * Maximum = 1000,
     * Default Value = 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ownerItemIds (Optional): [
     *         String (Optional)
     *     ]
     *     dataFilters (Optional): [
     *         String (Optional)
     *     ]
     *     intersectsWithGeometry (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     minCreatedDateTime: OffsetDateTime (Optional)
     *     maxCreatedDateTime: OffsetDateTime (Optional)
     *     minLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxPageSize: Integer (Optional)
     *     skipToken: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             links (Optional): [
     *                  (Optional){
     *                     rel: String(DerivedFrom/Child/Parent) (Optional)
     *                     href: String (Optional)
     *                     type: String(Catalog/Collection/Item/Asset) (Optional)
     *                 }
     *             ]
     *             eTag: String (Optional)
     *             status: String (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *             modifiedDateTime: OffsetDateTime (Optional)
     *             source: String (Optional)
     *             name: String (Optional)
     *             description: String (Optional)
     *             createdBy: String (Optional)
     *             modifiedBy: String (Optional)
     *             properties (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             data (Optional, Required on create): {
     *                 String: BinaryData (Required)
     *             }
     *             ownerItemId: String (Optional)
     *             catalogId: String (Optional)
     *             collectionId: String (Optional)
     *             assets (Optional): [
     *                  (Optional){
     *                     type: String(Image/Shapefile/Binary) (Optional)
     *                     name: String (Optional)
     *                     href: String (Optional)
     *                 }
     *             ]
     *             id: String (Required)
     *         }
     *     ]
     *     skipToken: String (Optional)
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param collectionId Unique resource ID.
     * @param getAllUnderCollectionRequest The getAllUnderCollectionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a response containing a list of items along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAllUnderCollectionWithResponse(String catalogId, String collectionId,
        BinaryData getAllUnderCollectionRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.getAllUnderCollectionSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), catalogId, collectionId, contentType, accept,
            getAllUnderCollectionRequest, requestOptions, Context.NONE);
    }

    /**
     * Search for Items across all collections.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 10,
     * Maximum = 1000,
     * Default Value = 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ownerItemIds (Optional): [
     *         String (Optional)
     *     ]
     *     dataFilters (Optional): [
     *         String (Optional)
     *     ]
     *     intersectsWithGeometry (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     minCreatedDateTime: OffsetDateTime (Optional)
     *     maxCreatedDateTime: OffsetDateTime (Optional)
     *     minLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxPageSize: Integer (Optional)
     *     skipToken: String (Optional)
     *     collectionIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             links (Optional): [
     *                  (Optional){
     *                     rel: String(DerivedFrom/Child/Parent) (Optional)
     *                     href: String (Optional)
     *                     type: String(Catalog/Collection/Item/Asset) (Optional)
     *                 }
     *             ]
     *             eTag: String (Optional)
     *             status: String (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *             modifiedDateTime: OffsetDateTime (Optional)
     *             source: String (Optional)
     *             name: String (Optional)
     *             description: String (Optional)
     *             createdBy: String (Optional)
     *             modifiedBy: String (Optional)
     *             properties (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             data (Optional, Required on create): {
     *                 String: BinaryData (Required)
     *             }
     *             ownerItemId: String (Optional)
     *             catalogId: String (Optional)
     *             collectionId: String (Optional)
     *             assets (Optional): [
     *                  (Optional){
     *                     type: String(Image/Shapefile/Binary) (Optional)
     *                     name: String (Optional)
     *                     href: String (Optional)
     *                 }
     *             ]
     *             id: String (Required)
     *         }
     *     ]
     *     skipToken: String (Optional)
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param searchAcrossCollectionRequest The searchAcrossCollectionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a response containing a list of items along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> searchAcrossCollectionWithResponseAsync(String catalogId,
        BinaryData searchAcrossCollectionRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.searchAcrossCollection(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), catalogId, contentType, accept, searchAcrossCollectionRequest,
            requestOptions, context));
    }

    /**
     * Search for Items across all collections.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxPageSize</td><td>Integer</td><td>No</td><td>Maximum number of items needed (inclusive). Minimum = 10,
     * Maximum = 1000,
     * Default Value = 50.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ownerItemIds (Optional): [
     *         String (Optional)
     *     ]
     *     dataFilters (Optional): [
     *         String (Optional)
     *     ]
     *     intersectsWithGeometry (Optional): {
     *         type: String(Point/Polygon/MultiPolygon) (Required)
     *     }
     *     ids (Optional): [
     *         String (Optional)
     *     ]
     *     minCreatedDateTime: OffsetDateTime (Optional)
     *     maxCreatedDateTime: OffsetDateTime (Optional)
     *     minLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxLastModifiedDateTime: OffsetDateTime (Optional)
     *     maxPageSize: Integer (Optional)
     *     skipToken: String (Optional)
     *     collectionIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     value (Required): [
     *          (Required){
     *             links (Optional): [
     *                  (Optional){
     *                     rel: String(DerivedFrom/Child/Parent) (Optional)
     *                     href: String (Optional)
     *                     type: String(Catalog/Collection/Item/Asset) (Optional)
     *                 }
     *             ]
     *             eTag: String (Optional)
     *             status: String (Optional)
     *             createdDateTime: OffsetDateTime (Optional)
     *             modifiedDateTime: OffsetDateTime (Optional)
     *             source: String (Optional)
     *             name: String (Optional)
     *             description: String (Optional)
     *             createdBy: String (Optional)
     *             modifiedBy: String (Optional)
     *             properties (Optional): {
     *                 String: BinaryData (Required)
     *             }
     *             data (Optional, Required on create): {
     *                 String: BinaryData (Required)
     *             }
     *             ownerItemId: String (Optional)
     *             catalogId: String (Optional)
     *             collectionId: String (Optional)
     *             assets (Optional): [
     *                  (Optional){
     *                     type: String(Image/Shapefile/Binary) (Optional)
     *                     name: String (Optional)
     *                     href: String (Optional)
     *                 }
     *             ]
     *             id: String (Required)
     *         }
     *     ]
     *     skipToken: String (Optional)
     *     nextLink: String (Optional)
     * }
     * }
     * </pre>
     * 
     * @param catalogId Id of the Catalog.
     * @param searchAcrossCollectionRequest The searchAcrossCollectionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents a response containing a list of items along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> searchAcrossCollectionWithResponse(String catalogId,
        BinaryData searchAcrossCollectionRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.searchAcrossCollectionSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), catalogId, contentType, accept, searchAcrossCollectionRequest,
            requestOptions, Context.NONE);
    }
}
