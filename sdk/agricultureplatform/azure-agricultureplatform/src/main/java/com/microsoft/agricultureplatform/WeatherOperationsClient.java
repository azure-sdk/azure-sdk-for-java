// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.implementation.WeatherOperationsImpl;
import com.microsoft.agricultureplatform.implementation.models.GetRequest;
import com.microsoft.agricultureplatform.models.ApiKeyAuthCredentials;
import com.microsoft.agricultureplatform.models.WeatherLocation;
import com.microsoft.agricultureplatform.models.WeatherResponse;
import java.util.List;

/**
 * Initializes a new instance of the synchronous AgriculturePlatformClient type.
 */
@ServiceClient(builder = AgriculturePlatformClientBuilder.class)
public final class WeatherOperationsClient {
    @Generated
    private final WeatherOperationsImpl serviceClient;

    /**
     * Initializes an instance of WeatherOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    WeatherOperationsClient(WeatherOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Returns a list of WeatherData.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     providerName: String (Required)
     *     providerApiName: String (Required)
     *     language: String (Optional)
     *     units: String (Required)
     *     credentials (Optional): {
     *         kind: String(OAuthClientCredentials/ApiKeyAuthCredentials) (Required)
     *         apiKey (Required): {
     *             keyVaultUri: String (Required)
     *             keyName: String (Required)
     *             keyVersion: String (Required)
     *         }
     *     }
     *     locations (Optional): [
     *          (Optional){
     *             type: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     weatherMetadata (Required): {
     *         providerName: String (Required)
     *         providerApiName: String (Required)
     *         language: String (Optional)
     *         units: String (Required)
     *         weatherDataType: String (Required)
     *     }
     *     status: String (Optional)
     *     locations (Optional): [
     *          (Optional){
     *             location (Optional): {
     *                 type: String (Required)
     *                 value: String (Required)
     *             }
     *             requestCompletionTime: String (Optional)
     *             lastRefreshedDateTime: OffsetDateTime (Optional)
     *             data (Optional): {
     *                 additionalAttributes (Optional): {
     *                     String: BinaryData (Required)
     *                 }
     *                 wetBulbTemperature (Optional): {
     *                     unit: String (Optional)
     *                     value (Optional): [
     *                         double (Optional)
     *                     ]
     *                 }
     *                 cloudCover (Optional): (recursive schema, see cloudCover above)
     *                 dayOfWeek (Optional): [
     *                     String (Optional)
     *                 ]
     *                 dayOrNight (Optional): [
     *                     String (Optional)
     *                 ]
     *                 expirationTime (Optional): [
     *                     String (Optional)
     *                 ]
     *                 iconCode (Optional): [
     *                     int (Optional)
     *                 ]
     *                 iconCodeExtend (Optional): [
     *                     int (Optional)
     *                 ]
     *                 hasPrecipitation (Optional): [
     *                     boolean (Optional)
     *                 ]
     *                 pressureMeanSeaLevel (Optional): (recursive schema, see pressureMeanSeaLevel above)
     *                 relativeHumidity (Optional): (recursive schema, see relativeHumidity above)
     *                 temperature (Optional): (recursive schema, see temperature above)
     *                 temperatureDewPoint (Optional): (recursive schema, see temperatureDewPoint above)
     *                 temperatureFeelsLike (Optional): (recursive schema, see temperatureFeelsLike above)
     *                 temperatureHeatIndex (Optional): (recursive schema, see temperatureHeatIndex above)
     *                 temperatureWindChill (Optional): (recursive schema, see temperatureWindChill above)
     *                 uvDescription (Optional): [
     *                     String (Optional)
     *                 ]
     *                 uvIndex (Optional): [
     *                     double (Optional)
     *                 ]
     *                 validTimeLocal (Optional): [
     *                     String (Optional)
     *                 ]
     *                 validTime (Optional): [
     *                     String (Optional)
     *                 ]
     *                 visibility (Optional): (recursive schema, see visibility above)
     *                 windDirection (Optional): (recursive schema, see windDirection above)
     *                 windGust (Optional): (recursive schema, see windGust above)
     *                 windSpeed (Optional): (recursive schema, see windSpeed above)
     *                 wxPhraseLong (Optional): [
     *                     String (Optional)
     *                 ]
     *                 wxPhraseShort (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         }
     *     ]
     *     errors (Optional): {
     *         locations (Optional): [
     *              (Optional){
     *                 location (Optional): (recursive schema, see location above)
     *                 code: Integer (Optional)
     *                 description: String (Optional)
     *                 retryable: Boolean (Optional)
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getRequest The getRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return schema of Weather Data Provider Response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(BinaryData getRequest, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(getRequest, requestOptions);
    }

    /**
     * Returns a list of WeatherData.
     * 
     * @param providerName Weather provider name.
     * @param providerApiName Provider's api name to which request is to be made.
     * @param units Units for which request to data provider is to be sent. Supported values are
     * 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
     * for Metric SI units.
     * @param language Language (IETF BCP 47 language tag) in which search results should be returned
     * by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
     * @param credentials Api Key Auth Credentials class for API Key based Auth.
     * @param locations List of locations for which weather data need to be fetched from the provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return schema of Weather Data Provider Response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WeatherResponse get(String providerName, String providerApiName, String units, String language,
        ApiKeyAuthCredentials credentials, List<WeatherLocation> locations) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GetRequest getRequestObj = new GetRequest(providerName, providerApiName, units).setLanguage(language)
            .setCredentials(credentials)
            .setLocations(locations);
        BinaryData getRequest = BinaryData.fromObject(getRequestObj);
        return getWithResponse(getRequest, requestOptions).getValue().toObject(WeatherResponse.class);
    }

    /**
     * Returns a list of WeatherData.
     * 
     * @param providerName Weather provider name.
     * @param providerApiName Provider's api name to which request is to be made.
     * @param units Units for which request to data provider is to be sent. Supported values are
     * 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
     * for Metric SI units.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return schema of Weather Data Provider Response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WeatherResponse get(String providerName, String providerApiName, String units) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GetRequest getRequestObj = new GetRequest(providerName, providerApiName, units);
        BinaryData getRequest = BinaryData.fromObject(getRequestObj);
        return getWithResponse(getRequest, requestOptions).getValue().toObject(WeatherResponse.class);
    }
}
