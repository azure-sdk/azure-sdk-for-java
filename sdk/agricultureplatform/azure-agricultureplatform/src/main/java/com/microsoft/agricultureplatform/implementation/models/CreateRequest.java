// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.microsoft.agricultureplatform.models.Asset;
import com.microsoft.agricultureplatform.models.Link;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CreateRequest model.
 */
@Fluent
public final class CreateRequest implements JsonSerializable<CreateRequest> {
    /*
     * Links for referencing other objects.
     */
    @Generated
    private List<Link> links;

    /*
     * Status of the resource.
     */
    @Generated
    private String status;

    /*
     * Source of the resource.
     */
    @Generated
    private String source;

    /*
     * Name to identify resource.
     */
    @Generated
    private String name;

    /*
     * Textual description of the resource.
     */
    @Generated
    private String description;

    /*
     * A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     */
    @Generated
    private Map<String, BinaryData> properties;

    /*
     * Schema for records under the dataset.
     */
    @Generated
    private final Map<String, BinaryData> data;

    /*
     * OwnerItemId.
     */
    @Generated
    private String ownerItemId;

    /*
     * Assets.
     */
    @Generated
    private List<Asset> assets;

    /**
     * Creates an instance of CreateRequest class.
     * 
     * @param data the data value to set.
     */
    @Generated
    public CreateRequest(Map<String, BinaryData> data) {
        this.data = data;
    }

    /**
     * Get the links property: Links for referencing other objects.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Set the links property: Links for referencing other objects.
     * 
     * @param links the links value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setLinks(List<Link> links) {
        this.links = links;
        return this;
    }

    /**
     * Get the status property: Status of the resource.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Set the status property: Status of the resource.
     * 
     * @param status the status value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the source property: Source of the resource.
     * 
     * @return the source value.
     */
    @Generated
    public String getSource() {
        return this.source;
    }

    /**
     * Set the source property: Source of the resource.
     * 
     * @param source the source value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the name property: Name to identify resource.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name to identify resource.
     * 
     * @param name the name value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: Textual description of the resource.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Textual description of the resource.
     * 
     * @param description the description value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the properties property: A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, BinaryData> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     * 
     * @param properties the properties value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setProperties(Map<String, BinaryData> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the data property: Schema for records under the dataset.
     * 
     * @return the data value.
     */
    @Generated
    public Map<String, BinaryData> getData() {
        return this.data;
    }

    /**
     * Get the ownerItemId property: OwnerItemId.
     * 
     * @return the ownerItemId value.
     */
    @Generated
    public String getOwnerItemId() {
        return this.ownerItemId;
    }

    /**
     * Set the ownerItemId property: OwnerItemId.
     * 
     * @param ownerItemId the ownerItemId value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setOwnerItemId(String ownerItemId) {
        this.ownerItemId = ownerItemId;
        return this;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public List<Asset> getAssets() {
        return this.assets;
    }

    /**
     * Set the assets property: Assets.
     * 
     * @param assets the assets value to set.
     * @return the CreateRequest object itself.
     */
    @Generated
    public CreateRequest setAssets(List<Asset> assets) {
        this.assets = assets;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("data", this.data,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("properties", this.properties,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("ownerItemId", this.ownerItemId);
        jsonWriter.writeArrayField("assets", this.assets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateRequest.
     */
    @Generated
    public static CreateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, BinaryData> data = null;
            List<Link> links = null;
            String status = null;
            String source = null;
            String name = null;
            String description = null;
            Map<String, BinaryData> properties = null;
            String ownerItemId = null;
            List<Asset> assets = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("source".equals(fieldName)) {
                    source = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("ownerItemId".equals(fieldName)) {
                    ownerItemId = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readArray(reader1 -> Asset.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            CreateRequest deserializedCreateRequest = new CreateRequest(data);
            deserializedCreateRequest.links = links;
            deserializedCreateRequest.status = status;
            deserializedCreateRequest.source = source;
            deserializedCreateRequest.name = name;
            deserializedCreateRequest.description = description;
            deserializedCreateRequest.properties = properties;
            deserializedCreateRequest.ownerItemId = ownerItemId;
            deserializedCreateRequest.assets = assets;

            return deserializedCreateRequest;
        });
    }
}
