// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * ItemResponse model for Items api.
 */
@Immutable
public final class ItemResponse implements JsonSerializable<ItemResponse> {
    /*
     * Links for referencing other objects.
     */
    @Generated
    private List<Link> links;

    /*
     * The ETag value to implement optimistic concurrency.
     */
    @Generated
    private String eTag;

    /*
     * Status of the resource.
     */
    @Generated
    private String status;

    /*
     * Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
     */
    @Generated
    private OffsetDateTime modifiedDateTime;

    /*
     * Source of the resource.
     */
    @Generated
    private String source;

    /*
     * Name to identify resource.
     */
    @Generated
    private String name;

    /*
     * Textual description of the resource.
     */
    @Generated
    private String description;

    /*
     * Created by user/tenant id.
     */
    @Generated
    private String createdBy;

    /*
     * Modified by user/tenant id.
     */
    @Generated
    private String modifiedBy;

    /*
     * A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     */
    @Generated
    private Map<String, BinaryData> properties;

    /*
     * Schema for records under the dataset.
     */
    @Generated
    private final Map<String, BinaryData> data;

    /*
     * OwnerItemId.
     */
    @Generated
    private String ownerItemId;

    /*
     * CatalogId.
     */
    @Generated
    private String catalogId;

    /*
     * CollectionId.
     */
    @Generated
    private String collectionId;

    /*
     * Assets.
     */
    @Generated
    private List<Asset> assets;

    /*
     * Unique resource ID.
     */
    @Generated
    private String id;

    /**
     * Creates an instance of ItemResponse class.
     * 
     * @param data the data value to set.
     */
    @Generated
    private ItemResponse(Map<String, BinaryData> data) {
        this.data = data;
    }

    /**
     * Get the links property: Links for referencing other objects.
     * 
     * @return the links value.
     */
    @Generated
    public List<Link> getLinks() {
        return this.links;
    }

    /**
     * Get the eTag property: The ETag value to implement optimistic concurrency.
     * 
     * @return the eTag value.
     */
    @Generated
    public String getETag() {
        return this.eTag;
    }

    /**
     * Get the status property: Status of the resource.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the modifiedDateTime property: Date-time when resource was last modified, sample format:
     * yyyy-MM-ddTHH:mm:ssZ.
     * 
     * @return the modifiedDateTime value.
     */
    @Generated
    public OffsetDateTime getModifiedDateTime() {
        return this.modifiedDateTime;
    }

    /**
     * Get the source property: Source of the resource.
     * 
     * @return the source value.
     */
    @Generated
    public String getSource() {
        return this.source;
    }

    /**
     * Get the name property: Name to identify resource.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: Textual description of the resource.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the createdBy property: Created by user/tenant id.
     * 
     * @return the createdBy value.
     */
    @Generated
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Get the modifiedBy property: Modified by user/tenant id.
     * 
     * @return the modifiedBy value.
     */
    @Generated
    public String getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Get the properties property: A collection of key value pairs that belongs to the resource.
     * Each pair must not have a key greater than 50 characters
     * and must not have a value greater than 150 characters.
     * Note: A maximum of 25 key value pairs can be provided for a resource and only
     * string,
     * numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, BinaryData> getProperties() {
        return this.properties;
    }

    /**
     * Get the data property: Schema for records under the dataset.
     * 
     * @return the data value.
     */
    @Generated
    public Map<String, BinaryData> getData() {
        return this.data;
    }

    /**
     * Get the ownerItemId property: OwnerItemId.
     * 
     * @return the ownerItemId value.
     */
    @Generated
    public String getOwnerItemId() {
        return this.ownerItemId;
    }

    /**
     * Get the catalogId property: CatalogId.
     * 
     * @return the catalogId value.
     */
    @Generated
    public String getCatalogId() {
        return this.catalogId;
    }

    /**
     * Get the collectionId property: CollectionId.
     * 
     * @return the collectionId value.
     */
    @Generated
    public String getCollectionId() {
        return this.collectionId;
    }

    /**
     * Get the assets property: Assets.
     * 
     * @return the assets value.
     */
    @Generated
    public List<Asset> getAssets() {
        return this.assets;
    }

    /**
     * Get the id property: Unique resource ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("data", this.data,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("properties", this.properties,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("ownerItemId", this.ownerItemId);
        jsonWriter.writeArrayField("assets", this.assets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ItemResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ItemResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ItemResponse.
     */
    @Generated
    public static ItemResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, BinaryData> data = null;
            List<Link> links = null;
            String eTag = null;
            String status = null;
            OffsetDateTime createdDateTime = null;
            OffsetDateTime modifiedDateTime = null;
            String source = null;
            String name = null;
            String description = null;
            String createdBy = null;
            String modifiedBy = null;
            Map<String, BinaryData> properties = null;
            String ownerItemId = null;
            String catalogId = null;
            String collectionId = null;
            List<Asset> assets = null;
            String id = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> Link.fromJson(reader1));
                } else if ("eTag".equals(fieldName)) {
                    eTag = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("modifiedDateTime".equals(fieldName)) {
                    modifiedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("source".equals(fieldName)) {
                    source = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("createdBy".equals(fieldName)) {
                    createdBy = reader.getString();
                } else if ("modifiedBy".equals(fieldName)) {
                    modifiedBy = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("ownerItemId".equals(fieldName)) {
                    ownerItemId = reader.getString();
                } else if ("catalogId".equals(fieldName)) {
                    catalogId = reader.getString();
                } else if ("collectionId".equals(fieldName)) {
                    collectionId = reader.getString();
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readArray(reader1 -> Asset.fromJson(reader1));
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ItemResponse deserializedItemResponse = new ItemResponse(data);
            deserializedItemResponse.links = links;
            deserializedItemResponse.eTag = eTag;
            deserializedItemResponse.status = status;
            deserializedItemResponse.createdDateTime = createdDateTime;
            deserializedItemResponse.modifiedDateTime = modifiedDateTime;
            deserializedItemResponse.source = source;
            deserializedItemResponse.name = name;
            deserializedItemResponse.description = description;
            deserializedItemResponse.createdBy = createdBy;
            deserializedItemResponse.modifiedBy = modifiedBy;
            deserializedItemResponse.properties = properties;
            deserializedItemResponse.ownerItemId = ownerItemId;
            deserializedItemResponse.catalogId = catalogId;
            deserializedItemResponse.collectionId = collectionId;
            deserializedItemResponse.assets = assets;
            deserializedItemResponse.id = id;

            return deserializedItemResponse;
        });
    }
}
