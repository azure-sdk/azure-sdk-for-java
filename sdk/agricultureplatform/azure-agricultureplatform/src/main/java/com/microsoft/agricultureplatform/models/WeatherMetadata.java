// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of Weather Metadata.
 */
@Immutable
public final class WeatherMetadata implements JsonSerializable<WeatherMetadata> {
    /*
     * Weather provider name.
     */
    @Generated
    private final String providerName;

    /*
     * Provider's api name to which request is to be made.
     */
    @Generated
    private final String providerApiName;

    /*
     * Language (IETF BCP 47 language tag) in which search results should be returned
     * by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
     */
    @Generated
    private String language;

    /*
     * Units for which request to data provider is to be sent. Supported values are
     * 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
     * for Metric SI units.
     */
    @Generated
    private final String units;

    /*
     * Type of weather data (forecast/historical).
     */
    @Generated
    private final String weatherDataType;

    /**
     * Creates an instance of WeatherMetadata class.
     * 
     * @param providerName the providerName value to set.
     * @param providerApiName the providerApiName value to set.
     * @param units the units value to set.
     * @param weatherDataType the weatherDataType value to set.
     */
    @Generated
    private WeatherMetadata(String providerName, String providerApiName, String units, String weatherDataType) {
        this.providerName = providerName;
        this.providerApiName = providerApiName;
        this.units = units;
        this.weatherDataType = weatherDataType;
    }

    /**
     * Get the providerName property: Weather provider name.
     * 
     * @return the providerName value.
     */
    @Generated
    public String getProviderName() {
        return this.providerName;
    }

    /**
     * Get the providerApiName property: Provider's api name to which request is to be made.
     * 
     * @return the providerApiName value.
     */
    @Generated
    public String getProviderApiName() {
        return this.providerApiName;
    }

    /**
     * Get the language property: Language (IETF BCP 47 language tag) in which search results should be returned
     * by the data provider. Examples: 'en-US', 'es', 'es-MX', 'fr-FR'.
     * 
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Get the units property: Units for which request to data provider is to be sent. Supported values are
     * 'e' for English units, 'm' for Metric units, 'h' for Hybrid units (UK) and 's'
     * for Metric SI units.
     * 
     * @return the units value.
     */
    @Generated
    public String getUnits() {
        return this.units;
    }

    /**
     * Get the weatherDataType property: Type of weather data (forecast/historical).
     * 
     * @return the weatherDataType value.
     */
    @Generated
    public String getWeatherDataType() {
        return this.weatherDataType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("providerName", this.providerName);
        jsonWriter.writeStringField("providerApiName", this.providerApiName);
        jsonWriter.writeStringField("units", this.units);
        jsonWriter.writeStringField("weatherDataType", this.weatherDataType);
        jsonWriter.writeStringField("language", this.language);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WeatherMetadata.
     */
    @Generated
    public static WeatherMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String providerName = null;
            String providerApiName = null;
            String units = null;
            String weatherDataType = null;
            String language = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerName".equals(fieldName)) {
                    providerName = reader.getString();
                } else if ("providerApiName".equals(fieldName)) {
                    providerApiName = reader.getString();
                } else if ("units".equals(fieldName)) {
                    units = reader.getString();
                } else if ("weatherDataType".equals(fieldName)) {
                    weatherDataType = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            WeatherMetadata deserializedWeatherMetadata
                = new WeatherMetadata(providerName, providerApiName, units, weatherDataType);
            deserializedWeatherMetadata.language = language;

            return deserializedWeatherMetadata;
        });
    }
}
