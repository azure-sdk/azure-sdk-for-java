// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Paged response contains list of items and next property to get the next set of
 * results.
 */
@Immutable
public final class SearchFeaturesResponse implements JsonSerializable<SearchFeaturesResponse> {
    /*
     * List of items.
     */
    @Generated
    private final List<StacItem> features;

    /*
     * URL to do the POST request with same filters,
     * to get next set of items.
     */
    @Generated
    private String nextLink;

    /**
     * Creates an instance of SearchFeaturesResponse class.
     * 
     * @param features the features value to set.
     */
    @Generated
    private SearchFeaturesResponse(List<StacItem> features) {
        this.features = features;
    }

    /**
     * Get the features property: List of items.
     * 
     * @return the features value.
     */
    @Generated
    public List<StacItem> getFeatures() {
        return this.features;
    }

    /**
     * Get the nextLink property: URL to do the POST request with same filters,
     * to get next set of items.
     * 
     * @return the nextLink value.
     */
    @Generated
    public String getNextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("features", this.features, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchFeaturesResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchFeaturesResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SearchFeaturesResponse.
     */
    @Generated
    public static SearchFeaturesResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<StacItem> features = null;
            String nextLink = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("features".equals(fieldName)) {
                    features = reader.readArray(reader1 -> StacItem.fromJson(reader1));
                } else if ("nextLink".equals(fieldName)) {
                    nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            SearchFeaturesResponse deserializedSearchFeaturesResponse = new SearchFeaturesResponse(features);
            deserializedSearchFeaturesResponse.nextLink = nextLink;

            return deserializedSearchFeaturesResponse;
        });
    }
}
