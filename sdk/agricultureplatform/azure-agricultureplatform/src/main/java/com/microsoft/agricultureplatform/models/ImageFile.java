// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of image file resource.
 */
@Immutable
public final class ImageFile implements JsonSerializable<ImageFile> {
    /*
     * ADLS path of the image file.
     */
    @Generated
    private String filePath;

    /*
     * Name of the image file.
     */
    @Generated
    private final String name;

    /*
     * Supported image formats for scene resource.
     */
    @Generated
    private ImageFormat imageFormat;

    /*
     * Resolution of image file in meters.
     */
    @Generated
    private Double resolution;

    /**
     * Creates an instance of ImageFile class.
     * 
     * @param name the name value to set.
     */
    @Generated
    private ImageFile(String name) {
        this.name = name;
    }

    /**
     * Get the filePath property: ADLS path of the image file.
     * 
     * @return the filePath value.
     */
    @Generated
    public String getFilePath() {
        return this.filePath;
    }

    /**
     * Get the name property: Name of the image file.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the imageFormat property: Supported image formats for scene resource.
     * 
     * @return the imageFormat value.
     */
    @Generated
    public ImageFormat getImageFormat() {
        return this.imageFormat;
    }

    /**
     * Get the resolution property: Resolution of image file in meters.
     * 
     * @return the resolution value.
     */
    @Generated
    public Double getResolution() {
        return this.resolution;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("filePath", this.filePath);
        jsonWriter.writeStringField("imageFormat", this.imageFormat == null ? null : this.imageFormat.toString());
        jsonWriter.writeNumberField("resolution", this.resolution);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageFile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageFile if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageFile.
     */
    @Generated
    public static ImageFile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String filePath = null;
            ImageFormat imageFormat = null;
            Double resolution = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("filePath".equals(fieldName)) {
                    filePath = reader.getString();
                } else if ("imageFormat".equals(fieldName)) {
                    imageFormat = ImageFormat.fromString(reader.getString());
                } else if ("resolution".equals(fieldName)) {
                    resolution = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            ImageFile deserializedImageFile = new ImageFile(name);
            deserializedImageFile.filePath = filePath;
            deserializedImageFile.imageFormat = imageFormat;
            deserializedImageFile.resolution = resolution;

            return deserializedImageFile;
        });
    }
}
