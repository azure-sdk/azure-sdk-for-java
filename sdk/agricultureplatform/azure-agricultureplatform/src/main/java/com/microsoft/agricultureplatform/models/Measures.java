// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Schema for storing measurement readings and unit.
 */
@Immutable
public final class Measures implements JsonSerializable<Measures> {
    /*
     * Data unit.
     */
    @Generated
    private String unit;

    /*
     * Data values.
     */
    @Generated
    private List<Double> value;

    /**
     * Creates an instance of Measures class.
     */
    @Generated
    private Measures() {
    }

    /**
     * Get the unit property: Data unit.
     * 
     * @return the unit value.
     */
    @Generated
    public String getUnit() {
        return this.unit;
    }

    /**
     * Get the value property: Data values.
     * 
     * @return the value value.
     */
    @Generated
    public List<Double> getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Measures from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Measures if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Measures.
     */
    @Generated
    public static Measures fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Measures deserializedMeasures = new Measures();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unit".equals(fieldName)) {
                    deserializedMeasures.unit = reader.getString();
                } else if ("value".equals(fieldName)) {
                    List<Double> value = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedMeasures.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMeasures;
        });
    }
}
