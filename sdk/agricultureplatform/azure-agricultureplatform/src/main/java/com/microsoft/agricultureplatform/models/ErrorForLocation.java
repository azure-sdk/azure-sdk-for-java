// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model for error information for a failed location.
 */
@Immutable
public final class ErrorForLocation implements JsonSerializable<ErrorForLocation> {
    /*
     * Schema of Location data.
     */
    @Generated
    private WeatherLocation location;

    /*
     * Status code returned by data provider.
     */
    @Generated
    private Integer code;

    /*
     * Description of the error.
     */
    @Generated
    private String description;

    /*
     * Flag suggesting if retry attempt with same request body should be made to fetch
     * required data.
     */
    @Generated
    private Boolean retryable;

    /**
     * Creates an instance of ErrorForLocation class.
     */
    @Generated
    private ErrorForLocation() {
    }

    /**
     * Get the location property: Schema of Location data.
     * 
     * @return the location value.
     */
    @Generated
    public WeatherLocation getLocation() {
        return this.location;
    }

    /**
     * Get the code property: Status code returned by data provider.
     * 
     * @return the code value.
     */
    @Generated
    public Integer getCode() {
        return this.code;
    }

    /**
     * Get the description property: Description of the error.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the retryable property: Flag suggesting if retry attempt with same request body should be made to fetch
     * required data.
     * 
     * @return the retryable value.
     */
    @Generated
    public Boolean isRetryable() {
        return this.retryable;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("location", this.location);
        jsonWriter.writeNumberField("code", this.code);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("retryable", this.retryable);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorForLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorForLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ErrorForLocation.
     */
    @Generated
    public static ErrorForLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorForLocation deserializedErrorForLocation = new ErrorForLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedErrorForLocation.location = WeatherLocation.fromJson(reader);
                } else if ("code".equals(fieldName)) {
                    deserializedErrorForLocation.code = reader.getNullable(JsonReader::getInt);
                } else if ("description".equals(fieldName)) {
                    deserializedErrorForLocation.description = reader.getString();
                } else if ("retryable".equals(fieldName)) {
                    deserializedErrorForLocation.retryable = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorForLocation;
        });
    }
}
