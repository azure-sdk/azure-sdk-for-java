// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.microsoft.agricultureplatform.implementation.SolutionsOperationsImpl;
import com.microsoft.agricultureplatform.implementation.models.CancelJobRequest;
import com.microsoft.agricultureplatform.implementation.models.CreateJobRequest;
import com.microsoft.agricultureplatform.implementation.models.GetDataRequest;
import com.microsoft.agricultureplatform.implementation.models.GetJobRequest;
import com.microsoft.agricultureplatform.models.SamplePartnerResponse;
import java.util.Map;

/**
 * Initializes a new instance of the synchronous AgriculturePlatformClient type.
 */
@ServiceClient(builder = AgriculturePlatformClientBuilder.class)
public final class SolutionsOperationsClient {
    @Generated
    private final SolutionsOperationsImpl serviceClient;

    /**
     * Initializes an instance of SolutionsOperationsClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    SolutionsOperationsClient(SolutionsOperationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Cancel Solution job Async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param cancelJobRequest The cancelJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return samplePartnerResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelJobWithResponse(BinaryData cancelJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponse(cancelJobRequest, requestOptions);
    }

    /**
     * Creates solution job async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     *     inputData (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createJobRequest The createJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return samplePartnerResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createJobWithResponse(BinaryData createJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.createJobWithResponse(createJobRequest, requestOptions);
    }

    /**
     * Gets solution Data async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     *     inputData (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getDataRequest The getDataRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return solution Data async along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataWithResponse(BinaryData getDataRequest, RequestOptions requestOptions) {
        return this.serviceClient.getDataWithResponse(getDataRequest, requestOptions);
    }

    /**
     * Gets Solution get job response async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getJobRequest The getJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return solution get job response async along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(BinaryData getJobRequest, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponse(getJobRequest, requestOptions);
    }

    /**
     * Cancel Solution job Async.
     * 
     * @param solutionId SolutionId.
     * @param requestPath RequestPath.
     * @param partnerRequestBody Properties.
     * @param partnerRequestHeaders Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return samplePartnerResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SamplePartnerResponse cancelJob(String solutionId, String requestPath,
        Map<String, BinaryData> partnerRequestBody, Map<String, BinaryData> partnerRequestHeaders) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CancelJobRequest cancelJobRequestObj
            = new CancelJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders);
        BinaryData cancelJobRequest = BinaryData.fromObject(cancelJobRequestObj);
        return cancelJobWithResponse(cancelJobRequest, requestOptions).getValue().toObject(SamplePartnerResponse.class);
    }

    /**
     * Creates solution job async.
     * 
     * @param solutionId SolutionId.
     * @param requestPath RequestPath.
     * @param partnerRequestBody Properties.
     * @param partnerRequestHeaders Properties.
     * @param inputData Input Data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return samplePartnerResponse.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SamplePartnerResponse createJob(String solutionId, String requestPath,
        Map<String, BinaryData> partnerRequestBody, Map<String, BinaryData> partnerRequestHeaders,
        Map<String, BinaryData> inputData) {
        // Generated convenience method for createJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateJobRequest createJobRequestObj
            = new CreateJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, inputData);
        BinaryData createJobRequest = BinaryData.fromObject(createJobRequestObj);
        return createJobWithResponse(createJobRequest, requestOptions).getValue().toObject(SamplePartnerResponse.class);
    }

    /**
     * Gets solution Data async.
     * 
     * @param solutionId SolutionId.
     * @param requestPath RequestPath.
     * @param partnerRequestBody Properties.
     * @param partnerRequestHeaders Properties.
     * @param inputData Input Data.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution Data async.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SamplePartnerResponse getData(String solutionId, String requestPath,
        Map<String, BinaryData> partnerRequestBody, Map<String, BinaryData> partnerRequestHeaders,
        Map<String, BinaryData> inputData) {
        // Generated convenience method for getDataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GetDataRequest getDataRequestObj
            = new GetDataRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders, inputData);
        BinaryData getDataRequest = BinaryData.fromObject(getDataRequestObj);
        return getDataWithResponse(getDataRequest, requestOptions).getValue().toObject(SamplePartnerResponse.class);
    }

    /**
     * Gets Solution get job response async.
     * 
     * @param solutionId SolutionId.
     * @param requestPath RequestPath.
     * @param partnerRequestBody Properties.
     * @param partnerRequestHeaders Properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution get job response async.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SamplePartnerResponse getJob(String solutionId, String requestPath,
        Map<String, BinaryData> partnerRequestBody, Map<String, BinaryData> partnerRequestHeaders) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        GetJobRequest getJobRequestObj
            = new GetJobRequest(solutionId, requestPath, partnerRequestBody, partnerRequestHeaders);
        BinaryData getJobRequest = BinaryData.fromObject(getJobRequestObj);
        return getJobWithResponse(getJobRequest, requestOptions).getValue().toObject(SamplePartnerResponse.class);
    }
}
