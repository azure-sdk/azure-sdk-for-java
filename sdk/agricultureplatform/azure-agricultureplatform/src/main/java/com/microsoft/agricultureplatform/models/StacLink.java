// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Link.
 */
@Immutable
public final class StacLink implements JsonSerializable<StacLink> {
    /*
     * The HREF of the link.
     */
    @Generated
    private String href;

    /*
     * The relation type of the link.
     */
    @Generated
    private String rel;

    /*
     * The type of the link. Optional.
     */
    @Generated
    private String type;

    /*
     * The title of the link. Optional.
     */
    @Generated
    private String title;

    /**
     * Creates an instance of StacLink class.
     */
    @Generated
    private StacLink() {
    }

    /**
     * Get the href property: The HREF of the link.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * Get the rel property: The relation type of the link.
     * 
     * @return the rel value.
     */
    @Generated
    public String getRel() {
        return this.rel;
    }

    /**
     * Get the type property: The type of the link. Optional.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the title property: The title of the link. Optional.
     * 
     * @return the title value.
     */
    @Generated
    public String getTitle() {
        return this.title;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("href", this.href);
        jsonWriter.writeStringField("rel", this.rel);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("title", this.title);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacLink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacLink if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the StacLink.
     */
    @Generated
    public static StacLink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StacLink deserializedStacLink = new StacLink();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("href".equals(fieldName)) {
                    deserializedStacLink.href = reader.getString();
                } else if ("rel".equals(fieldName)) {
                    deserializedStacLink.rel = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStacLink.type = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedStacLink.title = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStacLink;
        });
    }
}
