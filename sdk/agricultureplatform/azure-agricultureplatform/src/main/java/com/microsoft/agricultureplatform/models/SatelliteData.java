// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Data Model for SatelliteIngestionJobRequest.
 */
@Fluent
public final class SatelliteData implements JsonSerializable<SatelliteData> {
    /*
     * List of ImageNames.
     */
    @Generated
    private List<String> imageNames;

    /*
     * List of ImageFormats. Available value: TIF.
     */
    @Generated
    private List<String> imageFormats;

    /*
     * List of ImageResolutions in meters. Available values: 10, 20, 60.
     */
    @Generated
    private List<Double> imageResolutions;

    /**
     * Creates an instance of SatelliteData class.
     */
    @Generated
    public SatelliteData() {
    }

    /**
     * Get the imageNames property: List of ImageNames.
     * 
     * @return the imageNames value.
     */
    @Generated
    public List<String> getImageNames() {
        return this.imageNames;
    }

    /**
     * Set the imageNames property: List of ImageNames.
     * 
     * @param imageNames the imageNames value to set.
     * @return the SatelliteData object itself.
     */
    @Generated
    public SatelliteData setImageNames(List<String> imageNames) {
        this.imageNames = imageNames;
        return this;
    }

    /**
     * Get the imageFormats property: List of ImageFormats. Available value: TIF.
     * 
     * @return the imageFormats value.
     */
    @Generated
    public List<String> getImageFormats() {
        return this.imageFormats;
    }

    /**
     * Set the imageFormats property: List of ImageFormats. Available value: TIF.
     * 
     * @param imageFormats the imageFormats value to set.
     * @return the SatelliteData object itself.
     */
    @Generated
    public SatelliteData setImageFormats(List<String> imageFormats) {
        this.imageFormats = imageFormats;
        return this;
    }

    /**
     * Get the imageResolutions property: List of ImageResolutions in meters. Available values: 10, 20, 60.
     * 
     * @return the imageResolutions value.
     */
    @Generated
    public List<Double> getImageResolutions() {
        return this.imageResolutions;
    }

    /**
     * Set the imageResolutions property: List of ImageResolutions in meters. Available values: 10, 20, 60.
     * 
     * @param imageResolutions the imageResolutions value to set.
     * @return the SatelliteData object itself.
     */
    @Generated
    public SatelliteData setImageResolutions(List<Double> imageResolutions) {
        this.imageResolutions = imageResolutions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("imageNames", this.imageNames, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("imageFormats", this.imageFormats, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("imageResolutions", this.imageResolutions,
            (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SatelliteData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SatelliteData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SatelliteData.
     */
    @Generated
    public static SatelliteData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SatelliteData deserializedSatelliteData = new SatelliteData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageNames".equals(fieldName)) {
                    List<String> imageNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedSatelliteData.imageNames = imageNames;
                } else if ("imageFormats".equals(fieldName)) {
                    List<String> imageFormats = reader.readArray(reader1 -> reader1.getString());
                    deserializedSatelliteData.imageFormats = imageFormats;
                } else if ("imageResolutions".equals(fieldName)) {
                    List<Double> imageResolutions = reader.readArray(reader1 -> reader1.getDouble());
                    deserializedSatelliteData.imageResolutions = imageResolutions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSatelliteData;
        });
    }
}
