// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.microsoft.agricultureplatform.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * Link.
 */
@Fluent
public final class Link implements JsonSerializable<Link> {
    /*
     * Type of relationship.
     */
    @Generated
    private RelationshipType rel;

    /*
     * Href.
     */
    @Generated
    private String href;

    /*
     * DestinationType.
     */
    @Generated
    private DestinationType type;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setLinkAccessor(new JsonMergePatchHelper.LinkAccessor() {
            @Override
            public Link prepareModelForJsonMergePatch(Link model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(Link model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of Link class.
     */
    @Generated
    public Link() {
    }

    /**
     * Get the rel property: Type of relationship.
     * 
     * @return the rel value.
     */
    @Generated
    public RelationshipType getRel() {
        return this.rel;
    }

    /**
     * Set the rel property: Type of relationship.
     * 
     * @param rel the rel value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setRel(RelationshipType rel) {
        this.rel = rel;
        this.updatedProperties.add("rel");
        return this;
    }

    /**
     * Get the href property: Href.
     * 
     * @return the href value.
     */
    @Generated
    public String getHref() {
        return this.href;
    }

    /**
     * Set the href property: Href.
     * 
     * @param href the href value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setHref(String href) {
        this.href = href;
        this.updatedProperties.add("href");
        return this;
    }

    /**
     * Get the type property: DestinationType.
     * 
     * @return the type value.
     */
    @Generated
    public DestinationType getType() {
        return this.type;
    }

    /**
     * Set the type property: DestinationType.
     * 
     * @param type the type value to set.
     * @return the Link object itself.
     */
    @Generated
    public Link setType(DestinationType type) {
        this.type = type;
        this.updatedProperties.add("type");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("rel", this.rel == null ? null : this.rel.toString());
            jsonWriter.writeStringField("href", this.href);
            jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("rel")) {
            if (this.rel == null) {
                jsonWriter.writeNullField("rel");
            } else {
                jsonWriter.writeStringField("rel", this.rel.toString());
            }
        }
        if (updatedProperties.contains("href")) {
            if (this.href == null) {
                jsonWriter.writeNullField("href");
            } else {
                jsonWriter.writeStringField("href", this.href);
            }
        }
        if (updatedProperties.contains("type")) {
            if (this.type == null) {
                jsonWriter.writeNullField("type");
            } else {
                jsonWriter.writeStringField("type", this.type.toString());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Link from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Link if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Link.
     */
    @Generated
    public static Link fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Link deserializedLink = new Link();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rel".equals(fieldName)) {
                    deserializedLink.rel = RelationshipType.fromString(reader.getString());
                } else if ("href".equals(fieldName)) {
                    deserializedLink.href = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLink.type = DestinationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLink;
        });
    }
}
