// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * SatelliteFetchData.
 */
@Immutable
public final class SatelliteFetchData implements JsonSerializable<SatelliteFetchData> {
    /*
     * Start Date.
     */
    @Generated
    private OffsetDateTime dateTime;

    /*
     * Provider of satellite data. Available Value: SentinelHub.
     */
    @Generated
    private String provider;

    /*
     * Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.
     */
    @Generated
    private final String providerCollectionId;

    /*
     * Feature Id.
     */
    @Generated
    private String featureId;

    /*
     * ImageFiles.
     */
    @Generated
    private List<ImageFile> imageFiles;

    /*
     * ItemUri.
     */
    @Generated
    private String itemUri;

    /*
     * Id.
     */
    @Generated
    private String id;

    /**
     * Creates an instance of SatelliteFetchData class.
     * 
     * @param providerCollectionId the providerCollectionId value to set.
     */
    @Generated
    private SatelliteFetchData(String providerCollectionId) {
        this.providerCollectionId = providerCollectionId;
    }

    /**
     * Get the dateTime property: Start Date.
     * 
     * @return the dateTime value.
     */
    @Generated
    public OffsetDateTime getDateTime() {
        return this.dateTime;
    }

    /**
     * Get the provider property: Provider of satellite data. Available Value: SentinelHub.
     * 
     * @return the provider value.
     */
    @Generated
    public String getProvider() {
        return this.provider;
    }

    /**
     * Get the providerCollectionId property: Collection of satellite data. Available Value: sentinel-2-l2a,
     * sentinel-2-l1c.
     * 
     * @return the providerCollectionId value.
     */
    @Generated
    public String getProviderCollectionId() {
        return this.providerCollectionId;
    }

    /**
     * Get the featureId property: Feature Id.
     * 
     * @return the featureId value.
     */
    @Generated
    public String getFeatureId() {
        return this.featureId;
    }

    /**
     * Get the imageFiles property: ImageFiles.
     * 
     * @return the imageFiles value.
     */
    @Generated
    public List<ImageFile> getImageFiles() {
        return this.imageFiles;
    }

    /**
     * Get the itemUri property: ItemUri.
     * 
     * @return the itemUri value.
     */
    @Generated
    public String getItemUri() {
        return this.itemUri;
    }

    /**
     * Get the id property: Id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("providerCollectionId", this.providerCollectionId);
        jsonWriter.writeStringField("dateTime",
            this.dateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.dateTime));
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("featureId", this.featureId);
        jsonWriter.writeArrayField("imageFiles", this.imageFiles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("itemUri", this.itemUri);
        jsonWriter.writeStringField("id", this.id);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SatelliteFetchData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SatelliteFetchData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SatelliteFetchData.
     */
    @Generated
    public static SatelliteFetchData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String providerCollectionId = null;
            OffsetDateTime dateTime = null;
            String provider = null;
            String featureId = null;
            List<ImageFile> imageFiles = null;
            String itemUri = null;
            String id = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerCollectionId".equals(fieldName)) {
                    providerCollectionId = reader.getString();
                } else if ("dateTime".equals(fieldName)) {
                    dateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provider".equals(fieldName)) {
                    provider = reader.getString();
                } else if ("featureId".equals(fieldName)) {
                    featureId = reader.getString();
                } else if ("imageFiles".equals(fieldName)) {
                    imageFiles = reader.readArray(reader1 -> ImageFile.fromJson(reader1));
                } else if ("itemUri".equals(fieldName)) {
                    itemUri = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            SatelliteFetchData deserializedSatelliteFetchData = new SatelliteFetchData(providerCollectionId);
            deserializedSatelliteFetchData.dateTime = dateTime;
            deserializedSatelliteFetchData.provider = provider;
            deserializedSatelliteFetchData.featureId = featureId;
            deserializedSatelliteFetchData.imageFiles = imageFiles;
            deserializedSatelliteFetchData.itemUri = itemUri;
            deserializedSatelliteFetchData.id = id;

            return deserializedSatelliteFetchData;
        });
    }
}
