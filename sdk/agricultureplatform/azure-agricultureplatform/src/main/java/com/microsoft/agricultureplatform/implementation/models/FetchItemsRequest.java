// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.microsoft.agricultureplatform.models.OauthClientCredentials;
import com.microsoft.agricultureplatform.models.SatelliteData;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The FetchItemsRequest model.
 */
@Fluent
public final class FetchItemsRequest implements JsonSerializable<FetchItemsRequest> {
    /*
     * Start Date.
     */
    @Generated
    private OffsetDateTime startDateTime;

    /*
     * OAuthClientCredentials for clientId clientSecret auth.
     */
    @Generated
    private final OauthClientCredentials credentials;

    /*
     * End Date.
     */
    @Generated
    private OffsetDateTime endDateTime;

    /*
     * Provider of satellite data. Available Value: SentinelHub.
     */
    @Generated
    private final String provider;

    /*
     * ItemUri.
     */
    @Generated
    private final String itemUri;

    /*
     * Data Model for SatelliteIngestionJobRequest.
     */
    @Generated
    private final SatelliteData data;

    /*
     * Collection of satellite data. Available Value: sentinel-2-l2a, sentinel-2-l1c.
     */
    @Generated
    private final String providerCollectionId;

    /*
     * Feature Id.
     */
    @Generated
    private String featureId;

    /**
     * Creates an instance of FetchItemsRequest class.
     * 
     * @param credentials the credentials value to set.
     * @param provider the provider value to set.
     * @param itemUri the itemUri value to set.
     * @param data the data value to set.
     * @param providerCollectionId the providerCollectionId value to set.
     */
    @Generated
    public FetchItemsRequest(OauthClientCredentials credentials, String provider, String itemUri, SatelliteData data,
        String providerCollectionId) {
        this.credentials = credentials;
        this.provider = provider;
        this.itemUri = itemUri;
        this.data = data;
        this.providerCollectionId = providerCollectionId;
    }

    /**
     * Get the startDateTime property: Start Date.
     * 
     * @return the startDateTime value.
     */
    @Generated
    public OffsetDateTime getStartDateTime() {
        return this.startDateTime;
    }

    /**
     * Set the startDateTime property: Start Date.
     * 
     * @param startDateTime the startDateTime value to set.
     * @return the FetchItemsRequest object itself.
     */
    @Generated
    public FetchItemsRequest setStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }

    /**
     * Get the credentials property: OAuthClientCredentials for clientId clientSecret auth.
     * 
     * @return the credentials value.
     */
    @Generated
    public OauthClientCredentials getCredentials() {
        return this.credentials;
    }

    /**
     * Get the endDateTime property: End Date.
     * 
     * @return the endDateTime value.
     */
    @Generated
    public OffsetDateTime getEndDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: End Date.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the FetchItemsRequest object itself.
     */
    @Generated
    public FetchItemsRequest setEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Get the provider property: Provider of satellite data. Available Value: SentinelHub.
     * 
     * @return the provider value.
     */
    @Generated
    public String getProvider() {
        return this.provider;
    }

    /**
     * Get the itemUri property: ItemUri.
     * 
     * @return the itemUri value.
     */
    @Generated
    public String getItemUri() {
        return this.itemUri;
    }

    /**
     * Get the data property: Data Model for SatelliteIngestionJobRequest.
     * 
     * @return the data value.
     */
    @Generated
    public SatelliteData getData() {
        return this.data;
    }

    /**
     * Get the providerCollectionId property: Collection of satellite data. Available Value: sentinel-2-l2a,
     * sentinel-2-l1c.
     * 
     * @return the providerCollectionId value.
     */
    @Generated
    public String getProviderCollectionId() {
        return this.providerCollectionId;
    }

    /**
     * Get the featureId property: Feature Id.
     * 
     * @return the featureId value.
     */
    @Generated
    public String getFeatureId() {
        return this.featureId;
    }

    /**
     * Set the featureId property: Feature Id.
     * 
     * @param featureId the featureId value to set.
     * @return the FetchItemsRequest object itself.
     */
    @Generated
    public FetchItemsRequest setFeatureId(String featureId) {
        this.featureId = featureId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("credentials", this.credentials);
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("itemUri", this.itemUri);
        jsonWriter.writeJsonField("data", this.data);
        jsonWriter.writeStringField("providerCollectionId", this.providerCollectionId);
        jsonWriter.writeStringField("startDateTime",
            this.startDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDateTime));
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        jsonWriter.writeStringField("featureId", this.featureId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FetchItemsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FetchItemsRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FetchItemsRequest.
     */
    @Generated
    public static FetchItemsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OauthClientCredentials credentials = null;
            String provider = null;
            String itemUri = null;
            SatelliteData data = null;
            String providerCollectionId = null;
            OffsetDateTime startDateTime = null;
            OffsetDateTime endDateTime = null;
            String featureId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("credentials".equals(fieldName)) {
                    credentials = OauthClientCredentials.fromJson(reader);
                } else if ("provider".equals(fieldName)) {
                    provider = reader.getString();
                } else if ("itemUri".equals(fieldName)) {
                    itemUri = reader.getString();
                } else if ("data".equals(fieldName)) {
                    data = SatelliteData.fromJson(reader);
                } else if ("providerCollectionId".equals(fieldName)) {
                    providerCollectionId = reader.getString();
                } else if ("startDateTime".equals(fieldName)) {
                    startDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("featureId".equals(fieldName)) {
                    featureId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FetchItemsRequest deserializedFetchItemsRequest
                = new FetchItemsRequest(credentials, provider, itemUri, data, providerCollectionId);
            deserializedFetchItemsRequest.startDateTime = startDateTime;
            deserializedFetchItemsRequest.endDateTime = endDateTime;
            deserializedFetchItemsRequest.featureId = featureId;

            return deserializedFetchItemsRequest;
        });
    }
}
