// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of WeatherLocationData data.
 */
@Immutable
public final class WeatherLocationData implements JsonSerializable<WeatherLocationData> {
    /*
     * Schema of Location data.
     */
    @Generated
    private WeatherLocation location;

    /*
     * Request Completion Time in Utc of the location.
     */
    @Generated
    private String requestCompletionTime;

    /*
     * Date-time when resource was last requested, sample format: yyyy-MM-ddTHH:mm:ssZ.
     */
    @Generated
    private OffsetDateTime lastRefreshedDateTime;

    /*
     * Schema of weather data.
     */
    @Generated
    private WeatherData data;

    /**
     * Creates an instance of WeatherLocationData class.
     */
    @Generated
    private WeatherLocationData() {
    }

    /**
     * Get the location property: Schema of Location data.
     * 
     * @return the location value.
     */
    @Generated
    public WeatherLocation getLocation() {
        return this.location;
    }

    /**
     * Get the requestCompletionTime property: Request Completion Time in Utc of the location.
     * 
     * @return the requestCompletionTime value.
     */
    @Generated
    public String getRequestCompletionTime() {
        return this.requestCompletionTime;
    }

    /**
     * Get the lastRefreshedDateTime property: Date-time when resource was last requested, sample format:
     * yyyy-MM-ddTHH:mm:ssZ.
     * 
     * @return the lastRefreshedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastRefreshedDateTime() {
        return this.lastRefreshedDateTime;
    }

    /**
     * Get the data property: Schema of weather data.
     * 
     * @return the data value.
     */
    @Generated
    public WeatherData getData() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("location", this.location);
        jsonWriter.writeStringField("requestCompletionTime", this.requestCompletionTime);
        jsonWriter.writeStringField("lastRefreshedDateTime",
            this.lastRefreshedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastRefreshedDateTime));
        jsonWriter.writeJsonField("data", this.data);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherLocationData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherLocationData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeatherLocationData.
     */
    @Generated
    public static WeatherLocationData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherLocationData deserializedWeatherLocationData = new WeatherLocationData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedWeatherLocationData.location = WeatherLocation.fromJson(reader);
                } else if ("requestCompletionTime".equals(fieldName)) {
                    deserializedWeatherLocationData.requestCompletionTime = reader.getString();
                } else if ("lastRefreshedDateTime".equals(fieldName)) {
                    deserializedWeatherLocationData.lastRefreshedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("data".equals(fieldName)) {
                    deserializedWeatherLocationData.data = WeatherData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWeatherLocationData;
        });
    }
}
