// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema for storing catalog and collection id.
 */
@Immutable
public final class CatalogCollection implements JsonSerializable<CatalogCollection> {
    /*
     * Catalog Id.
     */
    @Generated
    private String catalogId;

    /*
     * Collection Id.
     */
    @Generated
    private String collectionId;

    /**
     * Creates an instance of CatalogCollection class.
     */
    @Generated
    private CatalogCollection() {
    }

    /**
     * Get the catalogId property: Catalog Id.
     * 
     * @return the catalogId value.
     */
    @Generated
    public String getCatalogId() {
        return this.catalogId;
    }

    /**
     * Get the collectionId property: Collection Id.
     * 
     * @return the collectionId value.
     */
    @Generated
    public String getCollectionId() {
        return this.collectionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CatalogCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CatalogCollection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CatalogCollection.
     */
    @Generated
    public static CatalogCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CatalogCollection deserializedCatalogCollection = new CatalogCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("catalogId".equals(fieldName)) {
                    deserializedCatalogCollection.catalogId = reader.getString();
                } else if ("collectionId".equals(fieldName)) {
                    deserializedCatalogCollection.collectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCatalogCollection;
        });
    }
}
