// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Polygon geometry.
 */
@Immutable
public final class Polygon extends GeoJsonObject {
    /*
     * Type of GeoJSON object.
     */
    @Generated
    private GeoJsonObjectType type = GeoJsonObjectType.POLYGON;

    /*
     * Gets or sets type of the GeoJSON Object.
     * It must be an array of linear ring coordinate arrays.
     * For Polygons with more than one of these rings, the first MUST be the exterior
     * ring,
     * and any others MUST be interior rings.
     */
    @Generated
    private final List<List<List<Double>>> coordinates;

    /**
     * Creates an instance of Polygon class.
     * 
     * @param coordinates the coordinates value to set.
     */
    @Generated
    public Polygon(List<List<List<Double>>> coordinates) {
        this.coordinates = coordinates;
    }

    /**
     * Get the type property: Type of GeoJSON object.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public GeoJsonObjectType getType() {
        return this.type;
    }

    /**
     * Get the coordinates property: Gets or sets type of the GeoJSON Object.
     * It must be an array of linear ring coordinate arrays.
     * For Polygons with more than one of these rings, the first MUST be the exterior
     * ring,
     * and any others MUST be interior rings.
     * 
     * @return the coordinates value.
     */
    @Generated
    public List<List<List<Double>>> getCoordinates() {
        return this.coordinates;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("coordinates", this.coordinates, (writer, element) -> writer.writeArray(element,
            (writer1, element1) -> writer1.writeArray(element1, (writer2, element2) -> writer2.writeDouble(element2))));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Polygon from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Polygon if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Polygon.
     */
    @Generated
    public static Polygon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<List<List<Double>>> coordinates = null;
            GeoJsonObjectType type = GeoJsonObjectType.POLYGON;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("coordinates".equals(fieldName)) {
                    coordinates = reader.readArray(
                        reader1 -> reader1.readArray(reader2 -> reader2.readArray(reader3 -> reader3.getDouble())));
                } else if ("type".equals(fieldName)) {
                    type = GeoJsonObjectType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Polygon deserializedPolygon = new Polygon(coordinates);
            deserializedPolygon.type = type;

            return deserializedPolygon;
        });
    }
}
