// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Schema of STAC Item.
 * Refer for spec:
 * https://github.com/radiantearth/stac-spec/blob/v1.0.0-beta.2/item-spec/item-spec.md#item-fields.
 */
@Immutable
public final class StacItem implements JsonSerializable<StacItem> {
    /*
     * The STAC version the Stac Item implements.
     */
    @Generated
    private final String stacVersion;

    /*
     * A list of extensions the Stac Item implements.
     */
    @Generated
    private List<String> stacExtensions;

    /*
     * Provider identifier. Globally unique ID by Data provider.
     */
    @Generated
    private final String id;

    /*
     * Type of the GeoJSON Object. It's value is always Feature.
     */
    @Generated
    private final String type;

    /*
     * Defines the full footprint of the asset represented by this item.
     * Its a GeoJSON geometry.
     */
    @Generated
    private BinaryData geometry;

    /*
     * Bounding box of the item.
     */
    @Generated
    private List<Double> bbox;

    /*
     * A dictionary of additional metadata for the item.
     */
    @Generated
    private final BinaryData properties;

    /*
     * List of link objects to resources and related URLs.
     */
    @Generated
    private final List<StacLink> links;

    /*
     * Dictionary of asset objects, each with a unique key.
     */
    @Generated
    private final Map<String, StacAsset> assets;

    /*
     * The id of the STAC Collection this Stac Item references.
     */
    @Generated
    private String providerCollectionId;

    /**
     * Creates an instance of StacItem class.
     * 
     * @param stacVersion the stacVersion value to set.
     * @param id the id value to set.
     * @param type the type value to set.
     * @param properties the properties value to set.
     * @param links the links value to set.
     * @param assets the assets value to set.
     */
    @Generated
    private StacItem(String stacVersion, String id, String type, BinaryData properties, List<StacLink> links,
        Map<String, StacAsset> assets) {
        this.stacVersion = stacVersion;
        this.id = id;
        this.type = type;
        this.properties = properties;
        this.links = links;
        this.assets = assets;
    }

    /**
     * Get the stacVersion property: The STAC version the Stac Item implements.
     * 
     * @return the stacVersion value.
     */
    @Generated
    public String getStacVersion() {
        return this.stacVersion;
    }

    /**
     * Get the stacExtensions property: A list of extensions the Stac Item implements.
     * 
     * @return the stacExtensions value.
     */
    @Generated
    public List<String> getStacExtensions() {
        return this.stacExtensions;
    }

    /**
     * Get the id property: Provider identifier. Globally unique ID by Data provider.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the type property: Type of the GeoJSON Object. It's value is always Feature.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the geometry property: Defines the full footprint of the asset represented by this item.
     * Its a GeoJSON geometry.
     * 
     * @return the geometry value.
     */
    @Generated
    public BinaryData getGeometry() {
        return this.geometry;
    }

    /**
     * Get the bbox property: Bounding box of the item.
     * 
     * @return the bbox value.
     */
    @Generated
    public List<Double> getBbox() {
        return this.bbox;
    }

    /**
     * Get the properties property: A dictionary of additional metadata for the item.
     * 
     * @return the properties value.
     */
    @Generated
    public BinaryData getProperties() {
        return this.properties;
    }

    /**
     * Get the links property: List of link objects to resources and related URLs.
     * 
     * @return the links value.
     */
    @Generated
    public List<StacLink> getLinks() {
        return this.links;
    }

    /**
     * Get the assets property: Dictionary of asset objects, each with a unique key.
     * 
     * @return the assets value.
     */
    @Generated
    public Map<String, StacAsset> getAssets() {
        return this.assets;
    }

    /**
     * Get the providerCollectionId property: The id of the STAC Collection this Stac Item references.
     * 
     * @return the providerCollectionId value.
     */
    @Generated
    public String getProviderCollectionId() {
        return this.providerCollectionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stacVersion", this.stacVersion);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeFieldName("properties");
        this.properties.writeTo(jsonWriter);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("assets", this.assets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("stacExtensions", this.stacExtensions,
            (writer, element) -> writer.writeString(element));
        if (this.geometry != null) {
            jsonWriter.writeFieldName("geometry");
            this.geometry.writeTo(jsonWriter);
        }
        jsonWriter.writeArrayField("bbox", this.bbox, (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeStringField("providerCollectionId", this.providerCollectionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StacItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StacItem if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StacItem.
     */
    @Generated
    public static StacItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String stacVersion = null;
            String id = null;
            String type = null;
            BinaryData properties = null;
            List<StacLink> links = null;
            Map<String, StacAsset> assets = null;
            List<String> stacExtensions = null;
            BinaryData geometry = null;
            List<Double> bbox = null;
            String providerCollectionId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stacVersion".equals(fieldName)) {
                    stacVersion = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    properties
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("links".equals(fieldName)) {
                    links = reader.readArray(reader1 -> StacLink.fromJson(reader1));
                } else if ("assets".equals(fieldName)) {
                    assets = reader.readMap(reader1 -> StacAsset.fromJson(reader1));
                } else if ("stacExtensions".equals(fieldName)) {
                    stacExtensions = reader.readArray(reader1 -> reader1.getString());
                } else if ("geometry".equals(fieldName)) {
                    geometry = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("bbox".equals(fieldName)) {
                    bbox = reader.readArray(reader1 -> reader1.getDouble());
                } else if ("providerCollectionId".equals(fieldName)) {
                    providerCollectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            StacItem deserializedStacItem = new StacItem(stacVersion, id, type, properties, links, assets);
            deserializedStacItem.stacExtensions = stacExtensions;
            deserializedStacItem.geometry = geometry;
            deserializedStacItem.bbox = bbox;
            deserializedStacItem.providerCollectionId = providerCollectionId;

            return deserializedStacItem;
        });
    }
}
