// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Schema of Weather Data Provider Response.
 */
@Immutable
public final class WeatherResponse implements JsonSerializable<WeatherResponse> {
    /*
     * Schema of Weather Metadata.
     */
    @Generated
    private final WeatherMetadata weatherMetadata;

    /*
     * Indicates a Succeeded, Failed, or PartiallySucceeded response.
     */
    @Generated
    private String status;

    /*
     * List of weather data for all the weather locations.
     */
    @Generated
    private List<WeatherLocationData> locations;

    /*
     * Model for errors encountered for all failed locations.
     */
    @Generated
    private WeatherDataErrors errors;

    /**
     * Creates an instance of WeatherResponse class.
     * 
     * @param weatherMetadata the weatherMetadata value to set.
     */
    @Generated
    private WeatherResponse(WeatherMetadata weatherMetadata) {
        this.weatherMetadata = weatherMetadata;
    }

    /**
     * Get the weatherMetadata property: Schema of Weather Metadata.
     * 
     * @return the weatherMetadata value.
     */
    @Generated
    public WeatherMetadata getWeatherMetadata() {
        return this.weatherMetadata;
    }

    /**
     * Get the status property: Indicates a Succeeded, Failed, or PartiallySucceeded response.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the locations property: List of weather data for all the weather locations.
     * 
     * @return the locations value.
     */
    @Generated
    public List<WeatherLocationData> getLocations() {
        return this.locations;
    }

    /**
     * Get the errors property: Model for errors encountered for all failed locations.
     * 
     * @return the errors value.
     */
    @Generated
    public WeatherDataErrors getErrors() {
        return this.errors;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("weatherMetadata", this.weatherMetadata);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("errors", this.errors);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeatherResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeatherResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WeatherResponse.
     */
    @Generated
    public static WeatherResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeatherMetadata weatherMetadata = null;
            String status = null;
            List<WeatherLocationData> locations = null;
            WeatherDataErrors errors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("weatherMetadata".equals(fieldName)) {
                    weatherMetadata = WeatherMetadata.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    locations = reader.readArray(reader1 -> WeatherLocationData.fromJson(reader1));
                } else if ("errors".equals(fieldName)) {
                    errors = WeatherDataErrors.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            WeatherResponse deserializedWeatherResponse = new WeatherResponse(weatherMetadata);
            deserializedWeatherResponse.status = status;
            deserializedWeatherResponse.locations = locations;
            deserializedWeatherResponse.errors = errors;

            return deserializedWeatherResponse;
        });
    }
}
