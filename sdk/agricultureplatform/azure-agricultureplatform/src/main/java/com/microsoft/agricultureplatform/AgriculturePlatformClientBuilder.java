// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.EndpointTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.client.traits.KeyCredentialTrait;
import com.azure.core.credential.KeyCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.KeyCredentialPolicy;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import com.microsoft.agricultureplatform.implementation.AgriculturePlatformClientImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * A builder for creating a new instance of the AgriculturePlatformClient type.
 */
@ServiceClientBuilder(
    serviceClients = {
        CatalogsOperationsClient.class,
        CollectionsOperationsClient.class,
        FileOperationsClient.class,
        ItemsOperationsClient.class,
        SatelliteOperationsClient.class,
        SchemasOperationsClient.class,
        SolutionsOperationsClient.class,
        WeatherOperationsClient.class,
        CatalogsOperationsAsyncClient.class,
        CollectionsOperationsAsyncClient.class,
        FileOperationsAsyncClient.class,
        ItemsOperationsAsyncClient.class,
        SatelliteOperationsAsyncClient.class,
        SchemasOperationsAsyncClient.class,
        SolutionsOperationsAsyncClient.class,
        WeatherOperationsAsyncClient.class })
public final class AgriculturePlatformClientBuilder
    implements HttpTrait<AgriculturePlatformClientBuilder>, ConfigurationTrait<AgriculturePlatformClientBuilder>,
    KeyCredentialTrait<AgriculturePlatformClientBuilder>, EndpointTrait<AgriculturePlatformClientBuilder> {
    @Generated
    private static final String SDK_NAME = "name";

    @Generated
    private static final String SDK_VERSION = "version";

    @Generated
    private static final Map<String, String> PROPERTIES
        = CoreUtils.getProperties("microsoft-agricultureplatform.properties");

    @Generated
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the AgriculturePlatformClientBuilder.
     */
    @Generated
    public AgriculturePlatformClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder pipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated
    private ClientOptions clientOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated
    private RetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The KeyCredential used for authentication.
     */
    @Generated
    private KeyCredential keyCredential;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder credential(KeyCredential keyCredential) {
        this.keyCredential = keyCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    @Generated
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Generated
    @Override
    public AgriculturePlatformClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    @Generated
    private AgricultureplatformServiceVersion serviceVersion;

    /**
     * Sets Service version.
     * 
     * @param serviceVersion the serviceVersion value.
     * @return the AgriculturePlatformClientBuilder.
     */
    @Generated
    public AgriculturePlatformClientBuilder serviceVersion(AgricultureplatformServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     * 
     * @param retryPolicy the retryPolicy value.
     * @return the AgriculturePlatformClientBuilder.
     */
    @Generated
    public AgriculturePlatformClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of AgriculturePlatformClientImpl with the provided parameters.
     * 
     * @return an instance of AgriculturePlatformClientImpl.
     */
    @Generated
    private AgriculturePlatformClientImpl buildInnerClient() {
        this.validateClient();
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        AgricultureplatformServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : AgricultureplatformServiceVersion.getLatest();
        AgriculturePlatformClientImpl client = new AgriculturePlatformClientImpl(localPipeline,
            JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint, localServiceVersion);
        return client;
    }

    @Generated
    private void validateClient() {
        // This method is invoked from 'buildInnerClient'/'buildClient' method.
        // Developer can customize this method, to validate that the necessary conditions are met for the new client.
        Objects.requireNonNull(endpoint, "'endpoint' cannot be null.");
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);
        if (headers != null) {
            policies.add(new AddHeadersPolicy(headers));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        if (keyCredential != null) {
            policies.add(new KeyCredentialPolicy("Authorization", keyCredential));
        }
        this.pipelinePolicies.stream()
            .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
            .forEach(p -> policies.add(p));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
        HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))
            .httpClient(httpClient)
            .clientOptions(localClientOptions)
            .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of CatalogsOperationsAsyncClient class.
     * 
     * @return an instance of CatalogsOperationsAsyncClient.
     */
    @Generated
    public CatalogsOperationsAsyncClient buildCatalogsOperationsAsyncClient() {
        return new CatalogsOperationsAsyncClient(buildInnerClient().getCatalogsOperations());
    }

    /**
     * Builds an instance of CollectionsOperationsAsyncClient class.
     * 
     * @return an instance of CollectionsOperationsAsyncClient.
     */
    @Generated
    public CollectionsOperationsAsyncClient buildCollectionsOperationsAsyncClient() {
        return new CollectionsOperationsAsyncClient(buildInnerClient().getCollectionsOperations());
    }

    /**
     * Builds an instance of FileOperationsAsyncClient class.
     * 
     * @return an instance of FileOperationsAsyncClient.
     */
    @Generated
    public FileOperationsAsyncClient buildFileOperationsAsyncClient() {
        return new FileOperationsAsyncClient(buildInnerClient().getFileOperations());
    }

    /**
     * Builds an instance of ItemsOperationsAsyncClient class.
     * 
     * @return an instance of ItemsOperationsAsyncClient.
     */
    @Generated
    public ItemsOperationsAsyncClient buildItemsOperationsAsyncClient() {
        return new ItemsOperationsAsyncClient(buildInnerClient().getItemsOperations());
    }

    /**
     * Builds an instance of SatelliteOperationsAsyncClient class.
     * 
     * @return an instance of SatelliteOperationsAsyncClient.
     */
    @Generated
    public SatelliteOperationsAsyncClient buildSatelliteOperationsAsyncClient() {
        return new SatelliteOperationsAsyncClient(buildInnerClient().getSatelliteOperations());
    }

    /**
     * Builds an instance of SchemasOperationsAsyncClient class.
     * 
     * @return an instance of SchemasOperationsAsyncClient.
     */
    @Generated
    public SchemasOperationsAsyncClient buildSchemasOperationsAsyncClient() {
        return new SchemasOperationsAsyncClient(buildInnerClient().getSchemasOperations());
    }

    /**
     * Builds an instance of SolutionsOperationsAsyncClient class.
     * 
     * @return an instance of SolutionsOperationsAsyncClient.
     */
    @Generated
    public SolutionsOperationsAsyncClient buildSolutionsOperationsAsyncClient() {
        return new SolutionsOperationsAsyncClient(buildInnerClient().getSolutionsOperations());
    }

    /**
     * Builds an instance of WeatherOperationsAsyncClient class.
     * 
     * @return an instance of WeatherOperationsAsyncClient.
     */
    @Generated
    public WeatherOperationsAsyncClient buildWeatherOperationsAsyncClient() {
        return new WeatherOperationsAsyncClient(buildInnerClient().getWeatherOperations());
    }

    /**
     * Builds an instance of CatalogsOperationsClient class.
     * 
     * @return an instance of CatalogsOperationsClient.
     */
    @Generated
    public CatalogsOperationsClient buildCatalogsOperationsClient() {
        return new CatalogsOperationsClient(buildInnerClient().getCatalogsOperations());
    }

    /**
     * Builds an instance of CollectionsOperationsClient class.
     * 
     * @return an instance of CollectionsOperationsClient.
     */
    @Generated
    public CollectionsOperationsClient buildCollectionsOperationsClient() {
        return new CollectionsOperationsClient(buildInnerClient().getCollectionsOperations());
    }

    /**
     * Builds an instance of FileOperationsClient class.
     * 
     * @return an instance of FileOperationsClient.
     */
    @Generated
    public FileOperationsClient buildFileOperationsClient() {
        return new FileOperationsClient(buildInnerClient().getFileOperations());
    }

    /**
     * Builds an instance of ItemsOperationsClient class.
     * 
     * @return an instance of ItemsOperationsClient.
     */
    @Generated
    public ItemsOperationsClient buildItemsOperationsClient() {
        return new ItemsOperationsClient(buildInnerClient().getItemsOperations());
    }

    /**
     * Builds an instance of SatelliteOperationsClient class.
     * 
     * @return an instance of SatelliteOperationsClient.
     */
    @Generated
    public SatelliteOperationsClient buildSatelliteOperationsClient() {
        return new SatelliteOperationsClient(buildInnerClient().getSatelliteOperations());
    }

    /**
     * Builds an instance of SchemasOperationsClient class.
     * 
     * @return an instance of SchemasOperationsClient.
     */
    @Generated
    public SchemasOperationsClient buildSchemasOperationsClient() {
        return new SchemasOperationsClient(buildInnerClient().getSchemasOperations());
    }

    /**
     * Builds an instance of SolutionsOperationsClient class.
     * 
     * @return an instance of SolutionsOperationsClient.
     */
    @Generated
    public SolutionsOperationsClient buildSolutionsOperationsClient() {
        return new SolutionsOperationsClient(buildInnerClient().getSolutionsOperations());
    }

    /**
     * Builds an instance of WeatherOperationsClient class.
     * 
     * @return an instance of WeatherOperationsClient.
     */
    @Generated
    public WeatherOperationsClient buildWeatherOperationsClient() {
        return new WeatherOperationsClient(buildInnerClient().getWeatherOperations());
    }

    private static final ClientLogger LOGGER = new ClientLogger(AgriculturePlatformClientBuilder.class);
}
