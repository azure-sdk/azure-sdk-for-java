// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.microsoft.agricultureplatform.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.microsoft.agricultureplatform.AgricultureplatformServiceVersion;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SolutionsOperations.
 */
public final class SolutionsOperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SolutionsOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AgriculturePlatformClientImpl client;

    /**
     * Initializes an instance of SolutionsOperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SolutionsOperationsImpl(AgriculturePlatformClientImpl client) {
        this.service = RestProxy.create(SolutionsOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public AgricultureplatformServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for AgriculturePlatformClientSolutionsOperations to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AgriculturePlatformC")
    public interface SolutionsOperationsService {
        @Post("/external/solutions:cancel-job")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> cancelJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData cancelJobRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:cancel-job")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData cancelJobRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:create-job")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createJobRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:create-job")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData createJobRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:get-data")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getData(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData getDataRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:get-data")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getDataSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData getDataRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:get-job")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getJob(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData getJobRequest,
            RequestOptions requestOptions, Context context);

        @Post("/external/solutions:get-job")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getJobSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData getJobRequest,
            RequestOptions requestOptions, Context context);
    }

    /**
     * Cancel Solution job Async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param cancelJobRequest The cancelJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return samplePartnerResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> cancelJobWithResponseAsync(BinaryData cancelJobRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.cancelJob(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, cancelJobRequest, requestOptions, context));
    }

    /**
     * Cancel Solution job Async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param cancelJobRequest The cancelJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return samplePartnerResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelJobWithResponse(BinaryData cancelJobRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.cancelJobSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, cancelJobRequest, requestOptions, Context.NONE);
    }

    /**
     * Creates solution job async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     *     inputData (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createJobRequest The createJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return samplePartnerResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createJobWithResponseAsync(BinaryData createJobRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.createJob(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, createJobRequest, requestOptions, context));
    }

    /**
     * Creates solution job async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     *     inputData (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param createJobRequest The createJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return samplePartnerResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createJobWithResponse(BinaryData createJobRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createJobSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            contentType, accept, createJobRequest, requestOptions, Context.NONE);
    }

    /**
     * Gets solution Data async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     *     inputData (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getDataRequest The getDataRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return solution Data async along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataWithResponseAsync(BinaryData getDataRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.getData(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
                contentType, accept, getDataRequest, requestOptions, context));
    }

    /**
     * Gets solution Data async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     *     inputData (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getDataRequest The getDataRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return solution Data async along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataWithResponse(BinaryData getDataRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.getDataSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, getDataRequest, requestOptions, Context.NONE);
    }

    /**
     * Gets Solution get job response async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getJobRequest The getJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return solution get job response async along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getJobWithResponseAsync(BinaryData getJobRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getJob(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), contentType, accept, getJobRequest, requestOptions, context));
    }

    /**
     * Gets Solution get job response async.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     solutionId: String (Required)
     *     requestPath: String (Required)
     *     partnerRequestBody (Required): {
     *         String: BinaryData (Required)
     *     }
     *     partnerRequestHeaders (Required): {
     *         String: BinaryData (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Optional)
     *     message: String (Optional)
     *     status: String (Optional)
     *     jobCreatedDateTime: OffsetDateTime (Optional)
     *     jobLastActionDateTime: OffsetDateTime (Optional)
     *     e2eid: String (Optional)
     *     partnerRequestBody (Optional): {
     *         solutionId: String (Optional)
     *         partyId: String (Optional)
     *         gddStartDate: OffsetDateTime (Optional)
     *         gddEndDate: OffsetDateTime (Optional)
     *         resourceId: String (Optional)
     *         resourceType: String (Optional)
     *         crop: String (Optional)
     *         temperatureUnit: String (Optional)
     *         method: String (Optional)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param getJobRequest The getJobRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return solution get job response async along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(BinaryData getJobRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.getJobSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(), contentType,
            accept, getJobRequest, requestOptions, Context.NONE);
    }
}
