// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agricultureplatform.generated;

import com.azure.resourcemanager.agricultureplatform.models.ManagedServiceIdentity;
import com.azure.resourcemanager.agricultureplatform.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.agricultureplatform.models.Sku;
import com.azure.resourcemanager.agricultureplatform.models.SkuTier;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AgriService CreateOrUpdate.
 */
public final class AgriServiceCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/agricultureplatform/resource-manager/Microsoft.AgriculturePlatform/preview/2024-06-01-preview/
     * examples/AgriService_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: AgriService_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to AgricultureplatformManager.
     */
    public static void agriServiceCreateOrUpdateGeneratedByMaximumSetRule(
        com.azure.resourcemanager.agricultureplatform.AgricultureplatformManager manager) {
        manager.agriServices()
            .define("TKXbP-22-NGGH-1Eh55xGX")
            .withRegion("othggzqkbaqfjlxklttgwec")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf())
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf()))
            .withSku(new Sku().withName("bxyhnsdhctmvilnodn")
                .withTier(SkuTier.FREE)
                .withSize("bnjsoasirrjyjsabvbwkcxsfeoms")
                .withFamily("cyk")
                .withCapacity(29))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
