// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agricultureplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties related to an AgriService data connector.
 */
@Fluent
public final class DataConnectorCredentials implements JsonSerializable<DataConnectorCredentials> {
    /*
     * Type of credential.
     */
    private AuthCredentialsKind kind;

    /*
     * Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
     */
    private String clientId;

    /*
     * Uri of the key vault
     */
    private String keyVaultUri;

    /*
     * Name of the key vault key.
     */
    private String keyName;

    /*
     * Version of the key vault key.
     */
    private String keyVersion;

    /**
     * Creates an instance of DataConnectorCredentials class.
     */
    public DataConnectorCredentials() {
    }

    /**
     * Get the kind property: Type of credential.
     * 
     * @return the kind value.
     */
    public AuthCredentialsKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of credential.
     * 
     * @param kind the kind value to set.
     * @return the DataConnectorCredentials object itself.
     */
    public DataConnectorCredentials withKind(AuthCredentialsKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the clientId property: Client Id associated with the provider, if type of credentials is
     * OAuthClientCredentials.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client Id associated with the provider, if type of credentials is
     * OAuthClientCredentials.
     * 
     * @param clientId the clientId value to set.
     * @return the DataConnectorCredentials object itself.
     */
    public DataConnectorCredentials withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the keyVaultUri property: Uri of the key vault.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: Uri of the key vault.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the DataConnectorCredentials object itself.
     */
    public DataConnectorCredentials withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the keyName property: Name of the key vault key.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: Name of the key vault key.
     * 
     * @param keyName the keyName value to set.
     * @return the DataConnectorCredentials object itself.
     */
    public DataConnectorCredentials withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVersion property: Version of the key vault key.
     * 
     * @return the keyVersion value.
     */
    public String keyVersion() {
        return this.keyVersion;
    }

    /**
     * Set the keyVersion property: Version of the key vault key.
     * 
     * @param keyVersion the keyVersion value to set.
     * @return the DataConnectorCredentials object itself.
     */
    public DataConnectorCredentials withKeyVersion(String keyVersion) {
        this.keyVersion = keyVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("keyVersion", this.keyVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataConnectorCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataConnectorCredentials if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataConnectorCredentials.
     */
    public static DataConnectorCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataConnectorCredentials deserializedDataConnectorCredentials = new DataConnectorCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedDataConnectorCredentials.kind = AuthCredentialsKind.fromString(reader.getString());
                } else if ("clientId".equals(fieldName)) {
                    deserializedDataConnectorCredentials.clientId = reader.getString();
                } else if ("keyVaultUri".equals(fieldName)) {
                    deserializedDataConnectorCredentials.keyVaultUri = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedDataConnectorCredentials.keyName = reader.getString();
                } else if ("keyVersion".equals(fieldName)) {
                    deserializedDataConnectorCredentials.keyVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataConnectorCredentials;
        });
    }
}
