// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.agricultureplatform.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.agricultureplatform.models.DataManagerForAgricultureSolution;
import java.io.IOException;
import java.util.List;

/**
 * The list of available agri solutions.
 */
@Immutable
public final class AvailableAgriSolutionListResultInner
    implements JsonSerializable<AvailableAgriSolutionListResultInner> {
    /*
     * Agri solutions list.
     */
    private List<DataManagerForAgricultureSolution> solutions;

    /**
     * Creates an instance of AvailableAgriSolutionListResultInner class.
     */
    private AvailableAgriSolutionListResultInner() {
    }

    /**
     * Get the solutions property: Agri solutions list.
     * 
     * @return the solutions value.
     */
    public List<DataManagerForAgricultureSolution> solutions() {
        return this.solutions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutions in model AvailableAgriSolutionListResultInner"));
        } else {
            solutions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AvailableAgriSolutionListResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("solutions", this.solutions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableAgriSolutionListResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableAgriSolutionListResultInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvailableAgriSolutionListResultInner.
     */
    public static AvailableAgriSolutionListResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableAgriSolutionListResultInner deserializedAvailableAgriSolutionListResultInner
                = new AvailableAgriSolutionListResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutions".equals(fieldName)) {
                    List<DataManagerForAgricultureSolution> solutions
                        = reader.readArray(reader1 -> DataManagerForAgricultureSolution.fromJson(reader1));
                    deserializedAvailableAgriSolutionListResultInner.solutions = solutions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableAgriSolutionListResultInner;
        });
    }
}
