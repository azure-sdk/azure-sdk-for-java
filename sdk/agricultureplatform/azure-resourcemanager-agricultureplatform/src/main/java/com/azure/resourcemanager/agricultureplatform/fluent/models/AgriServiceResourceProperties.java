// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agricultureplatform.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.agricultureplatform.models.AgriServiceConfig;
import com.azure.resourcemanager.agricultureplatform.models.ManagedOnBehalfOfConfiguration;
import com.azure.resourcemanager.agricultureplatform.models.ProvisioningState;
import java.io.IOException;

/**
 * Details of the Agriculture AgriDataManager.
 */
@Immutable
public final class AgriServiceResourceProperties implements JsonSerializable<AgriServiceResourceProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Config of the AgriService resource instance.
     */
    private AgriServiceConfig config;

    /*
     * Managed On Behalf Of Configuration.
     */
    private ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration;

    /**
     * Creates an instance of AgriServiceResourceProperties class.
     */
    public AgriServiceResourceProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the config property: Config of the AgriService resource instance.
     * 
     * @return the config value.
     */
    public AgriServiceConfig config() {
        return this.config;
    }

    /**
     * Get the managedOnBehalfOfConfiguration property: Managed On Behalf Of Configuration.
     * 
     * @return the managedOnBehalfOfConfiguration value.
     */
    public ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration() {
        return this.managedOnBehalfOfConfiguration;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (config() != null) {
            config().validate();
        }
        if (managedOnBehalfOfConfiguration() != null) {
            managedOnBehalfOfConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgriServiceResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgriServiceResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgriServiceResourceProperties.
     */
    public static AgriServiceResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgriServiceResourceProperties deserializedAgriServiceResourceProperties
                = new AgriServiceResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAgriServiceResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("config".equals(fieldName)) {
                    deserializedAgriServiceResourceProperties.config = AgriServiceConfig.fromJson(reader);
                } else if ("managedOnBehalfOfConfiguration".equals(fieldName)) {
                    deserializedAgriServiceResourceProperties.managedOnBehalfOfConfiguration
                        = ManagedOnBehalfOfConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgriServiceResourceProperties;
        });
    }
}
