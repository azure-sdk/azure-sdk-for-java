// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.agricultureplatform.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.agricultureplatform.fluent.AgriServicesClient;
import com.azure.resourcemanager.agricultureplatform.fluent.models.AgriServiceResourceInner;
import com.azure.resourcemanager.agricultureplatform.fluent.models.AvailableAgriSolutionListResultInner;
import com.azure.resourcemanager.agricultureplatform.models.AgriServiceResource;
import com.azure.resourcemanager.agricultureplatform.models.AgriServices;
import com.azure.resourcemanager.agricultureplatform.models.AvailableAgriSolutionListResult;

public final class AgriServicesImpl implements AgriServices {
    private static final ClientLogger LOGGER = new ClientLogger(AgriServicesImpl.class);

    private final AgriServicesClient innerClient;

    private final com.azure.resourcemanager.agricultureplatform.AgriculturePlatformManager serviceManager;

    public AgriServicesImpl(AgriServicesClient innerClient,
        com.azure.resourcemanager.agricultureplatform.AgriculturePlatformManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AgriServiceResource> getByResourceGroupWithResponse(String resourceGroupName,
        String agriServiceResourceName, Context context) {
        Response<AgriServiceResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, agriServiceResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AgriServiceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AgriServiceResource getByResourceGroup(String resourceGroupName, String agriServiceResourceName) {
        AgriServiceResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, agriServiceResourceName);
        if (inner != null) {
            return new AgriServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String agriServiceResourceName) {
        this.serviceClient().delete(resourceGroupName, agriServiceResourceName);
    }

    public void delete(String resourceGroupName, String agriServiceResourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, agriServiceResourceName, context);
    }

    public PagedIterable<AgriServiceResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AgriServiceResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AgriServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AgriServiceResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AgriServiceResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AgriServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AgriServiceResource> list() {
        PagedIterable<AgriServiceResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AgriServiceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AgriServiceResource> list(Context context) {
        PagedIterable<AgriServiceResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AgriServiceResourceImpl(inner1, this.manager()));
    }

    public Response<AvailableAgriSolutionListResult> listAvailableSolutionsWithResponse(String resourceGroupName,
        String agriServiceResourceName, Context context) {
        Response<AvailableAgriSolutionListResultInner> inner = this.serviceClient()
            .listAvailableSolutionsWithResponse(resourceGroupName, agriServiceResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AvailableAgriSolutionListResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AvailableAgriSolutionListResult listAvailableSolutions(String resourceGroupName,
        String agriServiceResourceName) {
        AvailableAgriSolutionListResultInner inner
            = this.serviceClient().listAvailableSolutions(resourceGroupName, agriServiceResourceName);
        if (inner != null) {
            return new AvailableAgriSolutionListResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public AgriServiceResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String agriServiceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "agriServices");
        if (agriServiceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agriServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, agriServiceResourceName, Context.NONE).getValue();
    }

    public Response<AgriServiceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String agriServiceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "agriServices");
        if (agriServiceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agriServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, agriServiceResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String agriServiceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "agriServices");
        if (agriServiceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agriServices'.", id)));
        }
        this.delete(resourceGroupName, agriServiceResourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String agriServiceResourceName = ResourceManagerUtils.getValueFromIdByName(id, "agriServices");
        if (agriServiceResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'agriServices'.", id)));
        }
        this.delete(resourceGroupName, agriServiceResourceName, context);
    }

    private AgriServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.agricultureplatform.AgriculturePlatformManager manager() {
        return this.serviceManager;
    }

    public AgriServiceResourceImpl define(String name) {
        return new AgriServiceResourceImpl(name, this.manager());
    }
}
