// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.agricultureplatform.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Data Manager for Agriculture solution.
 */
@Fluent
public final class DataManagerForAgricultureSolution implements JsonSerializable<DataManagerForAgricultureSolution> {
    /*
     * Partner Id.
     */
    private String partnerId;

    /*
     * Solution Id.
     */
    private String solutionId;

    /*
     * Partner tenant Id.
     */
    private String partnerTenantId;

    /*
     * Data access scopes.
     */
    private List<String> dataAccessScopes;

    /*
     * Marketplace offer details.
     */
    private MarketPlaceOfferDetails marketPlaceOfferDetails;

    /*
     * Saas application Id.
     */
    private String saasApplicationId;

    /*
     * Entra application Id used to access azure data manager for agriculture instance.
     */
    private String accessAzureDataManagerForAgricultureApplicationId;

    /*
     * Entra application name used to access azure data manager for agriculture instance.
     */
    private String accessAzureDataManagerForAgricultureApplicationName;

    /*
     * Whether solution inference will validate input.
     */
    private boolean isValidateInput;

    /**
     * Creates an instance of DataManagerForAgricultureSolution class.
     */
    public DataManagerForAgricultureSolution() {
    }

    /**
     * Get the partnerId property: Partner Id.
     * 
     * @return the partnerId value.
     */
    public String partnerId() {
        return this.partnerId;
    }

    /**
     * Set the partnerId property: Partner Id.
     * 
     * @param partnerId the partnerId value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withPartnerId(String partnerId) {
        this.partnerId = partnerId;
        return this;
    }

    /**
     * Get the solutionId property: Solution Id.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id.
     * 
     * @param solutionId the solutionId value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the partnerTenantId property: Partner tenant Id.
     * 
     * @return the partnerTenantId value.
     */
    public String partnerTenantId() {
        return this.partnerTenantId;
    }

    /**
     * Set the partnerTenantId property: Partner tenant Id.
     * 
     * @param partnerTenantId the partnerTenantId value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withPartnerTenantId(String partnerTenantId) {
        this.partnerTenantId = partnerTenantId;
        return this;
    }

    /**
     * Get the dataAccessScopes property: Data access scopes.
     * 
     * @return the dataAccessScopes value.
     */
    public List<String> dataAccessScopes() {
        return this.dataAccessScopes;
    }

    /**
     * Set the dataAccessScopes property: Data access scopes.
     * 
     * @param dataAccessScopes the dataAccessScopes value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withDataAccessScopes(List<String> dataAccessScopes) {
        this.dataAccessScopes = dataAccessScopes;
        return this;
    }

    /**
     * Get the marketPlaceOfferDetails property: Marketplace offer details.
     * 
     * @return the marketPlaceOfferDetails value.
     */
    public MarketPlaceOfferDetails marketPlaceOfferDetails() {
        return this.marketPlaceOfferDetails;
    }

    /**
     * Set the marketPlaceOfferDetails property: Marketplace offer details.
     * 
     * @param marketPlaceOfferDetails the marketPlaceOfferDetails value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution
        withMarketPlaceOfferDetails(MarketPlaceOfferDetails marketPlaceOfferDetails) {
        this.marketPlaceOfferDetails = marketPlaceOfferDetails;
        return this;
    }

    /**
     * Get the saasApplicationId property: Saas application Id.
     * 
     * @return the saasApplicationId value.
     */
    public String saasApplicationId() {
        return this.saasApplicationId;
    }

    /**
     * Set the saasApplicationId property: Saas application Id.
     * 
     * @param saasApplicationId the saasApplicationId value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withSaasApplicationId(String saasApplicationId) {
        this.saasApplicationId = saasApplicationId;
        return this;
    }

    /**
     * Get the accessAzureDataManagerForAgricultureApplicationId property: Entra application Id used to access azure
     * data manager for agriculture instance.
     * 
     * @return the accessAzureDataManagerForAgricultureApplicationId value.
     */
    public String accessAzureDataManagerForAgricultureApplicationId() {
        return this.accessAzureDataManagerForAgricultureApplicationId;
    }

    /**
     * Set the accessAzureDataManagerForAgricultureApplicationId property: Entra application Id used to access azure
     * data manager for agriculture instance.
     * 
     * @param accessAzureDataManagerForAgricultureApplicationId the accessAzureDataManagerForAgricultureApplicationId
     * value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withAccessAzureDataManagerForAgricultureApplicationId(
        String accessAzureDataManagerForAgricultureApplicationId) {
        this.accessAzureDataManagerForAgricultureApplicationId = accessAzureDataManagerForAgricultureApplicationId;
        return this;
    }

    /**
     * Get the accessAzureDataManagerForAgricultureApplicationName property: Entra application name used to access azure
     * data manager for agriculture instance.
     * 
     * @return the accessAzureDataManagerForAgricultureApplicationName value.
     */
    public String accessAzureDataManagerForAgricultureApplicationName() {
        return this.accessAzureDataManagerForAgricultureApplicationName;
    }

    /**
     * Set the accessAzureDataManagerForAgricultureApplicationName property: Entra application name used to access azure
     * data manager for agriculture instance.
     * 
     * @param accessAzureDataManagerForAgricultureApplicationName the
     * accessAzureDataManagerForAgricultureApplicationName value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withAccessAzureDataManagerForAgricultureApplicationName(
        String accessAzureDataManagerForAgricultureApplicationName) {
        this.accessAzureDataManagerForAgricultureApplicationName = accessAzureDataManagerForAgricultureApplicationName;
        return this;
    }

    /**
     * Get the isValidateInput property: Whether solution inference will validate input.
     * 
     * @return the isValidateInput value.
     */
    public boolean isValidateInput() {
        return this.isValidateInput;
    }

    /**
     * Set the isValidateInput property: Whether solution inference will validate input.
     * 
     * @param isValidateInput the isValidateInput value to set.
     * @return the DataManagerForAgricultureSolution object itself.
     */
    public DataManagerForAgricultureSolution withIsValidateInput(boolean isValidateInput) {
        this.isValidateInput = isValidateInput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partnerId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property partnerId in model DataManagerForAgricultureSolution"));
        }
        if (solutionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property solutionId in model DataManagerForAgricultureSolution"));
        }
        if (partnerTenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property partnerTenantId in model DataManagerForAgricultureSolution"));
        }
        if (dataAccessScopes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataAccessScopes in model DataManagerForAgricultureSolution"));
        }
        if (marketPlaceOfferDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketPlaceOfferDetails in model DataManagerForAgricultureSolution"));
        } else {
            marketPlaceOfferDetails().validate();
        }
        if (saasApplicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property saasApplicationId in model DataManagerForAgricultureSolution"));
        }
        if (accessAzureDataManagerForAgricultureApplicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accessAzureDataManagerForAgricultureApplicationId in model DataManagerForAgricultureSolution"));
        }
        if (accessAzureDataManagerForAgricultureApplicationName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property accessAzureDataManagerForAgricultureApplicationName in model DataManagerForAgricultureSolution"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataManagerForAgricultureSolution.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("partnerId", this.partnerId);
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeStringField("partnerTenantId", this.partnerTenantId);
        jsonWriter.writeArrayField("dataAccessScopes", this.dataAccessScopes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("marketPlaceOfferDetails", this.marketPlaceOfferDetails);
        jsonWriter.writeStringField("saasApplicationId", this.saasApplicationId);
        jsonWriter.writeStringField("accessAzureDataManagerForAgricultureApplicationId",
            this.accessAzureDataManagerForAgricultureApplicationId);
        jsonWriter.writeStringField("accessAzureDataManagerForAgricultureApplicationName",
            this.accessAzureDataManagerForAgricultureApplicationName);
        jsonWriter.writeBooleanField("isValidateInput", this.isValidateInput);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataManagerForAgricultureSolution from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataManagerForAgricultureSolution if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataManagerForAgricultureSolution.
     */
    public static DataManagerForAgricultureSolution fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataManagerForAgricultureSolution deserializedDataManagerForAgricultureSolution
                = new DataManagerForAgricultureSolution();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.partnerId = reader.getString();
                } else if ("solutionId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.solutionId = reader.getString();
                } else if ("partnerTenantId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.partnerTenantId = reader.getString();
                } else if ("dataAccessScopes".equals(fieldName)) {
                    List<String> dataAccessScopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataManagerForAgricultureSolution.dataAccessScopes = dataAccessScopes;
                } else if ("marketPlaceOfferDetails".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.marketPlaceOfferDetails
                        = MarketPlaceOfferDetails.fromJson(reader);
                } else if ("saasApplicationId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.saasApplicationId = reader.getString();
                } else if ("accessAzureDataManagerForAgricultureApplicationId".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.accessAzureDataManagerForAgricultureApplicationId
                        = reader.getString();
                } else if ("accessAzureDataManagerForAgricultureApplicationName".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.accessAzureDataManagerForAgricultureApplicationName
                        = reader.getString();
                } else if ("isValidateInput".equals(fieldName)) {
                    deserializedDataManagerForAgricultureSolution.isValidateInput = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataManagerForAgricultureSolution;
        });
    }
}
