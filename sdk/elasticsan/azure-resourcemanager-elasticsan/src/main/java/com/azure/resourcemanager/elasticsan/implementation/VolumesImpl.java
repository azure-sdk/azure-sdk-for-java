// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.elasticsan.fluent.VolumesClient;
import com.azure.resourcemanager.elasticsan.fluent.models.VolumeInner;
import com.azure.resourcemanager.elasticsan.models.Volume;
import com.azure.resourcemanager.elasticsan.models.VolumeCreateParameter;
import com.azure.resourcemanager.elasticsan.models.VolumeUpdate;
import com.azure.resourcemanager.elasticsan.models.Volumes;

public final class VolumesImpl implements Volumes {
    private static final ClientLogger LOGGER = new ClientLogger(VolumesImpl.class);

    private final VolumesClient innerClient;

    private final com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager;

    public VolumesImpl(
        VolumesClient innerClient, com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Volume create(
        String resourceGroupName,
        String elasticSanName,
        String volumeGroupName,
        String volumeName,
        VolumeCreateParameter parameters) {
        VolumeInner inner =
            this.serviceClient().create(resourceGroupName, elasticSanName, volumeGroupName, volumeName, parameters);
        if (inner != null) {
            return new VolumeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Volume create(
        String resourceGroupName,
        String elasticSanName,
        String volumeGroupName,
        String volumeName,
        VolumeCreateParameter parameters,
        Context context) {
        VolumeInner inner =
            this
                .serviceClient()
                .create(resourceGroupName, elasticSanName, volumeGroupName, volumeName, parameters, context);
        if (inner != null) {
            return new VolumeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Volume update(
        String resourceGroupName,
        String elasticSanName,
        String volumeGroupName,
        String volumeName,
        VolumeUpdate parameters) {
        VolumeInner inner =
            this.serviceClient().update(resourceGroupName, elasticSanName, volumeGroupName, volumeName, parameters);
        if (inner != null) {
            return new VolumeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Volume update(
        String resourceGroupName,
        String elasticSanName,
        String volumeGroupName,
        String volumeName,
        VolumeUpdate parameters,
        Context context) {
        VolumeInner inner =
            this
                .serviceClient()
                .update(resourceGroupName, elasticSanName, volumeGroupName, volumeName, parameters, context);
        if (inner != null) {
            return new VolumeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String elasticSanName, String volumeGroupName, String volumeName) {
        this.serviceClient().delete(resourceGroupName, elasticSanName, volumeGroupName, volumeName);
    }

    public void delete(
        String resourceGroupName, String elasticSanName, String volumeGroupName, String volumeName, Context context) {
        this.serviceClient().delete(resourceGroupName, elasticSanName, volumeGroupName, volumeName, context);
    }

    public Response<Volume> getWithResponse(
        String resourceGroupName, String elasticSanName, String volumeGroupName, String volumeName, Context context) {
        Response<VolumeInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, elasticSanName, volumeGroupName, volumeName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VolumeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Volume get(String resourceGroupName, String elasticSanName, String volumeGroupName, String volumeName) {
        VolumeInner inner = this.serviceClient().get(resourceGroupName, elasticSanName, volumeGroupName, volumeName);
        if (inner != null) {
            return new VolumeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Volume> listByVolumeGroup(
        String resourceGroupName, String elasticSanName, String volumeGroupName) {
        PagedIterable<VolumeInner> inner =
            this.serviceClient().listByVolumeGroup(resourceGroupName, elasticSanName, volumeGroupName);
        return Utils.mapPage(inner, inner1 -> new VolumeImpl(inner1, this.manager()));
    }

    public PagedIterable<Volume> listByVolumeGroup(
        String resourceGroupName, String elasticSanName, String volumeGroupName, Context context) {
        PagedIterable<VolumeInner> inner =
            this.serviceClient().listByVolumeGroup(resourceGroupName, elasticSanName, volumeGroupName, context);
        return Utils.mapPage(inner, inner1 -> new VolumeImpl(inner1, this.manager()));
    }

    private VolumesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.elasticsan.ElasticSanManager manager() {
        return this.serviceManager;
    }
}
