// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.elasticsan.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.elasticsan.fluent.models.VolumeGroupInner;
import com.azure.resourcemanager.elasticsan.models.Identity;
import com.azure.resourcemanager.elasticsan.models.VolumeGroup;
import com.azure.resourcemanager.elasticsan.models.VolumeGroupProperties;
import com.azure.resourcemanager.elasticsan.models.VolumeGroupUpdate;
import com.azure.resourcemanager.elasticsan.models.VolumeGroupUpdateProperties;

public final class VolumeGroupImpl implements VolumeGroup, VolumeGroup.Definition, VolumeGroup.Update {
    private VolumeGroupInner innerObject;

    private final com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public VolumeGroupProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VolumeGroupInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.elasticsan.ElasticSanManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String elasticSanName;

    private String volumeGroupName;

    private VolumeGroupUpdate updateParameters;

    public VolumeGroupImpl withExistingElasticSan(String resourceGroupName, String elasticSanName) {
        this.resourceGroupName = resourceGroupName;
        this.elasticSanName = elasticSanName;
        return this;
    }

    public VolumeGroup create() {
        this.innerObject = serviceManager.serviceClient().getVolumeGroups().create(resourceGroupName, elasticSanName,
            volumeGroupName, this.innerModel(), Context.NONE);
        return this;
    }

    public VolumeGroup create(Context context) {
        this.innerObject = serviceManager.serviceClient().getVolumeGroups().create(resourceGroupName, elasticSanName,
            volumeGroupName, this.innerModel(), context);
        return this;
    }

    VolumeGroupImpl(String name, com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager) {
        this.innerObject = new VolumeGroupInner();
        this.serviceManager = serviceManager;
        this.volumeGroupName = name;
    }

    public VolumeGroupImpl update() {
        this.updateParameters = new VolumeGroupUpdate();
        return this;
    }

    public VolumeGroup apply() {
        this.innerObject = serviceManager.serviceClient().getVolumeGroups().update(resourceGroupName, elasticSanName,
            volumeGroupName, updateParameters, Context.NONE);
        return this;
    }

    public VolumeGroup apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getVolumeGroups().update(resourceGroupName, elasticSanName,
            volumeGroupName, updateParameters, context);
        return this;
    }

    VolumeGroupImpl(VolumeGroupInner innerObject,
        com.azure.resourcemanager.elasticsan.ElasticSanManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.elasticSanName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "elasticSans");
        this.volumeGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "volumegroups");
    }

    public VolumeGroup refresh() {
        this.innerObject = serviceManager.serviceClient().getVolumeGroups()
            .getWithResponse(resourceGroupName, elasticSanName, volumeGroupName, Context.NONE).getValue();
        return this;
    }

    public VolumeGroup refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getVolumeGroups()
            .getWithResponse(resourceGroupName, elasticSanName, volumeGroupName, context).getValue();
        return this;
    }

    public VolumeGroupImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateParameters.withIdentity(identity);
            return this;
        }
    }

    public VolumeGroupImpl withProperties(VolumeGroupProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public VolumeGroupImpl withProperties(VolumeGroupUpdateProperties properties) {
        this.updateParameters.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
