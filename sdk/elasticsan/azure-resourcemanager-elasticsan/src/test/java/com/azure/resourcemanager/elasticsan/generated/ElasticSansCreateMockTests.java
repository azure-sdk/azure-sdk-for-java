// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.elasticsan.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.elasticsan.ElasticSanManager;
import com.azure.resourcemanager.elasticsan.models.AutoScalePolicyEnforcement;
import com.azure.resourcemanager.elasticsan.models.AutoScaleProperties;
import com.azure.resourcemanager.elasticsan.models.ElasticSan;
import com.azure.resourcemanager.elasticsan.models.PublicNetworkAccess;
import com.azure.resourcemanager.elasticsan.models.ScaleUpProperties;
import com.azure.resourcemanager.elasticsan.models.Sku;
import com.azure.resourcemanager.elasticsan.models.SkuName;
import com.azure.resourcemanager.elasticsan.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ElasticSansCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"sku\":{\"name\":\"Premium_ZRS\",\"tier\":\"Premium\"},\"availabilityZones\":[\"rlkdmtncvokotl\",\"xdy\"],\"provisioningState\":\"Succeeded\",\"baseSizeTiB\":156007764701268228,\"extendedCapacitySizeTiB\":1838173386679400772,\"totalVolumeSizeGiB\":2753799918909834418,\"volumeGroupCount\":6994873517454554947,\"totalIops\":5424935319442327175,\"totalMBps\":840541017134715456,\"totalSizeTiB\":723581934822095821,\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"SoftDeleting\",\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"groupIds\":[\"nvpamq\",\"x\",\"queziky\"]},\"id\":\"gxk\",\"name\":\"lla\",\"type\":\"melwuipiccjz\"}],\"publicNetworkAccess\":\"Enabled\",\"autoScaleProperties\":{\"scaleUpProperties\":{\"unusedSizeTiB\":1816332624383197418,\"increaseCapacityUnitByTiB\":8713915720909474504,\"capacityUnitScaleUpLimitTiB\":8913535749004515550,\"autoScalePolicyEnforcement\":\"Disabled\"}}},\"location\":\"xmueed\",\"tags\":{\"qtc\":\"dvstkw\",\"piohgwxrtfu\":\"ealmfmtdaaygdvwv\",\"k\":\"xepxgyqagvrvmn\"},\"id\":\"kghimdblxgwimfnj\",\"name\":\"fjxwmsz\",\"type\":\"kfoqreyfkzikfj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ElasticSanManager manager = ElasticSanManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ElasticSan response = manager.elasticSans()
            .define("tkuwhhmhykojo")
            .withRegion("rpzbchckqqzqi")
            .withExistingResourceGroup("bdbutauvf")
            .withSku(new Sku().withName(SkuName.PREMIUM_LRS).withTier(SkuTier.PREMIUM))
            .withBaseSizeTiB(6037040030407661019L)
            .withExtendedCapacitySizeTiB(859811408175724714L)
            .withTags(mapOf("rwyhqmibzyhwitsm", "ysuiizynkedya", "pcdpumnz", "pyy"))
            .withAvailabilityZones(Arrays.asList("lpichk", "ymkcdyhb", "kkpwdreqnovvq", "ovljxywsu"))
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withAutoScaleProperties(new AutoScaleProperties()
                .withScaleUpProperties(new ScaleUpProperties().withUnusedSizeTiB(9128276167784679496L)
                    .withIncreaseCapacityUnitByTiB(1042560535262747024L)
                    .withCapacityUnitScaleUpLimitTiB(8156843605393884009L)
                    .withAutoScalePolicyEnforcement(AutoScalePolicyEnforcement.NONE)))
            .create();

        Assertions.assertEquals("xmueed", response.location());
        Assertions.assertEquals("dvstkw", response.tags().get("qtc"));
        Assertions.assertEquals(SkuName.PREMIUM_ZRS, response.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals("rlkdmtncvokotl", response.availabilityZones().get(0));
        Assertions.assertEquals(156007764701268228L, response.baseSizeTiB());
        Assertions.assertEquals(1838173386679400772L, response.extendedCapacitySizeTiB());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals(1816332624383197418L,
            response.autoScaleProperties().scaleUpProperties().unusedSizeTiB());
        Assertions.assertEquals(8713915720909474504L,
            response.autoScaleProperties().scaleUpProperties().increaseCapacityUnitByTiB());
        Assertions.assertEquals(8913535749004515550L,
            response.autoScaleProperties().scaleUpProperties().capacityUnitScaleUpLimitTiB());
        Assertions.assertEquals(AutoScalePolicyEnforcement.DISABLED,
            response.autoScaleProperties().scaleUpProperties().autoScalePolicyEnforcement());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
