// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabaseReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupMultiDatabaseReplicaResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for SqlAvailabilityGroupDatabases Create. */
public final class SqlAvailabilityGroupDatabasesCreateSamples {
    /*
     * x-ms-original-file: specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2023-03-15-preview/examples/CreateOrUpdateArcSqlAvailabilityGroupDatabase.json
     */
    /**
     * Sample code: Create a Arc availability group database.
     *
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void createAArcAvailabilityGroupDatabase(
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager
            .sqlAvailabilityGroupDatabases()
            .define("testSqlDatabase")
            .withRegion("southeastasia")
            .withExistingSqlAvailabilityGroup("testrg", "testAG")
            .withProperties(
                new SqlAvailabilityGroupMultiDatabaseReplicaResourceProperties()
                    .withGroupDatabaseId("00000000-1111-2222-3333-444444444444")
                    .withValue(
                        Arrays
                            .asList(
                                new SqlAvailabilityGroupDatabaseReplicaResourceProperties()
                                    .withReplicaName("sqlServer1")
                                    .withIsLocal(true)
                                    .withIsPrimaryReplica(true)
                                    .withSynchronizationStateDesc("SYNCHRONIZED")
                                    .withIsCommitParticipant(true)
                                    .withSynchronizationHealthDesc("HEALTHY")
                                    .withDatabaseStateDesc("ONLINE")
                                    .withIsSuspended(false),
                                new SqlAvailabilityGroupDatabaseReplicaResourceProperties()
                                    .withReplicaName("sqlServer2")
                                    .withIsLocal(false)
                                    .withIsPrimaryReplica(false)
                                    .withSynchronizationStateDesc("SYNCHRONIZED")
                                    .withIsCommitParticipant(true)
                                    .withSynchronizationHealthDesc("HEALTHY")
                                    .withDatabaseStateDesc("ONLINE")
                                    .withIsSuspended(false))))
            .withTags(mapOf("mytag", "myval"))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
