// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/** Samples for SqlAvailabilityGroups Create. */
public final class SqlAvailabilityGroupsCreateSamples {
    /*
     * x-ms-original-file: specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2023-03-15-preview/examples/CreateOrUpdateSqlAvailabilityGroup.json
     */
    /**
     * Sample code: Updates a SQL Availability Group tags.
     *
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void updatesASQLAvailabilityGroupTags(
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager
            .sqlAvailabilityGroups()
            .define("testsqlAvailabilityGroup")
            .withRegion("northeurope")
            .withExistingResourceGroup("testrg")
            .withTags(mapOf("mytag", "myval"))
            .withProperties(
                new SqlAvailabilityGroupProperties()
                    .withAvailabilityGroupName("myAvailabilityGroup")
                    .withAvailabilityGroupId("00000000-1111-2222-3333-444444444444")
                    .withInstanceName("testInstance")
                    .withCollectionTimestamp(OffsetDateTime.parse("2022-05-05T16:26:33.883Z"))
                    .withVersion(0)
                    .withBasicFeatures(false)
                    .withDtcSupport(false)
                    .withDbFailover(true)
                    .withIsDistributed(false)
                    .withClusterTypeDesc("WSFC")
                    .withRequiredSynchronizedSecondariesCommit(0)
                    .withIsContained(false))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
