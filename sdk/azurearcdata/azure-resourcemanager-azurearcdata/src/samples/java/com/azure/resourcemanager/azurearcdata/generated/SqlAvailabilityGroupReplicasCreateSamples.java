// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupConfigure;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupState;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicaResourceProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/** Samples for SqlAvailabilityGroupReplicas Create. */
public final class SqlAvailabilityGroupReplicasCreateSamples {
    /*
     * x-ms-original-file: specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2023-03-15-preview/examples/CreateOrUpdateArcSqlAvailabilityGroupReplica.json
     */
    /**
     * Sample code: Create a Arc Sql Server availability group replica.
     *
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void createAArcSqlServerAvailabilityGroupReplica(
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager
            .sqlAvailabilityGroupReplicas()
            .define("testSqlServerInstance")
            .withRegion("southeastasia")
            .withExistingSqlAvailabilityGroup("testrg", "testAG")
            .withProperties(
                new SqlAvailabilityGroupReplicaResourceProperties()
                    .withReplicaId("00000000-1111-2222-3333-444444444444")
                    .withReplicaName("testSqlServerInstance")
                    .withConfigure(
                        new AvailabilityGroupConfigure()
                            .withEndpointUrl("TCP://mytest60-0.mytest60-svc:5022")
                            .withAvailabilityModeDesc("SYNCHRONOUS_COMMIT")
                            .withFailoverModeDesc("EXTERNAL")
                            .withSessionTimeout(10)
                            .withPrimaryRoleAllowConnectionsDesc("ALL")
                            .withSecondaryRoleAllowConnectionsDesc("ALL")
                            .withBackupPriority(50)
                            .withSeedingModeDesc("AUTOMATIC"))
                    .withState(
                        new AvailabilityGroupState()
                            .withAvailabilityGroupReplicaRole("SECONDARY")
                            .withOperationalStateDesc("ONLINE")
                            .withRecoveryHealthDesc("ONLINE_IN_PROGRESS")
                            .withSynchronizationHealthDesc("HEALTHY")
                            .withConnectedStateDesc("CONNECTED")
                            .withLastConnectErrorDescription("")
                            .withLastConnectErrorTimestamp(OffsetDateTime.parse("2022-05-05T16:26:33.883Z"))))
            .withTags(mapOf("mytag", "myval"))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
