// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.generated;

import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupConfigure;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupInfo;
import com.azure.resourcemanager.azurearcdata.models.AvailabilityGroupState;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabaseReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicaResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourceProperties;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesDatabases;
import com.azure.resourcemanager.azurearcdata.models.SqlServerAvailabilityGroupResourcePropertiesReplicas;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for SqlServerAvailabilityGroups Create. */
public final class SqlServerAvailabilityGroupsCreateSamples {
    /*
     * x-ms-original-file: specification/azurearcdata/resource-manager/Microsoft.AzureArcData/preview/2023-11-01-preview/examples/CreateOrUpdateArcSqlServerAvailabilityGroup.json
     */
    /**
     * Sample code: Create a Arc Sql Server availability group.
     *
     * @param manager Entry point to AzureArcDataManager.
     */
    public static void createAArcSqlServerAvailabilityGroup(
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager) {
        manager
            .sqlServerAvailabilityGroups()
            .define("testAG")
            .withRegion("southeastasia")
            .withExistingSqlServerInstance("testrg", "testSqlServer_INST1")
            .withProperties(
                new SqlServerAvailabilityGroupResourceProperties()
                    .withAvailabilityGroupId("00000000-1111-2222-3333-444444444444")
                    .withServerName("testSqlServer")
                    .withInstanceName("INST1")
                    .withCollectionTimestamp(OffsetDateTime.parse("2022-05-05T16:26:33.883Z"))
                    .withInfo(
                        new AvailabilityGroupInfo()
                            .withFailureConditionLevel(3)
                            .withHealthCheckTimeout(30000)
                            .withAutomatedBackupPreferenceDescription("SECONDARY")
                            .withVersion(0)
                            .withBasicFeatures(false)
                            .withDtcSupport(false)
                            .withDbFailover(true)
                            .withIsDistributed(false)
                            .withClusterTypeDescription("WSFC")
                            .withRequiredSynchronizedSecondariesToCommit(0)
                            .withIsContained(false)
                            .withPrimaryReplica("testSqlServer\\INST1")
                            .withPrimaryRecoveryHealthDescription("ONLINE")
                            .withSynchronizationHealthDescription("HEALTHY"))
                    .withReplicas(
                        new SqlServerAvailabilityGroupResourcePropertiesReplicas()
                            .withValue(
                                Arrays
                                    .asList(
                                        new SqlAvailabilityGroupReplicaResourceProperties()
                                            .withReplicaId("00000000-1111-2222-3333-444444444444")
                                            .withReplicaName("testSqlServer\\INST1")
                                            .withConfigure(
                                                new AvailabilityGroupConfigure()
                                                    .withEndpointUrl("TCP://mytest60-0.mytest60-svc:5022")
                                                    .withAvailabilityModeDescription("SYNCHRONOUS_COMMIT")
                                                    .withFailoverModeDescription("EXTERNAL")
                                                    .withSessionTimeout(10)
                                                    .withPrimaryRoleAllowConnectionsDescription("ALL")
                                                    .withSecondaryRoleAllowConnectionsDescription("ALL")
                                                    .withBackupPriority(50)
                                                    .withSeedingModeDescription("AUTOMATIC"))
                                            .withState(
                                                new AvailabilityGroupState()
                                                    .withAvailabilityGroupReplicaRole("SECONDARY")
                                                    .withOperationalStateDescription("ONLINE")
                                                    .withRecoveryHealthDescription("ONLINE_IN_PROGRESS")
                                                    .withSynchronizationHealthDescription("HEALTHY")
                                                    .withConnectedStateDescription("CONNECTED")
                                                    .withLastConnectErrorDescription("")
                                                    .withLastConnectErrorTimestamp(
                                                        OffsetDateTime.parse("2022-05-05T16:26:33.883Z"))))))
                    .withDatabases(
                        new SqlServerAvailabilityGroupResourcePropertiesDatabases()
                            .withValue(
                                Arrays
                                    .asList(
                                        new SqlAvailabilityGroupDatabaseReplicaResourceProperties()
                                            .withDatabaseName("db1")
                                            .withReplicaName("testSqlServer\\INST1")
                                            .withIsLocal(true)
                                            .withIsPrimaryReplica(true)
                                            .withSynchronizationStateDescription("SYNCHRONIZED")
                                            .withIsCommitParticipant(true)
                                            .withSynchronizationHealthDescription("HEALTHY")
                                            .withDatabaseStateDescription("ONLINE")
                                            .withIsSuspended(false),
                                        new SqlAvailabilityGroupDatabaseReplicaResourceProperties()
                                            .withDatabaseName("db2")
                                            .withReplicaName("testSqlServer\\INST1")
                                            .withIsLocal(true)
                                            .withIsPrimaryReplica(true)
                                            .withSynchronizationStateDescription("SYNCHRONIZED")
                                            .withIsCommitParticipant(true)
                                            .withSynchronizationHealthDescription("HEALTHY")
                                            .withDatabaseStateDescription("ONLINE")
                                            .withIsSuspended(false)))))
            .withTags(mapOf("mytag", "myval"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
