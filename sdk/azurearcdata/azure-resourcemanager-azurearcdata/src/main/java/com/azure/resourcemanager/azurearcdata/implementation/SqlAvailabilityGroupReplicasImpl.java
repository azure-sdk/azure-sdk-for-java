// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.SqlAvailabilityGroupReplicasClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlAvailabilityGroupReplicaResourceInner;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicaResource;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicas;

public final class SqlAvailabilityGroupReplicasImpl implements SqlAvailabilityGroupReplicas {
    private static final ClientLogger LOGGER = new ClientLogger(SqlAvailabilityGroupReplicasImpl.class);

    private final SqlAvailabilityGroupReplicasClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public SqlAvailabilityGroupReplicasImpl(
        SqlAvailabilityGroupReplicasClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, context);
    }

    public void delete(String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        this.serviceClient().delete(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName);
    }

    public Response<SqlAvailabilityGroupReplicaResource> getWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName, Context context) {
        Response<SqlAvailabilityGroupReplicaResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlAvailabilityGroupReplicaResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlAvailabilityGroupReplicaResource get(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        SqlAvailabilityGroupReplicaResourceInner inner =
            this.serviceClient().get(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName);
        if (inner != null) {
            return new SqlAvailabilityGroupReplicaResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SqlAvailabilityGroupReplicaResource> list(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        PagedIterable<SqlAvailabilityGroupReplicaResourceInner> inner =
            this.serviceClient().list(resourceGroupName, sqlAvailabilityGroupName);
        return Utils.mapPage(inner, inner1 -> new SqlAvailabilityGroupReplicaResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlAvailabilityGroupReplicaResource> list(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        PagedIterable<SqlAvailabilityGroupReplicaResourceInner> inner =
            this.serviceClient().list(resourceGroupName, sqlAvailabilityGroupName, context);
        return Utils.mapPage(inner, inner1 -> new SqlAvailabilityGroupReplicaResourceImpl(inner1, this.manager()));
    }

    public SqlAvailabilityGroupReplicaResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = Utils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, Context.NONE)
            .getValue();
    }

    public Response<SqlAvailabilityGroupReplicaResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = Utils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = Utils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlServerInstanceName = Utils.getValueFromIdByName(id, "sqlServerInstances");
        if (sqlServerInstanceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlServerInstances'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, context);
    }

    private SqlAvailabilityGroupReplicasClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public SqlAvailabilityGroupReplicaResourceImpl define(String name) {
        return new SqlAvailabilityGroupReplicaResourceImpl(name, this.manager());
    }
}
