// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azurearcdata.fluent.SqlAvailabilityGroupReplicasClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlAvailabilityGroupReplicaResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlAvailabilityGroupReplicaListResult;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupReplicaUpdate;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SqlAvailabilityGroupReplicasClient. */
public final class SqlAvailabilityGroupReplicasClientImpl implements SqlAvailabilityGroupReplicasClient {
    /** The proxy service used to perform REST calls. */
    private final SqlAvailabilityGroupReplicasService service;

    /** The service client containing this operation class. */
    private final AzureArcDataManagementClientImpl client;

    /**
     * Initializes an instance of SqlAvailabilityGroupReplicasClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlAvailabilityGroupReplicasClientImpl(AzureArcDataManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    SqlAvailabilityGroupReplicasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureArcDataManagementClientSqlAvailabilityGroupReplicas to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureArcDataManageme")
    public interface SqlAvailabilityGroupReplicasService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlAvailabilityGroupReplicaResourceInner sqlAvailabilityGroupReplicaResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances/{sqlServerInstanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlAvailabilityGroupReplicaUpdate sqlAvailabilityGroupReplicaUpdate,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/sqlServerInstances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlAvailabilityGroupReplicaListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlAvailabilityGroupReplicaListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates or replaces an Arc Sql Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaResource The request body for availability group replica resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaResourceInner sqlAvailabilityGroupReplicaResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupReplicaResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupReplicaResource is required and cannot be null."));
        } else {
            sqlAvailabilityGroupReplicaResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            sqlAvailabilityGroupReplicaResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or replaces an Arc Sql Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaResource The request body for availability group replica resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaResourceInner sqlAvailabilityGroupReplicaResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupReplicaResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupReplicaResource is required and cannot be null."));
        } else {
            sqlAvailabilityGroupReplicaResource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                sqlAvailabilityGroupReplicaResource,
                accept,
                context);
    }

    /**
     * Creates or replaces an Arc Sql Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaResource The request body for availability group replica resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlAvailabilityGroupReplicaResourceInner> createAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaResourceInner sqlAvailabilityGroupReplicaResource) {
        return createWithResponseAsync(
                resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, sqlAvailabilityGroupReplicaResource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or replaces an Arc Sql Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaResource The request body for availability group replica resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlAvailabilityGroupReplicaResourceInner> createWithResponse(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaResourceInner sqlAvailabilityGroupReplicaResource,
        Context context) {
        return createWithResponseAsync(
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupReplicaResource,
                context)
            .block();
    }

    /**
     * Creates or replaces an Arc Sql Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaResource The request body for availability group replica resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlAvailabilityGroupReplicaResourceInner create(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaResourceInner sqlAvailabilityGroupReplicaResource) {
        return createWithResponse(
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupReplicaResource,
                Context.NONE)
            .getValue();
    }

    /**
     * Deletes an Arc Sql availability group replica resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an Arc Sql availability group replica resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes an Arc Sql availability group replica resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        return deleteWithResponseAsync(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes an Arc Sql availability group replica resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, context)
            .block();
    }

    /**
     * Deletes an Arc Sql availability group replica resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        deleteWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, Context.NONE);
    }

    /**
     * Retrieves an Arc Sql availability group replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> getWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves an Arc Sql availability group replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> getWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Retrieves an Arc Sql availability group replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlAvailabilityGroupReplicaResourceInner> getAsync(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        return getWithResponseAsync(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an Arc Sql availability group replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlAvailabilityGroupReplicaResourceInner> getWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName, Context context) {
        return getWithResponseAsync(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, context)
            .block();
    }

    /**
     * Retrieves an Arc Sql availability group replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlAvailabilityGroupReplicaResourceInner get(
        String resourceGroupName, String sqlServerInstanceName, String sqlAvailabilityGroupName) {
        return getWithResponse(resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, Context.NONE)
            .getValue();
    }

    /**
     * Updates an existing Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaUpdate The requested availability group replica resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaUpdate sqlAvailabilityGroupReplicaUpdate) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupReplicaUpdate == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupReplicaUpdate is required and cannot be null."));
        } else {
            sqlAvailabilityGroupReplicaUpdate.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            sqlAvailabilityGroupReplicaUpdate,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaUpdate The requested availability group replica resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupReplicaResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaUpdate sqlAvailabilityGroupReplicaUpdate,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupReplicaUpdate == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupReplicaUpdate is required and cannot be null."));
        } else {
            sqlAvailabilityGroupReplicaUpdate.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                sqlAvailabilityGroupReplicaUpdate,
                accept,
                context);
    }

    /**
     * Updates an existing Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaUpdate The requested availability group replica resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlAvailabilityGroupReplicaResourceInner> updateAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaUpdate sqlAvailabilityGroupReplicaUpdate) {
        return updateWithResponseAsync(
                resourceGroupName, sqlServerInstanceName, sqlAvailabilityGroupName, sqlAvailabilityGroupReplicaUpdate)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates an existing Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaUpdate The requested availability group replica resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlAvailabilityGroupReplicaResourceInner> updateWithResponse(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaUpdate sqlAvailabilityGroupReplicaUpdate,
        Context context) {
        return updateWithResponseAsync(
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupReplicaUpdate,
                context)
            .block();
    }

    /**
     * Updates an existing Availability Group Replica.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupReplicaUpdate The requested availability group replica resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlAvailabilityGroupReplicaResourceInner update(
        String resourceGroupName,
        String sqlServerInstanceName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupReplicaUpdate sqlAvailabilityGroupReplicaUpdate) {
        return updateWithResponse(
                resourceGroupName,
                sqlServerInstanceName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupReplicaUpdate,
                Context.NONE)
            .getValue();
    }

    /**
     * List the Availability Group Replica associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupReplicaResourceInner>> listSinglePageAsync(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<SqlAvailabilityGroupReplicaResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the Availability Group Replica associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupReplicaResourceInner>> listSinglePageAsync(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List the Availability Group Replica associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlAvailabilityGroupReplicaResourceInner> listAsync(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sqlAvailabilityGroupName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the Availability Group Replica associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlAvailabilityGroupReplicaResourceInner> listAsync(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sqlAvailabilityGroupName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the Availability Group Replica associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlAvailabilityGroupReplicaResourceInner> list(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        return new PagedIterable<>(listAsync(resourceGroupName, sqlAvailabilityGroupName));
    }

    /**
     * List the Availability Group Replica associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlAvailabilityGroupReplicaResourceInner> list(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, sqlAvailabilityGroupName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupReplicaResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SqlAvailabilityGroupReplicaResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Replica along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupReplicaResourceInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
