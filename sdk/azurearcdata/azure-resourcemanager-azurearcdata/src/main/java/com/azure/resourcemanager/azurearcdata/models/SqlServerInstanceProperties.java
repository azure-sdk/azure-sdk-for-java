// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Properties of SqlServerInstance. */
@Fluent
public final class SqlServerInstanceProperties {
    /*
     * SQL Server version.
     */
    @JsonProperty(value = "version")
    private SqlVersion version;

    /*
     * SQL Server edition.
     */
    @JsonProperty(value = "edition")
    private EditionType edition;

    /*
     * ARM Resource id of the container resource (Azure Arc for Servers).
     */
    @JsonProperty(value = "containerResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String containerResourceId;

    /*
     * The time when the resource was created.
     */
    @JsonProperty(value = "createTime", access = JsonProperty.Access.WRITE_ONLY)
    private String createTime;

    /*
     * The number of logical processors used by the SQL Server instance.
     */
    @JsonProperty(value = "vCore", access = JsonProperty.Access.WRITE_ONLY)
    private String vCore;

    /*
     * The number of total cores of the Operating System Environment (OSE) hosting the SQL Server instance.
     */
    @JsonProperty(value = "cores")
    private String cores;

    /*
     * The cloud connectivity status.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectionStatus status;

    /*
     * SQL Server update level.
     */
    @JsonProperty(value = "patchLevel", access = JsonProperty.Access.WRITE_ONLY)
    private String patchLevel;

    /*
     * SQL Server collation.
     */
    @JsonProperty(value = "collation", access = JsonProperty.Access.WRITE_ONLY)
    private String collation;

    /*
     * SQL Server current version.
     */
    @JsonProperty(value = "currentVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String currentVersion;

    /*
     * SQL Server instance name.
     */
    @JsonProperty(value = "instanceName")
    private String instanceName;

    /*
     * Dynamic TCP ports used by SQL Server.
     */
    @JsonProperty(value = "tcpDynamicPorts", access = JsonProperty.Access.WRITE_ONLY)
    private String tcpDynamicPorts;

    /*
     * Static TCP ports used by SQL Server.
     */
    @JsonProperty(value = "tcpStaticPorts", access = JsonProperty.Access.WRITE_ONLY)
    private String tcpStaticPorts;

    /*
     * SQL Server product ID.
     */
    @JsonProperty(value = "productId", access = JsonProperty.Access.WRITE_ONLY)
    private String productId;

    /*
     * SQL Server license type.
     */
    @JsonProperty(value = "licenseType", access = JsonProperty.Access.WRITE_ONLY)
    private ArcSqlServerLicenseType licenseType;

    /*
     * Timestamp of last Azure Defender status update.
     */
    @JsonProperty(value = "azureDefenderStatusLastUpdated", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime azureDefenderStatusLastUpdated;

    /*
     * Status of Azure Defender.
     */
    @JsonProperty(value = "azureDefenderStatus", access = JsonProperty.Access.WRITE_ONLY)
    private DefenderStatus azureDefenderStatus;

    /*
     * The provisioning state of the Arc-enabled SQL Server resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The time when last successful inventory upload was performed.
     */
    @JsonProperty(value = "lastInventoryUploadTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastInventoryUploadTime;

    /*
     * The time when last successful usage upload was performed.
     */
    @JsonProperty(value = "lastUsageUploadTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUsageUploadTime;

    /*
     * Type of host for Azure Arc SQL Server
     */
    @JsonProperty(value = "hostType")
    private HostType hostType;

    /*
     * The role of the SQL Server, based on availability.
     */
    @JsonProperty(value = "alwaysOnRole", access = JsonProperty.Access.WRITE_ONLY)
    private AlwaysOnRole alwaysOnRole;

    /*
     * Failover Cluster Instance properties.
     */
    @JsonProperty(value = "failoverCluster")
    private FailoverCluster failoverCluster;

    /*
     * The backup profile for the SQL server.
     */
    @JsonProperty(value = "backupPolicy")
    private BackupPolicy backupPolicy;

    /*
     * Upgrade Action for this resource is locked until it expires. The Expiration time indicated by this value. It is
     * not locked when it is empty.
     */
    @JsonProperty(value = "upgradeLockedUntil")
    private OffsetDateTime upgradeLockedUntil;

    /*
     * The monitoring configuration.
     */
    @JsonProperty(value = "monitoring")
    private Monitoring monitoring;

    /** Creates an instance of SqlServerInstanceProperties class. */
    public SqlServerInstanceProperties() {
    }

    /**
     * Get the version property: SQL Server version.
     *
     * @return the version value.
     */
    public SqlVersion version() {
        return this.version;
    }

    /**
     * Set the version property: SQL Server version.
     *
     * @param version the version value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withVersion(SqlVersion version) {
        this.version = version;
        return this;
    }

    /**
     * Get the edition property: SQL Server edition.
     *
     * @return the edition value.
     */
    public EditionType edition() {
        return this.edition;
    }

    /**
     * Set the edition property: SQL Server edition.
     *
     * @param edition the edition value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withEdition(EditionType edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the containerResourceId property: ARM Resource id of the container resource (Azure Arc for Servers).
     *
     * @return the containerResourceId value.
     */
    public String containerResourceId() {
        return this.containerResourceId;
    }

    /**
     * Get the createTime property: The time when the resource was created.
     *
     * @return the createTime value.
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * Get the vCore property: The number of logical processors used by the SQL Server instance.
     *
     * @return the vCore value.
     */
    public String vCore() {
        return this.vCore;
    }

    /**
     * Get the cores property: The number of total cores of the Operating System Environment (OSE) hosting the SQL
     * Server instance.
     *
     * @return the cores value.
     */
    public String cores() {
        return this.cores;
    }

    /**
     * Set the cores property: The number of total cores of the Operating System Environment (OSE) hosting the SQL
     * Server instance.
     *
     * @param cores the cores value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withCores(String cores) {
        this.cores = cores;
        return this;
    }

    /**
     * Get the status property: The cloud connectivity status.
     *
     * @return the status value.
     */
    public ConnectionStatus status() {
        return this.status;
    }

    /**
     * Get the patchLevel property: SQL Server update level.
     *
     * @return the patchLevel value.
     */
    public String patchLevel() {
        return this.patchLevel;
    }

    /**
     * Get the collation property: SQL Server collation.
     *
     * @return the collation value.
     */
    public String collation() {
        return this.collation;
    }

    /**
     * Get the currentVersion property: SQL Server current version.
     *
     * @return the currentVersion value.
     */
    public String currentVersion() {
        return this.currentVersion;
    }

    /**
     * Get the instanceName property: SQL Server instance name.
     *
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: SQL Server instance name.
     *
     * @param instanceName the instanceName value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the tcpDynamicPorts property: Dynamic TCP ports used by SQL Server.
     *
     * @return the tcpDynamicPorts value.
     */
    public String tcpDynamicPorts() {
        return this.tcpDynamicPorts;
    }

    /**
     * Get the tcpStaticPorts property: Static TCP ports used by SQL Server.
     *
     * @return the tcpStaticPorts value.
     */
    public String tcpStaticPorts() {
        return this.tcpStaticPorts;
    }

    /**
     * Get the productId property: SQL Server product ID.
     *
     * @return the productId value.
     */
    public String productId() {
        return this.productId;
    }

    /**
     * Get the licenseType property: SQL Server license type.
     *
     * @return the licenseType value.
     */
    public ArcSqlServerLicenseType licenseType() {
        return this.licenseType;
    }

    /**
     * Get the azureDefenderStatusLastUpdated property: Timestamp of last Azure Defender status update.
     *
     * @return the azureDefenderStatusLastUpdated value.
     */
    public OffsetDateTime azureDefenderStatusLastUpdated() {
        return this.azureDefenderStatusLastUpdated;
    }

    /**
     * Get the azureDefenderStatus property: Status of Azure Defender.
     *
     * @return the azureDefenderStatus value.
     */
    public DefenderStatus azureDefenderStatus() {
        return this.azureDefenderStatus;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Arc-enabled SQL Server resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lastInventoryUploadTime property: The time when last successful inventory upload was performed.
     *
     * @return the lastInventoryUploadTime value.
     */
    public OffsetDateTime lastInventoryUploadTime() {
        return this.lastInventoryUploadTime;
    }

    /**
     * Get the lastUsageUploadTime property: The time when last successful usage upload was performed.
     *
     * @return the lastUsageUploadTime value.
     */
    public OffsetDateTime lastUsageUploadTime() {
        return this.lastUsageUploadTime;
    }

    /**
     * Get the hostType property: Type of host for Azure Arc SQL Server.
     *
     * @return the hostType value.
     */
    public HostType hostType() {
        return this.hostType;
    }

    /**
     * Set the hostType property: Type of host for Azure Arc SQL Server.
     *
     * @param hostType the hostType value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withHostType(HostType hostType) {
        this.hostType = hostType;
        return this;
    }

    /**
     * Get the alwaysOnRole property: The role of the SQL Server, based on availability.
     *
     * @return the alwaysOnRole value.
     */
    public AlwaysOnRole alwaysOnRole() {
        return this.alwaysOnRole;
    }

    /**
     * Get the failoverCluster property: Failover Cluster Instance properties.
     *
     * @return the failoverCluster value.
     */
    public FailoverCluster failoverCluster() {
        return this.failoverCluster;
    }

    /**
     * Set the failoverCluster property: Failover Cluster Instance properties.
     *
     * @param failoverCluster the failoverCluster value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withFailoverCluster(FailoverCluster failoverCluster) {
        this.failoverCluster = failoverCluster;
        return this;
    }

    /**
     * Get the backupPolicy property: The backup profile for the SQL server.
     *
     * @return the backupPolicy value.
     */
    public BackupPolicy backupPolicy() {
        return this.backupPolicy;
    }

    /**
     * Set the backupPolicy property: The backup profile for the SQL server.
     *
     * @param backupPolicy the backupPolicy value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withBackupPolicy(BackupPolicy backupPolicy) {
        this.backupPolicy = backupPolicy;
        return this;
    }

    /**
     * Get the upgradeLockedUntil property: Upgrade Action for this resource is locked until it expires. The Expiration
     * time indicated by this value. It is not locked when it is empty.
     *
     * @return the upgradeLockedUntil value.
     */
    public OffsetDateTime upgradeLockedUntil() {
        return this.upgradeLockedUntil;
    }

    /**
     * Set the upgradeLockedUntil property: Upgrade Action for this resource is locked until it expires. The Expiration
     * time indicated by this value. It is not locked when it is empty.
     *
     * @param upgradeLockedUntil the upgradeLockedUntil value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withUpgradeLockedUntil(OffsetDateTime upgradeLockedUntil) {
        this.upgradeLockedUntil = upgradeLockedUntil;
        return this;
    }

    /**
     * Get the monitoring property: The monitoring configuration.
     *
     * @return the monitoring value.
     */
    public Monitoring monitoring() {
        return this.monitoring;
    }

    /**
     * Set the monitoring property: The monitoring configuration.
     *
     * @param monitoring the monitoring value to set.
     * @return the SqlServerInstanceProperties object itself.
     */
    public SqlServerInstanceProperties withMonitoring(Monitoring monitoring) {
        this.monitoring = monitoring;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (failoverCluster() != null) {
            failoverCluster().validate();
        }
        if (backupPolicy() != null) {
            backupPolicy().validate();
        }
        if (monitoring() != null) {
            monitoring().validate();
        }
    }
}
