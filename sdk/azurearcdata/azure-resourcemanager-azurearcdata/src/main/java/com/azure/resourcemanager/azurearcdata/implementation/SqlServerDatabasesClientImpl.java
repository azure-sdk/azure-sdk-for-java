// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azurearcdata.fluent.SqlServerDatabasesClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlServerDatabaseResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlServerDatabaseListResult;
import com.azure.resourcemanager.azurearcdata.models.SqlServerDatabaseUpdate;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SqlServerDatabasesClient. */
public final class SqlServerDatabasesClientImpl implements SqlServerDatabasesClient {
    /** The proxy service used to perform REST calls. */
    private final SqlServerDatabasesService service;

    /** The service client containing this operation class. */
    private final AzureArcDataManagementClientImpl client;

    /**
     * Initializes an instance of SqlServerDatabasesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlServerDatabasesClientImpl(AzureArcDataManagementClientImpl client) {
        this.service =
            RestProxy.create(SqlServerDatabasesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureArcDataManagementClientSqlServerDatabases to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureArcDataManageme")
    public interface SqlServerDatabasesService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerDatabaseResourceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("databaseName") String databaseName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerDatabaseResourceInner sqlServerDatabaseResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("databaseName") String databaseName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerDatabaseResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("databaseName") String databaseName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlServerDatabaseResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @PathParam("databaseName") String databaseName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlServerDatabaseUpdate sqlServerDatabaseUpdate,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlServerInstances/{sqlServerInstanceName}/databases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlServerDatabaseListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlServerInstanceName") String sqlServerInstanceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlServerDatabaseListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates or replaces an Arc Sql Server Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseResource The request body for database resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerDatabaseResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseResourceInner sqlServerDatabaseResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (sqlServerDatabaseResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerDatabaseResource is required and cannot be null."));
        } else {
            sqlServerDatabaseResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            databaseName,
                            this.client.getApiVersion(),
                            sqlServerDatabaseResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or replaces an Arc Sql Server Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseResource The request body for database resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerDatabaseResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseResourceInner sqlServerDatabaseResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (sqlServerDatabaseResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlServerDatabaseResource is required and cannot be null."));
        } else {
            sqlServerDatabaseResource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                databaseName,
                this.client.getApiVersion(),
                sqlServerDatabaseResource,
                accept,
                context);
    }

    /**
     * Creates or replaces an Arc Sql Server Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseResource The request body for database resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerDatabaseResourceInner> createAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseResourceInner sqlServerDatabaseResource) {
        return createWithResponseAsync(
                resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseResource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or replaces an Arc Sql Server Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseResource The request body for database resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerDatabaseResourceInner> createWithResponse(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseResourceInner sqlServerDatabaseResource,
        Context context) {
        return createWithResponseAsync(
                resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseResource, context)
            .block();
    }

    /**
     * Creates or replaces an Arc Sql Server Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseResource The request body for database resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerDatabaseResourceInner create(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseResourceInner sqlServerDatabaseResource) {
        return createWithResponse(
                resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseResource, Context.NONE)
            .getValue();
    }

    /**
     * Deletes an Arc Sql Server database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            databaseName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an Arc Sql Server database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String databaseName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                databaseName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes an Arc Sql Server database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        return deleteWithResponseAsync(resourceGroupName, sqlServerInstanceName, databaseName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes an Arc Sql Server database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String databaseName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, sqlServerInstanceName, databaseName, context).block();
    }

    /**
     * Deletes an Arc Sql Server database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        deleteWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, Context.NONE);
    }

    /**
     * Retrieves an Arc Sql Server database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerDatabaseResourceInner>> getWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            databaseName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves an Arc Sql Server database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerDatabaseResourceInner>> getWithResponseAsync(
        String resourceGroupName, String sqlServerInstanceName, String databaseName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                databaseName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Retrieves an Arc Sql Server database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerDatabaseResourceInner> getAsync(
        String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        return getWithResponseAsync(resourceGroupName, sqlServerInstanceName, databaseName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an Arc Sql Server database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerDatabaseResourceInner> getWithResponse(
        String resourceGroupName, String sqlServerInstanceName, String databaseName, Context context) {
        return getWithResponseAsync(resourceGroupName, sqlServerInstanceName, databaseName, context).block();
    }

    /**
     * Retrieves an Arc Sql Server database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerDatabaseResourceInner get(
        String resourceGroupName, String sqlServerInstanceName, String databaseName) {
        return getWithResponse(resourceGroupName, sqlServerInstanceName, databaseName, Context.NONE).getValue();
    }

    /**
     * Updates an existing database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseUpdate The requested database resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerDatabaseResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseUpdate sqlServerDatabaseUpdate) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (sqlServerDatabaseUpdate == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlServerDatabaseUpdate is required and cannot be null."));
        } else {
            sqlServerDatabaseUpdate.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            databaseName,
                            this.client.getApiVersion(),
                            sqlServerDatabaseUpdate,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseUpdate The requested database resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlServerDatabaseResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseUpdate sqlServerDatabaseUpdate,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        if (databaseName == null) {
            return Mono.error(new IllegalArgumentException("Parameter databaseName is required and cannot be null."));
        }
        if (sqlServerDatabaseUpdate == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlServerDatabaseUpdate is required and cannot be null."));
        } else {
            sqlServerDatabaseUpdate.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                databaseName,
                this.client.getApiVersion(),
                sqlServerDatabaseUpdate,
                accept,
                context);
    }

    /**
     * Updates an existing database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseUpdate The requested database resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlServerDatabaseResourceInner> updateAsync(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseUpdate sqlServerDatabaseUpdate) {
        return updateWithResponseAsync(resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseUpdate)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates an existing database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseUpdate The requested database resource state.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlServerDatabaseResourceInner> updateWithResponse(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseUpdate sqlServerDatabaseUpdate,
        Context context) {
        return updateWithResponseAsync(
                resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseUpdate, context)
            .block();
    }

    /**
     * Updates an existing database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param databaseName Name of the database.
     * @param sqlServerDatabaseUpdate The requested database resource state.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlServerDatabaseResourceInner update(
        String resourceGroupName,
        String sqlServerInstanceName,
        String databaseName,
        SqlServerDatabaseUpdate sqlServerDatabaseUpdate) {
        return updateWithResponse(
                resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseUpdate, Context.NONE)
            .getValue();
    }

    /**
     * List the databases associated with the given Arc Sql Server.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerDatabaseResourceInner>> listSinglePageAsync(
        String resourceGroupName, String sqlServerInstanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlServerInstanceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<SqlServerDatabaseResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the databases associated with the given Arc Sql Server.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerDatabaseResourceInner>> listSinglePageAsync(
        String resourceGroupName, String sqlServerInstanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlServerInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlServerInstanceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlServerInstanceName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List the databases associated with the given Arc Sql Server.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlServerDatabaseResourceInner> listAsync(
        String resourceGroupName, String sqlServerInstanceName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sqlServerInstanceName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the databases associated with the given Arc Sql Server.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlServerDatabaseResourceInner> listAsync(
        String resourceGroupName, String sqlServerInstanceName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sqlServerInstanceName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the databases associated with the given Arc Sql Server.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlServerDatabaseResourceInner> list(String resourceGroupName, String sqlServerInstanceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, sqlServerInstanceName));
    }

    /**
     * List the databases associated with the given Arc Sql Server.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlServerInstanceName Name of SQL Server Instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlServerDatabaseResourceInner> list(
        String resourceGroupName, String sqlServerInstanceName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, sqlServerInstanceName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerDatabaseResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SqlServerDatabaseResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Server database along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlServerDatabaseResourceInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
