// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The kubernetes active directory information. */
@Fluent
public final class K8SActiveDirectory {
    /*
     * The connector property.
     */
    @JsonProperty(value = "connector")
    private K8SActiveDirectoryConnector connector;

    /*
     * Account name for AAD
     */
    @JsonProperty(value = "accountName")
    private String accountName;

    /*
     * Keytab secret used to authenticate with Active Directory.
     */
    @JsonProperty(value = "keytabSecret")
    private String keytabSecret;

    /*
     * An array of encryption types
     */
    @JsonProperty(value = "encryptionTypes")
    private List<String> encryptionTypes;

    /** Creates an instance of K8SActiveDirectory class. */
    public K8SActiveDirectory() {
    }

    /**
     * Get the connector property: The connector property.
     *
     * @return the connector value.
     */
    public K8SActiveDirectoryConnector connector() {
        return this.connector;
    }

    /**
     * Set the connector property: The connector property.
     *
     * @param connector the connector value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withConnector(K8SActiveDirectoryConnector connector) {
        this.connector = connector;
        return this;
    }

    /**
     * Get the accountName property: Account name for AAD.
     *
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: Account name for AAD.
     *
     * @param accountName the accountName value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Get the keytabSecret property: Keytab secret used to authenticate with Active Directory.
     *
     * @return the keytabSecret value.
     */
    public String keytabSecret() {
        return this.keytabSecret;
    }

    /**
     * Set the keytabSecret property: Keytab secret used to authenticate with Active Directory.
     *
     * @param keytabSecret the keytabSecret value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withKeytabSecret(String keytabSecret) {
        this.keytabSecret = keytabSecret;
        return this;
    }

    /**
     * Get the encryptionTypes property: An array of encryption types.
     *
     * @return the encryptionTypes value.
     */
    public List<String> encryptionTypes() {
        return this.encryptionTypes;
    }

    /**
     * Set the encryptionTypes property: An array of encryption types.
     *
     * @param encryptionTypes the encryptionTypes value to set.
     * @return the K8SActiveDirectory object itself.
     */
    public K8SActiveDirectory withEncryptionTypes(List<String> encryptionTypes) {
        this.encryptionTypes = encryptionTypes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connector() != null) {
            connector().validate();
        }
    }
}
