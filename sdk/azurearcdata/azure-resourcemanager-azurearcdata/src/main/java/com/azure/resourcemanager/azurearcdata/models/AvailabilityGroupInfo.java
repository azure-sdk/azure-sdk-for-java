// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The specifications of the availability group state.
 */
@Fluent
public final class AvailabilityGroupInfo {
    /*
     * User-defined failure condition level under which an automatic failover must be triggered.
     */
    @JsonProperty(value = "failureConditionLevel")
    private Integer failureConditionLevel;

    /*
     * Wait time (in milliseconds) for the sp_server_diagnostics system stored procedure to return server-health
     * information, before the server instance is assumed to be slow or not responding.
     */
    @JsonProperty(value = "healthCheckTimeout")
    private Integer healthCheckTimeout;

    /*
     * Preferred location for performing backups on the availability databases in this availability group.
     */
    @JsonProperty(value = "automatedBackupPreferenceDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String automatedBackupPreferenceDescription;

    /*
     * SQL Server availability group current version.
     */
    @JsonProperty(value = "version", access = JsonProperty.Access.WRITE_ONLY)
    private Integer version;

    /*
     * Specifies whether this is a basic availability group.
     */
    @JsonProperty(value = "basicFeatures")
    private Boolean basicFeatures;

    /*
     * Specifies whether DTC support has been enabled for this availability group.
     */
    @JsonProperty(value = "dtcSupport")
    private Boolean dtcSupport;

    /*
     * Specifies whether the availability group supports failover for database health conditions.
     */
    @JsonProperty(value = "dbFailover")
    private Boolean dbFailover;

    /*
     * Specifies whether this is a distributed availability group.
     */
    @JsonProperty(value = "isDistributed")
    private Boolean isDistributed;

    /*
     * SQL Server availability group cluster type description
     */
    @JsonProperty(value = "clusterTypeDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String clusterTypeDescription;

    /*
     * The number of secondary replicas that must be in a synchronized state for a commit to complete.
     */
    @JsonProperty(value = "requiredSynchronizedSecondariesToCommit")
    private Integer requiredSynchronizedSecondariesToCommit;

    /*
     * SQL Server availability group contained system databases.
     */
    @JsonProperty(value = "isContained")
    private Boolean isContained;

    /*
     * Name of the server instance that is hosting the current primary replica.
     */
    @JsonProperty(value = "primaryReplica", access = JsonProperty.Access.WRITE_ONLY)
    private String primaryReplica;

    /*
     * Indicates the recovery health of the primary replica.
     */
    @JsonProperty(value = "primaryRecoveryHealthDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String primaryRecoveryHealthDescription;

    /*
     * Indicates the recovery health of a secondary replica.
     */
    @JsonProperty(value = "secondaryRecoveryHealthDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String secondaryRecoveryHealthDescription;

    /*
     * Reflects a roll-up of the synchronization health of all availability replicas in the availability group.
     */
    @JsonProperty(value = "synchronizationHealthDescription", access = JsonProperty.Access.WRITE_ONLY)
    private String synchronizationHealthDescription;

    /*
     * The replicationPartnerType property.
     */
    @JsonProperty(value = "replicationPartnerType", access = JsonProperty.Access.WRITE_ONLY)
    private ReplicationPartnerType replicationPartnerType;

    /**
     * Creates an instance of AvailabilityGroupInfo class.
     */
    public AvailabilityGroupInfo() {
    }

    /**
     * Get the failureConditionLevel property: User-defined failure condition level under which an automatic failover
     * must be triggered.
     * 
     * @return the failureConditionLevel value.
     */
    public Integer failureConditionLevel() {
        return this.failureConditionLevel;
    }

    /**
     * Set the failureConditionLevel property: User-defined failure condition level under which an automatic failover
     * must be triggered.
     * 
     * @param failureConditionLevel the failureConditionLevel value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withFailureConditionLevel(Integer failureConditionLevel) {
        this.failureConditionLevel = failureConditionLevel;
        return this;
    }

    /**
     * Get the healthCheckTimeout property: Wait time (in milliseconds) for the sp_server_diagnostics system stored
     * procedure to return server-health information, before the server instance is assumed to be slow or not
     * responding.
     * 
     * @return the healthCheckTimeout value.
     */
    public Integer healthCheckTimeout() {
        return this.healthCheckTimeout;
    }

    /**
     * Set the healthCheckTimeout property: Wait time (in milliseconds) for the sp_server_diagnostics system stored
     * procedure to return server-health information, before the server instance is assumed to be slow or not
     * responding.
     * 
     * @param healthCheckTimeout the healthCheckTimeout value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withHealthCheckTimeout(Integer healthCheckTimeout) {
        this.healthCheckTimeout = healthCheckTimeout;
        return this;
    }

    /**
     * Get the automatedBackupPreferenceDescription property: Preferred location for performing backups on the
     * availability databases in this availability group.
     * 
     * @return the automatedBackupPreferenceDescription value.
     */
    public String automatedBackupPreferenceDescription() {
        return this.automatedBackupPreferenceDescription;
    }

    /**
     * Get the version property: SQL Server availability group current version.
     * 
     * @return the version value.
     */
    public Integer version() {
        return this.version;
    }

    /**
     * Get the basicFeatures property: Specifies whether this is a basic availability group.
     * 
     * @return the basicFeatures value.
     */
    public Boolean basicFeatures() {
        return this.basicFeatures;
    }

    /**
     * Set the basicFeatures property: Specifies whether this is a basic availability group.
     * 
     * @param basicFeatures the basicFeatures value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withBasicFeatures(Boolean basicFeatures) {
        this.basicFeatures = basicFeatures;
        return this;
    }

    /**
     * Get the dtcSupport property: Specifies whether DTC support has been enabled for this availability group.
     * 
     * @return the dtcSupport value.
     */
    public Boolean dtcSupport() {
        return this.dtcSupport;
    }

    /**
     * Set the dtcSupport property: Specifies whether DTC support has been enabled for this availability group.
     * 
     * @param dtcSupport the dtcSupport value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withDtcSupport(Boolean dtcSupport) {
        this.dtcSupport = dtcSupport;
        return this;
    }

    /**
     * Get the dbFailover property: Specifies whether the availability group supports failover for database health
     * conditions.
     * 
     * @return the dbFailover value.
     */
    public Boolean dbFailover() {
        return this.dbFailover;
    }

    /**
     * Set the dbFailover property: Specifies whether the availability group supports failover for database health
     * conditions.
     * 
     * @param dbFailover the dbFailover value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withDbFailover(Boolean dbFailover) {
        this.dbFailover = dbFailover;
        return this;
    }

    /**
     * Get the isDistributed property: Specifies whether this is a distributed availability group.
     * 
     * @return the isDistributed value.
     */
    public Boolean isDistributed() {
        return this.isDistributed;
    }

    /**
     * Set the isDistributed property: Specifies whether this is a distributed availability group.
     * 
     * @param isDistributed the isDistributed value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withIsDistributed(Boolean isDistributed) {
        this.isDistributed = isDistributed;
        return this;
    }

    /**
     * Get the clusterTypeDescription property: SQL Server availability group cluster type description.
     * 
     * @return the clusterTypeDescription value.
     */
    public String clusterTypeDescription() {
        return this.clusterTypeDescription;
    }

    /**
     * Get the requiredSynchronizedSecondariesToCommit property: The number of secondary replicas that must be in a
     * synchronized state for a commit to complete.
     * 
     * @return the requiredSynchronizedSecondariesToCommit value.
     */
    public Integer requiredSynchronizedSecondariesToCommit() {
        return this.requiredSynchronizedSecondariesToCommit;
    }

    /**
     * Set the requiredSynchronizedSecondariesToCommit property: The number of secondary replicas that must be in a
     * synchronized state for a commit to complete.
     * 
     * @param requiredSynchronizedSecondariesToCommit the requiredSynchronizedSecondariesToCommit value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo
        withRequiredSynchronizedSecondariesToCommit(Integer requiredSynchronizedSecondariesToCommit) {
        this.requiredSynchronizedSecondariesToCommit = requiredSynchronizedSecondariesToCommit;
        return this;
    }

    /**
     * Get the isContained property: SQL Server availability group contained system databases.
     * 
     * @return the isContained value.
     */
    public Boolean isContained() {
        return this.isContained;
    }

    /**
     * Set the isContained property: SQL Server availability group contained system databases.
     * 
     * @param isContained the isContained value to set.
     * @return the AvailabilityGroupInfo object itself.
     */
    public AvailabilityGroupInfo withIsContained(Boolean isContained) {
        this.isContained = isContained;
        return this;
    }

    /**
     * Get the primaryReplica property: Name of the server instance that is hosting the current primary replica.
     * 
     * @return the primaryReplica value.
     */
    public String primaryReplica() {
        return this.primaryReplica;
    }

    /**
     * Get the primaryRecoveryHealthDescription property: Indicates the recovery health of the primary replica.
     * 
     * @return the primaryRecoveryHealthDescription value.
     */
    public String primaryRecoveryHealthDescription() {
        return this.primaryRecoveryHealthDescription;
    }

    /**
     * Get the secondaryRecoveryHealthDescription property: Indicates the recovery health of a secondary replica.
     * 
     * @return the secondaryRecoveryHealthDescription value.
     */
    public String secondaryRecoveryHealthDescription() {
        return this.secondaryRecoveryHealthDescription;
    }

    /**
     * Get the synchronizationHealthDescription property: Reflects a roll-up of the synchronization health of all
     * availability replicas in the availability group.
     * 
     * @return the synchronizationHealthDescription value.
     */
    public String synchronizationHealthDescription() {
        return this.synchronizationHealthDescription;
    }

    /**
     * Get the replicationPartnerType property: The replicationPartnerType property.
     * 
     * @return the replicationPartnerType value.
     */
    public ReplicationPartnerType replicationPartnerType() {
        return this.replicationPartnerType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
