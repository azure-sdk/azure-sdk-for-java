// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azurearcdata.fluent.SqlAvailabilityGroupDatabasesClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlAvailabilityGroupDatabaseResourceInner;
import com.azure.resourcemanager.azurearcdata.models.ArcSqlAvailabilityGroupDatabasesListResult;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabaseUpdate;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SqlAvailabilityGroupDatabasesClient. */
public final class SqlAvailabilityGroupDatabasesClientImpl implements SqlAvailabilityGroupDatabasesClient {
    /** The proxy service used to perform REST calls. */
    private final SqlAvailabilityGroupDatabasesService service;

    /** The service client containing this operation class. */
    private final AzureArcDataManagementClientImpl client;

    /**
     * Initializes an instance of SqlAvailabilityGroupDatabasesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlAvailabilityGroupDatabasesClientImpl(AzureArcDataManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    SqlAvailabilityGroupDatabasesService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureArcDataManagementClientSqlAvailabilityGroupDatabases to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureArcDataManageme")
    public interface SqlAvailabilityGroupDatabasesService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlAvailabilityGroupDatabaseName") String sqlAvailabilityGroupDatabaseName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json")
                SqlAvailabilityGroupDatabaseResourceInner sqlAvailabilityGroupDatabaseResource,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlAvailabilityGroupDatabaseName") String sqlAvailabilityGroupDatabaseName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlAvailabilityGroupDatabaseName") String sqlAvailabilityGroupDatabaseName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases/{sqlAvailabilityGroupDatabaseName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlAvailabilityGroupDatabaseName") String sqlAvailabilityGroupDatabaseName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SqlAvailabilityGroupDatabaseUpdate sqlAvailabilityGroupDatabaseUpdate,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData"
                + "/sqlAvailabilityGroups/{sqlAvailabilityGroupName}/databases")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlAvailabilityGroupDatabasesListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlAvailabilityGroupName") String sqlAvailabilityGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArcSqlAvailabilityGroupDatabasesListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates or update database in an Arc Sql Availability Group.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseResource The request body for availability group databases resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseResourceInner sqlAvailabilityGroupDatabaseResource) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseResource is required and cannot be null."));
        } else {
            sqlAvailabilityGroupDatabaseResource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlAvailabilityGroupDatabaseName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            sqlAvailabilityGroupDatabaseResource,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or update database in an Arc Sql Availability Group.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseResource The request body for availability group databases resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> createWithResponseAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseResourceInner sqlAvailabilityGroupDatabaseResource,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseResource == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseResource is required and cannot be null."));
        } else {
            sqlAvailabilityGroupDatabaseResource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                sqlAvailabilityGroupDatabaseResource,
                accept,
                context);
    }

    /**
     * Creates or update database in an Arc Sql Availability Group.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseResource The request body for availability group databases resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlAvailabilityGroupDatabaseResourceInner> createAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseResourceInner sqlAvailabilityGroupDatabaseResource) {
        return createWithResponseAsync(
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupDatabaseResource)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or update database in an Arc Sql Availability Group.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseResource The request body for availability group databases resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlAvailabilityGroupDatabaseResourceInner> createWithResponse(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseResourceInner sqlAvailabilityGroupDatabaseResource,
        Context context) {
        return createWithResponseAsync(
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupDatabaseResource,
                context)
            .block();
    }

    /**
     * Creates or update database in an Arc Sql Availability Group.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseResource The request body for availability group databases resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlAvailabilityGroupDatabaseResourceInner create(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseResourceInner sqlAvailabilityGroupDatabaseResource) {
        return createWithResponse(
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupDatabaseResource,
                Context.NONE)
            .getValue();
    }

    /**
     * Deletes an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlAvailabilityGroupDatabaseName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        return deleteWithResponseAsync(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        Context context) {
        return deleteWithResponseAsync(
                resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, context)
            .block();
    }

    /**
     * Deletes an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        deleteWithResponse(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, Context.NONE);
    }

    /**
     * Retrieves an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> getWithResponseAsync(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlAvailabilityGroupDatabaseName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieves an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> getWithResponseAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Retrieves an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlAvailabilityGroupDatabaseResourceInner> getAsync(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        return getWithResponseAsync(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieves an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlAvailabilityGroupDatabaseResourceInner> getWithResponse(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, context)
            .block();
    }

    /**
     * Retrieves an Arc Sql availability group database resource.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlAvailabilityGroupDatabaseResourceInner get(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        return getWithResponse(
                resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, Context.NONE)
            .getValue();
    }

    /**
     * Updates an existing Availability Group Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseUpdate The update availability group database resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseUpdate sqlAvailabilityGroupDatabaseUpdate) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseUpdate == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseUpdate is required and cannot be null."));
        } else {
            sqlAvailabilityGroupDatabaseUpdate.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlAvailabilityGroupDatabaseName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            sqlAvailabilityGroupDatabaseUpdate,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing Availability Group Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseUpdate The update availability group database resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SqlAvailabilityGroupDatabaseResourceInner>> updateWithResponseAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseUpdate sqlAvailabilityGroupDatabaseUpdate,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupDatabaseUpdate == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter sqlAvailabilityGroupDatabaseUpdate is required and cannot be null."));
        } else {
            sqlAvailabilityGroupDatabaseUpdate.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                sqlAvailabilityGroupDatabaseUpdate,
                accept,
                context);
    }

    /**
     * Updates an existing Availability Group Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseUpdate The update availability group database resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SqlAvailabilityGroupDatabaseResourceInner> updateAsync(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseUpdate sqlAvailabilityGroupDatabaseUpdate) {
        return updateWithResponseAsync(
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupDatabaseUpdate)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates an existing Availability Group Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseUpdate The update availability group database resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SqlAvailabilityGroupDatabaseResourceInner> updateWithResponse(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseUpdate sqlAvailabilityGroupDatabaseUpdate,
        Context context) {
        return updateWithResponseAsync(
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupDatabaseUpdate,
                context)
            .block();
    }

    /**
     * Updates an existing Availability Group Database.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupDatabaseName Name of SQL Availability Group Database.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param sqlAvailabilityGroupDatabaseUpdate The update availability group database resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return arc Sql Server Availability Group Database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SqlAvailabilityGroupDatabaseResourceInner update(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        SqlAvailabilityGroupDatabaseUpdate sqlAvailabilityGroupDatabaseUpdate) {
        return updateWithResponse(
                resourceGroupName,
                sqlAvailabilityGroupDatabaseName,
                sqlAvailabilityGroupName,
                sqlAvailabilityGroupDatabaseUpdate,
                Context.NONE)
            .getValue();
    }

    /**
     * List the Availability Group Databases associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupDatabaseResourceInner>> listSinglePageAsync(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            sqlAvailabilityGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<SqlAvailabilityGroupDatabaseResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the Availability Group Databases associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupDatabaseResourceInner>> listSinglePageAsync(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlAvailabilityGroupName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter sqlAvailabilityGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                sqlAvailabilityGroupName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * List the Availability Group Databases associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlAvailabilityGroupDatabaseResourceInner> listAsync(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sqlAvailabilityGroupName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List the Availability Group Databases associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SqlAvailabilityGroupDatabaseResourceInner> listAsync(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, sqlAvailabilityGroupName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the Availability Group Databases associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlAvailabilityGroupDatabaseResourceInner> list(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        return new PagedIterable<>(listAsync(resourceGroupName, sqlAvailabilityGroupName));
    }

    /**
     * List the Availability Group Databases associated with the given Arc Sql AG.
     *
     * @param resourceGroupName The name of the Azure resource group.
     * @param sqlAvailabilityGroupName Name of SQL Availability Group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SqlAvailabilityGroupDatabaseResourceInner> list(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, sqlAvailabilityGroupName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupDatabaseResourceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SqlAvailabilityGroupDatabaseResourceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Arc Sql Availability Group Databases along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SqlAvailabilityGroupDatabaseResourceInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
