// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.HashMap;
import java.util.Map;

/**
 * The kubernetes security information.
 */
@Fluent
public final class K8SSecurity {
    /*
     * Admin login secret key
     */
    @JsonProperty(value = "adminLoginSecret")
    private String adminLoginSecret;

    /*
     * Service certificate secret used
     */
    @JsonProperty(value = "serviceCertificateSecret")
    private String serviceCertificateSecret;

    /*
     * The kubernetes active directory information.
     */
    @JsonProperty(value = "activeDirectory")
    private K8SActiveDirectory activeDirectory;

    /*
     * Transparent data encryption information.
     */
    @JsonProperty(value = "transparentDataEncryption")
    private K8StransparentDataEncryption transparentDataEncryption;

    /*
     * The kubernetes security information.
     */
    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of K8SSecurity class.
     */
    public K8SSecurity() {
    }

    /**
     * Get the adminLoginSecret property: Admin login secret key.
     * 
     * @return the adminLoginSecret value.
     */
    public String adminLoginSecret() {
        return this.adminLoginSecret;
    }

    /**
     * Set the adminLoginSecret property: Admin login secret key.
     * 
     * @param adminLoginSecret the adminLoginSecret value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withAdminLoginSecret(String adminLoginSecret) {
        this.adminLoginSecret = adminLoginSecret;
        return this;
    }

    /**
     * Get the serviceCertificateSecret property: Service certificate secret used.
     * 
     * @return the serviceCertificateSecret value.
     */
    public String serviceCertificateSecret() {
        return this.serviceCertificateSecret;
    }

    /**
     * Set the serviceCertificateSecret property: Service certificate secret used.
     * 
     * @param serviceCertificateSecret the serviceCertificateSecret value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withServiceCertificateSecret(String serviceCertificateSecret) {
        this.serviceCertificateSecret = serviceCertificateSecret;
        return this;
    }

    /**
     * Get the activeDirectory property: The kubernetes active directory information.
     * 
     * @return the activeDirectory value.
     */
    public K8SActiveDirectory activeDirectory() {
        return this.activeDirectory;
    }

    /**
     * Set the activeDirectory property: The kubernetes active directory information.
     * 
     * @param activeDirectory the activeDirectory value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withActiveDirectory(K8SActiveDirectory activeDirectory) {
        this.activeDirectory = activeDirectory;
        return this;
    }

    /**
     * Get the transparentDataEncryption property: Transparent data encryption information.
     * 
     * @return the transparentDataEncryption value.
     */
    public K8StransparentDataEncryption transparentDataEncryption() {
        return this.transparentDataEncryption;
    }

    /**
     * Set the transparentDataEncryption property: Transparent data encryption information.
     * 
     * @param transparentDataEncryption the transparentDataEncryption value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withTransparentDataEncryption(K8StransparentDataEncryption transparentDataEncryption) {
        this.transparentDataEncryption = transparentDataEncryption;
        return this;
    }

    /**
     * Get the additionalProperties property: The kubernetes security information.
     * 
     * @return the additionalProperties value.
     */
    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The kubernetes security information.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the K8SSecurity object itself.
     */
    public K8SSecurity withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    void withAdditionalProperties(String key, Object value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (activeDirectory() != null) {
            activeDirectory().validate();
        }
        if (transparentDataEncryption() != null) {
            transparentDataEncryption().validate();
        }
    }
}
