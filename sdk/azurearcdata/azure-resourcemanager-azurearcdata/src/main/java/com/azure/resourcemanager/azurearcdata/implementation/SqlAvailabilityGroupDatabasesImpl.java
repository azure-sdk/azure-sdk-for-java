// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurearcdata.fluent.SqlAvailabilityGroupDatabasesClient;
import com.azure.resourcemanager.azurearcdata.fluent.models.SqlAvailabilityGroupDatabaseResourceInner;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabaseResource;
import com.azure.resourcemanager.azurearcdata.models.SqlAvailabilityGroupDatabases;

public final class SqlAvailabilityGroupDatabasesImpl implements SqlAvailabilityGroupDatabases {
    private static final ClientLogger LOGGER = new ClientLogger(SqlAvailabilityGroupDatabasesImpl.class);

    private final SqlAvailabilityGroupDatabasesClient innerClient;

    private final com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager;

    public SqlAvailabilityGroupDatabasesImpl(
        SqlAvailabilityGroupDatabasesClient innerClient,
        com.azure.resourcemanager.azurearcdata.AzureArcDataManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, context);
    }

    public void delete(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        this.serviceClient().delete(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName);
    }

    public Response<SqlAvailabilityGroupDatabaseResource> getWithResponse(
        String resourceGroupName,
        String sqlAvailabilityGroupDatabaseName,
        String sqlAvailabilityGroupName,
        Context context) {
        Response<SqlAvailabilityGroupDatabaseResourceInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SqlAvailabilityGroupDatabaseResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SqlAvailabilityGroupDatabaseResource get(
        String resourceGroupName, String sqlAvailabilityGroupDatabaseName, String sqlAvailabilityGroupName) {
        SqlAvailabilityGroupDatabaseResourceInner inner =
            this.serviceClient().get(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName);
        if (inner != null) {
            return new SqlAvailabilityGroupDatabaseResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<SqlAvailabilityGroupDatabaseResource> list(
        String resourceGroupName, String sqlAvailabilityGroupName) {
        PagedIterable<SqlAvailabilityGroupDatabaseResourceInner> inner =
            this.serviceClient().list(resourceGroupName, sqlAvailabilityGroupName);
        return Utils.mapPage(inner, inner1 -> new SqlAvailabilityGroupDatabaseResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SqlAvailabilityGroupDatabaseResource> list(
        String resourceGroupName, String sqlAvailabilityGroupName, Context context) {
        PagedIterable<SqlAvailabilityGroupDatabaseResourceInner> inner =
            this.serviceClient().list(resourceGroupName, sqlAvailabilityGroupName, context);
        return Utils.mapPage(inner, inner1 -> new SqlAvailabilityGroupDatabaseResourceImpl(inner1, this.manager()));
    }

    public SqlAvailabilityGroupDatabaseResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlAvailabilityGroupDatabaseName = Utils.getValueFromIdByName(id, "databases");
        if (sqlAvailabilityGroupDatabaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, Context.NONE)
            .getValue();
    }

    public Response<SqlAvailabilityGroupDatabaseResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlAvailabilityGroupDatabaseName = Utils.getValueFromIdByName(id, "databases");
        if (sqlAvailabilityGroupDatabaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlAvailabilityGroupDatabaseName = Utils.getValueFromIdByName(id, "databases");
        if (sqlAvailabilityGroupDatabaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        this
            .deleteWithResponse(
                resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sqlAvailabilityGroupDatabaseName = Utils.getValueFromIdByName(id, "databases");
        if (sqlAvailabilityGroupDatabaseName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'databases'.", id)));
        }
        String sqlAvailabilityGroupName = Utils.getValueFromIdByName(id, "sqlAvailabilityGroups");
        if (sqlAvailabilityGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'sqlAvailabilityGroups'.",
                                id)));
        }
        return this
            .deleteWithResponse(resourceGroupName, sqlAvailabilityGroupDatabaseName, sqlAvailabilityGroupName, context);
    }

    private SqlAvailabilityGroupDatabasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurearcdata.AzureArcDataManager manager() {
        return this.serviceManager;
    }

    public SqlAvailabilityGroupDatabaseResourceImpl define(String name) {
        return new SqlAvailabilityGroupDatabaseResourceImpl(name, this.manager());
    }
}
