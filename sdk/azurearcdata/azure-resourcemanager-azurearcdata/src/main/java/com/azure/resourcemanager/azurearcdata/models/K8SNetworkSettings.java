// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The kubernetes network settings information. */
@Fluent
public final class K8SNetworkSettings {
    /*
     * If 1, then SQL Server forces all connections to be encrypted. By default, this option is 0
     */
    @JsonProperty(value = "forceencryption")
    private Integer forceencryption;

    /*
     * Specifies which ciphers are allowed by SQL Server for TLS
     */
    @JsonProperty(value = "tlsciphers")
    private String tlsciphers;

    /*
     * A comma-separated list of which TLS protocols are allowed by SQL Server
     */
    @JsonProperty(value = "tlsprotocols")
    private String tlsprotocols;

    /** Creates an instance of K8SNetworkSettings class. */
    public K8SNetworkSettings() {
    }

    /**
     * Get the forceencryption property: If 1, then SQL Server forces all connections to be encrypted. By default, this
     * option is 0.
     *
     * @return the forceencryption value.
     */
    public Integer forceencryption() {
        return this.forceencryption;
    }

    /**
     * Set the forceencryption property: If 1, then SQL Server forces all connections to be encrypted. By default, this
     * option is 0.
     *
     * @param forceencryption the forceencryption value to set.
     * @return the K8SNetworkSettings object itself.
     */
    public K8SNetworkSettings withForceencryption(Integer forceencryption) {
        this.forceencryption = forceencryption;
        return this;
    }

    /**
     * Get the tlsciphers property: Specifies which ciphers are allowed by SQL Server for TLS.
     *
     * @return the tlsciphers value.
     */
    public String tlsciphers() {
        return this.tlsciphers;
    }

    /**
     * Set the tlsciphers property: Specifies which ciphers are allowed by SQL Server for TLS.
     *
     * @param tlsciphers the tlsciphers value to set.
     * @return the K8SNetworkSettings object itself.
     */
    public K8SNetworkSettings withTlsciphers(String tlsciphers) {
        this.tlsciphers = tlsciphers;
        return this;
    }

    /**
     * Get the tlsprotocols property: A comma-separated list of which TLS protocols are allowed by SQL Server.
     *
     * @return the tlsprotocols value.
     */
    public String tlsprotocols() {
        return this.tlsprotocols;
    }

    /**
     * Set the tlsprotocols property: A comma-separated list of which TLS protocols are allowed by SQL Server.
     *
     * @param tlsprotocols the tlsprotocols value to set.
     * @return the K8SNetworkSettings object itself.
     */
    public K8SNetworkSettings withTlsprotocols(String tlsprotocols) {
        this.tlsprotocols = tlsprotocols;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
