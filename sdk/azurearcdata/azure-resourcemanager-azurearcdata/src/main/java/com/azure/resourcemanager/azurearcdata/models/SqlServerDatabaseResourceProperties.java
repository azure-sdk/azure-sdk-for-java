// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurearcdata.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The properties of Arc Sql Server database resource. */
@Fluent
public final class SqlServerDatabaseResourceProperties {
    /*
     * Collation of the database.
     */
    @JsonProperty(value = "collationName")
    private String collationName;

    /*
     * Creation date of the database.
     */
    @JsonProperty(value = "databaseCreationDate")
    private OffsetDateTime databaseCreationDate;

    /*
     * Compatibility level of the database
     */
    @JsonProperty(value = "compatibilityLevel")
    private Integer compatibilityLevel;

    /*
     * Size of the database.
     */
    @JsonProperty(value = "sizeMB")
    private Float sizeMB;

    /*
     * Space left of the database.
     */
    @JsonProperty(value = "spaceAvailableMB")
    private Float spaceAvailableMB;

    /*
     * State of the database.
     */
    @JsonProperty(value = "state")
    private DatabaseState state;

    /*
     * Whether the database is read only or not.
     */
    @JsonProperty(value = "isReadOnly")
    private Boolean isReadOnly;

    /*
     * Status of the database.
     */
    @JsonProperty(value = "recoveryMode")
    private RecoveryMode recoveryMode;

    /*
     * List of features that are enabled for the database
     */
    @JsonProperty(value = "databaseOptions")
    private SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions;

    /*
     * The backupInformation property.
     */
    @JsonProperty(value = "backupInformation")
    private SqlServerDatabaseResourcePropertiesBackupInformation backupInformation;

    /*
     * The backup profile for the SQL server.
     */
    @JsonProperty(value = "backupPolicy")
    private BackupPolicy backupPolicy;

    /*
     * This records the earliest start date and time that restore is available for this database (ISO8601 format).
     */
    @JsonProperty(value = "earliestRestoreDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime earliestRestoreDate;

    /*
     * Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing
     * database. sourceDatabaseId and restorePointInTime must be specified.
     */
    @JsonProperty(value = "createMode")
    private DatabaseCreateMode createMode;

    /*
     * The resource identifier of the source database associated with create operation of this database.
     */
    @JsonProperty(value = "sourceDatabaseId")
    private String sourceDatabaseId;

    /*
     * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601
     * format) of the source database that will be restored to create the new database.
     */
    @JsonProperty(value = "restorePointInTime")
    private OffsetDateTime restorePointInTime;

    /*
     * The provisioning state of the Arc-enabled SQL Server database resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * The time when last successful database upload was performed.
     */
    @JsonProperty(value = "lastDatabaseUploadTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastDatabaseUploadTime;

    /** Creates an instance of SqlServerDatabaseResourceProperties class. */
    public SqlServerDatabaseResourceProperties() {
    }

    /**
     * Get the collationName property: Collation of the database.
     *
     * @return the collationName value.
     */
    public String collationName() {
        return this.collationName;
    }

    /**
     * Set the collationName property: Collation of the database.
     *
     * @param collationName the collationName value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withCollationName(String collationName) {
        this.collationName = collationName;
        return this;
    }

    /**
     * Get the databaseCreationDate property: Creation date of the database.
     *
     * @return the databaseCreationDate value.
     */
    public OffsetDateTime databaseCreationDate() {
        return this.databaseCreationDate;
    }

    /**
     * Set the databaseCreationDate property: Creation date of the database.
     *
     * @param databaseCreationDate the databaseCreationDate value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withDatabaseCreationDate(OffsetDateTime databaseCreationDate) {
        this.databaseCreationDate = databaseCreationDate;
        return this;
    }

    /**
     * Get the compatibilityLevel property: Compatibility level of the database.
     *
     * @return the compatibilityLevel value.
     */
    public Integer compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Set the compatibilityLevel property: Compatibility level of the database.
     *
     * @param compatibilityLevel the compatibilityLevel value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withCompatibilityLevel(Integer compatibilityLevel) {
        this.compatibilityLevel = compatibilityLevel;
        return this;
    }

    /**
     * Get the sizeMB property: Size of the database.
     *
     * @return the sizeMB value.
     */
    public Float sizeMB() {
        return this.sizeMB;
    }

    /**
     * Set the sizeMB property: Size of the database.
     *
     * @param sizeMB the sizeMB value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withSizeMB(Float sizeMB) {
        this.sizeMB = sizeMB;
        return this;
    }

    /**
     * Get the spaceAvailableMB property: Space left of the database.
     *
     * @return the spaceAvailableMB value.
     */
    public Float spaceAvailableMB() {
        return this.spaceAvailableMB;
    }

    /**
     * Set the spaceAvailableMB property: Space left of the database.
     *
     * @param spaceAvailableMB the spaceAvailableMB value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withSpaceAvailableMB(Float spaceAvailableMB) {
        this.spaceAvailableMB = spaceAvailableMB;
        return this;
    }

    /**
     * Get the state property: State of the database.
     *
     * @return the state value.
     */
    public DatabaseState state() {
        return this.state;
    }

    /**
     * Set the state property: State of the database.
     *
     * @param state the state value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withState(DatabaseState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the isReadOnly property: Whether the database is read only or not.
     *
     * @return the isReadOnly value.
     */
    public Boolean isReadOnly() {
        return this.isReadOnly;
    }

    /**
     * Set the isReadOnly property: Whether the database is read only or not.
     *
     * @param isReadOnly the isReadOnly value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withIsReadOnly(Boolean isReadOnly) {
        this.isReadOnly = isReadOnly;
        return this;
    }

    /**
     * Get the recoveryMode property: Status of the database.
     *
     * @return the recoveryMode value.
     */
    public RecoveryMode recoveryMode() {
        return this.recoveryMode;
    }

    /**
     * Set the recoveryMode property: Status of the database.
     *
     * @param recoveryMode the recoveryMode value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withRecoveryMode(RecoveryMode recoveryMode) {
        this.recoveryMode = recoveryMode;
        return this;
    }

    /**
     * Get the databaseOptions property: List of features that are enabled for the database.
     *
     * @return the databaseOptions value.
     */
    public SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions() {
        return this.databaseOptions;
    }

    /**
     * Set the databaseOptions property: List of features that are enabled for the database.
     *
     * @param databaseOptions the databaseOptions value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withDatabaseOptions(
        SqlServerDatabaseResourcePropertiesDatabaseOptions databaseOptions) {
        this.databaseOptions = databaseOptions;
        return this;
    }

    /**
     * Get the backupInformation property: The backupInformation property.
     *
     * @return the backupInformation value.
     */
    public SqlServerDatabaseResourcePropertiesBackupInformation backupInformation() {
        return this.backupInformation;
    }

    /**
     * Set the backupInformation property: The backupInformation property.
     *
     * @param backupInformation the backupInformation value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withBackupInformation(
        SqlServerDatabaseResourcePropertiesBackupInformation backupInformation) {
        this.backupInformation = backupInformation;
        return this;
    }

    /**
     * Get the backupPolicy property: The backup profile for the SQL server.
     *
     * @return the backupPolicy value.
     */
    public BackupPolicy backupPolicy() {
        return this.backupPolicy;
    }

    /**
     * Set the backupPolicy property: The backup profile for the SQL server.
     *
     * @param backupPolicy the backupPolicy value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withBackupPolicy(BackupPolicy backupPolicy) {
        this.backupPolicy = backupPolicy;
        return this;
    }

    /**
     * Get the earliestRestoreDate property: This records the earliest start date and time that restore is available for
     * this database (ISO8601 format).
     *
     * @return the earliestRestoreDate value.
     */
    public OffsetDateTime earliestRestoreDate() {
        return this.earliestRestoreDate;
    }

    /**
     * Get the createMode property: Database create mode. PointInTimeRestore: Create a database by restoring a point in
     * time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified.
     *
     * @return the createMode value.
     */
    public DatabaseCreateMode createMode() {
        return this.createMode;
    }

    /**
     * Set the createMode property: Database create mode. PointInTimeRestore: Create a database by restoring a point in
     * time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified.
     *
     * @param createMode the createMode value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withCreateMode(DatabaseCreateMode createMode) {
        this.createMode = createMode;
        return this;
    }

    /**
     * Get the sourceDatabaseId property: The resource identifier of the source database associated with create
     * operation of this database.
     *
     * @return the sourceDatabaseId value.
     */
    public String sourceDatabaseId() {
        return this.sourceDatabaseId;
    }

    /**
     * Set the sourceDatabaseId property: The resource identifier of the source database associated with create
     * operation of this database.
     *
     * @param sourceDatabaseId the sourceDatabaseId value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withSourceDatabaseId(String sourceDatabaseId) {
        this.sourceDatabaseId = sourceDatabaseId;
        return this;
    }

    /**
     * Get the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value is required.
     * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new
     * database.
     *
     * @return the restorePointInTime value.
     */
    public OffsetDateTime restorePointInTime() {
        return this.restorePointInTime;
    }

    /**
     * Set the restorePointInTime property: Conditional. If createMode is PointInTimeRestore, this value is required.
     * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new
     * database.
     *
     * @param restorePointInTime the restorePointInTime value to set.
     * @return the SqlServerDatabaseResourceProperties object itself.
     */
    public SqlServerDatabaseResourceProperties withRestorePointInTime(OffsetDateTime restorePointInTime) {
        this.restorePointInTime = restorePointInTime;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Arc-enabled SQL Server database resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lastDatabaseUploadTime property: The time when last successful database upload was performed.
     *
     * @return the lastDatabaseUploadTime value.
     */
    public OffsetDateTime lastDatabaseUploadTime() {
        return this.lastDatabaseUploadTime;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databaseOptions() != null) {
            databaseOptions().validate();
        }
        if (backupInformation() != null) {
            backupInformation().validate();
        }
        if (backupPolicy() != null) {
            backupPolicy().validate();
        }
    }
}
