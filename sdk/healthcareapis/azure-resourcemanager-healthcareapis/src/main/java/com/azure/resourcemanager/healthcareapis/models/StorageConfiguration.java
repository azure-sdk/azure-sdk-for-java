// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration of connected storage.
 */
@Fluent
public final class StorageConfiguration implements JsonSerializable<StorageConfiguration> {
    /*
     * The resource id of connected storage account.
     */
    private String storageResourceId;

    /*
     * The filesystem name of connected storage account.
     */
    private String fileSystemName;

    /*
     * The configuration for monitoring changes in the specified storage account.
     */
    private StorageMonitorConfiguration storageMonitorConfiguration;

    /**
     * Creates an instance of StorageConfiguration class.
     */
    public StorageConfiguration() {
    }

    /**
     * Get the storageResourceId property: The resource id of connected storage account.
     * 
     * @return the storageResourceId value.
     */
    public String storageResourceId() {
        return this.storageResourceId;
    }

    /**
     * Set the storageResourceId property: The resource id of connected storage account.
     * 
     * @param storageResourceId the storageResourceId value to set.
     * @return the StorageConfiguration object itself.
     */
    public StorageConfiguration withStorageResourceId(String storageResourceId) {
        this.storageResourceId = storageResourceId;
        return this;
    }

    /**
     * Get the fileSystemName property: The filesystem name of connected storage account.
     * 
     * @return the fileSystemName value.
     */
    public String fileSystemName() {
        return this.fileSystemName;
    }

    /**
     * Set the fileSystemName property: The filesystem name of connected storage account.
     * 
     * @param fileSystemName the fileSystemName value to set.
     * @return the StorageConfiguration object itself.
     */
    public StorageConfiguration withFileSystemName(String fileSystemName) {
        this.fileSystemName = fileSystemName;
        return this;
    }

    /**
     * Get the storageMonitorConfiguration property: The configuration for monitoring changes in the specified storage
     * account.
     * 
     * @return the storageMonitorConfiguration value.
     */
    public StorageMonitorConfiguration storageMonitorConfiguration() {
        return this.storageMonitorConfiguration;
    }

    /**
     * Set the storageMonitorConfiguration property: The configuration for monitoring changes in the specified storage
     * account.
     * 
     * @param storageMonitorConfiguration the storageMonitorConfiguration value to set.
     * @return the StorageConfiguration object itself.
     */
    public StorageConfiguration
        withStorageMonitorConfiguration(StorageMonitorConfiguration storageMonitorConfiguration) {
        this.storageMonitorConfiguration = storageMonitorConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageMonitorConfiguration() != null) {
            storageMonitorConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageResourceId", this.storageResourceId);
        jsonWriter.writeStringField("fileSystemName", this.fileSystemName);
        jsonWriter.writeJsonField("storageMonitorConfiguration", this.storageMonitorConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageConfiguration.
     */
    public static StorageConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageConfiguration deserializedStorageConfiguration = new StorageConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageResourceId".equals(fieldName)) {
                    deserializedStorageConfiguration.storageResourceId = reader.getString();
                } else if ("fileSystemName".equals(fieldName)) {
                    deserializedStorageConfiguration.fileSystemName = reader.getString();
                } else if ("storageMonitorConfiguration".equals(fieldName)) {
                    deserializedStorageConfiguration.storageMonitorConfiguration
                        = StorageMonitorConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageConfiguration;
        });
    }
}
