// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Azure Storage queue used for Data Lake Storage Gen 2 events.
 */
@Fluent
public final class StorageMonitorQueue implements JsonSerializable<StorageMonitorQueue> {
    /*
     * The name of the Azure Storage queue.
     */
    private String name;

    /*
     * The Azure Storage queue message time-to-live in seconds.
     */
    private Long timeToLiveInSeconds;

    /**
     * Creates an instance of StorageMonitorQueue class.
     */
    public StorageMonitorQueue() {
    }

    /**
     * Get the name property: The name of the Azure Storage queue.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Azure Storage queue.
     * 
     * @param name the name value to set.
     * @return the StorageMonitorQueue object itself.
     */
    public StorageMonitorQueue withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the timeToLiveInSeconds property: The Azure Storage queue message time-to-live in seconds.
     * 
     * @return the timeToLiveInSeconds value.
     */
    public Long timeToLiveInSeconds() {
        return this.timeToLiveInSeconds;
    }

    /**
     * Set the timeToLiveInSeconds property: The Azure Storage queue message time-to-live in seconds.
     * 
     * @param timeToLiveInSeconds the timeToLiveInSeconds value to set.
     * @return the StorageMonitorQueue object itself.
     */
    public StorageMonitorQueue withTimeToLiveInSeconds(Long timeToLiveInSeconds) {
        this.timeToLiveInSeconds = timeToLiveInSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("timeToLiveInSeconds", this.timeToLiveInSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageMonitorQueue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageMonitorQueue if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageMonitorQueue.
     */
    public static StorageMonitorQueue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageMonitorQueue deserializedStorageMonitorQueue = new StorageMonitorQueue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStorageMonitorQueue.name = reader.getString();
                } else if ("timeToLiveInSeconds".equals(fieldName)) {
                    deserializedStorageMonitorQueue.timeToLiveInSeconds = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageMonitorQueue;
        });
    }
}
