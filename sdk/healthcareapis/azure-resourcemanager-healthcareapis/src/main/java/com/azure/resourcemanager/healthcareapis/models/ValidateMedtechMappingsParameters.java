// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Input values for the Medtech Mapping Validation Service. */
@Fluent
public final class ValidateMedtechMappingsParameters {
    /*
     * Indicates if validation results will be aggregated
     */
    @JsonProperty(value = "aggregateErrors")
    private AggregateErrors aggregateErrors;

    /*
     * The Medtech device mapping template.
     */
    @JsonProperty(value = "deviceMapping", required = true)
    private IotMappingProperties deviceMapping;

    /*
     * The Medtech FHIR mapping template.
     */
    @JsonProperty(value = "fhirMapping")
    private IotMappingProperties fhirMapping;

    /*
     * A collection of device events.
     */
    @JsonProperty(value = "deviceEvents")
    private List<Object> deviceEvents;

    /** Creates an instance of ValidateMedtechMappingsParameters class. */
    public ValidateMedtechMappingsParameters() {
    }

    /**
     * Get the aggregateErrors property: Indicates if validation results will be aggregated.
     *
     * @return the aggregateErrors value.
     */
    public AggregateErrors aggregateErrors() {
        return this.aggregateErrors;
    }

    /**
     * Set the aggregateErrors property: Indicates if validation results will be aggregated.
     *
     * @param aggregateErrors the aggregateErrors value to set.
     * @return the ValidateMedtechMappingsParameters object itself.
     */
    public ValidateMedtechMappingsParameters withAggregateErrors(AggregateErrors aggregateErrors) {
        this.aggregateErrors = aggregateErrors;
        return this;
    }

    /**
     * Get the deviceMapping property: The Medtech device mapping template.
     *
     * @return the deviceMapping value.
     */
    public IotMappingProperties deviceMapping() {
        return this.deviceMapping;
    }

    /**
     * Set the deviceMapping property: The Medtech device mapping template.
     *
     * @param deviceMapping the deviceMapping value to set.
     * @return the ValidateMedtechMappingsParameters object itself.
     */
    public ValidateMedtechMappingsParameters withDeviceMapping(IotMappingProperties deviceMapping) {
        this.deviceMapping = deviceMapping;
        return this;
    }

    /**
     * Get the fhirMapping property: The Medtech FHIR mapping template.
     *
     * @return the fhirMapping value.
     */
    public IotMappingProperties fhirMapping() {
        return this.fhirMapping;
    }

    /**
     * Set the fhirMapping property: The Medtech FHIR mapping template.
     *
     * @param fhirMapping the fhirMapping value to set.
     * @return the ValidateMedtechMappingsParameters object itself.
     */
    public ValidateMedtechMappingsParameters withFhirMapping(IotMappingProperties fhirMapping) {
        this.fhirMapping = fhirMapping;
        return this;
    }

    /**
     * Get the deviceEvents property: A collection of device events.
     *
     * @return the deviceEvents value.
     */
    public List<Object> deviceEvents() {
        return this.deviceEvents;
    }

    /**
     * Set the deviceEvents property: A collection of device events.
     *
     * @param deviceEvents the deviceEvents value to set.
     * @return the ValidateMedtechMappingsParameters object itself.
     */
    public ValidateMedtechMappingsParameters withDeviceEvents(List<Object> deviceEvents) {
        this.deviceEvents = deviceEvents;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deviceMapping() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property deviceMapping in model ValidateMedtechMappingsParameters"));
        } else {
            deviceMapping().validate();
        }
        if (fhirMapping() != null) {
            fhirMapping().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ValidateMedtechMappingsParameters.class);
}
