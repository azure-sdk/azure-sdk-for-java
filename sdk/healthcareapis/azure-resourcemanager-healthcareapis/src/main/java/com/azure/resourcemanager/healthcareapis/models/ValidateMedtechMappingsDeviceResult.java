// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A result returned when processing a single device event in Medtech Mapping Validation Service. */
@Fluent
public final class ValidateMedtechMappingsDeviceResult {
    /*
     * Indicates how many Device Events produced the associated Exception.
     */
    @JsonProperty(value = "aggregatedCount")
    private Object aggregatedCount;

    /*
     * The device event which was validated.
     */
    @JsonProperty(value = "deviceEvent")
    private Object deviceEvent;

    /*
     * A list of mapping validation error.
     */
    @JsonProperty(value = "exceptions", access = JsonProperty.Access.WRITE_ONLY)
    private List<MedtechMappingValidationError> exceptions;

    /*
     * A collection of measurements which were produced.
     */
    @JsonProperty(value = "measurements")
    private List<MedtechMeasurement> measurements;

    /*
     * A collection of observations which were produced.
     */
    @JsonProperty(value = "observations")
    private List<Object> observations;

    /** Creates an instance of ValidateMedtechMappingsDeviceResult class. */
    public ValidateMedtechMappingsDeviceResult() {
    }

    /**
     * Get the aggregatedCount property: Indicates how many Device Events produced the associated Exception.
     *
     * @return the aggregatedCount value.
     */
    public Object aggregatedCount() {
        return this.aggregatedCount;
    }

    /**
     * Set the aggregatedCount property: Indicates how many Device Events produced the associated Exception.
     *
     * @param aggregatedCount the aggregatedCount value to set.
     * @return the ValidateMedtechMappingsDeviceResult object itself.
     */
    public ValidateMedtechMappingsDeviceResult withAggregatedCount(Object aggregatedCount) {
        this.aggregatedCount = aggregatedCount;
        return this;
    }

    /**
     * Get the deviceEvent property: The device event which was validated.
     *
     * @return the deviceEvent value.
     */
    public Object deviceEvent() {
        return this.deviceEvent;
    }

    /**
     * Set the deviceEvent property: The device event which was validated.
     *
     * @param deviceEvent the deviceEvent value to set.
     * @return the ValidateMedtechMappingsDeviceResult object itself.
     */
    public ValidateMedtechMappingsDeviceResult withDeviceEvent(Object deviceEvent) {
        this.deviceEvent = deviceEvent;
        return this;
    }

    /**
     * Get the exceptions property: A list of mapping validation error.
     *
     * @return the exceptions value.
     */
    public List<MedtechMappingValidationError> exceptions() {
        return this.exceptions;
    }

    /**
     * Get the measurements property: A collection of measurements which were produced.
     *
     * @return the measurements value.
     */
    public List<MedtechMeasurement> measurements() {
        return this.measurements;
    }

    /**
     * Set the measurements property: A collection of measurements which were produced.
     *
     * @param measurements the measurements value to set.
     * @return the ValidateMedtechMappingsDeviceResult object itself.
     */
    public ValidateMedtechMappingsDeviceResult withMeasurements(List<MedtechMeasurement> measurements) {
        this.measurements = measurements;
        return this;
    }

    /**
     * Get the observations property: A collection of observations which were produced.
     *
     * @return the observations value.
     */
    public List<Object> observations() {
        return this.observations;
    }

    /**
     * Set the observations property: A collection of observations which were produced.
     *
     * @param observations the observations value to set.
     * @return the ValidateMedtechMappingsDeviceResult object itself.
     */
    public ValidateMedtechMappingsDeviceResult withObservations(List<Object> observations) {
        this.observations = observations;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (exceptions() != null) {
            exceptions().forEach(e -> e.validate());
        }
        if (measurements() != null) {
            measurements().forEach(e -> e.validate());
        }
    }
}
