// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for indexing the connected storage.
 */
@Fluent
public final class StorageIndexingConfiguration implements JsonSerializable<StorageIndexingConfiguration> {
    /*
     * The name of the queue that contains storage cloud events.
     */
    private String storageEventQueueName;

    /**
     * Creates an instance of StorageIndexingConfiguration class.
     */
    public StorageIndexingConfiguration() {
    }

    /**
     * Get the storageEventQueueName property: The name of the queue that contains storage cloud events.
     * 
     * @return the storageEventQueueName value.
     */
    public String storageEventQueueName() {
        return this.storageEventQueueName;
    }

    /**
     * Set the storageEventQueueName property: The name of the queue that contains storage cloud events.
     * 
     * @param storageEventQueueName the storageEventQueueName value to set.
     * @return the StorageIndexingConfiguration object itself.
     */
    public StorageIndexingConfiguration withStorageEventQueueName(String storageEventQueueName) {
        this.storageEventQueueName = storageEventQueueName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageEventQueueName", this.storageEventQueueName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageIndexingConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageIndexingConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageIndexingConfiguration.
     */
    public static StorageIndexingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageIndexingConfiguration deserializedStorageIndexingConfiguration = new StorageIndexingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageEventQueueName".equals(fieldName)) {
                    deserializedStorageIndexingConfiguration.storageEventQueueName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageIndexingConfiguration;
        });
    }
}
