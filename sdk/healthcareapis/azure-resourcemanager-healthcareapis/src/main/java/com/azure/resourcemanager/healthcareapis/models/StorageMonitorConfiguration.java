// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for monitoring changes in a connected storage.
 */
@Fluent
public final class StorageMonitorConfiguration implements JsonSerializable<StorageMonitorConfiguration> {
    /*
     * The resource id of the Azure Event Grid Namespace.
     */
    private String namespaceResourceId;

    /*
     * The name of the namespace topic within the specified namespace.
     */
    private String topicName;

    /*
     * The name of the event subscription associated with the given namespace topic that contains storage events.
     */
    private String eventSubscriptionName;

    /**
     * Creates an instance of StorageMonitorConfiguration class.
     */
    public StorageMonitorConfiguration() {
    }

    /**
     * Get the namespaceResourceId property: The resource id of the Azure Event Grid Namespace.
     * 
     * @return the namespaceResourceId value.
     */
    public String namespaceResourceId() {
        return this.namespaceResourceId;
    }

    /**
     * Set the namespaceResourceId property: The resource id of the Azure Event Grid Namespace.
     * 
     * @param namespaceResourceId the namespaceResourceId value to set.
     * @return the StorageMonitorConfiguration object itself.
     */
    public StorageMonitorConfiguration withNamespaceResourceId(String namespaceResourceId) {
        this.namespaceResourceId = namespaceResourceId;
        return this;
    }

    /**
     * Get the topicName property: The name of the namespace topic within the specified namespace.
     * 
     * @return the topicName value.
     */
    public String topicName() {
        return this.topicName;
    }

    /**
     * Set the topicName property: The name of the namespace topic within the specified namespace.
     * 
     * @param topicName the topicName value to set.
     * @return the StorageMonitorConfiguration object itself.
     */
    public StorageMonitorConfiguration withTopicName(String topicName) {
        this.topicName = topicName;
        return this;
    }

    /**
     * Get the eventSubscriptionName property: The name of the event subscription associated with the given namespace
     * topic that contains storage events.
     * 
     * @return the eventSubscriptionName value.
     */
    public String eventSubscriptionName() {
        return this.eventSubscriptionName;
    }

    /**
     * Set the eventSubscriptionName property: The name of the event subscription associated with the given namespace
     * topic that contains storage events.
     * 
     * @param eventSubscriptionName the eventSubscriptionName value to set.
     * @return the StorageMonitorConfiguration object itself.
     */
    public StorageMonitorConfiguration withEventSubscriptionName(String eventSubscriptionName) {
        this.eventSubscriptionName = eventSubscriptionName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespaceResourceId", this.namespaceResourceId);
        jsonWriter.writeStringField("topicName", this.topicName);
        jsonWriter.writeStringField("eventSubscriptionName", this.eventSubscriptionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageMonitorConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageMonitorConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageMonitorConfiguration.
     */
    public static StorageMonitorConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageMonitorConfiguration deserializedStorageMonitorConfiguration = new StorageMonitorConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespaceResourceId".equals(fieldName)) {
                    deserializedStorageMonitorConfiguration.namespaceResourceId = reader.getString();
                } else if ("topicName".equals(fieldName)) {
                    deserializedStorageMonitorConfiguration.topicName = reader.getString();
                } else if ("eventSubscriptionName".equals(fieldName)) {
                    deserializedStorageMonitorConfiguration.eventSubscriptionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageMonitorConfiguration;
        });
    }
}
