// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration for monitoring changes in a connected storage account.
 */
@Fluent
public final class StorageMonitorConfiguration implements JsonSerializable<StorageMonitorConfiguration> {
    /*
     * The resource id of the Azure Event Grid System Topic.
     */
    private String systemTopicResourceId;

    /*
     * The Azure Storage queue used for storage events.
     */
    private StorageMonitorQueue messageQueue;

    /*
     * The Azure Storage queue used for events that failed to be processed.
     */
    private StorageMonitorQueue poisonQueue;

    /**
     * Creates an instance of StorageMonitorConfiguration class.
     */
    public StorageMonitorConfiguration() {
    }

    /**
     * Get the systemTopicResourceId property: The resource id of the Azure Event Grid System Topic.
     * 
     * @return the systemTopicResourceId value.
     */
    public String systemTopicResourceId() {
        return this.systemTopicResourceId;
    }

    /**
     * Set the systemTopicResourceId property: The resource id of the Azure Event Grid System Topic.
     * 
     * @param systemTopicResourceId the systemTopicResourceId value to set.
     * @return the StorageMonitorConfiguration object itself.
     */
    public StorageMonitorConfiguration withSystemTopicResourceId(String systemTopicResourceId) {
        this.systemTopicResourceId = systemTopicResourceId;
        return this;
    }

    /**
     * Get the messageQueue property: The Azure Storage queue used for storage events.
     * 
     * @return the messageQueue value.
     */
    public StorageMonitorQueue messageQueue() {
        return this.messageQueue;
    }

    /**
     * Set the messageQueue property: The Azure Storage queue used for storage events.
     * 
     * @param messageQueue the messageQueue value to set.
     * @return the StorageMonitorConfiguration object itself.
     */
    public StorageMonitorConfiguration withMessageQueue(StorageMonitorQueue messageQueue) {
        this.messageQueue = messageQueue;
        return this;
    }

    /**
     * Get the poisonQueue property: The Azure Storage queue used for events that failed to be processed.
     * 
     * @return the poisonQueue value.
     */
    public StorageMonitorQueue poisonQueue() {
        return this.poisonQueue;
    }

    /**
     * Set the poisonQueue property: The Azure Storage queue used for events that failed to be processed.
     * 
     * @param poisonQueue the poisonQueue value to set.
     * @return the StorageMonitorConfiguration object itself.
     */
    public StorageMonitorConfiguration withPoisonQueue(StorageMonitorQueue poisonQueue) {
        this.poisonQueue = poisonQueue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (messageQueue() != null) {
            messageQueue().validate();
        }
        if (poisonQueue() != null) {
            poisonQueue().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("systemTopicResourceId", this.systemTopicResourceId);
        jsonWriter.writeJsonField("messageQueue", this.messageQueue);
        jsonWriter.writeJsonField("poisonQueue", this.poisonQueue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageMonitorConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageMonitorConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageMonitorConfiguration.
     */
    public static StorageMonitorConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageMonitorConfiguration deserializedStorageMonitorConfiguration = new StorageMonitorConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("systemTopicResourceId".equals(fieldName)) {
                    deserializedStorageMonitorConfiguration.systemTopicResourceId = reader.getString();
                } else if ("messageQueue".equals(fieldName)) {
                    deserializedStorageMonitorConfiguration.messageQueue = StorageMonitorQueue.fromJson(reader);
                } else if ("poisonQueue".equals(fieldName)) {
                    deserializedStorageMonitorConfiguration.poisonQueue = StorageMonitorQueue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageMonitorConfiguration;
        });
    }
}
