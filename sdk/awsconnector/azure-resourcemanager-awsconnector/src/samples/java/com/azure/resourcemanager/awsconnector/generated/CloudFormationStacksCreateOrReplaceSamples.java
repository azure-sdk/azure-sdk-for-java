// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsCloudFormationStackProperties;
import com.azure.resourcemanager.awsconnector.models.Capabilities;
import com.azure.resourcemanager.awsconnector.models.CloudFormationStackProperties;
import com.azure.resourcemanager.awsconnector.models.Output;
import com.azure.resourcemanager.awsconnector.models.StackStatus;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated3;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CloudFormationStacks CreateOrReplace.
 */
public final class CloudFormationStacksCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * CloudFormationStacks_CreateOrReplace.json
     */
    /**
     * Sample code: CloudFormationStacks_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        cloudFormationStacksCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.cloudFormationStacks()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("igidmxpchpipflxgxqkge")
            .withExistingResourceGroup("rgcloudFormationStack")
            .withTags(mapOf("key8740", "fakeTokenPlaceholder"))
            .withProperties(new CloudFormationStackProperties()
                .withAwsProperties(new AwsCloudFormationStackProperties()
                    .withCapabilities(Arrays.asList(Capabilities.CAPABILITY_AUTO_EXPAND))
                    .withChangeSetId("diebgdscxgdrjl")
                    .withCreationTime("rbzmujrpza")
                    .withDescription("qgthunuomcbskx")
                    .withDisableRollback(true)
                    .withEnableTerminationProtection(true)
                    .withLastUpdateTime("ziwluvridlkgt")
                    .withNotificationARNs(Arrays.asList("hiumjcobumu"))
                    .withOutputs(Arrays.asList(new Output().withDescription("yr")
                        .withExportName("inzgbtgxtlkmbsthsiqyaownydl")
                        .withOutputKey("fakeTokenPlaceholder")
                        .withOutputValue("xrkebm")))
                    .withParameters(mapOf("key3924", "fakeTokenPlaceholder"))
                    .withParentId("spfnpubjgnn")
                    .withRoleArn("chneost")
                    .withRootId("dm")
                    .withStackId("pfdvktglgjlp")
                    .withStackName("kcpmjgjmtil")
                    .withStackPolicyUrl("azff")
                    .withStackStatus(StackStatus.CREATE_COMPLETE)
                    .withStackStatusReason("oashauqgm")
                    .withTags(Arrays
                        .asList(new TagAutoGenerated3().withKey("fakeTokenPlaceholder").withValue("xapmapwprakmhlboq")))
                    .withTemplateUrl("prpgfhggbaglqposmnlkc")
                    .withTimeoutInMinutes(21))
                .withPublicCloudConnectorsResourceId("ccuizanjtbypcrcdmoelfyjkx")
                .withAwsAccountId("yuzdhawgkrzzmppqjebmyzrqzsxbgh")
                .withArn("wnbcxhzurwtzqcoirs")
                .withPublicCloudResourceName("vjnhdxpreaebeaxeqmrhfuro")
                .withAwsSourceSchema("ascbhyeewelekovixg")
                .withAwsRegion("ovumxnjlsoffpzxyegazwgujni")
                .withAwsTags(mapOf("key6002", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
