// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AccessRules;
import com.azure.resourcemanager.awsconnector.models.AwsLightsailBucketProperties;
import com.azure.resourcemanager.awsconnector.models.LightsailBucketProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated37;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for LightsailBuckets CreateOrReplace.
 */
public final class LightsailBucketsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * LightsailBuckets_CreateOrReplace.json
     */
    /**
     * Sample code: LightsailBuckets_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        lightsailBucketsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.lightsailBuckets()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ctcjoqkhbmgwtqztn")
            .withExistingResourceGroup("rglightsailBucket")
            .withTags(mapOf("key4407", "fakeTokenPlaceholder"))
            .withProperties(
                new LightsailBucketProperties()
                    .withAwsProperties(new AwsLightsailBucketProperties().withAbleToUpdateBundle(true)
                        .withAccessRules(new AccessRules().withAllowPublicOverrides(true)
                            .withGetObject("rzsbxpoywnkypgcjndwgjxurwaggf"))
                        .withBucketArn("khrxjzjloawhlsscrupp")
                        .withBucketName("rbqqhyugkapyxigvfygdmmsig")
                        .withBundleId("s")
                        .withObjectVersioning(true)
                        .withReadOnlyAccessAccounts(Arrays.asList("yptmppbxsgfmbvcoourx"))
                        .withResourcesReceivingAccess(Arrays.asList("abmltbmvfqgzha"))
                        .withTags(Arrays.asList(new TagAutoGenerated37().withKey("fakeTokenPlaceholder")
                            .withValue("onksgozpshqfschbsuyhhui")))
                        .withUrl("dzofeppuoqkmehqcpzpezbmbvrvqbn"))
                    .withPublicCloudConnectorsResourceId("vcenimpnlashmiz")
                    .withAwsAccountId("wqlujalgyyyfgmedzj")
                    .withArn("uoyqkdsfok")
                    .withPublicCloudResourceName("aqpayfdjm")
                    .withAwsSourceSchema("kcjmzaxkkbztlm")
                    .withAwsRegion("kozgryjoinum")
                    .withAwsTags(mapOf("key7074", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
