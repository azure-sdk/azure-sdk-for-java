// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.Architectures;
import com.azure.resourcemanager.awsconnector.models.AwsLambdaFunctionProperties;
import com.azure.resourcemanager.awsconnector.models.Code;
import com.azure.resourcemanager.awsconnector.models.DeadLetterConfig;
import com.azure.resourcemanager.awsconnector.models.Environment;
import com.azure.resourcemanager.awsconnector.models.EphemeralStorageAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.FileSystemConfig;
import com.azure.resourcemanager.awsconnector.models.ImageConfig;
import com.azure.resourcemanager.awsconnector.models.LambdaFunctionProperties;
import com.azure.resourcemanager.awsconnector.models.LoggingConfig;
import com.azure.resourcemanager.awsconnector.models.LoggingConfigApplicationLogLevel;
import com.azure.resourcemanager.awsconnector.models.LoggingConfigLogFormat;
import com.azure.resourcemanager.awsconnector.models.LoggingConfigSystemLogLevel;
import com.azure.resourcemanager.awsconnector.models.PackageType;
import com.azure.resourcemanager.awsconnector.models.RuntimeManagementConfig;
import com.azure.resourcemanager.awsconnector.models.RuntimeManagementConfigUpdateRuntimeOn;
import com.azure.resourcemanager.awsconnector.models.SnapStart;
import com.azure.resourcemanager.awsconnector.models.SnapStartApplyOn;
import com.azure.resourcemanager.awsconnector.models.SnapStartResponse;
import com.azure.resourcemanager.awsconnector.models.SnapStartResponseApplyOn;
import com.azure.resourcemanager.awsconnector.models.SnapStartResponseOptimizationStatus;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated36;
import com.azure.resourcemanager.awsconnector.models.TracingConfig;
import com.azure.resourcemanager.awsconnector.models.TracingConfigMode;
import com.azure.resourcemanager.awsconnector.models.VpcConfigAutoGenerated;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for LambdaFunctions CreateOrReplace.
 */
public final class LambdaFunctionsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * LambdaFunctions_CreateOrReplace.json
     */
    /**
     * Sample code: LambdaFunctions_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        lambdaFunctionsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.lambdaFunctions()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("pipiphijlvjolohsfpmym")
            .withExistingResourceGroup("rglambdaFunction")
            .withTags(mapOf("key9520", "fakeTokenPlaceholder"))
            .withProperties(new LambdaFunctionProperties()
                .withAwsProperties(new AwsLambdaFunctionProperties()
                    .withArchitectures(Arrays.asList(Architectures.ARM64))
                    .withArn("stgpeog")
                    .withCode(new Code().withImageUri("mumnivivaclgokdozsqygicoz")
                        .withS3Bucket("iqxcjanbelhti")
                        .withS3Key("fakeTokenPlaceholder")
                        .withS3ObjectVersion("ixwkaazvqllwohxjwjtivxy")
                        .withZipFile("cashtgbjnebsmmyijmbuerim"))
                    .withCodeSigningConfigArn("fakeTokenPlaceholder")
                    .withDeadLetterConfig(new DeadLetterConfig().withTargetArn("yfmmazkodblnhgalpsnx"))
                    .withDescription("yvdoxaozwjzszqnt")
                    .withEnvironment(new Environment().withVariables(mapOf("key999", "fakeTokenPlaceholder")))
                    .withEphemeralStorage(new EphemeralStorageAutoGenerated().withSize(21))
                    .withFileSystemConfigs(
                        Arrays.asList(new FileSystemConfig().withArn("lgaajhamrjhiw").withLocalMountPath("ctjvtoy")))
                    .withFunctionName("fkv")
                    .withHandler("penuepcuxqvyjozfpxcxkujpeiib")
                    .withImageConfig(new ImageConfig().withCommand(Arrays.asList("ypqwmituqujgxriqqe"))
                        .withEntryPoint(Arrays.asList("vfnpuvvmmxttsaolsfocwhrhvaycbd"))
                        .withWorkingDirectory("gnpkvohajxgtqcweloswwofgev"))
                    .withKmsKeyArn("fakeTokenPlaceholder")
                    .withLayers(Arrays.asList("bwczxgdagr"))
                    .withLoggingConfig(
                        new LoggingConfig().withApplicationLogLevel(LoggingConfigApplicationLogLevel.DEBUG)
                            .withLogFormat(LoggingConfigLogFormat.JSON)
                            .withLogGroup("zrsmuig")
                            .withSystemLogLevel(LoggingConfigSystemLogLevel.DEBUG))
                    .withMemorySize(21)
                    .withPackageType(PackageType.IMAGE)
                    .withReservedConcurrentExecutions(28)
                    .withRole("tuoem")
                    .withRuntime("srxhlxqifkewuflrxzjauzdqqkoatl")
                    .withRuntimeManagementConfig(
                        new RuntimeManagementConfig().withRuntimeVersionArn("lqpuhdoaicnpryovplogsolsacxbk")
                            .withUpdateRuntimeOn(RuntimeManagementConfigUpdateRuntimeOn.AUTO))
                    .withSnapStart(new SnapStart().withApplyOn(SnapStartApplyOn.NONE))
                    .withSnapStartResponse(new SnapStartResponse().withApplyOn(SnapStartResponseApplyOn.NONE)
                        .withOptimizationStatus(SnapStartResponseOptimizationStatus.OFF))
                    .withTags(Arrays
                        .asList(new TagAutoGenerated36().withKey("fakeTokenPlaceholder").withValue("qctpnmjttccpi")))
                    .withTimeout(28)
                    .withTracingConfig(new TracingConfig().withMode(TracingConfigMode.ACTIVE))
                    .withVpcConfig(new VpcConfigAutoGenerated().withIpv6AllowedForDualStack(true)
                        .withSecurityGroupIds(Arrays.asList("ovxbygrfhfhno"))
                        .withSubnetIds(Arrays.asList("inqatpkusunkgccviubzkijhrgslec"))))
                .withPublicCloudConnectorsResourceId("izvoucedmqtsihfjz")
                .withAwsAccountId("jhircduhthqiztp")
                .withArn("wksjbkhocigdctupfiheutlmloir")
                .withPublicCloudResourceName("odptbducplnqaqoeleidffnyqfcipg")
                .withAwsSourceSchema("joyfyjrulh")
                .withAwsRegion("nat")
                .withAwsTags(mapOf("key4553", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
