// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsS3AccessControlPolicyProperties;
import com.azure.resourcemanager.awsconnector.models.Grant;
import com.azure.resourcemanager.awsconnector.models.Grantee;
import com.azure.resourcemanager.awsconnector.models.Owner;
import com.azure.resourcemanager.awsconnector.models.Permission;
import com.azure.resourcemanager.awsconnector.models.PermissionEnumValue;
import com.azure.resourcemanager.awsconnector.models.S3AccessControlPolicyProperties;
import com.azure.resourcemanager.awsconnector.models.Type;
import com.azure.resourcemanager.awsconnector.models.TypeEnumValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for S3AccessControlPolicies CreateOrReplace.
 */
public final class S3AccessControlPoliciesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * S3AccessControlPolicies_CreateOrReplace.json
     */
    /**
     * Sample code: S3AccessControlPolicies_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        s3AccessControlPoliciesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.s3AccessControlPolicies()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ngeydiaovh")
            .withExistingResourceGroup("rgs3AccessControlPolicy")
            .withTags(mapOf("key3435", "fakeTokenPlaceholder"))
            .withProperties(
                new S3AccessControlPolicyProperties()
                    .withAwsProperties(
                        new AwsS3AccessControlPolicyProperties()
                            .withGrants(
                                Arrays
                                    .asList(
                                        new Grant()
                                            .withGrantee(new Grantee().withDisplayName("xlmygaefkokdbvi")
                                                .withEmailAddress("crwbnkkz")
                                                .withId("uyhsprjfhvowaugesuopxt")
                                                .withType(new TypeEnumValue()
                                                    .withValue(Type.fromString("AmazonCustomerByEmail")))
                                                .withUri("yzwxkelbvsi"))
                                            .withPermission(
                                                new PermissionEnumValue().withValue(Permission.FULL_CONTROL))))
                            .withOwner(new Owner().withDisplayName("klnmzlbodf").withId("slxuomdlbhuf")))
                    .withPublicCloudConnectorsResourceId("tpjrczwnhnoxoddvflvntzvw")
                    .withAwsAccountId("vdzgygqqjlohlqcrnidexbnxccnqjn")
                    .withArn("djqvocoytmrzmkkinwskicuebi")
                    .withPublicCloudResourceName("hytdmduqsymgluymquc")
                    .withAwsSourceSchema("maxtroudgkwcrkhofvwigmhihju")
                    .withAwsRegion("ae")
                    .withAwsTags(mapOf("key2280", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
