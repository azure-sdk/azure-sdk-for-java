// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2SubnetProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2SubnetProperties;
import com.azure.resourcemanager.awsconnector.models.PrivateDnsNameOptionsOnLaunchModelProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated20;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2Subnets CreateOrReplace.
 */
public final class Ec2SubnetsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2Subnets_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2Subnets_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2SubnetsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2Subnets()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("zlyeymkfsbtninhfrnvrhxprr")
            .withExistingResourceGroup("rgec2Subnet")
            .withTags(mapOf("key8525", "fakeTokenPlaceholder"))
            .withProperties(
                new Ec2SubnetProperties()
                    .withAwsProperties(
                        new AwsEc2SubnetProperties().withAssignIpv6AddressOnCreation(true)
                            .withAvailabilityZone("forrknmiozum")
                            .withAvailabilityZoneId("gbjfdurjqxgejgwo")
                            .withCidrBlock("sisksglodnipqskrsfsvkpcrrcy")
                            .withEnableDns64(true)
                            .withEnableLniAtDeviceIndex(1)
                            .withIpv4IpamPoolId("jdpbqiv")
                            .withIpv4NetmaskLength(18)
                            .withIpv6CidrBlock("ayzvyvftxekjogtumuln")
                            .withIpv6CidrBlocks(Arrays.asList("amuwewdpaadfixhakcdaqrjzlskguz"))
                            .withIpv6IpamPoolId("lenenhwtwwet")
                            .withIpv6Native(true)
                            .withIpv6NetmaskLength(16)
                            .withMapPublicIpOnLaunch(true)
                            .withNetworkAclAssociationId("saevhbbbzksuojanmdoizrhyxo")
                            .withOutpostArn("qzuvnwxqc")
                            .withPrivateDnsNameOptionsOnLaunch(new PrivateDnsNameOptionsOnLaunchModelProperties()
                                .withEnableResourceNameDnsAaaaRecord(true)
                                .withEnableResourceNameDnsARecord(true)
                                .withHostnameType("cbuc"))
                            .withSubnetId("vxxbkvimjzmcfoxur")
                            .withTags(Arrays.asList(new TagAutoGenerated20().withKey("fakeTokenPlaceholder")
                                .withValue("bfgzdnenxrviyueqzftrrvu")))
                            .withVpcId("aqqzsoyvmaxfyqddvthvxlhdti"))
                    .withPublicCloudConnectorsResourceId("svkjfvphtfxopebxrcdvwyj")
                    .withAwsAccountId("mmlzefobqbimxcbqwrkitlgfu")
                    .withArn("swrduvxfquidiycxlrijjixfbwb")
                    .withPublicCloudResourceName("p")
                    .withAwsSourceSchema("wyjdcprcwjbw")
                    .withAwsRegion("huifdbndfvqyztfwfclpqlxupzib")
                    .withAwsTags(mapOf("key3667", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
