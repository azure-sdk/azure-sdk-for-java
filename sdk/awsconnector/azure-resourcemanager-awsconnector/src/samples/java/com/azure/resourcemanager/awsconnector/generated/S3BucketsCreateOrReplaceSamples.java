// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AbortIncompleteMultipartUpload;
import com.azure.resourcemanager.awsconnector.models.AccelerateConfiguration;
import com.azure.resourcemanager.awsconnector.models.AccelerateConfigurationAccelerationStatus;
import com.azure.resourcemanager.awsconnector.models.AccessControl;
import com.azure.resourcemanager.awsconnector.models.AccessControlTranslation;
import com.azure.resourcemanager.awsconnector.models.AnalyticsConfiguration;
import com.azure.resourcemanager.awsconnector.models.AwsS3BucketProperties;
import com.azure.resourcemanager.awsconnector.models.BucketEncryption;
import com.azure.resourcemanager.awsconnector.models.CorsConfiguration;
import com.azure.resourcemanager.awsconnector.models.CorsRule;
import com.azure.resourcemanager.awsconnector.models.CorsRuleAllowedMethods;
import com.azure.resourcemanager.awsconnector.models.DataExport;
import com.azure.resourcemanager.awsconnector.models.DefaultRetention;
import com.azure.resourcemanager.awsconnector.models.DefaultRetentionMode;
import com.azure.resourcemanager.awsconnector.models.DeleteMarkerReplication;
import com.azure.resourcemanager.awsconnector.models.DeleteMarkerReplicationStatus;
import com.azure.resourcemanager.awsconnector.models.Destination;
import com.azure.resourcemanager.awsconnector.models.DestinationFormat;
import com.azure.resourcemanager.awsconnector.models.EncryptionConfigurationAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.EventBridgeConfiguration;
import com.azure.resourcemanager.awsconnector.models.FilterRule;
import com.azure.resourcemanager.awsconnector.models.IntelligentTieringConfiguration;
import com.azure.resourcemanager.awsconnector.models.IntelligentTieringConfigurationStatus;
import com.azure.resourcemanager.awsconnector.models.InventoryConfiguration;
import com.azure.resourcemanager.awsconnector.models.InventoryConfigurationIncludedObjectVersions;
import com.azure.resourcemanager.awsconnector.models.InventoryConfigurationOptionalFields;
import com.azure.resourcemanager.awsconnector.models.InventoryConfigurationScheduleFrequency;
import com.azure.resourcemanager.awsconnector.models.LambdaConfiguration;
import com.azure.resourcemanager.awsconnector.models.LifecycleConfiguration;
import com.azure.resourcemanager.awsconnector.models.LoggingConfiguration;
import com.azure.resourcemanager.awsconnector.models.Metrics;
import com.azure.resourcemanager.awsconnector.models.MetricsConfiguration;
import com.azure.resourcemanager.awsconnector.models.MetricsStatus;
import com.azure.resourcemanager.awsconnector.models.NoncurrentVersionExpiration;
import com.azure.resourcemanager.awsconnector.models.NoncurrentVersionTransition;
import com.azure.resourcemanager.awsconnector.models.NoncurrentVersionTransitionStorageClass;
import com.azure.resourcemanager.awsconnector.models.NotificationConfigurationAutoGenerated2;
import com.azure.resourcemanager.awsconnector.models.NotificationFilter;
import com.azure.resourcemanager.awsconnector.models.ObjectLockConfiguration;
import com.azure.resourcemanager.awsconnector.models.ObjectLockRule;
import com.azure.resourcemanager.awsconnector.models.OwnershipControls;
import com.azure.resourcemanager.awsconnector.models.OwnershipControlsRule;
import com.azure.resourcemanager.awsconnector.models.OwnershipControlsRuleObjectOwnership;
import com.azure.resourcemanager.awsconnector.models.PartitionedPrefix;
import com.azure.resourcemanager.awsconnector.models.PartitionedPrefixPartitionDateSource;
import com.azure.resourcemanager.awsconnector.models.PublicAccessBlockConfigurationAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.QueueConfiguration;
import com.azure.resourcemanager.awsconnector.models.RedirectAllRequestsTo;
import com.azure.resourcemanager.awsconnector.models.RedirectAllRequestsToProtocol;
import com.azure.resourcemanager.awsconnector.models.RedirectRule;
import com.azure.resourcemanager.awsconnector.models.RedirectRuleProtocol;
import com.azure.resourcemanager.awsconnector.models.ReplicaModifications;
import com.azure.resourcemanager.awsconnector.models.ReplicaModificationsStatus;
import com.azure.resourcemanager.awsconnector.models.ReplicationConfigurationAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ReplicationDestinationAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ReplicationDestinationStorageClass;
import com.azure.resourcemanager.awsconnector.models.ReplicationRule;
import com.azure.resourcemanager.awsconnector.models.ReplicationRuleAndOperator;
import com.azure.resourcemanager.awsconnector.models.ReplicationRuleFilter;
import com.azure.resourcemanager.awsconnector.models.ReplicationRuleStatus;
import com.azure.resourcemanager.awsconnector.models.ReplicationTime;
import com.azure.resourcemanager.awsconnector.models.ReplicationTimeStatus;
import com.azure.resourcemanager.awsconnector.models.ReplicationTimeValue;
import com.azure.resourcemanager.awsconnector.models.RoutingRule;
import com.azure.resourcemanager.awsconnector.models.RoutingRuleCondition;
import com.azure.resourcemanager.awsconnector.models.Rule;
import com.azure.resourcemanager.awsconnector.models.RuleStatus;
import com.azure.resourcemanager.awsconnector.models.S3BucketProperties;
import com.azure.resourcemanager.awsconnector.models.S3KeyFilter;
import com.azure.resourcemanager.awsconnector.models.ServerSideEncryptionByDefault;
import com.azure.resourcemanager.awsconnector.models.ServerSideEncryptionByDefaultSseAlgorithm;
import com.azure.resourcemanager.awsconnector.models.ServerSideEncryptionRule;
import com.azure.resourcemanager.awsconnector.models.SourceSelectionCriteria;
import com.azure.resourcemanager.awsconnector.models.SseKmsEncryptedObjects;
import com.azure.resourcemanager.awsconnector.models.SseKmsEncryptedObjectsStatus;
import com.azure.resourcemanager.awsconnector.models.StorageClassAnalysis;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated50;
import com.azure.resourcemanager.awsconnector.models.TagFilter;
import com.azure.resourcemanager.awsconnector.models.TargetObjectKeyFormat;
import com.azure.resourcemanager.awsconnector.models.Tiering;
import com.azure.resourcemanager.awsconnector.models.TieringAccessTier;
import com.azure.resourcemanager.awsconnector.models.TopicConfiguration;
import com.azure.resourcemanager.awsconnector.models.Transition;
import com.azure.resourcemanager.awsconnector.models.TransitionStorageClass;
import com.azure.resourcemanager.awsconnector.models.VersioningConfiguration;
import com.azure.resourcemanager.awsconnector.models.VersioningConfigurationStatus;
import com.azure.resourcemanager.awsconnector.models.WebsiteConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for S3Buckets CreateOrReplace.
 */
public final class S3BucketsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * S3Buckets_CreateOrReplace.json
     */
    /**
     * Sample code: S3Buckets_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void s3BucketsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.s3Buckets()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("pesmjbocvf")
            .withExistingResourceGroup("rgs3Bucket")
            .withTags(mapOf("key8605", "fakeTokenPlaceholder"))
            .withProperties(
                new S3BucketProperties()
                    .withAwsProperties(
                        new AwsS3BucketProperties()
                            .withAccelerateConfiguration(new AccelerateConfiguration()
                                .withAccelerationStatus(AccelerateConfigurationAccelerationStatus.ENABLED))
                            .withAccessControl(AccessControl.AUTHENTICATED_READ)
                            .withAnalyticsConfigurations(Arrays.asList(new AnalyticsConfiguration().withId("ioxkjkuclx")
                                .withPrefix("errquicjtmxuidndown")
                                .withStorageClassAnalysis(new StorageClassAnalysis().withDataExport(new DataExport()
                                    .withDestination(new Destination().withBucketAccountId("sfgcxqtuacvejulm")
                                        .withBucketArn("iuwuakbkkh")
                                        .withFormat(DestinationFormat.CSV)
                                        .withPrefix("bnbqkueiiffpl"))
                                    .withOutputSchemaVersion("ojzzqnkekust")))
                                .withTagFilters(
                                    Arrays.asList(new TagFilter().withKey("fakeTokenPlaceholder").withValue("fsby")))))
                            .withArn("wdn")
                            .withBucketEncryption(
                                new BucketEncryption().withServerSideEncryptionConfiguration(
                                    Arrays.asList(new ServerSideEncryptionRule().withBucketKeyEnabled(true)
                                        .withServerSideEncryptionByDefault(new ServerSideEncryptionByDefault()
                                            .withKmsMasterKeyId("fakeTokenPlaceholder")
                                            .withSseAlgorithm(ServerSideEncryptionByDefaultSseAlgorithm.AES256)))))
                            .withBucketName("qapantghvzujpa")
                            .withCorsConfiguration(new CorsConfiguration().withCorsRules(
                                Arrays.asList(new CorsRule().withAllowedHeaders(Arrays.asList("zzooekoypz"))
                                    .withAllowedMethods(Arrays.asList(CorsRuleAllowedMethods.DELETE))
                                    .withAllowedOrigins(Arrays.asList("tqldxbbws"))
                                    .withExposedHeaders(Arrays.asList("wjlikohhmisfgumcfzrnvg"))
                                    .withId("zvasxfnbnbpftihvtosdnlmskv")
                                    .withMaxAge(9))))
                            .withDomainName("vbhotuxputambztq")
                            .withDualStackDomainName("sryuphsbzszrwamvrcsihe")
                            .withIntelligentTieringConfigurations(
                                Arrays.asList(new IntelligentTieringConfiguration().withId("dbqsgaw")
                                    .withPrefix("lhizynvczgfiqwaiyuqpvnd")
                                    .withStatus(IntelligentTieringConfigurationStatus.DISABLED)
                                    .withTagFilters(Arrays
                                        .asList(new TagFilter().withKey("fakeTokenPlaceholder").withValue("fsby")))
                                    .withTierings(Arrays.asList(
                                        new Tiering().withAccessTier(TieringAccessTier.ARCHIVE_ACCESS).withDays(6)))))
                            .withInventoryConfigurations(Arrays.asList(new InventoryConfiguration()
                                .withDestination(new Destination().withBucketAccountId("sfgcxqtuacvejulm")
                                    .withBucketArn("iuwuakbkkh")
                                    .withFormat(DestinationFormat.CSV)
                                    .withPrefix("bnbqkueiiffpl"))
                                .withEnabled(true)
                                .withId("yqyorzlpsfzzycfeqmdgtsstdze")
                                .withIncludedObjectVersions(InventoryConfigurationIncludedObjectVersions.ALL)
                                .withOptionalFields(
                                    Arrays.asList(InventoryConfigurationOptionalFields.BUCKET_KEY_STATUS))
                                .withPrefix("tuzwyujzrv")
                                .withScheduleFrequency(InventoryConfigurationScheduleFrequency.DAILY)))
                            .withLifecycleConfiguration(new LifecycleConfiguration().withRules(Arrays.asList(new Rule()
                                .withAbortIncompleteMultipartUpload(
                                    new AbortIncompleteMultipartUpload().withDaysAfterInitiation(20))
                                .withExpirationDate("ruijzosqnherfgwbgzbiwau")
                                .withExpirationInDays(8)
                                .withExpiredObjectDeleteMarker(true)
                                .withId("aofbidgki")
                                .withNoncurrentVersionExpiration(
                                    new NoncurrentVersionExpiration().withNewerNoncurrentVersions(4)
                                        .withNoncurrentDays(17))
                                .withNoncurrentVersionExpirationInDays(4)
                                .withNoncurrentVersionTransition(
                                    new NoncurrentVersionTransition().withNewerNoncurrentVersions(6)
                                        .withStorageClass(NoncurrentVersionTransitionStorageClass.DEEP_ARCHIVE)
                                        .withTransitionInDays(8))
                                .withNoncurrentVersionTransitions(
                                    Arrays.asList(new NoncurrentVersionTransition().withNewerNoncurrentVersions(6)
                                        .withStorageClass(NoncurrentVersionTransitionStorageClass.DEEP_ARCHIVE)
                                        .withTransitionInDays(8)))
                                .withObjectSizeGreaterThan("hfifjfbqvmtatza")
                                .withObjectSizeLessThan("ew")
                                .withPrefix("kbsmshvpardhxehfjgszomvekk")
                                .withStatus(RuleStatus.DISABLED)
                                .withTagFilters(
                                    Arrays.asList(new TagFilter().withKey("fakeTokenPlaceholder").withValue("fsby")))
                                .withTransition(new Transition().withStorageClass(TransitionStorageClass.DEEP_ARCHIVE)
                                    .withTransitionDate("cqdrkqznucygxbnccuvxqbtnm")
                                    .withTransitionInDays(14))
                                .withTransitions(
                                    Arrays.asList(new Transition().withStorageClass(TransitionStorageClass.DEEP_ARCHIVE)
                                        .withTransitionDate("cqdrkqznucygxbnccuvxqbtnm")
                                        .withTransitionInDays(14))))))
                            .withLoggingConfiguration(new LoggingConfiguration().withDestinationBucketName("aujj")
                                .withLogFilePrefix("vdmmbfnvymowpvmhbsagekbokzvp")
                                .withTargetObjectKeyFormat(
                                    new TargetObjectKeyFormat().withPartitionedPrefix(new PartitionedPrefix()
                                        .withPartitionDateSource(PartitionedPrefixPartitionDateSource.DELIVERY_TIME))))
                            .withMetricsConfigurations(
                                Arrays.asList(new MetricsConfiguration()
                                    .withAccessPointArn("tkhjqpjfplj")
                                    .withId("ggheleujxadbvbjogd")
                                    .withPrefix("zg")
                                    .withTagFilters(Arrays
                                        .asList(new TagFilter().withKey("fakeTokenPlaceholder").withValue("fsby")))))
                            .withNotificationConfiguration(new NotificationConfigurationAutoGenerated2()
                                .withEventBridgeConfiguration(
                                    new EventBridgeConfiguration().withEventBridgeEnabled(true))
                                .withLambdaConfigurations(
                                    Arrays.asList(new LambdaConfiguration().withEvent("zpvewswtoarduycggotzdneptucwix")
                                        .withFilter(new NotificationFilter().withS3Key(new S3KeyFilter().withRules(
                                            Arrays.asList(new FilterRule().withName("ohgjzuamjncbifvbkldogxjuxvhvz")
                                                .withValue("dauvnhzxpkpqutnrl")))))
                                        .withFunction("zmyzygfaojliiryslfyuyme")))
                                .withQueueConfigurations(
                                    Arrays.asList(new QueueConfiguration().withEvent("qgcdpcvmkvjivvpvmmaeqrictlznb")
                                        .withFilter(new NotificationFilter().withS3Key(new S3KeyFilter().withRules(
                                            Arrays.asList(new FilterRule().withName("ohgjzuamjncbifvbkldogxjuxvhvz")
                                                .withValue("dauvnhzxpkpqutnrl")))))
                                        .withQueue("qwlbvlgmwiaegulyybqggopf")))
                                .withTopicConfigurations(Arrays.asList(new TopicConfiguration().withEvent("kxl")
                                    .withFilter(new NotificationFilter().withS3Key(new S3KeyFilter().withRules(
                                        Arrays.asList(new FilterRule().withName("ohgjzuamjncbifvbkldogxjuxvhvz")
                                            .withValue("dauvnhzxpkpqutnrl")))))
                                    .withTopic("cj"))))
                            .withObjectLockConfiguration(new ObjectLockConfiguration().withObjectLockEnabled("aiocf")
                                .withRule(new ObjectLockRule().withDefaultRetention(new DefaultRetention().withDays(22)
                                    .withMode(DefaultRetentionMode.COMPLIANCE)
                                    .withYears(11))))
                            .withObjectLockEnabled(true)
                            .withOwnershipControls(new OwnershipControls().withRules(Arrays
                                .asList(new OwnershipControlsRule()
                                    .withObjectOwnership(OwnershipControlsRuleObjectOwnership.BUCKET_OWNER_ENFORCED))))
                            .withPublicAccessBlockConfiguration(
                                new PublicAccessBlockConfigurationAutoGenerated().withBlockPublicAcls(true)
                                    .withBlockPublicPolicy(true)
                                    .withIgnorePublicAcls(true)
                                    .withRestrictPublicBuckets(true))
                            .withRegionalDomainName("xdbzcoemgixrqq")
                            .withReplicationConfiguration(new ReplicationConfigurationAutoGenerated()
                                .withRole("rqafufwtmuflkqet")
                                .withRules(Arrays.asList(new ReplicationRule()
                                    .withDeleteMarkerReplication(new DeleteMarkerReplication()
                                        .withStatus(DeleteMarkerReplicationStatus.DISABLED))
                                    .withDestination(new ReplicationDestinationAutoGenerated()
                                        .withAccessControlTranslation(
                                            new AccessControlTranslation().withOwner("smyptov"))
                                        .withAccount("hwqiekzz")
                                        .withBucket("prjlsmdhkwrputvpdavgn")
                                        .withEncryptionConfiguration(new EncryptionConfigurationAutoGenerated()
                                            .withReplicaKmsKeyId("fakeTokenPlaceholder"))
                                        .withMetrics(
                                            new Metrics().withEventThreshold(new ReplicationTimeValue().withMinutes(18))
                                                .withStatus(MetricsStatus.DISABLED))
                                        .withReplicationTime(
                                            new ReplicationTime().withStatus(ReplicationTimeStatus.DISABLED)
                                                .withTime(new ReplicationTimeValue().withMinutes(18)))
                                        .withStorageClass(ReplicationDestinationStorageClass.DEEP_ARCHIVE))
                                    .withFilter(new ReplicationRuleFilter()
                                        .withAnd(
                                            new ReplicationRuleAndOperator().withPrefix("rlralilpznxqfpcseysvvxmfaor")
                                                .withTagFilters(Arrays.asList(
                                                    new TagFilter().withKey("fakeTokenPlaceholder").withValue("fsby"))))
                                        .withPrefix("etzfeufdxmcvjzpvxbjmzikok")
                                        .withTagFilter(
                                            new TagFilter().withKey("fakeTokenPlaceholder").withValue("fsby")))
                                    .withId("fjcfzahlddm")
                                    .withPrefix("agykvphwwnfevfucrxugxejv")
                                    .withPriority(20)
                                    .withSourceSelectionCriteria(new SourceSelectionCriteria()
                                        .withReplicaModifications(
                                            new ReplicaModifications().withStatus(ReplicaModificationsStatus.DISABLED))
                                        .withSseKmsEncryptedObjects(new SseKmsEncryptedObjects()
                                            .withStatus(SseKmsEncryptedObjectsStatus.DISABLED)))
                                    .withStatus(ReplicationRuleStatus.DISABLED))))
                            .withTags(Arrays.asList(new TagAutoGenerated50().withKey("fakeTokenPlaceholder")
                                .withValue("otwjdamxqdydqwujwyfh")))
                            .withVersioningConfiguration(
                                new VersioningConfiguration().withStatus(VersioningConfigurationStatus.ENABLED))
                            .withWebsiteConfiguration(new WebsiteConfiguration()
                                .withErrorDocument("zxifnrlbyapkasrrhamdkdsqk")
                                .withIndexDocument("umbhsxlihqldbh")
                                .withRedirectAllRequestsTo(new RedirectAllRequestsTo()
                                    .withHostname("sxmd")
                                    .withProtocol(RedirectAllRequestsToProtocol.HTTP))
                                .withRoutingRules(Arrays.asList(new RoutingRule()
                                    .withRedirectRule(new RedirectRule().withHostname("odmugwc")
                                        .withHttpRedirectCode("fakeTokenPlaceholder")
                                        .withProtocol(RedirectRuleProtocol.HTTP)
                                        .withReplaceKeyPrefixWith("fakeTokenPlaceholder")
                                        .withReplaceKeyWith("fakeTokenPlaceholder"))
                                    .withRoutingRuleCondition(new RoutingRuleCondition()
                                        .withHttpErrorCodeReturnedEquals("fakeTokenPlaceholder")
                                        .withKeyPrefixEquals("fakeTokenPlaceholder")))))
                            .withWebsiteUrl("vtlwozcgstjkkmgfywinjoreomvw"))
                    .withPublicCloudConnectorsResourceId("i")
                    .withAwsAccountId("rfckvyuni")
                    .withArn("qoufjwcexyvk")
                    .withPublicCloudResourceName("fmugqeeykklaccblyqplo")
                    .withAwsSourceSchema("kywnqkadqm")
                    .withAwsRegion("kckriyydtrwdlelcuztzfeptvcbwj")
                    .withAwsTags(mapOf("key1337", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
