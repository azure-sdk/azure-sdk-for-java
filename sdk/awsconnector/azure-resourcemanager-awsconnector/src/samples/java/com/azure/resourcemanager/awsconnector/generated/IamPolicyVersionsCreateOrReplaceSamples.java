// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsIamPolicyVersionProperties;
import com.azure.resourcemanager.awsconnector.models.IamPolicyVersionProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IamPolicyVersions CreateOrReplace.
 */
public final class IamPolicyVersionsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * IamPolicyVersions_CreateOrReplace.json
     */
    /**
     * Sample code: IamPolicyVersions_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        iamPolicyVersionsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.iamPolicyVersions()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("wtyx")
            .withExistingResourceGroup("rgiamPolicyVersion")
            .withTags(mapOf("key6034", "fakeTokenPlaceholder"))
            .withProperties(new IamPolicyVersionProperties()
                .withAwsProperties(
                    new AwsIamPolicyVersionProperties().withCreateDate(OffsetDateTime.parse("2024-10-08T03:54:21.310Z"))
                        .withDocument("bpzfzhilykgroobhu")
                        .withIsDefaultVersion(true)
                        .withVersionId("mjxbhpksrctdbegeyhrsyveoyre"))
                .withPublicCloudConnectorsResourceId("hqotja")
                .withAwsAccountId("xiv")
                .withArn("mszogqxtswvseqggugfxstkwivx")
                .withPublicCloudResourceName("mphznssuferlzunnbjbl")
                .withAwsSourceSchema("ljldtynekavvptoqhcvqdklc")
                .withAwsRegion("bhdamksbkmvjl")
                .withAwsTags(mapOf("key2871", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
