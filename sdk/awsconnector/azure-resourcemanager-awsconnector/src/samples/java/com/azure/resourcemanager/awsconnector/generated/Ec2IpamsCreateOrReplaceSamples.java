// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2IpamProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2IpamProperties;
import com.azure.resourcemanager.awsconnector.models.IpamOperatingRegion;
import com.azure.resourcemanager.awsconnector.models.IpamState;
import com.azure.resourcemanager.awsconnector.models.IpamStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.IpamTier;
import com.azure.resourcemanager.awsconnector.models.IpamTierEnumValue;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated13;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2Ipams CreateOrReplace.
 */
public final class Ec2IpamsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2Ipams_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2Ipams_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2IpamsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2Ipams()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("lhjepajysvu")
            .withExistingResourceGroup("rgec2Ipam")
            .withTags(mapOf("key6845", "fakeTokenPlaceholder"))
            .withProperties(new Ec2IpamProperties()
                .withAwsProperties(
                    new AwsEc2IpamProperties().withDefaultResourceDiscoveryAssociationId("upvbhujajpxidvdneaxudp")
                        .withDefaultResourceDiscoveryId("vmatfdwggwysxz")
                        .withDescription("suxncf")
                        .withIpamArn("ounjgxqwlmalbxgwqepaivhpqm")
                        .withIpamId("baiefjd")
                        .withIpamRegion("dfdcpbefpcajoep")
                        .withOperatingRegions(Arrays.asList(new IpamOperatingRegion().withRegionName("racqmjs")))
                        .withOwnerId("sbcvakmustluzumdv")
                        .withPrivateDefaultScopeId("sgytzjkrmsnzccmbos")
                        .withPublicDefaultScopeId("uqxvzoqzwfiaerfqkufw")
                        .withResourceDiscoveryAssociationCount(28)
                        .withScopeCount(8)
                        .withState(new IpamStateEnumValue().withValue(IpamState.CREATE_COMPLETE))
                        .withStateMessage("wehaarwg")
                        .withTags(Arrays.asList(
                            new TagAutoGenerated13().withKey("fakeTokenPlaceholder").withValue("jnzubqdwmuxxyakaosx")))
                        .withTier(new IpamTierEnumValue().withValue(IpamTier.ADVANCED)))
                .withPublicCloudConnectorsResourceId("irfihvsxrgyhmubmuieufe")
                .withAwsAccountId("fyceaucatzscmtkaw")
                .withArn("gcjcnzkmoauyi")
                .withPublicCloudResourceName("y")
                .withAwsSourceSchema("ivdglskrjwzg")
                .withAwsRegion("rvtevmqvjnnignaaojkgqgzrsi")
                .withAwsTags(mapOf("key4146", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
