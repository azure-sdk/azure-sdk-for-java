// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.fluent.models.Ec2InstanceInner;
import com.azure.resourcemanager.awsconnector.models.AmdSevSnpSpecification;
import com.azure.resourcemanager.awsconnector.models.AmdSevSnpSpecificationEnumValue;
import com.azure.resourcemanager.awsconnector.models.ArchitectureValues;
import com.azure.resourcemanager.awsconnector.models.ArchitectureValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.AttachmentStatus;
import com.azure.resourcemanager.awsconnector.models.AttachmentStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.AwsEc2InstanceProperties;
import com.azure.resourcemanager.awsconnector.models.BootModeValues;
import com.azure.resourcemanager.awsconnector.models.BootModeValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.CapacityReservationPreference;
import com.azure.resourcemanager.awsconnector.models.CapacityReservationPreferenceEnumValue;
import com.azure.resourcemanager.awsconnector.models.CapacityReservationSpecificationResponse;
import com.azure.resourcemanager.awsconnector.models.CapacityReservationTargetResponse;
import com.azure.resourcemanager.awsconnector.models.ConnectionTrackingSpecificationResponse;
import com.azure.resourcemanager.awsconnector.models.CpuOptions;
import com.azure.resourcemanager.awsconnector.models.DeviceType;
import com.azure.resourcemanager.awsconnector.models.DeviceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.EbsInstanceBlockDevice;
import com.azure.resourcemanager.awsconnector.models.Ec2InstanceProperties;
import com.azure.resourcemanager.awsconnector.models.ElasticGpuAssociation;
import com.azure.resourcemanager.awsconnector.models.ElasticInferenceAcceleratorAssociation;
import com.azure.resourcemanager.awsconnector.models.EnclaveOptions;
import com.azure.resourcemanager.awsconnector.models.GroupIdentifier;
import com.azure.resourcemanager.awsconnector.models.HibernationOptions;
import com.azure.resourcemanager.awsconnector.models.HostnameType;
import com.azure.resourcemanager.awsconnector.models.HostnameTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.HttpTokensState;
import com.azure.resourcemanager.awsconnector.models.HttpTokensStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.HypervisorType;
import com.azure.resourcemanager.awsconnector.models.HypervisorTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.IamInstanceProfile;
import com.azure.resourcemanager.awsconnector.models.InstanceAttachmentEnaSrdSpecification;
import com.azure.resourcemanager.awsconnector.models.InstanceAttachmentEnaSrdUdpSpecification;
import com.azure.resourcemanager.awsconnector.models.InstanceAutoRecoveryState;
import com.azure.resourcemanager.awsconnector.models.InstanceAutoRecoveryStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceBlockDeviceMapping;
import com.azure.resourcemanager.awsconnector.models.InstanceBootModeValues;
import com.azure.resourcemanager.awsconnector.models.InstanceBootModeValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceIpv4Prefix;
import com.azure.resourcemanager.awsconnector.models.InstanceIpv6Address;
import com.azure.resourcemanager.awsconnector.models.InstanceIpv6Prefix;
import com.azure.resourcemanager.awsconnector.models.InstanceLifecycleType;
import com.azure.resourcemanager.awsconnector.models.InstanceLifecycleTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceMaintenanceOptions;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataEndpointState;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataEndpointStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataOptionsResponse;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataOptionsState;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataOptionsStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataProtocolState;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataProtocolStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataTagsState;
import com.azure.resourcemanager.awsconnector.models.InstanceMetadataTagsStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceNetworkInterface;
import com.azure.resourcemanager.awsconnector.models.InstanceNetworkInterfaceAssociation;
import com.azure.resourcemanager.awsconnector.models.InstanceNetworkInterfaceAttachment;
import com.azure.resourcemanager.awsconnector.models.InstancePrivateIpAddress;
import com.azure.resourcemanager.awsconnector.models.InstanceState;
import com.azure.resourcemanager.awsconnector.models.InstanceStateName;
import com.azure.resourcemanager.awsconnector.models.InstanceStateNameEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceType;
import com.azure.resourcemanager.awsconnector.models.InstanceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.LicenseConfiguration;
import com.azure.resourcemanager.awsconnector.models.Monitoring;
import com.azure.resourcemanager.awsconnector.models.MonitoringState;
import com.azure.resourcemanager.awsconnector.models.MonitoringStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.NetworkInterfaceStatus;
import com.azure.resourcemanager.awsconnector.models.NetworkInterfaceStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.Placement;
import com.azure.resourcemanager.awsconnector.models.PlatformValues;
import com.azure.resourcemanager.awsconnector.models.PlatformValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.PrivateDnsNameOptionsResponse;
import com.azure.resourcemanager.awsconnector.models.ProductCode;
import com.azure.resourcemanager.awsconnector.models.ProductCodeValues;
import com.azure.resourcemanager.awsconnector.models.ProductCodeValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.StateReason;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated12;
import com.azure.resourcemanager.awsconnector.models.Tenancy;
import com.azure.resourcemanager.awsconnector.models.TenancyEnumValue;
import com.azure.resourcemanager.awsconnector.models.VirtualizationType;
import com.azure.resourcemanager.awsconnector.models.VirtualizationTypeEnumValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2Instances CreateOrReplace.
 */
public final class Ec2InstancesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2Instances_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2Instances_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2InstancesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2Instances()
            .createOrReplace("c",
                new Ec2InstanceInner()
                    .withProperties(
                        new Ec2InstanceProperties()
                            .withAwsProperties(new AwsEc2InstanceProperties().withAmiLaunchIndex(27)
                                .withArchitecture(new ArchitectureValuesEnumValue().withValue(ArchitectureValues.ARM64))
                                .withBlockDeviceMappings(
                                    Arrays.asList(new InstanceBlockDeviceMapping().withDeviceName("tfaglaaaklzilxzmk")
                                        .withEbs(new EbsInstanceBlockDevice()
                                            .withAssociatedResource("pgkczdagxihtrkzzaiuzennp")
                                            .withAttachTime(OffsetDateTime.parse("2024-10-08T03:49:10.616Z"))
                                            .withDeleteOnTermination(true)
                                            .withStatus(
                                                new AttachmentStatusEnumValue().withValue(AttachmentStatus.ATTACHED))
                                            .withVolumeId("ilihhdgfhpylwqnaglcmj")
                                            .withVolumeOwnerId("ruylzxnmlundujqdqkqocknldkttka"))))
                                .withBootMode(new BootModeValuesEnumValue().withValue(BootModeValues.LEGACY_BIOS))
                                .withCapacityReservationId("rgxeywdieyjfmp")
                                .withCapacityReservationSpecification(new CapacityReservationSpecificationResponse()
                                    .withCapacityReservationPreference(new CapacityReservationPreferenceEnumValue()
                                        .withValue(CapacityReservationPreference.NONE))
                                    .withCapacityReservationTarget(new CapacityReservationTargetResponse()
                                        .withCapacityReservationId("dvdusvbgjrkkuqrelloyysinnzpjb")
                                        .withCapacityReservationResourceGroupArn("itnyqqrlujfkasgzbrvljlbh")))
                                .withClientToken("fakeTokenPlaceholder")
                                .withCpuOptions(new CpuOptions()
                                    .withAmdSevSnp(new AmdSevSnpSpecificationEnumValue()
                                        .withValue(AmdSevSnpSpecification.DISABLED))
                                    .withCoreCount(27)
                                    .withThreadsPerCore(11))
                                .withCurrentInstanceBootMode(
                                    new InstanceBootModeValuesEnumValue().withValue(InstanceBootModeValues.LEGACY_BIOS))
                                .withEbsOptimized(true)
                                .withElasticGpuAssociations(Arrays.asList(
                                    new ElasticGpuAssociation().withElasticGpuAssociationId("jmxqiqiyocefwrivbcumzx")
                                        .withElasticGpuAssociationState("mkteimwlzs")
                                        .withElasticGpuAssociationTime("sosasrnqg")
                                        .withElasticGpuId("dnpmhib")))
                                .withElasticInferenceAcceleratorAssociations(
                                    Arrays.asList(new ElasticInferenceAcceleratorAssociation()
                                        .withElasticInferenceAcceleratorArn("pnbrdzuzjxuwrtpdc")
                                        .withElasticInferenceAcceleratorAssociationId("uoout")
                                        .withElasticInferenceAcceleratorAssociationState("bwbmjkusisjrxxdonwtxkbgbaxk")
                                        .withElasticInferenceAcceleratorAssociationTime(
                                            OffsetDateTime.parse("2024-10-08T03:49:10.617Z"))))
                                .withEnaSupport(true)
                                .withEnclaveOptions(new EnclaveOptions().withEnabled(true))
                                .withHibernationOptions(new HibernationOptions().withConfigured(true))
                                .withHypervisor(new HypervisorTypeEnumValue().withValue(HypervisorType.OVM))
                                .withIamInstanceProfile(
                                    new IamInstanceProfile().withArn("jvju").withId("kdzthqdiqjcknesajpbplmkynzokr"))
                                .withImageId("oemhjwhbzkbcwocprtn")
                                .withInstanceId("czyyyovcqwce")
                                .withInstanceLifecycle(new InstanceLifecycleTypeEnumValue()
                                    .withValue(InstanceLifecycleType.CAPACITY_BLOCK))
                                .withInstanceType(new InstanceTypeEnumValue().withValue(InstanceType.A1_2XLARGE))
                                .withIpv6Address("kuzwkpvttqtjxowkisga")
                                .withKernelId("qqehgoolsvuh")
                                .withKeyName("fakeTokenPlaceholder")
                                .withLaunchTime(OffsetDateTime.parse("2024-10-08T03:49:10.618Z"))
                                .withLicenses(
                                    Arrays.asList(new LicenseConfiguration().withLicenseConfigurationArn("q")))
                                .withMaintenanceOptions(new InstanceMaintenanceOptions()
                                    .withAutoRecovery(new InstanceAutoRecoveryStateEnumValue()
                                        .withValue(InstanceAutoRecoveryState.DEFAULT)))
                                .withMetadataOptions(new InstanceMetadataOptionsResponse()
                                    .withHttpEndpoint(new InstanceMetadataEndpointStateEnumValue()
                                        .withValue(InstanceMetadataEndpointState.DISABLED))
                                    .withHttpProtocolIpv6(new InstanceMetadataProtocolStateEnumValue()
                                        .withValue(InstanceMetadataProtocolState.DISABLED))
                                    .withHttpPutResponseHopLimit(3)
                                    .withHttpTokens(new HttpTokensStateEnumValue().withValue(HttpTokensState.OPTIONAL))
                                    .withInstanceMetadataTags(new InstanceMetadataTagsStateEnumValue()
                                        .withValue(InstanceMetadataTagsState.DISABLED))
                                    .withState(new InstanceMetadataOptionsStateEnumValue()
                                        .withValue(InstanceMetadataOptionsState.APPLIED)))
                                .withMonitoring(new Monitoring()
                                    .withState(new MonitoringStateEnumValue().withValue(MonitoringState.DISABLED)))
                                .withNetworkInterfaces(
                                    Arrays.asList(new InstanceNetworkInterface()
                                        .withAssociation(new InstanceNetworkInterfaceAssociation()
                                            .withCarrierIp("gyqfkluecfuwebntnygczb")
                                            .withCustomerOwnedIp("sw")
                                            .withIpOwnerId("fbrkixipyqjnao")
                                            .withPublicDnsName("oivnzjavxqmctzvhgmsavgwesabny")
                                            .withPublicIp("tojjymqqjmschjp"))
                                        .withAttachment(
                                            new InstanceNetworkInterfaceAttachment()
                                                .withAttachTime(OffsetDateTime.parse("2024-10-08T03:49:10.618Z"))
                                                .withAttachmentId("lsqnlzd")
                                                .withDeleteOnTermination(true)
                                                .withDeviceIndex(11)
                                                .withEnaSrdSpecification(
                                                    new InstanceAttachmentEnaSrdSpecification().withEnaSrdEnabled(true)
                                                        .withEnaSrdUdpSpecification(
                                                            new InstanceAttachmentEnaSrdUdpSpecification()
                                                                .withEnaSrdUdpEnabled(true)))
                                                .withNetworkCardIndex(9)
                                                .withStatus(new AttachmentStatusEnumValue()
                                                    .withValue(AttachmentStatus.ATTACHED)))
                                        .withConnectionTrackingConfiguration(
                                            new ConnectionTrackingSpecificationResponse().withTcpEstablishedTimeout(23)
                                                .withUdpStreamTimeout(24)
                                                .withUdpTimeout(30))
                                        .withDescription("wcdguczvqhelvbuhnx")
                                        .withGroups(Arrays
                                            .asList(new GroupIdentifier().withGroupId("nwupmxpxrzdroizfewqupyddewi")
                                                .withGroupName("gvsaaqihzfcwdmeocclatfqm")))
                                        .withInterfaceType("mphomintds")
                                        .withIpv4Prefixes(
                                            Arrays.asList(new InstanceIpv4Prefix().withIpv4Prefix("ortyghjrffqjz")))
                                        .withIpv6Addresses(Arrays.asList(
                                            new InstanceIpv6Address().withIpv6Address("z").withIsPrimaryIpv6(true)))
                                        .withIpv6Prefixes(Arrays
                                            .asList(new InstanceIpv6Prefix().withIpv6Prefix("cstrptdpvmberviuvuqfd")))
                                        .withMacAddress("k")
                                        .withNetworkInterfaceId("qythf")
                                        .withOwnerId("fvjysbetbyrzccspcenkpvi")
                                        .withPrivateDnsName("yvorusnuuigavdcqqdxecrkmjmhrf")
                                        .withPrivateIpAddress("m")
                                        .withPrivateIpAddresses(Arrays.asList(new InstancePrivateIpAddress()
                                            .withAssociation(new InstanceNetworkInterfaceAssociation()
                                                .withCarrierIp("gyqfkluecfuwebntnygczb")
                                                .withCustomerOwnedIp("sw")
                                                .withIpOwnerId("fbrkixipyqjnao")
                                                .withPublicDnsName("oivnzjavxqmctzvhgmsavgwesabny")
                                                .withPublicIp("tojjymqqjmschjp"))
                                            .withPrimary(true)
                                            .withPrivateDnsName("bdezhkhwoerivtfwgqelrsyiphf")
                                            .withPrivateIpAddress("xcqnyrs")))
                                        .withSourceDestCheck(true)
                                        .withStatus(new NetworkInterfaceStatusEnumValue()
                                            .withValue(NetworkInterfaceStatus.ASSOCIATED))
                                        .withSubnetId("euocsemlw")
                                        .withVpcId("grahbrhjelkewder")))
                                .withOutpostArn("godjddxeidxe")
                                .withPlacement(new Placement().withAffinity("xzseileq")
                                    .withAvailabilityZone("vsfvyosolmnchbavxfvtizqptgmeg")
                                    .withGroupId("davwvkjoij")
                                    .withGroupName("txqgn")
                                    .withHostId("mvbshbhxclztfwffsu")
                                    .withHostResourceGroupArn("zl")
                                    .withPartitionNumber(24)
                                    .withSpreadDomain("t")
                                    .withTenancy(new TenancyEnumValue().withValue(Tenancy.DEDICATED)))
                                .withPlatform(new PlatformValuesEnumValue().withValue(PlatformValues.WINDOWS))
                                .withPlatformDetails("rcwqyqgcruqjcvzcto")
                                .withPrivateDnsName("ieuhntvllhoojakokyt")
                                .withPrivateDnsNameOptions(
                                    new PrivateDnsNameOptionsResponse().withEnableResourceNameDnsAaaaRecord(true)
                                        .withEnableResourceNameDnsARecord(true)
                                        .withHostnameType(new HostnameTypeEnumValue().withValue(HostnameType.IP_NAME)))
                                .withPrivateIpAddress("uosximzwwopktgyzlathmorgqah")
                                .withProductCodes(
                                    Arrays.asList(new ProductCode().withProductCodeId("fakeTokenPlaceholder")
                                        .withProductCodeType(
                                            new ProductCodeValuesEnumValue().withValue(ProductCodeValues.DEVPAY))))
                                .withPublicDnsName("qkucqmeldgiumuzribitahwft")
                                .withPublicIpAddress("ialohsszgtpuycimtqi")
                                .withRamdiskId("ggkfkl")
                                .withRootDeviceName("dbfwarbazrbzcjnh")
                                .withRootDeviceType(new DeviceTypeEnumValue().withValue(DeviceType.EBS))
                                .withSecurityGroups(
                                    Arrays.asList(new GroupIdentifier().withGroupId("nwupmxpxrzdroizfewqupyddewi")
                                        .withGroupName("gvsaaqihzfcwdmeocclatfqm")))
                                .withSourceDestCheck(true)
                                .withSpotInstanceRequestId("qiylxsuuinwyq")
                                .withSriovNetSupport("kiffwvajczdtzwcfeefqespn")
                                .withState(new InstanceState().withCode(18)
                                    .withName(new InstanceStateNameEnumValue().withValue(InstanceStateName.PENDING)))
                                .withStateReason(
                                    new StateReason().withCode("fakeTokenPlaceholder").withMessage("dvgendvpuuzx"))
                                .withStateTransitionReason("arenmfmnvv")
                                .withSubnetId("mgnibedayjllwaidbjh")
                                .withTags(Arrays.asList(new TagAutoGenerated12().withKey("fakeTokenPlaceholder")
                                    .withValue("zztbwjxzwgmnjqhegktznmdrqferd")))
                                .withTpmSupport("fvxtckturm")
                                .withUsageOperation("xrctwrcgpcrhlfjzhdvhiovdlcqafq")
                                .withUsageOperationUpdateTime(OffsetDateTime.parse("2024-10-08T03:49:10.619Z"))
                                .withVirtualizationType(
                                    new VirtualizationTypeEnumValue().withValue(VirtualizationType.HVM))
                                .withVpcId("g"))
                            .withPublicCloudConnectorsResourceId("shnvqmmslrarjuzdpyhlnfxxp")
                            .withAwsAccountId("hhrjjrfopsrebnklxmr")
                            .withArn("noxwkahrsrcnrpz")
                            .withPublicCloudResourceName("sffqiavopmcwltotrpubudq")
                            .withAwsSourceSchema("tncjfmwlkponefezhigbyno")
                            .withAwsRegion("tcaqttnhykcej")
                            .withAwsTags(mapOf("key2934", "fakeTokenPlaceholder"))),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
