// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsNetworkFirewallProperties;
import com.azure.resourcemanager.awsconnector.models.NetworkFirewallProperties;
import com.azure.resourcemanager.awsconnector.models.SubnetMappingAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated41;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NetworkFirewallFirewalls CreateOrReplace.
 */
public final class NetworkFirewallFirewallsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * NetworkFirewallFirewalls_CreateOrReplace.json
     */
    /**
     * Sample code: NetworkFirewallFirewalls_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        networkFirewallFirewallsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.networkFirewallFirewalls()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("shwlgihd")
            .withExistingResourceGroup("rgnetworkFirewallFirewall")
            .withTags(mapOf("key1029", "fakeTokenPlaceholder"))
            .withProperties(new NetworkFirewallProperties().withAwsProperties(new AwsNetworkFirewallProperties()
                .withDeleteProtection(true)
                .withDescription("yjsjz")
                .withEndpointIds(Arrays.asList("ivgfubgdwmucvasgqbxyoxs"))
                .withFirewallArn("eukqjtyapnpaslgpyrjsuuuvrja")
                .withFirewallId("ecwdwcfmctxuqrpliya")
                .withFirewallName("rbcjdcahhnsogdcoklk")
                .withFirewallPolicyArn("evdxwcayrnvbn")
                .withFirewallPolicyChangeProtection(true)
                .withSubnetChangeProtection(true)
                .withSubnetMappings(Arrays.asList(
                    new SubnetMappingAutoGenerated().withIpAddressType("gkcalzfxwkomabldynmunz").withSubnetId("kmo")))
                .withTags(Arrays.asList(
                    new TagAutoGenerated41().withKey("fakeTokenPlaceholder").withValue("fnavszvtxyetugcmqvandzxjawuq")))
                .withVpcId("cxrvqz"))
                .withPublicCloudConnectorsResourceId("qjo")
                .withAwsAccountId("tcfbgbhrgcpvphfftvjmhjqg")
                .withArn("zc")
                .withPublicCloudResourceName("hloidqb")
                .withAwsSourceSchema("syydqlqovymaflzph")
                .withAwsRegion("ctyppkrhygaywzprynu")
                .withAwsTags(mapOf("key9022", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
