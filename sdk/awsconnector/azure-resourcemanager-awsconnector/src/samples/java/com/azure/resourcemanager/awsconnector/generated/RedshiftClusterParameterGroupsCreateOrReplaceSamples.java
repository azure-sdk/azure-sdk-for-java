// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRedshiftClusterParameterGroupProperties;
import com.azure.resourcemanager.awsconnector.models.ParameterAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.RedshiftClusterParameterGroupProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated49;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RedshiftClusterParameterGroups CreateOrReplace.
 */
public final class RedshiftClusterParameterGroupsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * RedshiftClusterParameterGroups_CreateOrReplace.json
     */
    /**
     * Sample code: RedshiftClusterParameterGroups_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void redshiftClusterParameterGroupsCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.redshiftClusterParameterGroups()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("gskgxjliwptm")
            .withExistingResourceGroup("rgredshiftClusterParameterGroup")
            .withTags(mapOf("key4322", "fakeTokenPlaceholder"))
            .withProperties(new RedshiftClusterParameterGroupProperties()
                .withAwsProperties(new AwsRedshiftClusterParameterGroupProperties().withDescription("gvl")
                    .withParameterGroupFamily("bbhnqerzrhqtinntphvuim")
                    .withParameterGroupName("tiqxhqigpmuckmnpgijvnpwzb")
                    .withParameters(Arrays.asList(new ParameterAutoGenerated().withParameterName("jxeucnajvjzv")
                        .withParameterValue("ubxmwmoxeslbruenu")))
                    .withTags(
                        Arrays.asList(new TagAutoGenerated49().withKey("fakeTokenPlaceholder").withValue("qpznlj"))))
                .withPublicCloudConnectorsResourceId("nrs")
                .withAwsAccountId("fdljzalgig")
                .withArn("whliokkrefhwytv")
                .withPublicCloudResourceName("xnrwtxesebdfzrqiamebczhoyjbqeq")
                .withAwsSourceSchema("nkdbqnqvsdnvogwatfxlubppr")
                .withAwsRegion("wrhyhrmwhdmlnjjbrl")
                .withAwsTags(mapOf("key6090", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
