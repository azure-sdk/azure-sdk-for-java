// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2FlowLogProperties;
import com.azure.resourcemanager.awsconnector.models.DestinationOptionsModelProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2FlowLogProperties;
import com.azure.resourcemanager.awsconnector.models.FileFormat;
import com.azure.resourcemanager.awsconnector.models.LogDestinationType;
import com.azure.resourcemanager.awsconnector.models.ResourceType;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated10;
import com.azure.resourcemanager.awsconnector.models.TrafficType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2FlowLogs CreateOrReplace.
 */
public final class Ec2FlowLogsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2FlowLogs_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2FlowLogs_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2FlowLogsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2FlowLogs()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("iheortzyczwfplyjuuqwhdtpscn")
            .withExistingResourceGroup("rgec2FlowLog")
            .withTags(mapOf("key8783", "fakeTokenPlaceholder"))
            .withProperties(new Ec2FlowLogProperties()
                .withAwsProperties(new AwsEc2FlowLogProperties().withDeliverCrossAccountRole("upu")
                    .withDeliverLogsPermissionArn("sfhmarwniuptmkaegsplmsozsmc")
                    .withDestinationOptions(new DestinationOptionsModelProperties().withFileFormat(FileFormat.PARQUET)
                        .withHiveCompatiblePartitions(true)
                        .withPerHourPartition(true))
                    .withId("idflwxdxpu")
                    .withLogDestination("ztqhcrirplxmgncvubutyzqefvd")
                    .withLogDestinationType(LogDestinationType.CLOUD_WATCH_LOGS)
                    .withLogFormat("miqwrkvqyq")
                    .withLogGroupName("gptervjekilsbzqokcmrbumaie")
                    .withMaxAggregationInterval(15)
                    .withResourceId("mokmavuqvq")
                    .withResourceType(ResourceType.fromString("NetworkInterface"))
                    .withTags(Arrays.asList(new TagAutoGenerated10().withKey("fakeTokenPlaceholder")
                        .withValue("qdqsngozfinennzbilnzeemjzilpb")))
                    .withTrafficType(TrafficType.ACCEPT))
                .withPublicCloudConnectorsResourceId("djh")
                .withAwsAccountId("shsomlkgpjnxnonvrv")
                .withArn("ilajcrcqxitnhyhorqitssmvsfwen")
                .withPublicCloudResourceName("ymv")
                .withAwsSourceSchema("pnjgqxqhnwhcs")
                .withAwsRegion("stazvnpsmrpkoxyyzngdkkuif")
                .withAwsTags(mapOf("key3000", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
