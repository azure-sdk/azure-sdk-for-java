// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsSsmInstanceInformationProperties;
import com.azure.resourcemanager.awsconnector.models.InstanceAggregatedAssociationOverview;
import com.azure.resourcemanager.awsconnector.models.PingStatus;
import com.azure.resourcemanager.awsconnector.models.PingStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.PlatformType;
import com.azure.resourcemanager.awsconnector.models.PlatformTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ResourceType;
import com.azure.resourcemanager.awsconnector.models.ResourceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.SourceType;
import com.azure.resourcemanager.awsconnector.models.SourceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.SsmInstanceInformationProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SsmInstanceInformations CreateOrReplace.
 */
public final class SsmInstanceInformationsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * SsmInstanceInformations_CreateOrReplace.json
     */
    /**
     * Sample code: SsmInstanceInformations_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ssmInstanceInformationsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ssmInstanceInformations()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ermywoyxbvekjsddbgxzdiqctiy")
            .withExistingResourceGroup("rgssmInstanceInformation")
            .withTags(mapOf("key678", "fakeTokenPlaceholder"))
            .withProperties(
                new SsmInstanceInformationProperties()
                    .withAwsProperties(
                        new AwsSsmInstanceInformationProperties().withActivationId("wqzon")
                            .withAgentVersion("bnfjsoeipnlc")
                            .withAssociationOverview(new InstanceAggregatedAssociationOverview()
                                .withDetailedStatus("cbudhnfwcqmapsmzmdvjbnobfp")
                                .withInstanceAssociationStatusAggregatedCount(mapOf("key8401", 17)))
                            .withAssociationStatus("elhplvmlvhpwuyovunmrlynmhejdw")
                            .withComputerName("wweceaymirkelywqbxapvxzr")
                            .withIpAddress("httjvosg")
                            .withIamRole("izwdzmlugehvtmnssak")
                            .withInstanceId("iubqpfcejhxieuegbecgpkzanri")
                            .withIsLatestVersion(true)
                            .withLastAssociationExecutionDate(OffsetDateTime.parse("2024-10-08T03:53:10.068Z"))
                            .withLastPingDateTime(OffsetDateTime.parse("2024-10-08T03:53:10.068Z"))
                            .withLastSuccessfulAssociationExecutionDate(
                                OffsetDateTime.parse("2024-10-08T03:53:10.068Z"))
                            .withName("iubm")
                            .withPingStatus(new PingStatusEnumValue().withValue(PingStatus.CONNECTION_LOST))
                            .withPlatformName("cbiheizlbfmmcdrsntrldk")
                            .withPlatformType(new PlatformTypeEnumValue().withValue(PlatformType.LINUX))
                            .withPlatformVersion("eiopeklxdbhzvyxg")
                            .withRegistrationDate(OffsetDateTime.parse("2024-10-08T03:53:10.069Z"))
                            .withResourceType(
                                new ResourceTypeEnumValue().withValue(ResourceType.fromString("EC2Instance")))
                            .withSourceId("mfupyczzkgmebrayfgrmxcdouve")
                            .withSourceType(
                                new SourceTypeEnumValue().withValue(SourceType.fromString("AWS::EC2::Instance"))))
                    .withPublicCloudConnectorsResourceId("hsdju")
                    .withAwsAccountId("pjfy")
                    .withArn("oxfqehraraycsdhslhhkjdu")
                    .withPublicCloudResourceName("nmnanlhecnocoemxsevyl")
                    .withAwsSourceSchema("wetpdek")
                    .withAwsRegion("mzethaciakqyywjomklr")
                    .withAwsTags(mapOf("key8309", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
