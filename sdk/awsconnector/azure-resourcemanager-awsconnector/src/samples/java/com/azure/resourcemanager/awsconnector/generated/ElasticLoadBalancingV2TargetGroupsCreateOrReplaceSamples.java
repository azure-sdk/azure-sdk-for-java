// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsElasticLoadBalancingV2TargetGroupProperties;
import com.azure.resourcemanager.awsconnector.models.ElasticLoadBalancingV2TargetGroupProperties;
import com.azure.resourcemanager.awsconnector.models.Matcher;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated30;
import com.azure.resourcemanager.awsconnector.models.TargetDescription;
import com.azure.resourcemanager.awsconnector.models.TargetGroupAttribute;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ElasticLoadBalancingV2TargetGroups CreateOrReplace.
 */
public final class ElasticLoadBalancingV2TargetGroupsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ElasticLoadBalancingV2TargetGroups_CreateOrReplace.json
     */
    /**
     * Sample code: ElasticLoadBalancingV2TargetGroups_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void elasticLoadBalancingV2TargetGroupsCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.elasticLoadBalancingV2TargetGroups()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("uyngtpdaililbq")
            .withExistingResourceGroup("rgelasticLoadBalancingV2TargetGroup")
            .withTags(mapOf("key6050", "fakeTokenPlaceholder"))
            .withProperties(new ElasticLoadBalancingV2TargetGroupProperties()
                .withAwsProperties(new AwsElasticLoadBalancingV2TargetGroupProperties().withHealthCheckEnabled(true)
                    .withHealthCheckIntervalSeconds(16)
                    .withHealthCheckPath("exmwepsqjmnvppxuwwvineim")
                    .withHealthCheckPort("cjuqka")
                    .withHealthCheckProtocol("vkarvxh")
                    .withHealthCheckTimeoutSeconds(13)
                    .withHealthyThresholdCount(21)
                    .withIpAddressType("da")
                    .withLoadBalancerArns(Arrays.asList("tzafgmrxzoifkxbmzsivajwdwedjw"))
                    .withMatcher(
                        new Matcher().withGrpcCode("fakeTokenPlaceholder").withHttpCode("fakeTokenPlaceholder"))
                    .withName("ruyunzpgs")
                    .withPort(9)
                    .withProtocol("cltdmqhlrmrhgdamynxpmnbshrth")
                    .withProtocolVersion("rpqn")
                    .withTags(Arrays.asList(new TagAutoGenerated30().withKey("fakeTokenPlaceholder")
                        .withValue("ivjhgawgxhfvwiyaeruurbpkyx")))
                    .withTargetGroupArn("nlyfkpaomu")
                    .withTargetGroupAttributes(
                        Arrays.asList(new TargetGroupAttribute().withKey("fakeTokenPlaceholder").withValue("fiffi")))
                    .withTargetGroupFullName("xhghbskmnfhkswoncku")
                    .withTargetGroupName("b")
                    .withTargetType("eekpandbuoghdxtg")
                    .withTargets(Arrays.asList(
                        new TargetDescription().withAvailabilityZone("degmktltnufhywqic").withId("dpaky").withPort(13)))
                    .withUnhealthyThresholdCount(14)
                    .withVpcId("leubklsppgcmljbowvzpwvwya"))
                .withPublicCloudConnectorsResourceId("agzteeghhpawmqbjrdkgduq")
                .withAwsAccountId("vjdgbgqisnvysonxlwjoczc")
                .withArn("avccwbbipudnfjximva")
                .withPublicCloudResourceName("muortngxuegbngvcemmzovetqah")
                .withAwsSourceSchema("cljfeojrexeruhvjklisrmf")
                .withAwsRegion("qlfglghejmmlo")
                .withAwsTags(mapOf("key5023", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
