// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AcmCertificateSummaryProperties;
import com.azure.resourcemanager.awsconnector.models.AwsAcmCertificateSummaryProperties;
import com.azure.resourcemanager.awsconnector.models.CertificateStatus;
import com.azure.resourcemanager.awsconnector.models.CertificateStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.CertificateType;
import com.azure.resourcemanager.awsconnector.models.CertificateTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ExtendedKeyUsageName;
import com.azure.resourcemanager.awsconnector.models.KeyAlgorithm;
import com.azure.resourcemanager.awsconnector.models.KeyAlgorithmEnumValue;
import com.azure.resourcemanager.awsconnector.models.KeyUsageName;
import com.azure.resourcemanager.awsconnector.models.RenewalEligibility;
import com.azure.resourcemanager.awsconnector.models.RenewalEligibilityEnumValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AcmCertificateSummaries CreateOrReplace.
 */
public final class AcmCertificateSummariesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * AcmCertificateSummaries_CreateOrReplace.json
     */
    /**
     * Sample code: AcmCertificateSummaries_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        acmCertificateSummariesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.acmCertificateSummaries()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("eqfgreyihqzkrcyaxvy")
            .withExistingResourceGroup("rgacmCertificateSummary")
            .withTags(mapOf("key9243", "fakeTokenPlaceholder"))
            .withProperties(
                new AcmCertificateSummaryProperties()
                    .withAwsProperties(
                        new AwsAcmCertificateSummaryProperties().withCertificateArn("vhqvrajxbcvstwiktrdilktqiwnsij")
                            .withCreatedAt(OffsetDateTime.parse("2024-10-08T03:50:37.721Z"))
                            .withDomainName("fiqx")
                            .withExported(true)
                            .withExtendedKeyUsages(Arrays.asList(ExtendedKeyUsageName.ANY))
                            .withHasAdditionalSubjectAlternativeNames(true)
                            .withImportedAt(OffsetDateTime.parse("2024-10-08T03:50:37.721Z"))
                            .withInUse(true)
                            .withIssuedAt(OffsetDateTime.parse("2024-10-08T03:50:37.721Z"))
                            .withKeyAlgorithm(new KeyAlgorithmEnumValue().withValue(KeyAlgorithm.EC_PRIME256V1))
                            .withKeyUsages(Arrays.asList(KeyUsageName.ANY))
                            .withNotAfter(OffsetDateTime.parse("2024-10-08T03:50:37.721Z"))
                            .withNotBefore(OffsetDateTime.parse("2024-10-08T03:50:37.721Z"))
                            .withRenewalEligibility(
                                new RenewalEligibilityEnumValue().withValue(RenewalEligibility.ELIGIBLE))
                            .withRevokedAt(OffsetDateTime.parse("2024-10-08T03:50:37.722Z"))
                            .withStatus(new CertificateStatusEnumValue().withValue(CertificateStatus.EXPIRED))
                            .withSubjectAlternativeNameSummaries(Arrays.asList("oqoukflpt"))
                            .withType(new CertificateTypeEnumValue().withValue(CertificateType.AMAZON_ISSUED)))
                    .withPublicCloudConnectorsResourceId("xljncqoovqhqla")
                    .withAwsAccountId("mmihqxcdhmlvxmnbgspuxddg")
                    .withArn("smalkenxqfohwtuwomvsiijg")
                    .withPublicCloudResourceName("qdwfldkrmzyifdlfjpxducgue")
                    .withAwsSourceSchema("llzijlhflcpnbwpp")
                    .withAwsRegion("vkxrwhsmzwvxzraytkujjlrzxdpbz")
                    .withAwsTags(mapOf("key6233", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
