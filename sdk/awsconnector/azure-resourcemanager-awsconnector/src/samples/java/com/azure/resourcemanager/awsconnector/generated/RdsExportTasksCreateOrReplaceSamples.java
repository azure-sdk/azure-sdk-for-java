// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRdsExportTaskProperties;
import com.azure.resourcemanager.awsconnector.models.ExportSourceType;
import com.azure.resourcemanager.awsconnector.models.ExportSourceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.RdsExportTaskProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RdsExportTasks CreateOrReplace.
 */
public final class RdsExportTasksCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * RdsExportTasks_CreateOrReplace.json
     */
    /**
     * Sample code: RdsExportTasks_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        rdsExportTasksCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.rdsExportTasks()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ijwmlpipjiyjjldyoytyluf")
            .withExistingResourceGroup("rgrdsExportTask")
            .withTags(mapOf("key6517", "fakeTokenPlaceholder"))
            .withProperties(new RdsExportTaskProperties()
                .withAwsProperties(
                    new AwsRdsExportTaskProperties().withExportOnly(Arrays.asList("tgbwsfhgnayugsqipjaogglzrm"))
                        .withExportTaskIdentifier("miwmgyeweeibkjbwagqc")
                        .withFailureCause("mnjjuzhtylheweav")
                        .withIamRoleArn("fexryvrii")
                        .withKmsKeyId("fakeTokenPlaceholder")
                        .withPercentProgress(5)
                        .withS3Bucket("zwwzvtjvoadrnmvvidwl")
                        .withS3Prefix("vgo")
                        .withSnapshotTime(OffsetDateTime.parse("2024-10-08T03:51:37.230Z"))
                        .withSourceArn("mojassuswxqincuqhoonftpslnqh")
                        .withSourceType(new ExportSourceTypeEnumValue().withValue(ExportSourceType.CLUSTER))
                        .withStatus("cjaqynzkqtyptrbwud")
                        .withTaskEndTime(OffsetDateTime.parse("2024-10-08T03:51:37.231Z"))
                        .withTaskStartTime(OffsetDateTime.parse("2024-10-08T03:51:37.231Z"))
                        .withTotalExtractedDataInGB(7)
                        .withWarningMessage("hugvgitctxgsxkvywhlldbqe"))
                .withPublicCloudConnectorsResourceId("xugphqsqnlgtlne")
                .withAwsAccountId("oaxdvv")
                .withArn("baufqssokdhluztwcuatl")
                .withPublicCloudResourceName("exprhkzxutckvlwxawcqfy")
                .withAwsSourceSchema("eopblwzcihujlmoctzvwfoirhqkbx")
                .withAwsRegion("bnpl")
                .withAwsTags(mapOf("key353", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
