// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsCloudWatchAlarmProperties;
import com.azure.resourcemanager.awsconnector.models.CloudWatchAlarmProperties;
import com.azure.resourcemanager.awsconnector.models.Dimension;
import com.azure.resourcemanager.awsconnector.models.Metric;
import com.azure.resourcemanager.awsconnector.models.MetricDataQuery;
import com.azure.resourcemanager.awsconnector.models.MetricStat;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated6;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CloudWatchAlarms CreateOrReplace.
 */
public final class CloudWatchAlarmsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * CloudWatchAlarms_CreateOrReplace.json
     */
    /**
     * Sample code: CloudWatchAlarms_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        cloudWatchAlarmsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.cloudWatchAlarms()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("nbymldrgacokglzmyglynjohhnj")
            .withExistingResourceGroup("rgcloudWatchAlarm")
            .withTags(mapOf("key7594", "fakeTokenPlaceholder"))
            .withProperties(
                new CloudWatchAlarmProperties()
                    .withAwsProperties(
                        new AwsCloudWatchAlarmProperties().withActionsEnabled(true)
                            .withAlarmActions(Arrays.asList("ydnvbaggrnyxwzika"))
                            .withAlarmDescription("idvyiwmbllvlfvjcibommfbp")
                            .withAlarmName("ooriavzb")
                            .withArn("twsifnftkdrfzflvvsuka")
                            .withComparisonOperator("qo")
                            .withDatapointsToAlarm(30)
                            .withDimensions(
                                Arrays.asList(new Dimension().withName("bfnmnqiewf").withValue("lnphxdrevivdil")))
                            .withEvaluateLowSampleCountPercentile("oihpnjstsw")
                            .withEvaluationPeriods(15)
                            .withExtendedStatistic("czkqsxjyzryvvkzoshk")
                            .withInsufficientDataActions(Arrays.asList("dfkb"))
                            .withMetricName("bkdkskukix")
                            .withMetrics(
                                Arrays
                                    .asList(
                                        new MetricDataQuery().withAccountId("rbtogpxgrissdcvqupcuhqqesz")
                                            .withExpression("hhxrpieqtbvafrujybxxa")
                                            .withId("zcevmcxhujphx")
                                            .withLabel("jmeaobrgk")
                                            .withMetricStat(new MetricStat()
                                                .withMetric(new Metric()
                                                    .withDimensions(Arrays.asList(new Dimension().withName("bfnmnqiewf")
                                                        .withValue("lnphxdrevivdil")))
                                                    .withMetricName("mabmwxjydr")
                                                    .withNamespace("wwoppcactqawdnkpxvjlo"))
                                                .withPeriod(22)
                                                .withStat("znmppqcobugvvlzccemylhxzsfsg")
                                                .withUnit("vu"))
                                            .withPeriod(27)
                                            .withReturnData(true)))
                            .withNamespace("ptrnxovqoagxfepnjkpewbbusjkkzr")
                            .withOkActions(Arrays.asList("afskbnaohvdlb"))
                            .withPeriod(5)
                            .withStatistic("yrrnvsfpyvhnzlmw")
                            .withTags(Arrays
                                .asList(new TagAutoGenerated6().withKey("fakeTokenPlaceholder").withValue("zswuuw")))
                            .withThreshold(17.0F)
                            .withThresholdMetricId("sqtfzityufokpxbthucjitcljvo")
                            .withTreatMissingData("iqrbyvljxufjwybtkjc")
                            .withUnit("vbjipwqqaobwlyebv"))
                    .withPublicCloudConnectorsResourceId("upovlpslvvatbmxiuwhvj")
                    .withAwsAccountId("qcoqhrkbfdowqmkzarqbtwcprj")
                    .withArn("uhqszqzfmdpnmiwu")
                    .withPublicCloudResourceName("sjxcsoycs")
                    .withAwsSourceSchema("drehzmurfidpdlcf")
                    .withAwsRegion("afpgkhpukllavze")
                    .withAwsTags(mapOf("key6400", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
