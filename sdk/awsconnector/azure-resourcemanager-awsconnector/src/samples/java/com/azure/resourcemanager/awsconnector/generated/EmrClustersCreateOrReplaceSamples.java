// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.awsconnector.models.Application;
import com.azure.resourcemanager.awsconnector.models.AwsEmrClusterProperties;
import com.azure.resourcemanager.awsconnector.models.ClusterState;
import com.azure.resourcemanager.awsconnector.models.ClusterStateChangeReason;
import com.azure.resourcemanager.awsconnector.models.ClusterStateChangeReasonCode;
import com.azure.resourcemanager.awsconnector.models.ClusterStateChangeReasonCodeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ClusterStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.ClusterStatusAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ClusterTimeline;
import com.azure.resourcemanager.awsconnector.models.Configuration;
import com.azure.resourcemanager.awsconnector.models.Ec2InstanceAttributes;
import com.azure.resourcemanager.awsconnector.models.EmrClusterProperties;
import com.azure.resourcemanager.awsconnector.models.ErrorDetailAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.InstanceCollectionType;
import com.azure.resourcemanager.awsconnector.models.InstanceCollectionTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceRoleType;
import com.azure.resourcemanager.awsconnector.models.InstanceRoleTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.KerberosAttributes;
import com.azure.resourcemanager.awsconnector.models.PlacementGroupConfig;
import com.azure.resourcemanager.awsconnector.models.PlacementGroupStrategy;
import com.azure.resourcemanager.awsconnector.models.PlacementGroupStrategyEnumValue;
import com.azure.resourcemanager.awsconnector.models.RepoUpgradeOnBoot;
import com.azure.resourcemanager.awsconnector.models.RepoUpgradeOnBootEnumValue;
import com.azure.resourcemanager.awsconnector.models.ScaleDownBehavior;
import com.azure.resourcemanager.awsconnector.models.ScaleDownBehaviorEnumValue;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated31;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EmrClusters CreateOrReplace.
 */
public final class EmrClustersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EmrClusters_CreateOrReplace.json
     */
    /**
     * Sample code: EmrClusters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void emrClustersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager)
        throws IOException {
        manager.emrClusters()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("gxjyaumpubnajcudsqwk")
            .withExistingResourceGroup("rgemrCluster")
            .withTags(mapOf("key4944", "fakeTokenPlaceholder"))
            .withProperties(new EmrClusterProperties()
                .withAwsProperties(new AwsEmrClusterProperties()
                    .withApplications(
                        Arrays.asList(new Application().withAdditionalInfo(mapOf("key299", "fakeTokenPlaceholder"))
                            .withArgs(Arrays.asList("sumnqhhlrszgzznshwr"))
                            .withName("kapcvpwdf")
                            .withVersion("yccwkryikpyu")))
                    .withAutoScalingRole("yuplht")
                    .withAutoTerminate(true)
                    .withClusterArn("bwnxmqzwlykxvewsdujzovqs")
                    .withConfigurations(Arrays.asList(new Configuration().withClassification("ahweyaesthmgtdiv")
                        .withConfigurations(Arrays.asList())
                        .withProperties(mapOf("key6744", "fakeTokenPlaceholder"))))
                    .withCustomAmiId("iwlvorsznjsaunx")
                    .withEbsRootVolumeIops(28)
                    .withEbsRootVolumeSize(25)
                    .withEbsRootVolumeThroughput(17)
                    .withEc2InstanceAttributes(new Ec2InstanceAttributes()
                        .withAdditionalMasterSecurityGroups(Arrays.asList("pzihpojfcoxrdcrosktssgf"))
                        .withAdditionalSlaveSecurityGroups(Arrays.asList("rdaccocuctxwwzt"))
                        .withEc2AvailabilityZone("bwaaomtre")
                        .withEc2KeyName("fakeTokenPlaceholder")
                        .withEc2SubnetId("ykhysdwgksrwehd")
                        .withEmrManagedMasterSecurityGroup("rjwslxsygj")
                        .withEmrManagedSlaveSecurityGroup("hvmxzsjgkhxnimtofmzlpkf")
                        .withIamInstanceProfile("wxgp")
                        .withRequestedEc2AvailabilityZones(Arrays.asList("wjzsvq"))
                        .withRequestedEc2SubnetIds(Arrays.asList("nliztbuhuhkve"))
                        .withServiceAccessSecurityGroup("supzzejzwqetvnebvhefvwofww"))
                    .withId("usolewchtbnpfarqidjcaetetbbnww")
                    .withInstanceCollectionType(
                        new InstanceCollectionTypeEnumValue().withValue(InstanceCollectionType.INSTANCE_FLEET))
                    .withKerberosAttributes(new KerberosAttributes().withAdDomainJoinPassword("fakeTokenPlaceholder")
                        .withAdDomainJoinUser("ezsezwfzesdunmtiegxbsomqqk")
                        .withCrossRealmTrustPrincipalPassword("fakeTokenPlaceholder")
                        .withKdcAdminPassword("fakeTokenPlaceholder")
                        .withRealm("rraygrjruzeqrozds"))
                    .withLogEncryptionKmsKeyId("fakeTokenPlaceholder")
                    .withLogUri("xrdeudkf")
                    .withMasterPublicDnsName("ztuajioptfwewm")
                    .withName("bhkvffeitkj")
                    .withNormalizedInstanceHours(16)
                    .withOsReleaseLabel("huxdgdaqkknvleyvhgydjbidn")
                    .withOutpostArn("wnoxdzcyqfbreqnkorlwtfvmzpcu")
                    .withPlacementGroups(Arrays.asList(new PlacementGroupConfig()
                        .withInstanceRole(new InstanceRoleTypeEnumValue().withValue(InstanceRoleType.CORE))
                        .withPlacementStrategy(
                            new PlacementGroupStrategyEnumValue().withValue(PlacementGroupStrategy.CLUSTER))))
                    .withReleaseLabel("lpmpniehmkeuwyyh")
                    .withRepoUpgradeOnBoot(new RepoUpgradeOnBootEnumValue().withValue(RepoUpgradeOnBoot.NONE))
                    .withRequestedAmiVersion("kwlohrrhuxcgnok")
                    .withRunningAmiVersion("wd")
                    .withScaleDownBehavior(
                        new ScaleDownBehaviorEnumValue().withValue(ScaleDownBehavior.TERMINATE_AT_INSTANCE_HOUR))
                    .withSecurityConfiguration("njgb")
                    .withServiceRole("msbrnoepcyrbaazxsmwbhmqrzubm")
                    .withStatus(new ClusterStatusAutoGenerated()
                        .withErrorDetails(Arrays.asList(new ErrorDetailAutoGenerated()
                            .withErrorCode("fakeTokenPlaceholder")
                            .withErrorData(Arrays.asList(SerializerFactory.createDefaultManagementSerializerAdapter()
                                .deserialize("{}", Object.class, SerializerEncoding.JSON)))
                            .withErrorMessage("hhoucsczmnnflofzyxt")))
                        .withState(new ClusterStateEnumValue().withValue(ClusterState.BOOTSTRAPPING))
                        .withStateChangeReason(new ClusterStateChangeReason()
                            .withCode(new ClusterStateChangeReasonCodeEnumValue()
                                .withValue(ClusterStateChangeReasonCode.ALL_STEPS_COMPLETED))
                            .withMessage("sxjkazmayqtbqnbaslxpxun"))
                        .withTimeline(
                            new ClusterTimeline().withCreationDateTime(OffsetDateTime.parse("2024-10-08T03:51:42.281Z"))
                                .withEndDateTime(OffsetDateTime.parse("2024-10-08T03:51:42.281Z"))
                                .withReadyDateTime(OffsetDateTime.parse("2024-10-08T03:51:42.281Z"))))
                    .withStepConcurrencyLevel(8)
                    .withTags(Arrays.asList(
                        new TagAutoGenerated31().withKey("fakeTokenPlaceholder").withValue("gibogfcbfiielvixdxeb")))
                    .withTerminationProtected(true)
                    .withUnhealthyNodeReplacement(true)
                    .withVisibleToAllUsers(true))
                .withPublicCloudConnectorsResourceId("gjirecopxmcdpdljkxexxoawwd")
                .withAwsAccountId("tsnkbdcacnozmtgvxjflzydxeu")
                .withArn("hvhwzh")
                .withPublicCloudResourceName("aulznvgpxpjdvghbszbwxycew")
                .withAwsSourceSchema("sexomixwzozkllipdmi")
                .withAwsRegion("rbbkoztkjhvdu")
                .withAwsTags(mapOf("key6409", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
