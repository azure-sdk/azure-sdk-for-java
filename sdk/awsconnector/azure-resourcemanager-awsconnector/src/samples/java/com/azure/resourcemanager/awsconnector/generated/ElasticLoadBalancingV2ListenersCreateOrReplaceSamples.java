// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.ActionAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.AuthenticateCognitoConfig;
import com.azure.resourcemanager.awsconnector.models.AuthenticateOidcConfig;
import com.azure.resourcemanager.awsconnector.models.AwsElasticLoadBalancingV2ListenerProperties;
import com.azure.resourcemanager.awsconnector.models.CertificateAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ElasticLoadBalancingV2ListenerProperties;
import com.azure.resourcemanager.awsconnector.models.FixedResponseConfig;
import com.azure.resourcemanager.awsconnector.models.ForwardConfig;
import com.azure.resourcemanager.awsconnector.models.MutualAuthentication;
import com.azure.resourcemanager.awsconnector.models.RedirectConfig;
import com.azure.resourcemanager.awsconnector.models.TargetGroupStickinessConfig;
import com.azure.resourcemanager.awsconnector.models.TargetGroupTuple;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ElasticLoadBalancingV2Listeners CreateOrReplace.
 */
public final class ElasticLoadBalancingV2ListenersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ElasticLoadBalancingV2Listeners_CreateOrReplace.json
     */
    /**
     * Sample code: ElasticLoadBalancingV2Listeners_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void elasticLoadBalancingV2ListenersCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.elasticLoadBalancingV2Listeners()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ynyltffflqszrlkr")
            .withExistingResourceGroup("rgelasticLoadBalancingV2Listener")
            .withTags(mapOf("key1120", "fakeTokenPlaceholder"))
            .withProperties(
                new ElasticLoadBalancingV2ListenerProperties()
                    .withAwsProperties(
                        new AwsElasticLoadBalancingV2ListenerProperties()
                            .withAlpnPolicy(Arrays.asList("tznuapvprovrolljpcrptvkhjpl"))
                            .withCertificates(Arrays
                                .asList(new CertificateAutoGenerated().withCertificateArn("mfdqcjinbzrxinpbkmpjj")))
                            .withDefaultActions(
                                Arrays
                                    .asList(new ActionAutoGenerated()
                                        .withAuthenticateCognitoConfig(new AuthenticateCognitoConfig()
                                            .withAuthenticationRequestExtraParams(
                                                mapOf("key2864", "fakeTokenPlaceholder"))
                                            .withOnUnauthenticatedRequest("ewqmcevolmfvchwcrm")
                                            .withScope("wtpexcocbnkypesnfwkvyxetj")
                                            .withSessionCookieName("whrieoypkjqsclmgqsiuohq")
                                            .withSessionTimeout("ujvfjimalwitusxfyglnihdh")
                                            .withUserPoolArn("ilqdawi")
                                            .withUserPoolClientId("dmzhlfrfqmoa")
                                            .withUserPoolDomain("jkxwfnqp"))
                                        .withAuthenticateOidcConfig(new AuthenticateOidcConfig()
                                            .withAuthenticationRequestExtraParams(
                                                mapOf("key4917", "fakeTokenPlaceholder"))
                                            .withAuthorizationEndpoint("fakeTokenPlaceholder")
                                            .withClientId("u")
                                            .withClientSecret("fakeTokenPlaceholder")
                                            .withIssuer("jkfpddkgzwiakaobaydiwrztixoef")
                                            .withOnUnauthenticatedRequest("yppxrruimvmjjajglsmxnwlif")
                                            .withScope("loh")
                                            .withSessionCookieName("tmhjastblgrrlqnxqeiccoez")
                                            .withSessionTimeout("rkwdmahwrhgsxev")
                                            .withTokenEndpoint("fakeTokenPlaceholder")
                                            .withUseExistingClientSecret(true)
                                            .withUserInfoEndpoint("kbv"))
                                        .withFixedResponseConfig(new FixedResponseConfig()
                                            .withContentType("xxmkkjulvromwbljdvzinagjmmvizg")
                                            .withMessageBody("u")
                                            .withStatusCode("fakeTokenPlaceholder"))
                                        .withForwardConfig(new ForwardConfig().withTargetGroupStickinessConfig(
                                            new TargetGroupStickinessConfig().withDurationSeconds(25).withEnabled(true))
                                            .withTargetGroups(Arrays.asList(new TargetGroupTuple()
                                                .withTargetGroupArn("tqmikgktkjddfsirlrzderquhjmlsj")
                                                .withWeight(30))))
                                        .withOrder(1)
                                        .withRedirectConfig(
                                            new RedirectConfig().withHost("zbwhrrxamywhpcrcwnlftloenhgubz")
                                                .withPath("uifuyulnhelvgkkgzohuzn")
                                                .withPort("objmskuxfeanqv")
                                                .withProtocol("zmhfuhzhytveuveux")
                                                .withQuery("kdbtsctjnajoummjgyigqnnuhnmjk")
                                                .withStatusCode("fakeTokenPlaceholder"))
                                        .withTargetGroupArn("sqtnjzhlqyavpkkxqky")
                                        .withType("yqmcnd")))
                            .withListenerArn("nbgkbxgvqooycwaj")
                            .withLoadBalancerArn("yktlh")
                            .withMutualAuthentication(new MutualAuthentication().withIgnoreClientCertificateExpiry(true)
                                .withMode("byoxnzjdbatjjyheiqtxy")
                                .withTrustStoreArn("mxmhj"))
                            .withPort(26)
                            .withProtocol("vac")
                            .withSslPolicy("oqzcjbvjkvuleoixcyfexaam"))
                    .withPublicCloudConnectorsResourceId("c")
                    .withAwsAccountId("ikmnykytjq")
                    .withArn("cxn")
                    .withPublicCloudResourceName("ukdphfdtbdvfyuswafgdhapeioe")
                    .withAwsSourceSchema("fj")
                    .withAwsRegion("uwrcdgkifqubmtwrzvuvfmeaaght")
                    .withAwsTags(mapOf("key9655", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
