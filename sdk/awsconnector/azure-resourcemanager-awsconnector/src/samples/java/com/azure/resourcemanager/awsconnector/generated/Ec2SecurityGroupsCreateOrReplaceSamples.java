// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2SecurityGroupProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2SecurityGroupProperties;
import com.azure.resourcemanager.awsconnector.models.IpPermission;
import com.azure.resourcemanager.awsconnector.models.IpRange;
import com.azure.resourcemanager.awsconnector.models.Ipv6Range;
import com.azure.resourcemanager.awsconnector.models.PrefixListId;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated18;
import com.azure.resourcemanager.awsconnector.models.UserIdGroupPair;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2SecurityGroups CreateOrReplace.
 */
public final class Ec2SecurityGroupsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2SecurityGroups_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2SecurityGroups_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ec2SecurityGroupsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2SecurityGroups()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("vzuwiygrafixnatwfk")
            .withExistingResourceGroup("rgec2SecurityGroup")
            .withTags(mapOf("key9265", "fakeTokenPlaceholder"))
            .withProperties(new Ec2SecurityGroupProperties()
                .withAwsProperties(new AwsEc2SecurityGroupProperties().withDescription("hrrgskumwbylhgekdhngxjvwdnwt")
                    .withGroupId("ljankmjnfyn")
                    .withGroupName("btdfjlqbavbhlssltk")
                    .withIpPermissions(Arrays.asList(new IpPermission().withFromPort(20)
                        .withIpProtocol("kgjdillfenc")
                        .withIpRanges(Arrays.asList(new IpRange().withCidrIp("bvmbvmljqvxtixhffwasjzntbuc")
                            .withDescription("shzjegnqjhifwjai")))
                        .withIpv6Ranges(Arrays.asList(
                            new Ipv6Range().withCidrIpv6("uxlvmqqyfplqdqzolxmmnclvmtd").withDescription("iqaupyjrvko")))
                        .withPrefixListIds(Arrays.asList(new PrefixListId().withDescription("chukmrsgeaica")
                            .withPrefixListId("abvyhxeqhgiuwfmdproas")))
                        .withToPort(22)
                        .withUserIdGroupPairs(
                            Arrays.asList(new UserIdGroupPair().withDescription("ltskpjkztpi")
                                .withGroupId("laktgsfwgfj")
                                .withGroupName("rrnebynwgsv")
                                .withPeeringStatus("t")
                                .withUserId("chhl")
                                .withVpcId("jxcofqkxxcehakoymxojgpra")
                                .withVpcPeeringConnectionId("vdqrycsnfuwkgftprwierfwv")))))
                    .withIpPermissionsEgress(Arrays.asList(new IpPermission().withFromPort(20)
                        .withIpProtocol("kgjdillfenc")
                        .withIpRanges(Arrays.asList(new IpRange().withCidrIp("bvmbvmljqvxtixhffwasjzntbuc")
                            .withDescription("shzjegnqjhifwjai")))
                        .withIpv6Ranges(Arrays.asList(
                            new Ipv6Range().withCidrIpv6("uxlvmqqyfplqdqzolxmmnclvmtd").withDescription("iqaupyjrvko")))
                        .withPrefixListIds(Arrays.asList(new PrefixListId().withDescription("chukmrsgeaica")
                            .withPrefixListId("abvyhxeqhgiuwfmdproas")))
                        .withToPort(22)
                        .withUserIdGroupPairs(Arrays.asList(new UserIdGroupPair().withDescription("ltskpjkztpi")
                            .withGroupId("laktgsfwgfj")
                            .withGroupName("rrnebynwgsv")
                            .withPeeringStatus("t")
                            .withUserId("chhl")
                            .withVpcId("jxcofqkxxcehakoymxojgpra")
                            .withVpcPeeringConnectionId("vdqrycsnfuwkgftprwierfwv")))))
                    .withOwnerId("zjetpuydwcwvcujxzfp")
                    .withTags(
                        Arrays.asList(new TagAutoGenerated18().withKey("fakeTokenPlaceholder").withValue("jflpondfk")))
                    .withVpcId("prgpmjbyqcuinimbjrzfmpmme"))
                .withPublicCloudConnectorsResourceId("fuzo")
                .withAwsAccountId("opjbipitrztwvqiwhvypn")
                .withArn("wmn")
                .withPublicCloudResourceName("laxwpziyjookzz")
                .withAwsSourceSchema("qdcuf")
                .withAwsRegion("hqrasnkghl")
                .withAwsTags(mapOf("key5646", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
