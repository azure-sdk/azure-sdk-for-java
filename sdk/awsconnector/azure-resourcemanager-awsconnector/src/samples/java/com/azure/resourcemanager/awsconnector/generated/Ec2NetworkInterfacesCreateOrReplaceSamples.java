// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2NetworkInterfaceProperties;
import com.azure.resourcemanager.awsconnector.models.ConnectionTrackingSpecification;
import com.azure.resourcemanager.awsconnector.models.Ec2NetworkInterfaceProperties;
import com.azure.resourcemanager.awsconnector.models.InstanceIpv6AddressAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.Ipv4PrefixSpecification;
import com.azure.resourcemanager.awsconnector.models.Ipv6PrefixSpecification;
import com.azure.resourcemanager.awsconnector.models.PrivateIpAddressSpecification;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated16;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2NetworkInterfaces CreateOrReplace.
 */
public final class Ec2NetworkInterfacesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2NetworkInterfaces_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2NetworkInterfaces_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ec2NetworkInterfacesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2NetworkInterfaces()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("lagtstrmaffl")
            .withExistingResourceGroup("rgec2NetworkInterface")
            .withTags(mapOf("key2520", "fakeTokenPlaceholder"))
            .withProperties(new Ec2NetworkInterfaceProperties()
                .withAwsProperties(new AwsEc2NetworkInterfaceProperties()
                    .withConnectionTrackingSpecification(
                        new ConnectionTrackingSpecification().withTcpEstablishedTimeout(17)
                            .withUdpStreamTimeout(8)
                            .withUdpTimeout(23))
                    .withDescription("rjfmatpnlpzafpjsvdifepkeompzpz")
                    .withEnablePrimaryIpv6(true)
                    .withGroupSet(Arrays.asList("dqnxzfzzixpqqapipgobuepnptfi"))
                    .withId("djkpriel")
                    .withInterfaceType("osohhzoujznxwq")
                    .withIpv4PrefixCount(18)
                    .withIpv4Prefixes(Arrays.asList(new Ipv4PrefixSpecification().withIpv4Prefix("gptczjajfvxavzpalq")))
                    .withIpv6AddressCount(21)
                    .withIpv6Addresses(
                        Arrays.asList(new InstanceIpv6AddressAutoGenerated().withIpv6Address("yltzjtkgfhbhokimzn")))
                    .withIpv6PrefixCount(1)
                    .withIpv6Prefixes(
                        Arrays.asList(new Ipv6PrefixSpecification().withIpv6Prefix("srpldhvaafcozyarpechevrnxlf")))
                    .withPrimaryIpv6Address("uoblo")
                    .withPrimaryPrivateIpAddress("qyowqxftdeptwmjwfa")
                    .withPrivateIpAddress("qicwhumw")
                    .withPrivateIpAddresses(Arrays.asList(new PrivateIpAddressSpecification().withPrimary(true)
                        .withPrivateIpAddress("mmkedmvsclcwfvlvx")))
                    .withSecondaryPrivateIpAddressCount(9)
                    .withSecondaryPrivateIpAddresses(Arrays.asList("mkvwjalereuiy"))
                    .withSourceDestCheck(true)
                    .withSubnetId("wfyytldstgkdpoffxak")
                    .withTags(Arrays
                        .asList(new TagAutoGenerated16().withKey("fakeTokenPlaceholder").withValue("zlzzwcqgyuoe")))
                    .withVpcId("ykqkegxxhqsw"))
                .withPublicCloudConnectorsResourceId("ottcocnvajfifabmlw")
                .withAwsAccountId("gjylibjqfzkkx")
                .withArn("nmgqcimbhzksweqtns")
                .withPublicCloudResourceName("pjjwxtuejzskysxlytlrcqegfkuydf")
                .withAwsSourceSchema("smaakwcpvp")
                .withAwsRegion("dpghaxzupmkfwbvir")
                .withAwsTags(mapOf("key190", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
