// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsConfigServiceConfigurationRecorderStatusProperties;
import com.azure.resourcemanager.awsconnector.models.ConfigServiceConfigurationRecorderStatusProperties;
import com.azure.resourcemanager.awsconnector.models.RecorderStatus;
import com.azure.resourcemanager.awsconnector.models.RecorderStatusEnumValue;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ConfigServiceConfigurationRecorderStatuses CreateOrReplace.
 */
public final class ConfigServiceConfigurationRecorderStatusesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ConfigServiceConfigurationRecorderStatuses_CreateOrReplace.json
     */
    /**
     * Sample code: ConfigServiceConfigurationRecorderStatuses_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void configServiceConfigurationRecorderStatusesCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.configServiceConfigurationRecorderStatuses()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("aanagogcqgqikndwcsiwpf")
            .withExistingResourceGroup("rgconfigServiceConfigurationRecorderStatus")
            .withTags(mapOf("key333", "fakeTokenPlaceholder"))
            .withProperties(new ConfigServiceConfigurationRecorderStatusProperties()
                .withAwsProperties(new AwsConfigServiceConfigurationRecorderStatusProperties()
                    .withLastErrorCode("fakeTokenPlaceholder")
                    .withLastErrorMessage("qcopqdjuuwuwdvdjmupwgrnxux")
                    .withLastStartTime(OffsetDateTime.parse("2024-10-08T03:54:51.026Z"))
                    .withLastStatus(new RecorderStatusEnumValue().withValue(RecorderStatus.FAILURE))
                    .withLastStatusChangeTime(OffsetDateTime.parse("2024-10-08T03:54:51.038Z"))
                    .withLastStopTime(OffsetDateTime.parse("2024-10-08T03:54:51.038Z"))
                    .withName("mvnralcjhhrhhczxctukeumhnhhsvs")
                    .withRecording(true))
                .withPublicCloudConnectorsResourceId("fzembqicafznmnrvzudikggimnls")
                .withAwsAccountId("dnnbcuuhaxys")
                .withArn("iwxslgken")
                .withPublicCloudResourceName("stvqbbbupeyrxdfrdlslkxbi")
                .withAwsSourceSchema("qprhkzdetwvsaznwugwruaned")
                .withAwsRegion("pffplccggyknjkyebtjepdzwbim")
                .withAwsTags(mapOf("key2618", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
