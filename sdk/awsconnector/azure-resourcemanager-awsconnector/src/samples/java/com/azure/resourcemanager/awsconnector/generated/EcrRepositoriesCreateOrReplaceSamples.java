// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEcrRepositoryProperties;
import com.azure.resourcemanager.awsconnector.models.EcrRepositoryProperties;
import com.azure.resourcemanager.awsconnector.models.EncryptionConfiguration;
import com.azure.resourcemanager.awsconnector.models.EncryptionConfigurationEncryptionType;
import com.azure.resourcemanager.awsconnector.models.ImageScanningConfiguration;
import com.azure.resourcemanager.awsconnector.models.ImageTagMutability;
import com.azure.resourcemanager.awsconnector.models.LifecyclePolicy;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated24;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EcrRepositories CreateOrReplace.
 */
public final class EcrRepositoriesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EcrRepositories_CreateOrReplace.json
     */
    /**
     * Sample code: EcrRepositories_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ecrRepositoriesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ecrRepositories()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("uxqfbijfanljas")
            .withExistingResourceGroup("rgecrRepository")
            .withTags(mapOf("key2390", "fakeTokenPlaceholder"))
            .withProperties(
                new EcrRepositoryProperties()
                    .withAwsProperties(
                        new AwsEcrRepositoryProperties().withArn("su")
                            .withEmptyOnDelete(true)
                            .withEncryptionConfiguration(new EncryptionConfiguration()
                                .withEncryptionType(EncryptionConfigurationEncryptionType.AES256)
                                .withKmsKey("fakeTokenPlaceholder"))
                            .withImageScanningConfiguration(new ImageScanningConfiguration().withScanOnPush(true))
                            .withImageTagMutability(ImageTagMutability.IMMUTABLE)
                            .withLifecyclePolicy(new LifecyclePolicy().withLifecyclePolicyText("xvazgvi")
                                .withRegistryId("oluqsenexubjydpyaw"))
                            .withRepositoryName("iuhxuyfxygvumphlcwhnsscudjez")
                            .withRepositoryPolicyText(mapOf())
                            .withRepositoryUri("vmljyfyskxbyjczax")
                            .withTags(Arrays
                                .asList(new TagAutoGenerated24().withKey("fakeTokenPlaceholder").withValue("qu"))))
                    .withPublicCloudConnectorsResourceId("ohtcynikymmfceroreix")
                    .withAwsAccountId("iuomdzpobqirucabbxz")
                    .withArn("djb")
                    .withPublicCloudResourceName("bymfiroqkcgssnop")
                    .withAwsSourceSchema("olwqyujnmxxhxwyp")
                    .withAwsRegion("wliyvzjqcxbpwtgjae")
                    .withAwsTags(mapOf("key7950", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
