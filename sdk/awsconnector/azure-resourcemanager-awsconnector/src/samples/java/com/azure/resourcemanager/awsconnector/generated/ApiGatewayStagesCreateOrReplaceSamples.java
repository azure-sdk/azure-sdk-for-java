// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AccessLogSetting;
import com.azure.resourcemanager.awsconnector.models.ApiGatewayStageProperties;
import com.azure.resourcemanager.awsconnector.models.AwsApiGatewayStageProperties;
import com.azure.resourcemanager.awsconnector.models.CanarySetting;
import com.azure.resourcemanager.awsconnector.models.MethodSetting;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated2;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ApiGatewayStages CreateOrReplace.
 */
public final class ApiGatewayStagesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ApiGatewayStages_CreateOrReplace.json
     */
    /**
     * Sample code: ApiGatewayStages_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        apiGatewayStagesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.apiGatewayStages()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ixsfvcwygoceaaydsgkvubn")
            .withExistingResourceGroup("rgapiGatewayStage")
            .withTags(mapOf("key72", "fakeTokenPlaceholder"))
            .withProperties(new ApiGatewayStageProperties()
                .withAwsProperties(new AwsApiGatewayStageProperties()
                    .withAccessLogSetting(
                        new AccessLogSetting().withDestinationArn("bjnehkhrjvy").withFormat("jyhhqidjew"))
                    .withCacheClusterEnabled(true)
                    .withCacheClusterSize("tqpsxptkwagykhry")
                    .withCanarySetting(new CanarySetting().withDeploymentId("jgfflpjviovk")
                        .withPercentTraffic(30)
                        .withStageVariableOverrides(mapOf("key989", "fakeTokenPlaceholder"))
                        .withUseStageCache(true))
                    .withClientCertificateId("lcqbeactfdarpess")
                    .withDeploymentId("muwatddsfb")
                    .withDescription("dmxblpsncciutbbmfihkloqaxuab")
                    .withDocumentationVersion("fltvrg")
                    .withMethodSettings(Arrays.asList(new MethodSetting().withCacheDataEncrypted(true)
                        .withCacheTtlInSeconds(15)
                        .withCachingEnabled(true)
                        .withDataTraceEnabled(true)
                        .withHttpMethod("wojjxwrlnmnertmfkstofcoekjxd")
                        .withLoggingLevel("cezcwkojlmp")
                        .withMetricsEnabled(true)
                        .withResourcePath("fsaykfuxsfvultpnnpjjbak")
                        .withThrottlingBurstLimit(3)
                        .withThrottlingRateLimit(28)))
                    .withRestApiId("cycztypxndrdmstjwi")
                    .withStageName("iukgreicaikhlooycykkql")
                    .withTags(Arrays.asList(new TagAutoGenerated2().withKey("fakeTokenPlaceholder").withValue("x")))
                    .withTracingEnabled(true)
                    .withVariables(mapOf("key3007", "fakeTokenPlaceholder")))
                .withPublicCloudConnectorsResourceId("mvvltlx")
                .withAwsAccountId("umvnhbnjqbgppgipyiuxvyt")
                .withArn("aitrzss")
                .withPublicCloudResourceName("hxgdpqw")
                .withAwsSourceSchema("ttwdzidmknfow")
                .withAwsRegion("qkjxqupbneeuooyrfnblmwlrpmjsiu")
                .withAwsTags(mapOf("key1607", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
