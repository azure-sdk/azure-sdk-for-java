// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRdsDBSnapshotProperties;
import com.azure.resourcemanager.awsconnector.models.ProcessorFeatureAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.RdsDBSnapshotProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated47;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RdsDbSnapshots CreateOrReplace.
 */
public final class RdsDbSnapshotsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * RdsDbSnapshots_CreateOrReplace.json
     */
    /**
     * Sample code: RdsDbSnapshots_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        rdsDbSnapshotsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.rdsDbSnapshots()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ojgfpymabvdpgvknjfvaecf")
            .withExistingResourceGroup("rgrdsDBSnapshot")
            .withTags(mapOf("key752", "fakeTokenPlaceholder"))
            .withProperties(new RdsDBSnapshotProperties()
                .withAwsProperties(new AwsRdsDBSnapshotProperties().withAllocatedStorage(10)
                    .withAvailabilityZone("kayjlaciv")
                    .withDbInstanceIdentifier("sgszwrakxshyzice")
                    .withDbSnapshotArn("xdjclnyyjohzhbe")
                    .withDbSnapshotIdentifier("yeju")
                    .withDbSystemId("fzavlejrrugjcdxaetdvvhg")
                    .withDbiResourceId("jwxsvn")
                    .withDedicatedLogVolume(true)
                    .withEncrypted(true)
                    .withEngine("xkjeovmjwpoycteiloodhzsyly")
                    .withEngineVersion("ycrrezzqweeassrgalnqmcuhnk")
                    .withIamDatabaseAuthenticationEnabled(true)
                    .withInstanceCreateTime(OffsetDateTime.parse("2024-10-08T03:49:38.588Z"))
                    .withIops(7)
                    .withKmsKeyId("fakeTokenPlaceholder")
                    .withLicenseModel("wbcqlk")
                    .withMasterUsername("ahyhxkpctusl")
                    .withMultiTenant(true)
                    .withOptionGroupName("zxrglvxvd")
                    .withOriginalSnapshotCreateTime(OffsetDateTime.parse("2024-10-08T03:49:38.589Z"))
                    .withPercentProgress(19)
                    .withPort(11)
                    .withProcessorFeatures(Arrays.asList(new ProcessorFeatureAutoGenerated().withName("sidrqdpoqaeon")
                        .withValue("elyxiifmhltlaxelehotutvcfcmqii")))
                    .withSnapshotCreateTime(OffsetDateTime.parse("2024-10-08T03:49:38.589Z"))
                    .withSnapshotDatabaseTime(OffsetDateTime.parse("2024-10-08T03:49:38.589Z"))
                    .withSnapshotTarget("uvkzzwcpvrfjw")
                    .withSnapshotType("iiydwpezfwmejabymfqpelcifgzng")
                    .withSourceDBSnapshotIdentifier("awxakkqcvryuhqdbunoz")
                    .withSourceRegion("vrldyuopcfabthhgxvpnybgtfdi")
                    .withStatus("mwktzwjlfzywwkgrjhl")
                    .withStorageThroughput(1)
                    .withStorageType("i")
                    .withTagList(
                        Arrays.asList(new TagAutoGenerated47().withKey("fakeTokenPlaceholder").withValue("gbyocywzau")))
                    .withTdeCredentialArn("fakeTokenPlaceholder")
                    .withTimezone("coraguclwgryiiynjhpes")
                    .withVpcId("fpweamshtdzkrbhcqenn"))
                .withPublicCloudConnectorsResourceId("ptkmloddhzkiphtdnmdhlx")
                .withAwsAccountId("gimhekqewbnatvrjiewxszwd")
                .withArn("nqbzizmcdbvsukdqhrdcg")
                .withPublicCloudResourceName("uoecdcxuxiu")
                .withAwsSourceSchema("sfaw")
                .withAwsRegion("qk")
                .withAwsTags(mapOf("key7020", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
