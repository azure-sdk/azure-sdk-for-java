// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsIamGroupProperties;
import com.azure.resourcemanager.awsconnector.models.IamGroupProperties;
import com.azure.resourcemanager.awsconnector.models.Policy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IamGroups CreateOrReplace.
 */
public final class IamGroupsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * IamGroups_CreateOrReplace.json
     */
    /**
     * Sample code: IamGroups_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void iamGroupsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.iamGroups()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("badqu")
            .withExistingResourceGroup("rgiamGroup")
            .withTags(mapOf("key3844", "fakeTokenPlaceholder"))
            .withProperties(
                new IamGroupProperties()
                    .withAwsProperties(new AwsIamGroupProperties().withArn("qaymkzqiwzdilzpmfapwpudc")
                        .withGroupName("zcmfl")
                        .withManagedPolicyArns(Arrays.asList("uqek"))
                        .withPath("liuneeastp")
                        .withPolicies(Arrays.asList(
                            new Policy().withPolicyDocument(mapOf()).withPolicyName("cokejufrpuszoopjjywwxopal"))))
                    .withPublicCloudConnectorsResourceId("fjfneaczmcscofgdjnxw")
                    .withAwsAccountId("obfwwcnhlgytlanolsfrdn")
                    .withArn("yvnnjydmrptjbytuyca")
                    .withPublicCloudResourceName("hj")
                    .withAwsSourceSchema("kprcuajdxtfckwviyxpajstzdjeb")
                    .withAwsRegion("uqzi")
                    .withAwsTags(mapOf("key9078", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
