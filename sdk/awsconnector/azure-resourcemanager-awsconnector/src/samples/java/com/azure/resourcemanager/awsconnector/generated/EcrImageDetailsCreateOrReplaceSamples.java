// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEcrImageDetailProperties;
import com.azure.resourcemanager.awsconnector.models.EcrImageDetailProperties;
import com.azure.resourcemanager.awsconnector.models.ImageScanFindingsSummary;
import com.azure.resourcemanager.awsconnector.models.ImageScanStatus;
import com.azure.resourcemanager.awsconnector.models.ScanStatus;
import com.azure.resourcemanager.awsconnector.models.ScanStatusEnumValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EcrImageDetails CreateOrReplace.
 */
public final class EcrImageDetailsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EcrImageDetails_CreateOrReplace.json
     */
    /**
     * Sample code: EcrImageDetails_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ecrImageDetailsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ecrImageDetails()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("mpxszpyclsniahaoqerqewrzxyzcdt")
            .withExistingResourceGroup("rgecrImageDetail")
            .withTags(mapOf("key9132", "fakeTokenPlaceholder"))
            .withProperties(new EcrImageDetailProperties()
                .withAwsProperties(new AwsEcrImageDetailProperties().withArtifactMediaType("ciuahpzw")
                    .withImageDigest("mfgr")
                    .withImageManifestMediaType("arzsyssziqvvryqc")
                    .withImagePushedAt(OffsetDateTime.parse("2024-10-08T03:51:24.487Z"))
                    .withImageScanFindingsSummary(
                        new ImageScanFindingsSummary().withFindingSeverityCounts(mapOf("key9764", 10))
                            .withImageScanCompletedAt(OffsetDateTime.parse("2024-10-08T03:51:24.488Z"))
                            .withVulnerabilitySourceUpdatedAt(OffsetDateTime.parse("2024-10-08T03:51:24.488Z")))
                    .withImageScanStatus(new ImageScanStatus().withDescription("kvsqwhxzrnciqybnl")
                        .withStatus(new ScanStatusEnumValue().withValue(ScanStatus.ACTIVE)))
                    .withImageSizeInBytes(18L)
                    .withImageTags(Arrays.asList("bwikpoljnmaoewepiunoltcxlyxd"))
                    .withLastRecordedPullTime(OffsetDateTime.parse("2024-10-08T03:51:24.488Z"))
                    .withRegistryId("xpxtbbeejeosvtcvq")
                    .withRepositoryName("abftxvvazyfekkcpo"))
                .withPublicCloudConnectorsResourceId("glrdicxdaktwlkvgvxurgww")
                .withAwsAccountId("yqyxjsfibyscdhyofmyu")
                .withArn("dhvgwgtedzuiqdvgc")
                .withPublicCloudResourceName("gijthpfhduauuus")
                .withAwsSourceSchema("ibsdsdpuiqcwsdxqfn")
                .withAwsRegion("atlamkemuqwaezwdsuavhaqo")
                .withAwsTags(mapOf("key4659", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
