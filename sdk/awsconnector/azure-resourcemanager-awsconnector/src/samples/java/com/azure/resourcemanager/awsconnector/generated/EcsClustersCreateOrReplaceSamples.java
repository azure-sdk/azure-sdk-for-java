// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEcsClusterProperties;
import com.azure.resourcemanager.awsconnector.models.CapacityProviderStrategyItem;
import com.azure.resourcemanager.awsconnector.models.ClusterConfiguration;
import com.azure.resourcemanager.awsconnector.models.ClusterSettings;
import com.azure.resourcemanager.awsconnector.models.EcsClusterProperties;
import com.azure.resourcemanager.awsconnector.models.ExecuteCommandConfiguration;
import com.azure.resourcemanager.awsconnector.models.ExecuteCommandLogConfiguration;
import com.azure.resourcemanager.awsconnector.models.ServiceConnectDefaults;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated25;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EcsClusters CreateOrReplace.
 */
public final class EcsClustersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EcsClusters_CreateOrReplace.json
     */
    /**
     * Sample code: EcsClusters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ecsClustersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ecsClusters()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("jvggofkffzhlultqukgoqtb")
            .withExistingResourceGroup("rgecsCluster")
            .withTags(mapOf("key1755", "fakeTokenPlaceholder"))
            .withProperties(new EcsClusterProperties().withAwsProperties(new AwsEcsClusterProperties()
                .withArn("mgzeckagdmmepybkhhylkhxzv")
                .withCapacityProviders(Arrays.asList("rqrmclul"))
                .withClusterName("eavbe")
                .withClusterSettings(
                    Arrays.asList(new ClusterSettings().withName("elsikbbzpkzaghwtqd").withValue("gbnpceuced")))
                .withConfiguration(new ClusterConfiguration().withExecuteCommandConfiguration(
                    new ExecuteCommandConfiguration().withKmsKeyId("fakeTokenPlaceholder")
                        .withLogConfiguration(new ExecuteCommandLogConfiguration().withCloudWatchEncryptionEnabled(true)
                            .withCloudWatchLogGroupName("eiskop")
                            .withS3BucketName("sfcsij")
                            .withS3EncryptionEnabled(true)
                            .withS3KeyPrefix("fakeTokenPlaceholder"))
                        .withLogging("rspegmyokypfqdocdrothsgivaqf")))
                .withDefaultCapacityProviderStrategy(Arrays.asList(new CapacityProviderStrategyItem().withBase(16)
                    .withCapacityProvider("kttxptzsaauhguaygucxzzvrbriev")
                    .withWeight(1)))
                .withServiceConnectDefaults(new ServiceConnectDefaults().withNamespace("mwpjrqkazpcetkgyfplp"))
                .withTags(Arrays
                    .asList(new TagAutoGenerated25().withKey("fakeTokenPlaceholder").withValue("dsvfiamfdrnwqretfcu"))))
                .withPublicCloudConnectorsResourceId("jbtlcmxmtlcgoxfktpqbi")
                .withAwsAccountId("emdtbelvualaeqexsrbhvczjsy")
                .withArn("mpaxeywurctxasgtrtckgeoeqmeec")
                .withPublicCloudResourceName("nquaerebgaopkptxxbreyhr")
                .withAwsSourceSchema("dnbeeswitidsf")
                .withAwsRegion("qwurftmiaqdjvlbsxtmdosiauw")
                .withAwsTags(mapOf("key3315", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
