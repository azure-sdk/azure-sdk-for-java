// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2VpcProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2VpcProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated22;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2Vpcs CreateOrReplace.
 */
public final class Ec2VpcsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2Vpcs_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2Vpcs_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2VpcsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2Vpcs()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("bcrtgodiyozdsiqbhdvsaaog")
            .withExistingResourceGroup("rgec2Vpc")
            .withTags(mapOf("key2430", "fakeTokenPlaceholder"))
            .withProperties(new Ec2VpcProperties()
                .withAwsProperties(new AwsEc2VpcProperties().withCidrBlock("amstuguadqkmlmofdszmxhgssf")
                    .withCidrBlockAssociations(Arrays.asList("ykwdexxzxjxowuuawym"))
                    .withDefaultNetworkAcl("lhtepidfpfsyxksnvekueeyvw")
                    .withDefaultSecurityGroup("qtqgizvsvzdqxmbwwpmtcnqlfuh")
                    .withEnableDnsHostnames(true)
                    .withEnableDnsSupport(true)
                    .withInstanceTenancy("haqdsdkgbjmnwdgamqs")
                    .withIpv4IpamPoolId("ldzbfvpzpwudqtdyb")
                    .withIpv4NetmaskLength(21)
                    .withIpv6CidrBlocks(Arrays.asList("q"))
                    .withTags(Arrays.asList(
                        new TagAutoGenerated22().withKey("fakeTokenPlaceholder").withValue("tqvkxdrwsaxvxwckrpqk")))
                    .withVpcId("wqqqqmtbgzmdfmkiaoyjdkavuzzzzw"))
                .withPublicCloudConnectorsResourceId("hpzdeuzmjfwatmynigq")
                .withAwsAccountId("vskthos")
                .withArn("isskkecektndkosbruasgvkakzf")
                .withPublicCloudResourceName("qjwdilmlbbam")
                .withAwsSourceSchema("vnjplxwhapuaydjjdqiaqfvbfjam")
                .withAwsRegion("paraxj")
                .withAwsTags(mapOf("key96", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
