// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsSageMakerNotebookInstanceSummaryProperties;
import com.azure.resourcemanager.awsconnector.models.InstanceType;
import com.azure.resourcemanager.awsconnector.models.InstanceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.NotebookInstanceStatus;
import com.azure.resourcemanager.awsconnector.models.NotebookInstanceStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.SageMakerNotebookInstanceSummaryProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SageMakerNotebookInstanceSummaries CreateOrReplace.
 */
public final class SageMakerNotebookInstanceSummariesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * SageMakerNotebookInstanceSummaries_CreateOrReplace.json
     */
    /**
     * Sample code: SageMakerNotebookInstanceSummaries_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void sageMakerNotebookInstanceSummariesCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.sageMakerNotebookInstanceSummaries()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("khdjmafoabcvhksslfjtzlyh")
            .withExistingResourceGroup("rgsageMakerNotebookInstanceSummary")
            .withTags(mapOf("key9470", "fakeTokenPlaceholder"))
            .withProperties(
                new SageMakerNotebookInstanceSummaryProperties()
                    .withAwsProperties(new AwsSageMakerNotebookInstanceSummaryProperties()
                        .withAdditionalCodeRepositories(Arrays.asList("pkjwtq"))
                        .withCreationTime(OffsetDateTime.parse("2024-10-08T03:50:00.672Z"))
                        .withDefaultCodeRepository("fakeTokenPlaceholder")
                        .withInstanceType(
                            new InstanceTypeEnumValue().withValue(InstanceType.fromString("ml.c4.2xlarge")))
                        .withLastModifiedTime(OffsetDateTime.parse("2024-10-08T03:50:00.673Z"))
                        .withNotebookInstanceArn("wxrcvukcvvtd")
                        .withNotebookInstanceLifecycleConfigName("t")
                        .withNotebookInstanceName("nwemhcydnbtwmti")
                        .withNotebookInstanceStatus(
                            new NotebookInstanceStatusEnumValue().withValue(NotebookInstanceStatus.DELETING))
                        .withUrl("ricclxhpsojfujeolzbg"))
                    .withPublicCloudConnectorsResourceId("khlyjmgts")
                    .withAwsAccountId("ymlnxodvrwztwew")
                    .withArn("ncvgnrtwmjxungpgrodvsy")
                    .withPublicCloudResourceName("ocd")
                    .withAwsSourceSchema("gqddonfcsn")
                    .withAwsRegion("oqykvfkrsmwkvszj")
                    .withAwsTags(mapOf("key4152", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
