// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AdvancedEventSelector;
import com.azure.resourcemanager.awsconnector.models.AdvancedFieldSelector;
import com.azure.resourcemanager.awsconnector.models.AwsCloudTrailProperties;
import com.azure.resourcemanager.awsconnector.models.CloudTrailProperties;
import com.azure.resourcemanager.awsconnector.models.DataResource;
import com.azure.resourcemanager.awsconnector.models.EventSelector;
import com.azure.resourcemanager.awsconnector.models.EventSelectorReadWriteType;
import com.azure.resourcemanager.awsconnector.models.InsightSelector;
import com.azure.resourcemanager.awsconnector.models.Tag;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CloudTrailTrails CreateOrReplace.
 */
public final class CloudTrailTrailsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * CloudTrailTrails_CreateOrReplace.json
     */
    /**
     * Sample code: CloudTrailTrails_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        cloudTrailTrailsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.cloudTrailTrails()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("lectoohspiqh")
            .withExistingResourceGroup("rgcloudTrailTrail")
            .withTags(mapOf("key8112", "fakeTokenPlaceholder"))
            .withProperties(
                new CloudTrailProperties()
                    .withAwsProperties(new AwsCloudTrailProperties()
                        .withAdvancedEventSelectors(Arrays.asList(new AdvancedEventSelector()
                            .withFieldSelectors(
                                Arrays.asList(new AdvancedFieldSelector().withEndsWith(Arrays.asList("xvhm"))
                                    .withEquals(Arrays.asList("wxznrgvwsjlxdvssmmse"))
                                    .withField("mq")
                                    .withNotEndsWith(Arrays.asList("x"))
                                    .withNotEquals(Arrays.asList("vglmmoivfeqg"))
                                    .withNotStartsWith(Arrays.asList("pojptcfcw"))
                                    .withStartsWith(Arrays.asList("fvldfltesnmpieljtehsvxudvxdujk"))))
                            .withName("ee")))
                        .withArn("gbcn")
                        .withCloudWatchLogsLogGroupArn("nznfnuyxarmdmdtgjiougqgq")
                        .withCloudWatchLogsRoleArn("umhmpx")
                        .withEnableLogFileValidation(true)
                        .withEventSelectors(Arrays.asList(new EventSelector()
                            .withDataResources(Arrays.asList(new DataResource().withType("txxrjncwohiohorurqdxzabre")
                                .withValues(Arrays.asList("xhlnkujkbtpptbwchhh"))))
                            .withExcludeManagementEventSources(Arrays.asList("r"))
                            .withIncludeManagementEvents(true)
                            .withReadWriteType(EventSelectorReadWriteType.ALL)))
                        .withIncludeGlobalServiceEvents(true)
                        .withInsightSelectors(
                            Arrays.asList(new InsightSelector().withInsightType("brwlpasadlbwolsysta")))
                        .withIsLogging(true)
                        .withIsMultiRegionTrail(true)
                        .withIsOrganizationTrail(true)
                        .withKmsKeyId("fakeTokenPlaceholder")
                        .withS3BucketName("iknyfgvujttyxsralujehxb")
                        .withS3KeyPrefix("fakeTokenPlaceholder")
                        .withSnsTopicArn("owdxqmsrqylekull")
                        .withSnsTopicName("goknthoxfekdccclolilvnyacvcop")
                        .withTags(Arrays.asList(new Tag().withKey("fakeTokenPlaceholder").withValue("vnsgm")))
                        .withTrailName("oawneexezdnuouxdykllsflq"))
                    .withPublicCloudConnectorsResourceId("i")
                    .withAwsAccountId("mynelopf")
                    .withArn("jlwqroammottlyguyzu")
                    .withPublicCloudResourceName("aidwpmbkjspiucpvmzgg")
                    .withAwsSourceSchema("tvnaxpvricaiyoucpeauofeibwrk")
                    .withAwsRegion("dfvobbnupacpqsgexblxjlw")
                    .withAwsTags(mapOf("key5810", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
