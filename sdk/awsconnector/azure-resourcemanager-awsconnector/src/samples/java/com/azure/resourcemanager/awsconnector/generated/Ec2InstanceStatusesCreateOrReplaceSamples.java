// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2InstanceStatusProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2InstanceStatusProperties;
import com.azure.resourcemanager.awsconnector.models.EventCode;
import com.azure.resourcemanager.awsconnector.models.EventCodeEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceState;
import com.azure.resourcemanager.awsconnector.models.InstanceStateName;
import com.azure.resourcemanager.awsconnector.models.InstanceStateNameEnumValue;
import com.azure.resourcemanager.awsconnector.models.InstanceStatusDetails;
import com.azure.resourcemanager.awsconnector.models.InstanceStatusEvent;
import com.azure.resourcemanager.awsconnector.models.InstanceStatusSummary;
import com.azure.resourcemanager.awsconnector.models.StatusName;
import com.azure.resourcemanager.awsconnector.models.StatusNameEnumValue;
import com.azure.resourcemanager.awsconnector.models.StatusType;
import com.azure.resourcemanager.awsconnector.models.StatusTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.SummaryStatus;
import com.azure.resourcemanager.awsconnector.models.SummaryStatusEnumValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2InstanceStatuses CreateOrReplace.
 */
public final class Ec2InstanceStatusesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2InstanceStatuses_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2InstanceStatuses_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ec2InstanceStatusesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2InstanceStatuses()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("pgcnqdiaetxhtdrimhlcwthap")
            .withExistingResourceGroup("rgec2InstanceStatus")
            .withTags(mapOf("key1363", "fakeTokenPlaceholder"))
            .withProperties(new Ec2InstanceStatusProperties()
                .withAwsProperties(new AwsEc2InstanceStatusProperties().withAvailabilityZone("ytnhdkisucgzas")
                    .withEvents(Arrays.asList(new InstanceStatusEvent()
                        .withCode(new EventCodeEnumValue().withValue(EventCode.INSTANCE_REBOOT))
                        .withDescription("hgvqagwss")
                        .withInstanceEventId("rnbshnkjo")
                        .withNotAfter(OffsetDateTime.parse("2024-10-08T03:53:26.681Z"))
                        .withNotBefore(OffsetDateTime.parse("2024-10-08T03:53:26.681Z"))
                        .withNotBeforeDeadline(OffsetDateTime.parse("2024-10-08T03:53:26.681Z"))))
                    .withInstanceId("aoffpxifvwnouuzzpkqc")
                    .withInstanceState(new InstanceState()
                        .withCode(9)
                        .withName(new InstanceStateNameEnumValue().withValue(InstanceStateName.PENDING)))
                    .withInstanceStatus(new InstanceStatusSummary()
                        .withDetails(Arrays.asList(new InstanceStatusDetails()
                            .withImpairedSince(OffsetDateTime.parse("2024-10-08T03:53:26.682Z"))
                            .withName(new StatusNameEnumValue().withValue(StatusName.REACHABILITY))
                            .withStatus(new StatusTypeEnumValue().withValue(StatusType.FAILED))))
                        .withStatus(new SummaryStatusEnumValue().withValue(SummaryStatus.IMPAIRED)))
                    .withOutpostArn("pprqpuqeokryiz")
                    .withSystemStatus(new InstanceStatusSummary()
                        .withDetails(Arrays.asList(new InstanceStatusDetails()
                            .withImpairedSince(OffsetDateTime.parse("2024-10-08T03:53:26.682Z"))
                            .withName(new StatusNameEnumValue().withValue(StatusName.REACHABILITY))
                            .withStatus(new StatusTypeEnumValue().withValue(StatusType.FAILED))))
                        .withStatus(new SummaryStatusEnumValue().withValue(SummaryStatus.IMPAIRED))))
                .withPublicCloudConnectorsResourceId("ouhnawwxmqjpfsmz")
                .withAwsAccountId("pjfvkzfpdqdiweudknutyey")
                .withArn("nnkvtshcitbzvtrcwybizpxfznrsyg")
                .withPublicCloudResourceName("mqygrsmavjlivhliidvrmopovsba")
                .withAwsSourceSchema("zvcrlmc")
                .withAwsRegion("uxchexljsahdlvcecpckwevokhvd")
                .withAwsTags(mapOf("key8745", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
