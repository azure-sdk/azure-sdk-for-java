// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2KeyPairProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2KeyPairProperties;
import com.azure.resourcemanager.awsconnector.models.KeyFormat;
import com.azure.resourcemanager.awsconnector.models.KeyType;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated14;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2KeyPairs CreateOrReplace.
 */
public final class Ec2KeyPairsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2KeyPairs_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2KeyPairs_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2KeyPairsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2KeyPairs()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("okgykmqgdqfktczzwnisgblxjor")
            .withExistingResourceGroup("rgec2KeyPair")
            .withTags(mapOf("key7076", "fakeTokenPlaceholder"))
            .withProperties(
                new Ec2KeyPairProperties()
                    .withAwsProperties(new AwsEc2KeyPairProperties().withKeyFingerprint("fakeTokenPlaceholder")
                        .withKeyFormat(KeyFormat.PEM)
                        .withKeyName("fakeTokenPlaceholder")
                        .withKeyPairId("fakeTokenPlaceholder")
                        .withKeyType(KeyType.ED25519)
                        .withPublicKeyMaterial("fakeTokenPlaceholder")
                        .withTags(Arrays.asList(new TagAutoGenerated14().withKey("fakeTokenPlaceholder")
                            .withValue("fcqkvmxnvgkszsjglbmc"))))
                    .withPublicCloudConnectorsResourceId("dtqfffijdvwrjascztihbhcjfo")
                    .withAwsAccountId("iamyich")
                    .withArn("hbplblilwwscgwiaifygy")
                    .withPublicCloudResourceName("nyywppatxodspls")
                    .withAwsSourceSchema("qbl")
                    .withAwsRegion("zkxhveyqnzcmihgmancphtwumisld")
                    .withAwsTags(mapOf("key6629", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
