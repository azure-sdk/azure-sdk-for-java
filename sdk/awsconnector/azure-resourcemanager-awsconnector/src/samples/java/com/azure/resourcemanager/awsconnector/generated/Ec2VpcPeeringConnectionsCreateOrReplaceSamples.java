// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2VpcPeeringConnectionProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2VpcPeeringConnectionProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated23;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2VpcPeeringConnections CreateOrReplace.
 */
public final class Ec2VpcPeeringConnectionsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2VpcPeeringConnections_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2VpcPeeringConnections_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ec2VpcPeeringConnectionsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2VpcPeeringConnections()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("lqfmwbb")
            .withExistingResourceGroup("rgec2VPCPeeringConnection")
            .withTags(mapOf("key6160", "fakeTokenPlaceholder"))
            .withProperties(new Ec2VpcPeeringConnectionProperties()
                .withAwsProperties(new AwsEc2VpcPeeringConnectionProperties().withId("emsfznbbfejdwouyracpg")
                    .withPeerOwnerId("ddjymdvquwsrdt")
                    .withPeerRegion("qcbhjmbddzbcs")
                    .withPeerRoleArn("kaophgngiqxorpifcluz")
                    .withPeerVpcId("ccurncyuawhicumwcxxnmuq")
                    .withTags(Arrays
                        .asList(new TagAutoGenerated23().withKey("fakeTokenPlaceholder").withValue("xgzluroiobmj")))
                    .withVpcId("lkitywfkos"))
                .withPublicCloudConnectorsResourceId("jlenaffdnxswiytzyfvbfjfghuf")
                .withAwsAccountId("digeyffuemunjngxz")
                .withArn("dxhchlgpyvhsexomfqaj")
                .withPublicCloudResourceName("ackzpztj")
                .withAwsSourceSchema("pfevychrftkuamvlorm")
                .withAwsRegion("qgrfrceaszbzvo")
                .withAwsTags(mapOf("key8493", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
