// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AddOn;
import com.azure.resourcemanager.awsconnector.models.AddOnStatus;
import com.azure.resourcemanager.awsconnector.models.AutoSnapshotAddOn;
import com.azure.resourcemanager.awsconnector.models.AwsLightsailInstanceProperties;
import com.azure.resourcemanager.awsconnector.models.Disk;
import com.azure.resourcemanager.awsconnector.models.Hardware;
import com.azure.resourcemanager.awsconnector.models.LightsailInstanceProperties;
import com.azure.resourcemanager.awsconnector.models.Location;
import com.azure.resourcemanager.awsconnector.models.MonthlyTransfer;
import com.azure.resourcemanager.awsconnector.models.Networking;
import com.azure.resourcemanager.awsconnector.models.Port;
import com.azure.resourcemanager.awsconnector.models.State;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated38;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for LightsailInstances CreateOrReplace.
 */
public final class LightsailInstancesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * LightsailInstances_CreateOrReplace.json
     */
    /**
     * Sample code: LightsailInstances_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        lightsailInstancesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.lightsailInstances()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("cry")
            .withExistingResourceGroup("rglightsailInstance")
            .withTags(mapOf("key2601", "fakeTokenPlaceholder"))
            .withProperties(new LightsailInstanceProperties()
                .withAwsProperties(new AwsLightsailInstanceProperties()
                    .withAddOns(Arrays.asList(new AddOn().withAddOnType("dk")
                        .withAutoSnapshotAddOnRequest(
                            new AutoSnapshotAddOn().withSnapshotTimeOfDay("mnthrtsoittlqrvxnwvrbaxaazh"))
                        .withStatus(AddOnStatus.DISABLED)))
                    .withAvailabilityZone("an")
                    .withBlueprintId("fcezpmlwqhchkvmrdnywpr")
                    .withBundleId("yckqxqitrffsidmdxkrmaulfgmrj")
                    .withHardware(new Hardware().withCpuCount(30)
                        .withDisks(Arrays.asList(new Disk().withAttachedTo("qoievao")
                            .withAttachmentState("ujinucmjcnzuosaqycrkndh")
                            .withDiskName("tmfpjhluaytgmpxxqtccohpge")
                            .withIops(11)
                            .withIsSystemDisk(true)
                            .withPath("urbubhyieizmbnyddjkyaadmod")
                            .withSizeInGb("vpd")))
                        .withRamSizeInGb(4))
                    .withInstanceArn("mnodcgqlejrhlctqngwxyoqewk")
                    .withInstanceName("xfxnlievrppfrt")
                    .withIsStaticIp(true)
                    .withKeyPairName("fakeTokenPlaceholder")
                    .withLocation(new Location().withAvailabilityZone("t").withRegionName("zgmew"))
                    .withNetworking(
                        new Networking().withMonthlyTransfer(new MonthlyTransfer().withGbPerMonthAllocated("dvbefi"))
                            .withPorts(Arrays.asList(new Port().withAccessDirection("bybrpghkgcvx")
                                .withAccessFrom("kslf")
                                .withAccessType("dcqaucgpbxngw")
                                .withCidrListAliases(Arrays.asList("btgxaahlpibcqefsgcghfd"))
                                .withCidrs(Arrays.asList("lhmvhnh"))
                                .withCommonName("t")
                                .withFromPort(23)
                                .withIpv6Cidrs(Arrays.asList("qladlrdxfiad"))
                                .withProtocol("bzikwazzeydyrukrjhsaogkkxua")
                                .withToPort(13))))
                    .withPrivateIpAddress("ieeqsrklgnc")
                    .withPublicIpAddress("vonneqx")
                    .withResourceType("obxjqk")
                    .withSshKeyName("fakeTokenPlaceholder")
                    .withState(new State().withCode(29).withName("xdtssqcrsvaqphv"))
                    .withSupportCode("fakeTokenPlaceholder")
                    .withTags(Arrays
                        .asList(new TagAutoGenerated38().withKey("fakeTokenPlaceholder").withValue("vbybagbqynriyix")))
                    .withUserData("f")
                    .withUsername("rhivoaleeqwog"))
                .withPublicCloudConnectorsResourceId("vsgxzwhzepjvcjjoqj")
                .withAwsAccountId("bclcfxetkkugpyilojpvoypui")
                .withArn("dcvwurrexherolt")
                .withPublicCloudResourceName("ibkgqwotzyy")
                .withAwsSourceSchema("zzcfeeoutptp")
                .withAwsRegion("zjxqlmimpqxec")
                .withAwsTags(mapOf("key8646", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
