// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AdvancedSecurityOptions;
import com.azure.resourcemanager.awsconnector.models.AutoTuneOptionsOutput;
import com.azure.resourcemanager.awsconnector.models.AutoTuneState;
import com.azure.resourcemanager.awsconnector.models.AutoTuneStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.AwsOpenSearchDomainStatusProperties;
import com.azure.resourcemanager.awsconnector.models.ChangeProgressDetails;
import com.azure.resourcemanager.awsconnector.models.ClusterConfig;
import com.azure.resourcemanager.awsconnector.models.CognitoOptions;
import com.azure.resourcemanager.awsconnector.models.ColdStorageOptions;
import com.azure.resourcemanager.awsconnector.models.ConfigChangeStatus;
import com.azure.resourcemanager.awsconnector.models.ConfigChangeStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.DeploymentStatus;
import com.azure.resourcemanager.awsconnector.models.DeploymentStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.DomainEndpointOptions;
import com.azure.resourcemanager.awsconnector.models.DomainProcessingStatusType;
import com.azure.resourcemanager.awsconnector.models.DomainProcessingStatusTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.EbsOptions;
import com.azure.resourcemanager.awsconnector.models.EncryptionAtRestOptions;
import com.azure.resourcemanager.awsconnector.models.InitiatedBy;
import com.azure.resourcemanager.awsconnector.models.InitiatedByEnumValue;
import com.azure.resourcemanager.awsconnector.models.IpAddressType;
import com.azure.resourcemanager.awsconnector.models.IpAddressTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.LogPublishingOption;
import com.azure.resourcemanager.awsconnector.models.ModifyingProperties;
import com.azure.resourcemanager.awsconnector.models.NodeToNodeEncryptionOptions;
import com.azure.resourcemanager.awsconnector.models.OffPeakWindow;
import com.azure.resourcemanager.awsconnector.models.OffPeakWindowOptions;
import com.azure.resourcemanager.awsconnector.models.OpenSearchDomainStatusProperties;
import com.azure.resourcemanager.awsconnector.models.OpenSearchPartitionInstanceType;
import com.azure.resourcemanager.awsconnector.models.OpenSearchPartitionInstanceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.OpenSearchWarmPartitionInstanceType;
import com.azure.resourcemanager.awsconnector.models.OpenSearchWarmPartitionInstanceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.PropertyValueType;
import com.azure.resourcemanager.awsconnector.models.PropertyValueTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.SamlIdp;
import com.azure.resourcemanager.awsconnector.models.SamlOptionsOutput;
import com.azure.resourcemanager.awsconnector.models.ServiceSoftwareOptions;
import com.azure.resourcemanager.awsconnector.models.SnapshotOptions;
import com.azure.resourcemanager.awsconnector.models.SoftwareUpdateOptions;
import com.azure.resourcemanager.awsconnector.models.TlsSecurityPolicy;
import com.azure.resourcemanager.awsconnector.models.TlsSecurityPolicyEnumValue;
import com.azure.resourcemanager.awsconnector.models.VolumeType;
import com.azure.resourcemanager.awsconnector.models.VolumeTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.VpcDerivedInfo;
import com.azure.resourcemanager.awsconnector.models.WindowStartTime;
import com.azure.resourcemanager.awsconnector.models.ZoneAwarenessConfig;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for OpenSearchDomainStatuses CreateOrReplace.
 */
public final class OpenSearchDomainStatusesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * OpenSearchDomainStatuses_CreateOrReplace.json
     */
    /**
     * Sample code: OpenSearchDomainStatuses_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        openSearchDomainStatusesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.openSearchDomainStatuses()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("cjnfjucekzuxbrhfzskptnxmy")
            .withExistingResourceGroup("rgopenSearchDomainStatus")
            .withTags(mapOf("key9493", "fakeTokenPlaceholder"))
            .withProperties(new OpenSearchDomainStatusProperties()
                .withAwsProperties(new AwsOpenSearchDomainStatusProperties().withArn("svblrdkqxeghxc")
                    .withAccessPolicies("zmizapetmvhfuhnuevg")
                    .withAdvancedOptions(mapOf("key5855", "fakeTokenPlaceholder"))
                    .withAdvancedSecurityOptions(new AdvancedSecurityOptions()
                        .withAnonymousAuthDisableDate(OffsetDateTime.parse("2024-10-08T03:49:18.317Z"))
                        .withAnonymousAuthEnabled(true)
                        .withEnabled(true)
                        .withInternalUserDatabaseEnabled(true)
                        .withSamlOptions(new SamlOptionsOutput().withEnabled(true)
                            .withIdp(
                                new SamlIdp().withEntityId("ujb").withMetadataContent("ncvlnvyvuwdkmspvvynhbjwzzerkl"))
                            .withRolesKey("fakeTokenPlaceholder")
                            .withSessionTimeoutMinutes(22)
                            .withSubjectKey("fakeTokenPlaceholder")))
                    .withAutoTuneOptions(new AutoTuneOptionsOutput().withErrorMessage("gdouqrr")
                        .withState(new AutoTuneStateEnumValue().withValue(AutoTuneState.DISABLED))
                        .withUseOffPeakWindow(true))
                    .withChangeProgressDetails(new ChangeProgressDetails().withChangeId("acuqzpomrpdxccssgsjtftt")
                        .withConfigChangeStatus(
                            new ConfigChangeStatusEnumValue().withValue(ConfigChangeStatus.APPLYING_CHANGES))
                        .withInitiatedBy(new InitiatedByEnumValue().withValue(InitiatedBy.CUSTOMER))
                        .withLastUpdatedTime(OffsetDateTime.parse("2024-10-08T03:49:18.319Z"))
                        .withMessage("netweglaakukislhan")
                        .withStartTime(OffsetDateTime.parse("2024-10-08T03:49:18.319Z")))
                    .withClusterConfig(
                        new ClusterConfig().withColdStorageOptions(new ColdStorageOptions().withEnabled(true))
                            .withDedicatedMasterCount(15)
                            .withDedicatedMasterEnabled(true)
                            .withDedicatedMasterType(new OpenSearchPartitionInstanceTypeEnumValue()
                                .withValue(OpenSearchPartitionInstanceType.C4_2XLARGE_SEARCH))
                            .withInstanceCount(6)
                            .withInstanceType(new OpenSearchPartitionInstanceTypeEnumValue()
                                .withValue(OpenSearchPartitionInstanceType.C4_2XLARGE_SEARCH))
                            .withMultiAZWithStandbyEnabled(true)
                            .withWarmCount(29)
                            .withWarmEnabled(true)
                            .withWarmType(new OpenSearchWarmPartitionInstanceTypeEnumValue()
                                .withValue(OpenSearchWarmPartitionInstanceType.ULTRAWARM1_LARGE_SEARCH))
                            .withZoneAwarenessConfig(new ZoneAwarenessConfig().withAvailabilityZoneCount(20))
                            .withZoneAwarenessEnabled(true))
                    .withCognitoOptions(new CognitoOptions().withEnabled(true)
                        .withIdentityPoolId("dcpqrbpnpihpqvibpysnhi")
                        .withRoleArn("wdpsbg")
                        .withUserPoolId("oeiqtnpxt"))
                    .withCreated(true)
                    .withDeleted(true)
                    .withDomainEndpointOptions(
                        new DomainEndpointOptions().withCustomEndpoint("pkalvbtpzxwdwtzlhet")
                            .withCustomEndpointCertificateArn("bmcnynq")
                            .withCustomEndpointEnabled(true)
                            .withEnforceHttps(true)
                            .withTlsSecurityPolicy(new TlsSecurityPolicyEnumValue()
                                .withValue(TlsSecurityPolicy.POLICY_MIN_TLS_1_0_2019_07)))
                    .withDomainId("vdvjabmtsxndtepulmirzlkxjc")
                    .withDomainName("zmweyexy")
                    .withDomainProcessingStatus(
                        new DomainProcessingStatusTypeEnumValue().withValue(DomainProcessingStatusType.ACTIVE))
                    .withEbsOptions(new EbsOptions().withEbsEnabled(true)
                        .withIops(1)
                        .withThroughput(6)
                        .withVolumeSize(16)
                        .withVolumeType(new VolumeTypeEnumValue().withValue(VolumeType.GP2)))
                    .withEncryptionAtRestOptions(
                        new EncryptionAtRestOptions().withEnabled(true).withKmsKeyId("fakeTokenPlaceholder"))
                    .withEndpoint("y")
                    .withEndpointV2("lnmdhcvptzovtjrggoqef")
                    .withEndpoints(mapOf("key7016", "fakeTokenPlaceholder"))
                    .withEngineVersion("nafwkgnvpagjlvctspjtgg")
                    .withIpAddressType(new IpAddressTypeEnumValue().withValue(IpAddressType.DUALSTACK))
                    .withLogPublishingOptions(mapOf("key1257",
                        new LogPublishingOption().withCloudWatchLogsLogGroupArn("yflaoiiuhbxlodpwh").withEnabled(true)))
                    .withModifyingProperties(
                        Arrays.asList(new ModifyingProperties().withActiveValue("igvntcixfgeammklivfvtjjxfka")
                            .withName("wbfqxsudlhdpidezy")
                            .withPendingValue("n")
                            .withValueType(new PropertyValueTypeEnumValue().withValue(PropertyValueType.PLAIN_TEXT))))
                    .withNodeToNodeEncryptionOptions(new NodeToNodeEncryptionOptions().withEnabled(true))
                    .withOffPeakWindowOptions(new OffPeakWindowOptions().withEnabled(true)
                        .withOffPeakWindow(new OffPeakWindow()
                            .withWindowStartTime(new WindowStartTime().withHours(19L).withMinutes(7L))))
                    .withProcessing(true)
                    .withServiceSoftwareOptions(new ServiceSoftwareOptions()
                        .withAutomatedUpdateDate(OffsetDateTime.parse("2024-10-08T03:49:18.320Z"))
                        .withCancellable(true)
                        .withCurrentVersion("ugdoxim")
                        .withDescription("moodysfsdplowtykjopgnlgeodxt")
                        .withNewVersion("awqdkyicwktzdn")
                        .withOptionalDeployment(true)
                        .withUpdateAvailable(true)
                        .withUpdateStatus(new DeploymentStatusEnumValue().withValue(DeploymentStatus.COMPLETED)))
                    .withSnapshotOptions(new SnapshotOptions().withAutomatedSnapshotStartHour(9))
                    .withSoftwareUpdateOptions(new SoftwareUpdateOptions().withAutoSoftwareUpdateEnabled(true))
                    .withUpgradeProcessing(true)
                    .withVpcOptions(new VpcDerivedInfo().withAvailabilityZones(Arrays.asList("laxoeorkeojjhcnoji"))
                        .withSecurityGroupIds(Arrays.asList("ap"))
                        .withSubnetIds(Arrays.asList("oric"))
                        .withVpcId("jffbtwxjojtqphtd")))
                .withPublicCloudConnectorsResourceId("g")
                .withAwsAccountId("l")
                .withArn("xxoyruemlfezddeqgvpfvbvqrmmhzk")
                .withPublicCloudResourceName("sntfjznnaylmvehihglcoyqpcyacz")
                .withAwsSourceSchema("qrkamtxqjfb")
                .withAwsRegion("mpszpnxbznm")
                .withAwsTags(mapOf("key5895", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
