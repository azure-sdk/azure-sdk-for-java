// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEksNodegroupProperties;
import com.azure.resourcemanager.awsconnector.models.EksNodegroupProperties;
import com.azure.resourcemanager.awsconnector.models.LaunchTemplateSpecificationAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.RemoteAccess;
import com.azure.resourcemanager.awsconnector.models.ScalingConfig;
import com.azure.resourcemanager.awsconnector.models.Taint;
import com.azure.resourcemanager.awsconnector.models.UpdateConfig;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EksNodegroups CreateOrReplace.
 */
public final class EksNodegroupsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EksNodegroups_CreateOrReplace.json
     */
    /**
     * Sample code: EksNodegroups_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        eksNodegroupsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.eksNodegroups()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("qfzxiflpnxiua")
            .withExistingResourceGroup("rgeksNodegroup")
            .withTags(mapOf("key3889", "fakeTokenPlaceholder"))
            .withProperties(new EksNodegroupProperties()
                .withAwsProperties(new AwsEksNodegroupProperties().withAmiType("cupzyobvolczhkenpdfcfcqb")
                    .withArn("shesuqduavivrddwgrqtaukjv")
                    .withCapacityType("pkzjnsykbn")
                    .withClusterName("qcbbidlhrczzbp")
                    .withDiskSize(14)
                    .withForceUpdateEnabled(true)
                    .withId("y")
                    .withInstanceTypes(Arrays.asList("gfy"))
                    .withLabels(mapOf("key8269", "fakeTokenPlaceholder"))
                    .withLaunchTemplate(new LaunchTemplateSpecificationAutoGenerated().withId("si")
                        .withName("gdqcgfql")
                        .withVersion("lonea"))
                    .withNodeRole("rzscoljnrtiueunqg")
                    .withNodegroupName("wipo")
                    .withReleaseVersion("wbgbpvjsrkscfxkcbuatuirn")
                    .withRemoteAccess(new RemoteAccess().withEc2SshKey("fakeTokenPlaceholder")
                        .withSourceSecurityGroups(Arrays.asList("jv")))
                    .withScalingConfig(new ScalingConfig().withDesiredSize(2).withMaxSize(22).withMinSize(18))
                    .withSubnets(Arrays.asList("jtzrxn"))
                    .withTags(mapOf("key1070", "fakeTokenPlaceholder"))
                    .withTaints(Arrays.asList(new Taint().withEffect("cqyaskimdnuadazzlnzdgwjbg")
                        .withKey("fakeTokenPlaceholder")
                        .withValue("hfdagmnrdomthxavrf")))
                    .withUpdateConfig(new UpdateConfig().withMaxUnavailable(24).withMaxUnavailablePercentage(18))
                    .withVersion("pzblimbasgkqgyknilzxktqx"))
                .withPublicCloudConnectorsResourceId("val")
                .withAwsAccountId("vfdqtwvbpgxbhqwrbowcnz")
                .withArn("ckgekeh")
                .withPublicCloudResourceName("aybzphomshbbtslocleyyvgcfu")
                .withAwsSourceSchema("cizsekmbzwzgaklajexx")
                .withAwsRegion("glvfswwditueizhrpfvhiwm")
                .withAwsTags(mapOf("key7151", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
