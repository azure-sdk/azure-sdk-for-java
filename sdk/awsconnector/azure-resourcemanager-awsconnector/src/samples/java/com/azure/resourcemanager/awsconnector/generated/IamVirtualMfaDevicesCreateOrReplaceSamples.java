// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsIamVirtualMfaDeviceProperties;
import com.azure.resourcemanager.awsconnector.models.IamVirtualMfaDeviceProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated34;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IamVirtualMfaDevices CreateOrReplace.
 */
public final class IamVirtualMfaDevicesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * IamVirtualMfaDevices_CreateOrReplace.json
     */
    /**
     * Sample code: IamVirtualMfaDevices_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        iamVirtualMfaDevicesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.iamVirtualMfaDevices()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ixkqwzfnsthfshdlvsvh")
            .withExistingResourceGroup("rgiamVirtualMFADevice")
            .withTags(mapOf("key2474", "fakeTokenPlaceholder"))
            .withProperties(new IamVirtualMfaDeviceProperties()
                .withAwsProperties(new AwsIamVirtualMfaDeviceProperties().withPath("iuiajbhehzagt")
                    .withSerialNumber("zbsulwrnmmhdwuelwbybavq")
                    .withTags(Arrays.asList(
                        new TagAutoGenerated34().withKey("fakeTokenPlaceholder").withValue("kpmtbersaovhycdipca")))
                    .withUsers(Arrays.asList("pzktvxysprnhhivbnuuutllcomxp"))
                    .withVirtualMfaDeviceName("m"))
                .withPublicCloudConnectorsResourceId("chegzvubkwsrhocspiedvdrzuhkjo")
                .withAwsAccountId("deoktff")
                .withArn("soptozsivfaghgr")
                .withPublicCloudResourceName("uktgscbqvuprtkj")
                .withAwsSourceSchema("iotqvkkgxaoeewgxegimnri")
                .withAwsRegion("h")
                .withAwsTags(mapOf("key1965", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
