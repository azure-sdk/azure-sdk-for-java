// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEcsServiceProperties;
import com.azure.resourcemanager.awsconnector.models.AwsVpcConfiguration;
import com.azure.resourcemanager.awsconnector.models.AwsVpcConfigurationAssignPublicIp;
import com.azure.resourcemanager.awsconnector.models.CapacityProviderStrategyItem;
import com.azure.resourcemanager.awsconnector.models.DeploymentAlarms;
import com.azure.resourcemanager.awsconnector.models.DeploymentCircuitBreaker;
import com.azure.resourcemanager.awsconnector.models.DeploymentConfiguration;
import com.azure.resourcemanager.awsconnector.models.DeploymentController;
import com.azure.resourcemanager.awsconnector.models.DeploymentControllerType;
import com.azure.resourcemanager.awsconnector.models.EbsTagSpecification;
import com.azure.resourcemanager.awsconnector.models.EbsTagSpecificationPropagateTags;
import com.azure.resourcemanager.awsconnector.models.EcsServiceProperties;
import com.azure.resourcemanager.awsconnector.models.LaunchType;
import com.azure.resourcemanager.awsconnector.models.LoadBalancer;
import com.azure.resourcemanager.awsconnector.models.LogConfiguration;
import com.azure.resourcemanager.awsconnector.models.NetworkConfiguration;
import com.azure.resourcemanager.awsconnector.models.PlacementConstraint;
import com.azure.resourcemanager.awsconnector.models.PlacementConstraintType;
import com.azure.resourcemanager.awsconnector.models.PlacementStrategy;
import com.azure.resourcemanager.awsconnector.models.PlacementStrategyType;
import com.azure.resourcemanager.awsconnector.models.PropagateTags;
import com.azure.resourcemanager.awsconnector.models.SchedulingStrategy;
import com.azure.resourcemanager.awsconnector.models.Secret;
import com.azure.resourcemanager.awsconnector.models.ServiceConnectClientAlias;
import com.azure.resourcemanager.awsconnector.models.ServiceConnectConfiguration;
import com.azure.resourcemanager.awsconnector.models.ServiceConnectService;
import com.azure.resourcemanager.awsconnector.models.ServiceConnectTlsCertificateAuthority;
import com.azure.resourcemanager.awsconnector.models.ServiceConnectTlsConfiguration;
import com.azure.resourcemanager.awsconnector.models.ServiceManagedEbsVolumeConfiguration;
import com.azure.resourcemanager.awsconnector.models.ServiceRegistry;
import com.azure.resourcemanager.awsconnector.models.ServiceVolumeConfiguration;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated26;
import com.azure.resourcemanager.awsconnector.models.TimeoutConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EcsServices CreateOrReplace.
 */
public final class EcsServicesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EcsServices_CreateOrReplace.json
     */
    /**
     * Sample code: EcsServices_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ecsServicesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ecsServices()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("xqpjwxermnqxbnitxykbnjhw")
            .withExistingResourceGroup("rgecsService")
            .withTags(mapOf("key8484", "fakeTokenPlaceholder"))
            .withProperties(new EcsServiceProperties()
                .withAwsProperties(new AwsEcsServiceProperties()
                    .withCapacityProviderStrategy(Arrays
                        .asList(new CapacityProviderStrategyItem().withBase(4)
                            .withCapacityProvider("wlfpynlwozihqvkgynmdqqmojbs")
                            .withWeight(28)))
                    .withCluster("rdbkmvsugiuvbwkuzagsnrx")
                    .withDeploymentConfiguration(new DeploymentConfiguration()
                        .withAlarms(new DeploymentAlarms().withAlarmNames(Arrays.asList("cibbvixciizruhpdxhpkifpwsaq"))
                            .withEnable(true)
                            .withRollback(true))
                        .withDeploymentCircuitBreaker(
                            new DeploymentCircuitBreaker().withEnable(true).withRollback(true))
                        .withMaximumPercent(14)
                        .withMinimumHealthyPercent(21))
                    .withDeploymentController(new DeploymentController().withType(DeploymentControllerType.CODE_DEPLOY))
                    .withDesiredCount(21)
                    .withEnableEcsManagedTags(true)
                    .withEnableExecuteCommand(true)
                    .withHealthCheckGracePeriodSeconds(1)
                    .withLaunchType(LaunchType.EC2)
                    .withLoadBalancers(Arrays.asList(new LoadBalancer().withContainerName("vjvntpnuzyftbm")
                        .withContainerPort(17)
                        .withLoadBalancerName("eryjxwmbfkms")
                        .withTargetGroupArn("woxbyyccpmqyiy")))
                    .withName("vo")
                    .withNetworkConfiguration(new NetworkConfiguration().withAwsvpcConfiguration(
                        new AwsVpcConfiguration().withAssignPublicIp(AwsVpcConfigurationAssignPublicIp.DISABLED)
                            .withSecurityGroups(Arrays.asList("uoauevqyxylmvje"))
                            .withSubnets(Arrays.asList("gkqxeakxvyw"))))
                    .withPlacementConstraints(Arrays
                        .asList(new PlacementConstraint().withExpression("hxzfzxbfmqqiwgbpgn")
                            .withType(PlacementConstraintType.DISTINCT_INSTANCE)))
                    .withPlacementStrategies(Arrays.asList(new PlacementStrategy().withField("tyrqdzgjrkwfhzwebvqld")
                        .withType(PlacementStrategyType.BINPACK)))
                    .withPlatformVersion("sfsqyvslsustugopfnnzssjli")
                    .withPropagateTags(PropagateTags.SERVICE)
                    .withRole("te")
                    .withSchedulingStrategy(SchedulingStrategy.DAEMON)
                    .withServiceArn("zuuoanjk")
                    .withServiceConnectConfiguration(new ServiceConnectConfiguration().withEnabled(true)
                        .withLogConfiguration(new LogConfiguration()
                            .withLogDriver("xwshxwanyuqrfzboxwfv")
                            .withSecretOptions(
                                Arrays.asList(new Secret().withName("uxsxwquwbafmsmbyyivhsjrjmfpmim")
                                    .withValueFrom("jnygsbiroyjlgrhs"))))
                        .withNamespace("tlewpbulbuguuuvq")
                        .withServices(Arrays.asList(new ServiceConnectService()
                            .withClientAliases(Arrays.asList(
                                new ServiceConnectClientAlias().withDnsName("hnnavbjclqhbdebomjoqzo").withPort(16)))
                            .withDiscoveryName("zuhijazofg")
                            .withIngressPortOverride(26)
                            .withPortName("q")
                            .withTimeout(
                                new TimeoutConfiguration().withIdleTimeoutSeconds(11).withPerRequestTimeoutSeconds(22))
                            .withTls(new ServiceConnectTlsConfiguration()
                                .withIssuerCertificateAuthority(
                                    new ServiceConnectTlsCertificateAuthority().withAwsPcaAuthorityArn("fqrmk"))
                                .withKmsKey("fakeTokenPlaceholder")
                                .withRoleArn("stdhwuiylmutipeonkolqjnbqelds")))))
                    .withServiceName("lyblywxxfszkgaaornuxliolfbft")
                    .withServiceRegistries(Arrays.asList(new ServiceRegistry().withContainerName("ppbxlxmpdbri")
                        .withContainerPort(7)
                        .withPort(6)
                        .withRegistryArn("qmfm")))
                    .withTags(Arrays.asList(new TagAutoGenerated26().withKey("fakeTokenPlaceholder").withValue("qukd")))
                    .withTaskDefinition("fozrumijzejhpjxeqkmthsswwuden")
                    .withVolumeConfigurations(
                        Arrays
                            .asList(new ServiceVolumeConfiguration()
                                .withManagedEbsVolume(new ServiceManagedEbsVolumeConfiguration().withEncrypted(true)
                                    .withFilesystemType("ugwxqcjnrqonyao")
                                    .withIops(10)
                                    .withKmsKeyId("fakeTokenPlaceholder")
                                    .withRoleArn("gdudzczxymgopjjzqubzphgdi")
                                    .withSizeInGiB(15)
                                    .withSnapshotId("yff")
                                    .withTagSpecifications(Arrays.asList(new EbsTagSpecification()
                                        .withPropagateTags(EbsTagSpecificationPropagateTags.SERVICE)
                                        .withResourceType("tocxgkuiblcccawaenqv")
                                        .withTags(Arrays.asList(new TagAutoGenerated26().withKey("fakeTokenPlaceholder")
                                            .withValue("qukd")))))
                                    .withThroughput(3)
                                    .withVolumeType("uwvjfmuzpksfpnfsukbunbuqcwxslx"))
                                .withName("zkqnipaoexthwwot"))))
                .withPublicCloudConnectorsResourceId("ghyukpeo")
                .withAwsAccountId("egkrtzylfud")
                .withArn("advapj")
                .withPublicCloudResourceName("jumpzlzalckrkaqg")
                .withAwsSourceSchema("woodigpcfntomkursi")
                .withAwsRegion("pwmulwhqhosmbthwzammshywxzaxhi")
                .withAwsTags(mapOf("key3094", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
