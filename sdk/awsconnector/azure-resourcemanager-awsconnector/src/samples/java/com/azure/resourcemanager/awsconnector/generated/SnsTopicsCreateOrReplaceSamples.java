// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsSnsTopicProperties;
import com.azure.resourcemanager.awsconnector.models.LoggingConfigAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.LoggingConfigProtocol;
import com.azure.resourcemanager.awsconnector.models.SnsTopicProperties;
import com.azure.resourcemanager.awsconnector.models.Subscription;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated53;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SnsTopics CreateOrReplace.
 */
public final class SnsTopicsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * SnsTopics_CreateOrReplace.json
     */
    /**
     * Sample code: SnsTopics_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void snsTopicsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.snsTopics()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("vzzjtyjhqbty")
            .withExistingResourceGroup("rgsnsTopic")
            .withTags(mapOf("key5456", "fakeTokenPlaceholder"))
            .withProperties(new SnsTopicProperties()
                .withAwsProperties(new AwsSnsTopicProperties().withContentBasedDeduplication(true)
                    .withDeliveryStatusLogging(Arrays
                        .asList(new LoggingConfigAutoGenerated().withFailureFeedbackRoleArn("ygtlmetldtzqhoasmdit")
                            .withProtocol(LoggingConfigProtocol.APPLICATION)
                            .withSuccessFeedbackRoleArn("ersgnxrmfnrqhmyilsomcxxlza")
                            .withSuccessFeedbackSampleRate("iudedzrjawqzroytyyonpydzjzzmlj")))
                    .withDisplayName("sanmplpvkvcorlhraijepxftlyeqwj")
                    .withFifoTopic(true)
                    .withKmsMasterKeyId("fakeTokenPlaceholder")
                    .withSignatureVersion("lpfgizlw")
                    .withSubscription(Arrays.asList(
                        new Subscription().withEndpoint("yuvwciasnlpnswnynse").withProtocol("zohpkxrrouufioztdmkw")))
                    .withTags(Arrays.asList(new TagAutoGenerated53().withKey("fakeTokenPlaceholder")
                        .withValue("bxdamnevuybindqttmfvzotzqboj")))
                    .withTopicArn("owersxkcdlhhnawxkmqlcjlzqlxtmj")
                    .withTopicName("lijmdexuvnfby")
                    .withTracingConfig("yrpvxmefnaexobhqvtdrj"))
                .withPublicCloudConnectorsResourceId("didnyoylzwmnsjudmfwojgtjqsuypn")
                .withAwsAccountId("wndmunvvkmoyxlrbsnowo")
                .withArn("jjhuxiyhej")
                .withPublicCloudResourceName("vwncs")
                .withAwsSourceSchema("sxholwzdshjzccfoioytctdmjrmlpo")
                .withAwsRegion("qbpwpfnzmmkh")
                .withAwsTags(mapOf("key2577", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
