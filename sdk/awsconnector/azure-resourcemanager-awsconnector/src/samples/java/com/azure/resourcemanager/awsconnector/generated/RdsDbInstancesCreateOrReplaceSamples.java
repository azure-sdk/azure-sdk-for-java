// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRdsDBInstanceProperties;
import com.azure.resourcemanager.awsconnector.models.CertificateDetails;
import com.azure.resourcemanager.awsconnector.models.DBInstanceRole;
import com.azure.resourcemanager.awsconnector.models.EndpointAutoGenerated2;
import com.azure.resourcemanager.awsconnector.models.MasterUserSecret;
import com.azure.resourcemanager.awsconnector.models.ProcessorFeature;
import com.azure.resourcemanager.awsconnector.models.ProcessorFeatureName;
import com.azure.resourcemanager.awsconnector.models.RdsDBInstanceProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated46;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RdsDbInstances CreateOrReplace.
 */
public final class RdsDbInstancesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * RdsDbInstances_CreateOrReplace.json
     */
    /**
     * Sample code: RdsDbInstances_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        rdsDbInstancesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.rdsDbInstances()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("pktn")
            .withExistingResourceGroup("rgrdsDBInstance")
            .withTags(mapOf("key7306", "fakeTokenPlaceholder"))
            .withProperties(
                new RdsDBInstanceProperties()
                    .withAwsProperties(new AwsRdsDBInstanceProperties().withAllocatedStorage("ryhixfujuvwifznymxbze")
                        .withAllowMajorVersionUpgrade(true)
                        .withAssociatedRoles(Arrays.asList(new DBInstanceRole().withFeatureName("jyivqbpnmvg")
                            .withRoleArn("jblmzpmkcvnkvsxkswtmfqlwttf")))
                        .withAutoMinorVersionUpgrade(true)
                        .withAutomaticBackupReplicationKmsKeyId("fakeTokenPlaceholder")
                        .withAutomaticBackupReplicationRegion("h")
                        .withAvailabilityZone("ccdhbiqvvdxbszpuhcvsvpuqfrkosf")
                        .withBackupRetentionPeriod(6)
                        .withCaCertificateIdentifier("dp")
                        .withCertificateDetails(new CertificateDetails().withCaIdentifier("jathtqegixcwxcwmnrlrsycxvyp")
                            .withValidTill("nclrurexsnhed"))
                        .withCertificateRotationRestart(true)
                        .withCharacterSetName("bapraruogdpspvewmd")
                        .withCopyTagsToSnapshot(true)
                        .withCustomIamInstanceProfile("ronoghiguflpqdlwef")
                        .withDbClusterIdentifier("mi")
                        .withDbClusterSnapshotIdentifier("biqdaekgjeyopntgrx")
                        .withDbInstanceArn("xxk")
                        .withDbInstanceClass("xvgbsmhvq")
                        .withDbInstanceIdentifier("svbefulaqhcsf")
                        .withDbName("yryxlwvdmghqcfdlhdyykzejtyep")
                        .withDbParameterGroupName("keuvtxklarpjmikkuwqqfanv")
                        .withDbSecurityGroups(Arrays.asList("mgcichzarguqhevlwubzgbvs"))
                        .withDbSnapshotIdentifier("coykeofgbcwpjeihmmajttm")
                        .withDbSubnetGroupName("yxd")
                        .withDbSystemId("rlbhsqhwmezvevqsme")
                        .withDbiResourceId("nlqlrrljz")
                        .withDedicatedLogVolume(true)
                        .withDeleteAutomatedBackups(true)
                        .withDeletionProtection(true)
                        .withDomain("mkboglzqbejwwfplkhpiwsvndwphik")
                        .withDomainAuthSecretArn("fakeTokenPlaceholder")
                        .withDomainDnsIps(Arrays.asList("celohfbruu"))
                        .withDomainFqdn("txgpdsxlpqbasbbmpzzkdztlfphm")
                        .withDomainIamRoleName("ljnyfnuzyqodzawuu")
                        .withDomainOu("yhtbsdxktvxrtweyoo")
                        .withEnableCloudwatchLogsExports(Arrays.asList("anqxngk"))
                        .withEnableIamDatabaseAuthentication(true)
                        .withEnablePerformanceInsights(true)
                        .withEndpoint(new EndpointAutoGenerated2().withAddress("rmsxn")
                            .withHostedZoneId("mvsioevf")
                            .withPort("gfpslsfdtnmrahrfppdwaf"))
                        .withEngine("jztlgxuyyhlwrjkgree")
                        .withEngineVersion("fwmhfzboltipjkflr")
                        .withIops(6)
                        .withKmsKeyId("fakeTokenPlaceholder")
                        .withLicenseModel("qcmsltdkpdsznfotmqdvnntnfor")
                        .withManageMasterUserPassword(true)
                        .withMasterUserPassword("fakeTokenPlaceholder")
                        .withMasterUserSecret(new MasterUserSecret().withKmsKeyId("fakeTokenPlaceholder")
                            .withSecretArn("fakeTokenPlaceholder"))
                        .withMasterUsername("lfitzeghwpzjhcbje")
                        .withMaxAllocatedStorage(9)
                        .withMonitoringInterval(17)
                        .withMonitoringRoleArn("a")
                        .withMultiAZ(true)
                        .withNcharCharacterSetName("cc")
                        .withNetworkType("bccgoqncxrhuwvgwvwta")
                        .withOptionGroupName("mftqhqogtwleqvlpjpbabps")
                        .withPerformanceInsightsKmsKeyId("fakeTokenPlaceholder")
                        .withPerformanceInsightsRetentionPeriod(27)
                        .withPort("g")
                        .withPreferredBackupWindow("wesxjihubbcfgwqebebkzmmfoipd")
                        .withPreferredMaintenanceWindow("gtmzlucaagottcm")
                        .withProcessorFeatures(
                            Arrays.asList(new ProcessorFeature().withName(ProcessorFeatureName.CORE_COUNT)
                                .withValue("qhhoewgkcuvttcihy")))
                        .withPromotionTier(12)
                        .withPubliclyAccessible(true)
                        .withReplicaMode("poucyygmqhpztshwupms")
                        .withRestoreTime("nokteyfkzzvhgjtpmiwxajseiavtbk")
                        .withSourceDBClusterIdentifier("gkdeeipcvhmgoabz")
                        .withSourceDBInstanceAutomatedBackupsArn("lisujvucnvopgkehpacmkjshk")
                        .withSourceDBInstanceIdentifier("ypufdzwdqxkygzmrp")
                        .withSourceDbiResourceId("btzodcuervx")
                        .withSourceRegion("ez")
                        .withStorageEncrypted(true)
                        .withStorageThroughput(16)
                        .withStorageType("ywcy")
                        .withTags(Arrays
                            .asList(new TagAutoGenerated46().withKey("fakeTokenPlaceholder").withValue("rdhflka")))
                        .withTdeCredentialArn("fakeTokenPlaceholder")
                        .withTdeCredentialPassword("fakeTokenPlaceholder")
                        .withTimezone("euyueykvptytmbnfj")
                        .withUseDefaultProcessorFeatures(true)
                        .withUseLatestRestorableTime(true)
                        .withVpcSecurityGroups(Arrays.asList("nxllphmorxutzaym")))
                    .withPublicCloudConnectorsResourceId("etsvehjovtdbgzuwnmgw")
                    .withAwsAccountId("xjspz")
                    .withArn("ikxozbmzhxy")
                    .withPublicCloudResourceName("bvkzujojjsvihxyajddbqxygffaqm")
                    .withAwsSourceSchema("cjfztsurj")
                    .withAwsRegion("dmudtaomgrfchc")
                    .withAwsTags(mapOf("key3142", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
