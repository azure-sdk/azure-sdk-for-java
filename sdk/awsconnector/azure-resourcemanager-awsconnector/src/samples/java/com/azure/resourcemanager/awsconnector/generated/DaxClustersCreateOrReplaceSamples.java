// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsDaxClusterProperties;
import com.azure.resourcemanager.awsconnector.models.ClusterEndpointEncryptionType;
import com.azure.resourcemanager.awsconnector.models.ClusterEndpointEncryptionTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.DaxClusterProperties;
import com.azure.resourcemanager.awsconnector.models.Endpoint;
import com.azure.resourcemanager.awsconnector.models.Node;
import com.azure.resourcemanager.awsconnector.models.NotificationConfigurationAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ParameterGroupStatus;
import com.azure.resourcemanager.awsconnector.models.SecurityGroupMembership;
import com.azure.resourcemanager.awsconnector.models.SseDescription;
import com.azure.resourcemanager.awsconnector.models.SseStatus;
import com.azure.resourcemanager.awsconnector.models.SseStatusEnumValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DaxClusters CreateOrReplace.
 */
public final class DaxClustersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * DaxClusters_CreateOrReplace.json
     */
    /**
     * Sample code: DaxClusters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void daxClustersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.daxClusters()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("vmw")
            .withExistingResourceGroup("rgdaxCluster")
            .withTags(mapOf("key1674", "fakeTokenPlaceholder"))
            .withProperties(new DaxClusterProperties()
                .withAwsProperties(new AwsDaxClusterProperties().withActiveNodes(18)
                    .withClusterArn("drxcjkivmlrtslbwoykkohay")
                    .withClusterDiscoveryEndpoint(new Endpoint().withAddress("piabfnkoscysceufovcpffxl")
                        .withPort(13)
                        .withUrl("bcwzfeebgdzlvoafvyddknwzaih"))
                    .withClusterEndpointEncryptionType(
                        new ClusterEndpointEncryptionTypeEnumValue().withValue(ClusterEndpointEncryptionType.NONE))
                    .withClusterName("zobzejccpfjaqcvzutazmzjbl")
                    .withDescription("q")
                    .withIamRoleArn("epmvlmhygrgjvx")
                    .withNodeIdsToRemove(Arrays.asList("uzzbmymlnrssuuqf"))
                    .withNodeType("vwyypkakaevefciygrniikfpyul")
                    .withNodes(Arrays.asList(new Node().withAvailabilityZone("j")
                        .withEndpoint(new Endpoint().withAddress("piabfnkoscysceufovcpffxl")
                            .withPort(13)
                            .withUrl("bcwzfeebgdzlvoafvyddknwzaih"))
                        .withNodeCreateTime(OffsetDateTime.parse("2024-10-08T03:51:45.186Z"))
                        .withNodeId("stfvsn")
                        .withNodeStatus("cvxigvbkflormrnhzzjp")
                        .withParameterGroupStatus("ywehlocxyzqprjzljpwluyd")))
                    .withNotificationConfiguration(
                        new NotificationConfigurationAutoGenerated().withTopicArn("phhrllxlsvtkodsyamltvoypqoj")
                            .withTopicStatus("dfjjkb"))
                    .withParameterGroup(new ParameterGroupStatus().withNodeIdsToReboot(Arrays.asList("idyqnyv"))
                        .withParameterApplyStatus("jrxbdxqellqqtknz")
                        .withParameterGroupName("ezciyomlrtvgjq"))
                    .withPreferredMaintenanceWindow("gnqllhurfpmhsujlnznvuhtnacwfe")
                    .withSseDescription(
                        new SseDescription().withStatus(new SseStatusEnumValue().withValue(SseStatus.DISABLED)))
                    .withSecurityGroups(
                        Arrays.asList(new SecurityGroupMembership().withSecurityGroupIdentifier("ehbvorabecsniiea")
                            .withStatus("ymc")))
                    .withStatus("mpwpseuoxrzbpamqwtibhochip")
                    .withSubnetGroup("tzsrvhfugpjrwm")
                    .withTotalNodes(26))
                .withPublicCloudConnectorsResourceId("jzzs")
                .withAwsAccountId("xgeehpujhnyfhspdaqcugx")
                .withArn("eqibkrig")
                .withPublicCloudResourceName("rdpgjpjzbwahajy")
                .withAwsSourceSchema("ukv")
                .withAwsRegion("kyjdudcmqspnbb")
                .withAwsTags(mapOf("key1821", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
