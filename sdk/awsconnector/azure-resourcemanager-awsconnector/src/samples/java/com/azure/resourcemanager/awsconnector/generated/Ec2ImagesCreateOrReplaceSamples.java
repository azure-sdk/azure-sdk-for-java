// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.ArchitectureValues;
import com.azure.resourcemanager.awsconnector.models.ArchitectureValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.AwsEc2ImageProperties;
import com.azure.resourcemanager.awsconnector.models.BlockDeviceMapping;
import com.azure.resourcemanager.awsconnector.models.BootModeValues;
import com.azure.resourcemanager.awsconnector.models.BootModeValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.DeviceType;
import com.azure.resourcemanager.awsconnector.models.DeviceTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.EbsBlockDevice;
import com.azure.resourcemanager.awsconnector.models.Ec2ImageProperties;
import com.azure.resourcemanager.awsconnector.models.HypervisorType;
import com.azure.resourcemanager.awsconnector.models.HypervisorTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ImageState;
import com.azure.resourcemanager.awsconnector.models.ImageStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.ImageTypeValues;
import com.azure.resourcemanager.awsconnector.models.ImageTypeValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.ImdsSupportValues;
import com.azure.resourcemanager.awsconnector.models.ImdsSupportValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.PlatformValues;
import com.azure.resourcemanager.awsconnector.models.PlatformValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.ProductCode;
import com.azure.resourcemanager.awsconnector.models.ProductCodeValues;
import com.azure.resourcemanager.awsconnector.models.ProductCodeValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.StateReason;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated11;
import com.azure.resourcemanager.awsconnector.models.TpmSupportValues;
import com.azure.resourcemanager.awsconnector.models.TpmSupportValuesEnumValue;
import com.azure.resourcemanager.awsconnector.models.VirtualizationType;
import com.azure.resourcemanager.awsconnector.models.VirtualizationTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.VolumeType;
import com.azure.resourcemanager.awsconnector.models.VolumeTypeEnumValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2Images CreateOrReplace.
 */
public final class Ec2ImagesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2Images_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2Images_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2ImagesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2Images()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("rskzngterhbdzpdgzthkwkfsim")
            .withExistingResourceGroup("rgec2Image")
            .withTags(mapOf("key733", "fakeTokenPlaceholder"))
            .withProperties(new Ec2ImageProperties()
                .withAwsProperties(new AwsEc2ImageProperties()
                    .withArchitecture(new ArchitectureValuesEnumValue().withValue(ArchitectureValues.ARM64))
                    .withBlockDeviceMappings(Arrays.asList(new BlockDeviceMapping().withDeviceName("foqeiqkjrwirhz")
                        .withEbs(new EbsBlockDevice().withDeleteOnTermination(true)
                            .withEncrypted(true)
                            .withIops(6)
                            .withKmsKeyId("fakeTokenPlaceholder")
                            .withOutpostArn("yzyqckzzbmbeimvwrvckybpdil")
                            .withSnapshotId("yjsctqicabclgsmtr")
                            .withThroughput(29)
                            .withVolumeSize(15)
                            .withVolumeType(new VolumeTypeEnumValue().withValue(VolumeType.GP2)))
                        .withNoDevice("rs")
                        .withVirtualName("lgrpmrjfdvrwmfghttgcdgqsfum")))
                    .withBootMode(new BootModeValuesEnumValue().withValue(BootModeValues.LEGACY_BIOS))
                    .withCreationDate("iri")
                    .withDeprecationTime("rjbfczermuljog")
                    .withDeregistrationProtection("qgzillhrsaoasehpuum")
                    .withDescription("xcucajel")
                    .withEnaSupport(true)
                    .withHypervisor(new HypervisorTypeEnumValue().withValue(HypervisorType.OVM))
                    .withImageId("abwaglkivomqynfncjesal")
                    .withImageLocation("pgjapgkiakctxcpfpmvk")
                    .withImageOwnerAlias("sqvaqlxrlzhlzbczv")
                    .withImageType(new ImageTypeValuesEnumValue().withValue(ImageTypeValues.KERNEL))
                    .withImdsSupport(new ImdsSupportValuesEnumValue().withValue(ImdsSupportValues.V2_0))
                    .withKernelId("mfsmykrvrtbosarfpfuwahchz")
                    .withLastLaunchedTime("syfznkavvtio")
                    .withName("secemuogxgahtxnpthro")
                    .withOwnerId("nhuhifhzxvkdxxvaiaibzihkyvbrwh")
                    .withPlatform(new PlatformValuesEnumValue().withValue(PlatformValues.WINDOWS))
                    .withPlatformDetails("lisborjwdvhfnwsziqhfnxiqdmdynp")
                    .withProductCodes(Arrays.asList(new ProductCode().withProductCodeId("fakeTokenPlaceholder")
                        .withProductCodeType(new ProductCodeValuesEnumValue().withValue(ProductCodeValues.DEVPAY))))
                    .withPublicProperty(true)
                    .withRamdiskId("xrcwfszijxclkazpcletlaoca")
                    .withRootDeviceName("jjgzjpjxtlhvqyvdrnqelzasdmn")
                    .withRootDeviceType(new DeviceTypeEnumValue().withValue(DeviceType.EBS))
                    .withSourceInstanceId("g")
                    .withSriovNetSupport("sbnokjesjjkngdixqtiijn")
                    .withState(new ImageStateEnumValue().withValue(ImageState.AVAILABLE))
                    .withStateReason(new StateReason().withCode("fakeTokenPlaceholder").withMessage("qgjrouiqrxyqi"))
                    .withTags(Arrays.asList(new TagAutoGenerated11().withKey("fakeTokenPlaceholder")
                        .withValue("ehismpwetbakkwkjtngdrofhipjlko")))
                    .withTpmSupport(new TpmSupportValuesEnumValue().withValue(TpmSupportValues.V2_0))
                    .withUsageOperation("gdlrmqiw")
                    .withVirtualizationType(new VirtualizationTypeEnumValue().withValue(VirtualizationType.HVM)))
                .withPublicCloudConnectorsResourceId("dth")
                .withAwsAccountId("yvwtilsspffh")
                .withArn("qaahwnaabcqlufiiwhkwhv")
                .withPublicCloudResourceName("iwvkviywiipsmvxpemnivpyqwnp")
                .withAwsSourceSchema("zpslskfplbejouiomrfkp")
                .withAwsRegion("chnagdbgxpnwsklnknirzcmbyhif")
                .withAwsTags(mapOf("key3097", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
