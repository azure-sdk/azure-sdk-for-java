// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.awsconnector.models.AwsEmrClusterSummaryProperties;
import com.azure.resourcemanager.awsconnector.models.ClusterState;
import com.azure.resourcemanager.awsconnector.models.ClusterStateChangeReason;
import com.azure.resourcemanager.awsconnector.models.ClusterStateChangeReasonCode;
import com.azure.resourcemanager.awsconnector.models.ClusterStateChangeReasonCodeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ClusterStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.ClusterStatusAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ClusterTimeline;
import com.azure.resourcemanager.awsconnector.models.EmrClusterSummaryProperties;
import com.azure.resourcemanager.awsconnector.models.ErrorDetailAutoGenerated;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EmrClusterSummaries CreateOrReplace.
 */
public final class EmrClusterSummariesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EmrClusterSummaries_CreateOrReplace.json
     */
    /**
     * Sample code: EmrClusterSummaries_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void emrClusterSummariesCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) throws IOException {
        manager.emrClusterSummaries()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("ph")
            .withExistingResourceGroup("rgemrClusterSummary")
            .withTags(mapOf("key7639", "fakeTokenPlaceholder"))
            .withProperties(new EmrClusterSummaryProperties()
                .withAwsProperties(new AwsEmrClusterSummaryProperties().withClusterArn("hcwmiaqea")
                    .withId("hfxlzvrbygylot")
                    .withName("nefubxfisrkqoalhovdvlsu")
                    .withNormalizedInstanceHours(27)
                    .withOutpostArn("sbsolrzktgrkmhwjfdmayp")
                    .withStatus(new ClusterStatusAutoGenerated()
                        .withErrorDetails(Arrays.asList(new ErrorDetailAutoGenerated()
                            .withErrorCode("fakeTokenPlaceholder")
                            .withErrorData(Arrays.asList(SerializerFactory.createDefaultManagementSerializerAdapter()
                                .deserialize("{}", Object.class, SerializerEncoding.JSON)))
                            .withErrorMessage("wqhugncreg")))
                        .withState(new ClusterStateEnumValue().withValue(ClusterState.BOOTSTRAPPING))
                        .withStateChangeReason(
                            new ClusterStateChangeReason()
                                .withCode(new ClusterStateChangeReasonCodeEnumValue()
                                    .withValue(ClusterStateChangeReasonCode.ALL_STEPS_COMPLETED))
                                .withMessage("lapcxpryl"))
                        .withTimeline(
                            new ClusterTimeline().withCreationDateTime(OffsetDateTime.parse("2024-10-08T03:48:22.614Z"))
                                .withEndDateTime(OffsetDateTime.parse("2024-10-08T03:48:22.614Z"))
                                .withReadyDateTime(OffsetDateTime.parse("2024-10-08T03:48:22.614Z")))))
                .withPublicCloudConnectorsResourceId("xkwvywwdhplifzryewofkfixmin")
                .withAwsAccountId("bgsinuonrubuushkssenel")
                .withArn("ivrscnhxemak")
                .withPublicCloudResourceName("dirislun")
                .withAwsSourceSchema("ertwddsdgnkc")
                .withAwsRegion("zvqejnwqwbwclnslkhgteqamuvfdi")
                .withAwsTags(mapOf("key1466", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
