// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsSqsQueueProperties;
import com.azure.resourcemanager.awsconnector.models.SqsQueueProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated54;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SqsQueues CreateOrReplace.
 */
public final class SqsQueuesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * SqsQueues_CreateOrReplace.json
     */
    /**
     * Sample code: SqsQueues_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void sqsQueuesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.sqsQueues()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("fqdcgrb")
            .withExistingResourceGroup("rgsqsQueue")
            .withTags(mapOf("key7215", "fakeTokenPlaceholder"))
            .withProperties(
                new SqsQueueProperties()
                    .withAwsProperties(new AwsSqsQueueProperties().withArn("inbbhuaqgvjzwgepxaejncp")
                        .withContentBasedDeduplication(true)
                        .withDeduplicationScope("chijpjniyonhtrbqaojc")
                        .withDelaySeconds(22)
                        .withFifoQueue(true)
                        .withFifoThroughputLimit("vzanxuahrdoqizyblwtvse")
                        .withKmsDataKeyReusePeriodSeconds(1)
                        .withKmsMasterKeyId("fakeTokenPlaceholder")
                        .withMaximumMessageSize(19)
                        .withMessageRetentionPeriod(29)
                        .withQueueName("wfzhdsdzszyxfgptplvduwr")
                        .withQueueUrl("drfgltnvn")
                        .withReceiveMessageWaitTimeSeconds(4)
                        .withRedriveAllowPolicy(mapOf())
                        .withRedrivePolicy(mapOf())
                        .withSqsManagedSseEnabled(true)
                        .withTags(Arrays
                            .asList(new TagAutoGenerated54().withKey("fakeTokenPlaceholder").withValue("nxjcfolrd")))
                        .withVisibilityTimeout(2))
                    .withPublicCloudConnectorsResourceId("uvqyizhqjdsnemqktjsgfmjhyw")
                    .withAwsAccountId("bzpgnzvrnsakbglgcvaalyaiocj")
                    .withArn("jalxzvcntv")
                    .withPublicCloudResourceName("izckbeceljsvepm")
                    .withAwsSourceSchema("jnthvapvjtoexig")
                    .withAwsRegion("ffdlbwzdurjlolipnjsycrmeqsg")
                    .withAwsTags(mapOf("key9800", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
