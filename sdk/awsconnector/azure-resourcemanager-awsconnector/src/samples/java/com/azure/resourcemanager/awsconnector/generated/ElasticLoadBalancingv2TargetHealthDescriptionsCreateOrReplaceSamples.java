// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AnomalyDetection;
import com.azure.resourcemanager.awsconnector.models.AnomalyResultEnum;
import com.azure.resourcemanager.awsconnector.models.AnomalyResultEnumValue;
import com.azure.resourcemanager.awsconnector.models.AwsElasticLoadBalancingv2TargetHealthDescriptionProperties;
import com.azure.resourcemanager.awsconnector.models.ElasticLoadBalancingv2TargetHealthDescriptionProperties;
import com.azure.resourcemanager.awsconnector.models.MitigationInEffectEnum;
import com.azure.resourcemanager.awsconnector.models.MitigationInEffectEnumValue;
import com.azure.resourcemanager.awsconnector.models.TargetDescriptionAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.TargetHealth;
import com.azure.resourcemanager.awsconnector.models.TargetHealthReasonEnum;
import com.azure.resourcemanager.awsconnector.models.TargetHealthReasonEnumValue;
import com.azure.resourcemanager.awsconnector.models.TargetHealthStateEnum;
import com.azure.resourcemanager.awsconnector.models.TargetHealthStateEnumValue;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ElasticLoadBalancingv2TargetHealthDescriptions CreateOrReplace.
 */
public final class ElasticLoadBalancingv2TargetHealthDescriptionsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ElasticLoadBalancingv2TargetHealthDescriptions_CreateOrReplace.json
     */
    /**
     * Sample code: ElasticLoadBalancingv2TargetHealthDescriptions_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void elasticLoadBalancingv2TargetHealthDescriptionsCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.elasticLoadBalancingv2TargetHealthDescriptions()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("fjdx")
            .withExistingResourceGroup("rgelasticLoadBalancingV2TargetHealthDescription")
            .withTags(mapOf("key7243", "fakeTokenPlaceholder"))
            .withProperties(
                new ElasticLoadBalancingv2TargetHealthDescriptionProperties()
                    .withAwsProperties(new AwsElasticLoadBalancingv2TargetHealthDescriptionProperties()
                        .withAnomalyDetection(new AnomalyDetection()
                            .withMitigationInEffect(
                                new MitigationInEffectEnumValue().withValue(MitigationInEffectEnum.NO))
                            .withResult(new AnomalyResultEnumValue().withValue(AnomalyResultEnum.ANOMALOUS)))
                        .withHealthCheckPort("wncbdhbdrxjzdwg")
                        .withTarget(new TargetDescriptionAutoGenerated().withAvailabilityZone("lopqxsnyhbsjjqaj")
                            .withId("wrhggxodbbktxivhn")
                            .withPort(29))
                        .withTargetHealth(new TargetHealth().withDescription("v")
                            .withReason(new TargetHealthReasonEnumValue()
                                .withValue(TargetHealthReasonEnum.ELB_INITIAL_HEALTH_CHECKING))
                            .withState(new TargetHealthStateEnumValue().withValue(TargetHealthStateEnum.DRAINING))))
                    .withPublicCloudConnectorsResourceId("zwes")
                    .withAwsAccountId("nqhdoshumaulzimktuhfyzbokepnin")
                    .withArn("hwxzsqacyslkcfypjntjeecsgic")
                    .withPublicCloudResourceName("dwtgooliytsuedlhhauisu")
                    .withAwsSourceSchema("kqowwthevk")
                    .withAwsRegion("jhbryqdcp")
                    .withAwsTags(mapOf("key1547", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
