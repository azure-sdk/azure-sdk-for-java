// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsSecretsManagerSecretProperties;
import com.azure.resourcemanager.awsconnector.models.GenerateSecretString;
import com.azure.resourcemanager.awsconnector.models.ReplicaRegion;
import com.azure.resourcemanager.awsconnector.models.SecretsManagerSecretProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated52;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for SecretsManagerSecrets CreateOrReplace.
 */
public final class SecretsManagerSecretsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * SecretsManagerSecrets_CreateOrReplace.json
     */
    /**
     * Sample code: SecretsManagerSecrets_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        secretsManagerSecretsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.secretsManagerSecrets()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("balqdxuifwdmtcinyxjit")
            .withExistingResourceGroup("rgsecretsManagerSecret")
            .withTags(mapOf("key1461", "fakeTokenPlaceholder"))
            .withProperties(
                new SecretsManagerSecretProperties()
                    .withAwsProperties(
                        new AwsSecretsManagerSecretProperties().withDescription("esljjbmcrcqe")
                            .withGenerateSecretString(new GenerateSecretString().withExcludeCharacters("hsixzpgawn")
                                .withExcludeLowercase(true)
                                .withExcludeNumbers(true)
                                .withExcludePunctuation(true)
                                .withExcludeUppercase(true)
                                .withGenerateStringKey("fakeTokenPlaceholder")
                                .withIncludeSpace(true)
                                .withPasswordLength(17)
                                .withRequireEachIncludedType(true)
                                .withSecretStringTemplate("fakeTokenPlaceholder"))
                            .withId("vpnzmovjfbrltixnsgeml")
                            .withKmsKeyId("fakeTokenPlaceholder")
                            .withName("jqmtr")
                            .withReplicaRegions(
                                Arrays.asList(new ReplicaRegion().withKmsKeyId("fakeTokenPlaceholder").withRegion("m")))
                            .withSecretString("fakeTokenPlaceholder")
                            .withTags(Arrays
                                .asList(new TagAutoGenerated52().withKey("fakeTokenPlaceholder").withValue("wrci"))))
                    .withPublicCloudConnectorsResourceId("osnofxgmgmrsc")
                    .withAwsAccountId("wtxdsgybisrqopffdhreyacjrysd")
                    .withArn("qxrdtehsmibehk")
                    .withPublicCloudResourceName("wj")
                    .withAwsSourceSchema("whhfrjfzgejfasbcycqe")
                    .withAwsRegion("mw")
                    .withAwsTags(mapOf("key4141", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
