// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRedshiftClusterProperties;
import com.azure.resourcemanager.awsconnector.models.EndpointAutoGenerated3;
import com.azure.resourcemanager.awsconnector.models.LoggingProperties;
import com.azure.resourcemanager.awsconnector.models.RedshiftClusterProperties;
import com.azure.resourcemanager.awsconnector.models.Tag;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RedshiftClusters CreateOrReplace.
 */
public final class RedshiftClustersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * RedshiftClusters_CreateOrReplace.json
     */
    /**
     * Sample code: RedshiftClusters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        redshiftClustersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.redshiftClusters()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("jvkejlkfwoynldopbqhnt")
            .withExistingResourceGroup("rgredshiftCluster")
            .withTags(mapOf("key5296", "fakeTokenPlaceholder"))
            .withProperties(
                new RedshiftClusterProperties()
                    .withAwsProperties(new AwsRedshiftClusterProperties().withAllowVersionUpgrade(true)
                        .withAquaConfigurationStatus("tegpcduavwdyuubx")
                        .withAutomatedSnapshotRetentionPeriod(25)
                        .withAvailabilityZone("pltpsjmmvhfmsecqjjweuxgloitbor")
                        .withAvailabilityZoneRelocation(true)
                        .withAvailabilityZoneRelocationStatus("kcuxuluzsnuoag")
                        .withClassic(true)
                        .withClusterIdentifier("cxlflpabmavbfbcvsew")
                        .withClusterNamespaceArn("vqeqeacmkdhmzgwd")
                        .withClusterParameterGroupName("whpcckoms")
                        .withClusterSecurityGroups(Arrays.asList("q"))
                        .withClusterSubnetGroupName("abxmcpkzazgxtuoliedvam")
                        .withClusterType("nvbzlybkkhuyklhhywuofwczf")
                        .withClusterVersion("slmurdmhpiuakdwrqdthvlrpovqb")
                        .withDbName("jsbtuqgydkydraogl")
                        .withDeferMaintenance(true)
                        .withDeferMaintenanceDuration(14)
                        .withDeferMaintenanceEndTime("oluxv")
                        .withDeferMaintenanceIdentifier("icu")
                        .withDeferMaintenanceStartTime("muevcssxlqrrmwxvazpsrq")
                        .withDestinationRegion("cnklawqwbweklmlrhr")
                        .withElasticIp("ljpfzxzciavjuxk")
                        .withEncrypted(true)
                        .withEndpoint(
                            new EndpointAutoGenerated3().withAddress("imgtktlniedocmgatpyzycge").withPort("gm"))
                        .withEnhancedVpcRouting(true)
                        .withHsmClientCertificateIdentifier("uguhqzduujaf")
                        .withHsmConfigurationIdentifier("cznipmuxibdjvmteim")
                        .withIamRoles(Arrays.asList("qmy"))
                        .withKmsKeyId("fakeTokenPlaceholder")
                        .withLoggingProperties(new LoggingProperties().withBucketName("mozpscmusdfzk")
                            .withS3KeyPrefix("fakeTokenPlaceholder"))
                        .withMaintenanceTrackName("etjeimmqcipuyxiobrnsnd")
                        .withManageMasterPassword(true)
                        .withManualSnapshotRetentionPeriod(15)
                        .withMasterPasswordSecretArn("fakeTokenPlaceholder")
                        .withMasterPasswordSecretKmsKeyId("fakeTokenPlaceholder")
                        .withMasterUserPassword("fakeTokenPlaceholder")
                        .withMasterUsername("wleeglygnhojusagxryuk")
                        .withMultiAZ(true)
                        .withNodeType("cudgc")
                        .withNumberOfNodes(23)
                        .withOwnerAccount("drvv")
                        .withPort(8)
                        .withPreferredMaintenanceWindow("xpuhqwidzbn")
                        .withPubliclyAccessible(true)
                        .withResourceAction("nyhkwgrtf")
                        .withRevisionTarget("dreawjciiytkiuywtwttqyhojh")
                        .withRotateEncryptionKey(true)
                        .withSnapshotClusterIdentifier("gu")
                        .withSnapshotCopyGrantName("mwuomnttvwhduluhwnfkiwkaeztbmd")
                        .withSnapshotCopyManual(true)
                        .withSnapshotCopyRetentionPeriod(2)
                        .withSnapshotIdentifier("viproibmlhehvlszhxkqbbgl")
                        .withTags(
                            Arrays.asList(new Tag().withKey("fakeTokenPlaceholder").withValue("zawcpsgqfgrsjexrbo")))
                        .withVpcSecurityGroupIds(Arrays.asList("grbkothiifmuwwrme")))
                    .withPublicCloudConnectorsResourceId("r")
                    .withAwsAccountId("lnlhkk")
                    .withArn("egooffvtlbzyvp")
                    .withPublicCloudResourceName("ck")
                    .withAwsSourceSchema("zdadxraykcjparteiye")
                    .withAwsRegion("lablaxpspbxzhnbsrqz")
                    .withAwsTags(mapOf("key9665", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
