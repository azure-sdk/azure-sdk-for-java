// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.ActionDefinitionAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.Address;
import com.azure.resourcemanager.awsconnector.models.AwsNetworkFirewallRuleGroupProperties;
import com.azure.resourcemanager.awsconnector.models.CustomActionAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.DimensionAutoGenerated3;
import com.azure.resourcemanager.awsconnector.models.Header;
import com.azure.resourcemanager.awsconnector.models.HeaderDirection;
import com.azure.resourcemanager.awsconnector.models.HeaderProtocol;
import com.azure.resourcemanager.awsconnector.models.IpSet;
import com.azure.resourcemanager.awsconnector.models.IpSetReference;
import com.azure.resourcemanager.awsconnector.models.MatchAttributes;
import com.azure.resourcemanager.awsconnector.models.NetworkFirewallRuleGroupProperties;
import com.azure.resourcemanager.awsconnector.models.PortRange;
import com.azure.resourcemanager.awsconnector.models.PortSet;
import com.azure.resourcemanager.awsconnector.models.PublishMetricActionAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.ReferenceSets;
import com.azure.resourcemanager.awsconnector.models.RuleDefinition;
import com.azure.resourcemanager.awsconnector.models.RuleGroup;
import com.azure.resourcemanager.awsconnector.models.RuleOption;
import com.azure.resourcemanager.awsconnector.models.RuleVariables;
import com.azure.resourcemanager.awsconnector.models.RulesSource;
import com.azure.resourcemanager.awsconnector.models.RulesSourceList;
import com.azure.resourcemanager.awsconnector.models.RulesSourceListGeneratedRulesType;
import com.azure.resourcemanager.awsconnector.models.StatefulRule;
import com.azure.resourcemanager.awsconnector.models.StatefulRuleAction;
import com.azure.resourcemanager.awsconnector.models.StatefulRuleOptions;
import com.azure.resourcemanager.awsconnector.models.StatefulRuleOptionsRuleOrder;
import com.azure.resourcemanager.awsconnector.models.StatelessRule;
import com.azure.resourcemanager.awsconnector.models.StatelessRulesAndCustomActions;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated43;
import com.azure.resourcemanager.awsconnector.models.TcpFlagField;
import com.azure.resourcemanager.awsconnector.models.Type;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NetworkFirewallRuleGroups CreateOrReplace.
 */
public final class NetworkFirewallRuleGroupsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * NetworkFirewallRuleGroups_CreateOrReplace.json
     */
    /**
     * Sample code: NetworkFirewallRuleGroups_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        networkFirewallRuleGroupsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.networkFirewallRuleGroups()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("npjhzlsmeqnuoj")
            .withExistingResourceGroup("rgnetworkFirewallRuleGroup")
            .withTags(mapOf("key4955", "fakeTokenPlaceholder"))
            .withProperties(new NetworkFirewallRuleGroupProperties()
                .withAwsProperties(new AwsNetworkFirewallRuleGroupProperties().withCapacity(13)
                    .withDescription("zlkovsdkoamizsf")
                    .withRuleGroup(new RuleGroup()
                        .withReferenceSets(new ReferenceSets().withIpSetReferences(
                            mapOf("key2227", new IpSetReference().withReferenceArn("oytryvxnweahmshhucxpblpuc"))))
                        .withRuleVariables(new RuleVariables()
                            .withIpSets(mapOf("key2970", new IpSet().withDefinition(Arrays.asList("aizprahgi"))))
                            .withPortSets(
                                mapOf("key1199", new PortSet().withDefinition(Arrays.asList("wwayyzoztulbvq")))))
                        .withRulesSource(new RulesSource()
                            .withRulesSourceList(new RulesSourceList()
                                .withGeneratedRulesType(RulesSourceListGeneratedRulesType.ALLOWLIST)
                                .withTargetTypes(Arrays.asList("efuuy"))
                                .withTargets(Arrays.asList("pnecsfopd")))
                            .withRulesString("xujqqtutwcprdqudsnalep")
                            .withStatefulRules(Arrays.asList(new StatefulRule().withAction(StatefulRuleAction.ALERT)
                                .withHeaderProperty(new Header().withDestination("monehvupaofeakgppr")
                                    .withDestinationPort("qlhyfsewpdlrpkxbdwfojdz")
                                    .withDirection(HeaderDirection.ANY)
                                    .withProtocol(HeaderProtocol.DCERPC)
                                    .withSource("bmxmxcbelcmrkaigfwwbtbakerp")
                                    .withSourcePort("ieimsyntk"))
                                .withRuleOptions(Arrays.asList(new RuleOption().withKeyword("fakeTokenPlaceholder")
                                    .withSettings(Arrays.asList("xflxrtoyhczflnevdftw"))))))
                            .withStatelessRulesAndCustomActions(
                                new StatelessRulesAndCustomActions()
                                    .withCustomActions(Arrays.asList(new CustomActionAutoGenerated()
                                        .withActionDefinition(new ActionDefinitionAutoGenerated()
                                            .withPublishMetricAction(new PublishMetricActionAutoGenerated()
                                                .withDimensions(Arrays.asList(new DimensionAutoGenerated3()
                                                    .withValue("wninrpqzvmeovspprohpjge")))))
                                        .withActionName("kcfqhtt")))
                                    .withStatelessRules(Arrays.asList(new StatelessRule().withPriority(11)
                                        .withRuleDefinition(new RuleDefinition()
                                            .withActions(Arrays.asList("ofwytyaxwaoxjuhfror"))
                                            .withMatchAttributes(new MatchAttributes()
                                                .withDestinationPorts(
                                                    Arrays.asList(new PortRange().withFromPort(15).withToPort(3)))
                                                .withDestinations(Arrays
                                                    .asList(new Address().withAddressDefinition("upxiaznlcwpjgrahrg")))
                                                .withProtocols(Arrays.asList(27))
                                                .withSourcePorts(
                                                    Arrays.asList(new PortRange().withFromPort(15).withToPort(3)))
                                                .withSources(Arrays
                                                    .asList(new Address().withAddressDefinition("upxiaznlcwpjgrahrg")))
                                                .withTcpFlags(
                                                    Arrays.asList(new TcpFlagField().withFlags(Arrays.asList("hc"))
                                                        .withMasks(Arrays.asList("yycdx"))))))))))
                        .withStatefulRuleOptions(
                            new StatefulRuleOptions().withRuleOrder(StatefulRuleOptionsRuleOrder.DEFAULT_ACTION_ORDER)))
                    .withRuleGroupArn("ncyehiokafjeadkrhonngdvqgtmdm")
                    .withRuleGroupId("qfdxbisrqddn")
                    .withRuleGroupName("dypivpjvrdiecto")
                    .withTags(Arrays.asList(
                        new TagAutoGenerated43().withKey("fakeTokenPlaceholder").withValue("pbppqwfrbdysivibwbk")))
                    .withType(Type.STATEFUL))
                .withPublicCloudConnectorsResourceId("zholufsqpqkxgirpxvvr")
                .withAwsAccountId("lbmcidte")
                .withArn("uzwseilcphanlymsepokkjnzich")
                .withPublicCloudResourceName("gpndbetnqj")
                .withAwsSourceSchema("ymsi")
                .withAwsRegion("vnwwozbuhjsi")
                .withAwsTags(mapOf("key4273", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
