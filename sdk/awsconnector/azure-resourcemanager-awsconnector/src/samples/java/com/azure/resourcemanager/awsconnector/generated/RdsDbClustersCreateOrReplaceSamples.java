// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRdsDBClusterProperties;
import com.azure.resourcemanager.awsconnector.models.DBClusterRole;
import com.azure.resourcemanager.awsconnector.models.EndpointAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.MasterUserSecret;
import com.azure.resourcemanager.awsconnector.models.RdsDBClusterProperties;
import com.azure.resourcemanager.awsconnector.models.ReadEndpoint;
import com.azure.resourcemanager.awsconnector.models.ScalingConfiguration;
import com.azure.resourcemanager.awsconnector.models.ServerlessV2ScalingConfiguration;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated45;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RdsDbClusters CreateOrReplace.
 */
public final class RdsDbClustersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * RdsDbClusters_CreateOrReplace.json
     */
    /**
     * Sample code: RdsDbClusters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        rdsDbClustersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.rdsDbClusters()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("di")
            .withExistingResourceGroup("rgrdsDBCluster")
            .withTags(mapOf("key1769", "fakeTokenPlaceholder"))
            .withProperties(new RdsDBClusterProperties()
                .withAwsProperties(new AwsRdsDBClusterProperties().withAllocatedStorage(12)
                    .withAssociatedRoles(Arrays
                        .asList(new DBClusterRole().withFeatureName("yupxlegnstbpoght").withRoleArn("pcilcosyud")))
                    .withAutoMinorVersionUpgrade(true)
                    .withAvailabilityZones(Arrays.asList("xbabqekpowoz"))
                    .withBacktrackWindow(18)
                    .withBackupRetentionPeriod(11)
                    .withCopyTagsToSnapshot(true)
                    .withDbClusterArn("zdohcaiqsymzj")
                    .withDbClusterIdentifier("euvcyppvvutbntragfptjnmzhg")
                    .withDbClusterInstanceClass("suufjmxymxlrberbqtknmsvzrsajw")
                    .withDbClusterParameterGroupName("sokiordelmtviobobxrdsw")
                    .withDbClusterResourceId("vnwlcfxokdrjitagoefxrsf")
                    .withDbInstanceParameterGroupName("cwhdxixjtyfziflvod")
                    .withDbSubnetGroupName("ajeipefwih")
                    .withDbSystemId("exockxknyjqihmhxjuin")
                    .withDatabaseName("ttn")
                    .withDeletionProtection(true)
                    .withDomain("qzpcprovksxsiuithxqu")
                    .withDomainIamRoleName("psubmwhsowirjcnv")
                    .withEnableCloudwatchLogsExports(Arrays.asList("lytydxlnpduhnvmifkneiu"))
                    .withEnableGlobalWriteForwarding(true)
                    .withEnableHttpEndpoint(true)
                    .withEnableIamDatabaseAuthentication(true)
                    .withEndpoint(new EndpointAutoGenerated().withAddress("pwliordavkhwfklfzwxic").withPort("nagvki"))
                    .withEngine("cehuc")
                    .withEngineMode("iokki")
                    .withEngineVersion("ziindzjpzdrbcmtougdffweh")
                    .withGlobalClusterIdentifier("jqoiwozrdbnumywlieglbpzzx")
                    .withIops(26)
                    .withKmsKeyId("fakeTokenPlaceholder")
                    .withManageMasterUserPassword(true)
                    .withMasterUserPassword("fakeTokenPlaceholder")
                    .withMasterUserSecret(new MasterUserSecret().withKmsKeyId("fakeTokenPlaceholder")
                        .withSecretArn("fakeTokenPlaceholder"))
                    .withMasterUsername("lusozmpnihhahsioubedg")
                    .withMonitoringInterval(17)
                    .withMonitoringRoleArn("pqckluqmxqazvvi")
                    .withNetworkType("mnsuyqfkeqg")
                    .withPerformanceInsightsEnabled(true)
                    .withPerformanceInsightsKmsKeyId("fakeTokenPlaceholder")
                    .withPerformanceInsightsRetentionPeriod(2)
                    .withPort(23)
                    .withPreferredBackupWindow("shjtwjtugyols")
                    .withPreferredMaintenanceWindow("fuuieyvfhfcanzgutwcdbtbenk")
                    .withPubliclyAccessible(true)
                    .withReadEndpoint(new ReadEndpoint().withAddress("ca"))
                    .withReplicationSourceIdentifier("sdohltrpdqsszpptdh")
                    .withRestoreToTime("srbuhavl")
                    .withRestoreType("tnsdjgvzcnnsjxw")
                    .withScalingConfiguration(new ScalingConfiguration().withAutoPause(true)
                        .withMaxCapacity(3)
                        .withMinCapacity(5)
                        .withSecondsBeforeTimeout(28)
                        .withSecondsUntilAutoPause(25)
                        .withTimeoutAction("cqgyqshpkcyblfsqmujyxpfiyv"))
                    .withServerlessV2ScalingConfiguration(
                        new ServerlessV2ScalingConfiguration().withMaxCapacity(23.0F).withMinCapacity(16.0F))
                    .withSnapshotIdentifier("vqowgxcqbclzjexvyigvdzlpcdluvv")
                    .withSourceDBClusterIdentifier("jtvnbddzyqf")
                    .withSourceRegion("vrzpezvwoszraxdi")
                    .withStorageEncrypted(true)
                    .withStorageThroughput(6)
                    .withStorageType("iiwkeunemifyewevpcvcrbs")
                    .withTags(Arrays.asList(
                        new TagAutoGenerated45().withKey("fakeTokenPlaceholder").withValue("szbfittyghldzvnflsglc")))
                    .withUseLatestRestorableTime(true)
                    .withVpcSecurityGroupIds(Arrays.asList("jdkxpjhsibvgvorizsuzta")))
                .withPublicCloudConnectorsResourceId("pexhjqkygfiozfsvo")
                .withAwsAccountId("rpxoebfhnpwagqqgk")
                .withArn("lllohvlgyg")
                .withPublicCloudResourceName("quyqfarecht")
                .withAwsSourceSchema("wrucexqlrnssoxvtczytcslheth")
                .withAwsRegion("fulsvqpnagyrsirhnuxdsppl")
                .withAwsTags(mapOf("key4409", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
