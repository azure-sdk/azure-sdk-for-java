// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsConfigServiceDeliveryChannelProperties;
import com.azure.resourcemanager.awsconnector.models.ConfigServiceDeliveryChannelProperties;
import com.azure.resourcemanager.awsconnector.models.ConfigSnapshotDeliveryProperties;
import com.azure.resourcemanager.awsconnector.models.MaximumExecutionFrequency;
import com.azure.resourcemanager.awsconnector.models.MaximumExecutionFrequencyEnumValue;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ConfigServiceDeliveryChannels CreateOrReplace.
 */
public final class ConfigServiceDeliveryChannelsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ConfigServiceDeliveryChannels_CreateOrReplace.json
     */
    /**
     * Sample code: ConfigServiceDeliveryChannels_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void configServiceDeliveryChannelsCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.configServiceDeliveryChannels()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("djcnfaicagptxk")
            .withExistingResourceGroup("rgconfigServiceDeliveryChannel")
            .withTags(mapOf("key6889", "fakeTokenPlaceholder"))
            .withProperties(new ConfigServiceDeliveryChannelProperties()
                .withAwsProperties(new AwsConfigServiceDeliveryChannelProperties()
                    .withConfigSnapshotDeliveryProperties(new ConfigSnapshotDeliveryProperties().withDeliveryFrequency(
                        new MaximumExecutionFrequencyEnumValue().withValue(MaximumExecutionFrequency.ONE_HOUR)))
                    .withName("pfdwjyiaypjjedltuphpz")
                    .withS3BucketName("kcgtpxhibekwygxkybv")
                    .withS3KeyPrefix("fakeTokenPlaceholder")
                    .withS3KmsKeyArn("fakeTokenPlaceholder")
                    .withSnsTopicArn("qsxejnowkzljayrlhzyyppaya"))
                .withPublicCloudConnectorsResourceId("kzdkfyjjgkoolslydcmbms")
                .withAwsAccountId("xiyydxsyykydvymn")
                .withArn("eevsmaokvzzbqwpfm")
                .withPublicCloudResourceName("idxxguxjmvrzjnruzz")
                .withAwsSourceSchema("ged")
                .withAwsRegion("kngfw")
                .withAwsTags(mapOf("key5086", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
