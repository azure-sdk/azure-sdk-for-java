// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2SnapshotProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2SnapshotProperties;
import com.azure.resourcemanager.awsconnector.models.SnapshotState;
import com.azure.resourcemanager.awsconnector.models.SnapshotStateEnumValue;
import com.azure.resourcemanager.awsconnector.models.SseType;
import com.azure.resourcemanager.awsconnector.models.SseTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.StorageTier;
import com.azure.resourcemanager.awsconnector.models.StorageTierEnumValue;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated19;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2Snapshots CreateOrReplace.
 */
public final class Ec2SnapshotsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2Snapshots_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2Snapshots_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void ec2SnapshotsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2Snapshots()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("kqbtvnmdasfajwylafmkah")
            .withExistingResourceGroup("rgec2Snapshot")
            .withTags(mapOf("key9392", "fakeTokenPlaceholder"))
            .withProperties(
                new Ec2SnapshotProperties()
                    .withAwsProperties(new AwsEc2SnapshotProperties().withDataEncryptionKeyId("fakeTokenPlaceholder")
                        .withDescription("tsduasxksmdr")
                        .withEncrypted(true)
                        .withKmsKeyId("fakeTokenPlaceholder")
                        .withOutpostArn("vpqkamzadulbg")
                        .withOwnerAlias("bmfwdqpzxg")
                        .withOwnerId("xudlgprkedlmxatpupwvaknlkxfs")
                        .withProgress("ecdblvtjkixoklgjh")
                        .withRestoreExpiryTime(OffsetDateTime.parse("2024-10-08T03:53:51.251Z"))
                        .withSnapshotId("lpcr")
                        .withSseType(new SseTypeEnumValue().withValue(SseType.NONE))
                        .withStartTime(OffsetDateTime.parse("2024-10-08T03:53:51.251Z"))
                        .withState(new SnapshotStateEnumValue().withValue(SnapshotState.COMPLETED))
                        .withStateMessage("nogwovxkgpjylsijzipkpqzxpvjh")
                        .withStorageTier(new StorageTierEnumValue().withValue(StorageTier.ARCHIVE))
                        .withTags(
                            Arrays.asList(new TagAutoGenerated19().withKey("fakeTokenPlaceholder").withValue("vjhh")))
                        .withVolumeId("rzepawgzsvqncqbpjxnijhwofbgc")
                        .withVolumeSize(3))
                    .withPublicCloudConnectorsResourceId("bfcselosmakgrkibu")
                    .withAwsAccountId("iizqmtavivxapbfqrqqrauezng")
                    .withArn("z")
                    .withPublicCloudResourceName("eyltdaumfqmdgmnlwpgjhjlavikc")
                    .withAwsSourceSchema("gmzpssyyjoqqnqjxwcluwnyrswywcv")
                    .withAwsRegion("yylufbdgujuqmqwhscnglwsa")
                    .withAwsTags(mapOf("key9124", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
