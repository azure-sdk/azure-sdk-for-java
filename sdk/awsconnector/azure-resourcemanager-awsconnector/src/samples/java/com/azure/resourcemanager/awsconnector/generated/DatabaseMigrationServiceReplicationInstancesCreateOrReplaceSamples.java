// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AvailabilityZone;
import com.azure.resourcemanager.awsconnector.models.AwsDatabaseMigrationServiceReplicationInstanceProperties;
import com.azure.resourcemanager.awsconnector.models.DatabaseMigrationServiceReplicationInstanceProperties;
import com.azure.resourcemanager.awsconnector.models.ReplicationPendingModifiedValues;
import com.azure.resourcemanager.awsconnector.models.ReplicationSubnetGroup;
import com.azure.resourcemanager.awsconnector.models.Subnet;
import com.azure.resourcemanager.awsconnector.models.VpcSecurityGroupMembership;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DatabaseMigrationServiceReplicationInstances CreateOrReplace.
 */
public final class DatabaseMigrationServiceReplicationInstancesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * DatabaseMigrationServiceReplicationInstances_CreateOrReplace.json
     */
    /**
     * Sample code: DatabaseMigrationServiceReplicationInstances_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void databaseMigrationServiceReplicationInstancesCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.databaseMigrationServiceReplicationInstances()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("pkvlgucpnkkigflvahztr")
            .withExistingResourceGroup("rgdatabaseMigrationServiceReplicationInstance")
            .withTags(mapOf("key2694", "fakeTokenPlaceholder"))
            .withProperties(
                new DatabaseMigrationServiceReplicationInstanceProperties()
                    .withAwsProperties(
                        new AwsDatabaseMigrationServiceReplicationInstanceProperties().withAllocatedStorage(15)
                            .withAutoMinorVersionUpgrade(true)
                            .withAvailabilityZone("ufwkddqfhigljgpouncfjtwjhcm")
                            .withDnsNameServers("gjlforgdkkjubyetzafznct")
                            .withEngineVersion("ugfhxgag")
                            .withFreeUntil(OffsetDateTime.parse("2024-10-08T03:53:04.775Z"))
                            .withInstanceCreateTime(OffsetDateTime.parse("2024-10-08T03:53:04.776Z"))
                            .withKmsKeyId("fakeTokenPlaceholder")
                            .withMultiAZ(true)
                            .withNetworkType("ognalkhwgr")
                            .withPendingModifiedValues(new ReplicationPendingModifiedValues().withAllocatedStorage(24)
                                .withEngineVersion("ljjlnnkamqo")
                                .withMultiAZ(true)
                                .withNetworkType("xgynwurnwuqfirccmedvhphptwx")
                                .withReplicationInstanceClass("nah"))
                            .withPreferredMaintenanceWindow("cjhj")
                            .withPubliclyAccessible(true)
                            .withReplicationInstanceArn("kkuagugx")
                            .withReplicationInstanceClass("nrejgjvmp")
                            .withReplicationInstanceIdentifier("kmkhuvkgshmfnqrkh")
                            .withReplicationInstanceIpv6Addresses(Arrays.asList("chankbhtkfgmmql"))
                            .withReplicationInstancePrivateIpAddress("kzpeupvtv")
                            .withReplicationInstancePrivateIpAddresses(Arrays.asList("wpvurjepdvyqsut"))
                            .withReplicationInstancePublicIpAddress("cgolgdimqmrtbs")
                            .withReplicationInstancePublicIpAddresses(Arrays.asList("laguuyhnutmqr"))
                            .withReplicationInstanceStatus("prkwehbwglimljckrujss")
                            .withReplicationSubnetGroup(new ReplicationSubnetGroup()
                                .withReplicationSubnetGroupDescription("octprj")
                                .withReplicationSubnetGroupIdentifier("lp")
                                .withSubnetGroupStatus("u")
                                .withSubnets(Arrays.asList(new Subnet()
                                    .withSubnetAvailabilityZone(new AvailabilityZone().withName("zkqyndrxrxjgvbcwycfd"))
                                    .withSubnetIdentifier("bbjyuchlt")
                                    .withSubnetStatus("pzsp")))
                                .withSupportedNetworkTypes(Arrays.asList("flrojgbtzlv"))
                                .withVpcId("zsg"))
                            .withSecondaryAvailabilityZone("gfricycigffhmqcwzxxzwevrwf")
                            .withVpcSecurityGroups(Arrays.asList(new VpcSecurityGroupMembership().withStatus("tioerjd")
                                .withVpcSecurityGroupId("szupfofnwyrfpcpwi"))))
                    .withPublicCloudConnectorsResourceId("oafkmlxerdytgq")
                    .withAwsAccountId("zkpbtrjskcsejrxvaulidr")
                    .withArn("hgieneplknqcgzbvoj")
                    .withPublicCloudResourceName("ajrdejnsykvcfzomaktse")
                    .withAwsSourceSchema("aj")
                    .withAwsRegion("xflnvjqertqoawntyvmyorzemmx")
                    .withAwsTags(mapOf("key1826", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
