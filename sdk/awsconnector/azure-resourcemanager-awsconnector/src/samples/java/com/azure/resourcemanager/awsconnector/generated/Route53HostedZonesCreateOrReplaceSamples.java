// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsRoute53HostedZoneProperties;
import com.azure.resourcemanager.awsconnector.models.HostedZoneConfig;
import com.azure.resourcemanager.awsconnector.models.HostedZoneTag;
import com.azure.resourcemanager.awsconnector.models.QueryLoggingConfig;
import com.azure.resourcemanager.awsconnector.models.Route53HostedZoneProperties;
import com.azure.resourcemanager.awsconnector.models.Vpc;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Route53HostedZones CreateOrReplace.
 */
public final class Route53HostedZonesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Route53HostedZones_CreateOrReplace.json
     */
    /**
     * Sample code: Route53HostedZones_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        route53HostedZonesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.route53HostedZones()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("fohhkmxasqynkojwigmrzyhydfpdrd")
            .withExistingResourceGroup("rgroute53HostedZone")
            .withTags(mapOf("key8226", "fakeTokenPlaceholder"))
            .withProperties(
                new Route53HostedZoneProperties()
                    .withAwsProperties(new AwsRoute53HostedZoneProperties()
                        .withHostedZoneConfig(new HostedZoneConfig().withComment("vanhfd"))
                        .withHostedZoneTags(Arrays.asList(
                            new HostedZoneTag().withKey("fakeTokenPlaceholder").withValue("ptsrmgayfujrfvjwyxoi")))
                        .withId("dwezucqqxsyhynebuyflyc")
                        .withName("koqhelfps")
                        .withNameServers(Arrays.asList("qizlbjltglpbdpxcsriu"))
                        .withQueryLoggingConfig(
                            new QueryLoggingConfig().withCloudWatchLogsLogGroupArn("magynetpgpdveymgnonjicfoxzxfp"))
                        .withVpCs(Arrays.asList(new Vpc().withVpcId("nxfxsb").withVpcRegion("y"))))
                    .withPublicCloudConnectorsResourceId("qugbrritrvssrcwtib")
                    .withAwsAccountId("rcvmulzibfebvzgooms")
                    .withArn("vohjyzjtvd")
                    .withPublicCloudResourceName("edufxpyvryjxbnwulifcrwuezu")
                    .withAwsSourceSchema("a")
                    .withAwsRegion("nthjzqxrrqsducmjudhrcdiqioy")
                    .withAwsTags(mapOf("key625", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
