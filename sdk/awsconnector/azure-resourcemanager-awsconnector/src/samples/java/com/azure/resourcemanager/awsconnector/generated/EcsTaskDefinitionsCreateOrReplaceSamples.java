// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AuthorizationConfig;
import com.azure.resourcemanager.awsconnector.models.AuthorizationConfigIam;
import com.azure.resourcemanager.awsconnector.models.AwsEcsTaskDefinitionProperties;
import com.azure.resourcemanager.awsconnector.models.ContainerDefinition;
import com.azure.resourcemanager.awsconnector.models.ContainerDependency;
import com.azure.resourcemanager.awsconnector.models.Device;
import com.azure.resourcemanager.awsconnector.models.DockerVolumeConfiguration;
import com.azure.resourcemanager.awsconnector.models.EcsTaskDefinitionProperties;
import com.azure.resourcemanager.awsconnector.models.EfsVolumeConfiguration;
import com.azure.resourcemanager.awsconnector.models.EfsVolumeConfigurationTransitEncryption;
import com.azure.resourcemanager.awsconnector.models.EnvironmentFile;
import com.azure.resourcemanager.awsconnector.models.EphemeralStorage;
import com.azure.resourcemanager.awsconnector.models.FSxAuthorizationConfig;
import com.azure.resourcemanager.awsconnector.models.FSxWindowsFileServerVolumeConfiguration;
import com.azure.resourcemanager.awsconnector.models.FirelensConfiguration;
import com.azure.resourcemanager.awsconnector.models.HealthCheck;
import com.azure.resourcemanager.awsconnector.models.HostEntry;
import com.azure.resourcemanager.awsconnector.models.HostVolumeProperties;
import com.azure.resourcemanager.awsconnector.models.InferenceAccelerator;
import com.azure.resourcemanager.awsconnector.models.KernelCapabilities;
import com.azure.resourcemanager.awsconnector.models.KeyValuePair;
import com.azure.resourcemanager.awsconnector.models.LinuxParameters;
import com.azure.resourcemanager.awsconnector.models.LogConfiguration;
import com.azure.resourcemanager.awsconnector.models.MountPoint;
import com.azure.resourcemanager.awsconnector.models.PortMapping;
import com.azure.resourcemanager.awsconnector.models.PortMappingAppProtocol;
import com.azure.resourcemanager.awsconnector.models.ProxyConfiguration;
import com.azure.resourcemanager.awsconnector.models.RepositoryCredentials;
import com.azure.resourcemanager.awsconnector.models.ResourceRequirement;
import com.azure.resourcemanager.awsconnector.models.RuntimePlatform;
import com.azure.resourcemanager.awsconnector.models.Secret;
import com.azure.resourcemanager.awsconnector.models.SystemControl;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated27;
import com.azure.resourcemanager.awsconnector.models.TaskDefinitionPlacementConstraint;
import com.azure.resourcemanager.awsconnector.models.Tmpfs;
import com.azure.resourcemanager.awsconnector.models.Ulimit;
import com.azure.resourcemanager.awsconnector.models.Volume;
import com.azure.resourcemanager.awsconnector.models.VolumeFrom;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EcsTaskDefinitions CreateOrReplace.
 */
public final class EcsTaskDefinitionsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EcsTaskDefinitions_CreateOrReplace.json
     */
    /**
     * Sample code: EcsTaskDefinitions_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ecsTaskDefinitionsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ecsTaskDefinitions()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("hideafehihasfzxdxuqiqubhhzg")
            .withExistingResourceGroup("rgecsTaskDefinition")
            .withTags(mapOf("key6626", "fakeTokenPlaceholder"))
            .withProperties(new EcsTaskDefinitionProperties()
                .withAwsProperties(new AwsEcsTaskDefinitionProperties()
                    .withContainerDefinitions(Arrays.asList(new ContainerDefinition()
                        .withCommand(Arrays.asList("jowixdtkttvhtvcluhzsqkcszit"))
                        .withCpu(17)
                        .withCredentialSpecs(Arrays.asList("ooravv"))
                        .withDependsOn(
                            Arrays.asList(new ContainerDependency().withCondition("xpmiwcexgnrimsrqyrdlvyyquiccp")
                                .withContainerName("wzcyhuwwutzttwwaopqed")))
                        .withDisableNetworking(true)
                        .withDnsSearchDomains(Arrays.asList("ggzzwoziotxloooklwdsveul"))
                        .withDnsServers(Arrays.asList("ngggprelehukiysguto"))
                        .withDockerSecurityOptions(Arrays.asList("famtfjusztdnyrdzupruqpxufhxp"))
                        .withEntryPoint(Arrays.asList("oaiompurpnjswlqkmvgraiaj"))
                        .withEnvironment(Arrays.asList(new KeyValuePair().withName("edrmixvb").withValue("vdms")))
                        .withEnvironmentFiles(
                            Arrays.asList(new EnvironmentFile().withType("psgsoavpms").withValue("ydkrwlbkbzqdm")))
                        .withEssential(true)
                        .withExtraHosts(Arrays.asList(
                            new HostEntry().withHostname("unpwutrc").withIpAddress("mcsjkhhqbwqesxwcpnnasbzamixath")))
                        .withFirelensConfiguration(new FirelensConfiguration().withType("uuwlwegjjeoorvbgtyzoaeeucp"))
                        .withHealthCheck(new HealthCheck().withCommand(Arrays.asList("ppgfrdhjiytbzqtwkumhmnpsk"))
                            .withInterval(1)
                            .withRetries(11)
                            .withStartPeriod(21)
                            .withTimeout(22))
                        .withHostname("qjkxoayeojuesqmrhe")
                        .withImage("lmgx")
                        .withInteractive(true)
                        .withLinks(Arrays.asList("awgsbfcuoynoomjr"))
                        .withLinuxParameters(new LinuxParameters()
                            .withCapabilities(new KernelCapabilities().withAdd(Arrays.asList("xnobooaglhooafh"))
                                .withDrop(Arrays.asList("uscfx")))
                            .withDevices(Arrays.asList(new Device().withContainerPath("fveecgcpepimcqufoswgvjibavi")
                                .withHostPath("hvwxdqfcbt")
                                .withPermissions(Arrays.asList("yqev"))))
                            .withInitProcessEnabled(true)
                            .withMaxSwap(24)
                            .withSharedMemorySize(1)
                            .withSwappiness(27)
                            .withTmpfs(Arrays.asList(new Tmpfs().withContainerPath("kxvhyrbeu")
                                .withMountOptions(Arrays.asList("lylxsszvvczykn"))
                                .withSize(24))))
                        .withLogConfiguration(new LogConfiguration().withLogDriver("zgkgcxxggqdvrfngjbdapez")
                            .withSecretOptions(
                                Arrays.asList(new Secret().withName("knumytlyulndziptjvgvcpd").withValueFrom("z"))))
                        .withMemory(27)
                        .withMemoryReservation(9)
                        .withMountPoints(Arrays.asList(new MountPoint().withContainerPath("zjtchyyfjv")
                            .withReadOnly(true)
                            .withSourceVolume("mrimyrhpxx")))
                        .withName("tfseewfqlgwjqbkjikv")
                        .withPortMappings(Arrays.asList(new PortMapping().withAppProtocol(PortMappingAppProtocol.GRPC)
                            .withContainerPort(17)
                            .withContainerPortRange("hwshvyttesxemvlis")
                            .withHostPort(13)
                            .withName("nbxxumpmur")
                            .withProtocol("llczx")))
                        .withPrivileged(true)
                        .withPseudoTerminal(true)
                        .withReadonlyRootFilesystem(true)
                        .withRepositoryCredentials(
                            new RepositoryCredentials().withCredentialsParameter("fakeTokenPlaceholder"))
                        .withResourceRequirements(Arrays.asList(
                            new ResourceRequirement().withType("yhtgxyeazgtpygnamvgtrt").withValue("msamplxjlrq")))
                        .withSecrets(Arrays.asList(new Secret().withName("knumytlyulndziptjvgvcpd").withValueFrom("z")))
                        .withStartTimeout(10)
                        .withStopTimeout(24)
                        .withSystemControls(Arrays.asList(
                            new SystemControl().withNamespace("hcwgpftfycwhenxygrbczcyqxh").withValue("zzjkfgz")))
                        .withUlimits(Arrays.asList(
                            new Ulimit().withHardLimit(16).withName("zswtamsvbvaxlueyfkklzaz").withSoftLimit(2)))
                        .withUser("hosruyaojhjbh")
                        .withVolumesFrom(
                            Arrays.asList(new VolumeFrom().withReadOnly(true).withSourceContainer("ktlxxpz")))
                        .withWorkingDirectory("jpdgsckyvfez")))
                    .withCpu("hijyr")
                    .withEphemeralStorage(new EphemeralStorage().withSizeInGiB(17))
                    .withExecutionRoleArn("qqqfakequmccjxadppbeamxuwsitta")
                    .withFamily("atzptqetfqeczglfyn")
                    .withInferenceAccelerators(
                        Arrays.asList(new InferenceAccelerator().withDeviceName("mh").withDeviceType("zfkvyer")))
                    .withIpcMode("bynxyc")
                    .withMemory("vwthlhlwlmwyoxowrumsld")
                    .withNetworkMode("vrvk")
                    .withPidMode("pthtbdouatcrybmke")
                    .withPlacementConstraints(
                        Arrays.asList(new TaskDefinitionPlacementConstraint().withExpression("skxfvhirrtaegdaujr")
                            .withType("qnklizvyidxybjmtkgdzdls")))
                    .withProxyConfiguration(new ProxyConfiguration().withContainerName("tykmharv")
                        .withProxyConfigurationProperties(
                            Arrays.asList(new KeyValuePair().withName("edrmixvb").withValue("vdms")))
                        .withType("htnvhyjaffhosgiq"))
                    .withRequiresCompatibilities(Arrays.asList("lmugnbkpcgvmibqmoyeicudqghukxl"))
                    .withRuntimePlatform(new RuntimePlatform()
                        .withCpuArchitecture("zcetkrsfadbflliirh")
                        .withOperatingSystemFamily("topzpehesx"))
                    .withTags(
                        Arrays.asList(new TagAutoGenerated27().withKey("fakeTokenPlaceholder").withValue("glazi")))
                    .withTaskDefinitionArn("fpexhci")
                    .withTaskRoleArn("vvebkfiglrktpmn")
                    .withVolumes(Arrays.asList(new Volume().withConfiguredAtLaunch(true)
                        .withDockerVolumeConfiguration(new DockerVolumeConfiguration()
                            .withAutoprovision(true)
                            .withDriver("fdypjooligpeypyjkojhhnstigr")
                            .withScope("wourdwnfkwgitfhzywc"))
                        .withEfsVolumeConfiguration(new EfsVolumeConfiguration()
                            .withAuthorizationConfig(new AuthorizationConfig().withAccessPointId("ipf")
                                .withIam(AuthorizationConfigIam.DISABLED))
                            .withFilesystemId("kyluffayszoviyute")
                            .withRootDirectory("vqogypwzwvlqikbwdhvy")
                            .withTransitEncryption(EfsVolumeConfigurationTransitEncryption.DISABLED)
                            .withTransitEncryptionPort(27))
                        .withFSxWindowsFileServerVolumeConfiguration(new FSxWindowsFileServerVolumeConfiguration()
                            .withAuthorizationConfig(
                                new FSxAuthorizationConfig().withCredentialsParameter("fakeTokenPlaceholder")
                                    .withDomain("igiaaxjfjdstgiwmurfycdsss"))
                            .withFileSystemId("gxcjekzhsm")
                            .withRootDirectory("bkbhxkwlfnslgnapevzhyvmfcdaup"))
                        .withHost(new HostVolumeProperties().withSourcePath("kgadnbxtebvbppaiqqkcmwcipqs"))
                        .withName("qslxsptvrywosrsnrdvo"))))
                .withPublicCloudConnectorsResourceId("zrnabgyobuzozcbzvgu")
                .withAwsAccountId("efgvyahxivjf")
                .withArn("mkr")
                .withPublicCloudResourceName("mmhr")
                .withAwsSourceSchema("mvndrea")
                .withAwsRegion("vdwjcoqcepgcfqjeedexacghbqhz")
                .withAwsTags(mapOf("key1568", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
