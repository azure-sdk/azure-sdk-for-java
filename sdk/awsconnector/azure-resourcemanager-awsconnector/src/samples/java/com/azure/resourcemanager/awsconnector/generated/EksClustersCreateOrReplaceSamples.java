// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.fluent.models.EksClusterInner;
import com.azure.resourcemanager.awsconnector.models.AccessConfigResponse;
import com.azure.resourcemanager.awsconnector.models.AuthenticationMode;
import com.azure.resourcemanager.awsconnector.models.AuthenticationModeEnumValue;
import com.azure.resourcemanager.awsconnector.models.AwsEksClusterProperties;
import com.azure.resourcemanager.awsconnector.models.Certificate;
import com.azure.resourcemanager.awsconnector.models.ClusterHealth;
import com.azure.resourcemanager.awsconnector.models.ClusterIssue;
import com.azure.resourcemanager.awsconnector.models.ClusterIssueCode;
import com.azure.resourcemanager.awsconnector.models.ClusterIssueCodeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ClusterStatus;
import com.azure.resourcemanager.awsconnector.models.ClusterStatusEnumValue;
import com.azure.resourcemanager.awsconnector.models.ConnectorConfigResponse;
import com.azure.resourcemanager.awsconnector.models.ControlPlanePlacementResponse;
import com.azure.resourcemanager.awsconnector.models.EksClusterProperties;
import com.azure.resourcemanager.awsconnector.models.EncryptionConfig;
import com.azure.resourcemanager.awsconnector.models.Identity;
import com.azure.resourcemanager.awsconnector.models.IpFamily;
import com.azure.resourcemanager.awsconnector.models.IpFamilyEnumValue;
import com.azure.resourcemanager.awsconnector.models.KubernetesNetworkConfigResponse;
import com.azure.resourcemanager.awsconnector.models.LogSetup;
import com.azure.resourcemanager.awsconnector.models.LogType;
import com.azure.resourcemanager.awsconnector.models.LoggingAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.Oidc;
import com.azure.resourcemanager.awsconnector.models.OutpostConfigResponse;
import com.azure.resourcemanager.awsconnector.models.Provider;
import com.azure.resourcemanager.awsconnector.models.VpcConfigResponse;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EksClusters CreateOrReplace.
 */
public final class EksClustersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * EksClusters_CreateOrReplace.json
     */
    /**
     * Sample code: EksClusters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void eksClustersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.eksClusters()
            .createOrReplace("vutdhhavszx",
                new EksClusterInner()
                    .withProperties(
                        new EksClusterProperties()
                            .withAwsProperties(new AwsEksClusterProperties()
                                .withAccessConfig(new AccessConfigResponse()
                                    .withAuthenticationMode(
                                        new AuthenticationModeEnumValue().withValue(AuthenticationMode.API))
                                    .withBootstrapClusterCreatorAdminPermissions(true))
                                .withArn("hcepxlffwylmwulxcktedclqczlia")
                                .withCertificateAuthority(new Certificate().withData("tlchvarrjfhilsdtsgqshctlli"))
                                .withClientRequestToken("fakeTokenPlaceholder")
                                .withConnectorConfig(
                                    new ConnectorConfigResponse().withActivationCode("fakeTokenPlaceholder")
                                        .withActivationExpiry(OffsetDateTime.parse("2024-10-08T03:50:52.459Z"))
                                        .withActivationId("vmvmutvfuygzczgtsutkls")
                                        .withProvider("ngrakrrq")
                                        .withRoleArn("jcu"))
                                .withCreatedAt(OffsetDateTime.parse("2024-10-08T03:50:52.460Z"))
                                .withEncryptionConfig(Arrays.asList(new EncryptionConfig()
                                    .withProvider(new Provider().withKeyArn("fakeTokenPlaceholder"))
                                    .withResources(Arrays.asList("luiywwdjzfsrozikidayeump"))))
                                .withEndpoint("bvdvtunxiggcpmncdeflirifck")
                                .withHealth(new ClusterHealth().withIssues(Arrays.asList(new ClusterIssue()
                                    .withCode(new ClusterIssueCodeEnumValue().withValue(ClusterIssueCode.ACCESS_DENIED))
                                    .withMessage("mwtvogjihbqys")
                                    .withResourceIds(Arrays.asList("gnfkewljeibgooftzbraahnxysx")))))
                                .withId("zmnyjrmqynglvrhpkkqkpazfyv")
                                .withIdentity(
                                    new Identity().withOidc(new Oidc().withIssuer("otiqmbvjucermteuonkxgdftf")))
                                .withKubernetesNetworkConfig(new KubernetesNetworkConfigResponse()
                                    .withIpFamily(new IpFamilyEnumValue().withValue(IpFamily.IPV4))
                                    .withServiceIpv4Cidr("llpoqidqkuhvzzwbkiynhrucvgglk")
                                    .withServiceIpv6Cidr("nfdslge"))
                                .withLogging(new LoggingAutoGenerated().withClusterLogging(Arrays
                                    .asList(new LogSetup().withEnabled(true).withTypes(Arrays.asList(LogType.API)))))
                                .withName("fjvxhqvmvbshnltkuozc")
                                .withOutpostConfig(
                                    new OutpostConfigResponse().withControlPlaneInstanceType("dbqfhwaxdzegqxqopkhaevcs")
                                        .withControlPlanePlacement(
                                            new ControlPlanePlacementResponse().withGroupName("qrpyvhb"))
                                        .withOutpostArns(Arrays.asList("lkvzvf")))
                                .withPlatformVersion("ezmalzlqyiuhsxxdribckieg")
                                .withResourcesVpcConfig(
                                    new VpcConfigResponse().withClusterSecurityGroupId("bkhbpbwyholvjxqzgxngfqvfim")
                                        .withEndpointPrivateAccess(true)
                                        .withEndpointPublicAccess(true)
                                        .withPublicAccessCidrs(Arrays.asList("wjznm"))
                                        .withSecurityGroupIds(Arrays.asList("ljodkq"))
                                        .withSubnetIds(Arrays.asList("pmazpgqowrfoi"))
                                        .withVpcId("eoosrmen"))
                                .withRoleArn("uvceqehkmdtkxgakuckm")
                                .withStatus(new ClusterStatusEnumValue().withValue(ClusterStatus.ACTIVE))
                                .withTags(mapOf("key783", "fakeTokenPlaceholder"))
                                .withVersion("ngoffoetqqgv"))
                            .withPublicCloudConnectorsResourceId("uadwidkemgzwde")
                            .withAwsAccountId("sebsvgbgzb")
                            .withArn("xhoylvamhuqnvruh")
                            .withPublicCloudResourceName("kqeiozkswbnhscn")
                            .withAwsSourceSchema("gkfmtslfbglu")
                            .withAwsRegion("urhi")
                            .withAwsTags(mapOf("key7789", "fakeTokenPlaceholder"))),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
