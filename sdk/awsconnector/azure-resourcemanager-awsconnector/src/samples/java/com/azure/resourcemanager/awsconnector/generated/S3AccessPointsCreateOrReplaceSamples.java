// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsS3AccessPointProperties;
import com.azure.resourcemanager.awsconnector.models.NetworkOrigin;
import com.azure.resourcemanager.awsconnector.models.PublicAccessBlockConfiguration;
import com.azure.resourcemanager.awsconnector.models.S3AccessPointProperties;
import com.azure.resourcemanager.awsconnector.models.VpcConfiguration;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for S3AccessPoints CreateOrReplace.
 */
public final class S3AccessPointsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * S3AccessPoints_CreateOrReplace.json
     */
    /**
     * Sample code: S3AccessPoints_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        s3AccessPointsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.s3AccessPoints()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("azmnzomeh")
            .withExistingResourceGroup("rgs3AccessPoint")
            .withTags(mapOf("key2363", "fakeTokenPlaceholder"))
            .withProperties(new S3AccessPointProperties()
                .withAwsProperties(new AwsS3AccessPointProperties().withAlias("sv")
                    .withArn("sizkkllnnrgdfkaov")
                    .withBucket("hsqprhqjtcqrizzbhao")
                    .withBucketAccountId("bmjnxdssnshenybwnws")
                    .withName("ve")
                    .withNetworkOrigin(NetworkOrigin.INTERNET)
                    .withPublicAccessBlockConfiguration(new PublicAccessBlockConfiguration().withBlockPublicAcls(true)
                        .withBlockPublicPolicy(true)
                        .withIgnorePublicAcls(true)
                        .withRestrictPublicBuckets(true))
                    .withVpcConfiguration(new VpcConfiguration().withVpcId("hhzyvprnlxearagzmfsg")))
                .withPublicCloudConnectorsResourceId("ixhnqrsogifbzagpdzakwjxqlt")
                .withAwsAccountId("rqzqzkncomjg")
                .withArn("dputejthukqrofpuygrkatazvamcge")
                .withPublicCloudResourceName("swojnpzcxwqfvhrikxhgu")
                .withAwsSourceSchema("utriogwvkzanqypvldgboyemujg")
                .withAwsRegion("elrkktihogsptpwwazywnyyzs")
                .withAwsTags(mapOf("key2658", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
