// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsIamRoleProperties;
import com.azure.resourcemanager.awsconnector.models.IamRoleProperties;
import com.azure.resourcemanager.awsconnector.models.PolicyAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated32;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for IamRoles CreateOrReplace.
 */
public final class IamRolesCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * IamRoles_CreateOrReplace.json
     */
    /**
     * Sample code: IamRoles_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void iamRolesCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.iamRoles()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("vkzeblhpdgxwu")
            .withExistingResourceGroup("rgiamRole")
            .withTags(mapOf("key3308", "fakeTokenPlaceholder"))
            .withProperties(new IamRoleProperties()
                .withAwsProperties(new AwsIamRoleProperties().withArn("iqe")
                    .withAssumeRolePolicyDocument(mapOf())
                    .withDescription("spayefp")
                    .withManagedPolicyArns(Arrays.asList("twfombcdqlzq"))
                    .withMaxSessionDuration(16)
                    .withPath("qxfdn")
                    .withPermissionsBoundary("wofktscexalvotvxaxsq")
                    .withPolicies(Arrays.asList(new PolicyAutoGenerated().withPolicyDocument(mapOf())
                        .withPolicyName("bpqsmdhzxaruuvctyddrcedbf")))
                    .withRoleId("l")
                    .withRoleName("vpczljoyhnvybvtyagxaxaraogzdyx")
                    .withTags(Arrays.asList(
                        new TagAutoGenerated32().withKey("fakeTokenPlaceholder").withValue("jcpberdkjmspmjbzyewyhyd"))))
                .withPublicCloudConnectorsResourceId("cchmzoxsgytenwavdwoarear")
                .withAwsAccountId("qlndbvxbvf")
                .withArn("cllfeatxzjqiqr")
                .withPublicCloudResourceName("qn")
                .withAwsSourceSchema("onnjxuscupomucwhpltcnogwhxllm")
                .withAwsRegion("yqtvmgzsvcgtehapncinnqvsql")
                .withAwsTags(mapOf("key9018", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
