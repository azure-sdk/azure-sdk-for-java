// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsElasticLoadBalancingV2LoadBalancerProperties;
import com.azure.resourcemanager.awsconnector.models.ElasticLoadBalancingV2LoadBalancerProperties;
import com.azure.resourcemanager.awsconnector.models.LoadBalancerAttribute;
import com.azure.resourcemanager.awsconnector.models.SubnetMapping;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated29;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ElasticLoadBalancingV2LoadBalancers CreateOrReplace.
 */
public final class ElasticLoadBalancingV2LoadBalancersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ElasticLoadBalancingV2LoadBalancers_CreateOrReplace.json
     */
    /**
     * Sample code: ElasticLoadBalancingV2LoadBalancers_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void elasticLoadBalancingV2LoadBalancersCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.elasticLoadBalancingV2LoadBalancers()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("zrpnzixidbktdxtkovhvkklslaw")
            .withExistingResourceGroup("rgelasticLoadBalancingV2LoadBalancer")
            .withTags(mapOf("key4383", "fakeTokenPlaceholder"))
            .withProperties(new ElasticLoadBalancingV2LoadBalancerProperties()
                .withAwsProperties(new AwsElasticLoadBalancingV2LoadBalancerProperties()
                    .withCanonicalHostedZoneId("cpniwdbqzfxrbtnzkthjyohnbtq")
                    .withDnsName("mafoyhxa")
                    .withEnforceSecurityGroupInboundRulesOnPrivateLinkTraffic("gsefdpgmvnyizvpidgxdedsusstsmi")
                    .withIpAddressType("ghelcjykqvyqrwtwydiwleni")
                    .withLoadBalancerArn("tswueurcdm")
                    .withLoadBalancerAttributes(Arrays.asList(
                        new LoadBalancerAttribute().withKey("fakeTokenPlaceholder").withValue("cbsgvwtlyhuclvjpye")))
                    .withLoadBalancerFullName("kmxzisdeike")
                    .withLoadBalancerName("bdspilcwdpibhmnlbygrgaebhvbz")
                    .withName("erwqxzfowfkksnodfytvnnyefbdsc")
                    .withScheme("nqjwo")
                    .withSecurityGroups(Arrays.asList("tavqrnlv"))
                    .withSubnetMappings(Arrays.asList(new SubnetMapping().withAllocationId("dkrqwrzo")
                        .withIPv6Address("mglejntagkkkioov")
                        .withPrivateIPv4Address("furnpiatzewmpnhapicnfy")
                        .withSubnetId("igo")))
                    .withSubnets(Arrays.asList("xqblkoljy"))
                    .withTags(Arrays.asList(
                        new TagAutoGenerated29().withKey("fakeTokenPlaceholder").withValue("vxqjrslimcsyqfkfmjiqjcht")))
                    .withType("ywggrkrojayvb"))
                .withPublicCloudConnectorsResourceId("udwcmojnxevoeyr")
                .withAwsAccountId("eopxqyapnygxz")
                .withArn("kojgsx")
                .withPublicCloudResourceName("oicaxqhgvlybdl")
                .withAwsSourceSchema("lnmi")
                .withAwsRegion("dplxwlbvhvz")
                .withAwsTags(mapOf("key1771", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
