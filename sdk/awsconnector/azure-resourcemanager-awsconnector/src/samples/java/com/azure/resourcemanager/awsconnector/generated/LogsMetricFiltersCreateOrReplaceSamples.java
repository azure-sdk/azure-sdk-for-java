// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsLogsMetricFilterProperties;
import com.azure.resourcemanager.awsconnector.models.DimensionAutoGenerated;
import com.azure.resourcemanager.awsconnector.models.LogsMetricFilterProperties;
import com.azure.resourcemanager.awsconnector.models.MetricTransformation;
import com.azure.resourcemanager.awsconnector.models.MetricTransformationUnit;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for LogsMetricFilters CreateOrReplace.
 */
public final class LogsMetricFiltersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * LogsMetricFilters_CreateOrReplace.json
     */
    /**
     * Sample code: LogsMetricFilters_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        logsMetricFiltersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.logsMetricFilters()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("hvjoetfjcwqioibnqqj")
            .withExistingResourceGroup("rglogsMetricFilter")
            .withTags(mapOf("key5537", "fakeTokenPlaceholder"))
            .withProperties(new LogsMetricFilterProperties()
                .withAwsProperties(new AwsLogsMetricFilterProperties().withFilterName("xexgsguaaqmkiteqgc")
                    .withFilterPattern("xkejasx")
                    .withLogGroupName("cugxyp")
                    .withMetricTransformations(Arrays.asList(new MetricTransformation().withDefaultValue(7)
                        .withDimensions(Arrays.asList(new DimensionAutoGenerated().withKey("fakeTokenPlaceholder")
                            .withValue("rosnaljwmrdesiticsc")))
                        .withMetricName("oybfr")
                        .withMetricNamespace("iabzdcxljvduduha")
                        .withMetricValue("rpkrrqxywciyvedsvrlbujqjenrlpr")
                        .withUnit(MetricTransformationUnit.BITS))))
                .withPublicCloudConnectorsResourceId("dabxbsdvufxltivnlbpft")
                .withAwsAccountId("z")
                .withArn("cjjfhzeoyddkfmdmwsl")
                .withPublicCloudResourceName("ljjatut")
                .withAwsSourceSchema("tekgcey")
                .withAwsRegion("qjqubwwtlycfy")
                .withAwsTags(mapOf("key5547", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
