// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsConfigServiceConfigurationRecorderProperties;
import com.azure.resourcemanager.awsconnector.models.ConfigServiceConfigurationRecorderProperties;
import com.azure.resourcemanager.awsconnector.models.ExclusionByResourceTypes;
import com.azure.resourcemanager.awsconnector.models.RecordingFrequency;
import com.azure.resourcemanager.awsconnector.models.RecordingFrequencyEnumValue;
import com.azure.resourcemanager.awsconnector.models.RecordingGroup;
import com.azure.resourcemanager.awsconnector.models.RecordingMode;
import com.azure.resourcemanager.awsconnector.models.RecordingModeOverride;
import com.azure.resourcemanager.awsconnector.models.RecordingStrategy;
import com.azure.resourcemanager.awsconnector.models.RecordingStrategyType;
import com.azure.resourcemanager.awsconnector.models.RecordingStrategyTypeEnumValue;
import com.azure.resourcemanager.awsconnector.models.ResourceType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ConfigServiceConfigurationRecorders CreateOrReplace.
 */
public final class ConfigServiceConfigurationRecordersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * ConfigServiceConfigurationRecorders_CreateOrReplace.json
     */
    /**
     * Sample code: ConfigServiceConfigurationRecorders_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void configServiceConfigurationRecordersCreateOrReplace(
        com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.configServiceConfigurationRecorders()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("uhzzvapzjrmbzxfxdqyczgmcq")
            .withExistingResourceGroup("rgconfigServiceConfigurationRecorder")
            .withTags(mapOf("key1719", "fakeTokenPlaceholder"))
            .withProperties(new ConfigServiceConfigurationRecorderProperties()
                .withAwsProperties(new AwsConfigServiceConfigurationRecorderProperties().withName("umkcdjmciwgorjwxtm")
                    .withRecordingGroup(new RecordingGroup().withAllSupported(true)
                        .withExclusionByResourceTypes(new ExclusionByResourceTypes()
                            .withResourceTypes(Arrays.asList(ResourceType.AWS_ACM_CERTIFICATE)))
                        .withIncludeGlobalResourceTypes(true)
                        .withRecordingStrategy(new RecordingStrategy().withUseOnly(new RecordingStrategyTypeEnumValue()
                            .withValue(RecordingStrategyType.ALL_SUPPORTED_RESOURCE_TYPES)))
                        .withResourceTypes(Arrays.asList(ResourceType.AWS_ACM_CERTIFICATE)))
                    .withRecordingMode(new RecordingMode()
                        .withRecordingFrequency(
                            new RecordingFrequencyEnumValue().withValue(RecordingFrequency.CONTINUOUS))
                        .withRecordingModeOverrides(
                            Arrays.asList(new RecordingModeOverride().withDescription("fxclcxlsumaur")
                                .withRecordingFrequency(
                                    new RecordingFrequencyEnumValue().withValue(RecordingFrequency.CONTINUOUS))
                                .withResourceTypes(Arrays.asList(ResourceType.AWS_ACM_CERTIFICATE)))))
                    .withRoleArn("alfppyafyrtgacngfxckcioci"))
                .withPublicCloudConnectorsResourceId("ofuen")
                .withAwsAccountId("pxxfgnveimxacjnvjtionuq")
                .withArn("jdsihdzklcqjurvrxp")
                .withPublicCloudResourceName("sieljn")
                .withAwsSourceSchema("eolodykekuepfruwphifvo")
                .withAwsRegion("xvzbwkxfmww")
                .withAwsTags(mapOf("key7810", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
