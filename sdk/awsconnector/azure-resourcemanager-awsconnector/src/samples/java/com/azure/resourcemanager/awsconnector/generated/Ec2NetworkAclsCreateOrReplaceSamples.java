// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsEc2NetworkAclProperties;
import com.azure.resourcemanager.awsconnector.models.Ec2NetworkAclProperties;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated15;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Ec2NetworkAcls CreateOrReplace.
 */
public final class Ec2NetworkAclsCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * Ec2NetworkAcls_CreateOrReplace.json
     */
    /**
     * Sample code: Ec2NetworkAcls_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        ec2NetworkAclsCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.ec2NetworkAcls()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("fshtit")
            .withExistingResourceGroup("rgec2NetworkAcl")
            .withTags(mapOf("key7602", "fakeTokenPlaceholder"))
            .withProperties(
                new Ec2NetworkAclProperties()
                    .withAwsProperties(new AwsEc2NetworkAclProperties().withId("qgxcaonshnjzgtrwpbtgtnec")
                        .withTags(Arrays.asList(
                            new TagAutoGenerated15().withKey("fakeTokenPlaceholder").withValue("szjckvzlsvasj")))
                        .withVpcId("wifperjiuulltgxcljqwnaeyscd"))
                    .withPublicCloudConnectorsResourceId("thejbzeletryigazixejsz")
                    .withAwsAccountId("nwnjrjumgvvtfndyaxyiwbugmdk")
                    .withArn("mwwchyidvtcm")
                    .withPublicCloudResourceName("dniirwtrtuvjlcdcjq")
                    .withAwsSourceSchema("hqiutsyaxzitfwtekhw")
                    .withAwsRegion("zmntebskjciytwfcjyj")
                    .withAwsTags(mapOf("key8049", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
