// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AwsKmsKeyProperties;
import com.azure.resourcemanager.awsconnector.models.KeySpec;
import com.azure.resourcemanager.awsconnector.models.KeyUsage;
import com.azure.resourcemanager.awsconnector.models.KmsKeyProperties;
import com.azure.resourcemanager.awsconnector.models.Origin;
import com.azure.resourcemanager.awsconnector.models.TagAutoGenerated35;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for KmsKeys CreateOrReplace.
 */
public final class KmsKeysCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * KmsKeys_CreateOrReplace.json
     */
    /**
     * Sample code: KmsKeys_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void kmsKeysCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.kmsKeys()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("qozbasr")
            .withExistingResourceGroup("rgkmsKey")
            .withTags(mapOf("key3909", "fakeTokenPlaceholder"))
            .withProperties(new KmsKeyProperties()
                .withAwsProperties(new AwsKmsKeyProperties().withArn("qglsfyxssylnrh")
                    .withBypassPolicyLockoutSafetyCheck(true)
                    .withDescription("mjtmquqbhnvjw")
                    .withEnableKeyRotation(true)
                    .withEnabled(true)
                    .withKeyId("fakeTokenPlaceholder")
                    .withKeyPolicy(mapOf())
                    .withKeySpec(KeySpec.ECC_NIST_P256)
                    .withKeyUsage(KeyUsage.ENCRYPT_DECRYPT)
                    .withMultiRegion(true)
                    .withOrigin(Origin.AWS_KMS)
                    .withPendingWindowInDays(7)
                    .withRotationPeriodInDays(4)
                    .withTags(Arrays.asList(
                        new TagAutoGenerated35().withKey("fakeTokenPlaceholder").withValue("lcaeaqxughlzgzhbbi"))))
                .withPublicCloudConnectorsResourceId("tsbeayhnreovxnkbtbrvnuielziq")
                .withAwsAccountId("rvkcvpmljvwdryvsugsuc")
                .withArn("qszqxzva")
                .withPublicCloudResourceName("edkcxntzxplnpl")
                .withAwsSourceSchema("cvatoa")
                .withAwsRegion("hvyzzutginnqrhgkyyripyqhqkofm")
                .withAwsTags(mapOf("key8656", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
