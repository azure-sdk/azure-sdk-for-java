// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.generated;

import com.azure.resourcemanager.awsconnector.models.AccessAnalyzerProperties;
import com.azure.resourcemanager.awsconnector.models.ArchiveRule;
import com.azure.resourcemanager.awsconnector.models.AwsAccessAnalyzerProperties;
import com.azure.resourcemanager.awsconnector.models.Filter;
import com.azure.resourcemanager.awsconnector.models.Tag;
import com.azure.resourcemanager.awsconnector.models.UnusedAccessConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AccessAnalyzerAnalyzers CreateOrReplace.
 */
public final class AccessAnalyzerAnalyzersCreateOrReplaceSamples {
    /*
     * x-ms-original-file:
     * specification/awsconnector/resource-manager/Microsoft.AwsConnector/stable/2024-12-01/examples/
     * AccessAnalyzerAnalyzers_CreateOrReplace.json
     */
    /**
     * Sample code: AccessAnalyzerAnalyzers_CreateOrReplace.
     * 
     * @param manager Entry point to AwsconnectorManager.
     */
    public static void
        accessAnalyzerAnalyzersCreateOrReplace(com.azure.resourcemanager.awsconnector.AwsconnectorManager manager) {
        manager.accessAnalyzerAnalyzers()
            .define("Replace this value with a string matching RegExp ^(z=.{0,259}[^zs.]$)(z!.*[zzzzzzzz])")
            .withRegion("jpcbvhsspnqhnreartkjyr")
            .withExistingResourceGroup("rgaccessAnalyzerAnalyzer")
            .withTags(mapOf("key5531", "fakeTokenPlaceholder"))
            .withProperties(
                new AccessAnalyzerProperties()
                    .withAwsProperties(
                        new AwsAccessAnalyzerProperties()
                            .withAnalyzerConfiguration(new UnusedAccessConfiguration().withUnusedAccessAge(29))
                            .withAnalyzerName("owom")
                            .withArchiveRules(
                                Arrays.asList(new ArchiveRule()
                                    .withFilter(Arrays.asList(new Filter().withContains(Arrays.asList("hpzoliradchznu"))
                                        .withEq(Arrays.asList("vlrqwrfkkwxvyxmqpbmwkxig"))
                                        .withExists(true)
                                        .withNeq(Arrays.asList("ro"))
                                        .withProperty("pzndukmteempygtvmsrcrjulphe")))
                                    .withRuleName("hvfnklcbuefkibrtayx")))
                            .withArn("bmt")
                            .withTags(Arrays
                                .asList(new Tag().withKey("fakeTokenPlaceholder").withValue("mtcjrbabaynnrmqttjf")))
                            .withType("vswmvhmkyxepqkvvksbglssmrgg"))
                    .withPublicCloudConnectorsResourceId("qfefhuzrkvg")
                    .withAwsAccountId("pvsawejgihtmvcjqnob")
                    .withArn("dgzbebaorvepu")
                    .withPublicCloudResourceName("euuddejz")
                    .withAwsSourceSchema("ur")
                    .withAwsRegion("edosnsqdwcvgl")
                    .withAwsTags(mapOf("key746", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
