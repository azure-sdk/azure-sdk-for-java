// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SourceConfiguration.
 */
@Fluent
public final class SourceConfiguration implements JsonSerializable<SourceConfiguration> {
    /*
     * The name of the application associated with the configuration.
     */
    private String applicationName;

    /*
     * The name of the configuration template.
     */
    private String templateName;

    /**
     * Creates an instance of SourceConfiguration class.
     */
    public SourceConfiguration() {
    }

    /**
     * Get the applicationName property: The name of the application associated with the configuration.
     * 
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: The name of the application associated with the configuration.
     * 
     * @param applicationName the applicationName value to set.
     * @return the SourceConfiguration object itself.
     */
    public SourceConfiguration withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the templateName property: The name of the configuration template.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: The name of the configuration template.
     * 
     * @param templateName the templateName value to set.
     * @return the SourceConfiguration object itself.
     */
    public SourceConfiguration withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationName", this.applicationName);
        jsonWriter.writeStringField("templateName", this.templateName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SourceConfiguration.
     */
    public static SourceConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceConfiguration deserializedSourceConfiguration = new SourceConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationName".equals(fieldName)) {
                    deserializedSourceConfiguration.applicationName = reader.getString();
                } else if ("templateName".equals(fieldName)) {
                    deserializedSourceConfiguration.templateName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceConfiguration;
        });
    }
}
