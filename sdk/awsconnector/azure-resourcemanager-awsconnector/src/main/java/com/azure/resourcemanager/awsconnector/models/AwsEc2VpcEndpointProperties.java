// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of awsEc2VPCEndpoint.
 */
@Fluent
public final class AwsEc2VpcEndpointProperties implements JsonSerializable<AwsEc2VpcEndpointProperties> {
    /*
     * Property creationTimestamp
     */
    private String creationTimestamp;

    /*
     * Property dnsEntries
     */
    private List<String> dnsEntries;

    /*
     * Property id
     */
    private String id;

    /*
     * Property networkInterfaceIds
     */
    private List<String> networkInterfaceIds;

    /*
     * An endpoint policy, which controls access to the service from the VPC. The default endpoint policy allows full
     * access to the service. Endpoint policies are supported only for gateway and interface endpoints. For
     * CloudFormation templates in YAML, you can provide the policy in JSON or YAML format. CFNlong converts YAML
     * policies to JSON format before calling the API to create or modify the VPC endpoint.
     */
    private Map<String, Object> policyDocument;

    /*
     * Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a
     * record set for the default public DNS name for the service for the Region (for example,
     * ``kinesis.us-east-1.amazonaws.com``), which resolves to the private IP addresses of the endpoint network
     * interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead
     * of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted
     * zone, you must set the following VPC attributes to ``true``: ``enableDnsHostnames`` and ``enableDnsSupport``.
     * This property is supported only for interface endpoints. Default: ``false``
     */
    private Boolean privateDnsEnabled;

    /*
     * The IDs of the route tables. Routing is supported only for gateway endpoints.
     */
    private List<String> routeTableIds;

    /*
     * The IDs of the security groups to associate with the endpoint network interfaces. If this parameter is not
     * specified, we use the default security group for the VPC. Security groups are supported only for interface
     * endpoints.
     */
    private List<String> securityGroupIds;

    /*
     * The name of the endpoint service.
     */
    private String serviceName;

    /*
     * The IDs of the subnets in which to create endpoint network interfaces. You must specify this property for an
     * interface endpoint or a Gateway Load Balancer endpoint. You can't specify this property for a gateway endpoint.
     * For a Gateway Load Balancer endpoint, you can specify only one subnet.
     */
    private List<String> subnetIds;

    /*
     * The type of endpoint. Default: Gateway
     */
    private VpcEndpointType vpcEndpointType;

    /*
     * The ID of the VPC.
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2VpcEndpointProperties class.
     */
    public AwsEc2VpcEndpointProperties() {
    }

    /**
     * Get the creationTimestamp property: Property creationTimestamp.
     * 
     * @return the creationTimestamp value.
     */
    public String creationTimestamp() {
        return this.creationTimestamp;
    }

    /**
     * Set the creationTimestamp property: Property creationTimestamp.
     * 
     * @param creationTimestamp the creationTimestamp value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }

    /**
     * Get the dnsEntries property: Property dnsEntries.
     * 
     * @return the dnsEntries value.
     */
    public List<String> dnsEntries() {
        return this.dnsEntries;
    }

    /**
     * Set the dnsEntries property: Property dnsEntries.
     * 
     * @param dnsEntries the dnsEntries value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withDnsEntries(List<String> dnsEntries) {
        this.dnsEntries = dnsEntries;
        return this;
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the networkInterfaceIds property: Property networkInterfaceIds.
     * 
     * @return the networkInterfaceIds value.
     */
    public List<String> networkInterfaceIds() {
        return this.networkInterfaceIds;
    }

    /**
     * Set the networkInterfaceIds property: Property networkInterfaceIds.
     * 
     * @param networkInterfaceIds the networkInterfaceIds value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withNetworkInterfaceIds(List<String> networkInterfaceIds) {
        this.networkInterfaceIds = networkInterfaceIds;
        return this;
    }

    /**
     * Get the policyDocument property: An endpoint policy, which controls access to the service from the VPC. The
     * default endpoint policy allows full access to the service. Endpoint policies are supported only for gateway and
     * interface endpoints. For CloudFormation templates in YAML, you can provide the policy in JSON or YAML format.
     * CFNlong converts YAML policies to JSON format before calling the API to create or modify the VPC endpoint.
     * 
     * @return the policyDocument value.
     */
    public Map<String, Object> policyDocument() {
        return this.policyDocument;
    }

    /**
     * Set the policyDocument property: An endpoint policy, which controls access to the service from the VPC. The
     * default endpoint policy allows full access to the service. Endpoint policies are supported only for gateway and
     * interface endpoints. For CloudFormation templates in YAML, you can provide the policy in JSON or YAML format.
     * CFNlong converts YAML policies to JSON format before calling the API to create or modify the VPC endpoint.
     * 
     * @param policyDocument the policyDocument value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withPolicyDocument(Map<String, Object> policyDocument) {
        this.policyDocument = policyDocument;
        return this;
    }

    /**
     * Get the privateDnsEnabled property: Indicate whether to associate a private hosted zone with the specified VPC.
     * The private hosted zone contains a record set for the default public DNS name for the service for the Region (for
     * example, ``kinesis.us-east-1.amazonaws.com``), which resolves to the private IP addresses of the endpoint network
     * interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead
     * of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted
     * zone, you must set the following VPC attributes to ``true``: ``enableDnsHostnames`` and ``enableDnsSupport``.
     * This property is supported only for interface endpoints. Default: ``false``.
     * 
     * @return the privateDnsEnabled value.
     */
    public Boolean privateDnsEnabled() {
        return this.privateDnsEnabled;
    }

    /**
     * Set the privateDnsEnabled property: Indicate whether to associate a private hosted zone with the specified VPC.
     * The private hosted zone contains a record set for the default public DNS name for the service for the Region (for
     * example, ``kinesis.us-east-1.amazonaws.com``), which resolves to the private IP addresses of the endpoint network
     * interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead
     * of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted
     * zone, you must set the following VPC attributes to ``true``: ``enableDnsHostnames`` and ``enableDnsSupport``.
     * This property is supported only for interface endpoints. Default: ``false``.
     * 
     * @param privateDnsEnabled the privateDnsEnabled value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withPrivateDnsEnabled(Boolean privateDnsEnabled) {
        this.privateDnsEnabled = privateDnsEnabled;
        return this;
    }

    /**
     * Get the routeTableIds property: The IDs of the route tables. Routing is supported only for gateway endpoints.
     * 
     * @return the routeTableIds value.
     */
    public List<String> routeTableIds() {
        return this.routeTableIds;
    }

    /**
     * Set the routeTableIds property: The IDs of the route tables. Routing is supported only for gateway endpoints.
     * 
     * @param routeTableIds the routeTableIds value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withRouteTableIds(List<String> routeTableIds) {
        this.routeTableIds = routeTableIds;
        return this;
    }

    /**
     * Get the securityGroupIds property: The IDs of the security groups to associate with the endpoint network
     * interfaces. If this parameter is not specified, we use the default security group for the VPC. Security groups
     * are supported only for interface endpoints.
     * 
     * @return the securityGroupIds value.
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }

    /**
     * Set the securityGroupIds property: The IDs of the security groups to associate with the endpoint network
     * interfaces. If this parameter is not specified, we use the default security group for the VPC. Security groups
     * are supported only for interface endpoints.
     * 
     * @param securityGroupIds the securityGroupIds value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
        return this;
    }

    /**
     * Get the serviceName property: The name of the endpoint service.
     * 
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: The name of the endpoint service.
     * 
     * @param serviceName the serviceName value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the subnetIds property: The IDs of the subnets in which to create endpoint network interfaces. You must
     * specify this property for an interface endpoint or a Gateway Load Balancer endpoint. You can't specify this
     * property for a gateway endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
     * 
     * @return the subnetIds value.
     */
    public List<String> subnetIds() {
        return this.subnetIds;
    }

    /**
     * Set the subnetIds property: The IDs of the subnets in which to create endpoint network interfaces. You must
     * specify this property for an interface endpoint or a Gateway Load Balancer endpoint. You can't specify this
     * property for a gateway endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
     * 
     * @param subnetIds the subnetIds value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withSubnetIds(List<String> subnetIds) {
        this.subnetIds = subnetIds;
        return this;
    }

    /**
     * Get the vpcEndpointType property: The type of endpoint. Default: Gateway.
     * 
     * @return the vpcEndpointType value.
     */
    public VpcEndpointType vpcEndpointType() {
        return this.vpcEndpointType;
    }

    /**
     * Set the vpcEndpointType property: The type of endpoint. Default: Gateway.
     * 
     * @param vpcEndpointType the vpcEndpointType value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withVpcEndpointType(VpcEndpointType vpcEndpointType) {
        this.vpcEndpointType = vpcEndpointType;
        return this;
    }

    /**
     * Get the vpcId property: The ID of the VPC.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: The ID of the VPC.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2VpcEndpointProperties object itself.
     */
    public AwsEc2VpcEndpointProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("creationTimestamp", this.creationTimestamp);
        jsonWriter.writeArrayField("dnsEntries", this.dnsEntries, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("networkInterfaceIds", this.networkInterfaceIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("policyDocument", this.policyDocument,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeBooleanField("privateDnsEnabled", this.privateDnsEnabled);
        jsonWriter.writeArrayField("routeTableIds", this.routeTableIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("securityGroupIds", this.securityGroupIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("serviceName", this.serviceName);
        jsonWriter.writeArrayField("subnetIds", this.subnetIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vpcEndpointType",
            this.vpcEndpointType == null ? null : this.vpcEndpointType.toString());
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2VpcEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2VpcEndpointProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2VpcEndpointProperties.
     */
    public static AwsEc2VpcEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2VpcEndpointProperties deserializedAwsEc2VpcEndpointProperties = new AwsEc2VpcEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("creationTimestamp".equals(fieldName)) {
                    deserializedAwsEc2VpcEndpointProperties.creationTimestamp = reader.getString();
                } else if ("dnsEntries".equals(fieldName)) {
                    List<String> dnsEntries = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcEndpointProperties.dnsEntries = dnsEntries;
                } else if ("id".equals(fieldName)) {
                    deserializedAwsEc2VpcEndpointProperties.id = reader.getString();
                } else if ("networkInterfaceIds".equals(fieldName)) {
                    List<String> networkInterfaceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcEndpointProperties.networkInterfaceIds = networkInterfaceIds;
                } else if ("policyDocument".equals(fieldName)) {
                    Map<String, Object> policyDocument = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAwsEc2VpcEndpointProperties.policyDocument = policyDocument;
                } else if ("privateDnsEnabled".equals(fieldName)) {
                    deserializedAwsEc2VpcEndpointProperties.privateDnsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("routeTableIds".equals(fieldName)) {
                    List<String> routeTableIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcEndpointProperties.routeTableIds = routeTableIds;
                } else if ("securityGroupIds".equals(fieldName)) {
                    List<String> securityGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcEndpointProperties.securityGroupIds = securityGroupIds;
                } else if ("serviceName".equals(fieldName)) {
                    deserializedAwsEc2VpcEndpointProperties.serviceName = reader.getString();
                } else if ("subnetIds".equals(fieldName)) {
                    List<String> subnetIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcEndpointProperties.subnetIds = subnetIds;
                } else if ("vpcEndpointType".equals(fieldName)) {
                    deserializedAwsEc2VpcEndpointProperties.vpcEndpointType
                        = VpcEndpointType.fromString(reader.getString());
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2VpcEndpointProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2VpcEndpointProperties;
        });
    }
}
