// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of StatefulRule.
 */
@Fluent
public final class StatefulRule implements JsonSerializable<StatefulRule> {
    /*
     * Property action
     */
    private StatefulRuleAction action;

    /*
     * Property header
     */
    private Header headerProperty;

    /*
     * Property ruleOptions
     */
    private List<RuleOption> ruleOptions;

    /**
     * Creates an instance of StatefulRule class.
     */
    public StatefulRule() {
    }

    /**
     * Get the action property: Property action.
     * 
     * @return the action value.
     */
    public StatefulRuleAction action() {
        return this.action;
    }

    /**
     * Set the action property: Property action.
     * 
     * @param action the action value to set.
     * @return the StatefulRule object itself.
     */
    public StatefulRule withAction(StatefulRuleAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the headerProperty property: Property header.
     * 
     * @return the headerProperty value.
     */
    public Header headerProperty() {
        return this.headerProperty;
    }

    /**
     * Set the headerProperty property: Property header.
     * 
     * @param headerProperty the headerProperty value to set.
     * @return the StatefulRule object itself.
     */
    public StatefulRule withHeaderProperty(Header headerProperty) {
        this.headerProperty = headerProperty;
        return this;
    }

    /**
     * Get the ruleOptions property: Property ruleOptions.
     * 
     * @return the ruleOptions value.
     */
    public List<RuleOption> ruleOptions() {
        return this.ruleOptions;
    }

    /**
     * Set the ruleOptions property: Property ruleOptions.
     * 
     * @param ruleOptions the ruleOptions value to set.
     * @return the StatefulRule object itself.
     */
    public StatefulRule withRuleOptions(List<RuleOption> ruleOptions) {
        this.ruleOptions = ruleOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (headerProperty() != null) {
            headerProperty().validate();
        }
        if (ruleOptions() != null) {
            ruleOptions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeJsonField("header", this.headerProperty);
        jsonWriter.writeArrayField("ruleOptions", this.ruleOptions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatefulRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatefulRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatefulRule.
     */
    public static StatefulRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatefulRule deserializedStatefulRule = new StatefulRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedStatefulRule.action = StatefulRuleAction.fromString(reader.getString());
                } else if ("header".equals(fieldName)) {
                    deserializedStatefulRule.headerProperty = Header.fromJson(reader);
                } else if ("ruleOptions".equals(fieldName)) {
                    List<RuleOption> ruleOptions = reader.readArray(reader1 -> RuleOption.fromJson(reader1));
                    deserializedStatefulRule.ruleOptions = ruleOptions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatefulRule;
        });
    }
}
