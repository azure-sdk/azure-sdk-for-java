// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ProductCode.
 */
@Fluent
public final class ProductCode implements JsonSerializable<ProductCode> {
    /*
     * <p>The product code.</p>
     */
    private String productCodeId;

    /*
     * <p>The type of product code.</p>
     */
    private ProductCodeValuesEnumValue productCodeType;

    /**
     * Creates an instance of ProductCode class.
     */
    public ProductCode() {
    }

    /**
     * Get the productCodeId property: &lt;p&gt;The product code.&lt;/p&gt;.
     * 
     * @return the productCodeId value.
     */
    public String productCodeId() {
        return this.productCodeId;
    }

    /**
     * Set the productCodeId property: &lt;p&gt;The product code.&lt;/p&gt;.
     * 
     * @param productCodeId the productCodeId value to set.
     * @return the ProductCode object itself.
     */
    public ProductCode withProductCodeId(String productCodeId) {
        this.productCodeId = productCodeId;
        return this;
    }

    /**
     * Get the productCodeType property: &lt;p&gt;The type of product code.&lt;/p&gt;.
     * 
     * @return the productCodeType value.
     */
    public ProductCodeValuesEnumValue productCodeType() {
        return this.productCodeType;
    }

    /**
     * Set the productCodeType property: &lt;p&gt;The type of product code.&lt;/p&gt;.
     * 
     * @param productCodeType the productCodeType value to set.
     * @return the ProductCode object itself.
     */
    public ProductCode withProductCodeType(ProductCodeValuesEnumValue productCodeType) {
        this.productCodeType = productCodeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productCodeType() != null) {
            productCodeType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("productCodeId", this.productCodeId);
        jsonWriter.writeJsonField("productCodeType", this.productCodeType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProductCode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProductCode if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProductCode.
     */
    public static ProductCode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProductCode deserializedProductCode = new ProductCode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("productCodeId".equals(fieldName)) {
                    deserializedProductCode.productCodeId = reader.getString();
                } else if ("productCodeType".equals(fieldName)) {
                    deserializedProductCode.productCodeType = ProductCodeValuesEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProductCode;
        });
    }
}
