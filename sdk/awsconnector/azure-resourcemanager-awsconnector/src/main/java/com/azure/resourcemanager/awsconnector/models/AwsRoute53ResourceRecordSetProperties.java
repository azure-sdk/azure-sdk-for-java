// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsRoute53ResourceRecordSet.
 */
@Fluent
public final class AwsRoute53ResourceRecordSetProperties
    implements JsonSerializable<AwsRoute53ResourceRecordSetProperties> {
    /*
     * <p> <i>Alias resource record sets only:</i> Information about the Amazon Web Services resource, such as a
     * CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to. </p> <p>If you're creating
     * resource records sets for a private hosted zone, note the following:</p> <ul> <li> <p>You can't create an alias
     * resource record set in a private hosted zone to route traffic to a CloudFront distribution.</p> </li> <li> <p>For
     * information about creating failover resource record sets in a private hosted zone, see <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'>
     * Configuring Failover in a Private Hosted Zone</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> </ul>
     */
    private AliasTarget aliasTarget;

    /*
     * Property cidrRoutingConfig
     */
    private CidrRoutingConfig cidrRoutingConfig;

    /*
     * <p> <i>Failover resource record sets only:</i> To configure failover, you add the <code>Failover</code> element
     * to two resource record sets. For one resource record set, you specify <code>PRIMARY</code> as the value for
     * <code>Failover</code>; for the other resource record set, you specify <code>SECONDARY</code>. In addition, you
     * include the <code>HealthCheckId</code> element and specify the health check that you want Amazon Route 53 to
     * perform for each resource record set.</p> <p>Except where noted, the following failover behaviors assume that you
     * have included the <code>HealthCheckId</code> element in both resource record sets:</p> <ul> <li> <p>When the
     * primary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the
     * primary resource record set regardless of the health of the secondary resource record set.</p> </li> <li> <p>When
     * the primary resource record set is unhealthy and the secondary resource record set is healthy, Route 53 responds
     * to DNS queries with the applicable value from the secondary resource record set.</p> </li> <li> <p>When the
     * secondary resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the
     * primary resource record set regardless of the health of the primary resource record set.</p> </li> <li> <p>If you
     * omit the <code>HealthCheckId</code> element for the secondary resource record set, and if the primary resource
     * record set is unhealthy, Route 53 always responds to DNS queries with the applicable value from the secondary
     * resource record set. This is true regardless of the health of the associated endpoint.</p> </li> </ul> <p>You
     * can't create non-failover resource record sets that have the same values for the <code>Name</code> and
     * <code>Type</code> elements as failover resource record sets.</p> <p>For failover alias resource record sets, you
     * must also include the <code>EvaluateTargetHealth</code> element and set the value to true.</p> <p>For more
     * information about configuring failover for Route 53, see the following topics in the <i>Amazon Route 53 Developer
     * Guide</i>: </p> <ul> <li> <p> <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html'>Route 53 Health Checks and DNS
     * Failover</a> </p> </li> <li> <p> <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'>
     * Configuring Failover in a Private Hosted Zone</a> </p> </li> </ul>
     */
    private ResourceRecordSetFailoverEnumValue failover;

    /*
     * <p> <i>Geolocation resource record sets only:</i> A complex type that lets you control how Amazon Route 53
     * responds to DNS queries based on the geographic origin of the query. For example, if you want all queries from
     * Africa to be routed to a web server with an IP address of <code>192.0.2.111</code>, create a resource record set
     * with a <code>Type</code> of <code>A</code> and a <code>ContinentCode</code> of <code>AF</code>.</p> <p>If you
     * create separate resource record sets for overlapping geographic regions (for example, one resource record set for
     * a continent and one for a country on the same continent), priority goes to the smallest geographic region. This
     * allows you to route most queries for a continent to one resource and to route queries for a country on that
     * continent to a different resource.</p> <p>You can't create two geolocation resource record sets that specify the
     * same geographic location.</p> <p>The value <code>*</code> in the <code>CountryCode</code> element matches all
     * geographic locations that aren't specified in other geolocation resource record sets that have the same values
     * for the <code>Name</code> and <code>Type</code> elements.</p> <important> <p>Geolocation works by mapping IP
     * addresses to locations. However, some IP addresses aren't mapped to geographic locations, so even if you create
     * geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from
     * locations that it can't identify. We recommend that you create a resource record set for which the value of
     * <code>CountryCode</code> is <code>*</code>. Two groups of queries are routed to the resource that you specify in
     * this record: queries that come from locations for which you haven't created geolocation resource record sets and
     * queries from IP addresses that aren't mapped to a location. If you don't create a <code>*</code> resource record
     * set, Route 53 returns a 'no answer' response for queries from those locations.</p> </important> <p>You can't
     * create non-geolocation resource record sets that have the same values for the <code>Name</code> and
     * <code>Type</code> elements as geolocation resource record sets.</p>
     */
    private GeoLocation geoLocation;

    /*
     * <p> <i> GeoproximityLocation resource record sets only:</i> A complex type that lets you control how RouteÂ 53
     * responds to DNS queries based on the geographic origin of the query and your resources. </p>
     */
    private GeoProximityLocation geoProximityLocation;

    /*
     * <p>If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status
     * of a health check is healthy, include the <code>HealthCheckId</code> element and specify the ID of the applicable
     * health check.</p> <p>Route 53 determines whether a resource record set is healthy based on one of the
     * following:</p> <ul> <li> <p>By periodically sending a request to the endpoint that is specified in the health
     * check</p> </li> <li> <p>By aggregating the status of a specified group of health checks (calculated health
     * checks)</p> </li> <li> <p>By determining the current state of a CloudWatch alarm (CloudWatch metric health
     * checks)</p> </li> </ul> <important> <p>Route 53 doesn't check the health of the endpoint that is specified in the
     * resource record set, for example, the endpoint specified by the IP address in the <code>Value</code> element.
     * When you add a <code>HealthCheckId</code> element to a resource record set, Route 53 checks the health of the
     * endpoint that you specified in the health check. </p> </important> <p>For more information, see the following
     * topics in the <i>Amazon Route 53 Developer Guide</i>:</p> <ul> <li> <p> <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html
     * '>How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a> </p> </li> <li> <p> <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html'>Route 53 Health Checks and DNS
     * Failover</a> </p> </li> <li> <p> <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'>
     * Configuring Failover in a Private Hosted Zone</a> </p> </li> </ul> <p> <b>When to Specify HealthCheckId</b> </p>
     * <p>Specifying a value for <code>HealthCheckId</code> is useful only when Route 53 is choosing between two or more
     * resource record sets to respond to a DNS query, and you want Route 53 to base the choice in part on the status of
     * a health check. Configuring health checks makes sense only in the following configurations:</p> <ul> <li> <p>
     * <b>Non-alias resource record sets</b>: You're checking the health of a group of non-alias resource record sets
     * that have the same routing policy, name, and type (such as multiple weighted records named www.example.com with a
     * type of A) and you specify health check IDs for all the resource record sets. </p> <p>If the health check status
     * for a resource record set is healthy, Route 53 includes the record among the records that it responds to DNS
     * queries with.</p> <p>If the health check status for a resource record set is unhealthy, Route 53 stops responding
     * to DNS queries using the value for that resource record set.</p> <p>If the health check status for all resource
     * record sets in the group is unhealthy, Route 53 considers all resource record sets in the group healthy and
     * responds to DNS queries accordingly. </p> </li> <li> <p> <b>Alias resource record sets</b>: You specify the
     * following settings:</p> <ul> <li> <p>You set <code>EvaluateTargetHealth</code> to true for an alias resource
     * record set in a group of resource record sets that have the same routing policy, name, and type (such as multiple
     * weighted records named www.example.com with a type of A). </p> </li> <li> <p>You configure the alias resource
     * record set to route traffic to a non-alias resource record set in the same hosted zone.</p> </li> <li> <p>You
     * specify a health check ID for the non-alias resource record set. </p> </li> </ul> <p>If the health check status
     * is healthy, Route 53 considers the alias resource record set to be healthy and includes the alias record among
     * the records that it responds to DNS queries with.</p> <p>If the health check status is unhealthy, Route 53 stops
     * responding to DNS queries using the alias resource record set.</p> <note> <p>The alias resource record set can
     * also route traffic to a <i>group</i> of non-alias resource record sets that have the same routing policy, name,
     * and type. In that configuration, associate health checks with all of the resource record sets in the group of
     * non-alias resource record sets.</p> </note> </li> </ul> <p> <b>Geolocation Routing</b> </p> <p>For geolocation
     * resource record sets, if an endpoint is unhealthy, Route 53 looks for a resource record set for the larger,
     * associated geographic region. For example, suppose you have resource record sets for a state in the United
     * States, for the entire United States, for North America, and a resource record set that has <code>*</code> for
     * <code>CountryCode</code> is <code>*</code>, which applies to all locations. If the endpoint for the state
     * resource record set is unhealthy, Route 53 checks for healthy resource record sets in the following order until
     * it finds a resource record set for which the endpoint is healthy:</p> <ul> <li> <p>The United States</p> </li>
     * <li> <p>North America</p> </li> <li> <p>The default resource record set</p> </li> </ul> <p> <b>Specifying the
     * Health Check Endpoint by Domain Name</b> </p> <p>If your health checks specify the endpoint only by domain name,
     * we recommend that you create a separate health check for each endpoint. For example, create a health check for
     * each <code>HTTP</code> server that is serving content for <code>www.example.com</code>. For the value of
     * <code>FullyQualifiedDomainName</code>, specify the domain name of the server (such as
     * <code>us-east-2-www.example.com</code>), not the name of the resource record sets
     * (<code>www.example.com</code>).</p> <important> <p>Health check results will be unpredictable if you do the
     * following:</p> <ul> <li> <p>Create a health check that has the same value for
     * <code>FullyQualifiedDomainName</code> as the name of a resource record set.</p> </li> <li> <p>Associate that
     * health check with the resource record set.</p> </li> </ul> </important>
     */
    private String healthCheckId;

    /*
     * <p> <i>Multivalue answer resource record sets only</i>: To route traffic approximately randomly to multiple
     * resources, such as web servers, create one multivalue answer record for each resource and specify
     * <code>true</code> for <code>MultiValueAnswer</code>. Note the following:</p> <ul> <li> <p>If you associate a
     * health check with a multivalue answer resource record set, Amazon Route 53 responds to DNS queries with the
     * corresponding IP address only when the health check is healthy.</p> </li> <li> <p>If you don't associate a health
     * check with a multivalue answer record, Route 53 always considers the record to be healthy.</p> </li> <li>
     * <p>Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy records,
     * Route 53 responds to all DNS queries with all the healthy records.</p> </li> <li> <p>If you have more than eight
     * healthy records, Route 53 responds to different DNS resolvers with different combinations of healthy records.</p>
     * </li> <li> <p>When all records are unhealthy, Route 53 responds to DNS queries with up to eight unhealthy
     * records.</p> </li> <li> <p>If a resource becomes unavailable after a resolver caches a response, client software
     * typically tries another of the IP addresses in the response.</p> </li> </ul> <p>You can't create multivalue
     * answer alias records.</p>
     */
    private Boolean multiValueAnswer;

    /*
     * <p>For <code>ChangeResourceRecordSets</code> requests, the name of the record that you want to create, update, or
     * delete. For <code>ListResourceRecordSets</code> responses, the name of a record in the specified hosted zone.</p>
     * <p> <b>ChangeResourceRecordSets Only</b> </p> <p>Enter a fully qualified domain name, for example,
     * <code>www.example.com</code>. You can optionally include a trailing dot. If you omit the trailing dot, Amazon
     * Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53 treats
     * <code>www.example.com</code> (without a trailing dot) and <code>www.example.com.</code> (with a trailing dot) as
     * identical.</p> <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>,
     * and <code>-</code> (hyphen) and how to specify internationalized domain names, see <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html'>DNS Domain Name Format</a>
     * in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>You can use the asterisk (*) wildcard to replace the
     * leftmost label in a domain name, for example, <code>*.example.com</code>. Note the following:</p> <ul> <li>
     * <p>The * must replace the entire label. For example, you can't specify <code>*prod.example.com</code> or
     * <code>prod*.example.com</code>.</p> </li> <li> <p>The * can't replace any of the middle labels, for example,
     * marketing.*.example.com.</p> </li> <li> <p>If you include * in any position other than the leftmost label in a
     * domain name, DNS treats it as an * character (ASCII 42), not as a wildcard.</p> <important> <p>You can't use the
     * * wildcard for resource records sets that have a type of NS.</p> </important> </li> </ul>
     */
    private String name;

    /*
     * <p> <i>Latency-based resource record sets only:</i> The Amazon EC2 Region where you created the resource that
     * this resource record set refers to. The resource typically is an Amazon Web Services resource, such as an EC2
     * instance or an ELB load balancer, and is referred to by an IP address or a DNS domain name, depending on the
     * record type.</p> <p>When Amazon Route 53 receives a DNS query for a domain name and type for which you have
     * created latency resource record sets, Route 53 selects the latency resource record set that has the lowest
     * latency between the end user and the associated Amazon EC2 Region. Route 53 then returns the value that is
     * associated with the selected resource record set.</p> <p>Note the following:</p> <ul> <li> <p>You can only
     * specify one <code>ResourceRecord</code> per latency resource record set.</p> </li> <li> <p>You can only create
     * one latency resource record set for each Amazon EC2 Region.</p> </li> <li> <p>You aren't required to create
     * latency resource record sets for all Amazon EC2 Regions. Route 53 will choose the region with the best latency
     * from among the regions that you create latency resource record sets for.</p> </li> <li> <p>You can't create
     * non-latency resource record sets that have the same values for the <code>Name</code> and <code>Type</code>
     * elements as latency resource record sets.</p> </li> </ul>
     */
    private ResourceRecordSetRegionEnumValue region;

    /*
     * <p>Information about the resource records to act upon.</p> <note> <p>If you're creating an alias resource record
     * set, omit <code>ResourceRecords</code>.</p> </note>
     */
    private List<ResourceRecord> resourceRecords;

    /*
     * <p> <i>Resource record sets that have a routing policy other than simple:</i> An identifier that differentiates
     * among multiple resource record sets that have the same combination of name and type, such as multiple weighted
     * resource record sets named acme.example.com that have a type of A. In a group of resource record sets that have
     * the same name and type, the value of <code>SetIdentifier</code> must be unique for each resource record set. </p>
     * <p>For information about routing policies, see <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html'>Choosing a Routing
     * Policy</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
     */
    private String setIdentifier;

    /*
     * <p>The resource record cache time to live (TTL), in seconds. Note the following:</p> <ul> <li> <p>If you're
     * creating or updating an alias resource record set, omit <code>TTL</code>. Amazon Route 53 uses the value of
     * <code>TTL</code> for the alias target. </p> </li> <li> <p>If you're associating this resource record set with a
     * health check (if you're adding a <code>HealthCheckId</code> element), we recommend that you specify a
     * <code>TTL</code> of 60 seconds or less so clients respond quickly to changes in health status.</p> </li> <li>
     * <p>All of the resource record sets in a group of weighted resource record sets must have the same value for
     * <code>TTL</code>.</p> </li> <li> <p>If a group of weighted resource record sets includes one or more weighted
     * alias resource record sets for which the alias target is an ELB load balancer, we recommend that you specify a
     * <code>TTL</code> of 60 seconds for all of the non-alias weighted resource record sets that have the same name and
     * type. Values other than 60 seconds (the TTL for load balancers) will change the effect of the values that you
     * specify for <code>Weight</code>.</p> </li> </ul>
     */
    private Long ttl;

    /*
     * <p>When you create a traffic policy instance, Amazon Route 53 automatically creates a resource record set.
     * <code>TrafficPolicyInstanceId</code> is the ID of the traffic policy instance that Route 53 created this resource
     * record set for.</p> <important> <p>To delete the resource record set that is associated with a traffic policy
     * instance, use <code>DeleteTrafficPolicyInstance</code>. Route 53 will delete the resource record set
     * automatically. If you delete the resource record set by using <code>ChangeResourceRecordSets</code>, Route 53
     * doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though
     * it's no longer in use. </p> </important>
     */
    private String trafficPolicyInstanceId;

    /*
     * <p>The DNS record type. For information about different record types and how data is encoded for them, see <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html'>Supported DNS Resource
     * Record Types</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Valid values for basic resource record
     * sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> | <code>DS</code>
     * |<code>MX</code> | <code>NAPTR</code> | <code>NS</code> | <code>PTR</code> | <code>SOA</code> | <code>SPF</code>
     * | <code>SRV</code> | <code>TXT</code> </p> <p>Values for weighted, latency, geolocation, and failover resource
     * record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> | <code>MX</code> |
     * <code>NAPTR</code> | <code>PTR</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>. When creating a
     * group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the
     * resource record sets in the group.</p> <p>Valid values for multivalue answer resource record sets: <code>A</code>
     * | <code>AAAA</code> | <code>MX</code> | <code>NAPTR</code> | <code>PTR</code> | <code>SPF</code> |
     * <code>SRV</code> | <code>TXT</code> </p> <note> <p>SPF records were formerly used to verify the identity of the
     * sender of email messages. However, we no longer recommend that you create resource record sets for which the
     * value of <code>Type</code> is <code>SPF</code>. RFC 7208, <i>Sender Policy Framework (SPF) for Authorizing Use of
     * Domains in Email, Version 1</i>, has been updated to say, '...[I]ts existence and mechanism defined in [RFC4408]
     * have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1;
     * implementations are not to use it.' In RFC 7208, see section 14.1, <a
     * href='http://tools.ietf.org/html/rfc7208#section-14.1'>The SPF DNS Record Type</a>.</p> </note> <p>Values for
     * alias resource record sets:</p> <ul> <li> <p> <b>Amazon API Gateway custom regional APIs and edge-optimized
     * APIs:</b> <code>A</code> </p> </li> <li> <p> <b>CloudFront distributions:</b> <code>A</code> </p> <p>If IPv6 is
     * enabled for the distribution, create two resource record sets to route traffic to your distribution, one with a
     * value of <code>A</code> and one with a value of <code>AAAA</code>. </p> </li> <li> <p> <b>Amazon API Gateway
     * environment that has a regionalized subdomain</b>: <code>A</code> </p> </li> <li> <p> <b>ELB load balancers:</b>
     * <code>A</code> | <code>AAAA</code> </p> </li> <li> <p> <b>Amazon S3 buckets:</b> <code>A</code> </p> </li> <li>
     * <p> <b>Amazon Virtual Private Cloud interface VPC endpoints</b> <code>A</code> </p> </li> <li> <p> <b>Another
     * resource record set in this hosted zone:</b> Specify the type of the resource record set that you're creating the
     * alias for. All values are supported except <code>NS</code> and <code>SOA</code>.</p> <note> <p>If you're creating
     * an alias record that has the same name as the hosted zone (known as the zone apex), you can't route traffic to a
     * record for which the value of <code>Type</code> is <code>CNAME</code>. This is because the alias record must have
     * the same type as the record you're routing traffic to, and creating a CNAME record for the zone apex isn't
     * supported even for an alias record.</p> </note> </li> </ul>
     */
    private RRTypeEnumValue type;

    /*
     * <p> <i>Weighted resource record sets only:</i> Among resource record sets that have the same combination of DNS
     * name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the
     * current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have
     * the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's
     * weight to the total. Note the following:</p> <ul> <li> <p>You must specify a value for the <code>Weight</code>
     * element for every weighted resource record set.</p> </li> <li> <p>You can only specify one
     * <code>ResourceRecord</code> per weighted resource record set.</p> </li> <li> <p>You can't create latency,
     * failover, or geolocation resource record sets that have the same values for the <code>Name</code> and
     * <code>Type</code> elements as weighted resource record sets.</p> </li> <li> <p>You can create a maximum of 100
     * weighted resource record sets that have the same values for the <code>Name</code> and <code>Type</code>
     * elements.</p> </li> <li> <p>For weighted (but not weighted alias) resource record sets, if you set
     * <code>Weight</code> to <code>0</code> for a resource record set, Route 53 never responds to queries with the
     * applicable value for that resource record set. However, if you set <code>Weight</code> to <code>0</code> for all
     * resource record sets that have the same combination of DNS name and type, traffic is routed to all resources with
     * equal probability.</p> <p>The effect of setting <code>Weight</code> to <code>0</code> is different when you
     * associate health checks with weighted resource record sets. For more information, see <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html'>Options
     * for Configuring Route 53 Active-Active and Active-Passive Failover</a> in the <i>Amazon Route 53 Developer
     * Guide</i>.</p> </li> </ul>
     */
    private Long weight;

    /**
     * Creates an instance of AwsRoute53ResourceRecordSetProperties class.
     */
    public AwsRoute53ResourceRecordSetProperties() {
    }

    /**
     * Get the aliasTarget property: &lt;p&gt; &lt;i&gt;Alias resource record sets only:&lt;/i&gt; Information about the
     * Amazon Web Services resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route
     * traffic to. &lt;/p&gt; &lt;p&gt;If you're creating resource records sets for a private hosted zone, note the
     * following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can't create an alias resource record set in a private
     * hosted zone to route traffic to a CloudFront distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For
     * information about creating failover resource record sets in a private hosted zone, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'&gt;Configuring
     * Failover in a Private Hosted Zone&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the aliasTarget value.
     */
    public AliasTarget aliasTarget() {
        return this.aliasTarget;
    }

    /**
     * Set the aliasTarget property: &lt;p&gt; &lt;i&gt;Alias resource record sets only:&lt;/i&gt; Information about the
     * Amazon Web Services resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route
     * traffic to. &lt;/p&gt; &lt;p&gt;If you're creating resource records sets for a private hosted zone, note the
     * following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can't create an alias resource record set in a private
     * hosted zone to route traffic to a CloudFront distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For
     * information about creating failover resource record sets in a private hosted zone, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'&gt;Configuring
     * Failover in a Private Hosted Zone&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param aliasTarget the aliasTarget value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withAliasTarget(AliasTarget aliasTarget) {
        this.aliasTarget = aliasTarget;
        return this;
    }

    /**
     * Get the cidrRoutingConfig property: Property cidrRoutingConfig.
     * 
     * @return the cidrRoutingConfig value.
     */
    public CidrRoutingConfig cidrRoutingConfig() {
        return this.cidrRoutingConfig;
    }

    /**
     * Set the cidrRoutingConfig property: Property cidrRoutingConfig.
     * 
     * @param cidrRoutingConfig the cidrRoutingConfig value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withCidrRoutingConfig(CidrRoutingConfig cidrRoutingConfig) {
        this.cidrRoutingConfig = cidrRoutingConfig;
        return this;
    }

    /**
     * Get the failover property: &lt;p&gt; &lt;i&gt;Failover resource record sets only:&lt;/i&gt; To configure
     * failover, you add the &lt;code&gt;Failover&lt;/code&gt; element to two resource record sets. For one resource
     * record set, you specify &lt;code&gt;PRIMARY&lt;/code&gt; as the value for &lt;code&gt;Failover&lt;/code&gt;; for
     * the other resource record set, you specify &lt;code&gt;SECONDARY&lt;/code&gt;. In addition, you include the
     * &lt;code&gt;HealthCheckId&lt;/code&gt; element and specify the health check that you want Amazon Route 53 to
     * perform for each resource record set.&lt;/p&gt; &lt;p&gt;Except where noted, the following failover behaviors
     * assume that you have included the &lt;code&gt;HealthCheckId&lt;/code&gt; element in both resource record
     * sets:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When the primary resource record set is healthy, Route 53 responds
     * to DNS queries with the applicable value from the primary resource record set regardless of the health of the
     * secondary resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the primary resource record set is
     * unhealthy and the secondary resource record set is healthy, Route 53 responds to DNS queries with the applicable
     * value from the secondary resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the secondary
     * resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the primary
     * resource record set regardless of the health of the primary resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If you omit the &lt;code&gt;HealthCheckId&lt;/code&gt; element for the secondary resource record set,
     * and if the primary resource record set is unhealthy, Route 53 always responds to DNS queries with the applicable
     * value from the secondary resource record set. This is true regardless of the health of the associated
     * endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can't create non-failover resource record sets that have
     * the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as failover
     * resource record sets.&lt;/p&gt; &lt;p&gt;For failover alias resource record sets, you must also include the
     * &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; element and set the value to true.&lt;/p&gt; &lt;p&gt;For more
     * information about configuring failover for Route 53, see the following topics in the &lt;i&gt;Amazon Route 53
     * Developer Guide&lt;/i&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html'&gt;Route 53 Health Checks and
     * DNS Failover&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'&gt;Configuring
     * Failover in a Private Hosted Zone&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the failover value.
     */
    public ResourceRecordSetFailoverEnumValue failover() {
        return this.failover;
    }

    /**
     * Set the failover property: &lt;p&gt; &lt;i&gt;Failover resource record sets only:&lt;/i&gt; To configure
     * failover, you add the &lt;code&gt;Failover&lt;/code&gt; element to two resource record sets. For one resource
     * record set, you specify &lt;code&gt;PRIMARY&lt;/code&gt; as the value for &lt;code&gt;Failover&lt;/code&gt;; for
     * the other resource record set, you specify &lt;code&gt;SECONDARY&lt;/code&gt;. In addition, you include the
     * &lt;code&gt;HealthCheckId&lt;/code&gt; element and specify the health check that you want Amazon Route 53 to
     * perform for each resource record set.&lt;/p&gt; &lt;p&gt;Except where noted, the following failover behaviors
     * assume that you have included the &lt;code&gt;HealthCheckId&lt;/code&gt; element in both resource record
     * sets:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When the primary resource record set is healthy, Route 53 responds
     * to DNS queries with the applicable value from the primary resource record set regardless of the health of the
     * secondary resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the primary resource record set is
     * unhealthy and the secondary resource record set is healthy, Route 53 responds to DNS queries with the applicable
     * value from the secondary resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the secondary
     * resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the primary
     * resource record set regardless of the health of the primary resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If you omit the &lt;code&gt;HealthCheckId&lt;/code&gt; element for the secondary resource record set,
     * and if the primary resource record set is unhealthy, Route 53 always responds to DNS queries with the applicable
     * value from the secondary resource record set. This is true regardless of the health of the associated
     * endpoint.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can't create non-failover resource record sets that have
     * the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as failover
     * resource record sets.&lt;/p&gt; &lt;p&gt;For failover alias resource record sets, you must also include the
     * &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; element and set the value to true.&lt;/p&gt; &lt;p&gt;For more
     * information about configuring failover for Route 53, see the following topics in the &lt;i&gt;Amazon Route 53
     * Developer Guide&lt;/i&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html'&gt;Route 53 Health Checks and
     * DNS Failover&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'&gt;Configuring
     * Failover in a Private Hosted Zone&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param failover the failover value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withFailover(ResourceRecordSetFailoverEnumValue failover) {
        this.failover = failover;
        return this;
    }

    /**
     * Get the geoLocation property: &lt;p&gt; &lt;i&gt;Geolocation resource record sets only:&lt;/i&gt; A complex type
     * that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     * For example, if you want all queries from Africa to be routed to a web server with an IP address of
     * &lt;code&gt;192.0.2.111&lt;/code&gt;, create a resource record set with a &lt;code&gt;Type&lt;/code&gt; of
     * &lt;code&gt;A&lt;/code&gt; and a &lt;code&gt;ContinentCode&lt;/code&gt; of &lt;code&gt;AF&lt;/code&gt;.&lt;/p&gt;
     * &lt;p&gt;If you create separate resource record sets for overlapping geographic regions (for example, one
     * resource record set for a continent and one for a country on the same continent), priority goes to the smallest
     * geographic region. This allows you to route most queries for a continent to one resource and to route queries for
     * a country on that continent to a different resource.&lt;/p&gt; &lt;p&gt;You can't create two geolocation resource
     * record sets that specify the same geographic location.&lt;/p&gt; &lt;p&gt;The value &lt;code&gt;*&lt;/code&gt; in
     * the &lt;code&gt;CountryCode&lt;/code&gt; element matches all geographic locations that aren't specified in other
     * geolocation resource record sets that have the same values for the &lt;code&gt;Name&lt;/code&gt; and
     * &lt;code&gt;Type&lt;/code&gt; elements.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Geolocation works by mapping IP
     * addresses to locations. However, some IP addresses aren't mapped to geographic locations, so even if you create
     * geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from
     * locations that it can't identify. We recommend that you create a resource record set for which the value of
     * &lt;code&gt;CountryCode&lt;/code&gt; is &lt;code&gt;*&lt;/code&gt;. Two groups of queries are routed to the
     * resource that you specify in this record: queries that come from locations for which you haven't created
     * geolocation resource record sets and queries from IP addresses that aren't mapped to a location. If you don't
     * create a &lt;code&gt;*&lt;/code&gt; resource record set, Route 53 returns a 'no answer' response for queries from
     * those locations.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can't create non-geolocation resource record sets that
     * have the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as
     * geolocation resource record sets.&lt;/p&gt;.
     * 
     * @return the geoLocation value.
     */
    public GeoLocation geoLocation() {
        return this.geoLocation;
    }

    /**
     * Set the geoLocation property: &lt;p&gt; &lt;i&gt;Geolocation resource record sets only:&lt;/i&gt; A complex type
     * that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     * For example, if you want all queries from Africa to be routed to a web server with an IP address of
     * &lt;code&gt;192.0.2.111&lt;/code&gt;, create a resource record set with a &lt;code&gt;Type&lt;/code&gt; of
     * &lt;code&gt;A&lt;/code&gt; and a &lt;code&gt;ContinentCode&lt;/code&gt; of &lt;code&gt;AF&lt;/code&gt;.&lt;/p&gt;
     * &lt;p&gt;If you create separate resource record sets for overlapping geographic regions (for example, one
     * resource record set for a continent and one for a country on the same continent), priority goes to the smallest
     * geographic region. This allows you to route most queries for a continent to one resource and to route queries for
     * a country on that continent to a different resource.&lt;/p&gt; &lt;p&gt;You can't create two geolocation resource
     * record sets that specify the same geographic location.&lt;/p&gt; &lt;p&gt;The value &lt;code&gt;*&lt;/code&gt; in
     * the &lt;code&gt;CountryCode&lt;/code&gt; element matches all geographic locations that aren't specified in other
     * geolocation resource record sets that have the same values for the &lt;code&gt;Name&lt;/code&gt; and
     * &lt;code&gt;Type&lt;/code&gt; elements.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Geolocation works by mapping IP
     * addresses to locations. However, some IP addresses aren't mapped to geographic locations, so even if you create
     * geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from
     * locations that it can't identify. We recommend that you create a resource record set for which the value of
     * &lt;code&gt;CountryCode&lt;/code&gt; is &lt;code&gt;*&lt;/code&gt;. Two groups of queries are routed to the
     * resource that you specify in this record: queries that come from locations for which you haven't created
     * geolocation resource record sets and queries from IP addresses that aren't mapped to a location. If you don't
     * create a &lt;code&gt;*&lt;/code&gt; resource record set, Route 53 returns a 'no answer' response for queries from
     * those locations.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can't create non-geolocation resource record sets that
     * have the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as
     * geolocation resource record sets.&lt;/p&gt;.
     * 
     * @param geoLocation the geoLocation value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withGeoLocation(GeoLocation geoLocation) {
        this.geoLocation = geoLocation;
        return this;
    }

    /**
     * Get the geoProximityLocation property: &lt;p&gt; &lt;i&gt; GeoproximityLocation resource record sets
     * only:&lt;/i&gt; A complex type that lets you control how RouteÂ 53 responds to DNS queries based on the geographic
     * origin of the query and your resources. &lt;/p&gt;.
     * 
     * @return the geoProximityLocation value.
     */
    public GeoProximityLocation geoProximityLocation() {
        return this.geoProximityLocation;
    }

    /**
     * Set the geoProximityLocation property: &lt;p&gt; &lt;i&gt; GeoproximityLocation resource record sets
     * only:&lt;/i&gt; A complex type that lets you control how RouteÂ 53 responds to DNS queries based on the geographic
     * origin of the query and your resources. &lt;/p&gt;.
     * 
     * @param geoProximityLocation the geoProximityLocation value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withGeoProximityLocation(GeoProximityLocation geoProximityLocation) {
        this.geoProximityLocation = geoProximityLocation;
        return this;
    }

    /**
     * Get the healthCheckId property: &lt;p&gt;If you want Amazon Route 53 to return this resource record set in
     * response to a DNS query only when the status of a health check is healthy, include the
     * &lt;code&gt;HealthCheckId&lt;/code&gt; element and specify the ID of the applicable health check.&lt;/p&gt;
     * &lt;p&gt;Route 53 determines whether a resource record set is healthy based on one of the following:&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt;By periodically sending a request to the endpoint that is specified in the health
     * check&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By aggregating the status of a specified group of health checks
     * (calculated health checks)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By determining the current state of a
     * CloudWatch alarm (CloudWatch metric health checks)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt;
     * &lt;p&gt;Route 53 doesn't check the health of the endpoint that is specified in the resource record set, for
     * example, the endpoint specified by the IP address in the &lt;code&gt;Value&lt;/code&gt; element. When you add a
     * &lt;code&gt;HealthCheckId&lt;/code&gt; element to a resource record set, Route 53 checks the health of the
     * endpoint that you specified in the health check. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see
     * the following topics in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html'&gt;How
     * Amazon Route 53 Determines Whether an Endpoint Is Healthy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;a href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html'&gt;Route 53 Health
     * Checks and DNS Failover&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'&gt;Configuring
     * Failover in a Private Hosted Zone&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;When to Specify
     * HealthCheckId&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Specifying a value for &lt;code&gt;HealthCheckId&lt;/code&gt; is
     * useful only when Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you
     * want Route 53 to base the choice in part on the status of a health check. Configuring health checks makes sense
     * only in the following configurations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Non-alias resource
     * record sets&lt;/b&gt;: You're checking the health of a group of non-alias resource record sets that have the same
     * routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A) and you
     * specify health check IDs for all the resource record sets. &lt;/p&gt; &lt;p&gt;If the health check status for a
     * resource record set is healthy, Route 53 includes the record among the records that it responds to DNS queries
     * with.&lt;/p&gt; &lt;p&gt;If the health check status for a resource record set is unhealthy, Route 53 stops
     * responding to DNS queries using the value for that resource record set.&lt;/p&gt; &lt;p&gt;If the health check
     * status for all resource record sets in the group is unhealthy, Route 53 considers all resource record sets in the
     * group healthy and responds to DNS queries accordingly. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Alias
     * resource record sets&lt;/b&gt;: You specify the following settings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You
     * set &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; to true for an alias resource record set in a group of resource
     * record sets that have the same routing policy, name, and type (such as multiple weighted records named
     * www.example.com with a type of A). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You configure the alias resource
     * record set to route traffic to a non-alias resource record set in the same hosted zone.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;You specify a health check ID for the non-alias resource record set. &lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt; &lt;p&gt;If the health check status is healthy, Route 53 considers the alias resource record set to
     * be healthy and includes the alias record among the records that it responds to DNS queries with.&lt;/p&gt;
     * &lt;p&gt;If the health check status is unhealthy, Route 53 stops responding to DNS queries using the alias
     * resource record set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The alias resource record set can also route traffic to a
     * &lt;i&gt;group&lt;/i&gt; of non-alias resource record sets that have the same routing policy, name, and type. In
     * that configuration, associate health checks with all of the resource record sets in the group of non-alias
     * resource record sets.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Geolocation
     * Routing&lt;/b&gt; &lt;/p&gt; &lt;p&gt;For geolocation resource record sets, if an endpoint is unhealthy, Route 53
     * looks for a resource record set for the larger, associated geographic region. For example, suppose you have
     * resource record sets for a state in the United States, for the entire United States, for North America, and a
     * resource record set that has &lt;code&gt;*&lt;/code&gt; for &lt;code&gt;CountryCode&lt;/code&gt; is
     * &lt;code&gt;*&lt;/code&gt;, which applies to all locations. If the endpoint for the state resource record set is
     * unhealthy, Route 53 checks for healthy resource record sets in the following order until it finds a resource
     * record set for which the endpoint is healthy:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The United
     * States&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The
     * default resource record set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Specifying the Health Check
     * Endpoint by Domain Name&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If your health checks specify the endpoint only by domain
     * name, we recommend that you create a separate health check for each endpoint. For example, create a health check
     * for each &lt;code&gt;HTTP&lt;/code&gt; server that is serving content for
     * &lt;code&gt;www.example.com&lt;/code&gt;. For the value of &lt;code&gt;FullyQualifiedDomainName&lt;/code&gt;,
     * specify the domain name of the server (such as &lt;code&gt;us-east-2-www.example.com&lt;/code&gt;), not the name
     * of the resource record sets (&lt;code&gt;www.example.com&lt;/code&gt;).&lt;/p&gt; &lt;important&gt;
     * &lt;p&gt;Health check results will be unpredictable if you do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;Create a health check that has the same value for &lt;code&gt;FullyQualifiedDomainName&lt;/code&gt; as
     * the name of a resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Associate that health check with the
     * resource record set.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;.
     * 
     * @return the healthCheckId value.
     */
    public String healthCheckId() {
        return this.healthCheckId;
    }

    /**
     * Set the healthCheckId property: &lt;p&gt;If you want Amazon Route 53 to return this resource record set in
     * response to a DNS query only when the status of a health check is healthy, include the
     * &lt;code&gt;HealthCheckId&lt;/code&gt; element and specify the ID of the applicable health check.&lt;/p&gt;
     * &lt;p&gt;Route 53 determines whether a resource record set is healthy based on one of the following:&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt;By periodically sending a request to the endpoint that is specified in the health
     * check&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By aggregating the status of a specified group of health checks
     * (calculated health checks)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;By determining the current state of a
     * CloudWatch alarm (CloudWatch metric health checks)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt;
     * &lt;p&gt;Route 53 doesn't check the health of the endpoint that is specified in the resource record set, for
     * example, the endpoint specified by the IP address in the &lt;code&gt;Value&lt;/code&gt; element. When you add a
     * &lt;code&gt;HealthCheckId&lt;/code&gt; element to a resource record set, Route 53 checks the health of the
     * endpoint that you specified in the health check. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see
     * the following topics in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html'&gt;How
     * Amazon Route 53 Determines Whether an Endpoint Is Healthy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;a href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html'&gt;Route 53 Health
     * Checks and DNS Failover&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html'&gt;Configuring
     * Failover in a Private Hosted Zone&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;When to Specify
     * HealthCheckId&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Specifying a value for &lt;code&gt;HealthCheckId&lt;/code&gt; is
     * useful only when Route 53 is choosing between two or more resource record sets to respond to a DNS query, and you
     * want Route 53 to base the choice in part on the status of a health check. Configuring health checks makes sense
     * only in the following configurations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Non-alias resource
     * record sets&lt;/b&gt;: You're checking the health of a group of non-alias resource record sets that have the same
     * routing policy, name, and type (such as multiple weighted records named www.example.com with a type of A) and you
     * specify health check IDs for all the resource record sets. &lt;/p&gt; &lt;p&gt;If the health check status for a
     * resource record set is healthy, Route 53 includes the record among the records that it responds to DNS queries
     * with.&lt;/p&gt; &lt;p&gt;If the health check status for a resource record set is unhealthy, Route 53 stops
     * responding to DNS queries using the value for that resource record set.&lt;/p&gt; &lt;p&gt;If the health check
     * status for all resource record sets in the group is unhealthy, Route 53 considers all resource record sets in the
     * group healthy and responds to DNS queries accordingly. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Alias
     * resource record sets&lt;/b&gt;: You specify the following settings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You
     * set &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; to true for an alias resource record set in a group of resource
     * record sets that have the same routing policy, name, and type (such as multiple weighted records named
     * www.example.com with a type of A). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You configure the alias resource
     * record set to route traffic to a non-alias resource record set in the same hosted zone.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;You specify a health check ID for the non-alias resource record set. &lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt; &lt;p&gt;If the health check status is healthy, Route 53 considers the alias resource record set to
     * be healthy and includes the alias record among the records that it responds to DNS queries with.&lt;/p&gt;
     * &lt;p&gt;If the health check status is unhealthy, Route 53 stops responding to DNS queries using the alias
     * resource record set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The alias resource record set can also route traffic to a
     * &lt;i&gt;group&lt;/i&gt; of non-alias resource record sets that have the same routing policy, name, and type. In
     * that configuration, associate health checks with all of the resource record sets in the group of non-alias
     * resource record sets.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Geolocation
     * Routing&lt;/b&gt; &lt;/p&gt; &lt;p&gt;For geolocation resource record sets, if an endpoint is unhealthy, Route 53
     * looks for a resource record set for the larger, associated geographic region. For example, suppose you have
     * resource record sets for a state in the United States, for the entire United States, for North America, and a
     * resource record set that has &lt;code&gt;*&lt;/code&gt; for &lt;code&gt;CountryCode&lt;/code&gt; is
     * &lt;code&gt;*&lt;/code&gt;, which applies to all locations. If the endpoint for the state resource record set is
     * unhealthy, Route 53 checks for healthy resource record sets in the following order until it finds a resource
     * record set for which the endpoint is healthy:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The United
     * States&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The
     * default resource record set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Specifying the Health Check
     * Endpoint by Domain Name&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If your health checks specify the endpoint only by domain
     * name, we recommend that you create a separate health check for each endpoint. For example, create a health check
     * for each &lt;code&gt;HTTP&lt;/code&gt; server that is serving content for
     * &lt;code&gt;www.example.com&lt;/code&gt;. For the value of &lt;code&gt;FullyQualifiedDomainName&lt;/code&gt;,
     * specify the domain name of the server (such as &lt;code&gt;us-east-2-www.example.com&lt;/code&gt;), not the name
     * of the resource record sets (&lt;code&gt;www.example.com&lt;/code&gt;).&lt;/p&gt; &lt;important&gt;
     * &lt;p&gt;Health check results will be unpredictable if you do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;Create a health check that has the same value for &lt;code&gt;FullyQualifiedDomainName&lt;/code&gt; as
     * the name of a resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Associate that health check with the
     * resource record set.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt;.
     * 
     * @param healthCheckId the healthCheckId value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withHealthCheckId(String healthCheckId) {
        this.healthCheckId = healthCheckId;
        return this;
    }

    /**
     * Get the multiValueAnswer property: &lt;p&gt; &lt;i&gt;Multivalue answer resource record sets only&lt;/i&gt;: To
     * route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer
     * record for each resource and specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;MultiValueAnswer&lt;/code&gt;.
     * Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you associate a health check with a multivalue
     * answer resource record set, Amazon Route 53 responds to DNS queries with the corresponding IP address only when
     * the health check is healthy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don't associate a health check with
     * a multivalue answer record, Route 53 always considers the record to be healthy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy
     * records, Route 53 responds to all DNS queries with all the healthy records.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If you have more than eight healthy records, Route 53 responds to different DNS resolvers with different
     * combinations of healthy records.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When all records are unhealthy, Route
     * 53 responds to DNS queries with up to eight unhealthy records.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a
     * resource becomes unavailable after a resolver caches a response, client software typically tries another of the
     * IP addresses in the response.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can't create multivalue answer alias
     * records.&lt;/p&gt;.
     * 
     * @return the multiValueAnswer value.
     */
    public Boolean multiValueAnswer() {
        return this.multiValueAnswer;
    }

    /**
     * Set the multiValueAnswer property: &lt;p&gt; &lt;i&gt;Multivalue answer resource record sets only&lt;/i&gt;: To
     * route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer
     * record for each resource and specify &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;MultiValueAnswer&lt;/code&gt;.
     * Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you associate a health check with a multivalue
     * answer resource record set, Amazon Route 53 responds to DNS queries with the corresponding IP address only when
     * the health check is healthy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don't associate a health check with
     * a multivalue answer record, Route 53 always considers the record to be healthy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy
     * records, Route 53 responds to all DNS queries with all the healthy records.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If you have more than eight healthy records, Route 53 responds to different DNS resolvers with different
     * combinations of healthy records.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When all records are unhealthy, Route
     * 53 responds to DNS queries with up to eight unhealthy records.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a
     * resource becomes unavailable after a resolver caches a response, client software typically tries another of the
     * IP addresses in the response.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can't create multivalue answer alias
     * records.&lt;/p&gt;.
     * 
     * @param multiValueAnswer the multiValueAnswer value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withMultiValueAnswer(Boolean multiValueAnswer) {
        this.multiValueAnswer = multiValueAnswer;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;For &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; requests, the name of the
     * record that you want to create, update, or delete. For &lt;code&gt;ListResourceRecordSets&lt;/code&gt; responses,
     * the name of a record in the specified hosted zone.&lt;/p&gt; &lt;p&gt; &lt;b&gt;ChangeResourceRecordSets
     * Only&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Enter a fully qualified domain name, for example,
     * &lt;code&gt;www.example.com&lt;/code&gt;. You can optionally include a trailing dot. If you omit the trailing
     * dot, Amazon Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53
     * treats &lt;code&gt;www.example.com&lt;/code&gt; (without a trailing dot) and
     * &lt;code&gt;www.example.com.&lt;/code&gt; (with a trailing dot) as identical.&lt;/p&gt; &lt;p&gt;For information
     * about how to specify characters other than &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and
     * &lt;code&gt;-&lt;/code&gt; (hyphen) and how to specify internationalized domain names, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html'&gt;DNS Domain Name
     * Format&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can use the
     * asterisk (*) wildcard to replace the leftmost label in a domain name, for example,
     * &lt;code&gt;*.example.com&lt;/code&gt;. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The * must
     * replace the entire label. For example, you can't specify &lt;code&gt;*prod.example.com&lt;/code&gt; or
     * &lt;code&gt;prod*.example.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The * can't replace any of
     * the middle labels, for example, marketing.*.example.com.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you include
     * * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not
     * as a wildcard.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can't use the * wildcard for resource records sets that
     * have a type of NS.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;For &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt; requests, the name of the
     * record that you want to create, update, or delete. For &lt;code&gt;ListResourceRecordSets&lt;/code&gt; responses,
     * the name of a record in the specified hosted zone.&lt;/p&gt; &lt;p&gt; &lt;b&gt;ChangeResourceRecordSets
     * Only&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Enter a fully qualified domain name, for example,
     * &lt;code&gt;www.example.com&lt;/code&gt;. You can optionally include a trailing dot. If you omit the trailing
     * dot, Amazon Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53
     * treats &lt;code&gt;www.example.com&lt;/code&gt; (without a trailing dot) and
     * &lt;code&gt;www.example.com.&lt;/code&gt; (with a trailing dot) as identical.&lt;/p&gt; &lt;p&gt;For information
     * about how to specify characters other than &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and
     * &lt;code&gt;-&lt;/code&gt; (hyphen) and how to specify internationalized domain names, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html'&gt;DNS Domain Name
     * Format&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can use the
     * asterisk (*) wildcard to replace the leftmost label in a domain name, for example,
     * &lt;code&gt;*.example.com&lt;/code&gt;. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The * must
     * replace the entire label. For example, you can't specify &lt;code&gt;*prod.example.com&lt;/code&gt; or
     * &lt;code&gt;prod*.example.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The * can't replace any of
     * the middle labels, for example, marketing.*.example.com.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you include
     * * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42), not
     * as a wildcard.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can't use the * wildcard for resource records sets that
     * have a type of NS.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param name the name value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the region property: &lt;p&gt; &lt;i&gt;Latency-based resource record sets only:&lt;/i&gt; The Amazon EC2
     * Region where you created the resource that this resource record set refers to. The resource typically is an
     * Amazon Web Services resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP
     * address or a DNS domain name, depending on the record type.&lt;/p&gt; &lt;p&gt;When Amazon Route 53 receives a
     * DNS query for a domain name and type for which you have created latency resource record sets, Route 53 selects
     * the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2
     * Region. Route 53 then returns the value that is associated with the selected resource record set.&lt;/p&gt;
     * &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can only specify one
     * &lt;code&gt;ResourceRecord&lt;/code&gt; per latency resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;You can only create one latency resource record set for each Amazon EC2 Region.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;You aren't required to create latency resource record sets for all Amazon EC2 Regions. Route
     * 53 will choose the region with the best latency from among the regions that you create latency resource record
     * sets for.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can't create non-latency resource record sets that have
     * the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as latency
     * resource record sets.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the region value.
     */
    public ResourceRecordSetRegionEnumValue region() {
        return this.region;
    }

    /**
     * Set the region property: &lt;p&gt; &lt;i&gt;Latency-based resource record sets only:&lt;/i&gt; The Amazon EC2
     * Region where you created the resource that this resource record set refers to. The resource typically is an
     * Amazon Web Services resource, such as an EC2 instance or an ELB load balancer, and is referred to by an IP
     * address or a DNS domain name, depending on the record type.&lt;/p&gt; &lt;p&gt;When Amazon Route 53 receives a
     * DNS query for a domain name and type for which you have created latency resource record sets, Route 53 selects
     * the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2
     * Region. Route 53 then returns the value that is associated with the selected resource record set.&lt;/p&gt;
     * &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can only specify one
     * &lt;code&gt;ResourceRecord&lt;/code&gt; per latency resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;You can only create one latency resource record set for each Amazon EC2 Region.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;You aren't required to create latency resource record sets for all Amazon EC2 Regions. Route
     * 53 will choose the region with the best latency from among the regions that you create latency resource record
     * sets for.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can't create non-latency resource record sets that have
     * the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as latency
     * resource record sets.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param region the region value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withRegion(ResourceRecordSetRegionEnumValue region) {
        this.region = region;
        return this;
    }

    /**
     * Get the resourceRecords property: &lt;p&gt;Information about the resource records to act upon.&lt;/p&gt;
     * &lt;note&gt; &lt;p&gt;If you're creating an alias resource record set, omit
     * &lt;code&gt;ResourceRecords&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the resourceRecords value.
     */
    public List<ResourceRecord> resourceRecords() {
        return this.resourceRecords;
    }

    /**
     * Set the resourceRecords property: &lt;p&gt;Information about the resource records to act upon.&lt;/p&gt;
     * &lt;note&gt; &lt;p&gt;If you're creating an alias resource record set, omit
     * &lt;code&gt;ResourceRecords&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param resourceRecords the resourceRecords value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withResourceRecords(List<ResourceRecord> resourceRecords) {
        this.resourceRecords = resourceRecords;
        return this;
    }

    /**
     * Get the setIdentifier property: &lt;p&gt; &lt;i&gt;Resource record sets that have a routing policy other than
     * simple:&lt;/i&gt; An identifier that differentiates among multiple resource record sets that have the same
     * combination of name and type, such as multiple weighted resource record sets named acme.example.com that have a
     * type of A. In a group of resource record sets that have the same name and type, the value of
     * &lt;code&gt;SetIdentifier&lt;/code&gt; must be unique for each resource record set. &lt;/p&gt; &lt;p&gt;For
     * information about routing policies, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html'&gt;Choosing a Routing
     * Policy&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the setIdentifier value.
     */
    public String setIdentifier() {
        return this.setIdentifier;
    }

    /**
     * Set the setIdentifier property: &lt;p&gt; &lt;i&gt;Resource record sets that have a routing policy other than
     * simple:&lt;/i&gt; An identifier that differentiates among multiple resource record sets that have the same
     * combination of name and type, such as multiple weighted resource record sets named acme.example.com that have a
     * type of A. In a group of resource record sets that have the same name and type, the value of
     * &lt;code&gt;SetIdentifier&lt;/code&gt; must be unique for each resource record set. &lt;/p&gt; &lt;p&gt;For
     * information about routing policies, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html'&gt;Choosing a Routing
     * Policy&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param setIdentifier the setIdentifier value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withSetIdentifier(String setIdentifier) {
        this.setIdentifier = setIdentifier;
        return this;
    }

    /**
     * Get the ttl property: &lt;p&gt;The resource record cache time to live (TTL), in seconds. Note the
     * following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you're creating or updating an alias resource record set,
     * omit &lt;code&gt;TTL&lt;/code&gt;. Amazon Route 53 uses the value of &lt;code&gt;TTL&lt;/code&gt; for the alias
     * target. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you're associating this resource record set with a health
     * check (if you're adding a &lt;code&gt;HealthCheckId&lt;/code&gt; element), we recommend that you specify a
     * &lt;code&gt;TTL&lt;/code&gt; of 60 seconds or less so clients respond quickly to changes in health
     * status.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All of the resource record sets in a group of weighted resource
     * record sets must have the same value for &lt;code&gt;TTL&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If a group of weighted resource record sets includes one or more weighted alias resource record sets for
     * which the alias target is an ELB load balancer, we recommend that you specify a &lt;code&gt;TTL&lt;/code&gt; of
     * 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other
     * than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for
     * &lt;code&gt;Weight&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the ttl value.
     */
    public Long ttl() {
        return this.ttl;
    }

    /**
     * Set the ttl property: &lt;p&gt;The resource record cache time to live (TTL), in seconds. Note the
     * following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you're creating or updating an alias resource record set,
     * omit &lt;code&gt;TTL&lt;/code&gt;. Amazon Route 53 uses the value of &lt;code&gt;TTL&lt;/code&gt; for the alias
     * target. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you're associating this resource record set with a health
     * check (if you're adding a &lt;code&gt;HealthCheckId&lt;/code&gt; element), we recommend that you specify a
     * &lt;code&gt;TTL&lt;/code&gt; of 60 seconds or less so clients respond quickly to changes in health
     * status.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All of the resource record sets in a group of weighted resource
     * record sets must have the same value for &lt;code&gt;TTL&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If a group of weighted resource record sets includes one or more weighted alias resource record sets for
     * which the alias target is an ELB load balancer, we recommend that you specify a &lt;code&gt;TTL&lt;/code&gt; of
     * 60 seconds for all of the non-alias weighted resource record sets that have the same name and type. Values other
     * than 60 seconds (the TTL for load balancers) will change the effect of the values that you specify for
     * &lt;code&gt;Weight&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param ttl the ttl value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withTtl(Long ttl) {
        this.ttl = ttl;
        return this;
    }

    /**
     * Get the trafficPolicyInstanceId property: &lt;p&gt;When you create a traffic policy instance, Amazon Route 53
     * automatically creates a resource record set. &lt;code&gt;TrafficPolicyInstanceId&lt;/code&gt; is the ID of the
     * traffic policy instance that Route 53 created this resource record set for.&lt;/p&gt; &lt;important&gt;
     * &lt;p&gt;To delete the resource record set that is associated with a traffic policy instance, use
     * &lt;code&gt;DeleteTrafficPolicyInstance&lt;/code&gt;. Route 53 will delete the resource record set automatically.
     * If you delete the resource record set by using &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt;, Route 53
     * doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though
     * it's no longer in use. &lt;/p&gt; &lt;/important&gt;.
     * 
     * @return the trafficPolicyInstanceId value.
     */
    public String trafficPolicyInstanceId() {
        return this.trafficPolicyInstanceId;
    }

    /**
     * Set the trafficPolicyInstanceId property: &lt;p&gt;When you create a traffic policy instance, Amazon Route 53
     * automatically creates a resource record set. &lt;code&gt;TrafficPolicyInstanceId&lt;/code&gt; is the ID of the
     * traffic policy instance that Route 53 created this resource record set for.&lt;/p&gt; &lt;important&gt;
     * &lt;p&gt;To delete the resource record set that is associated with a traffic policy instance, use
     * &lt;code&gt;DeleteTrafficPolicyInstance&lt;/code&gt;. Route 53 will delete the resource record set automatically.
     * If you delete the resource record set by using &lt;code&gt;ChangeResourceRecordSets&lt;/code&gt;, Route 53
     * doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though
     * it's no longer in use. &lt;/p&gt; &lt;/important&gt;.
     * 
     * @param trafficPolicyInstanceId the trafficPolicyInstanceId value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withTrafficPolicyInstanceId(String trafficPolicyInstanceId) {
        this.trafficPolicyInstanceId = trafficPolicyInstanceId;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt;The DNS record type. For information about different record types and how data is
     * encoded for them, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html'&gt;Supported DNS
     * Resource Record Types&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * &lt;p&gt;Valid values for basic resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt;
     * | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;DS&lt;/code&gt;
     * |&lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;NS&lt;/code&gt; |
     * &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SOA&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; |
     * &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for weighted, latency,
     * geolocation, and failover resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; |
     * &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; |
     * &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; |
     * &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt;. When creating a group of weighted, latency,
     * geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the
     * group.&lt;/p&gt; &lt;p&gt;Valid values for multivalue answer resource record sets: &lt;code&gt;A&lt;/code&gt; |
     * &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; |
     * &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; |
     * &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;SPF records were formerly used to verify the
     * identity of the sender of email messages. However, we no longer recommend that you create resource record sets
     * for which the value of &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;SPF&lt;/code&gt;. RFC 7208, &lt;i&gt;Sender
     * Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1&lt;/i&gt;, has been updated to say,
     * '...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its
     * use is no longer appropriate for SPF version 1; implementations are not to use it.' In RFC 7208, see section
     * 14.1, &lt;a href='http://tools.ietf.org/html/rfc7208#section-14.1'&gt;The SPF DNS Record
     * Type&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Values for alias resource record sets:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;Amazon API Gateway custom regional APIs and edge-optimized APIs:&lt;/b&gt;
     * &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CloudFront
     * distributions:&lt;/b&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If IPv6 is enabled for the distribution,
     * create two resource record sets to route traffic to your distribution, one with a value of
     * &lt;code&gt;A&lt;/code&gt; and one with a value of &lt;code&gt;AAAA&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;Amazon API Gateway environment that has a regionalized subdomain&lt;/b&gt;:
     * &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;ELB load balancers:&lt;/b&gt;
     * &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Amazon S3 buckets:&lt;/b&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Amazon Virtual Private Cloud interface VPC endpoints&lt;/b&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Another resource record set in this hosted zone:&lt;/b&gt; Specify the
     * type of the resource record set that you're creating the alias for. All values are supported except
     * &lt;code&gt;NS&lt;/code&gt; and &lt;code&gt;SOA&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you're creating
     * an alias record that has the same name as the hosted zone (known as the zone apex), you can't route traffic to a
     * record for which the value of &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;CNAME&lt;/code&gt;. This is because
     * the alias record must have the same type as the record you're routing traffic to, and creating a CNAME record for
     * the zone apex isn't supported even for an alias record.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the type value.
     */
    public RRTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt;The DNS record type. For information about different record types and how data is
     * encoded for them, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html'&gt;Supported DNS
     * Resource Record Types&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * &lt;p&gt;Valid values for basic resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt;
     * | &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;DS&lt;/code&gt;
     * |&lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;NS&lt;/code&gt; |
     * &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SOA&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; |
     * &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Values for weighted, latency,
     * geolocation, and failover resource record sets: &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; |
     * &lt;code&gt;CAA&lt;/code&gt; | &lt;code&gt;CNAME&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; |
     * &lt;code&gt;NAPTR&lt;/code&gt; | &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; |
     * &lt;code&gt;SRV&lt;/code&gt; | &lt;code&gt;TXT&lt;/code&gt;. When creating a group of weighted, latency,
     * geolocation, or failover resource record sets, specify the same value for all of the resource record sets in the
     * group.&lt;/p&gt; &lt;p&gt;Valid values for multivalue answer resource record sets: &lt;code&gt;A&lt;/code&gt; |
     * &lt;code&gt;AAAA&lt;/code&gt; | &lt;code&gt;MX&lt;/code&gt; | &lt;code&gt;NAPTR&lt;/code&gt; |
     * &lt;code&gt;PTR&lt;/code&gt; | &lt;code&gt;SPF&lt;/code&gt; | &lt;code&gt;SRV&lt;/code&gt; |
     * &lt;code&gt;TXT&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;SPF records were formerly used to verify the
     * identity of the sender of email messages. However, we no longer recommend that you create resource record sets
     * for which the value of &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;SPF&lt;/code&gt;. RFC 7208, &lt;i&gt;Sender
     * Policy Framework (SPF) for Authorizing Use of Domains in Email, Version 1&lt;/i&gt;, has been updated to say,
     * '...[I]ts existence and mechanism defined in [RFC4408] have led to some interoperability issues. Accordingly, its
     * use is no longer appropriate for SPF version 1; implementations are not to use it.' In RFC 7208, see section
     * 14.1, &lt;a href='http://tools.ietf.org/html/rfc7208#section-14.1'&gt;The SPF DNS Record
     * Type&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Values for alias resource record sets:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;Amazon API Gateway custom regional APIs and edge-optimized APIs:&lt;/b&gt;
     * &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;CloudFront
     * distributions:&lt;/b&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If IPv6 is enabled for the distribution,
     * create two resource record sets to route traffic to your distribution, one with a value of
     * &lt;code&gt;A&lt;/code&gt; and one with a value of &lt;code&gt;AAAA&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;Amazon API Gateway environment that has a regionalized subdomain&lt;/b&gt;:
     * &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;ELB load balancers:&lt;/b&gt;
     * &lt;code&gt;A&lt;/code&gt; | &lt;code&gt;AAAA&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Amazon S3 buckets:&lt;/b&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Amazon Virtual Private Cloud interface VPC endpoints&lt;/b&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Another resource record set in this hosted zone:&lt;/b&gt; Specify the
     * type of the resource record set that you're creating the alias for. All values are supported except
     * &lt;code&gt;NS&lt;/code&gt; and &lt;code&gt;SOA&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you're creating
     * an alias record that has the same name as the hosted zone (known as the zone apex), you can't route traffic to a
     * record for which the value of &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;CNAME&lt;/code&gt;. This is because
     * the alias record must have the same type as the record you're routing traffic to, and creating a CNAME record for
     * the zone apex isn't supported even for an alias record.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param type the type value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withType(RRTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Get the weight property: &lt;p&gt; &lt;i&gt;Weighted resource record sets only:&lt;/i&gt; Among resource record
     * sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries
     * that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the
     * weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds
     * to queries based on the ratio of a resource's weight to the total. Note the following:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt;You must specify a value for the &lt;code&gt;Weight&lt;/code&gt; element for every weighted
     * resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can only specify one
     * &lt;code&gt;ResourceRecord&lt;/code&gt; per weighted resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;You can't create latency, failover, or geolocation resource record sets that have the same values for
     * the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as weighted resource record
     * sets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can create a maximum of 100 weighted resource record sets
     * that have the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;
     * elements.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For weighted (but not weighted alias) resource record sets,
     * if you set &lt;code&gt;Weight&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; for a resource record set, Route 53
     * never responds to queries with the applicable value for that resource record set. However, if you set
     * &lt;code&gt;Weight&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; for all resource record sets that have the same
     * combination of DNS name and type, traffic is routed to all resources with equal probability.&lt;/p&gt;
     * &lt;p&gt;The effect of setting &lt;code&gt;Weight&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; is different when
     * you associate health checks with weighted resource record sets. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html'&gt;Options
     * for Configuring Route 53 Active-Active and Active-Passive Failover&lt;/a&gt; in the &lt;i&gt;Amazon Route 53
     * Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the weight value.
     */
    public Long weight() {
        return this.weight;
    }

    /**
     * Set the weight property: &lt;p&gt; &lt;i&gt;Weighted resource record sets only:&lt;/i&gt; Among resource record
     * sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries
     * that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the
     * weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds
     * to queries based on the ratio of a resource's weight to the total. Note the following:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt;You must specify a value for the &lt;code&gt;Weight&lt;/code&gt; element for every weighted
     * resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can only specify one
     * &lt;code&gt;ResourceRecord&lt;/code&gt; per weighted resource record set.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;You can't create latency, failover, or geolocation resource record sets that have the same values for
     * the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt; elements as weighted resource record
     * sets.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can create a maximum of 100 weighted resource record sets
     * that have the same values for the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;
     * elements.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For weighted (but not weighted alias) resource record sets,
     * if you set &lt;code&gt;Weight&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; for a resource record set, Route 53
     * never responds to queries with the applicable value for that resource record set. However, if you set
     * &lt;code&gt;Weight&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; for all resource record sets that have the same
     * combination of DNS name and type, traffic is routed to all resources with equal probability.&lt;/p&gt;
     * &lt;p&gt;The effect of setting &lt;code&gt;Weight&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; is different when
     * you associate health checks with weighted resource record sets. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html'&gt;Options
     * for Configuring Route 53 Active-Active and Active-Passive Failover&lt;/a&gt; in the &lt;i&gt;Amazon Route 53
     * Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param weight the weight value to set.
     * @return the AwsRoute53ResourceRecordSetProperties object itself.
     */
    public AwsRoute53ResourceRecordSetProperties withWeight(Long weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aliasTarget() != null) {
            aliasTarget().validate();
        }
        if (cidrRoutingConfig() != null) {
            cidrRoutingConfig().validate();
        }
        if (failover() != null) {
            failover().validate();
        }
        if (geoLocation() != null) {
            geoLocation().validate();
        }
        if (geoProximityLocation() != null) {
            geoProximityLocation().validate();
        }
        if (region() != null) {
            region().validate();
        }
        if (resourceRecords() != null) {
            resourceRecords().forEach(e -> e.validate());
        }
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("aliasTarget", this.aliasTarget);
        jsonWriter.writeJsonField("cidrRoutingConfig", this.cidrRoutingConfig);
        jsonWriter.writeJsonField("failover", this.failover);
        jsonWriter.writeJsonField("geoLocation", this.geoLocation);
        jsonWriter.writeJsonField("geoProximityLocation", this.geoProximityLocation);
        jsonWriter.writeStringField("healthCheckId", this.healthCheckId);
        jsonWriter.writeBooleanField("multiValueAnswer", this.multiValueAnswer);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("region", this.region);
        jsonWriter.writeArrayField("resourceRecords", this.resourceRecords,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("setIdentifier", this.setIdentifier);
        jsonWriter.writeNumberField("ttl", this.ttl);
        jsonWriter.writeStringField("trafficPolicyInstanceId", this.trafficPolicyInstanceId);
        jsonWriter.writeJsonField("type", this.type);
        jsonWriter.writeNumberField("weight", this.weight);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRoute53ResourceRecordSetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRoute53ResourceRecordSetProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRoute53ResourceRecordSetProperties.
     */
    public static AwsRoute53ResourceRecordSetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRoute53ResourceRecordSetProperties deserializedAwsRoute53ResourceRecordSetProperties
                = new AwsRoute53ResourceRecordSetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aliasTarget".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.aliasTarget = AliasTarget.fromJson(reader);
                } else if ("cidrRoutingConfig".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.cidrRoutingConfig
                        = CidrRoutingConfig.fromJson(reader);
                } else if ("failover".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.failover
                        = ResourceRecordSetFailoverEnumValue.fromJson(reader);
                } else if ("geoLocation".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.geoLocation = GeoLocation.fromJson(reader);
                } else if ("geoProximityLocation".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.geoProximityLocation
                        = GeoProximityLocation.fromJson(reader);
                } else if ("healthCheckId".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.healthCheckId = reader.getString();
                } else if ("multiValueAnswer".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.multiValueAnswer
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("name".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.name = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.region
                        = ResourceRecordSetRegionEnumValue.fromJson(reader);
                } else if ("resourceRecords".equals(fieldName)) {
                    List<ResourceRecord> resourceRecords
                        = reader.readArray(reader1 -> ResourceRecord.fromJson(reader1));
                    deserializedAwsRoute53ResourceRecordSetProperties.resourceRecords = resourceRecords;
                } else if ("setIdentifier".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.setIdentifier = reader.getString();
                } else if ("ttl".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.ttl = reader.getNullable(JsonReader::getLong);
                } else if ("trafficPolicyInstanceId".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.trafficPolicyInstanceId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.type = RRTypeEnumValue.fromJson(reader);
                } else if ("weight".equals(fieldName)) {
                    deserializedAwsRoute53ResourceRecordSetProperties.weight = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRoute53ResourceRecordSetProperties;
        });
    }
}
