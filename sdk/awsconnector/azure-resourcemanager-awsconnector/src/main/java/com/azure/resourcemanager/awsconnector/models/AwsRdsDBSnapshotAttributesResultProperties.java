// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsRdsDBSnapshotAttributesResult.
 */
@Fluent
public final class AwsRdsDBSnapshotAttributesResultProperties
    implements JsonSerializable<AwsRdsDBSnapshotAttributesResultProperties> {
    /*
     * <p>The list of attributes and values for the manual DB snapshot.</p>
     */
    private List<DBSnapshotAttribute> dbSnapshotAttributes;

    /*
     * <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
     */
    private String dbSnapshotIdentifier;

    /**
     * Creates an instance of AwsRdsDBSnapshotAttributesResultProperties class.
     */
    public AwsRdsDBSnapshotAttributesResultProperties() {
    }

    /**
     * Get the dbSnapshotAttributes property: &lt;p&gt;The list of attributes and values for the manual DB
     * snapshot.&lt;/p&gt;.
     * 
     * @return the dbSnapshotAttributes value.
     */
    public List<DBSnapshotAttribute> dbSnapshotAttributes() {
        return this.dbSnapshotAttributes;
    }

    /**
     * Set the dbSnapshotAttributes property: &lt;p&gt;The list of attributes and values for the manual DB
     * snapshot.&lt;/p&gt;.
     * 
     * @param dbSnapshotAttributes the dbSnapshotAttributes value to set.
     * @return the AwsRdsDBSnapshotAttributesResultProperties object itself.
     */
    public AwsRdsDBSnapshotAttributesResultProperties
        withDbSnapshotAttributes(List<DBSnapshotAttribute> dbSnapshotAttributes) {
        this.dbSnapshotAttributes = dbSnapshotAttributes;
        return this;
    }

    /**
     * Get the dbSnapshotIdentifier property: &lt;p&gt;The identifier of the manual DB snapshot that the attributes
     * apply to.&lt;/p&gt;.
     * 
     * @return the dbSnapshotIdentifier value.
     */
    public String dbSnapshotIdentifier() {
        return this.dbSnapshotIdentifier;
    }

    /**
     * Set the dbSnapshotIdentifier property: &lt;p&gt;The identifier of the manual DB snapshot that the attributes
     * apply to.&lt;/p&gt;.
     * 
     * @param dbSnapshotIdentifier the dbSnapshotIdentifier value to set.
     * @return the AwsRdsDBSnapshotAttributesResultProperties object itself.
     */
    public AwsRdsDBSnapshotAttributesResultProperties withDbSnapshotIdentifier(String dbSnapshotIdentifier) {
        this.dbSnapshotIdentifier = dbSnapshotIdentifier;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dbSnapshotAttributes() != null) {
            dbSnapshotAttributes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dbSnapshotAttributes", this.dbSnapshotAttributes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("dbSnapshotIdentifier", this.dbSnapshotIdentifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRdsDBSnapshotAttributesResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRdsDBSnapshotAttributesResultProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRdsDBSnapshotAttributesResultProperties.
     */
    public static AwsRdsDBSnapshotAttributesResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRdsDBSnapshotAttributesResultProperties deserializedAwsRdsDBSnapshotAttributesResultProperties
                = new AwsRdsDBSnapshotAttributesResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dbSnapshotAttributes".equals(fieldName)) {
                    List<DBSnapshotAttribute> dbSnapshotAttributes
                        = reader.readArray(reader1 -> DBSnapshotAttribute.fromJson(reader1));
                    deserializedAwsRdsDBSnapshotAttributesResultProperties.dbSnapshotAttributes = dbSnapshotAttributes;
                } else if ("dbSnapshotIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotAttributesResultProperties.dbSnapshotIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRdsDBSnapshotAttributesResultProperties;
        });
    }
}
