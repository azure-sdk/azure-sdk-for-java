// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Specifies the type of KMS key to create. The default value, ``SYMMETRIC_DEFAULT``, creates a KMS key with a 256-bit
 * symmetric key for encryption and decryption. In China Regions, ``SYMMETRIC_DEFAULT`` creates a 128-bit symmetric key
 * that uses SM4 encryption. You can't change the ``KeySpec`` value after the KMS key is created. For help choosing a
 * key spec for your KMS key, see [Choosing a KMS key
 * type](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html) in the *Developer Guide*. The
 * ``KeySpec`` property determines the type of key material in the KMS key and the algorithms that the KMS key supports.
 * To further restrict the algorithms that can be used with the KMS key, use a condition key in its key policy or IAM
 * policy. For more information, see [condition
 * keys](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms) in the *Developer
 * Guide*. If you change the value of the ``KeySpec`` property on an existing KMS key, the update request fails,
 * regardless of the value of the [UpdateReplacePolicy
 * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
 * This prevents you from accidentally deleting a KMS key by changing an immutable property value. [services that are
 * integrated with](https://docs.aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption KMS keys
 * to protect your data. These services do not support encryption with asymmetric KMS keys. For help determining whether
 * a KMS key is asymmetric, see [Identifying asymmetric KMS
 * keys](https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html) in the *Developer Guide*. KMS
 * supports the following key specs for KMS keys: + Symmetric encryption key (default) + ``SYMMETRIC_DEFAULT``
 * (AES-256-GCM) + HMAC keys (symmetric) + ``HMAC_224`` + ``HMAC_256`` + ``HMAC_384`` + ``HMAC_512`` + Asymmetric RSA
 * key pairs + ``RSA_2048`` + ``RSA_3072`` + ``RSA_4096`` + Asymmetric NIST-recommended elliptic curve key pairs +
 * ``ECC_NIST_P256`` (secp256r1) + ``ECC_NIST_P384`` (secp384r1) + ``ECC_NIST_P521`` (secp521r1) + Other asymmetric
 * elliptic curve key pairs + ``ECC_SECG_P256K1`` (secp256k1), commonly used for cryptocurrencies. + SM2 key pairs
 * (China Regions only) + ``SM2``.
 */
public final class KeySpec extends ExpandableStringEnum<KeySpec> {
    /**
     * Static value ECC_NIST_P256 for KeySpec.
     */
    public static final KeySpec ECC_NIST_P256 = fromString("ECC_NIST_P256");

    /**
     * Static value ECC_NIST_P384 for KeySpec.
     */
    public static final KeySpec ECC_NIST_P384 = fromString("ECC_NIST_P384");

    /**
     * Static value ECC_NIST_P521 for KeySpec.
     */
    public static final KeySpec ECC_NIST_P521 = fromString("ECC_NIST_P521");

    /**
     * Static value ECC_SECG_P256K1 for KeySpec.
     */
    public static final KeySpec ECC_SECG_P256K1 = fromString("ECC_SECG_P256K1");

    /**
     * Static value HMAC_224 for KeySpec.
     */
    public static final KeySpec HMAC_224 = fromString("HMAC_224");

    /**
     * Static value HMAC_256 for KeySpec.
     */
    public static final KeySpec HMAC_256 = fromString("HMAC_256");

    /**
     * Static value HMAC_384 for KeySpec.
     */
    public static final KeySpec HMAC_384 = fromString("HMAC_384");

    /**
     * Static value HMAC_512 for KeySpec.
     */
    public static final KeySpec HMAC_512 = fromString("HMAC_512");

    /**
     * Static value RSA_2048 for KeySpec.
     */
    public static final KeySpec RSA_2048 = fromString("RSA_2048");

    /**
     * Static value RSA_3072 for KeySpec.
     */
    public static final KeySpec RSA_3072 = fromString("RSA_3072");

    /**
     * Static value RSA_4096 for KeySpec.
     */
    public static final KeySpec RSA_4096 = fromString("RSA_4096");

    /**
     * Static value SM2 for KeySpec.
     */
    public static final KeySpec SM2 = fromString("SM2");

    /**
     * Static value SYMMETRIC_DEFAULT for KeySpec.
     */
    public static final KeySpec SYMMETRIC_DEFAULT = fromString("SYMMETRIC_DEFAULT");

    /**
     * Creates a new instance of KeySpec value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public KeySpec() {
    }

    /**
     * Creates or finds a KeySpec from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding KeySpec.
     */
    public static KeySpec fromString(String name) {
        return fromString(name, KeySpec.class);
    }

    /**
     * Gets known KeySpec values.
     * 
     * @return known KeySpec values.
     */
    public static Collection<KeySpec> values() {
        return values(KeySpec.class);
    }
}
