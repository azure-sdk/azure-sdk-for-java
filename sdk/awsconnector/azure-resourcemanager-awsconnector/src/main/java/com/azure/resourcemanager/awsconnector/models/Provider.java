// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Provider.
 */
@Fluent
public final class Provider implements JsonSerializable<Provider> {
    /*
     * <p>Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric and created in the same
     * Amazon Web Services Region as the cluster. If the KMS key was created in a different account, the <a
     * href='https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html'>IAM principal</a> must
     * have access to the KMS key. For more information, see <a
     * href='https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html'>Allowing
     * users in other accounts to use a KMS key</a> in the <i>Key Management Service Developer Guide</i>.</p>
     */
    private String keyArn;

    /**
     * Creates an instance of Provider class.
     */
    public Provider() {
    }

    /**
     * Get the keyArn property: &lt;p&gt;Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be
     * symmetric and created in the same Amazon Web Services Region as the cluster. If the KMS key was created in a
     * different account, the &lt;a
     * href='https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html'&gt;IAM
     * principal&lt;/a&gt; must have access to the KMS key. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html'&gt;Allowing
     * users in other accounts to use a KMS key&lt;/a&gt; in the &lt;i&gt;Key Management Service Developer
     * Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the keyArn value.
     */
    public String keyArn() {
        return this.keyArn;
    }

    /**
     * Set the keyArn property: &lt;p&gt;Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be
     * symmetric and created in the same Amazon Web Services Region as the cluster. If the KMS key was created in a
     * different account, the &lt;a
     * href='https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html'&gt;IAM
     * principal&lt;/a&gt; must have access to the KMS key. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html'&gt;Allowing
     * users in other accounts to use a KMS key&lt;/a&gt; in the &lt;i&gt;Key Management Service Developer
     * Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param keyArn the keyArn value to set.
     * @return the Provider object itself.
     */
    public Provider withKeyArn(String keyArn) {
        this.keyArn = keyArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyArn", this.keyArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Provider from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Provider if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Provider.
     */
    public static Provider fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Provider deserializedProvider = new Provider();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyArn".equals(fieldName)) {
                    deserializedProvider.keyArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvider;
        });
    }
}
