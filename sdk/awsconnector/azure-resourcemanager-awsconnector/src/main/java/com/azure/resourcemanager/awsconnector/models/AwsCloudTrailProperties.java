// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsCloudTrailTrail.
 */
@Fluent
public final class AwsCloudTrailProperties implements JsonSerializable<AwsCloudTrailProperties> {
    /*
     * The advanced event selectors that were used to select events for the data store.
     */
    private List<AdvancedEventSelector> advancedEventSelectors;

    /*
     * Property arn
     */
    private String arn;

    /*
     * Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group
     * to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
     */
    private String cloudWatchLogsLogGroupArn;

    /*
     * Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
     */
    private String cloudWatchLogsRoleArn;

    /*
     * Specifies whether log file validation is enabled. The default is false.
     */
    private Boolean enableLogFileValidation;

    /*
     * Use event selectors to further specify the management and data event settings for your trail. By default, trails
     * created without specific event selectors will be configured to log all read and write management events, and no
     * data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For
     * each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't
     * match any event selector, the trail doesn't log the event. You can configure up to five event selectors for a
     * trail.
     */
    private List<EventSelector> eventSelectors;

    /*
     * Specifies whether the trail is publishing events from global services such as IAM to the log files.
     */
    private Boolean includeGlobalServiceEvents;

    /*
     * Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an
     * existing trail.
     */
    private List<InsightSelector> insightSelectors;

    /*
     * Whether the CloudTrail is currently logging AWS API calls.
     */
    private Boolean isLogging;

    /*
     * Specifies whether the trail applies only to the current region or to all regions. The default is false. If the
     * trail exists only in the current region and this value is set to true, shadow trails (replications of the trail)
     * will be created in the other regions. If the trail exists in all regions and this value is set to false, the
     * trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As
     * a best practice, consider using trails that log events in all regions.
     */
    private Boolean isMultiRegionTrail;

    /*
     * Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the
     * current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account
     * that is the master account for an organization in AWS Organizations.
     */
    private Boolean isOrganizationTrail;

    /*
     * Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name
     * prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique
     * identifier.
     */
    private String kmsKeyId;

    /*
     * Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming
     * Requirements.
     */
    private String s3BucketName;

    /*
     * Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file
     * delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
     */
    private String s3KeyPrefix;

    /*
     * Property snsTopicArn
     */
    private String snsTopicArn;

    /*
     * Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is
     * 256 characters.
     */
    private String snsTopicName;

    /*
     * Property tags
     */
    private List<Tag> tags;

    /*
     * Property trailName
     */
    private String trailName;

    /**
     * Creates an instance of AwsCloudTrailProperties class.
     */
    public AwsCloudTrailProperties() {
    }

    /**
     * Get the advancedEventSelectors property: The advanced event selectors that were used to select events for the
     * data store.
     * 
     * @return the advancedEventSelectors value.
     */
    public List<AdvancedEventSelector> advancedEventSelectors() {
        return this.advancedEventSelectors;
    }

    /**
     * Set the advancedEventSelectors property: The advanced event selectors that were used to select events for the
     * data store.
     * 
     * @param advancedEventSelectors the advancedEventSelectors value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withAdvancedEventSelectors(List<AdvancedEventSelector> advancedEventSelectors) {
        this.advancedEventSelectors = advancedEventSelectors;
        return this;
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the cloudWatchLogsLogGroupArn property: Specifies a log group name using an Amazon Resource Name (ARN), a
     * unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless
     * you specify CloudWatchLogsRoleArn.
     * 
     * @return the cloudWatchLogsLogGroupArn value.
     */
    public String cloudWatchLogsLogGroupArn() {
        return this.cloudWatchLogsLogGroupArn;
    }

    /**
     * Set the cloudWatchLogsLogGroupArn property: Specifies a log group name using an Amazon Resource Name (ARN), a
     * unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless
     * you specify CloudWatchLogsRoleArn.
     * 
     * @param cloudWatchLogsLogGroupArn the cloudWatchLogsLogGroupArn value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withCloudWatchLogsLogGroupArn(String cloudWatchLogsLogGroupArn) {
        this.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn;
        return this;
    }

    /**
     * Get the cloudWatchLogsRoleArn property: Specifies the role for the CloudWatch Logs endpoint to assume to write to
     * a user's log group.
     * 
     * @return the cloudWatchLogsRoleArn value.
     */
    public String cloudWatchLogsRoleArn() {
        return this.cloudWatchLogsRoleArn;
    }

    /**
     * Set the cloudWatchLogsRoleArn property: Specifies the role for the CloudWatch Logs endpoint to assume to write to
     * a user's log group.
     * 
     * @param cloudWatchLogsRoleArn the cloudWatchLogsRoleArn value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withCloudWatchLogsRoleArn(String cloudWatchLogsRoleArn) {
        this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
        return this;
    }

    /**
     * Get the enableLogFileValidation property: Specifies whether log file validation is enabled. The default is false.
     * 
     * @return the enableLogFileValidation value.
     */
    public Boolean enableLogFileValidation() {
        return this.enableLogFileValidation;
    }

    /**
     * Set the enableLogFileValidation property: Specifies whether log file validation is enabled. The default is false.
     * 
     * @param enableLogFileValidation the enableLogFileValidation value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withEnableLogFileValidation(Boolean enableLogFileValidation) {
        this.enableLogFileValidation = enableLogFileValidation;
        return this;
    }

    /**
     * Get the eventSelectors property: Use event selectors to further specify the management and data event settings
     * for your trail. By default, trails created without specific event selectors will be configured to log all read
     * and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the
     * event selector for all trails. For each trail, if the event matches any event selector, the trail processes and
     * logs the event. If the event doesn't match any event selector, the trail doesn't log the event. You can configure
     * up to five event selectors for a trail.
     * 
     * @return the eventSelectors value.
     */
    public List<EventSelector> eventSelectors() {
        return this.eventSelectors;
    }

    /**
     * Set the eventSelectors property: Use event selectors to further specify the management and data event settings
     * for your trail. By default, trails created without specific event selectors will be configured to log all read
     * and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the
     * event selector for all trails. For each trail, if the event matches any event selector, the trail processes and
     * logs the event. If the event doesn't match any event selector, the trail doesn't log the event. You can configure
     * up to five event selectors for a trail.
     * 
     * @param eventSelectors the eventSelectors value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withEventSelectors(List<EventSelector> eventSelectors) {
        this.eventSelectors = eventSelectors;
        return this;
    }

    /**
     * Get the includeGlobalServiceEvents property: Specifies whether the trail is publishing events from global
     * services such as IAM to the log files.
     * 
     * @return the includeGlobalServiceEvents value.
     */
    public Boolean includeGlobalServiceEvents() {
        return this.includeGlobalServiceEvents;
    }

    /**
     * Set the includeGlobalServiceEvents property: Specifies whether the trail is publishing events from global
     * services such as IAM to the log files.
     * 
     * @param includeGlobalServiceEvents the includeGlobalServiceEvents value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withIncludeGlobalServiceEvents(Boolean includeGlobalServiceEvents) {
        this.includeGlobalServiceEvents = includeGlobalServiceEvents;
        return this;
    }

    /**
     * Get the insightSelectors property: Lets you enable Insights event logging by specifying the Insights selectors
     * that you want to enable on an existing trail.
     * 
     * @return the insightSelectors value.
     */
    public List<InsightSelector> insightSelectors() {
        return this.insightSelectors;
    }

    /**
     * Set the insightSelectors property: Lets you enable Insights event logging by specifying the Insights selectors
     * that you want to enable on an existing trail.
     * 
     * @param insightSelectors the insightSelectors value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withInsightSelectors(List<InsightSelector> insightSelectors) {
        this.insightSelectors = insightSelectors;
        return this;
    }

    /**
     * Get the isLogging property: Whether the CloudTrail is currently logging AWS API calls.
     * 
     * @return the isLogging value.
     */
    public Boolean isLogging() {
        return this.isLogging;
    }

    /**
     * Set the isLogging property: Whether the CloudTrail is currently logging AWS API calls.
     * 
     * @param isLogging the isLogging value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withIsLogging(Boolean isLogging) {
        this.isLogging = isLogging;
        return this;
    }

    /**
     * Get the isMultiRegionTrail property: Specifies whether the trail applies only to the current region or to all
     * regions. The default is false. If the trail exists only in the current region and this value is set to true,
     * shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all
     * regions and this value is set to false, the trail will remain in the region where it was created, and its shadow
     * trails in other regions will be deleted. As a best practice, consider using trails that log events in all
     * regions.
     * 
     * @return the isMultiRegionTrail value.
     */
    public Boolean isMultiRegionTrail() {
        return this.isMultiRegionTrail;
    }

    /**
     * Set the isMultiRegionTrail property: Specifies whether the trail applies only to the current region or to all
     * regions. The default is false. If the trail exists only in the current region and this value is set to true,
     * shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all
     * regions and this value is set to false, the trail will remain in the region where it was created, and its shadow
     * trails in other regions will be deleted. As a best practice, consider using trails that log events in all
     * regions.
     * 
     * @param isMultiRegionTrail the isMultiRegionTrail value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withIsMultiRegionTrail(Boolean isMultiRegionTrail) {
        this.isMultiRegionTrail = isMultiRegionTrail;
        return this;
    }

    /**
     * Get the isOrganizationTrail property: Specifies whether the trail is created for all accounts in an organization
     * in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the
     * call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
     * 
     * @return the isOrganizationTrail value.
     */
    public Boolean isOrganizationTrail() {
        return this.isOrganizationTrail;
    }

    /**
     * Set the isOrganizationTrail property: Specifies whether the trail is created for all accounts in an organization
     * in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the
     * call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
     * 
     * @param isOrganizationTrail the isOrganizationTrail value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withIsOrganizationTrail(Boolean isOrganizationTrail) {
        this.isOrganizationTrail = isOrganizationTrail;
        return this;
    }

    /**
     * Get the kmsKeyId property: Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value
     * can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or
     * a globally unique identifier.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value
     * can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or
     * a globally unique identifier.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the s3BucketName property: Specifies the name of the Amazon S3 bucket designated for publishing log files.
     * See Amazon S3 Bucket Naming Requirements.
     * 
     * @return the s3BucketName value.
     */
    public String s3BucketName() {
        return this.s3BucketName;
    }

    /**
     * Set the s3BucketName property: Specifies the name of the Amazon S3 bucket designated for publishing log files.
     * See Amazon S3 Bucket Naming Requirements.
     * 
     * @param s3BucketName the s3BucketName value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withS3BucketName(String s3BucketName) {
        this.s3BucketName = s3BucketName;
        return this;
    }

    /**
     * Get the s3KeyPrefix property: Specifies the Amazon S3 key prefix that comes after the name of the bucket you have
     * designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length
     * is 200 characters.
     * 
     * @return the s3KeyPrefix value.
     */
    public String s3KeyPrefix() {
        return this.s3KeyPrefix;
    }

    /**
     * Set the s3KeyPrefix property: Specifies the Amazon S3 key prefix that comes after the name of the bucket you have
     * designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length
     * is 200 characters.
     * 
     * @param s3KeyPrefix the s3KeyPrefix value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withS3KeyPrefix(String s3KeyPrefix) {
        this.s3KeyPrefix = s3KeyPrefix;
        return this;
    }

    /**
     * Get the snsTopicArn property: Property snsTopicArn.
     * 
     * @return the snsTopicArn value.
     */
    public String snsTopicArn() {
        return this.snsTopicArn;
    }

    /**
     * Set the snsTopicArn property: Property snsTopicArn.
     * 
     * @param snsTopicArn the snsTopicArn value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withSnsTopicArn(String snsTopicArn) {
        this.snsTopicArn = snsTopicArn;
        return this;
    }

    /**
     * Get the snsTopicName property: Specifies the name of the Amazon SNS topic defined for notification of log file
     * delivery. The maximum length is 256 characters.
     * 
     * @return the snsTopicName value.
     */
    public String snsTopicName() {
        return this.snsTopicName;
    }

    /**
     * Set the snsTopicName property: Specifies the name of the Amazon SNS topic defined for notification of log file
     * delivery. The maximum length is 256 characters.
     * 
     * @param snsTopicName the snsTopicName value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withSnsTopicName(String snsTopicName) {
        this.snsTopicName = snsTopicName;
        return this;
    }

    /**
     * Get the tags property: Property tags.
     * 
     * @return the tags value.
     */
    public List<Tag> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Property tags.
     * 
     * @param tags the tags value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withTags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the trailName property: Property trailName.
     * 
     * @return the trailName value.
     */
    public String trailName() {
        return this.trailName;
    }

    /**
     * Set the trailName property: Property trailName.
     * 
     * @param trailName the trailName value to set.
     * @return the AwsCloudTrailProperties object itself.
     */
    public AwsCloudTrailProperties withTrailName(String trailName) {
        this.trailName = trailName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (advancedEventSelectors() != null) {
            advancedEventSelectors().forEach(e -> e.validate());
        }
        if (eventSelectors() != null) {
            eventSelectors().forEach(e -> e.validate());
        }
        if (insightSelectors() != null) {
            insightSelectors().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("advancedEventSelectors", this.advancedEventSelectors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("cloudWatchLogsLogGroupArn", this.cloudWatchLogsLogGroupArn);
        jsonWriter.writeStringField("cloudWatchLogsRoleArn", this.cloudWatchLogsRoleArn);
        jsonWriter.writeBooleanField("enableLogFileValidation", this.enableLogFileValidation);
        jsonWriter.writeArrayField("eventSelectors", this.eventSelectors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("includeGlobalServiceEvents", this.includeGlobalServiceEvents);
        jsonWriter.writeArrayField("insightSelectors", this.insightSelectors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("isLogging", this.isLogging);
        jsonWriter.writeBooleanField("isMultiRegionTrail", this.isMultiRegionTrail);
        jsonWriter.writeBooleanField("isOrganizationTrail", this.isOrganizationTrail);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("s3BucketName", this.s3BucketName);
        jsonWriter.writeStringField("s3KeyPrefix", this.s3KeyPrefix);
        jsonWriter.writeStringField("snsTopicArn", this.snsTopicArn);
        jsonWriter.writeStringField("snsTopicName", this.snsTopicName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("trailName", this.trailName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsCloudTrailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsCloudTrailProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsCloudTrailProperties.
     */
    public static AwsCloudTrailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsCloudTrailProperties deserializedAwsCloudTrailProperties = new AwsCloudTrailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("advancedEventSelectors".equals(fieldName)) {
                    List<AdvancedEventSelector> advancedEventSelectors
                        = reader.readArray(reader1 -> AdvancedEventSelector.fromJson(reader1));
                    deserializedAwsCloudTrailProperties.advancedEventSelectors = advancedEventSelectors;
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.arn = reader.getString();
                } else if ("cloudWatchLogsLogGroupArn".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.cloudWatchLogsLogGroupArn = reader.getString();
                } else if ("cloudWatchLogsRoleArn".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.cloudWatchLogsRoleArn = reader.getString();
                } else if ("enableLogFileValidation".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.enableLogFileValidation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("eventSelectors".equals(fieldName)) {
                    List<EventSelector> eventSelectors = reader.readArray(reader1 -> EventSelector.fromJson(reader1));
                    deserializedAwsCloudTrailProperties.eventSelectors = eventSelectors;
                } else if ("includeGlobalServiceEvents".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.includeGlobalServiceEvents
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("insightSelectors".equals(fieldName)) {
                    List<InsightSelector> insightSelectors
                        = reader.readArray(reader1 -> InsightSelector.fromJson(reader1));
                    deserializedAwsCloudTrailProperties.insightSelectors = insightSelectors;
                } else if ("isLogging".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.isLogging = reader.getNullable(JsonReader::getBoolean);
                } else if ("isMultiRegionTrail".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.isMultiRegionTrail = reader.getNullable(JsonReader::getBoolean);
                } else if ("isOrganizationTrail".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.isOrganizationTrail
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.kmsKeyId = reader.getString();
                } else if ("s3BucketName".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.s3BucketName = reader.getString();
                } else if ("s3KeyPrefix".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.s3KeyPrefix = reader.getString();
                } else if ("snsTopicArn".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.snsTopicArn = reader.getString();
                } else if ("snsTopicName".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.snsTopicName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<Tag> tags = reader.readArray(reader1 -> Tag.fromJson(reader1));
                    deserializedAwsCloudTrailProperties.tags = tags;
                } else if ("trailName".equals(fieldName)) {
                    deserializedAwsCloudTrailProperties.trailName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsCloudTrailProperties;
        });
    }
}
