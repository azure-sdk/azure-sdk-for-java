// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ApplicationResourceLifecycleConfig.
 */
@Fluent
public final class ApplicationResourceLifecycleConfig implements JsonSerializable<ApplicationResourceLifecycleConfig> {
    /*
     * The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is
     * required the first time that you provide a ResourceLifecycleConfig for the application. After you provide it
     * once, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again.
     * You can, however, specify it in subsequent updates to change the Service Role to another value.
     */
    private String serviceRole;

    /*
     * Defines lifecycle settings for application versions.
     */
    private ApplicationVersionLifecycleConfig versionLifecycleConfig;

    /**
     * Creates an instance of ApplicationResourceLifecycleConfig class.
     */
    public ApplicationResourceLifecycleConfig() {
    }

    /**
     * Get the serviceRole property: The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The
     * ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application.
     * After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need
     * to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another
     * value.
     * 
     * @return the serviceRole value.
     */
    public String serviceRole() {
        return this.serviceRole;
    }

    /**
     * Set the serviceRole property: The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The
     * ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application.
     * After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need
     * to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another
     * value.
     * 
     * @param serviceRole the serviceRole value to set.
     * @return the ApplicationResourceLifecycleConfig object itself.
     */
    public ApplicationResourceLifecycleConfig withServiceRole(String serviceRole) {
        this.serviceRole = serviceRole;
        return this;
    }

    /**
     * Get the versionLifecycleConfig property: Defines lifecycle settings for application versions.
     * 
     * @return the versionLifecycleConfig value.
     */
    public ApplicationVersionLifecycleConfig versionLifecycleConfig() {
        return this.versionLifecycleConfig;
    }

    /**
     * Set the versionLifecycleConfig property: Defines lifecycle settings for application versions.
     * 
     * @param versionLifecycleConfig the versionLifecycleConfig value to set.
     * @return the ApplicationResourceLifecycleConfig object itself.
     */
    public ApplicationResourceLifecycleConfig
        withVersionLifecycleConfig(ApplicationVersionLifecycleConfig versionLifecycleConfig) {
        this.versionLifecycleConfig = versionLifecycleConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (versionLifecycleConfig() != null) {
            versionLifecycleConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceRole", this.serviceRole);
        jsonWriter.writeJsonField("versionLifecycleConfig", this.versionLifecycleConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationResourceLifecycleConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationResourceLifecycleConfig if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationResourceLifecycleConfig.
     */
    public static ApplicationResourceLifecycleConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationResourceLifecycleConfig deserializedApplicationResourceLifecycleConfig
                = new ApplicationResourceLifecycleConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceRole".equals(fieldName)) {
                    deserializedApplicationResourceLifecycleConfig.serviceRole = reader.getString();
                } else if ("versionLifecycleConfig".equals(fieldName)) {
                    deserializedApplicationResourceLifecycleConfig.versionLifecycleConfig
                        = ApplicationVersionLifecycleConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationResourceLifecycleConfig;
        });
    }
}
