// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of DeploymentController.
 */
@Fluent
public final class DeploymentController implements JsonSerializable<DeploymentController> {
    /*
     * The deployment controller type to use. There are three deployment controller types available: + ECS The rolling
     * update (ECS) deployment type involves replacing the current running version of the container with the latest
     * version. The number of containers Amazon ECS adds or removes from the service during a rolling update is
     * controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as
     * specified in the DeploymentConfiguration. + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the
     * blue/green deployment model powered by , which allows you to verify a new deployment of a service before sending
     * production traffic to it. + EXTERNAL The external (EXTERNAL) deployment type enables you to use any third-party
     * deployment controller for full control over the deployment process for an Amazon ECS service.
     */
    private DeploymentControllerType type;

    /**
     * Creates an instance of DeploymentController class.
     */
    public DeploymentController() {
    }

    /**
     * Get the type property: The deployment controller type to use. There are three deployment controller types
     * available: + ECS The rolling update (ECS) deployment type involves replacing the current running version of the
     * container with the latest version. The number of containers Amazon ECS adds or removes from the service during a
     * rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a
     * service deployment, as specified in the DeploymentConfiguration. + CODE_DEPLOY The blue/green (CODE_DEPLOY)
     * deployment type uses the blue/green deployment model powered by , which allows you to verify a new deployment of
     * a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL) deployment type enables you
     * to use any third-party deployment controller for full control over the deployment process for an Amazon ECS
     * service.
     * 
     * @return the type value.
     */
    public DeploymentControllerType type() {
        return this.type;
    }

    /**
     * Set the type property: The deployment controller type to use. There are three deployment controller types
     * available: + ECS The rolling update (ECS) deployment type involves replacing the current running version of the
     * container with the latest version. The number of containers Amazon ECS adds or removes from the service during a
     * rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a
     * service deployment, as specified in the DeploymentConfiguration. + CODE_DEPLOY The blue/green (CODE_DEPLOY)
     * deployment type uses the blue/green deployment model powered by , which allows you to verify a new deployment of
     * a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL) deployment type enables you
     * to use any third-party deployment controller for full control over the deployment process for an Amazon ECS
     * service.
     * 
     * @param type the type value to set.
     * @return the DeploymentController object itself.
     */
    public DeploymentController withType(DeploymentControllerType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentController from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentController if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentController.
     */
    public static DeploymentController fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentController deserializedDeploymentController = new DeploymentController();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedDeploymentController.type = DeploymentControllerType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentController;
        });
    }
}
