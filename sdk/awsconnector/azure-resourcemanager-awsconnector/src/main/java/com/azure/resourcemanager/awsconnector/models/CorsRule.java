// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of CorsRule.
 */
@Fluent
public final class CorsRule implements JsonSerializable<CorsRule> {
    /*
     * Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a
     * preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers
     * that are allowed.
     */
    private List<String> allowedHeaders;

    /*
     * An HTTP method that you allow the origin to run. *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` |
     * ``DELETE``
     */
    private List<CorsRuleAllowedMethods> allowedMethods;

    /*
     * One or more origins you want customers to be able to access the bucket from.
     */
    private List<String> allowedOrigins;

    /*
     * One or more headers in the response that you want customers to be able to access from their applications (for
     * example, from a JavaScript ``XMLHttpRequest`` object).
     */
    private List<String> exposedHeaders;

    /*
     * A unique identifier for this rule. The value must be no more than 255 characters.
     */
    private String id;

    /*
     * The time in seconds that your browser is to cache the preflight response for the specified resource.
     */
    private Integer maxAge;

    /**
     * Creates an instance of CorsRule class.
     */
    public CorsRule() {
    }

    /**
     * Get the allowedHeaders property: Headers that are specified in the ``Access-Control-Request-Headers`` header.
     * These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3
     * returns any requested headers that are allowed.
     * 
     * @return the allowedHeaders value.
     */
    public List<String> allowedHeaders() {
        return this.allowedHeaders;
    }

    /**
     * Set the allowedHeaders property: Headers that are specified in the ``Access-Control-Request-Headers`` header.
     * These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3
     * returns any requested headers that are allowed.
     * 
     * @param allowedHeaders the allowedHeaders value to set.
     * @return the CorsRule object itself.
     */
    public CorsRule withAllowedHeaders(List<String> allowedHeaders) {
        this.allowedHeaders = allowedHeaders;
        return this;
    }

    /**
     * Get the allowedMethods property: An HTTP method that you allow the origin to run. *Allowed values*: ``GET`` |
     * ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``.
     * 
     * @return the allowedMethods value.
     */
    public List<CorsRuleAllowedMethods> allowedMethods() {
        return this.allowedMethods;
    }

    /**
     * Set the allowedMethods property: An HTTP method that you allow the origin to run. *Allowed values*: ``GET`` |
     * ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``.
     * 
     * @param allowedMethods the allowedMethods value to set.
     * @return the CorsRule object itself.
     */
    public CorsRule withAllowedMethods(List<CorsRuleAllowedMethods> allowedMethods) {
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * Get the allowedOrigins property: One or more origins you want customers to be able to access the bucket from.
     * 
     * @return the allowedOrigins value.
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * Set the allowedOrigins property: One or more origins you want customers to be able to access the bucket from.
     * 
     * @param allowedOrigins the allowedOrigins value to set.
     * @return the CorsRule object itself.
     */
    public CorsRule withAllowedOrigins(List<String> allowedOrigins) {
        this.allowedOrigins = allowedOrigins;
        return this;
    }

    /**
     * Get the exposedHeaders property: One or more headers in the response that you want customers to be able to access
     * from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).
     * 
     * @return the exposedHeaders value.
     */
    public List<String> exposedHeaders() {
        return this.exposedHeaders;
    }

    /**
     * Set the exposedHeaders property: One or more headers in the response that you want customers to be able to access
     * from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).
     * 
     * @param exposedHeaders the exposedHeaders value to set.
     * @return the CorsRule object itself.
     */
    public CorsRule withExposedHeaders(List<String> exposedHeaders) {
        this.exposedHeaders = exposedHeaders;
        return this;
    }

    /**
     * Get the id property: A unique identifier for this rule. The value must be no more than 255 characters.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: A unique identifier for this rule. The value must be no more than 255 characters.
     * 
     * @param id the id value to set.
     * @return the CorsRule object itself.
     */
    public CorsRule withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the maxAge property: The time in seconds that your browser is to cache the preflight response for the
     * specified resource.
     * 
     * @return the maxAge value.
     */
    public Integer maxAge() {
        return this.maxAge;
    }

    /**
     * Set the maxAge property: The time in seconds that your browser is to cache the preflight response for the
     * specified resource.
     * 
     * @param maxAge the maxAge value to set.
     * @return the CorsRule object itself.
     */
    public CorsRule withMaxAge(Integer maxAge) {
        this.maxAge = maxAge;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedHeaders", this.allowedHeaders,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("allowedMethods", this.allowedMethods,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("allowedOrigins", this.allowedOrigins,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("exposedHeaders", this.exposedHeaders,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("maxAge", this.maxAge);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CorsRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CorsRule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CorsRule.
     */
    public static CorsRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CorsRule deserializedCorsRule = new CorsRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedHeaders".equals(fieldName)) {
                    List<String> allowedHeaders = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorsRule.allowedHeaders = allowedHeaders;
                } else if ("allowedMethods".equals(fieldName)) {
                    List<CorsRuleAllowedMethods> allowedMethods
                        = reader.readArray(reader1 -> CorsRuleAllowedMethods.fromString(reader1.getString()));
                    deserializedCorsRule.allowedMethods = allowedMethods;
                } else if ("allowedOrigins".equals(fieldName)) {
                    List<String> allowedOrigins = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorsRule.allowedOrigins = allowedOrigins;
                } else if ("exposedHeaders".equals(fieldName)) {
                    List<String> exposedHeaders = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorsRule.exposedHeaders = exposedHeaders;
                } else if ("id".equals(fieldName)) {
                    deserializedCorsRule.id = reader.getString();
                } else if ("maxAge".equals(fieldName)) {
                    deserializedCorsRule.maxAge = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCorsRule;
        });
    }
}
