// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Disk.
 */
@Fluent
public final class Disk implements JsonSerializable<Disk> {
    /*
     * Instance attached to the disk.
     */
    private String attachedTo;

    /*
     * Attachment state of the disk.
     */
    private String attachmentState;

    /*
     * The names to use for your new Lightsail disk.
     */
    private String diskName;

    /*
     * IOPS of disk.
     */
    private Integer iops;

    /*
     * Is the Attached disk is the system disk of the Instance.
     */
    private Boolean isSystemDisk;

    /*
     * Path of the disk attached to the instance.
     */
    private String path;

    /*
     * Size of the disk attached to the Instance.
     */
    private String sizeInGb;

    /**
     * Creates an instance of Disk class.
     */
    public Disk() {
    }

    /**
     * Get the attachedTo property: Instance attached to the disk.
     * 
     * @return the attachedTo value.
     */
    public String attachedTo() {
        return this.attachedTo;
    }

    /**
     * Set the attachedTo property: Instance attached to the disk.
     * 
     * @param attachedTo the attachedTo value to set.
     * @return the Disk object itself.
     */
    public Disk withAttachedTo(String attachedTo) {
        this.attachedTo = attachedTo;
        return this;
    }

    /**
     * Get the attachmentState property: Attachment state of the disk.
     * 
     * @return the attachmentState value.
     */
    public String attachmentState() {
        return this.attachmentState;
    }

    /**
     * Set the attachmentState property: Attachment state of the disk.
     * 
     * @param attachmentState the attachmentState value to set.
     * @return the Disk object itself.
     */
    public Disk withAttachmentState(String attachmentState) {
        this.attachmentState = attachmentState;
        return this;
    }

    /**
     * Get the diskName property: The names to use for your new Lightsail disk.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Set the diskName property: The names to use for your new Lightsail disk.
     * 
     * @param diskName the diskName value to set.
     * @return the Disk object itself.
     */
    public Disk withDiskName(String diskName) {
        this.diskName = diskName;
        return this;
    }

    /**
     * Get the iops property: IOPS of disk.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: IOPS of disk.
     * 
     * @param iops the iops value to set.
     * @return the Disk object itself.
     */
    public Disk withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the isSystemDisk property: Is the Attached disk is the system disk of the Instance.
     * 
     * @return the isSystemDisk value.
     */
    public Boolean isSystemDisk() {
        return this.isSystemDisk;
    }

    /**
     * Set the isSystemDisk property: Is the Attached disk is the system disk of the Instance.
     * 
     * @param isSystemDisk the isSystemDisk value to set.
     * @return the Disk object itself.
     */
    public Disk withIsSystemDisk(Boolean isSystemDisk) {
        this.isSystemDisk = isSystemDisk;
        return this;
    }

    /**
     * Get the path property: Path of the disk attached to the instance.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Path of the disk attached to the instance.
     * 
     * @param path the path value to set.
     * @return the Disk object itself.
     */
    public Disk withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the sizeInGb property: Size of the disk attached to the Instance.
     * 
     * @return the sizeInGb value.
     */
    public String sizeInGb() {
        return this.sizeInGb;
    }

    /**
     * Set the sizeInGb property: Size of the disk attached to the Instance.
     * 
     * @param sizeInGb the sizeInGb value to set.
     * @return the Disk object itself.
     */
    public Disk withSizeInGb(String sizeInGb) {
        this.sizeInGb = sizeInGb;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("attachedTo", this.attachedTo);
        jsonWriter.writeStringField("attachmentState", this.attachmentState);
        jsonWriter.writeStringField("diskName", this.diskName);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeBooleanField("isSystemDisk", this.isSystemDisk);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("sizeInGb", this.sizeInGb);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Disk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Disk if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Disk.
     */
    public static Disk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Disk deserializedDisk = new Disk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attachedTo".equals(fieldName)) {
                    deserializedDisk.attachedTo = reader.getString();
                } else if ("attachmentState".equals(fieldName)) {
                    deserializedDisk.attachmentState = reader.getString();
                } else if ("diskName".equals(fieldName)) {
                    deserializedDisk.diskName = reader.getString();
                } else if ("iops".equals(fieldName)) {
                    deserializedDisk.iops = reader.getNullable(JsonReader::getInt);
                } else if ("isSystemDisk".equals(fieldName)) {
                    deserializedDisk.isSystemDisk = reader.getNullable(JsonReader::getBoolean);
                } else if ("path".equals(fieldName)) {
                    deserializedDisk.path = reader.getString();
                } else if ("sizeInGb".equals(fieldName)) {
                    deserializedDisk.sizeInGb = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDisk;
        });
    }
}
