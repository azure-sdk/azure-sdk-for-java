// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of RuleVariables.
 */
@Fluent
public final class RuleVariablesModel implements JsonSerializable<RuleVariablesModel> {
    /*
     * Property ruleVariables
     */
    private Map<String, IpSet> ruleVariables;

    /**
     * Creates an instance of RuleVariablesModel class.
     */
    public RuleVariablesModel() {
    }

    /**
     * Get the ruleVariables property: Property ruleVariables.
     * 
     * @return the ruleVariables value.
     */
    public Map<String, IpSet> ruleVariables() {
        return this.ruleVariables;
    }

    /**
     * Set the ruleVariables property: Property ruleVariables.
     * 
     * @param ruleVariables the ruleVariables value to set.
     * @return the RuleVariablesModel object itself.
     */
    public RuleVariablesModel withRuleVariables(Map<String, IpSet> ruleVariables) {
        this.ruleVariables = ruleVariables;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ruleVariables() != null) {
            ruleVariables().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("ruleVariables", this.ruleVariables, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleVariablesModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleVariablesModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuleVariablesModel.
     */
    public static RuleVariablesModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleVariablesModel deserializedRuleVariablesModel = new RuleVariablesModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ruleVariables".equals(fieldName)) {
                    Map<String, IpSet> ruleVariables = reader.readMap(reader1 -> IpSet.fromJson(reader1));
                    deserializedRuleVariablesModel.ruleVariables = ruleVariables;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleVariablesModel;
        });
    }
}
