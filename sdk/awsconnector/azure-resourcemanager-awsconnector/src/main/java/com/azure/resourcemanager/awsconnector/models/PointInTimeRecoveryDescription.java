// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of PointInTimeRecoveryDescription.
 */
@Fluent
public final class PointInTimeRecoveryDescription implements JsonSerializable<PointInTimeRecoveryDescription> {
    /*
     * <p>Specifies the earliest point in time you can restore your table to. You can restore your table to any point in
     * time during the last 35 days. </p>
     */
    private OffsetDateTime earliestRestorableDateTime;

    /*
     * <p> <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. </p>
     */
    private OffsetDateTime latestRestorableDateTime;

    /*
     * <p>The current state of point in time recovery:</p> <ul> <li> <p> <code>ENABLED</code> - Point in time recovery
     * is enabled.</p> </li> <li> <p> <code>DISABLED</code> - Point in time recovery is disabled.</p> </li> </ul>
     */
    private PointInTimeRecoveryStatusEnumValue pointInTimeRecoveryStatus;

    /**
     * Creates an instance of PointInTimeRecoveryDescription class.
     */
    public PointInTimeRecoveryDescription() {
    }

    /**
     * Get the earliestRestorableDateTime property: &lt;p&gt;Specifies the earliest point in time you can restore your
     * table to. You can restore your table to any point in time during the last 35 days. &lt;/p&gt;.
     * 
     * @return the earliestRestorableDateTime value.
     */
    public OffsetDateTime earliestRestorableDateTime() {
        return this.earliestRestorableDateTime;
    }

    /**
     * Set the earliestRestorableDateTime property: &lt;p&gt;Specifies the earliest point in time you can restore your
     * table to. You can restore your table to any point in time during the last 35 days. &lt;/p&gt;.
     * 
     * @param earliestRestorableDateTime the earliestRestorableDateTime value to set.
     * @return the PointInTimeRecoveryDescription object itself.
     */
    public PointInTimeRecoveryDescription withEarliestRestorableDateTime(OffsetDateTime earliestRestorableDateTime) {
        this.earliestRestorableDateTime = earliestRestorableDateTime;
        return this;
    }

    /**
     * Get the latestRestorableDateTime property: &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is
     * typically 5 minutes before the current time. &lt;/p&gt;.
     * 
     * @return the latestRestorableDateTime value.
     */
    public OffsetDateTime latestRestorableDateTime() {
        return this.latestRestorableDateTime;
    }

    /**
     * Set the latestRestorableDateTime property: &lt;p&gt; &lt;code&gt;LatestRestorableDateTime&lt;/code&gt; is
     * typically 5 minutes before the current time. &lt;/p&gt;.
     * 
     * @param latestRestorableDateTime the latestRestorableDateTime value to set.
     * @return the PointInTimeRecoveryDescription object itself.
     */
    public PointInTimeRecoveryDescription withLatestRestorableDateTime(OffsetDateTime latestRestorableDateTime) {
        this.latestRestorableDateTime = latestRestorableDateTime;
        return this;
    }

    /**
     * Get the pointInTimeRecoveryStatus property: &lt;p&gt;The current state of point in time recovery:&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; - Point in time recovery is enabled.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Point in time recovery is
     * disabled.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the pointInTimeRecoveryStatus value.
     */
    public PointInTimeRecoveryStatusEnumValue pointInTimeRecoveryStatus() {
        return this.pointInTimeRecoveryStatus;
    }

    /**
     * Set the pointInTimeRecoveryStatus property: &lt;p&gt;The current state of point in time recovery:&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; - Point in time recovery is enabled.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Point in time recovery is
     * disabled.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param pointInTimeRecoveryStatus the pointInTimeRecoveryStatus value to set.
     * @return the PointInTimeRecoveryDescription object itself.
     */
    public PointInTimeRecoveryDescription
        withPointInTimeRecoveryStatus(PointInTimeRecoveryStatusEnumValue pointInTimeRecoveryStatus) {
        this.pointInTimeRecoveryStatus = pointInTimeRecoveryStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (pointInTimeRecoveryStatus() != null) {
            pointInTimeRecoveryStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("earliestRestorableDateTime",
            this.earliestRestorableDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.earliestRestorableDateTime));
        jsonWriter.writeStringField("latestRestorableDateTime",
            this.latestRestorableDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.latestRestorableDateTime));
        jsonWriter.writeJsonField("pointInTimeRecoveryStatus", this.pointInTimeRecoveryStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PointInTimeRecoveryDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PointInTimeRecoveryDescription if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PointInTimeRecoveryDescription.
     */
    public static PointInTimeRecoveryDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PointInTimeRecoveryDescription deserializedPointInTimeRecoveryDescription
                = new PointInTimeRecoveryDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("earliestRestorableDateTime".equals(fieldName)) {
                    deserializedPointInTimeRecoveryDescription.earliestRestorableDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("latestRestorableDateTime".equals(fieldName)) {
                    deserializedPointInTimeRecoveryDescription.latestRestorableDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("pointInTimeRecoveryStatus".equals(fieldName)) {
                    deserializedPointInTimeRecoveryDescription.pointInTimeRecoveryStatus
                        = PointInTimeRecoveryStatusEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPointInTimeRecoveryDescription;
        });
    }
}
