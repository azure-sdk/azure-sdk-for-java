// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ReplicationTimeValue.
 */
@Fluent
public final class ReplicationTimeValue implements JsonSerializable<ReplicationTimeValue> {
    /*
     * Contains an integer specifying time in minutes. Valid value: 15
     */
    private Integer minutes;

    /**
     * Creates an instance of ReplicationTimeValue class.
     */
    public ReplicationTimeValue() {
    }

    /**
     * Get the minutes property: Contains an integer specifying time in minutes. Valid value: 15.
     * 
     * @return the minutes value.
     */
    public Integer minutes() {
        return this.minutes;
    }

    /**
     * Set the minutes property: Contains an integer specifying time in minutes. Valid value: 15.
     * 
     * @param minutes the minutes value to set.
     * @return the ReplicationTimeValue object itself.
     */
    public ReplicationTimeValue withMinutes(Integer minutes) {
        this.minutes = minutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("minutes", this.minutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationTimeValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationTimeValue if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationTimeValue.
     */
    public static ReplicationTimeValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationTimeValue deserializedReplicationTimeValue = new ReplicationTimeValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minutes".equals(fieldName)) {
                    deserializedReplicationTimeValue.minutes = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationTimeValue;
        });
    }
}
