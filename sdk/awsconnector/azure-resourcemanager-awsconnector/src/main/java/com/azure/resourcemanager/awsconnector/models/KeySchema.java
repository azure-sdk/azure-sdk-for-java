// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of KeySchema.
 */
@Fluent
public final class KeySchema implements JsonSerializable<KeySchema> {
    /*
     * The name of a key attribute.
     */
    private String attributeName;

    /*
     * The role that this key attribute will assume: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key
     * of an item is also known as its *hash attribute*. The term 'hash attribute' derives from DynamoDB's usage of an
     * internal hash function to evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its *range attribute*. The term 'range attribute' derives from the way
     * DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key
     * value.
     */
    private String keyType;

    /**
     * Creates an instance of KeySchema class.
     */
    public KeySchema() {
    }

    /**
     * Get the attributeName property: The name of a key attribute.
     * 
     * @return the attributeName value.
     */
    public String attributeName() {
        return this.attributeName;
    }

    /**
     * Set the attributeName property: The name of a key attribute.
     * 
     * @param attributeName the attributeName value to set.
     * @return the KeySchema object itself.
     */
    public KeySchema withAttributeName(String attributeName) {
        this.attributeName = attributeName;
        return this;
    }

    /**
     * Get the keyType property: The role that this key attribute will assume: + ``HASH`` - partition key + ``RANGE`` -
     * sort key The partition key of an item is also known as its *hash attribute*. The term 'hash attribute' derives
     * from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on
     * their partition key values. The sort key of an item is also known as its *range attribute*. The term 'range
     * attribute' derives from the way DynamoDB stores items with the same partition key physically close together, in
     * sorted order by the sort key value.
     * 
     * @return the keyType value.
     */
    public String keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: The role that this key attribute will assume: + ``HASH`` - partition key + ``RANGE`` -
     * sort key The partition key of an item is also known as its *hash attribute*. The term 'hash attribute' derives
     * from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on
     * their partition key values. The sort key of an item is also known as its *range attribute*. The term 'range
     * attribute' derives from the way DynamoDB stores items with the same partition key physically close together, in
     * sorted order by the sort key value.
     * 
     * @param keyType the keyType value to set.
     * @return the KeySchema object itself.
     */
    public KeySchema withKeyType(String keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("attributeName", this.attributeName);
        jsonWriter.writeStringField("keyType", this.keyType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeySchema from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeySchema if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the KeySchema.
     */
    public static KeySchema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KeySchema deserializedKeySchema = new KeySchema();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributeName".equals(fieldName)) {
                    deserializedKeySchema.attributeName = reader.getString();
                } else if ("keyType".equals(fieldName)) {
                    deserializedKeySchema.keyType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKeySchema;
        });
    }
}
