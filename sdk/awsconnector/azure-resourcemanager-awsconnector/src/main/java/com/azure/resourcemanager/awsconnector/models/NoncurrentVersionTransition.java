// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of NoncurrentVersionTransition.
 */
@Fluent
public final class NoncurrentVersionTransition implements JsonSerializable<NoncurrentVersionTransition> {
    /*
     * Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3
     * will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration
     * elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3
     * User Guide*.
     */
    private Integer newerNoncurrentVersions;

    /*
     * The class of storage used to store the object.
     */
    private NoncurrentVersionTransitionStorageClass storageClass;

    /*
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For
     * information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been
     * Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-
     * calculations) in the *Amazon S3 User Guide*.
     */
    private Integer transitionInDays;

    /**
     * Creates an instance of NoncurrentVersionTransition class.
     */
    public NoncurrentVersionTransition() {
    }

    /**
     * Get the newerNoncurrentVersions property: Specifies how many noncurrent versions S3 will retain. If there are
     * this many more recent noncurrent versions, S3 will take the associated action. For more information about
     * noncurrent versions, see [Lifecycle configuration
     * elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3
     * User Guide*.
     * 
     * @return the newerNoncurrentVersions value.
     */
    public Integer newerNoncurrentVersions() {
        return this.newerNoncurrentVersions;
    }

    /**
     * Set the newerNoncurrentVersions property: Specifies how many noncurrent versions S3 will retain. If there are
     * this many more recent noncurrent versions, S3 will take the associated action. For more information about
     * noncurrent versions, see [Lifecycle configuration
     * elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3
     * User Guide*.
     * 
     * @param newerNoncurrentVersions the newerNoncurrentVersions value to set.
     * @return the NoncurrentVersionTransition object itself.
     */
    public NoncurrentVersionTransition withNewerNoncurrentVersions(Integer newerNoncurrentVersions) {
        this.newerNoncurrentVersions = newerNoncurrentVersions;
        return this;
    }

    /**
     * Get the storageClass property: The class of storage used to store the object.
     * 
     * @return the storageClass value.
     */
    public NoncurrentVersionTransitionStorageClass storageClass() {
        return this.storageClass;
    }

    /**
     * Set the storageClass property: The class of storage used to store the object.
     * 
     * @param storageClass the storageClass value to set.
     * @return the NoncurrentVersionTransition object itself.
     */
    public NoncurrentVersionTransition withStorageClass(NoncurrentVersionTransitionStorageClass storageClass) {
        this.storageClass = storageClass;
        return this;
    }

    /**
     * Get the transitionInDays property: Specifies the number of days an object is noncurrent before Amazon S3 can
     * perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3
     * Calculates How Long an Object Has Been
     * Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
     * in the *Amazon S3 User Guide*.
     * 
     * @return the transitionInDays value.
     */
    public Integer transitionInDays() {
        return this.transitionInDays;
    }

    /**
     * Set the transitionInDays property: Specifies the number of days an object is noncurrent before Amazon S3 can
     * perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3
     * Calculates How Long an Object Has Been
     * Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations)
     * in the *Amazon S3 User Guide*.
     * 
     * @param transitionInDays the transitionInDays value to set.
     * @return the NoncurrentVersionTransition object itself.
     */
    public NoncurrentVersionTransition withTransitionInDays(Integer transitionInDays) {
        this.transitionInDays = transitionInDays;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("newerNoncurrentVersions", this.newerNoncurrentVersions);
        jsonWriter.writeStringField("storageClass", this.storageClass == null ? null : this.storageClass.toString());
        jsonWriter.writeNumberField("transitionInDays", this.transitionInDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NoncurrentVersionTransition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NoncurrentVersionTransition if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NoncurrentVersionTransition.
     */
    public static NoncurrentVersionTransition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NoncurrentVersionTransition deserializedNoncurrentVersionTransition = new NoncurrentVersionTransition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("newerNoncurrentVersions".equals(fieldName)) {
                    deserializedNoncurrentVersionTransition.newerNoncurrentVersions
                        = reader.getNullable(JsonReader::getInt);
                } else if ("storageClass".equals(fieldName)) {
                    deserializedNoncurrentVersionTransition.storageClass
                        = NoncurrentVersionTransitionStorageClass.fromString(reader.getString());
                } else if ("transitionInDays".equals(fieldName)) {
                    deserializedNoncurrentVersionTransition.transitionInDays = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNoncurrentVersionTransition;
        });
    }
}
