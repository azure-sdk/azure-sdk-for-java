// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of GeoLocation.
 */
@Fluent
public final class GeoLocation implements JsonSerializable<GeoLocation> {
    /*
     * <p>The two-letter code for the continent.</p> <p>Amazon Route 53 supports the following continent codes:</p> <ul>
     * <li> <p> <b>AF</b>: Africa</p> </li> <li> <p> <b>AN</b>: Antarctica</p> </li> <li> <p> <b>AS</b>: Asia</p> </li>
     * <li> <p> <b>EU</b>: Europe</p> </li> <li> <p> <b>OC</b>: Oceania</p> </li> <li> <p> <b>NA</b>: North America</p>
     * </li> <li> <p> <b>SA</b>: South America</p> </li> </ul> <p>Constraint: Specifying <code>ContinentCode</code> with
     * either <code>CountryCode</code> or <code>SubdivisionCode</code> returns an <code>InvalidInput</code> error.</p>
     */
    private String continentCode;

    /*
     * <p>For geolocation resource record sets, the two-letter code for a country.</p> <p>Amazon Route 53 uses the
     * two-letter country codes that are specified in <a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2'>ISO
     * standard 3166-1 alpha-2</a>.</p> <p>Route 53 also supports the country code <b>UA</b> for Ukraine.</p>
     */
    private String countryCode;

    /*
     * <p>For geolocation resource record sets, the two-letter code for a state of the United States. Route 53 doesn't
     * support any other values for <code>SubdivisionCode</code>. For a list of state abbreviations, see <a
     * href='https://pe.usps.com/text/pub28/28apb.htm'>Appendix B: Two–Letter State and Possession Abbreviations</a> on
     * the United States Postal Service website. </p> <p>If you specify <code>subdivisioncode</code>, you must also
     * specify <code>US</code> for <code>CountryCode</code>. </p>
     */
    private String subdivisionCode;

    /**
     * Creates an instance of GeoLocation class.
     */
    public GeoLocation() {
    }

    /**
     * Get the continentCode property: &lt;p&gt;The two-letter code for the continent.&lt;/p&gt; &lt;p&gt;Amazon Route
     * 53 supports the following continent codes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AF&lt;/b&gt;:
     * Africa&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AN&lt;/b&gt;: Antarctica&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;AS&lt;/b&gt;: Asia&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;EU&lt;/b&gt;: Europe&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;OC&lt;/b&gt;: Oceania&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NA&lt;/b&gt;: North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;SA&lt;/b&gt;: South America&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraint: Specifying
     * &lt;code&gt;ContinentCode&lt;/code&gt; with either &lt;code&gt;CountryCode&lt;/code&gt; or
     * &lt;code&gt;SubdivisionCode&lt;/code&gt; returns an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt;.
     * 
     * @return the continentCode value.
     */
    public String continentCode() {
        return this.continentCode;
    }

    /**
     * Set the continentCode property: &lt;p&gt;The two-letter code for the continent.&lt;/p&gt; &lt;p&gt;Amazon Route
     * 53 supports the following continent codes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AF&lt;/b&gt;:
     * Africa&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;AN&lt;/b&gt;: Antarctica&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;AS&lt;/b&gt;: Asia&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;EU&lt;/b&gt;: Europe&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;OC&lt;/b&gt;: Oceania&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NA&lt;/b&gt;: North America&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;SA&lt;/b&gt;: South America&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraint: Specifying
     * &lt;code&gt;ContinentCode&lt;/code&gt; with either &lt;code&gt;CountryCode&lt;/code&gt; or
     * &lt;code&gt;SubdivisionCode&lt;/code&gt; returns an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt;.
     * 
     * @param continentCode the continentCode value to set.
     * @return the GeoLocation object itself.
     */
    public GeoLocation withContinentCode(String continentCode) {
        this.continentCode = continentCode;
        return this;
    }

    /**
     * Get the countryCode property: &lt;p&gt;For geolocation resource record sets, the two-letter code for a
     * country.&lt;/p&gt; &lt;p&gt;Amazon Route 53 uses the two-letter country codes that are specified in &lt;a
     * href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2'&gt;ISO standard 3166-1 alpha-2&lt;/a&gt;.&lt;/p&gt;
     * &lt;p&gt;Route 53 also supports the country code &lt;b&gt;UA&lt;/b&gt; for Ukraine.&lt;/p&gt;.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Set the countryCode property: &lt;p&gt;For geolocation resource record sets, the two-letter code for a
     * country.&lt;/p&gt; &lt;p&gt;Amazon Route 53 uses the two-letter country codes that are specified in &lt;a
     * href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2'&gt;ISO standard 3166-1 alpha-2&lt;/a&gt;.&lt;/p&gt;
     * &lt;p&gt;Route 53 also supports the country code &lt;b&gt;UA&lt;/b&gt; for Ukraine.&lt;/p&gt;.
     * 
     * @param countryCode the countryCode value to set.
     * @return the GeoLocation object itself.
     */
    public GeoLocation withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Get the subdivisionCode property: &lt;p&gt;For geolocation resource record sets, the two-letter code for a state
     * of the United States. Route 53 doesn't support any other values for &lt;code&gt;SubdivisionCode&lt;/code&gt;. For
     * a list of state abbreviations, see &lt;a href='https://pe.usps.com/text/pub28/28apb.htm'&gt;Appendix B:
     * Two–Letter State and Possession Abbreviations&lt;/a&gt; on the United States Postal Service website. &lt;/p&gt;
     * &lt;p&gt;If you specify &lt;code&gt;subdivisioncode&lt;/code&gt;, you must also specify
     * &lt;code&gt;US&lt;/code&gt; for &lt;code&gt;CountryCode&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the subdivisionCode value.
     */
    public String subdivisionCode() {
        return this.subdivisionCode;
    }

    /**
     * Set the subdivisionCode property: &lt;p&gt;For geolocation resource record sets, the two-letter code for a state
     * of the United States. Route 53 doesn't support any other values for &lt;code&gt;SubdivisionCode&lt;/code&gt;. For
     * a list of state abbreviations, see &lt;a href='https://pe.usps.com/text/pub28/28apb.htm'&gt;Appendix B:
     * Two–Letter State and Possession Abbreviations&lt;/a&gt; on the United States Postal Service website. &lt;/p&gt;
     * &lt;p&gt;If you specify &lt;code&gt;subdivisioncode&lt;/code&gt;, you must also specify
     * &lt;code&gt;US&lt;/code&gt; for &lt;code&gt;CountryCode&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param subdivisionCode the subdivisionCode value to set.
     * @return the GeoLocation object itself.
     */
    public GeoLocation withSubdivisionCode(String subdivisionCode) {
        this.subdivisionCode = subdivisionCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("continentCode", this.continentCode);
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeStringField("subdivisionCode", this.subdivisionCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeoLocation.
     */
    public static GeoLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoLocation deserializedGeoLocation = new GeoLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("continentCode".equals(fieldName)) {
                    deserializedGeoLocation.continentCode = reader.getString();
                } else if ("countryCode".equals(fieldName)) {
                    deserializedGeoLocation.countryCode = reader.getString();
                } else if ("subdivisionCode".equals(fieldName)) {
                    deserializedGeoLocation.subdivisionCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeoLocation;
        });
    }
}
