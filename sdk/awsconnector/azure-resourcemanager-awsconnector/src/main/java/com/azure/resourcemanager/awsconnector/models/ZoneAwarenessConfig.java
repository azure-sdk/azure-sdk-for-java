// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ZoneAwarenessConfig.
 */
@Fluent
public final class ZoneAwarenessConfig implements JsonSerializable<ZoneAwarenessConfig> {
    /*
     * <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use.
     * Valid values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be
     * equal to number of subnets.</p>
     */
    private Integer availabilityZoneCount;

    /**
     * Creates an instance of ZoneAwarenessConfig class.
     */
    public ZoneAwarenessConfig() {
    }

    /**
     * Get the availabilityZoneCount property: &lt;p&gt;If you enabled multiple Availability Zones, this value is the
     * number of zones that you want the domain to use. Valid values are &lt;code&gt;2&lt;/code&gt; and
     * &lt;code&gt;3&lt;/code&gt;. If your domain is provisioned within a VPC, this value be equal to number of
     * subnets.&lt;/p&gt;.
     * 
     * @return the availabilityZoneCount value.
     */
    public Integer availabilityZoneCount() {
        return this.availabilityZoneCount;
    }

    /**
     * Set the availabilityZoneCount property: &lt;p&gt;If you enabled multiple Availability Zones, this value is the
     * number of zones that you want the domain to use. Valid values are &lt;code&gt;2&lt;/code&gt; and
     * &lt;code&gt;3&lt;/code&gt;. If your domain is provisioned within a VPC, this value be equal to number of
     * subnets.&lt;/p&gt;.
     * 
     * @param availabilityZoneCount the availabilityZoneCount value to set.
     * @return the ZoneAwarenessConfig object itself.
     */
    public ZoneAwarenessConfig withAvailabilityZoneCount(Integer availabilityZoneCount) {
        this.availabilityZoneCount = availabilityZoneCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("availabilityZoneCount", this.availabilityZoneCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ZoneAwarenessConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ZoneAwarenessConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ZoneAwarenessConfig.
     */
    public static ZoneAwarenessConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ZoneAwarenessConfig deserializedZoneAwarenessConfig = new ZoneAwarenessConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZoneCount".equals(fieldName)) {
                    deserializedZoneAwarenessConfig.availabilityZoneCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedZoneAwarenessConfig;
        });
    }
}
