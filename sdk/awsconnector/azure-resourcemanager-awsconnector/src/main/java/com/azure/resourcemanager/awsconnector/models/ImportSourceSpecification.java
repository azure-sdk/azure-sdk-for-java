// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ImportSourceSpecification.
 */
@Fluent
public final class ImportSourceSpecification implements JsonSerializable<ImportSourceSpecification> {
    /*
     * Type of compression to be used on the input coming from the imported table.
     */
    private String inputCompressionType;

    /*
     * The format of the source data. Valid values for ``ImportFormat`` are ``CSV``, ``DYNAMODB_JSON`` or ``ION``.
     */
    private String inputFormat;

    /*
     * Additional properties that specify how the input is formatted, The format options for the data that was imported
     * into the target table. There is one value, CsvOption.
     */
    private InputFormatOptions inputFormatOptions;

    /*
     * The S3 bucket that provides the source for the import. The S3 bucket that is being imported from.
     */
    private S3BucketSource s3BucketSource;

    /**
     * Creates an instance of ImportSourceSpecification class.
     */
    public ImportSourceSpecification() {
    }

    /**
     * Get the inputCompressionType property: Type of compression to be used on the input coming from the imported
     * table.
     * 
     * @return the inputCompressionType value.
     */
    public String inputCompressionType() {
        return this.inputCompressionType;
    }

    /**
     * Set the inputCompressionType property: Type of compression to be used on the input coming from the imported
     * table.
     * 
     * @param inputCompressionType the inputCompressionType value to set.
     * @return the ImportSourceSpecification object itself.
     */
    public ImportSourceSpecification withInputCompressionType(String inputCompressionType) {
        this.inputCompressionType = inputCompressionType;
        return this;
    }

    /**
     * Get the inputFormat property: The format of the source data. Valid values for ``ImportFormat`` are ``CSV``,
     * ``DYNAMODB_JSON`` or ``ION``.
     * 
     * @return the inputFormat value.
     */
    public String inputFormat() {
        return this.inputFormat;
    }

    /**
     * Set the inputFormat property: The format of the source data. Valid values for ``ImportFormat`` are ``CSV``,
     * ``DYNAMODB_JSON`` or ``ION``.
     * 
     * @param inputFormat the inputFormat value to set.
     * @return the ImportSourceSpecification object itself.
     */
    public ImportSourceSpecification withInputFormat(String inputFormat) {
        this.inputFormat = inputFormat;
        return this;
    }

    /**
     * Get the inputFormatOptions property: Additional properties that specify how the input is formatted, The format
     * options for the data that was imported into the target table. There is one value, CsvOption.
     * 
     * @return the inputFormatOptions value.
     */
    public InputFormatOptions inputFormatOptions() {
        return this.inputFormatOptions;
    }

    /**
     * Set the inputFormatOptions property: Additional properties that specify how the input is formatted, The format
     * options for the data that was imported into the target table. There is one value, CsvOption.
     * 
     * @param inputFormatOptions the inputFormatOptions value to set.
     * @return the ImportSourceSpecification object itself.
     */
    public ImportSourceSpecification withInputFormatOptions(InputFormatOptions inputFormatOptions) {
        this.inputFormatOptions = inputFormatOptions;
        return this;
    }

    /**
     * Get the s3BucketSource property: The S3 bucket that provides the source for the import. The S3 bucket that is
     * being imported from.
     * 
     * @return the s3BucketSource value.
     */
    public S3BucketSource s3BucketSource() {
        return this.s3BucketSource;
    }

    /**
     * Set the s3BucketSource property: The S3 bucket that provides the source for the import. The S3 bucket that is
     * being imported from.
     * 
     * @param s3BucketSource the s3BucketSource value to set.
     * @return the ImportSourceSpecification object itself.
     */
    public ImportSourceSpecification withS3BucketSource(S3BucketSource s3BucketSource) {
        this.s3BucketSource = s3BucketSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputFormatOptions() != null) {
            inputFormatOptions().validate();
        }
        if (s3BucketSource() != null) {
            s3BucketSource().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inputCompressionType", this.inputCompressionType);
        jsonWriter.writeStringField("inputFormat", this.inputFormat);
        jsonWriter.writeJsonField("inputFormatOptions", this.inputFormatOptions);
        jsonWriter.writeJsonField("s3BucketSource", this.s3BucketSource);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImportSourceSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImportSourceSpecification if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImportSourceSpecification.
     */
    public static ImportSourceSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImportSourceSpecification deserializedImportSourceSpecification = new ImportSourceSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputCompressionType".equals(fieldName)) {
                    deserializedImportSourceSpecification.inputCompressionType = reader.getString();
                } else if ("inputFormat".equals(fieldName)) {
                    deserializedImportSourceSpecification.inputFormat = reader.getString();
                } else if ("inputFormatOptions".equals(fieldName)) {
                    deserializedImportSourceSpecification.inputFormatOptions = InputFormatOptions.fromJson(reader);
                } else if ("s3BucketSource".equals(fieldName)) {
                    deserializedImportSourceSpecification.s3BucketSource = S3BucketSource.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImportSourceSpecification;
        });
    }
}
