// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of EventSelector.
 */
@Fluent
public final class EventSelector implements JsonSerializable<EventSelector> {
    /*
     * Property dataResources
     */
    private List<DataResource> dataResources;

    /*
     * An optional list of service event sources from which you do not want management events to be logged on your
     * trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management
     * Service events by containing 'kms.amazonaws.com'. By default, ExcludeManagementEventSources is empty, and AWS KMS
     * events are included in events that are logged to your trail.
     */
    private List<String> excludeManagementEventSources;

    /*
     * Specify if you want your event selector to include management events for your trail.
     */
    private Boolean includeManagementEvents;

    /*
     * Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2
     * GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
     */
    private EventSelectorReadWriteType readWriteType;

    /**
     * Creates an instance of EventSelector class.
     */
    public EventSelector() {
    }

    /**
     * Get the dataResources property: Property dataResources.
     * 
     * @return the dataResources value.
     */
    public List<DataResource> dataResources() {
        return this.dataResources;
    }

    /**
     * Set the dataResources property: Property dataResources.
     * 
     * @param dataResources the dataResources value to set.
     * @return the EventSelector object itself.
     */
    public EventSelector withDataResources(List<DataResource> dataResources) {
        this.dataResources = dataResources;
        return this;
    }

    /**
     * Get the excludeManagementEventSources property: An optional list of service event sources from which you do not
     * want management events to be logged on your trail. In this release, the list can be empty (disables the filter),
     * or it can filter out AWS Key Management Service events by containing 'kms.amazonaws.com'. By default,
     * ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
     * 
     * @return the excludeManagementEventSources value.
     */
    public List<String> excludeManagementEventSources() {
        return this.excludeManagementEventSources;
    }

    /**
     * Set the excludeManagementEventSources property: An optional list of service event sources from which you do not
     * want management events to be logged on your trail. In this release, the list can be empty (disables the filter),
     * or it can filter out AWS Key Management Service events by containing 'kms.amazonaws.com'. By default,
     * ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
     * 
     * @param excludeManagementEventSources the excludeManagementEventSources value to set.
     * @return the EventSelector object itself.
     */
    public EventSelector withExcludeManagementEventSources(List<String> excludeManagementEventSources) {
        this.excludeManagementEventSources = excludeManagementEventSources;
        return this;
    }

    /**
     * Get the includeManagementEvents property: Specify if you want your event selector to include management events
     * for your trail.
     * 
     * @return the includeManagementEvents value.
     */
    public Boolean includeManagementEvents() {
        return this.includeManagementEvents;
    }

    /**
     * Set the includeManagementEvents property: Specify if you want your event selector to include management events
     * for your trail.
     * 
     * @param includeManagementEvents the includeManagementEvents value to set.
     * @return the EventSelector object itself.
     */
    public EventSelector withIncludeManagementEvents(Boolean includeManagementEvents) {
        this.includeManagementEvents = includeManagementEvents;
        return this;
    }

    /**
     * Get the readWriteType property: Specify if you want your trail to log read-only events, write-only events, or
     * all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API
     * operation.
     * 
     * @return the readWriteType value.
     */
    public EventSelectorReadWriteType readWriteType() {
        return this.readWriteType;
    }

    /**
     * Set the readWriteType property: Specify if you want your trail to log read-only events, write-only events, or
     * all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API
     * operation.
     * 
     * @param readWriteType the readWriteType value to set.
     * @return the EventSelector object itself.
     */
    public EventSelector withReadWriteType(EventSelectorReadWriteType readWriteType) {
        this.readWriteType = readWriteType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataResources() != null) {
            dataResources().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dataResources", this.dataResources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("excludeManagementEventSources", this.excludeManagementEventSources,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("includeManagementEvents", this.includeManagementEvents);
        jsonWriter.writeStringField("readWriteType", this.readWriteType == null ? null : this.readWriteType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventSelector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventSelector.
     */
    public static EventSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventSelector deserializedEventSelector = new EventSelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataResources".equals(fieldName)) {
                    List<DataResource> dataResources = reader.readArray(reader1 -> DataResource.fromJson(reader1));
                    deserializedEventSelector.dataResources = dataResources;
                } else if ("excludeManagementEventSources".equals(fieldName)) {
                    List<String> excludeManagementEventSources = reader.readArray(reader1 -> reader1.getString());
                    deserializedEventSelector.excludeManagementEventSources = excludeManagementEventSources;
                } else if ("includeManagementEvents".equals(fieldName)) {
                    deserializedEventSelector.includeManagementEvents = reader.getNullable(JsonReader::getBoolean);
                } else if ("readWriteType".equals(fieldName)) {
                    deserializedEventSelector.readWriteType = EventSelectorReadWriteType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventSelector;
        });
    }
}
