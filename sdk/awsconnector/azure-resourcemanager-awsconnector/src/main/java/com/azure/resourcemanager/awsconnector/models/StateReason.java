// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of StateReason.
 */
@Fluent
public final class StateReason implements JsonSerializable<StateReason> {
    /*
     * <p>The reason code for the state change.</p>
     */
    private String code;

    /*
     * <p>The message for the state change.</p> <ul> <li> <p> <code>Server.InsufficientInstanceCapacity</code>: There
     * was insufficient capacity available to satisfy the launch request.</p> </li> <li> <p>
     * <code>Server.InternalError</code>: An internal error caused the instance to terminate during launch.</p> </li>
     * <li> <p> <code>Server.ScheduledStop</code>: The instance was stopped due to a scheduled retirement.</p> </li>
     * <li> <p> <code>Server.SpotInstanceShutdown</code>: The instance was stopped because the number of Spot requests
     * with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase
     * in the Spot price.</p> </li> <li> <p> <code>Server.SpotInstanceTermination</code>: The instance was terminated
     * because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded
     * available capacity or because of an increase in the Spot price.</p> </li> <li> <p>
     * <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down from the operating system of the
     * instance.</p> </li> <li> <p> <code>Client.InstanceTerminated</code>: The instance was terminated or rebooted
     * during AMI creation.</p> </li> <li> <p> <code>Client.InternalError</code>: A client error caused the instance to
     * terminate during launch.</p> </li> <li> <p> <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot
     * was not found.</p> </li> <li> <p> <code>Client.UserInitiatedHibernate</code>: Hibernation was initiated on the
     * instance.</p> </li> <li> <p> <code>Client.UserInitiatedShutdown</code>: The instance was shut down using the
     * Amazon EC2 API.</p> </li> <li> <p> <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS
     * volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.</p> </li>
     * </ul>
     */
    private String message;

    /**
     * Creates an instance of StateReason class.
     */
    public StateReason() {
    }

    /**
     * Get the code property: &lt;p&gt;The reason code for the state change.&lt;/p&gt;.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: &lt;p&gt;The reason code for the state change.&lt;/p&gt;.
     * 
     * @param code the code value to set.
     * @return the StateReason object itself.
     */
    public StateReason withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: &lt;p&gt;The message for the state change.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.InsufficientInstanceCapacity&lt;/code&gt;: There was insufficient capacity available to
     * satisfy the launch request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.InternalError&lt;/code&gt;: An internal error caused the instance to terminate during
     * launch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Server.ScheduledStop&lt;/code&gt;: The instance
     * was stopped due to a scheduled retirement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.SpotInstanceShutdown&lt;/code&gt;: The instance was stopped because the number of Spot
     * requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an
     * increase in the Spot price.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.SpotInstanceTermination&lt;/code&gt;: The instance was terminated because the number of Spot
     * requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an
     * increase in the Spot price.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.InstanceInitiatedShutdown&lt;/code&gt;: The instance was shut down from the operating system
     * of the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Client.InstanceTerminated&lt;/code&gt;:
     * The instance was terminated or rebooted during AMI creation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.InternalError&lt;/code&gt;: A client error caused the instance to terminate during
     * launch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Client.InvalidSnapshot.NotFound&lt;/code&gt;: The
     * specified snapshot was not found.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.UserInitiatedHibernate&lt;/code&gt;: Hibernation was initiated on the instance.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Client.UserInitiatedShutdown&lt;/code&gt;: The instance was shut
     * down using the Amazon EC2 API.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.VolumeLimitExceeded&lt;/code&gt;: The limit on the number of EBS volumes or total storage was
     * exceeded. Decrease usage or request an increase in your account limits.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: &lt;p&gt;The message for the state change.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.InsufficientInstanceCapacity&lt;/code&gt;: There was insufficient capacity available to
     * satisfy the launch request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.InternalError&lt;/code&gt;: An internal error caused the instance to terminate during
     * launch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Server.ScheduledStop&lt;/code&gt;: The instance
     * was stopped due to a scheduled retirement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.SpotInstanceShutdown&lt;/code&gt;: The instance was stopped because the number of Spot
     * requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an
     * increase in the Spot price.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Server.SpotInstanceTermination&lt;/code&gt;: The instance was terminated because the number of Spot
     * requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an
     * increase in the Spot price.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.InstanceInitiatedShutdown&lt;/code&gt;: The instance was shut down from the operating system
     * of the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Client.InstanceTerminated&lt;/code&gt;:
     * The instance was terminated or rebooted during AMI creation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.InternalError&lt;/code&gt;: A client error caused the instance to terminate during
     * launch.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Client.InvalidSnapshot.NotFound&lt;/code&gt;: The
     * specified snapshot was not found.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.UserInitiatedHibernate&lt;/code&gt;: Hibernation was initiated on the instance.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Client.UserInitiatedShutdown&lt;/code&gt;: The instance was shut
     * down using the Amazon EC2 API.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;Client.VolumeLimitExceeded&lt;/code&gt;: The limit on the number of EBS volumes or total storage was
     * exceeded. Decrease usage or request an increase in your account limits.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param message the message value to set.
     * @return the StateReason object itself.
     */
    public StateReason withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StateReason from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StateReason if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StateReason.
     */
    public static StateReason fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StateReason deserializedStateReason = new StateReason();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedStateReason.code = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedStateReason.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStateReason;
        });
    }
}
