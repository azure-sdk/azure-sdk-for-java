// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2FlowLog.
 */
@Fluent
public final class AwsEc2FlowLogProperties implements JsonSerializable<AwsEc2FlowLogProperties> {
    /*
     * The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
     */
    private String deliverCrossAccountRole;

    /*
     * The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your
     * account. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify
     * DeliverLogsPermissionArn or LogGroupName.
     */
    private String deliverLogsPermissionArn;

    /*
     * Property destinationOptions
     */
    private DestinationOptionsModelProperties destinationOptions;

    /*
     * The Flow Log ID
     */
    private String id;

    /*
     * Specifies the destination to which the flow log data is to be published. Flow log data can be published to a
     * CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this
     * parameter depends on the value specified for LogDestinationType.
     */
    private String logDestination;

    /*
     * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published
     * to CloudWatch Logs or Amazon S3.
     */
    private LogDestinationType logDestinationType;

    /*
     * The fields to include in the flow log record, in the order in which they should appear.
     */
    private String logFormat;

    /*
     * The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify
     * LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
     */
    private String logGroupName;

    /*
     * The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record.
     * You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     */
    private Integer maxAggregationInterval;

    /*
     * The ID of the subnet, network interface, or VPC for which you want to create a flow log.
     */
    private String resourceId;

    /*
     * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId
     * property, specify VPC for this property.
     */
    private ResourceType resourceType;

    /*
     * The tags to apply to the flow logs.
     */
    private List<TagAutoGenerated10> tags;

    /*
     * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
     */
    private TrafficType trafficType;

    /**
     * Creates an instance of AwsEc2FlowLogProperties class.
     */
    public AwsEc2FlowLogProperties() {
    }

    /**
     * Get the deliverCrossAccountRole property: The ARN of the IAM role that allows Amazon EC2 to publish flow logs
     * across accounts.
     * 
     * @return the deliverCrossAccountRole value.
     */
    public String deliverCrossAccountRole() {
        return this.deliverCrossAccountRole;
    }

    /**
     * Set the deliverCrossAccountRole property: The ARN of the IAM role that allows Amazon EC2 to publish flow logs
     * across accounts.
     * 
     * @param deliverCrossAccountRole the deliverCrossAccountRole value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withDeliverCrossAccountRole(String deliverCrossAccountRole) {
        this.deliverCrossAccountRole = deliverCrossAccountRole;
        return this;
    }

    /**
     * Get the deliverLogsPermissionArn property: The ARN for the IAM role that permits Amazon EC2 to publish flow logs
     * to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3 or kinesis-data-firehose,
     * do not specify DeliverLogsPermissionArn or LogGroupName.
     * 
     * @return the deliverLogsPermissionArn value.
     */
    public String deliverLogsPermissionArn() {
        return this.deliverLogsPermissionArn;
    }

    /**
     * Set the deliverLogsPermissionArn property: The ARN for the IAM role that permits Amazon EC2 to publish flow logs
     * to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3 or kinesis-data-firehose,
     * do not specify DeliverLogsPermissionArn or LogGroupName.
     * 
     * @param deliverLogsPermissionArn the deliverLogsPermissionArn value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withDeliverLogsPermissionArn(String deliverLogsPermissionArn) {
        this.deliverLogsPermissionArn = deliverLogsPermissionArn;
        return this;
    }

    /**
     * Get the destinationOptions property: Property destinationOptions.
     * 
     * @return the destinationOptions value.
     */
    public DestinationOptionsModelProperties destinationOptions() {
        return this.destinationOptions;
    }

    /**
     * Set the destinationOptions property: Property destinationOptions.
     * 
     * @param destinationOptions the destinationOptions value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withDestinationOptions(DestinationOptionsModelProperties destinationOptions) {
        this.destinationOptions = destinationOptions;
        return this;
    }

    /**
     * Get the id property: The Flow Log ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The Flow Log ID.
     * 
     * @param id the id value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the logDestination property: Specifies the destination to which the flow log data is to be published. Flow
     * log data can be published to a CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The
     * value specified for this parameter depends on the value specified for LogDestinationType.
     * 
     * @return the logDestination value.
     */
    public String logDestination() {
        return this.logDestination;
    }

    /**
     * Set the logDestination property: Specifies the destination to which the flow log data is to be published. Flow
     * log data can be published to a CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The
     * value specified for this parameter depends on the value specified for LogDestinationType.
     * 
     * @param logDestination the logDestination value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withLogDestination(String logDestination) {
        this.logDestination = logDestination;
        return this;
    }

    /**
     * Get the logDestinationType property: Specifies the type of destination to which the flow log data is to be
     * published. Flow log data can be published to CloudWatch Logs or Amazon S3.
     * 
     * @return the logDestinationType value.
     */
    public LogDestinationType logDestinationType() {
        return this.logDestinationType;
    }

    /**
     * Set the logDestinationType property: Specifies the type of destination to which the flow log data is to be
     * published. Flow log data can be published to CloudWatch Logs or Amazon S3.
     * 
     * @param logDestinationType the logDestinationType value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withLogDestinationType(LogDestinationType logDestinationType) {
        this.logDestinationType = logDestinationType;
        return this;
    }

    /**
     * Get the logFormat property: The fields to include in the flow log record, in the order in which they should
     * appear.
     * 
     * @return the logFormat value.
     */
    public String logFormat() {
        return this.logFormat;
    }

    /**
     * Set the logFormat property: The fields to include in the flow log record, in the order in which they should
     * appear.
     * 
     * @param logFormat the logFormat value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withLogFormat(String logFormat) {
        this.logFormat = logFormat;
        return this;
    }

    /**
     * Get the logGroupName property: The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes
     * your flow logs. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify
     * DeliverLogsPermissionArn or LogGroupName.
     * 
     * @return the logGroupName value.
     */
    public String logGroupName() {
        return this.logGroupName;
    }

    /**
     * Set the logGroupName property: The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes
     * your flow logs. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify
     * DeliverLogsPermissionArn or LogGroupName.
     * 
     * @param logGroupName the logGroupName value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withLogGroupName(String logGroupName) {
        this.logGroupName = logGroupName;
        return this;
    }

    /**
     * Get the maxAggregationInterval property: The maximum interval of time during which a flow of packets is captured
     * and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     * 
     * @return the maxAggregationInterval value.
     */
    public Integer maxAggregationInterval() {
        return this.maxAggregationInterval;
    }

    /**
     * Set the maxAggregationInterval property: The maximum interval of time during which a flow of packets is captured
     * and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
     * 
     * @param maxAggregationInterval the maxAggregationInterval value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withMaxAggregationInterval(Integer maxAggregationInterval) {
        this.maxAggregationInterval = maxAggregationInterval;
        return this;
    }

    /**
     * Get the resourceId property: The ID of the subnet, network interface, or VPC for which you want to create a flow
     * log.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The ID of the subnet, network interface, or VPC for which you want to create a flow
     * log.
     * 
     * @param resourceId the resourceId value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the resourceType property: The type of resource for which to create the flow log. For example, if you
     * specified a VPC ID for the ResourceId property, specify VPC for this property.
     * 
     * @return the resourceType value.
     */
    public ResourceType resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The type of resource for which to create the flow log. For example, if you
     * specified a VPC ID for the ResourceId property, specify VPC for this property.
     * 
     * @param resourceType the resourceType value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withResourceType(ResourceType resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the tags property: The tags to apply to the flow logs.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated10> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags to apply to the flow logs.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withTags(List<TagAutoGenerated10> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the trafficType property: The type of traffic to log. You can log traffic that the resource accepts or
     * rejects, or all traffic.
     * 
     * @return the trafficType value.
     */
    public TrafficType trafficType() {
        return this.trafficType;
    }

    /**
     * Set the trafficType property: The type of traffic to log. You can log traffic that the resource accepts or
     * rejects, or all traffic.
     * 
     * @param trafficType the trafficType value to set.
     * @return the AwsEc2FlowLogProperties object itself.
     */
    public AwsEc2FlowLogProperties withTrafficType(TrafficType trafficType) {
        this.trafficType = trafficType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destinationOptions() != null) {
            destinationOptions().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deliverCrossAccountRole", this.deliverCrossAccountRole);
        jsonWriter.writeStringField("deliverLogsPermissionArn", this.deliverLogsPermissionArn);
        jsonWriter.writeJsonField("destinationOptions", this.destinationOptions);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("logDestination", this.logDestination);
        jsonWriter.writeStringField("logDestinationType",
            this.logDestinationType == null ? null : this.logDestinationType.toString());
        jsonWriter.writeStringField("logFormat", this.logFormat);
        jsonWriter.writeStringField("logGroupName", this.logGroupName);
        jsonWriter.writeNumberField("maxAggregationInterval", this.maxAggregationInterval);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("resourceType", this.resourceType == null ? null : this.resourceType.toString());
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("trafficType", this.trafficType == null ? null : this.trafficType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2FlowLogProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2FlowLogProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2FlowLogProperties.
     */
    public static AwsEc2FlowLogProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2FlowLogProperties deserializedAwsEc2FlowLogProperties = new AwsEc2FlowLogProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deliverCrossAccountRole".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.deliverCrossAccountRole = reader.getString();
                } else if ("deliverLogsPermissionArn".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.deliverLogsPermissionArn = reader.getString();
                } else if ("destinationOptions".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.destinationOptions
                        = DestinationOptionsModelProperties.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.id = reader.getString();
                } else if ("logDestination".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.logDestination = reader.getString();
                } else if ("logDestinationType".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.logDestinationType
                        = LogDestinationType.fromString(reader.getString());
                } else if ("logFormat".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.logFormat = reader.getString();
                } else if ("logGroupName".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.logGroupName = reader.getString();
                } else if ("maxAggregationInterval".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.maxAggregationInterval = reader.getNullable(JsonReader::getInt);
                } else if ("resourceId".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.resourceId = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.resourceType = ResourceType.fromString(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated10> tags = reader.readArray(reader1 -> TagAutoGenerated10.fromJson(reader1));
                    deserializedAwsEc2FlowLogProperties.tags = tags;
                } else if ("trafficType".equals(fieldName)) {
                    deserializedAwsEc2FlowLogProperties.trafficType = TrafficType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2FlowLogProperties;
        });
    }
}
