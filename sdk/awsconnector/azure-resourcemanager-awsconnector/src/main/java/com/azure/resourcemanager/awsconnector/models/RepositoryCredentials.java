// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RepositoryCredentials.
 */
@Fluent
public final class RepositoryCredentials implements JsonSerializable<RepositoryCredentials> {
    /*
     * The Amazon Resource Name (ARN) of the secret containing the private repository credentials. When you use the
     * Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then
     * you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must
     * specify the full ARN of the secret.
     */
    private String credentialsParameter;

    /**
     * Creates an instance of RepositoryCredentials class.
     */
    public RepositoryCredentials() {
    }

    /**
     * Get the credentialsParameter property: The Amazon Resource Name (ARN) of the secret containing the private
     * repository credentials. When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region
     * as the task that you're launching then you can use either the full ARN or the name of the secret. When you use
     * the AWS Management Console, you must specify the full ARN of the secret.
     * 
     * @return the credentialsParameter value.
     */
    public String credentialsParameter() {
        return this.credentialsParameter;
    }

    /**
     * Set the credentialsParameter property: The Amazon Resource Name (ARN) of the secret containing the private
     * repository credentials. When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region
     * as the task that you're launching then you can use either the full ARN or the name of the secret. When you use
     * the AWS Management Console, you must specify the full ARN of the secret.
     * 
     * @param credentialsParameter the credentialsParameter value to set.
     * @return the RepositoryCredentials object itself.
     */
    public RepositoryCredentials withCredentialsParameter(String credentialsParameter) {
        this.credentialsParameter = credentialsParameter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("credentialsParameter", this.credentialsParameter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RepositoryCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RepositoryCredentials if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RepositoryCredentials.
     */
    public static RepositoryCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RepositoryCredentials deserializedRepositoryCredentials = new RepositoryCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("credentialsParameter".equals(fieldName)) {
                    deserializedRepositoryCredentials.credentialsParameter = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRepositoryCredentials;
        });
    }
}
