// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InstanceIpv4Prefix.
 */
@Fluent
public final class InstanceIpv4Prefix implements JsonSerializable<InstanceIpv4Prefix> {
    /*
     * <p>One or more IPv4 prefixes assigned to the network interface.</p>
     */
    private String ipv4Prefix;

    /**
     * Creates an instance of InstanceIpv4Prefix class.
     */
    public InstanceIpv4Prefix() {
    }

    /**
     * Get the ipv4Prefix property: &lt;p&gt;One or more IPv4 prefixes assigned to the network interface.&lt;/p&gt;.
     * 
     * @return the ipv4Prefix value.
     */
    public String ipv4Prefix() {
        return this.ipv4Prefix;
    }

    /**
     * Set the ipv4Prefix property: &lt;p&gt;One or more IPv4 prefixes assigned to the network interface.&lt;/p&gt;.
     * 
     * @param ipv4Prefix the ipv4Prefix value to set.
     * @return the InstanceIpv4Prefix object itself.
     */
    public InstanceIpv4Prefix withIpv4Prefix(String ipv4Prefix) {
        this.ipv4Prefix = ipv4Prefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ipv4Prefix", this.ipv4Prefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceIpv4Prefix from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceIpv4Prefix if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceIpv4Prefix.
     */
    public static InstanceIpv4Prefix fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceIpv4Prefix deserializedInstanceIpv4Prefix = new InstanceIpv4Prefix();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipv4Prefix".equals(fieldName)) {
                    deserializedInstanceIpv4Prefix.ipv4Prefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceIpv4Prefix;
        });
    }
}
