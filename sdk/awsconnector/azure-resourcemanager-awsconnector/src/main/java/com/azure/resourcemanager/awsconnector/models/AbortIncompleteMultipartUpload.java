// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AbortIncompleteMultipartUpload.
 */
@Fluent
public final class AbortIncompleteMultipartUpload implements JsonSerializable<AbortIncompleteMultipartUpload> {
    /*
     * Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
     */
    private Integer daysAfterInitiation;

    /**
     * Creates an instance of AbortIncompleteMultipartUpload class.
     */
    public AbortIncompleteMultipartUpload() {
    }

    /**
     * Get the daysAfterInitiation property: Specifies the number of days after which Amazon S3 stops an incomplete
     * multipart upload.
     * 
     * @return the daysAfterInitiation value.
     */
    public Integer daysAfterInitiation() {
        return this.daysAfterInitiation;
    }

    /**
     * Set the daysAfterInitiation property: Specifies the number of days after which Amazon S3 stops an incomplete
     * multipart upload.
     * 
     * @param daysAfterInitiation the daysAfterInitiation value to set.
     * @return the AbortIncompleteMultipartUpload object itself.
     */
    public AbortIncompleteMultipartUpload withDaysAfterInitiation(Integer daysAfterInitiation) {
        this.daysAfterInitiation = daysAfterInitiation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("daysAfterInitiation", this.daysAfterInitiation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AbortIncompleteMultipartUpload from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AbortIncompleteMultipartUpload if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AbortIncompleteMultipartUpload.
     */
    public static AbortIncompleteMultipartUpload fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AbortIncompleteMultipartUpload deserializedAbortIncompleteMultipartUpload
                = new AbortIncompleteMultipartUpload();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("daysAfterInitiation".equals(fieldName)) {
                    deserializedAbortIncompleteMultipartUpload.daysAfterInitiation
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAbortIncompleteMultipartUpload;
        });
    }
}
