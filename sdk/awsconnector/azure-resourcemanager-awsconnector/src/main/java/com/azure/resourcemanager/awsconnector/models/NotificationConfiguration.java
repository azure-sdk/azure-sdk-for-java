// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of NotificationConfiguration.
 */
@Fluent
public final class NotificationConfiguration implements JsonSerializable<NotificationConfiguration> {
    /*
     * A list of event types that send a notification. Event types can include any of the following types. *Allowed
     * values*: + ``autoscaling:EC2_INSTANCE_LAUNCH`` + ``autoscaling:EC2_INSTANCE_LAUNCH_ERROR`` +
     * ``autoscaling:EC2_INSTANCE_TERMINATE`` + ``autoscaling:EC2_INSTANCE_TERMINATE_ERROR`` +
     * ``autoscaling:TEST_NOTIFICATION``
     */
    private List<String> notificationTypes;

    /*
     * The Amazon Resource Name (ARN) of the Amazon SNS topic.
     */
    private String topicArn;

    /**
     * Creates an instance of NotificationConfiguration class.
     */
    public NotificationConfiguration() {
    }

    /**
     * Get the notificationTypes property: A list of event types that send a notification. Event types can include any
     * of the following types. *Allowed values*: + ``autoscaling:EC2_INSTANCE_LAUNCH`` +
     * ``autoscaling:EC2_INSTANCE_LAUNCH_ERROR`` + ``autoscaling:EC2_INSTANCE_TERMINATE`` +
     * ``autoscaling:EC2_INSTANCE_TERMINATE_ERROR`` + ``autoscaling:TEST_NOTIFICATION``.
     * 
     * @return the notificationTypes value.
     */
    public List<String> notificationTypes() {
        return this.notificationTypes;
    }

    /**
     * Set the notificationTypes property: A list of event types that send a notification. Event types can include any
     * of the following types. *Allowed values*: + ``autoscaling:EC2_INSTANCE_LAUNCH`` +
     * ``autoscaling:EC2_INSTANCE_LAUNCH_ERROR`` + ``autoscaling:EC2_INSTANCE_TERMINATE`` +
     * ``autoscaling:EC2_INSTANCE_TERMINATE_ERROR`` + ``autoscaling:TEST_NOTIFICATION``.
     * 
     * @param notificationTypes the notificationTypes value to set.
     * @return the NotificationConfiguration object itself.
     */
    public NotificationConfiguration withNotificationTypes(List<String> notificationTypes) {
        this.notificationTypes = notificationTypes;
        return this;
    }

    /**
     * Get the topicArn property: The Amazon Resource Name (ARN) of the Amazon SNS topic.
     * 
     * @return the topicArn value.
     */
    public String topicArn() {
        return this.topicArn;
    }

    /**
     * Set the topicArn property: The Amazon Resource Name (ARN) of the Amazon SNS topic.
     * 
     * @param topicArn the topicArn value to set.
     * @return the NotificationConfiguration object itself.
     */
    public NotificationConfiguration withTopicArn(String topicArn) {
        this.topicArn = topicArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("notificationTypes", this.notificationTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("topicARN", this.topicArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationConfiguration.
     */
    public static NotificationConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationConfiguration deserializedNotificationConfiguration = new NotificationConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationTypes".equals(fieldName)) {
                    List<String> notificationTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotificationConfiguration.notificationTypes = notificationTypes;
                } else if ("topicARN".equals(fieldName)) {
                    deserializedNotificationConfiguration.topicArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationConfiguration;
        });
    }
}
