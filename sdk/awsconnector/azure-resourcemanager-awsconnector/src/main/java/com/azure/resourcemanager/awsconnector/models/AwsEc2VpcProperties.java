// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2Vpc.
 */
@Fluent
public final class AwsEc2VpcProperties implements JsonSerializable<AwsEc2VpcProperties> {
    /*
     * The IPv4 network range for the VPC, in CIDR notation. For example, ``10.0.0.0/16``. We modify the specified CIDR
     * block to its canonical form; for example, if you specify ``100.68.0.18/18``, we modify it to ``100.68.0.0/18``.
     * You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
     */
    private String cidrBlock;

    /*
     * Property cidrBlockAssociations
     */
    private List<String> cidrBlockAssociations;

    /*
     * Property defaultNetworkAcl
     */
    private String defaultNetworkAcl;

    /*
     * Property defaultSecurityGroup
     */
    private String defaultSecurityGroup;

    /*
     * Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS
     * hostnames; otherwise, they do not. Disabled by default for nondefault VPCs. For more information, see [DNS
     * attributes in your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support). You can
     * only enable DNS hostnames if you've enabled DNS support.
     */
    private Boolean enableDnsHostnames;

    /*
     * Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS
     * server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range 'plus
     * two' succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP
     * addresses is not enabled. Enabled by default. For more information, see [DNS attributes in your
     * VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
     */
    private Boolean enableDnsSupport;

    /*
     * The allowed tenancy of instances launched into the VPC. + ``default``: An instance launched into the VPC runs on
     * shared hardware by default, unless you explicitly specify a different tenancy during instance launch. +
     * ``dedicated``: An instance launched into the VPC runs on dedicated hardware by default, unless you explicitly
     * specify a tenancy of ``host`` during instance launch. You cannot specify a tenancy of ``default`` during instance
     * launch. Updating ``InstanceTenancy`` requires no replacement only if you are updating its value from
     * ``dedicated`` to ``default``. Updating ``InstanceTenancy`` from ``default`` to ``dedicated`` requires
     * replacement.
     */
    private String instanceTenancy;

    /*
     * The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see [What is
     * IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
     * You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
     */
    private String ipv4IpamPoolId;

    /*
     * The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM)
     * pool. For more information about IPAM, see [What is
     * IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
     */
    private Integer ipv4NetmaskLength;

    /*
     * Property ipv6CidrBlocks
     */
    private List<String> ipv6CidrBlocks;

    /*
     * The tags for the VPC.
     */
    private List<TagAutoGenerated22> tags;

    /*
     * Property vpcId
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2VpcProperties class.
     */
    public AwsEc2VpcProperties() {
    }

    /**
     * Get the cidrBlock property: The IPv4 network range for the VPC, in CIDR notation. For example, ``10.0.0.0/16``.
     * We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we
     * modify it to ``100.68.0.0/18``. You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
     * 
     * @return the cidrBlock value.
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }

    /**
     * Set the cidrBlock property: The IPv4 network range for the VPC, in CIDR notation. For example, ``10.0.0.0/16``.
     * We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we
     * modify it to ``100.68.0.0/18``. You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
     * 
     * @param cidrBlock the cidrBlock value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withCidrBlock(String cidrBlock) {
        this.cidrBlock = cidrBlock;
        return this;
    }

    /**
     * Get the cidrBlockAssociations property: Property cidrBlockAssociations.
     * 
     * @return the cidrBlockAssociations value.
     */
    public List<String> cidrBlockAssociations() {
        return this.cidrBlockAssociations;
    }

    /**
     * Set the cidrBlockAssociations property: Property cidrBlockAssociations.
     * 
     * @param cidrBlockAssociations the cidrBlockAssociations value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withCidrBlockAssociations(List<String> cidrBlockAssociations) {
        this.cidrBlockAssociations = cidrBlockAssociations;
        return this;
    }

    /**
     * Get the defaultNetworkAcl property: Property defaultNetworkAcl.
     * 
     * @return the defaultNetworkAcl value.
     */
    public String defaultNetworkAcl() {
        return this.defaultNetworkAcl;
    }

    /**
     * Set the defaultNetworkAcl property: Property defaultNetworkAcl.
     * 
     * @param defaultNetworkAcl the defaultNetworkAcl value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withDefaultNetworkAcl(String defaultNetworkAcl) {
        this.defaultNetworkAcl = defaultNetworkAcl;
        return this;
    }

    /**
     * Get the defaultSecurityGroup property: Property defaultSecurityGroup.
     * 
     * @return the defaultSecurityGroup value.
     */
    public String defaultSecurityGroup() {
        return this.defaultSecurityGroup;
    }

    /**
     * Set the defaultSecurityGroup property: Property defaultSecurityGroup.
     * 
     * @param defaultSecurityGroup the defaultSecurityGroup value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withDefaultSecurityGroup(String defaultSecurityGroup) {
        this.defaultSecurityGroup = defaultSecurityGroup;
        return this;
    }

    /**
     * Get the enableDnsHostnames property: Indicates whether the instances launched in the VPC get DNS hostnames. If
     * enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs.
     * For more information, see [DNS attributes in your
     * VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support). You can only enable DNS
     * hostnames if you've enabled DNS support.
     * 
     * @return the enableDnsHostnames value.
     */
    public Boolean enableDnsHostnames() {
        return this.enableDnsHostnames;
    }

    /**
     * Set the enableDnsHostnames property: Indicates whether the instances launched in the VPC get DNS hostnames. If
     * enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs.
     * For more information, see [DNS attributes in your
     * VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support). You can only enable DNS
     * hostnames if you've enabled DNS support.
     * 
     * @param enableDnsHostnames the enableDnsHostnames value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withEnableDnsHostnames(Boolean enableDnsHostnames) {
        this.enableDnsHostnames = enableDnsHostnames;
        return this;
    }

    /**
     * Get the enableDnsSupport property: Indicates whether the DNS resolution is supported for the VPC. If enabled,
     * queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the
     * base of the VPC network range 'plus two' succeed. If disabled, the Amazon provided DNS service in the VPC that
     * resolves public DNS hostnames to IP addresses is not enabled. Enabled by default. For more information, see [DNS
     * attributes in your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
     * 
     * @return the enableDnsSupport value.
     */
    public Boolean enableDnsSupport() {
        return this.enableDnsSupport;
    }

    /**
     * Set the enableDnsSupport property: Indicates whether the DNS resolution is supported for the VPC. If enabled,
     * queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the
     * base of the VPC network range 'plus two' succeed. If disabled, the Amazon provided DNS service in the VPC that
     * resolves public DNS hostnames to IP addresses is not enabled. Enabled by default. For more information, see [DNS
     * attributes in your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
     * 
     * @param enableDnsSupport the enableDnsSupport value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withEnableDnsSupport(Boolean enableDnsSupport) {
        this.enableDnsSupport = enableDnsSupport;
        return this;
    }

    /**
     * Get the instanceTenancy property: The allowed tenancy of instances launched into the VPC. + ``default``: An
     * instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different
     * tenancy during instance launch. + ``dedicated``: An instance launched into the VPC runs on dedicated hardware by
     * default, unless you explicitly specify a tenancy of ``host`` during instance launch. You cannot specify a tenancy
     * of ``default`` during instance launch. Updating ``InstanceTenancy`` requires no replacement only if you are
     * updating its value from ``dedicated`` to ``default``. Updating ``InstanceTenancy`` from ``default`` to
     * ``dedicated`` requires replacement.
     * 
     * @return the instanceTenancy value.
     */
    public String instanceTenancy() {
        return this.instanceTenancy;
    }

    /**
     * Set the instanceTenancy property: The allowed tenancy of instances launched into the VPC. + ``default``: An
     * instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different
     * tenancy during instance launch. + ``dedicated``: An instance launched into the VPC runs on dedicated hardware by
     * default, unless you explicitly specify a tenancy of ``host`` during instance launch. You cannot specify a tenancy
     * of ``default`` during instance launch. Updating ``InstanceTenancy`` requires no replacement only if you are
     * updating its value from ``dedicated`` to ``default``. Updating ``InstanceTenancy`` from ``default`` to
     * ``dedicated`` requires replacement.
     * 
     * @param instanceTenancy the instanceTenancy value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withInstanceTenancy(String instanceTenancy) {
        this.instanceTenancy = instanceTenancy;
        return this;
    }

    /**
     * Get the ipv4IpamPoolId property: The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For
     * more information, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the
     * *Amazon VPC IPAM User Guide*. You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
     * 
     * @return the ipv4IpamPoolId value.
     */
    public String ipv4IpamPoolId() {
        return this.ipv4IpamPoolId;
    }

    /**
     * Set the ipv4IpamPoolId property: The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For
     * more information, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the
     * *Amazon VPC IPAM User Guide*. You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
     * 
     * @param ipv4IpamPoolId the ipv4IpamPoolId value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withIpv4IpamPoolId(String ipv4IpamPoolId) {
        this.ipv4IpamPoolId = ipv4IpamPoolId;
        return this;
    }

    /**
     * Get the ipv4NetmaskLength property: The netmask length of the IPv4 CIDR you want to allocate to this VPC from an
     * Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is
     * IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
     * 
     * @return the ipv4NetmaskLength value.
     */
    public Integer ipv4NetmaskLength() {
        return this.ipv4NetmaskLength;
    }

    /**
     * Set the ipv4NetmaskLength property: The netmask length of the IPv4 CIDR you want to allocate to this VPC from an
     * Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is
     * IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
     * 
     * @param ipv4NetmaskLength the ipv4NetmaskLength value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withIpv4NetmaskLength(Integer ipv4NetmaskLength) {
        this.ipv4NetmaskLength = ipv4NetmaskLength;
        return this;
    }

    /**
     * Get the ipv6CidrBlocks property: Property ipv6CidrBlocks.
     * 
     * @return the ipv6CidrBlocks value.
     */
    public List<String> ipv6CidrBlocks() {
        return this.ipv6CidrBlocks;
    }

    /**
     * Set the ipv6CidrBlocks property: Property ipv6CidrBlocks.
     * 
     * @param ipv6CidrBlocks the ipv6CidrBlocks value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withIpv6CidrBlocks(List<String> ipv6CidrBlocks) {
        this.ipv6CidrBlocks = ipv6CidrBlocks;
        return this;
    }

    /**
     * Get the tags property: The tags for the VPC.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated22> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags for the VPC.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withTags(List<TagAutoGenerated22> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcId property: Property vpcId.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: Property vpcId.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2VpcProperties object itself.
     */
    public AwsEc2VpcProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cidrBlock", this.cidrBlock);
        jsonWriter.writeArrayField("cidrBlockAssociations", this.cidrBlockAssociations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("defaultNetworkAcl", this.defaultNetworkAcl);
        jsonWriter.writeStringField("defaultSecurityGroup", this.defaultSecurityGroup);
        jsonWriter.writeBooleanField("enableDnsHostnames", this.enableDnsHostnames);
        jsonWriter.writeBooleanField("enableDnsSupport", this.enableDnsSupport);
        jsonWriter.writeStringField("instanceTenancy", this.instanceTenancy);
        jsonWriter.writeStringField("ipv4IpamPoolId", this.ipv4IpamPoolId);
        jsonWriter.writeNumberField("ipv4NetmaskLength", this.ipv4NetmaskLength);
        jsonWriter.writeArrayField("ipv6CidrBlocks", this.ipv6CidrBlocks,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2VpcProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2VpcProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2VpcProperties.
     */
    public static AwsEc2VpcProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2VpcProperties deserializedAwsEc2VpcProperties = new AwsEc2VpcProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cidrBlock".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.cidrBlock = reader.getString();
                } else if ("cidrBlockAssociations".equals(fieldName)) {
                    List<String> cidrBlockAssociations = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcProperties.cidrBlockAssociations = cidrBlockAssociations;
                } else if ("defaultNetworkAcl".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.defaultNetworkAcl = reader.getString();
                } else if ("defaultSecurityGroup".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.defaultSecurityGroup = reader.getString();
                } else if ("enableDnsHostnames".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.enableDnsHostnames = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableDnsSupport".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.enableDnsSupport = reader.getNullable(JsonReader::getBoolean);
                } else if ("instanceTenancy".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.instanceTenancy = reader.getString();
                } else if ("ipv4IpamPoolId".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.ipv4IpamPoolId = reader.getString();
                } else if ("ipv4NetmaskLength".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.ipv4NetmaskLength = reader.getNullable(JsonReader::getInt);
                } else if ("ipv6CidrBlocks".equals(fieldName)) {
                    List<String> ipv6CidrBlocks = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2VpcProperties.ipv6CidrBlocks = ipv6CidrBlocks;
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated22> tags = reader.readArray(reader1 -> TagAutoGenerated22.fromJson(reader1));
                    deserializedAwsEc2VpcProperties.tags = tags;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2VpcProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2VpcProperties;
        });
    }
}
