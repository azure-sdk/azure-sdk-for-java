// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2VPCPeeringConnection.
 */
@Fluent
public final class AwsEc2VpcPeeringConnectionProperties
    implements JsonSerializable<AwsEc2VpcPeeringConnectionProperties> {
    /*
     * Property id
     */
    private String id;

    /*
     * The AWS account ID of the owner of the accepter VPC.
     */
    private String peerOwnerId;

    /*
     * The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which
     * you make the request.
     */
    private String peerRegion;

    /*
     * The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
     */
    private String peerRoleArn;

    /*
     * The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the
     * request.
     */
    private String peerVpcId;

    /*
     * Property tags
     */
    private List<TagAutoGenerated23> tags;

    /*
     * The ID of the VPC.
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2VpcPeeringConnectionProperties class.
     */
    public AwsEc2VpcPeeringConnectionProperties() {
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the peerOwnerId property: The AWS account ID of the owner of the accepter VPC.
     * 
     * @return the peerOwnerId value.
     */
    public String peerOwnerId() {
        return this.peerOwnerId;
    }

    /**
     * Set the peerOwnerId property: The AWS account ID of the owner of the accepter VPC.
     * 
     * @param peerOwnerId the peerOwnerId value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withPeerOwnerId(String peerOwnerId) {
        this.peerOwnerId = peerOwnerId;
        return this;
    }

    /**
     * Get the peerRegion property: The Region code for the accepter VPC, if the accepter VPC is located in a Region
     * other than the Region in which you make the request.
     * 
     * @return the peerRegion value.
     */
    public String peerRegion() {
        return this.peerRegion;
    }

    /**
     * Set the peerRegion property: The Region code for the accepter VPC, if the accepter VPC is located in a Region
     * other than the Region in which you make the request.
     * 
     * @param peerRegion the peerRegion value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withPeerRegion(String peerRegion) {
        this.peerRegion = peerRegion;
        return this;
    }

    /**
     * Get the peerRoleArn property: The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in
     * another AWS account.
     * 
     * @return the peerRoleArn value.
     */
    public String peerRoleArn() {
        return this.peerRoleArn;
    }

    /**
     * Set the peerRoleArn property: The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in
     * another AWS account.
     * 
     * @param peerRoleArn the peerRoleArn value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withPeerRoleArn(String peerRoleArn) {
        this.peerRoleArn = peerRoleArn;
        return this;
    }

    /**
     * Get the peerVpcId property: The ID of the VPC with which you are creating the VPC peering connection. You must
     * specify this parameter in the request.
     * 
     * @return the peerVpcId value.
     */
    public String peerVpcId() {
        return this.peerVpcId;
    }

    /**
     * Set the peerVpcId property: The ID of the VPC with which you are creating the VPC peering connection. You must
     * specify this parameter in the request.
     * 
     * @param peerVpcId the peerVpcId value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withPeerVpcId(String peerVpcId) {
        this.peerVpcId = peerVpcId;
        return this;
    }

    /**
     * Get the tags property: Property tags.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated23> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Property tags.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withTags(List<TagAutoGenerated23> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcId property: The ID of the VPC.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: The ID of the VPC.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2VpcPeeringConnectionProperties object itself.
     */
    public AwsEc2VpcPeeringConnectionProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("peerOwnerId", this.peerOwnerId);
        jsonWriter.writeStringField("peerRegion", this.peerRegion);
        jsonWriter.writeStringField("peerRoleArn", this.peerRoleArn);
        jsonWriter.writeStringField("peerVpcId", this.peerVpcId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2VpcPeeringConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2VpcPeeringConnectionProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2VpcPeeringConnectionProperties.
     */
    public static AwsEc2VpcPeeringConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2VpcPeeringConnectionProperties deserializedAwsEc2VpcPeeringConnectionProperties
                = new AwsEc2VpcPeeringConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAwsEc2VpcPeeringConnectionProperties.id = reader.getString();
                } else if ("peerOwnerId".equals(fieldName)) {
                    deserializedAwsEc2VpcPeeringConnectionProperties.peerOwnerId = reader.getString();
                } else if ("peerRegion".equals(fieldName)) {
                    deserializedAwsEc2VpcPeeringConnectionProperties.peerRegion = reader.getString();
                } else if ("peerRoleArn".equals(fieldName)) {
                    deserializedAwsEc2VpcPeeringConnectionProperties.peerRoleArn = reader.getString();
                } else if ("peerVpcId".equals(fieldName)) {
                    deserializedAwsEc2VpcPeeringConnectionProperties.peerVpcId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated23> tags = reader.readArray(reader1 -> TagAutoGenerated23.fromJson(reader1));
                    deserializedAwsEc2VpcPeeringConnectionProperties.tags = tags;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2VpcPeeringConnectionProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2VpcPeeringConnectionProperties;
        });
    }
}
