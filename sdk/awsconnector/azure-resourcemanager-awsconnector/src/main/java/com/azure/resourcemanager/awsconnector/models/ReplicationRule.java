// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ReplicationRule.
 */
@Fluent
public final class ReplicationRule implements JsonSerializable<ReplicationRule> {
    /*
     * Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication
     * configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag``
     * element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support
     * replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min
     * -rule-config). For more information about delete marker replication, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using
     * an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently.
     * For more information, see [Backward
     * Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-
     * compat-considerations). Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in
     * your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter``
     * includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3
     * does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min
     * -rule-config). For more information about delete marker replication, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using
     * an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently.
     * For more information, see [Backward
     * Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-
     * compat-considerations).
     */
    private DeleteMarkerReplication deleteMarkerReplication;

    /*
     * A container for information about the replication destination and its configurations including enabling the S3
     * Replication Time Control (S3 RTC). A container for information about the replication destination and its
     * configurations including enabling the S3 Replication Time Control (S3 RTC).
     */
    private ReplicationDestinationAutoGenerated destination;

    /*
     * A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify
     * exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that
     * this is a V2 replication configuration. This field isn't supported in a V1 replication configuration. V1
     * replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration,
     * add the ``Prefix`` directly as a child element of the ``Rule`` element. A filter that identifies the subset of
     * objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``,
     * or an ``And`` child element.
     */
    private ReplicationRuleFilter filter;

    /*
     * A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS
     * CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as
     * 'ID'.
     */
    private String id;

    /*
     * An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix
     * length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1
     * replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element. Replacement
     * must be made for object keys containing special characters (such as carriage returns) when using XML requests.
     * For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-
     * constraints).
     */
    private String prefix;

    /*
     * The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will
     * attempt to replicate objects according to all replication rules. However, if there are two or more rules with the
     * same destination bucket, then objects will be replicated according to the rule with the highest priority. The
     * higher the number, the higher the priority. For more information, see
     * [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
     */
    private Integer priority;

    /*
     * A container that describes additional filters for identifying the source objects that you want to replicate. You
     * can choose to enable or disable the replication of these objects. A container that describes additional filters
     * for identifying the source objects that you want to replicate. You can choose to enable or disable the
     * replication of these objects.
     */
    private SourceSelectionCriteria sourceSelectionCriteria;

    /*
     * Specifies whether the rule is enabled.
     */
    private ReplicationRuleStatus status;

    /**
     * Creates an instance of ReplicationRule class.
     */
    public ReplicationRule() {
    }

    /**
     * Get the deleteMarkerReplication property: Specifies whether Amazon S3 replicates delete markers. If you specify a
     * ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If
     * your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled,
     * because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration,
     * see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config).
     * For more information about delete marker replication, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using
     * an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently.
     * For more information, see [Backward
     * Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
     * Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication
     * configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag``
     * element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support
     * replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config).
     * For more information about delete marker replication, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using
     * an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently.
     * For more information, see [Backward
     * Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
     * 
     * @return the deleteMarkerReplication value.
     */
    public DeleteMarkerReplication deleteMarkerReplication() {
        return this.deleteMarkerReplication;
    }

    /**
     * Set the deleteMarkerReplication property: Specifies whether Amazon S3 replicates delete markers. If you specify a
     * ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If
     * your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled,
     * because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration,
     * see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config).
     * For more information about delete marker replication, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using
     * an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently.
     * For more information, see [Backward
     * Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
     * Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication
     * configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag``
     * element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support
     * replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config).
     * For more information about delete marker replication, see [Basic Rule
     * Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using
     * an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently.
     * For more information, see [Backward
     * Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
     * 
     * @param deleteMarkerReplication the deleteMarkerReplication value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withDeleteMarkerReplication(DeleteMarkerReplication deleteMarkerReplication) {
        this.deleteMarkerReplication = deleteMarkerReplication;
        return this;
    }

    /**
     * Get the destination property: A container for information about the replication destination and its
     * configurations including enabling the S3 Replication Time Control (S3 RTC). A container for information about the
     * replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
     * 
     * @return the destination value.
     */
    public ReplicationDestinationAutoGenerated destination() {
        return this.destination;
    }

    /**
     * Set the destination property: A container for information about the replication destination and its
     * configurations including enabling the S3 Replication Time Control (S3 RTC). A container for information about the
     * replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
     * 
     * @param destination the destination value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withDestination(ReplicationDestinationAutoGenerated destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the filter property: A filter that identifies the subset of objects to which the replication rule applies. A
     * ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter
     * field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication
     * configuration. V1 replication configuration only supports filtering by key prefix. To filter using a V1
     * replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element. A filter that
     * identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one
     * ``Prefix``, ``TagFilter``, or an ``And`` child element.
     * 
     * @return the filter value.
     */
    public ReplicationRuleFilter filter() {
        return this.filter;
    }

    /**
     * Set the filter property: A filter that identifies the subset of objects to which the replication rule applies. A
     * ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter
     * field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication
     * configuration. V1 replication configuration only supports filtering by key prefix. To filter using a V1
     * replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element. A filter that
     * identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one
     * ``Prefix``, ``TagFilter``, or an ``And`` child element.
     * 
     * @param filter the filter value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withFilter(ReplicationRuleFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the id property: A unique identifier for the rule. The maximum value is 255 characters. If you don't specify
     * a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is
     * capitalized as 'ID'.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: A unique identifier for the rule. The maximum value is 255 characters. If you don't specify
     * a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is
     * capitalized as 'ID'.
     * 
     * @param id the id value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the prefix property: An object key name prefix that identifies the object or objects to which the rule
     * applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty
     * string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the
     * ``Rule`` element. Replacement must be made for object keys containing special characters (such as carriage
     * returns) when using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: An object key name prefix that identifies the object or objects to which the rule
     * applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty
     * string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the
     * ``Rule`` element. Replacement must be made for object keys containing special characters (such as carriage
     * returns) when using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @param prefix the prefix value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the priority property: The priority indicates which rule has precedence whenever two or more replication
     * rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there
     * are two or more rules with the same destination bucket, then objects will be replicated according to the rule
     * with the highest priority. The higher the number, the higher the priority. For more information, see
     * [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
     * 
     * @return the priority value.
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set the priority property: The priority indicates which rule has precedence whenever two or more replication
     * rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there
     * are two or more rules with the same destination bucket, then objects will be replicated according to the rule
     * with the highest priority. The higher the number, the higher the priority. For more information, see
     * [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
     * 
     * @param priority the priority value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the sourceSelectionCriteria property: A container that describes additional filters for identifying the
     * source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
     * A container that describes additional filters for identifying the source objects that you want to replicate. You
     * can choose to enable or disable the replication of these objects.
     * 
     * @return the sourceSelectionCriteria value.
     */
    public SourceSelectionCriteria sourceSelectionCriteria() {
        return this.sourceSelectionCriteria;
    }

    /**
     * Set the sourceSelectionCriteria property: A container that describes additional filters for identifying the
     * source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
     * A container that describes additional filters for identifying the source objects that you want to replicate. You
     * can choose to enable or disable the replication of these objects.
     * 
     * @param sourceSelectionCriteria the sourceSelectionCriteria value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withSourceSelectionCriteria(SourceSelectionCriteria sourceSelectionCriteria) {
        this.sourceSelectionCriteria = sourceSelectionCriteria;
        return this;
    }

    /**
     * Get the status property: Specifies whether the rule is enabled.
     * 
     * @return the status value.
     */
    public ReplicationRuleStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Specifies whether the rule is enabled.
     * 
     * @param status the status value to set.
     * @return the ReplicationRule object itself.
     */
    public ReplicationRule withStatus(ReplicationRuleStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deleteMarkerReplication() != null) {
            deleteMarkerReplication().validate();
        }
        if (destination() != null) {
            destination().validate();
        }
        if (filter() != null) {
            filter().validate();
        }
        if (sourceSelectionCriteria() != null) {
            sourceSelectionCriteria().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("deleteMarkerReplication", this.deleteMarkerReplication);
        jsonWriter.writeJsonField("destination", this.destination);
        jsonWriter.writeJsonField("filter", this.filter);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeNumberField("priority", this.priority);
        jsonWriter.writeJsonField("sourceSelectionCriteria", this.sourceSelectionCriteria);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationRule.
     */
    public static ReplicationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationRule deserializedReplicationRule = new ReplicationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deleteMarkerReplication".equals(fieldName)) {
                    deserializedReplicationRule.deleteMarkerReplication = DeleteMarkerReplication.fromJson(reader);
                } else if ("destination".equals(fieldName)) {
                    deserializedReplicationRule.destination = ReplicationDestinationAutoGenerated.fromJson(reader);
                } else if ("filter".equals(fieldName)) {
                    deserializedReplicationRule.filter = ReplicationRuleFilter.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedReplicationRule.id = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    deserializedReplicationRule.prefix = reader.getString();
                } else if ("priority".equals(fieldName)) {
                    deserializedReplicationRule.priority = reader.getNullable(JsonReader::getInt);
                } else if ("sourceSelectionCriteria".equals(fieldName)) {
                    deserializedReplicationRule.sourceSelectionCriteria = SourceSelectionCriteria.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedReplicationRule.status = ReplicationRuleStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationRule;
        });
    }
}
