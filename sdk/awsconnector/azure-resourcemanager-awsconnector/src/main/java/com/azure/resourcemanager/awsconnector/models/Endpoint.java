// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Endpoint.
 */
@Fluent
public final class Endpoint implements JsonSerializable<Endpoint> {
    /*
     * <p>The DNS hostname of the endpoint.</p>
     */
    private String address;

    /*
     * <p>The port number that applications should use to connect to the endpoint.</p>
     */
    private Integer port;

    /*
     * <p>The URL that applications should use to connect to the endpoint. The default ports are 8111 for the 'dax'
     * protocol and 9111 for the 'daxs' protocol.</p>
     */
    private String url;

    /**
     * Creates an instance of Endpoint class.
     */
    public Endpoint() {
    }

    /**
     * Get the address property: &lt;p&gt;The DNS hostname of the endpoint.&lt;/p&gt;.
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: &lt;p&gt;The DNS hostname of the endpoint.&lt;/p&gt;.
     * 
     * @param address the address value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the port property: &lt;p&gt;The port number that applications should use to connect to the
     * endpoint.&lt;/p&gt;.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: &lt;p&gt;The port number that applications should use to connect to the
     * endpoint.&lt;/p&gt;.
     * 
     * @param port the port value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the url property: &lt;p&gt;The URL that applications should use to connect to the endpoint. The default ports
     * are 8111 for the 'dax' protocol and 9111 for the 'daxs' protocol.&lt;/p&gt;.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: &lt;p&gt;The URL that applications should use to connect to the endpoint. The default ports
     * are 8111 for the 'dax' protocol and 9111 for the 'daxs' protocol.&lt;/p&gt;.
     * 
     * @param url the url value to set.
     * @return the Endpoint object itself.
     */
    public Endpoint withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("address", this.address);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("url", this.url);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Endpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Endpoint if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Endpoint.
     */
    public static Endpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Endpoint deserializedEndpoint = new Endpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("address".equals(fieldName)) {
                    deserializedEndpoint.address = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedEndpoint.port = reader.getNullable(JsonReader::getInt);
                } else if ("url".equals(fieldName)) {
                    deserializedEndpoint.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpoint;
        });
    }
}
