// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2Volume.
 */
@Fluent
public final class AwsEc2VolumeProperties implements JsonSerializable<AwsEc2VolumeProperties> {
    /*
     * Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the
     * volume from attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the
     * consistency of the volume is not a concern, and you prefer that the volume be made available immediately if it's
     * impaired, you can configure the volume to automatically enable I/O.
     */
    private Boolean autoEnableIO;

    /*
     * The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
     */
    private String availabilityZone;

    /*
     * Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends
     * on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by
     * default is enabled. For more information, see [Encryption by
     * default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default) in the
     * *Amazon Elastic Compute Cloud User Guide*. Encrypted Amazon EBS volumes must be attached to instances that
     * support Amazon EBS encryption. For more information, see [Supported instance
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
     */
    private Boolean encrypted;

    /*
     * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the
     * number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance
     * of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the
     * supported values for each volume type: + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000 IOPS + ``io2``: 100
     * - 256,000 IOPS For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro
     * System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). On other
     * instances, you can achieve performance up to 32,000 IOPS. This parameter is required for ``io1`` and ``io2``
     * volumes. The default for ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``,
     * ``sc1``, or ``standard`` volumes.
     */
    private Integer iops;

    /*
     * The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted
     * state must be ``true``. If you omit this property and your account is enabled for encryption by default, or
     * *Encrypted* is set to ``true``, then the volume is encrypted using the default key specified for your account. If
     * your account does not have a default key, then the volume is encrypted using the aws-managed-key. Alternatively,
     * if you want to specify a different key, you can specify one of the following: + Key ID. For example,
     * 1234abcd-12ab-34cd-56ef-1234567890ab. + Key alias. Specify the alias for the key, prefixed with ``alias/``. For
     * example, for a key with the alias ``my_cmk``, use ``alias/my_cmk``. Or to specify the aws-managed-key, use
     * ``alias/aws/ebs``. + Key ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab. + Alias ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
     */
    private String kmsKeyId;

    /*
     * Indicates whether Amazon EBS Multi-Attach is enabled. CFNlong does not currently support updating a single-attach
     * volume to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the
     * size or number of I/O operations per second (IOPS) of a multi-attach enabled volume.
     */
    private Boolean multiAttachEnabled;

    /*
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    private String outpostArn;

    /*
     * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a
     * snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the
     * snapshot size. The following are the supported volumes sizes for each volume type: + ``gp2`` and ``gp3``: 1 -
     * 16,384 GiB + ``io1``: 4 - 16,384 GiB + ``io2``: 4 - 65,536 GiB + ``st1`` and ``sc1``: 125 - 16,384 GiB +
     * ``standard``: 1 - 1024 GiB
     */
    private Integer size;

    /*
     * The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
     */
    private String snapshotId;

    /*
     * The tags to apply to the volume during creation.
     */
    private List<TagAutoGenerated21> tags;

    /*
     * The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for ``gp3``
     * volumes. The default value is 125. Valid Range: Minimum value of 125. Maximum value of 1000.
     */
    private Integer throughput;

    /*
     * Property volumeId
     */
    private String volumeId;

    /*
     * The volume type. This parameter can be one of the following values: + General Purpose SSD: ``gp2`` | ``gp3`` +
     * Provisioned IOPS SSD: ``io1`` | ``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic:
     * ``standard`` For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon Elastic Compute
     * Cloud User Guide*. Default: ``gp2``
     */
    private String volumeType;

    /**
     * Creates an instance of AwsEc2VolumeProperties class.
     */
    public AwsEc2VolumeProperties() {
    }

    /**
     * Get the autoEnableIO property: Indicates whether the volume is auto-enabled for I/O operations. By default,
     * Amazon EBS disables I/O to the volume from attached EC2 instances when it determines that a volume's data is
     * potentially inconsistent. If the consistency of the volume is not a concern, and you prefer that the volume be
     * made available immediately if it's impaired, you can configure the volume to automatically enable I/O.
     * 
     * @return the autoEnableIO value.
     */
    public Boolean autoEnableIO() {
        return this.autoEnableIO;
    }

    /**
     * Set the autoEnableIO property: Indicates whether the volume is auto-enabled for I/O operations. By default,
     * Amazon EBS disables I/O to the volume from attached EC2 instances when it determines that a volume's data is
     * potentially inconsistent. If the consistency of the volume is not a concern, and you prefer that the volume be
     * made available immediately if it's impaired, you can configure the volume to automatically enable I/O.
     * 
     * @param autoEnableIO the autoEnableIO value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withAutoEnableIO(Boolean autoEnableIO) {
        this.autoEnableIO = autoEnableIO;
        return this;
    }

    /**
     * Get the availabilityZone property: The ID of the Availability Zone in which to create the volume. For example,
     * ``us-east-1a``.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The ID of the Availability Zone in which to create the volume. For example,
     * ``us-east-1a``.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the encrypted property: Indicates whether the volume should be encrypted. The effect of setting the
     * encryption state to ``true`` depends on the volume origin (new or from a snapshot), starting encryption state,
     * ownership, and whether encryption by default is enabled. For more information, see [Encryption by
     * default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default) in the
     * *Amazon Elastic Compute Cloud User Guide*. Encrypted Amazon EBS volumes must be attached to instances that
     * support Amazon EBS encryption. For more information, see [Supported instance
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: Indicates whether the volume should be encrypted. The effect of setting the
     * encryption state to ``true`` depends on the volume origin (new or from a snapshot), starting encryption state,
     * ownership, and whether encryption by default is enabled. For more information, see [Encryption by
     * default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default) in the
     * *Amazon Elastic Compute Cloud User Guide*. Encrypted Amazon EBS volumes must be attached to instances that
     * support Amazon EBS encryption. For more information, see [Supported instance
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
     * 
     * @param encrypted the encrypted value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the iops property: The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes,
     * this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the
     * baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The
     * following are the supported values for each volume type: + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000
     * IOPS + ``io2``: 100 - 256,000 IOPS For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on
     * the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
     * On other instances, you can achieve performance up to 32,000 IOPS. This parameter is required for ``io1`` and
     * ``io2`` volumes. The default for ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``,
     * ``st1``, ``sc1``, or ``standard`` volumes.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes,
     * this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the
     * baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The
     * following are the supported values for each volume type: + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000
     * IOPS + ``io2``: 100 - 256,000 IOPS For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on
     * the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
     * On other instances, you can achieve performance up to 32,000 IOPS. This parameter is required for ``io1`` and
     * ``io2`` volumes. The default for ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``,
     * ``st1``, ``sc1``, or ``standard`` volumes.
     * 
     * @param iops the iops value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the kmsKeyId property: The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId``
     * is specified, the encrypted state must be ``true``. If you omit this property and your account is enabled for
     * encryption by default, or *Encrypted* is set to ``true``, then the volume is encrypted using the default key
     * specified for your account. If your account does not have a default key, then the volume is encrypted using the
     * aws-managed-key. Alternatively, if you want to specify a different key, you can specify one of the following: +
     * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab. + Key alias. Specify the alias for the key, prefixed
     * with ``alias/``. For example, for a key with the alias ``my_cmk``, use ``alias/my_cmk``. Or to specify the
     * aws-managed-key, use ``alias/aws/ebs``. + Key ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab. + Alias ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId``
     * is specified, the encrypted state must be ``true``. If you omit this property and your account is enabled for
     * encryption by default, or *Encrypted* is set to ``true``, then the volume is encrypted using the default key
     * specified for your account. If your account does not have a default key, then the volume is encrypted using the
     * aws-managed-key. Alternatively, if you want to specify a different key, you can specify one of the following: +
     * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab. + Key alias. Specify the alias for the key, prefixed
     * with ``alias/``. For example, for a key with the alias ``my_cmk``, use ``alias/my_cmk``. Or to specify the
     * aws-managed-key, use ``alias/aws/ebs``. + Key ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab. + Alias ARN. For example,
     * arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the multiAttachEnabled property: Indicates whether Amazon EBS Multi-Attach is enabled. CFNlong does not
     * currently support updating a single-attach volume to be multi-attach enabled, updating a multi-attach enabled
     * volume to be single-attach, or updating the size or number of I/O operations per second (IOPS) of a multi-attach
     * enabled volume.
     * 
     * @return the multiAttachEnabled value.
     */
    public Boolean multiAttachEnabled() {
        return this.multiAttachEnabled;
    }

    /**
     * Set the multiAttachEnabled property: Indicates whether Amazon EBS Multi-Attach is enabled. CFNlong does not
     * currently support updating a single-attach volume to be multi-attach enabled, updating a multi-attach enabled
     * volume to be single-attach, or updating the size or number of I/O operations per second (IOPS) of a multi-attach
     * enabled volume.
     * 
     * @param multiAttachEnabled the multiAttachEnabled value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withMultiAttachEnabled(Boolean multiAttachEnabled) {
        this.multiAttachEnabled = multiAttachEnabled;
        return this;
    }

    /**
     * Get the outpostArn property: The Amazon Resource Name (ARN) of the Outpost.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: The Amazon Resource Name (ARN) of the Outpost.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the size property: The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.
     * If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or
     * larger than the snapshot size. The following are the supported volumes sizes for each volume type: + ``gp2`` and
     * ``gp3``: 1 - 16,384 GiB + ``io1``: 4 - 16,384 GiB + ``io2``: 4 - 65,536 GiB + ``st1`` and ``sc1``: 125 - 16,384
     * GiB + ``standard``: 1 - 1024 GiB.
     * 
     * @return the size value.
     */
    public Integer size() {
        return this.size;
    }

    /**
     * Set the size property: The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.
     * If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or
     * larger than the snapshot size. The following are the supported volumes sizes for each volume type: + ``gp2`` and
     * ``gp3``: 1 - 16,384 GiB + ``io1``: 4 - 16,384 GiB + ``io2``: 4 - 65,536 GiB + ``st1`` and ``sc1``: 125 - 16,384
     * GiB + ``standard``: 1 - 1024 GiB.
     * 
     * @param size the size value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withSize(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * Get the snapshotId property: The snapshot from which to create the volume. You must specify either a snapshot ID
     * or a volume size.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: The snapshot from which to create the volume. You must specify either a snapshot ID
     * or a volume size.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Get the tags property: The tags to apply to the volume during creation.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated21> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags to apply to the volume during creation.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withTags(List<TagAutoGenerated21> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the throughput property: The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This
     * parameter is valid only for ``gp3`` volumes. The default value is 125. Valid Range: Minimum value of 125. Maximum
     * value of 1000.
     * 
     * @return the throughput value.
     */
    public Integer throughput() {
        return this.throughput;
    }

    /**
     * Set the throughput property: The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This
     * parameter is valid only for ``gp3`` volumes. The default value is 125. Valid Range: Minimum value of 125. Maximum
     * value of 1000.
     * 
     * @param throughput the throughput value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withThroughput(Integer throughput) {
        this.throughput = throughput;
        return this;
    }

    /**
     * Get the volumeId property: Property volumeId.
     * 
     * @return the volumeId value.
     */
    public String volumeId() {
        return this.volumeId;
    }

    /**
     * Set the volumeId property: Property volumeId.
     * 
     * @param volumeId the volumeId value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withVolumeId(String volumeId) {
        this.volumeId = volumeId;
        return this;
    }

    /**
     * Get the volumeType property: The volume type. This parameter can be one of the following values: + General
     * Purpose SSD: ``gp2`` | ``gp3`` + Provisioned IOPS SSD: ``io1`` | ``io2`` + Throughput Optimized HDD: ``st1`` +
     * Cold HDD: ``sc1`` + Magnetic: ``standard`` For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon Elastic Compute
     * Cloud User Guide*. Default: ``gp2``.
     * 
     * @return the volumeType value.
     */
    public String volumeType() {
        return this.volumeType;
    }

    /**
     * Set the volumeType property: The volume type. This parameter can be one of the following values: + General
     * Purpose SSD: ``gp2`` | ``gp3`` + Provisioned IOPS SSD: ``io1`` | ``io2`` + Throughput Optimized HDD: ``st1`` +
     * Cold HDD: ``sc1`` + Magnetic: ``standard`` For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon Elastic Compute
     * Cloud User Guide*. Default: ``gp2``.
     * 
     * @param volumeType the volumeType value to set.
     * @return the AwsEc2VolumeProperties object itself.
     */
    public AwsEc2VolumeProperties withVolumeType(String volumeType) {
        this.volumeType = volumeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("autoEnableIO", this.autoEnableIO);
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeBooleanField("multiAttachEnabled", this.multiAttachEnabled);
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeNumberField("size", this.size);
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("throughput", this.throughput);
        jsonWriter.writeStringField("volumeId", this.volumeId);
        jsonWriter.writeStringField("volumeType", this.volumeType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2VolumeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2VolumeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2VolumeProperties.
     */
    public static AwsEc2VolumeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2VolumeProperties deserializedAwsEc2VolumeProperties = new AwsEc2VolumeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoEnableIO".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.autoEnableIO = reader.getNullable(JsonReader::getBoolean);
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.availabilityZone = reader.getString();
                } else if ("encrypted".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("iops".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.iops = reader.getNullable(JsonReader::getInt);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.kmsKeyId = reader.getString();
                } else if ("multiAttachEnabled".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.multiAttachEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.outpostArn = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.size = reader.getNullable(JsonReader::getInt);
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.snapshotId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated21> tags = reader.readArray(reader1 -> TagAutoGenerated21.fromJson(reader1));
                    deserializedAwsEc2VolumeProperties.tags = tags;
                } else if ("throughput".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.throughput = reader.getNullable(JsonReader::getInt);
                } else if ("volumeId".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.volumeId = reader.getString();
                } else if ("volumeType".equals(fieldName)) {
                    deserializedAwsEc2VolumeProperties.volumeType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2VolumeProperties;
        });
    }
}
