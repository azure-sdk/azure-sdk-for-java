// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Header.
 */
@Fluent
public final class Header implements JsonSerializable<Header> {
    /*
     * Property destination
     */
    private String destination;

    /*
     * Property destinationPort
     */
    private String destinationPort;

    /*
     * Property direction
     */
    private HeaderDirection direction;

    /*
     * Property protocol
     */
    private HeaderProtocol protocol;

    /*
     * Property source
     */
    private String source;

    /*
     * Property sourcePort
     */
    private String sourcePort;

    /**
     * Creates an instance of Header class.
     */
    public Header() {
    }

    /**
     * Get the destination property: Property destination.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Property destination.
     * 
     * @param destination the destination value to set.
     * @return the Header object itself.
     */
    public Header withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the destinationPort property: Property destinationPort.
     * 
     * @return the destinationPort value.
     */
    public String destinationPort() {
        return this.destinationPort;
    }

    /**
     * Set the destinationPort property: Property destinationPort.
     * 
     * @param destinationPort the destinationPort value to set.
     * @return the Header object itself.
     */
    public Header withDestinationPort(String destinationPort) {
        this.destinationPort = destinationPort;
        return this;
    }

    /**
     * Get the direction property: Property direction.
     * 
     * @return the direction value.
     */
    public HeaderDirection direction() {
        return this.direction;
    }

    /**
     * Set the direction property: Property direction.
     * 
     * @param direction the direction value to set.
     * @return the Header object itself.
     */
    public Header withDirection(HeaderDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the protocol property: Property protocol.
     * 
     * @return the protocol value.
     */
    public HeaderProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Property protocol.
     * 
     * @param protocol the protocol value to set.
     * @return the Header object itself.
     */
    public Header withProtocol(HeaderProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the source property: Property source.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Property source.
     * 
     * @param source the source value to set.
     * @return the Header object itself.
     */
    public Header withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the sourcePort property: Property sourcePort.
     * 
     * @return the sourcePort value.
     */
    public String sourcePort() {
        return this.sourcePort;
    }

    /**
     * Set the sourcePort property: Property sourcePort.
     * 
     * @param sourcePort the sourcePort value to set.
     * @return the Header object itself.
     */
    public Header withSourcePort(String sourcePort) {
        this.sourcePort = sourcePort;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeStringField("destinationPort", this.destinationPort);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("sourcePort", this.sourcePort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Header from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Header if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Header.
     */
    public static Header fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Header deserializedHeader = new Header();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destination".equals(fieldName)) {
                    deserializedHeader.destination = reader.getString();
                } else if ("destinationPort".equals(fieldName)) {
                    deserializedHeader.destinationPort = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedHeader.direction = HeaderDirection.fromString(reader.getString());
                } else if ("protocol".equals(fieldName)) {
                    deserializedHeader.protocol = HeaderProtocol.fromString(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedHeader.source = reader.getString();
                } else if ("sourcePort".equals(fieldName)) {
                    deserializedHeader.sourcePort = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHeader;
        });
    }
}
