// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of MetricsCollection.
 */
@Fluent
public final class MetricsCollection implements JsonSerializable<MetricsCollection> {
    /*
     * The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is
     * ``1Minute``.
     */
    private String granularity;

    /*
     * Identifies the metrics to enable. You can specify one or more of the following metrics: + ``GroupMinSize`` +
     * ``GroupMaxSize`` + ``GroupDesiredCapacity`` + ``GroupInServiceInstances`` + ``GroupPendingInstances`` +
     * ``GroupStandbyInstances`` + ``GroupTerminatingInstances`` + ``GroupTotalInstances`` + ``GroupInServiceCapacity``
     * + ``GroupPendingCapacity`` + ``GroupStandbyCapacity`` + ``GroupTerminatingCapacity`` + ``GroupTotalCapacity`` +
     * ``WarmPoolDesiredCapacity`` + ``WarmPoolWarmedCapacity`` + ``WarmPoolPendingCapacity`` +
     * ``WarmPoolTerminatingCapacity`` + ``WarmPoolTotalCapacity`` + ``GroupAndWarmPoolDesiredCapacity`` +
     * ``GroupAndWarmPoolTotalCapacity`` If you specify ``Granularity`` and don't specify any metrics, all metrics are
     * enabled. For more information, see [Auto Scaling group
     * metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-
     * group-metrics) in the *Amazon EC2 Auto Scaling User Guide*.
     */
    private List<String> metrics;

    /**
     * Creates an instance of MetricsCollection class.
     */
    public MetricsCollection() {
    }

    /**
     * Get the granularity property: The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch.
     * The only valid value is ``1Minute``.
     * 
     * @return the granularity value.
     */
    public String granularity() {
        return this.granularity;
    }

    /**
     * Set the granularity property: The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch.
     * The only valid value is ``1Minute``.
     * 
     * @param granularity the granularity value to set.
     * @return the MetricsCollection object itself.
     */
    public MetricsCollection withGranularity(String granularity) {
        this.granularity = granularity;
        return this;
    }

    /**
     * Get the metrics property: Identifies the metrics to enable. You can specify one or more of the following metrics:
     * + ``GroupMinSize`` + ``GroupMaxSize`` + ``GroupDesiredCapacity`` + ``GroupInServiceInstances`` +
     * ``GroupPendingInstances`` + ``GroupStandbyInstances`` + ``GroupTerminatingInstances`` + ``GroupTotalInstances`` +
     * ``GroupInServiceCapacity`` + ``GroupPendingCapacity`` + ``GroupStandbyCapacity`` + ``GroupTerminatingCapacity`` +
     * ``GroupTotalCapacity`` + ``WarmPoolDesiredCapacity`` + ``WarmPoolWarmedCapacity`` + ``WarmPoolPendingCapacity`` +
     * ``WarmPoolTerminatingCapacity`` + ``WarmPoolTotalCapacity`` + ``GroupAndWarmPoolDesiredCapacity`` +
     * ``GroupAndWarmPoolTotalCapacity`` If you specify ``Granularity`` and don't specify any metrics, all metrics are
     * enabled. For more information, see [Auto Scaling group
     * metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics)
     * in the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @return the metrics value.
     */
    public List<String> metrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: Identifies the metrics to enable. You can specify one or more of the following metrics:
     * + ``GroupMinSize`` + ``GroupMaxSize`` + ``GroupDesiredCapacity`` + ``GroupInServiceInstances`` +
     * ``GroupPendingInstances`` + ``GroupStandbyInstances`` + ``GroupTerminatingInstances`` + ``GroupTotalInstances`` +
     * ``GroupInServiceCapacity`` + ``GroupPendingCapacity`` + ``GroupStandbyCapacity`` + ``GroupTerminatingCapacity`` +
     * ``GroupTotalCapacity`` + ``WarmPoolDesiredCapacity`` + ``WarmPoolWarmedCapacity`` + ``WarmPoolPendingCapacity`` +
     * ``WarmPoolTerminatingCapacity`` + ``WarmPoolTotalCapacity`` + ``GroupAndWarmPoolDesiredCapacity`` +
     * ``GroupAndWarmPoolTotalCapacity`` If you specify ``Granularity`` and don't specify any metrics, all metrics are
     * enabled. For more information, see [Auto Scaling group
     * metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics)
     * in the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @param metrics the metrics value to set.
     * @return the MetricsCollection object itself.
     */
    public MetricsCollection withMetrics(List<String> metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("granularity", this.granularity);
        jsonWriter.writeArrayField("metrics", this.metrics, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsCollection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricsCollection.
     */
    public static MetricsCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricsCollection deserializedMetricsCollection = new MetricsCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("granularity".equals(fieldName)) {
                    deserializedMetricsCollection.granularity = reader.getString();
                } else if ("metrics".equals(fieldName)) {
                    List<String> metrics = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetricsCollection.metrics = metrics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricsCollection;
        });
    }
}
