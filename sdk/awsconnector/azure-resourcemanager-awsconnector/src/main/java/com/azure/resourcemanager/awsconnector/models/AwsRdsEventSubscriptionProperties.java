// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsRdsEventSubscription.
 */
@Fluent
public final class AwsRdsEventSubscriptionProperties implements JsonSerializable<AwsRdsEventSubscriptionProperties> {
    /*
     * A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active
     * it.
     */
    private Boolean enabled;

    /*
     * A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories
     * for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories
     * action.
     */
    private List<String> eventCategories;

    /*
     * The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS
     * when you create a topic and subscribe to it.
     */
    private String snsTopicArn;

    /*
     * The list of identifiers of the event sources for which events will be returned. If not specified, then all
     * sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters,
     * digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
     */
    private List<String> sourceIds;

    /*
     * The type of source that will be generating the events. For example, if you want to be notified of events
     * generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all
     * events are returned.
     */
    private String sourceType;

    /*
     * The name of the subscription.
     */
    private String subscriptionName;

    /*
     * An array of key-value pairs to apply to this resource.
     */
    private List<TagAutoGenerated48> tags;

    /**
     * Creates an instance of AwsRdsEventSubscriptionProperties class.
     */
    public AwsRdsEventSubscriptionProperties() {
    }

    /**
     * Get the enabled property: A Boolean value; set to true to activate the subscription, set to false to create the
     * subscription but not active it.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: A Boolean value; set to true to activate the subscription, set to false to create the
     * subscription but not active it.
     * 
     * @param enabled the enabled value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the eventCategories property: A list of event categories for a SourceType that you want to subscribe to. You
     * can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by
     * using the DescribeEventCategories action.
     * 
     * @return the eventCategories value.
     */
    public List<String> eventCategories() {
        return this.eventCategories;
    }

    /**
     * Set the eventCategories property: A list of event categories for a SourceType that you want to subscribe to. You
     * can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by
     * using the DescribeEventCategories action.
     * 
     * @param eventCategories the eventCategories value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withEventCategories(List<String> eventCategories) {
        this.eventCategories = eventCategories;
        return this;
    }

    /**
     * Get the snsTopicArn property: The Amazon Resource Name (ARN) of the SNS topic created for event notification. The
     * ARN is created by Amazon SNS when you create a topic and subscribe to it.
     * 
     * @return the snsTopicArn value.
     */
    public String snsTopicArn() {
        return this.snsTopicArn;
    }

    /**
     * Set the snsTopicArn property: The Amazon Resource Name (ARN) of the SNS topic created for event notification. The
     * ARN is created by Amazon SNS when you create a topic and subscribe to it.
     * 
     * @param snsTopicArn the snsTopicArn value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withSnsTopicArn(String snsTopicArn) {
        this.snsTopicArn = snsTopicArn;
        return this;
    }

    /**
     * Get the sourceIds property: The list of identifiers of the event sources for which events will be returned. If
     * not specified, then all sources are included in the response. An identifier must begin with a letter and must
     * contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
     * 
     * @return the sourceIds value.
     */
    public List<String> sourceIds() {
        return this.sourceIds;
    }

    /**
     * Set the sourceIds property: The list of identifiers of the event sources for which events will be returned. If
     * not specified, then all sources are included in the response. An identifier must begin with a letter and must
     * contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
     * 
     * @param sourceIds the sourceIds value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withSourceIds(List<String> sourceIds) {
        this.sourceIds = sourceIds;
        return this;
    }

    /**
     * Get the sourceType property: The type of source that will be generating the events. For example, if you want to
     * be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is
     * not specified, all events are returned.
     * 
     * @return the sourceType value.
     */
    public String sourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: The type of source that will be generating the events. For example, if you want to
     * be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is
     * not specified, all events are returned.
     * 
     * @param sourceType the sourceType value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Get the subscriptionName property: The name of the subscription.
     * 
     * @return the subscriptionName value.
     */
    public String subscriptionName() {
        return this.subscriptionName;
    }

    /**
     * Set the subscriptionName property: The name of the subscription.
     * 
     * @param subscriptionName the subscriptionName value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withSubscriptionName(String subscriptionName) {
        this.subscriptionName = subscriptionName;
        return this;
    }

    /**
     * Get the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated48> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @param tags the tags value to set.
     * @return the AwsRdsEventSubscriptionProperties object itself.
     */
    public AwsRdsEventSubscriptionProperties withTags(List<TagAutoGenerated48> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeArrayField("eventCategories", this.eventCategories,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("snsTopicArn", this.snsTopicArn);
        jsonWriter.writeArrayField("sourceIds", this.sourceIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sourceType", this.sourceType);
        jsonWriter.writeStringField("subscriptionName", this.subscriptionName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRdsEventSubscriptionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRdsEventSubscriptionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRdsEventSubscriptionProperties.
     */
    public static AwsRdsEventSubscriptionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRdsEventSubscriptionProperties deserializedAwsRdsEventSubscriptionProperties
                = new AwsRdsEventSubscriptionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedAwsRdsEventSubscriptionProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("eventCategories".equals(fieldName)) {
                    List<String> eventCategories = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRdsEventSubscriptionProperties.eventCategories = eventCategories;
                } else if ("snsTopicArn".equals(fieldName)) {
                    deserializedAwsRdsEventSubscriptionProperties.snsTopicArn = reader.getString();
                } else if ("sourceIds".equals(fieldName)) {
                    List<String> sourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRdsEventSubscriptionProperties.sourceIds = sourceIds;
                } else if ("sourceType".equals(fieldName)) {
                    deserializedAwsRdsEventSubscriptionProperties.sourceType = reader.getString();
                } else if ("subscriptionName".equals(fieldName)) {
                    deserializedAwsRdsEventSubscriptionProperties.subscriptionName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated48> tags = reader.readArray(reader1 -> TagAutoGenerated48.fromJson(reader1));
                    deserializedAwsRdsEventSubscriptionProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRdsEventSubscriptionProperties;
        });
    }
}
