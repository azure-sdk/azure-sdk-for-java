// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LifecyclePolicy.
 */
@Fluent
public final class LifecyclePolicyAutoGenerated implements JsonSerializable<LifecyclePolicyAutoGenerated> {
    /*
     * The number of days after files were last accessed in primary storage (the Standard storage class) at which to
     * move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file
     * access events.
     */
    private String transitionToArchive;

    /*
     * The number of days after files were last accessed in primary storage (the Standard storage class) at which to
     * move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory
     * don't count as file access events.
     */
    private String transitionToIA;

    /*
     * Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage.
     * Metadata operations such as listing the contents of a directory don't count as file access events.
     */
    private String transitionToPrimaryStorageClass;

    /**
     * Creates an instance of LifecyclePolicyAutoGenerated class.
     */
    public LifecyclePolicyAutoGenerated() {
    }

    /**
     * Get the transitionToArchive property: The number of days after files were last accessed in primary storage (the
     * Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the
     * contents of a directory don't count as file access events.
     * 
     * @return the transitionToArchive value.
     */
    public String transitionToArchive() {
        return this.transitionToArchive;
    }

    /**
     * Set the transitionToArchive property: The number of days after files were last accessed in primary storage (the
     * Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the
     * contents of a directory don't count as file access events.
     * 
     * @param transitionToArchive the transitionToArchive value to set.
     * @return the LifecyclePolicyAutoGenerated object itself.
     */
    public LifecyclePolicyAutoGenerated withTransitionToArchive(String transitionToArchive) {
        this.transitionToArchive = transitionToArchive;
        return this;
    }

    /**
     * Get the transitionToIA property: The number of days after files were last accessed in primary storage (the
     * Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as
     * listing the contents of a directory don't count as file access events.
     * 
     * @return the transitionToIA value.
     */
    public String transitionToIA() {
        return this.transitionToIA;
    }

    /**
     * Set the transitionToIA property: The number of days after files were last accessed in primary storage (the
     * Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as
     * listing the contents of a directory don't count as file access events.
     * 
     * @param transitionToIA the transitionToIA value to set.
     * @return the LifecyclePolicyAutoGenerated object itself.
     */
    public LifecyclePolicyAutoGenerated withTransitionToIA(String transitionToIA) {
        this.transitionToIA = transitionToIA;
        return this;
    }

    /**
     * Get the transitionToPrimaryStorageClass property: Whether to move files back to primary (Standard) storage after
     * they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't
     * count as file access events.
     * 
     * @return the transitionToPrimaryStorageClass value.
     */
    public String transitionToPrimaryStorageClass() {
        return this.transitionToPrimaryStorageClass;
    }

    /**
     * Set the transitionToPrimaryStorageClass property: Whether to move files back to primary (Standard) storage after
     * they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't
     * count as file access events.
     * 
     * @param transitionToPrimaryStorageClass the transitionToPrimaryStorageClass value to set.
     * @return the LifecyclePolicyAutoGenerated object itself.
     */
    public LifecyclePolicyAutoGenerated withTransitionToPrimaryStorageClass(String transitionToPrimaryStorageClass) {
        this.transitionToPrimaryStorageClass = transitionToPrimaryStorageClass;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("transitionToArchive", this.transitionToArchive);
        jsonWriter.writeStringField("transitionToIA", this.transitionToIA);
        jsonWriter.writeStringField("transitionToPrimaryStorageClass", this.transitionToPrimaryStorageClass);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifecyclePolicyAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifecyclePolicyAutoGenerated if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifecyclePolicyAutoGenerated.
     */
    public static LifecyclePolicyAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifecyclePolicyAutoGenerated deserializedLifecyclePolicyAutoGenerated = new LifecyclePolicyAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("transitionToArchive".equals(fieldName)) {
                    deserializedLifecyclePolicyAutoGenerated.transitionToArchive = reader.getString();
                } else if ("transitionToIA".equals(fieldName)) {
                    deserializedLifecyclePolicyAutoGenerated.transitionToIA = reader.getString();
                } else if ("transitionToPrimaryStorageClass".equals(fieldName)) {
                    deserializedLifecyclePolicyAutoGenerated.transitionToPrimaryStorageClass = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifecyclePolicyAutoGenerated;
        });
    }
}
