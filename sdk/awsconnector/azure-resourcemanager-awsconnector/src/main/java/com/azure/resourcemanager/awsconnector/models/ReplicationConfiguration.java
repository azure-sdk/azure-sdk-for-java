// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ReplicationConfiguration.
 */
@Fluent
public final class ReplicationConfiguration implements JsonSerializable<ReplicationConfiguration> {
    /*
     * An array of destination objects. Only one destination object is supported.
     */
    private List<ReplicationDestination> destinations;

    /**
     * Creates an instance of ReplicationConfiguration class.
     */
    public ReplicationConfiguration() {
    }

    /**
     * Get the destinations property: An array of destination objects. Only one destination object is supported.
     * 
     * @return the destinations value.
     */
    public List<ReplicationDestination> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: An array of destination objects. Only one destination object is supported.
     * 
     * @param destinations the destinations value to set.
     * @return the ReplicationConfiguration object itself.
     */
    public ReplicationConfiguration withDestinations(List<ReplicationDestination> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destinations() != null) {
            destinations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationConfiguration.
     */
    public static ReplicationConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationConfiguration deserializedReplicationConfiguration = new ReplicationConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destinations".equals(fieldName)) {
                    List<ReplicationDestination> destinations
                        = reader.readArray(reader1 -> ReplicationDestination.fromJson(reader1));
                    deserializedReplicationConfiguration.destinations = destinations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationConfiguration;
        });
    }
}
