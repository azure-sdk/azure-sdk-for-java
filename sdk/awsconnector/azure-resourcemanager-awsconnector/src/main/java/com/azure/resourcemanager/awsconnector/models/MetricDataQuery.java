// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MetricDataQuery.
 */
@Fluent
public final class MetricDataQuery implements JsonSerializable<MetricDataQuery> {
    /*
     * The ID of the account where the metrics are located, if this is a cross-account alarm.
     */
    private String accountId;

    /*
     * The math expression to be performed on the returned data, if this object is performing a math expression. This
     * expression can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of
     * other expressions to use the result of those expressions. For more information about metric math expressions, see
     * [Metric Math Syntax and
     * Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-
     * syntax) in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or
     * ``MetricStat`` but not both.
     */
    private String expression;

    /*
     * A short name used to tie this object to the results in the response. This name must be unique within a single
     * call to ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that
     * data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and
     * underscore. The first character must be a lowercase letter.
     */
    private String id;

    /*
     * A human-readable label for this metric or expression. This is especially useful if this is an expression, so that
     * you know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is
     * shown. If ``Label`` is omitted, CW generates a default.
     */
    private String label;

    /*
     * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is
     * retrieving a metric and not performing a math expression on returned data. Within one MetricDataQuery object, you
     * must specify either ``Expression`` or ``MetricStat`` but not both. This structure defines the metric to be
     * returned, along with the statistics, period, and units. ``MetricStat`` is a property of the
     * [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-
     * metricdataquery.html) property type.
     */
    private MetricStat metricStat;

    /*
     * The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as
     * short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at
     * intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution
     * metrics are those metrics stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1
     * second``.
     */
    private Integer period;

    /*
     * This option indicates whether to return the timestamps and raw data values of this metric. When you create an
     * alarm based on a metric math expression, specify ``True`` for this value for only the one math expression that
     * the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions
     * used in the alarm. This field is required.
     */
    private Boolean returnData;

    /**
     * Creates an instance of MetricDataQuery class.
     */
    public MetricDataQuery() {
    }

    /**
     * Get the accountId property: The ID of the account where the metrics are located, if this is a cross-account
     * alarm.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Set the accountId property: The ID of the account where the metrics are located, if this is a cross-account
     * alarm.
     * 
     * @param accountId the accountId value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * Get the expression property: The math expression to be performed on the returned data, if this object is
     * performing a math expression. This expression can use the ``Id`` of the other metrics to refer to those metrics,
     * and can also use the ``Id`` of other expressions to use the result of those expressions. For more information
     * about metric math expressions, see [Metric Math Syntax and
     * Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax)
     * in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat``
     * but not both.
     * 
     * @return the expression value.
     */
    public String expression() {
        return this.expression;
    }

    /**
     * Set the expression property: The math expression to be performed on the returned data, if this object is
     * performing a math expression. This expression can use the ``Id`` of the other metrics to refer to those metrics,
     * and can also use the ``Id`` of other expressions to use the result of those expressions. For more information
     * about metric math expressions, see [Metric Math Syntax and
     * Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax)
     * in the *User Guide*. Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat``
     * but not both.
     * 
     * @param expression the expression value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the id property: A short name used to tie this object to the results in the response. This name must be
     * unique within a single call to ``GetMetricData``. If you are performing math expressions on this set of data,
     * this name represents that data and can serve as a variable in the mathematical expression. The valid characters
     * are letters, numbers, and underscore. The first character must be a lowercase letter.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: A short name used to tie this object to the results in the response. This name must be
     * unique within a single call to ``GetMetricData``. If you are performing math expressions on this set of data,
     * this name represents that data and can serve as a variable in the mathematical expression. The valid characters
     * are letters, numbers, and underscore. The first character must be a lowercase letter.
     * 
     * @param id the id value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the label property: A human-readable label for this metric or expression. This is especially useful if this
     * is an expression, so that you know what the value represents. If the metric or expression is shown in a CW
     * dashboard widget, the label is shown. If ``Label`` is omitted, CW generates a default.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label property: A human-readable label for this metric or expression. This is especially useful if this
     * is an expression, so that you know what the value represents. If the metric or expression is shown in a CW
     * dashboard widget, the label is shown. If ``Label`` is omitted, CW generates a default.
     * 
     * @param label the label value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the metricStat property: The metric to be returned, along with statistics, period, and units. Use this
     * parameter only if this object is retrieving a metric and not performing a math expression on returned data.
     * Within one MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both. This
     * structure defines the metric to be returned, along with the statistics, period, and units. ``MetricStat`` is a
     * property of the
     * [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html)
     * property type.
     * 
     * @return the metricStat value.
     */
    public MetricStat metricStat() {
        return this.metricStat;
    }

    /**
     * Set the metricStat property: The metric to be returned, along with statistics, period, and units. Use this
     * parameter only if this object is retrieving a metric and not performing a math expression on returned data.
     * Within one MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both. This
     * structure defines the metric to be returned, along with the statistics, period, and units. ``MetricStat`` is a
     * property of the
     * [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html)
     * property type.
     * 
     * @param metricStat the metricStat value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withMetricStat(MetricStat metricStat) {
        this.metricStat = metricStat;
        return this;
    }

    /**
     * Get the period property: The granularity, in seconds, of the returned data points. For metrics with regular
     * resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution
     * metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any
     * multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` operation that includes a
     * ``StorageResolution of 1 second``.
     * 
     * @return the period value.
     */
    public Integer period() {
        return this.period;
    }

    /**
     * Set the period property: The granularity, in seconds, of the returned data points. For metrics with regular
     * resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution
     * metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any
     * multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` operation that includes a
     * ``StorageResolution of 1 second``.
     * 
     * @param period the period value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withPeriod(Integer period) {
        this.period = period;
        return this;
    }

    /**
     * Get the returnData property: This option indicates whether to return the timestamps and raw data values of this
     * metric. When you create an alarm based on a metric math expression, specify ``True`` for this value for only the
     * one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other
     * metrics and expressions used in the alarm. This field is required.
     * 
     * @return the returnData value.
     */
    public Boolean returnData() {
        return this.returnData;
    }

    /**
     * Set the returnData property: This option indicates whether to return the timestamps and raw data values of this
     * metric. When you create an alarm based on a metric math expression, specify ``True`` for this value for only the
     * one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other
     * metrics and expressions used in the alarm. This field is required.
     * 
     * @param returnData the returnData value to set.
     * @return the MetricDataQuery object itself.
     */
    public MetricDataQuery withReturnData(Boolean returnData) {
        this.returnData = returnData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricStat() != null) {
            metricStat().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accountId", this.accountId);
        jsonWriter.writeStringField("expression", this.expression);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("label", this.label);
        jsonWriter.writeJsonField("metricStat", this.metricStat);
        jsonWriter.writeNumberField("period", this.period);
        jsonWriter.writeBooleanField("returnData", this.returnData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricDataQuery from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricDataQuery if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricDataQuery.
     */
    public static MetricDataQuery fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricDataQuery deserializedMetricDataQuery = new MetricDataQuery();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountId".equals(fieldName)) {
                    deserializedMetricDataQuery.accountId = reader.getString();
                } else if ("expression".equals(fieldName)) {
                    deserializedMetricDataQuery.expression = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedMetricDataQuery.id = reader.getString();
                } else if ("label".equals(fieldName)) {
                    deserializedMetricDataQuery.label = reader.getString();
                } else if ("metricStat".equals(fieldName)) {
                    deserializedMetricDataQuery.metricStat = MetricStat.fromJson(reader);
                } else if ("period".equals(fieldName)) {
                    deserializedMetricDataQuery.period = reader.getNullable(JsonReader::getInt);
                } else if ("returnData".equals(fieldName)) {
                    deserializedMetricDataQuery.returnData = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricDataQuery;
        });
    }
}
