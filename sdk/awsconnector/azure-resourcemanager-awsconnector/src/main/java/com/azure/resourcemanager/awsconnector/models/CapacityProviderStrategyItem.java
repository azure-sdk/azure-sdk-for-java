// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CapacityProviderStrategyItem.
 */
@Fluent
public final class CapacityProviderStrategyItem implements JsonSerializable<CapacityProviderStrategyItem> {
    /*
     * The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one
     * capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the
     * default value of ``0`` is used.
     */
    private Integer base;

    /*
     * The short name of the capacity provider.
     */
    private String capacityProvider;

    /*
     * The *weight* value designates the relative percentage of the total number of tasks launched that should use the
     * specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if
     * defined, is satisfied. If no ``weight`` value is specified, the default value of ``0`` is used. When multiple
     * capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must
     * have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place
     * tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask``
     * or ``CreateService`` actions using the capacity provider strategy will fail. An example scenario for using
     * weights is defining a strategy that contains two capacity providers and both have a weight of ``1``, then when
     * the ``base`` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same
     * logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*,
     * then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.
     */
    private Integer weight;

    /**
     * Creates an instance of CapacityProviderStrategyItem class.
     */
    public CapacityProviderStrategyItem() {
    }

    /**
     * Get the base property: The *base* value designates how many tasks, at a minimum, to run on the specified capacity
     * provider. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is
     * specified, the default value of ``0`` is used.
     * 
     * @return the base value.
     */
    public Integer base() {
        return this.base;
    }

    /**
     * Set the base property: The *base* value designates how many tasks, at a minimum, to run on the specified capacity
     * provider. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is
     * specified, the default value of ``0`` is used.
     * 
     * @param base the base value to set.
     * @return the CapacityProviderStrategyItem object itself.
     */
    public CapacityProviderStrategyItem withBase(Integer base) {
        this.base = base;
        return this;
    }

    /**
     * Get the capacityProvider property: The short name of the capacity provider.
     * 
     * @return the capacityProvider value.
     */
    public String capacityProvider() {
        return this.capacityProvider;
    }

    /**
     * Set the capacityProvider property: The short name of the capacity provider.
     * 
     * @param capacityProvider the capacityProvider value to set.
     * @return the CapacityProviderStrategyItem object itself.
     */
    public CapacityProviderStrategyItem withCapacityProvider(String capacityProvider) {
        this.capacityProvider = capacityProvider;
        return this;
    }

    /**
     * Get the weight property: The *weight* value designates the relative percentage of the total number of tasks
     * launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after
     * the ``base`` value, if defined, is satisfied. If no ``weight`` value is specified, the default value of ``0`` is
     * used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the
     * capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0``
     * can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of
     * ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail. An example
     * scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of
     * ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity providers.
     * Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for
     * *capacityProviderB*, then for every one task that's run using *capacityProviderA*, four tasks would use
     * *capacityProviderB*.
     * 
     * @return the weight value.
     */
    public Integer weight() {
        return this.weight;
    }

    /**
     * Set the weight property: The *weight* value designates the relative percentage of the total number of tasks
     * launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after
     * the ``base`` value, if defined, is satisfied. If no ``weight`` value is specified, the default value of ``0`` is
     * used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the
     * capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0``
     * can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of
     * ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail. An example
     * scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of
     * ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity providers.
     * Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for
     * *capacityProviderB*, then for every one task that's run using *capacityProviderA*, four tasks would use
     * *capacityProviderB*.
     * 
     * @param weight the weight value to set.
     * @return the CapacityProviderStrategyItem object itself.
     */
    public CapacityProviderStrategyItem withWeight(Integer weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("base", this.base);
        jsonWriter.writeStringField("capacityProvider", this.capacityProvider);
        jsonWriter.writeNumberField("weight", this.weight);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapacityProviderStrategyItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapacityProviderStrategyItem if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapacityProviderStrategyItem.
     */
    public static CapacityProviderStrategyItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapacityProviderStrategyItem deserializedCapacityProviderStrategyItem = new CapacityProviderStrategyItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("base".equals(fieldName)) {
                    deserializedCapacityProviderStrategyItem.base = reader.getNullable(JsonReader::getInt);
                } else if ("capacityProvider".equals(fieldName)) {
                    deserializedCapacityProviderStrategyItem.capacityProvider = reader.getString();
                } else if ("weight".equals(fieldName)) {
                    deserializedCapacityProviderStrategyItem.weight = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapacityProviderStrategyItem;
        });
    }
}
