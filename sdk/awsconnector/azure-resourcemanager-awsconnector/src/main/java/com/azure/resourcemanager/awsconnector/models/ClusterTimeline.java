// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of ClusterTimeline.
 */
@Fluent
public final class ClusterTimeline implements JsonSerializable<ClusterTimeline> {
    /*
     * <p>The creation date and time of the cluster.</p>
     */
    private OffsetDateTime creationDateTime;

    /*
     * <p>The date and time when the cluster was terminated.</p>
     */
    private OffsetDateTime endDateTime;

    /*
     * <p>The date and time when the cluster was ready to run steps.</p>
     */
    private OffsetDateTime readyDateTime;

    /**
     * Creates an instance of ClusterTimeline class.
     */
    public ClusterTimeline() {
    }

    /**
     * Get the creationDateTime property: &lt;p&gt;The creation date and time of the cluster.&lt;/p&gt;.
     * 
     * @return the creationDateTime value.
     */
    public OffsetDateTime creationDateTime() {
        return this.creationDateTime;
    }

    /**
     * Set the creationDateTime property: &lt;p&gt;The creation date and time of the cluster.&lt;/p&gt;.
     * 
     * @param creationDateTime the creationDateTime value to set.
     * @return the ClusterTimeline object itself.
     */
    public ClusterTimeline withCreationDateTime(OffsetDateTime creationDateTime) {
        this.creationDateTime = creationDateTime;
        return this;
    }

    /**
     * Get the endDateTime property: &lt;p&gt;The date and time when the cluster was terminated.&lt;/p&gt;.
     * 
     * @return the endDateTime value.
     */
    public OffsetDateTime endDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: &lt;p&gt;The date and time when the cluster was terminated.&lt;/p&gt;.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the ClusterTimeline object itself.
     */
    public ClusterTimeline withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Get the readyDateTime property: &lt;p&gt;The date and time when the cluster was ready to run steps.&lt;/p&gt;.
     * 
     * @return the readyDateTime value.
     */
    public OffsetDateTime readyDateTime() {
        return this.readyDateTime;
    }

    /**
     * Set the readyDateTime property: &lt;p&gt;The date and time when the cluster was ready to run steps.&lt;/p&gt;.
     * 
     * @param readyDateTime the readyDateTime value to set.
     * @return the ClusterTimeline object itself.
     */
    public ClusterTimeline withReadyDateTime(OffsetDateTime readyDateTime) {
        this.readyDateTime = readyDateTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("creationDateTime",
            this.creationDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationDateTime));
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        jsonWriter.writeStringField("readyDateTime",
            this.readyDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.readyDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterTimeline from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterTimeline if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterTimeline.
     */
    public static ClusterTimeline fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterTimeline deserializedClusterTimeline = new ClusterTimeline();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("creationDateTime".equals(fieldName)) {
                    deserializedClusterTimeline.creationDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    deserializedClusterTimeline.endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("readyDateTime".equals(fieldName)) {
                    deserializedClusterTimeline.readyDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterTimeline;
        });
    }
}
