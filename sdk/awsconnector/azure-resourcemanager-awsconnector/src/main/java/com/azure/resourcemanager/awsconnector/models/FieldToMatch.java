// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FieldToMatch.
 */
@Fluent
public final class FieldToMatch implements JsonSerializable<FieldToMatch> {
    /*
     * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to
     * perform.
     */
    private Object method;

    /*
     * Inspect the query string. This is the part of a URL that appears after a ? character, if any.
     */
    private Object queryString;

    /*
     * Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This
     * setting isn't case sensitive.
     */
    private SingleHeaderModelProperties singleHeader;

    /*
     * Inspect the request URI path. This is the part of a web request that identifies a resource, for example,
     * /images/daily-ad.jpg.
     */
    private Object uriPath;

    /**
     * Creates an instance of FieldToMatch class.
     */
    public FieldToMatch() {
    }

    /**
     * Get the method property: Inspect the HTTP method. The method indicates the type of operation that the request is
     * asking the origin to perform.
     * 
     * @return the method value.
     */
    public Object method() {
        return this.method;
    }

    /**
     * Set the method property: Inspect the HTTP method. The method indicates the type of operation that the request is
     * asking the origin to perform.
     * 
     * @param method the method value to set.
     * @return the FieldToMatch object itself.
     */
    public FieldToMatch withMethod(Object method) {
        this.method = method;
        return this;
    }

    /**
     * Get the queryString property: Inspect the query string. This is the part of a URL that appears after a ?
     * character, if any.
     * 
     * @return the queryString value.
     */
    public Object queryString() {
        return this.queryString;
    }

    /**
     * Set the queryString property: Inspect the query string. This is the part of a URL that appears after a ?
     * character, if any.
     * 
     * @param queryString the queryString value to set.
     * @return the FieldToMatch object itself.
     */
    public FieldToMatch withQueryString(Object queryString) {
        this.queryString = queryString;
        return this;
    }

    /**
     * Get the singleHeader property: Inspect a single header. Provide the name of the header to inspect, for example,
     * User-Agent or Referer. This setting isn't case sensitive.
     * 
     * @return the singleHeader value.
     */
    public SingleHeaderModelProperties singleHeader() {
        return this.singleHeader;
    }

    /**
     * Set the singleHeader property: Inspect a single header. Provide the name of the header to inspect, for example,
     * User-Agent or Referer. This setting isn't case sensitive.
     * 
     * @param singleHeader the singleHeader value to set.
     * @return the FieldToMatch object itself.
     */
    public FieldToMatch withSingleHeader(SingleHeaderModelProperties singleHeader) {
        this.singleHeader = singleHeader;
        return this;
    }

    /**
     * Get the uriPath property: Inspect the request URI path. This is the part of a web request that identifies a
     * resource, for example, /images/daily-ad.jpg.
     * 
     * @return the uriPath value.
     */
    public Object uriPath() {
        return this.uriPath;
    }

    /**
     * Set the uriPath property: Inspect the request URI path. This is the part of a web request that identifies a
     * resource, for example, /images/daily-ad.jpg.
     * 
     * @param uriPath the uriPath value to set.
     * @return the FieldToMatch object itself.
     */
    public FieldToMatch withUriPath(Object uriPath) {
        this.uriPath = uriPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (singleHeader() != null) {
            singleHeader().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("method", this.method);
        jsonWriter.writeUntypedField("queryString", this.queryString);
        jsonWriter.writeJsonField("singleHeader", this.singleHeader);
        jsonWriter.writeUntypedField("uriPath", this.uriPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FieldToMatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FieldToMatch if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FieldToMatch.
     */
    public static FieldToMatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FieldToMatch deserializedFieldToMatch = new FieldToMatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("method".equals(fieldName)) {
                    deserializedFieldToMatch.method = reader.readUntyped();
                } else if ("queryString".equals(fieldName)) {
                    deserializedFieldToMatch.queryString = reader.readUntyped();
                } else if ("singleHeader".equals(fieldName)) {
                    deserializedFieldToMatch.singleHeader = SingleHeaderModelProperties.fromJson(reader);
                } else if ("uriPath".equals(fieldName)) {
                    deserializedFieldToMatch.uriPath = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFieldToMatch;
        });
    }
}
