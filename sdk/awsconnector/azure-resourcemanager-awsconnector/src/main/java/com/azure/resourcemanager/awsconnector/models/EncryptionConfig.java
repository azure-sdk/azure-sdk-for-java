// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of EncryptionConfig.
 */
@Fluent
public final class EncryptionConfig implements JsonSerializable<EncryptionConfig> {
    /*
     * <p>Key Management Service (KMS) key. Either the ARN or the alias can be used.</p>
     */
    private Provider provider;

    /*
     * <p>Specifies the resources to be encrypted. The only supported value is <code>secrets</code>.</p>
     */
    private List<String> resources;

    /**
     * Creates an instance of EncryptionConfig class.
     */
    public EncryptionConfig() {
    }

    /**
     * Get the provider property: &lt;p&gt;Key Management Service (KMS) key. Either the ARN or the alias can be
     * used.&lt;/p&gt;.
     * 
     * @return the provider value.
     */
    public Provider provider() {
        return this.provider;
    }

    /**
     * Set the provider property: &lt;p&gt;Key Management Service (KMS) key. Either the ARN or the alias can be
     * used.&lt;/p&gt;.
     * 
     * @param provider the provider value to set.
     * @return the EncryptionConfig object itself.
     */
    public EncryptionConfig withProvider(Provider provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the resources property: &lt;p&gt;Specifies the resources to be encrypted. The only supported value is
     * &lt;code&gt;secrets&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the resources value.
     */
    public List<String> resources() {
        return this.resources;
    }

    /**
     * Set the resources property: &lt;p&gt;Specifies the resources to be encrypted. The only supported value is
     * &lt;code&gt;secrets&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param resources the resources value to set.
     * @return the EncryptionConfig object itself.
     */
    public EncryptionConfig withResources(List<String> resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provider() != null) {
            provider().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("provider", this.provider);
        jsonWriter.writeArrayField("resources", this.resources, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionConfig.
     */
    public static EncryptionConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionConfig deserializedEncryptionConfig = new EncryptionConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedEncryptionConfig.provider = Provider.fromJson(reader);
                } else if ("resources".equals(fieldName)) {
                    List<String> resources = reader.readArray(reader1 -> reader1.getString());
                    deserializedEncryptionConfig.resources = resources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionConfig;
        });
    }
}
