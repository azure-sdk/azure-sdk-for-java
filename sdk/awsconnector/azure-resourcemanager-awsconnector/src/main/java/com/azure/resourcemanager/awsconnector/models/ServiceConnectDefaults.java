// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ServiceConnectDefaults.
 */
@Fluent
public final class ServiceConnectDefaults implements JsonSerializable<ServiceConnectDefaults> {
    /*
     * The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a
     * service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters.
     * The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or
     * slash (/). If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type
     * is supported. The namespace must be in this account and this AWS Region. If you enter a new name, a CMAPlong
     * namespace will be created. Amazon ECS creates a CMAP namespace with the 'API calls' method of instance discovery
     * only. This instance discovery method is the 'HTTP' namespace type in the CLIlong. Other types of instance
     * discovery aren't used by Service Connect. If you update the cluster with an empty string ``''`` for the namespace
     * name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and
     * must be deleted separately. For more information about CMAPlong, see [Working with
     * Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
     */
    private String namespace;

    /**
     * Creates an instance of ServiceConnectDefaults class.
     */
    public ServiceConnectDefaults() {
    }

    /**
     * Get the namespace property: The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace
     * that's used when you create a service and don't specify a Service Connect configuration. The namespace name can
     * include up to 1024 characters. The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater
     * than (&gt;), less than (&lt;), or slash (/). If you enter an existing namespace name or ARN, then that namespace
     * will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region. If you
     * enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the 'API calls'
     * method of instance discovery only. This instance discovery method is the 'HTTP' namespace type in the CLIlong.
     * Other types of instance discovery aren't used by Service Connect. If you update the cluster with an empty string
     * ``''`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace
     * will remain in CMAP and must be deleted separately. For more information about CMAPlong, see [Working with
     * Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace
     * that's used when you create a service and don't specify a Service Connect configuration. The namespace name can
     * include up to 1024 characters. The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater
     * than (&gt;), less than (&lt;), or slash (/). If you enter an existing namespace name or ARN, then that namespace
     * will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region. If you
     * enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the 'API calls'
     * method of instance discovery only. This instance discovery method is the 'HTTP' namespace type in the CLIlong.
     * Other types of instance discovery aren't used by Service Connect. If you update the cluster with an empty string
     * ``''`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace
     * will remain in CMAP and must be deleted separately. For more information about CMAPlong, see [Working with
     * Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
     * 
     * @param namespace the namespace value to set.
     * @return the ServiceConnectDefaults object itself.
     */
    public ServiceConnectDefaults withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespace", this.namespace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConnectDefaults from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConnectDefaults if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceConnectDefaults.
     */
    public static ServiceConnectDefaults fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConnectDefaults deserializedServiceConnectDefaults = new ServiceConnectDefaults();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespace".equals(fieldName)) {
                    deserializedServiceConnectDefaults.namespace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConnectDefaults;
        });
    }
}
