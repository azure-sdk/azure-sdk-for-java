// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of PartitionedPrefix.
 */
@Fluent
public final class PartitionedPrefix implements JsonSerializable<PartitionedPrefix> {
    /*
     * Specifies the partition date source for the partitioned prefix. PartitionDateSource can be EventTime or
     * DeliveryTime.
     */
    private PartitionedPrefixPartitionDateSource partitionDateSource;

    /**
     * Creates an instance of PartitionedPrefix class.
     */
    public PartitionedPrefix() {
    }

    /**
     * Get the partitionDateSource property: Specifies the partition date source for the partitioned prefix.
     * PartitionDateSource can be EventTime or DeliveryTime.
     * 
     * @return the partitionDateSource value.
     */
    public PartitionedPrefixPartitionDateSource partitionDateSource() {
        return this.partitionDateSource;
    }

    /**
     * Set the partitionDateSource property: Specifies the partition date source for the partitioned prefix.
     * PartitionDateSource can be EventTime or DeliveryTime.
     * 
     * @param partitionDateSource the partitionDateSource value to set.
     * @return the PartitionedPrefix object itself.
     */
    public PartitionedPrefix withPartitionDateSource(PartitionedPrefixPartitionDateSource partitionDateSource) {
        this.partitionDateSource = partitionDateSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("partitionDateSource",
            this.partitionDateSource == null ? null : this.partitionDateSource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartitionedPrefix from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartitionedPrefix if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PartitionedPrefix.
     */
    public static PartitionedPrefix fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartitionedPrefix deserializedPartitionedPrefix = new PartitionedPrefix();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partitionDateSource".equals(fieldName)) {
                    deserializedPartitionedPrefix.partitionDateSource
                        = PartitionedPrefixPartitionDateSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartitionedPrefix;
        });
    }
}
