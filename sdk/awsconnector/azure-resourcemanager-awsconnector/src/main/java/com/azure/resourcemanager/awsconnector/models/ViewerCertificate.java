// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ViewerCertificate.
 */
@Fluent
public final class ViewerCertificate implements JsonSerializable<ViewerCertificate> {
    /*
     * In CloudFormation, this field name is ``AcmCertificateArn``. Note the different capitalization. If the
     * distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in
     * [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html), provide the Amazon Resource Name
     * (ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East (N. Virginia) Region
     * (``us-east-1``). If you specify an ACM certificate ARN, you must also specify values for
     * ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``.
     * Note the different capitalization.)
     */
    private String acmCertificateArn;

    /*
     * If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net``, set this field to
     * ``true``. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), omit this field and specify
     * values for the following fields: + ``AcmCertificateArn`` or ``IamCertificateId`` (specify a value for one, not
     * both) + ``MinimumProtocolVersion`` + ``SslSupportMethod``
     */
    private Boolean cloudFrontDefaultCertificate;

    /*
     * In CloudFormation, this field name is ``IamCertificateId``. Note the different capitalization. If the
     * distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in
     * [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html), provide the ID of the
     * IAM certificate. If you specify an IAM certificate ID, you must also specify values for
     * ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``.
     * Note the different capitalization.)
     */
    private String iamCertificateId;

    /*
     * If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify the security policy that you
     * want CloudFront to use for HTTPS connections with viewers. The security policy determines two settings: + The
     * minimum SSL/TLS protocol that CloudFront can use to communicate with viewers. + The ciphers that CloudFront can
     * use to encrypt the content that it returns to viewers. For more information, see [Security
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#
     * DownloadDistValues-security-policy) and [Supported Protocols and Ciphers Between Viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-
     * viewer-protocols-ciphers.html#secure-connections-supported-ciphers) in the *Amazon CloudFront Developer Guide*.
     * On the CloudFront console, this setting is called *Security Policy*. When you're using SNI only (you set
     * ``SSLSupportMethod`` to ``sni-only``), you must specify ``TLSv1`` or higher. (In CloudFormation, the field name
     * is ``SslSupportMethod``. Note the different capitalization.) If the distribution uses the CloudFront domain name
     * such as ``d111111abcdef8.cloudfront.net`` (you set ``CloudFrontDefaultCertificate`` to ``true``), CloudFront
     * automatically sets the security policy to ``TLSv1`` regardless of the value that you set here.
     */
    private String minimumProtocolVersion;

    /*
     * In CloudFormation, this field name is ``SslSupportMethod``. Note the different capitalization. If the
     * distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify which viewers the distribution accepts
     * HTTPS connections from. + ``sni-only`` – The distribution accepts HTTPS connections from only viewers that
     * support [server name indication
     * (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication). This is recommended.
     * Most browsers and clients support SNI. + ``vip`` – The distribution accepts HTTPS connections from all viewers
     * including those that don't support SNI. This is not recommended, and results in additional monthly charges from
     * CloudFront. + ``static-ip`` - Do not specify this value unless your distribution has been enabled for this
     * feature by the CloudFront team. If you have a use case that requires static IP addresses for a distribution,
     * contact CloudFront through the [Center](https://docs.aws.amazon.com/support/home). If the distribution uses the
     * CloudFront domain name such as ``d111111abcdef8.cloudfront.net``, don't set a value for this field.
     */
    private String sslSupportMethod;

    /**
     * Creates an instance of ViewerCertificate class.
     */
    public ViewerCertificate() {
    }

    /**
     * Get the acmCertificateArn property: In CloudFormation, this field name is ``AcmCertificateArn``. Note the
     * different capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS
     * certificate is stored in [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html), provide the
     * Amazon Resource Name (ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East (N.
     * Virginia) Region (``us-east-1``). If you specify an ACM certificate ARN, you must also specify values for
     * ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``.
     * Note the different capitalization.).
     * 
     * @return the acmCertificateArn value.
     */
    public String acmCertificateArn() {
        return this.acmCertificateArn;
    }

    /**
     * Set the acmCertificateArn property: In CloudFormation, this field name is ``AcmCertificateArn``. Note the
     * different capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS
     * certificate is stored in [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html), provide the
     * Amazon Resource Name (ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East (N.
     * Virginia) Region (``us-east-1``). If you specify an ACM certificate ARN, you must also specify values for
     * ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``.
     * Note the different capitalization.).
     * 
     * @param acmCertificateArn the acmCertificateArn value to set.
     * @return the ViewerCertificate object itself.
     */
    public ViewerCertificate withAcmCertificateArn(String acmCertificateArn) {
        this.acmCertificateArn = acmCertificateArn;
        return this;
    }

    /**
     * Get the cloudFrontDefaultCertificate property: If the distribution uses the CloudFront domain name such as
     * ``d111111abcdef8.cloudfront.net``, set this field to ``true``. If the distribution uses ``Aliases`` (alternate
     * domain names or CNAMEs), omit this field and specify values for the following fields: + ``AcmCertificateArn`` or
     * ``IamCertificateId`` (specify a value for one, not both) + ``MinimumProtocolVersion`` + ``SslSupportMethod``.
     * 
     * @return the cloudFrontDefaultCertificate value.
     */
    public Boolean cloudFrontDefaultCertificate() {
        return this.cloudFrontDefaultCertificate;
    }

    /**
     * Set the cloudFrontDefaultCertificate property: If the distribution uses the CloudFront domain name such as
     * ``d111111abcdef8.cloudfront.net``, set this field to ``true``. If the distribution uses ``Aliases`` (alternate
     * domain names or CNAMEs), omit this field and specify values for the following fields: + ``AcmCertificateArn`` or
     * ``IamCertificateId`` (specify a value for one, not both) + ``MinimumProtocolVersion`` + ``SslSupportMethod``.
     * 
     * @param cloudFrontDefaultCertificate the cloudFrontDefaultCertificate value to set.
     * @return the ViewerCertificate object itself.
     */
    public ViewerCertificate withCloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
        this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
        return this;
    }

    /**
     * Get the iamCertificateId property: In CloudFormation, this field name is ``IamCertificateId``. Note the different
     * capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS
     * certificate is stored in
     * [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html), provide the ID of the
     * IAM certificate. If you specify an IAM certificate ID, you must also specify values for
     * ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``.
     * Note the different capitalization.).
     * 
     * @return the iamCertificateId value.
     */
    public String iamCertificateId() {
        return this.iamCertificateId;
    }

    /**
     * Set the iamCertificateId property: In CloudFormation, this field name is ``IamCertificateId``. Note the different
     * capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS
     * certificate is stored in
     * [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html), provide the ID of the
     * IAM certificate. If you specify an IAM certificate ID, you must also specify values for
     * ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``.
     * Note the different capitalization.).
     * 
     * @param iamCertificateId the iamCertificateId value to set.
     * @return the ViewerCertificate object itself.
     */
    public ViewerCertificate withIamCertificateId(String iamCertificateId) {
        this.iamCertificateId = iamCertificateId;
        return this;
    }

    /**
     * Get the minimumProtocolVersion property: If the distribution uses ``Aliases`` (alternate domain names or CNAMEs),
     * specify the security policy that you want CloudFront to use for HTTPS connections with viewers. The security
     * policy determines two settings: + The minimum SSL/TLS protocol that CloudFront can use to communicate with
     * viewers. + The ciphers that CloudFront can use to encrypt the content that it returns to viewers. For more
     * information, see [Security
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
     * and [Supported Protocols and Ciphers Between Viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers)
     * in the *Amazon CloudFront Developer Guide*. On the CloudFront console, this setting is called *Security Policy*.
     * When you're using SNI only (you set ``SSLSupportMethod`` to ``sni-only``), you must specify ``TLSv1`` or higher.
     * (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.) If the
     * distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net`` (you set
     * ``CloudFrontDefaultCertificate`` to ``true``), CloudFront automatically sets the security policy to ``TLSv1``
     * regardless of the value that you set here.
     * 
     * @return the minimumProtocolVersion value.
     */
    public String minimumProtocolVersion() {
        return this.minimumProtocolVersion;
    }

    /**
     * Set the minimumProtocolVersion property: If the distribution uses ``Aliases`` (alternate domain names or CNAMEs),
     * specify the security policy that you want CloudFront to use for HTTPS connections with viewers. The security
     * policy determines two settings: + The minimum SSL/TLS protocol that CloudFront can use to communicate with
     * viewers. + The ciphers that CloudFront can use to encrypt the content that it returns to viewers. For more
     * information, see [Security
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
     * and [Supported Protocols and Ciphers Between Viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers)
     * in the *Amazon CloudFront Developer Guide*. On the CloudFront console, this setting is called *Security Policy*.
     * When you're using SNI only (you set ``SSLSupportMethod`` to ``sni-only``), you must specify ``TLSv1`` or higher.
     * (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.) If the
     * distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net`` (you set
     * ``CloudFrontDefaultCertificate`` to ``true``), CloudFront automatically sets the security policy to ``TLSv1``
     * regardless of the value that you set here.
     * 
     * @param minimumProtocolVersion the minimumProtocolVersion value to set.
     * @return the ViewerCertificate object itself.
     */
    public ViewerCertificate withMinimumProtocolVersion(String minimumProtocolVersion) {
        this.minimumProtocolVersion = minimumProtocolVersion;
        return this;
    }

    /**
     * Get the sslSupportMethod property: In CloudFormation, this field name is ``SslSupportMethod``. Note the different
     * capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify which viewers
     * the distribution accepts HTTPS connections from. + ``sni-only`` – The distribution accepts HTTPS connections from
     * only viewers that support [server name indication
     * (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication). This is recommended.
     * Most browsers and clients support SNI. + ``vip`` – The distribution accepts HTTPS connections from all viewers
     * including those that don't support SNI. This is not recommended, and results in additional monthly charges from
     * CloudFront. + ``static-ip`` - Do not specify this value unless your distribution has been enabled for this
     * feature by the CloudFront team. If you have a use case that requires static IP addresses for a distribution,
     * contact CloudFront through the [Center](https://docs.aws.amazon.com/support/home). If the distribution uses the
     * CloudFront domain name such as ``d111111abcdef8.cloudfront.net``, don't set a value for this field.
     * 
     * @return the sslSupportMethod value.
     */
    public String sslSupportMethod() {
        return this.sslSupportMethod;
    }

    /**
     * Set the sslSupportMethod property: In CloudFormation, this field name is ``SslSupportMethod``. Note the different
     * capitalization. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify which viewers
     * the distribution accepts HTTPS connections from. + ``sni-only`` – The distribution accepts HTTPS connections from
     * only viewers that support [server name indication
     * (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication). This is recommended.
     * Most browsers and clients support SNI. + ``vip`` – The distribution accepts HTTPS connections from all viewers
     * including those that don't support SNI. This is not recommended, and results in additional monthly charges from
     * CloudFront. + ``static-ip`` - Do not specify this value unless your distribution has been enabled for this
     * feature by the CloudFront team. If you have a use case that requires static IP addresses for a distribution,
     * contact CloudFront through the [Center](https://docs.aws.amazon.com/support/home). If the distribution uses the
     * CloudFront domain name such as ``d111111abcdef8.cloudfront.net``, don't set a value for this field.
     * 
     * @param sslSupportMethod the sslSupportMethod value to set.
     * @return the ViewerCertificate object itself.
     */
    public ViewerCertificate withSslSupportMethod(String sslSupportMethod) {
        this.sslSupportMethod = sslSupportMethod;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("acmCertificateArn", this.acmCertificateArn);
        jsonWriter.writeBooleanField("cloudFrontDefaultCertificate", this.cloudFrontDefaultCertificate);
        jsonWriter.writeStringField("iamCertificateId", this.iamCertificateId);
        jsonWriter.writeStringField("minimumProtocolVersion", this.minimumProtocolVersion);
        jsonWriter.writeStringField("sslSupportMethod", this.sslSupportMethod);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ViewerCertificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ViewerCertificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ViewerCertificate.
     */
    public static ViewerCertificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ViewerCertificate deserializedViewerCertificate = new ViewerCertificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("acmCertificateArn".equals(fieldName)) {
                    deserializedViewerCertificate.acmCertificateArn = reader.getString();
                } else if ("cloudFrontDefaultCertificate".equals(fieldName)) {
                    deserializedViewerCertificate.cloudFrontDefaultCertificate
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("iamCertificateId".equals(fieldName)) {
                    deserializedViewerCertificate.iamCertificateId = reader.getString();
                } else if ("minimumProtocolVersion".equals(fieldName)) {
                    deserializedViewerCertificate.minimumProtocolVersion = reader.getString();
                } else if ("sslSupportMethod".equals(fieldName)) {
                    deserializedViewerCertificate.sslSupportMethod = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedViewerCertificate;
        });
    }
}
