// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of WebsiteConfiguration.
 */
@Fluent
public final class WebsiteConfiguration implements JsonSerializable<WebsiteConfiguration> {
    /*
     * The name of the error document for the website.
     */
    private String errorDocument;

    /*
     * The name of the index document for the website.
     */
    private String indexDocument;

    /*
     * The redirect behavior for every request to this bucket's website endpoint. If you specify this property, you
     * can't specify any other property. Specifies the redirect behavior of all requests to a website endpoint of an
     * Amazon S3 bucket.
     */
    private RedirectAllRequestsTo redirectAllRequestsTo;

    /*
     * Rules that define when a redirect is applied and the redirect behavior.
     */
    private List<RoutingRule> routingRules;

    /**
     * Creates an instance of WebsiteConfiguration class.
     */
    public WebsiteConfiguration() {
    }

    /**
     * Get the errorDocument property: The name of the error document for the website.
     * 
     * @return the errorDocument value.
     */
    public String errorDocument() {
        return this.errorDocument;
    }

    /**
     * Set the errorDocument property: The name of the error document for the website.
     * 
     * @param errorDocument the errorDocument value to set.
     * @return the WebsiteConfiguration object itself.
     */
    public WebsiteConfiguration withErrorDocument(String errorDocument) {
        this.errorDocument = errorDocument;
        return this;
    }

    /**
     * Get the indexDocument property: The name of the index document for the website.
     * 
     * @return the indexDocument value.
     */
    public String indexDocument() {
        return this.indexDocument;
    }

    /**
     * Set the indexDocument property: The name of the index document for the website.
     * 
     * @param indexDocument the indexDocument value to set.
     * @return the WebsiteConfiguration object itself.
     */
    public WebsiteConfiguration withIndexDocument(String indexDocument) {
        this.indexDocument = indexDocument;
        return this;
    }

    /**
     * Get the redirectAllRequestsTo property: The redirect behavior for every request to this bucket's website
     * endpoint. If you specify this property, you can't specify any other property. Specifies the redirect behavior of
     * all requests to a website endpoint of an Amazon S3 bucket.
     * 
     * @return the redirectAllRequestsTo value.
     */
    public RedirectAllRequestsTo redirectAllRequestsTo() {
        return this.redirectAllRequestsTo;
    }

    /**
     * Set the redirectAllRequestsTo property: The redirect behavior for every request to this bucket's website
     * endpoint. If you specify this property, you can't specify any other property. Specifies the redirect behavior of
     * all requests to a website endpoint of an Amazon S3 bucket.
     * 
     * @param redirectAllRequestsTo the redirectAllRequestsTo value to set.
     * @return the WebsiteConfiguration object itself.
     */
    public WebsiteConfiguration withRedirectAllRequestsTo(RedirectAllRequestsTo redirectAllRequestsTo) {
        this.redirectAllRequestsTo = redirectAllRequestsTo;
        return this;
    }

    /**
     * Get the routingRules property: Rules that define when a redirect is applied and the redirect behavior.
     * 
     * @return the routingRules value.
     */
    public List<RoutingRule> routingRules() {
        return this.routingRules;
    }

    /**
     * Set the routingRules property: Rules that define when a redirect is applied and the redirect behavior.
     * 
     * @param routingRules the routingRules value to set.
     * @return the WebsiteConfiguration object itself.
     */
    public WebsiteConfiguration withRoutingRules(List<RoutingRule> routingRules) {
        this.routingRules = routingRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (redirectAllRequestsTo() != null) {
            redirectAllRequestsTo().validate();
        }
        if (routingRules() != null) {
            routingRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorDocument", this.errorDocument);
        jsonWriter.writeStringField("indexDocument", this.indexDocument);
        jsonWriter.writeJsonField("redirectAllRequestsTo", this.redirectAllRequestsTo);
        jsonWriter.writeArrayField("routingRules", this.routingRules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebsiteConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebsiteConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebsiteConfiguration.
     */
    public static WebsiteConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebsiteConfiguration deserializedWebsiteConfiguration = new WebsiteConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorDocument".equals(fieldName)) {
                    deserializedWebsiteConfiguration.errorDocument = reader.getString();
                } else if ("indexDocument".equals(fieldName)) {
                    deserializedWebsiteConfiguration.indexDocument = reader.getString();
                } else if ("redirectAllRequestsTo".equals(fieldName)) {
                    deserializedWebsiteConfiguration.redirectAllRequestsTo = RedirectAllRequestsTo.fromJson(reader);
                } else if ("routingRules".equals(fieldName)) {
                    List<RoutingRule> routingRules = reader.readArray(reader1 -> RoutingRule.fromJson(reader1));
                    deserializedWebsiteConfiguration.routingRules = routingRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebsiteConfiguration;
        });
    }
}
