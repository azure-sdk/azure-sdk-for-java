// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Metric.
 */
@Fluent
public final class Metric implements JsonSerializable<Metric> {
    /*
     * The metric dimensions that you want to be used for the metric that the alarm will watch.
     */
    private List<Dimension> dimensions;

    /*
     * The name of the metric that you want the alarm to watch. This is a required field.
     */
    private String metricName;

    /*
     * The namespace of the metric that the alarm will watch.
     */
    private String namespace;

    /**
     * Creates an instance of Metric class.
     */
    public Metric() {
    }

    /**
     * Get the dimensions property: The metric dimensions that you want to be used for the metric that the alarm will
     * watch.
     * 
     * @return the dimensions value.
     */
    public List<Dimension> dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: The metric dimensions that you want to be used for the metric that the alarm will
     * watch.
     * 
     * @param dimensions the dimensions value to set.
     * @return the Metric object itself.
     */
    public Metric withDimensions(List<Dimension> dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Get the metricName property: The name of the metric that you want the alarm to watch. This is a required field.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: The name of the metric that you want the alarm to watch. This is a required field.
     * 
     * @param metricName the metricName value to set.
     * @return the Metric object itself.
     */
    public Metric withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the namespace property: The namespace of the metric that the alarm will watch.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace of the metric that the alarm will watch.
     * 
     * @param namespace the namespace value to set.
     * @return the Metric object itself.
     */
    public Metric withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dimensions() != null) {
            dimensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dimensions", this.dimensions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeStringField("namespace", this.namespace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Metric from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Metric if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Metric.
     */
    public static Metric fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Metric deserializedMetric = new Metric();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dimensions".equals(fieldName)) {
                    List<Dimension> dimensions = reader.readArray(reader1 -> Dimension.fromJson(reader1));
                    deserializedMetric.dimensions = dimensions;
                } else if ("metricName".equals(fieldName)) {
                    deserializedMetric.metricName = reader.getString();
                } else if ("namespace".equals(fieldName)) {
                    deserializedMetric.namespace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetric;
        });
    }
}
