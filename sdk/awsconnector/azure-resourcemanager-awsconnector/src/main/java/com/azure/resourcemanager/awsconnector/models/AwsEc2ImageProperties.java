// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2Image.
 */
@Fluent
public final class AwsEc2ImageProperties implements JsonSerializable<AwsEc2ImageProperties> {
    /*
     * <p>The architecture of the image.</p>
     */
    private ArchitectureValuesEnumValue architecture;

    /*
     * <p>Any block device mapping entries.</p>
     */
    private List<BlockDeviceMapping> blockDeviceMappings;

    /*
     * <p>The boot mode of the image. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'>Boot modes</a> in the <i>Amazon EC2 User
     * Guide</i>.</p>
     */
    private BootModeValuesEnumValue bootMode;

    /*
     * <p>The date and time the image was created.</p>
     */
    private String creationDate;

    /*
     * <p>The date and time to deprecate the AMI, in UTC, in the following format:
     * <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z. If you specified a value for seconds, Amazon EC2
     * rounds the seconds to the nearest minute.</p>
     */
    private String deprecationTime;

    /*
     * <p>Indicates whether deregistration protection is enabled for the AMI.</p>
     */
    private String deregistrationProtection;

    /*
     * <p>The description of the AMI that was provided during image creation.</p>
     */
    private String description;

    /*
     * <p>Specifies whether enhanced networking with ENA is enabled.</p>
     */
    private Boolean enaSupport;

    /*
     * <p>The hypervisor type of the image. Only <code>xen</code> is supported. <code>ovm</code> is not supported.</p>
     */
    private HypervisorTypeEnumValue hypervisor;

    /*
     * <p>The ID of the AMI.</p>
     */
    private String imageId;

    /*
     * <p>The location of the AMI.</p>
     */
    private String imageLocation;

    /*
     * <p>The owner alias (<code>amazon</code> | <code>aws-marketplace</code>).</p>
     */
    private String imageOwnerAlias;

    /*
     * <p>The type of image.</p>
     */
    private ImageTypeValuesEnumValue imageType;

    /*
     * <p>If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will
     * have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance
     * requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code>
     * is set to <code>2</code>. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-
     * instances-ami-configuration'>Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
     */
    private ImdsSupportValuesEnumValue imdsSupport;

    /*
     * <p>The kernel associated with the image, if any. Only applicable for machine images.</p>
     */
    private String kernelId;

    /*
     * <p>The date and time, in <a href='http://www.iso.org/iso/iso8601'>ISO 8601 date-time format</a>, when the AMI was
     * last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before
     * that usage is reported.</p> <note> <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p>
     * </note>
     */
    private String lastLaunchedTime;

    /*
     * <p>The name of the AMI that was provided during image creation.</p>
     */
    private String name;

    /*
     * <p>The ID of the Amazon Web Services account that owns the image.</p>
     */
    private String ownerId;

    /*
     * <p>This value is set to <code>windows</code> for Windows AMIs; otherwise, it is blank.</p>
     */
    private PlatformValuesEnumValue platform;

    /*
     * <p>The platform details associated with the billing code of the AMI. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html'>Understand AMI billing
     * information</a> in the <i>Amazon EC2 User Guide</i>.</p>
     */
    private String platformDetails;

    /*
     * <p>Any product codes associated with the AMI.</p>
     */
    private List<ProductCode> productCodes;

    /*
     * <p>Indicates whether the image has public launch permissions. The value is <code>true</code> if this image has
     * public launch permissions or <code>false</code> if it has only implicit and explicit launch permissions.</p>
     */
    private Boolean publicProperty;

    /*
     * <p>The RAM disk associated with the image, if any. Only applicable for machine images.</p>
     */
    private String ramdiskId;

    /*
     * <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
     */
    private String rootDeviceName;

    /*
     * <p>The type of root device used by the AMI. The AMI can use an Amazon EBS volume or an instance store volume.</p>
     */
    private DeviceTypeEnumValue rootDeviceType;

    /*
     * <p>The ID of the instance that the AMI was created from if the AMI was created using <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html'>CreateImage</a>. This field
     * only appears if the AMI was created using CreateImage.</p>
     */
    private String sourceInstanceId;

    /*
     * <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
     */
    private String sriovNetSupport;

    /*
     * <p>The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and
     * can be used to launch an instance.</p>
     */
    private ImageStateEnumValue state;

    /*
     * <p>The reason for the state change.</p>
     */
    private StateReason stateReason;

    /*
     * <p>Any tags assigned to the image.</p>
     */
    private List<TagAutoGenerated11> tags;

    /*
     * <p>If the image is configured for NitroTPM support, the value is <code>v2.0</code>. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html'>NitroTPM</a> in the <i>Amazon EC2 User
     * Guide</i>.</p>
     */
    private TpmSupportValuesEnumValue tpmSupport;

    /*
     * <p>The operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
     * <code>usageOperation</code> corresponds to the <a
     * href='https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation'>
     * lineitem/Operation</a> column on your Amazon Web Services Cost and Usage Report and in the <a
     * href='https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html'>Amazon Web Services Price
     * List API</a>. You can view these fields on the <b>Instances</b> or <b>AMIs</b> pages in the Amazon EC2 console,
     * or in the responses that are returned by the <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html'>DescribeImages</a> command
     * in the Amazon EC2 API, or the <a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html'>describe-images</a> command in
     * the CLI.</p>
     */
    private String usageOperation;

    /*
     * <p>The type of virtualization of the AMI.</p>
     */
    private VirtualizationTypeEnumValue virtualizationType;

    /**
     * Creates an instance of AwsEc2ImageProperties class.
     */
    public AwsEc2ImageProperties() {
    }

    /**
     * Get the architecture property: &lt;p&gt;The architecture of the image.&lt;/p&gt;.
     * 
     * @return the architecture value.
     */
    public ArchitectureValuesEnumValue architecture() {
        return this.architecture;
    }

    /**
     * Set the architecture property: &lt;p&gt;The architecture of the image.&lt;/p&gt;.
     * 
     * @param architecture the architecture value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withArchitecture(ArchitectureValuesEnumValue architecture) {
        this.architecture = architecture;
        return this;
    }

    /**
     * Get the blockDeviceMappings property: &lt;p&gt;Any block device mapping entries.&lt;/p&gt;.
     * 
     * @return the blockDeviceMappings value.
     */
    public List<BlockDeviceMapping> blockDeviceMappings() {
        return this.blockDeviceMappings;
    }

    /**
     * Set the blockDeviceMappings property: &lt;p&gt;Any block device mapping entries.&lt;/p&gt;.
     * 
     * @param blockDeviceMappings the blockDeviceMappings value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withBlockDeviceMappings(List<BlockDeviceMapping> blockDeviceMappings) {
        this.blockDeviceMappings = blockDeviceMappings;
        return this;
    }

    /**
     * Get the bootMode property: &lt;p&gt;The boot mode of the image. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'&gt;Boot modes&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the bootMode value.
     */
    public BootModeValuesEnumValue bootMode() {
        return this.bootMode;
    }

    /**
     * Set the bootMode property: &lt;p&gt;The boot mode of the image. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'&gt;Boot modes&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param bootMode the bootMode value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withBootMode(BootModeValuesEnumValue bootMode) {
        this.bootMode = bootMode;
        return this;
    }

    /**
     * Get the creationDate property: &lt;p&gt;The date and time the image was created.&lt;/p&gt;.
     * 
     * @return the creationDate value.
     */
    public String creationDate() {
        return this.creationDate;
    }

    /**
     * Set the creationDate property: &lt;p&gt;The date and time the image was created.&lt;/p&gt;.
     * 
     * @param creationDate the creationDate value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withCreationDate(String creationDate) {
        this.creationDate = creationDate;
        return this;
    }

    /**
     * Get the deprecationTime property: &lt;p&gt;The date and time to deprecate the AMI, in UTC, in the following
     * format:
     * &lt;i&gt;YYYY&lt;/i&gt;-&lt;i&gt;MM&lt;/i&gt;-&lt;i&gt;DD&lt;/i&gt;T&lt;i&gt;HH&lt;/i&gt;:&lt;i&gt;MM&lt;/i&gt;:&lt;i&gt;SS&lt;/i&gt;Z.
     * If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute.&lt;/p&gt;.
     * 
     * @return the deprecationTime value.
     */
    public String deprecationTime() {
        return this.deprecationTime;
    }

    /**
     * Set the deprecationTime property: &lt;p&gt;The date and time to deprecate the AMI, in UTC, in the following
     * format:
     * &lt;i&gt;YYYY&lt;/i&gt;-&lt;i&gt;MM&lt;/i&gt;-&lt;i&gt;DD&lt;/i&gt;T&lt;i&gt;HH&lt;/i&gt;:&lt;i&gt;MM&lt;/i&gt;:&lt;i&gt;SS&lt;/i&gt;Z.
     * If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute.&lt;/p&gt;.
     * 
     * @param deprecationTime the deprecationTime value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withDeprecationTime(String deprecationTime) {
        this.deprecationTime = deprecationTime;
        return this;
    }

    /**
     * Get the deregistrationProtection property: &lt;p&gt;Indicates whether deregistration protection is enabled for
     * the AMI.&lt;/p&gt;.
     * 
     * @return the deregistrationProtection value.
     */
    public String deregistrationProtection() {
        return this.deregistrationProtection;
    }

    /**
     * Set the deregistrationProtection property: &lt;p&gt;Indicates whether deregistration protection is enabled for
     * the AMI.&lt;/p&gt;.
     * 
     * @param deregistrationProtection the deregistrationProtection value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withDeregistrationProtection(String deregistrationProtection) {
        this.deregistrationProtection = deregistrationProtection;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;The description of the AMI that was provided during image
     * creation.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;The description of the AMI that was provided during image
     * creation.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the enaSupport property: &lt;p&gt;Specifies whether enhanced networking with ENA is enabled.&lt;/p&gt;.
     * 
     * @return the enaSupport value.
     */
    public Boolean enaSupport() {
        return this.enaSupport;
    }

    /**
     * Set the enaSupport property: &lt;p&gt;Specifies whether enhanced networking with ENA is enabled.&lt;/p&gt;.
     * 
     * @param enaSupport the enaSupport value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withEnaSupport(Boolean enaSupport) {
        this.enaSupport = enaSupport;
        return this;
    }

    /**
     * Get the hypervisor property: &lt;p&gt;The hypervisor type of the image. Only &lt;code&gt;xen&lt;/code&gt; is
     * supported. &lt;code&gt;ovm&lt;/code&gt; is not supported.&lt;/p&gt;.
     * 
     * @return the hypervisor value.
     */
    public HypervisorTypeEnumValue hypervisor() {
        return this.hypervisor;
    }

    /**
     * Set the hypervisor property: &lt;p&gt;The hypervisor type of the image. Only &lt;code&gt;xen&lt;/code&gt; is
     * supported. &lt;code&gt;ovm&lt;/code&gt; is not supported.&lt;/p&gt;.
     * 
     * @param hypervisor the hypervisor value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withHypervisor(HypervisorTypeEnumValue hypervisor) {
        this.hypervisor = hypervisor;
        return this;
    }

    /**
     * Get the imageId property: &lt;p&gt;The ID of the AMI.&lt;/p&gt;.
     * 
     * @return the imageId value.
     */
    public String imageId() {
        return this.imageId;
    }

    /**
     * Set the imageId property: &lt;p&gt;The ID of the AMI.&lt;/p&gt;.
     * 
     * @param imageId the imageId value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withImageId(String imageId) {
        this.imageId = imageId;
        return this;
    }

    /**
     * Get the imageLocation property: &lt;p&gt;The location of the AMI.&lt;/p&gt;.
     * 
     * @return the imageLocation value.
     */
    public String imageLocation() {
        return this.imageLocation;
    }

    /**
     * Set the imageLocation property: &lt;p&gt;The location of the AMI.&lt;/p&gt;.
     * 
     * @param imageLocation the imageLocation value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withImageLocation(String imageLocation) {
        this.imageLocation = imageLocation;
        return this;
    }

    /**
     * Get the imageOwnerAlias property: &lt;p&gt;The owner alias (&lt;code&gt;amazon&lt;/code&gt; |
     * &lt;code&gt;aws-marketplace&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @return the imageOwnerAlias value.
     */
    public String imageOwnerAlias() {
        return this.imageOwnerAlias;
    }

    /**
     * Set the imageOwnerAlias property: &lt;p&gt;The owner alias (&lt;code&gt;amazon&lt;/code&gt; |
     * &lt;code&gt;aws-marketplace&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @param imageOwnerAlias the imageOwnerAlias value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withImageOwnerAlias(String imageOwnerAlias) {
        this.imageOwnerAlias = imageOwnerAlias;
        return this;
    }

    /**
     * Get the imageType property: &lt;p&gt;The type of image.&lt;/p&gt;.
     * 
     * @return the imageType value.
     */
    public ImageTypeValuesEnumValue imageType() {
        return this.imageType;
    }

    /**
     * Set the imageType property: &lt;p&gt;The type of image.&lt;/p&gt;.
     * 
     * @param imageType the imageType value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withImageType(ImageTypeValuesEnumValue imageType) {
        this.imageType = imageType;
        return this;
    }

    /**
     * Get the imdsSupport property: &lt;p&gt;If &lt;code&gt;v2.0&lt;/code&gt;, it indicates that IMDSv2 is specified in
     * the AMI. Instances launched from this AMI will have &lt;code&gt;HttpTokens&lt;/code&gt; automatically set to
     * &lt;code&gt;required&lt;/code&gt; so that, by default, the instance requires that IMDSv2 is used when requesting
     * instance metadata. In addition, &lt;code&gt;HttpPutResponseHopLimit&lt;/code&gt; is set to
     * &lt;code&gt;2&lt;/code&gt;. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration'&gt;Configure
     * the AMI&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the imdsSupport value.
     */
    public ImdsSupportValuesEnumValue imdsSupport() {
        return this.imdsSupport;
    }

    /**
     * Set the imdsSupport property: &lt;p&gt;If &lt;code&gt;v2.0&lt;/code&gt;, it indicates that IMDSv2 is specified in
     * the AMI. Instances launched from this AMI will have &lt;code&gt;HttpTokens&lt;/code&gt; automatically set to
     * &lt;code&gt;required&lt;/code&gt; so that, by default, the instance requires that IMDSv2 is used when requesting
     * instance metadata. In addition, &lt;code&gt;HttpPutResponseHopLimit&lt;/code&gt; is set to
     * &lt;code&gt;2&lt;/code&gt;. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration'&gt;Configure
     * the AMI&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param imdsSupport the imdsSupport value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withImdsSupport(ImdsSupportValuesEnumValue imdsSupport) {
        this.imdsSupport = imdsSupport;
        return this;
    }

    /**
     * Get the kernelId property: &lt;p&gt;The kernel associated with the image, if any. Only applicable for machine
     * images.&lt;/p&gt;.
     * 
     * @return the kernelId value.
     */
    public String kernelId() {
        return this.kernelId;
    }

    /**
     * Set the kernelId property: &lt;p&gt;The kernel associated with the image, if any. Only applicable for machine
     * images.&lt;/p&gt;.
     * 
     * @param kernelId the kernelId value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withKernelId(String kernelId) {
        this.kernelId = kernelId;
        return this;
    }

    /**
     * Get the lastLaunchedTime property: &lt;p&gt;The date and time, in &lt;a
     * href='http://www.iso.org/iso/iso8601'&gt;ISO 8601 date-time format&lt;/a&gt;, when the AMI was last used to
     * launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is
     * reported.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;lastLaunchedTime&lt;/code&gt; data is available starting
     * April 2017.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the lastLaunchedTime value.
     */
    public String lastLaunchedTime() {
        return this.lastLaunchedTime;
    }

    /**
     * Set the lastLaunchedTime property: &lt;p&gt;The date and time, in &lt;a
     * href='http://www.iso.org/iso/iso8601'&gt;ISO 8601 date-time format&lt;/a&gt;, when the AMI was last used to
     * launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is
     * reported.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;lastLaunchedTime&lt;/code&gt; data is available starting
     * April 2017.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param lastLaunchedTime the lastLaunchedTime value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withLastLaunchedTime(String lastLaunchedTime) {
        this.lastLaunchedTime = lastLaunchedTime;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name of the AMI that was provided during image creation.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name of the AMI that was provided during image creation.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the ownerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the image.&lt;/p&gt;.
     * 
     * @return the ownerId value.
     */
    public String ownerId() {
        return this.ownerId;
    }

    /**
     * Set the ownerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the image.&lt;/p&gt;.
     * 
     * @param ownerId the ownerId value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Get the platform property: &lt;p&gt;This value is set to &lt;code&gt;windows&lt;/code&gt; for Windows AMIs;
     * otherwise, it is blank.&lt;/p&gt;.
     * 
     * @return the platform value.
     */
    public PlatformValuesEnumValue platform() {
        return this.platform;
    }

    /**
     * Set the platform property: &lt;p&gt;This value is set to &lt;code&gt;windows&lt;/code&gt; for Windows AMIs;
     * otherwise, it is blank.&lt;/p&gt;.
     * 
     * @param platform the platform value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withPlatform(PlatformValuesEnumValue platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the platformDetails property: &lt;p&gt;The platform details associated with the billing code of the AMI. For
     * more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html'&gt;Understand AMI billing
     * information&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the platformDetails value.
     */
    public String platformDetails() {
        return this.platformDetails;
    }

    /**
     * Set the platformDetails property: &lt;p&gt;The platform details associated with the billing code of the AMI. For
     * more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html'&gt;Understand AMI billing
     * information&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param platformDetails the platformDetails value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withPlatformDetails(String platformDetails) {
        this.platformDetails = platformDetails;
        return this;
    }

    /**
     * Get the productCodes property: &lt;p&gt;Any product codes associated with the AMI.&lt;/p&gt;.
     * 
     * @return the productCodes value.
     */
    public List<ProductCode> productCodes() {
        return this.productCodes;
    }

    /**
     * Set the productCodes property: &lt;p&gt;Any product codes associated with the AMI.&lt;/p&gt;.
     * 
     * @param productCodes the productCodes value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withProductCodes(List<ProductCode> productCodes) {
        this.productCodes = productCodes;
        return this;
    }

    /**
     * Get the publicProperty property: &lt;p&gt;Indicates whether the image has public launch permissions. The value is
     * &lt;code&gt;true&lt;/code&gt; if this image has public launch permissions or &lt;code&gt;false&lt;/code&gt; if it
     * has only implicit and explicit launch permissions.&lt;/p&gt;.
     * 
     * @return the publicProperty value.
     */
    public Boolean publicProperty() {
        return this.publicProperty;
    }

    /**
     * Set the publicProperty property: &lt;p&gt;Indicates whether the image has public launch permissions. The value is
     * &lt;code&gt;true&lt;/code&gt; if this image has public launch permissions or &lt;code&gt;false&lt;/code&gt; if it
     * has only implicit and explicit launch permissions.&lt;/p&gt;.
     * 
     * @param publicProperty the publicProperty value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withPublicProperty(Boolean publicProperty) {
        this.publicProperty = publicProperty;
        return this;
    }

    /**
     * Get the ramdiskId property: &lt;p&gt;The RAM disk associated with the image, if any. Only applicable for machine
     * images.&lt;/p&gt;.
     * 
     * @return the ramdiskId value.
     */
    public String ramdiskId() {
        return this.ramdiskId;
    }

    /**
     * Set the ramdiskId property: &lt;p&gt;The RAM disk associated with the image, if any. Only applicable for machine
     * images.&lt;/p&gt;.
     * 
     * @param ramdiskId the ramdiskId value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withRamdiskId(String ramdiskId) {
        this.ramdiskId = ramdiskId;
        return this;
    }

    /**
     * Get the rootDeviceName property: &lt;p&gt;The device name of the root device volume (for example,
     * &lt;code&gt;/dev/sda1&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @return the rootDeviceName value.
     */
    public String rootDeviceName() {
        return this.rootDeviceName;
    }

    /**
     * Set the rootDeviceName property: &lt;p&gt;The device name of the root device volume (for example,
     * &lt;code&gt;/dev/sda1&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @param rootDeviceName the rootDeviceName value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withRootDeviceName(String rootDeviceName) {
        this.rootDeviceName = rootDeviceName;
        return this;
    }

    /**
     * Get the rootDeviceType property: &lt;p&gt;The type of root device used by the AMI. The AMI can use an Amazon EBS
     * volume or an instance store volume.&lt;/p&gt;.
     * 
     * @return the rootDeviceType value.
     */
    public DeviceTypeEnumValue rootDeviceType() {
        return this.rootDeviceType;
    }

    /**
     * Set the rootDeviceType property: &lt;p&gt;The type of root device used by the AMI. The AMI can use an Amazon EBS
     * volume or an instance store volume.&lt;/p&gt;.
     * 
     * @param rootDeviceType the rootDeviceType value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withRootDeviceType(DeviceTypeEnumValue rootDeviceType) {
        this.rootDeviceType = rootDeviceType;
        return this;
    }

    /**
     * Get the sourceInstanceId property: &lt;p&gt;The ID of the instance that the AMI was created from if the AMI was
     * created using &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html'&gt;CreateImage&lt;/a&gt;. This
     * field only appears if the AMI was created using CreateImage.&lt;/p&gt;.
     * 
     * @return the sourceInstanceId value.
     */
    public String sourceInstanceId() {
        return this.sourceInstanceId;
    }

    /**
     * Set the sourceInstanceId property: &lt;p&gt;The ID of the instance that the AMI was created from if the AMI was
     * created using &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html'&gt;CreateImage&lt;/a&gt;. This
     * field only appears if the AMI was created using CreateImage.&lt;/p&gt;.
     * 
     * @param sourceInstanceId the sourceInstanceId value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withSourceInstanceId(String sourceInstanceId) {
        this.sourceInstanceId = sourceInstanceId;
        return this;
    }

    /**
     * Get the sriovNetSupport property: &lt;p&gt;Specifies whether enhanced networking with the Intel 82599 Virtual
     * Function interface is enabled.&lt;/p&gt;.
     * 
     * @return the sriovNetSupport value.
     */
    public String sriovNetSupport() {
        return this.sriovNetSupport;
    }

    /**
     * Set the sriovNetSupport property: &lt;p&gt;Specifies whether enhanced networking with the Intel 82599 Virtual
     * Function interface is enabled.&lt;/p&gt;.
     * 
     * @param sriovNetSupport the sriovNetSupport value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withSriovNetSupport(String sriovNetSupport) {
        this.sriovNetSupport = sriovNetSupport;
        return this;
    }

    /**
     * Get the state property: &lt;p&gt;The current state of the AMI. If the state is
     * &lt;code&gt;available&lt;/code&gt;, the image is successfully registered and can be used to launch an
     * instance.&lt;/p&gt;.
     * 
     * @return the state value.
     */
    public ImageStateEnumValue state() {
        return this.state;
    }

    /**
     * Set the state property: &lt;p&gt;The current state of the AMI. If the state is
     * &lt;code&gt;available&lt;/code&gt;, the image is successfully registered and can be used to launch an
     * instance.&lt;/p&gt;.
     * 
     * @param state the state value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withState(ImageStateEnumValue state) {
        this.state = state;
        return this;
    }

    /**
     * Get the stateReason property: &lt;p&gt;The reason for the state change.&lt;/p&gt;.
     * 
     * @return the stateReason value.
     */
    public StateReason stateReason() {
        return this.stateReason;
    }

    /**
     * Set the stateReason property: &lt;p&gt;The reason for the state change.&lt;/p&gt;.
     * 
     * @param stateReason the stateReason value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withStateReason(StateReason stateReason) {
        this.stateReason = stateReason;
        return this;
    }

    /**
     * Get the tags property: &lt;p&gt;Any tags assigned to the image.&lt;/p&gt;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated11> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: &lt;p&gt;Any tags assigned to the image.&lt;/p&gt;.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withTags(List<TagAutoGenerated11> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the tpmSupport property: &lt;p&gt;If the image is configured for NitroTPM support, the value is
     * &lt;code&gt;v2.0&lt;/code&gt;. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html'&gt;NitroTPM&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the tpmSupport value.
     */
    public TpmSupportValuesEnumValue tpmSupport() {
        return this.tpmSupport;
    }

    /**
     * Set the tpmSupport property: &lt;p&gt;If the image is configured for NitroTPM support, the value is
     * &lt;code&gt;v2.0&lt;/code&gt;. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html'&gt;NitroTPM&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param tpmSupport the tpmSupport value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withTpmSupport(TpmSupportValuesEnumValue tpmSupport) {
        this.tpmSupport = tpmSupport;
        return this;
    }

    /**
     * Get the usageOperation property: &lt;p&gt;The operation of the Amazon EC2 instance and the billing code that is
     * associated with the AMI. &lt;code&gt;usageOperation&lt;/code&gt; corresponds to the &lt;a
     * href='https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation'&gt;lineitem/Operation&lt;/a&gt;
     * column on your Amazon Web Services Cost and Usage Report and in the &lt;a
     * href='https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html'&gt;Amazon Web Services
     * Price List API&lt;/a&gt;. You can view these fields on the &lt;b&gt;Instances&lt;/b&gt; or
     * &lt;b&gt;AMIs&lt;/b&gt; pages in the Amazon EC2 console, or in the responses that are returned by the &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html'&gt;DescribeImages&lt;/a&gt;
     * command in the Amazon EC2 API, or the &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html'&gt;describe-images&lt;/a&gt;
     * command in the CLI.&lt;/p&gt;.
     * 
     * @return the usageOperation value.
     */
    public String usageOperation() {
        return this.usageOperation;
    }

    /**
     * Set the usageOperation property: &lt;p&gt;The operation of the Amazon EC2 instance and the billing code that is
     * associated with the AMI. &lt;code&gt;usageOperation&lt;/code&gt; corresponds to the &lt;a
     * href='https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation'&gt;lineitem/Operation&lt;/a&gt;
     * column on your Amazon Web Services Cost and Usage Report and in the &lt;a
     * href='https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html'&gt;Amazon Web Services
     * Price List API&lt;/a&gt;. You can view these fields on the &lt;b&gt;Instances&lt;/b&gt; or
     * &lt;b&gt;AMIs&lt;/b&gt; pages in the Amazon EC2 console, or in the responses that are returned by the &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html'&gt;DescribeImages&lt;/a&gt;
     * command in the Amazon EC2 API, or the &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html'&gt;describe-images&lt;/a&gt;
     * command in the CLI.&lt;/p&gt;.
     * 
     * @param usageOperation the usageOperation value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withUsageOperation(String usageOperation) {
        this.usageOperation = usageOperation;
        return this;
    }

    /**
     * Get the virtualizationType property: &lt;p&gt;The type of virtualization of the AMI.&lt;/p&gt;.
     * 
     * @return the virtualizationType value.
     */
    public VirtualizationTypeEnumValue virtualizationType() {
        return this.virtualizationType;
    }

    /**
     * Set the virtualizationType property: &lt;p&gt;The type of virtualization of the AMI.&lt;/p&gt;.
     * 
     * @param virtualizationType the virtualizationType value to set.
     * @return the AwsEc2ImageProperties object itself.
     */
    public AwsEc2ImageProperties withVirtualizationType(VirtualizationTypeEnumValue virtualizationType) {
        this.virtualizationType = virtualizationType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (architecture() != null) {
            architecture().validate();
        }
        if (blockDeviceMappings() != null) {
            blockDeviceMappings().forEach(e -> e.validate());
        }
        if (bootMode() != null) {
            bootMode().validate();
        }
        if (hypervisor() != null) {
            hypervisor().validate();
        }
        if (imageType() != null) {
            imageType().validate();
        }
        if (imdsSupport() != null) {
            imdsSupport().validate();
        }
        if (platform() != null) {
            platform().validate();
        }
        if (productCodes() != null) {
            productCodes().forEach(e -> e.validate());
        }
        if (rootDeviceType() != null) {
            rootDeviceType().validate();
        }
        if (state() != null) {
            state().validate();
        }
        if (stateReason() != null) {
            stateReason().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (tpmSupport() != null) {
            tpmSupport().validate();
        }
        if (virtualizationType() != null) {
            virtualizationType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("architecture", this.architecture);
        jsonWriter.writeArrayField("blockDeviceMappings", this.blockDeviceMappings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("bootMode", this.bootMode);
        jsonWriter.writeStringField("creationDate", this.creationDate);
        jsonWriter.writeStringField("deprecationTime", this.deprecationTime);
        jsonWriter.writeStringField("deregistrationProtection", this.deregistrationProtection);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("enaSupport", this.enaSupport);
        jsonWriter.writeJsonField("hypervisor", this.hypervisor);
        jsonWriter.writeStringField("imageId", this.imageId);
        jsonWriter.writeStringField("imageLocation", this.imageLocation);
        jsonWriter.writeStringField("imageOwnerAlias", this.imageOwnerAlias);
        jsonWriter.writeJsonField("imageType", this.imageType);
        jsonWriter.writeJsonField("imdsSupport", this.imdsSupport);
        jsonWriter.writeStringField("kernelId", this.kernelId);
        jsonWriter.writeStringField("lastLaunchedTime", this.lastLaunchedTime);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("ownerId", this.ownerId);
        jsonWriter.writeJsonField("platform", this.platform);
        jsonWriter.writeStringField("platformDetails", this.platformDetails);
        jsonWriter.writeArrayField("productCodes", this.productCodes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("public", this.publicProperty);
        jsonWriter.writeStringField("ramdiskId", this.ramdiskId);
        jsonWriter.writeStringField("rootDeviceName", this.rootDeviceName);
        jsonWriter.writeJsonField("rootDeviceType", this.rootDeviceType);
        jsonWriter.writeStringField("sourceInstanceId", this.sourceInstanceId);
        jsonWriter.writeStringField("sriovNetSupport", this.sriovNetSupport);
        jsonWriter.writeJsonField("state", this.state);
        jsonWriter.writeJsonField("stateReason", this.stateReason);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("tpmSupport", this.tpmSupport);
        jsonWriter.writeStringField("usageOperation", this.usageOperation);
        jsonWriter.writeJsonField("virtualizationType", this.virtualizationType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2ImageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2ImageProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2ImageProperties.
     */
    public static AwsEc2ImageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2ImageProperties deserializedAwsEc2ImageProperties = new AwsEc2ImageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("architecture".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.architecture = ArchitectureValuesEnumValue.fromJson(reader);
                } else if ("blockDeviceMappings".equals(fieldName)) {
                    List<BlockDeviceMapping> blockDeviceMappings
                        = reader.readArray(reader1 -> BlockDeviceMapping.fromJson(reader1));
                    deserializedAwsEc2ImageProperties.blockDeviceMappings = blockDeviceMappings;
                } else if ("bootMode".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.bootMode = BootModeValuesEnumValue.fromJson(reader);
                } else if ("creationDate".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.creationDate = reader.getString();
                } else if ("deprecationTime".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.deprecationTime = reader.getString();
                } else if ("deregistrationProtection".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.deregistrationProtection = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.description = reader.getString();
                } else if ("enaSupport".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.enaSupport = reader.getNullable(JsonReader::getBoolean);
                } else if ("hypervisor".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.hypervisor = HypervisorTypeEnumValue.fromJson(reader);
                } else if ("imageId".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.imageId = reader.getString();
                } else if ("imageLocation".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.imageLocation = reader.getString();
                } else if ("imageOwnerAlias".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.imageOwnerAlias = reader.getString();
                } else if ("imageType".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.imageType = ImageTypeValuesEnumValue.fromJson(reader);
                } else if ("imdsSupport".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.imdsSupport = ImdsSupportValuesEnumValue.fromJson(reader);
                } else if ("kernelId".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.kernelId = reader.getString();
                } else if ("lastLaunchedTime".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.lastLaunchedTime = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.name = reader.getString();
                } else if ("ownerId".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.ownerId = reader.getString();
                } else if ("platform".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.platform = PlatformValuesEnumValue.fromJson(reader);
                } else if ("platformDetails".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.platformDetails = reader.getString();
                } else if ("productCodes".equals(fieldName)) {
                    List<ProductCode> productCodes = reader.readArray(reader1 -> ProductCode.fromJson(reader1));
                    deserializedAwsEc2ImageProperties.productCodes = productCodes;
                } else if ("public".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.publicProperty = reader.getNullable(JsonReader::getBoolean);
                } else if ("ramdiskId".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.ramdiskId = reader.getString();
                } else if ("rootDeviceName".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.rootDeviceName = reader.getString();
                } else if ("rootDeviceType".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.rootDeviceType = DeviceTypeEnumValue.fromJson(reader);
                } else if ("sourceInstanceId".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.sourceInstanceId = reader.getString();
                } else if ("sriovNetSupport".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.sriovNetSupport = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.state = ImageStateEnumValue.fromJson(reader);
                } else if ("stateReason".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.stateReason = StateReason.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated11> tags = reader.readArray(reader1 -> TagAutoGenerated11.fromJson(reader1));
                    deserializedAwsEc2ImageProperties.tags = tags;
                } else if ("tpmSupport".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.tpmSupport = TpmSupportValuesEnumValue.fromJson(reader);
                } else if ("usageOperation".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.usageOperation = reader.getString();
                } else if ("virtualizationType".equals(fieldName)) {
                    deserializedAwsEc2ImageProperties.virtualizationType = VirtualizationTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2ImageProperties;
        });
    }
}
