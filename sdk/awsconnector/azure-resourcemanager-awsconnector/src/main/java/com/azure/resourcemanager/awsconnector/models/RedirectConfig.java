// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RedirectConfig.
 */
@Fluent
public final class RedirectConfig implements JsonSerializable<RedirectConfig> {
    /*
     * The hostname. This component is not percent-encoded. The hostname can contain #{host}.
     */
    private String host;

    /*
     * The absolute path, starting with the leading '/'. This component is not percent-encoded. The path can contain
     * #{host}, #{path}, and #{port}.
     */
    private String path;

    /*
     * The port. You can specify a value from 1 to 65535 or #{port}.
     */
    private String port;

    /*
     * The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and
     * HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
     */
    private String protocol;

    /*
     * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading '?', as it
     * is automatically added. You can specify any of the reserved keywords.
     */
    private String query;

    /*
     * The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
     */
    private String statusCode;

    /**
     * Creates an instance of RedirectConfig class.
     */
    public RedirectConfig() {
    }

    /**
     * Get the host property: The hostname. This component is not percent-encoded. The hostname can contain #{host}.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: The hostname. This component is not percent-encoded. The hostname can contain #{host}.
     * 
     * @param host the host value to set.
     * @return the RedirectConfig object itself.
     */
    public RedirectConfig withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the path property: The absolute path, starting with the leading '/'. This component is not percent-encoded.
     * The path can contain #{host}, #{path}, and #{port}.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The absolute path, starting with the leading '/'. This component is not percent-encoded.
     * The path can contain #{host}, #{path}, and #{port}.
     * 
     * @param path the path value to set.
     * @return the RedirectConfig object itself.
     */
    public RedirectConfig withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the port property: The port. You can specify a value from 1 to 65535 or #{port}.
     * 
     * @return the port value.
     */
    public String port() {
        return this.port;
    }

    /**
     * Set the port property: The port. You can specify a value from 1 to 65535 or #{port}.
     * 
     * @param port the port value to set.
     * @return the RedirectConfig object itself.
     */
    public RedirectConfig withPort(String port) {
        this.port = port;
        return this;
    }

    /**
     * Get the protocol property: The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to
     * HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
     * 
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to
     * HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
     * 
     * @param protocol the protocol value to set.
     * @return the RedirectConfig object itself.
     */
    public RedirectConfig withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the query property: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include
     * the leading '?', as it is automatically added. You can specify any of the reserved keywords.
     * 
     * @return the query value.
     */
    public String query() {
        return this.query;
    }

    /**
     * Set the query property: The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include
     * the leading '?', as it is automatically added. You can specify any of the reserved keywords.
     * 
     * @param query the query value to set.
     * @return the RedirectConfig object itself.
     */
    public RedirectConfig withQuery(String query) {
        this.query = query;
        return this;
    }

    /**
     * Get the statusCode property: The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary
     * (HTTP 302).
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.statusCode;
    }

    /**
     * Set the statusCode property: The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary
     * (HTTP 302).
     * 
     * @param statusCode the statusCode value to set.
     * @return the RedirectConfig object itself.
     */
    public RedirectConfig withStatusCode(String statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("port", this.port);
        jsonWriter.writeStringField("protocol", this.protocol);
        jsonWriter.writeStringField("query", this.query);
        jsonWriter.writeStringField("statusCode", this.statusCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedirectConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedirectConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedirectConfig.
     */
    public static RedirectConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedirectConfig deserializedRedirectConfig = new RedirectConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("host".equals(fieldName)) {
                    deserializedRedirectConfig.host = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedRedirectConfig.path = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedRedirectConfig.port = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedRedirectConfig.protocol = reader.getString();
                } else if ("query".equals(fieldName)) {
                    deserializedRedirectConfig.query = reader.getString();
                } else if ("statusCode".equals(fieldName)) {
                    deserializedRedirectConfig.statusCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedirectConfig;
        });
    }
}
