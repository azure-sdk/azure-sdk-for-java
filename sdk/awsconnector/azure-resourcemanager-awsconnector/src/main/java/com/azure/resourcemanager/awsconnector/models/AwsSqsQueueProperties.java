// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of awsSqsQueue.
 */
@Fluent
public final class AwsSqsQueueProperties implements JsonSerializable<AwsSqsQueueProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * For first-in-first-out (FIFO) queues, specifies whether to enable content-based deduplication. During the
     * deduplication interval, SQS treats messages that are sent with identical content as duplicates and delivers only
     * one copy of the message. For more information, see the ``ContentBasedDeduplication`` attribute for the
     * ``CreateQueue`` action in the *API Reference*.
     */
    private Boolean contentBasedDeduplication;

    /*
     * For high throughput for FIFO queues, specifies whether message deduplication occurs at the message group or queue
     * level. Valid values are ``messageGroup`` and ``queue``. To enable high throughput for a FIFO queue, set this
     * attribute to ``messageGroup`` *and* set the ``FifoThroughputLimit`` attribute to ``perMessageGroupId``. If you
     * set these attributes to anything other than these values, normal throughput is in effect and deduplication occurs
     * as specified. For more information, see [High throughput for FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html) and
     * [Quotas related to
     * messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the
     * *Developer Guide*.
     */
    private String deduplicationScope;

    /*
     * The time in seconds for which the delivery of all messages in the queue is delayed. You can specify an integer
     * value of ``0`` to ``900`` (15 minutes). The default value is ``0``.
     */
    private Integer delaySeconds;

    /*
     * If set to true, creates a FIFO queue. If you don't specify this property, SQS creates a standard queue. For more
     * information, see [FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html) in the
     * *Developer Guide*.
     */
    private Boolean fifoQueue;

    /*
     * For high throughput for FIFO queues, specifies whether the FIFO queue throughput quota applies to the entire
     * queue or per message group. Valid values are ``perQueue`` and ``perMessageGroupId``. To enable high throughput
     * for a FIFO queue, set this attribute to ``perMessageGroupId`` *and* set the ``DeduplicationScope`` attribute to
     * ``messageGroup``. If you set these attributes to anything other than these values, normal throughput is in effect
     * and deduplication occurs as specified. For more information, see [High throughput for FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html) and
     * [Quotas related to
     * messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the
     * *Developer Guide*.
     */
    private String fifoThroughputLimit;

    /*
     * The length of time in seconds for which SQS can reuse a data key to encrypt or decrypt messages before calling
     * KMS again. The value must be an integer between 60 (1 minute) and 86,400 (24 hours). The default is 300 (5
     * minutes). A shorter time period provides better security, but results in more calls to KMS, which might incur
     * charges after Free Tier. For more information, see [Encryption at
     * rest](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#
     * sqs-how-does-the-data-key-reuse-period-work) in the *Developer Guide*.
     */
    private Integer kmsDataKeyReusePeriodSeconds;

    /*
     * The ID of an AWS Key Management Service (KMS) for SQS, or a custom KMS. To use the AWS managed KMS for SQS,
     * specify a (default) alias ARN, alias name (e.g. ``alias/aws/sqs``), key ARN, or key ID. For more information, see
     * the following: + [Encryption at
     * rest](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html)
     * in the *Developer Guide* +
     * [CreateQueue](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html) in the
     * *API Reference* + [Request Parameters](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#
     * API_DescribeKey_RequestParameters) in the *Key Management Service API Reference* + The Key Management Service
     * (KMS) section of the [Best
     * Practices](https://docs.aws.amazon.com/https://d0.awsstatic.com/whitepapers/aws-kms-best-practices.pdf)
     * whitepaper
     */
    private String kmsMasterKeyId;

    /*
     * The limit of how many bytes that a message can contain before SQS rejects it. You can specify an integer value
     * from ``1,024`` bytes (1 KiB) to ``262,144`` bytes (256 KiB). The default value is ``262,144`` (256 KiB).
     */
    private Integer maximumMessageSize;

    /*
     * The number of seconds that SQS retains a message. You can specify an integer value from ``60`` seconds (1 minute)
     * to ``1,209,600`` seconds (14 days). The default value is ``345,600`` seconds (4 days).
     */
    private Integer messageRetentionPeriod;

    /*
     * A name for the queue. To create a FIFO queue, the name of your FIFO queue must end with the ``.fifo`` suffix. For
     * more information, see [FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html) in the
     * *Developer Guide*. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the queue
     * name. For more information, see [Name
     * type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) in the *User
     * Guide*. If you specify a name, you can't perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    private String queueName;

    /*
     * Property queueUrl
     */
    private String queueUrl;

    /*
     * Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in
     * order to include it in the response, rather than returning an empty response if a message isn't yet available.
     * You can specify an integer from 1 to 20. Short polling is used as the default or when you specify 0 for this
     * property. For more information, see [Consuming messages using long
     * polling](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.
     * html#sqs-long-polling) in the *Developer Guide*.
     */
    private Integer receiveMessageWaitTimeSeconds;

    /*
     * The string that includes the parameters for the permissions for the dead-letter queue redrive permission and
     * which source queues can specify dead-letter queues as a JSON object. The parameters are as follows: +
     * ``redrivePermission``: The permission type that defines which source queues can specify the current queue as the
     * dead-letter queue. Valid values are: + ``allowAll``: (Default) Any source queues in this AWS account in the same
     * Region can specify this queue as the dead-letter queue. + ``denyAll``: No source queues can specify this queue as
     * the dead-letter queue. + ``byQueue``: Only queues specified by the ``sourceQueueArns`` parameter can specify this
     * queue as the dead-letter queue. + ``sourceQueueArns``: The Amazon Resource Names (ARN)s of the source queues that
     * can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when
     * the ``redrivePermission`` parameter is set to ``byQueue``. You can specify up to 10 source queue ARNs. To allow
     * more than 10 source queues to specify dead-letter queues, set the ``redrivePermission`` parameter to
     * ``allowAll``.
     */
    private Map<String, Object> redriveAllowPolicy;

    /*
     * The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON
     * object. The parameters are as follows: + ``deadLetterTargetArn``: The Amazon Resource Name (ARN) of the
     * dead-letter queue to which SQS moves messages after the value of ``maxReceiveCount`` is exceeded. +
     * ``maxReceiveCount``: The number of times a message is delivered to the source queue before being moved to the
     * dead-letter queue. When the ``ReceiveCount`` for a message exceeds the ``maxReceiveCount`` for a queue, SQS moves
     * the message to the dead-letter-queue. The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly,
     * the dead-letter queue of a standard queue must also be a standard queue. *JSON* ``{ 'deadLetterTargetArn' :
     * String, 'maxReceiveCount' : Integer }`` *YAML* ``deadLetterTargetArn : String`` ``maxReceiveCount : Integer``
     */
    private Map<String, Object> redrivePolicy;

    /*
     * Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is
     * supported per queue (for example,
     * [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-
     * queue.html) or
     * [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.
     * html)). When ``SqsManagedSseEnabled`` is not defined, ``SSE-SQS`` encryption is enabled by default.
     */
    private Boolean sqsManagedSseEnabled;

    /*
     * The tags that you attach to this queue. For more information, see [Resource
     * tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) in the
     * *User Guide*.
     */
    private List<TagAutoGenerated54> tags;

    /*
     * The length of time during which a message will be unavailable after a message is delivered from the queue. This
     * blocks other components from receiving the same message and gives the initial component time to process and
     * delete the message from the queue. Values must be from 0 to 43,200 seconds (12 hours). If you don't specify a
     * value, AWS CloudFormation uses the default value of 30 seconds. For more information about SQS queue visibility
     * timeouts, see [Visibility
     * timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html)
     * in the *Developer Guide*.
     */
    private Integer visibilityTimeout;

    /**
     * Creates an instance of AwsSqsQueueProperties class.
     */
    public AwsSqsQueueProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the contentBasedDeduplication property: For first-in-first-out (FIFO) queues, specifies whether to enable
     * content-based deduplication. During the deduplication interval, SQS treats messages that are sent with identical
     * content as duplicates and delivers only one copy of the message. For more information, see the
     * ``ContentBasedDeduplication`` attribute for the ``CreateQueue`` action in the *API Reference*.
     * 
     * @return the contentBasedDeduplication value.
     */
    public Boolean contentBasedDeduplication() {
        return this.contentBasedDeduplication;
    }

    /**
     * Set the contentBasedDeduplication property: For first-in-first-out (FIFO) queues, specifies whether to enable
     * content-based deduplication. During the deduplication interval, SQS treats messages that are sent with identical
     * content as duplicates and delivers only one copy of the message. For more information, see the
     * ``ContentBasedDeduplication`` attribute for the ``CreateQueue`` action in the *API Reference*.
     * 
     * @param contentBasedDeduplication the contentBasedDeduplication value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withContentBasedDeduplication(Boolean contentBasedDeduplication) {
        this.contentBasedDeduplication = contentBasedDeduplication;
        return this;
    }

    /**
     * Get the deduplicationScope property: For high throughput for FIFO queues, specifies whether message deduplication
     * occurs at the message group or queue level. Valid values are ``messageGroup`` and ``queue``. To enable high
     * throughput for a FIFO queue, set this attribute to ``messageGroup`` *and* set the ``FifoThroughputLimit``
     * attribute to ``perMessageGroupId``. If you set these attributes to anything other than these values, normal
     * throughput is in effect and deduplication occurs as specified. For more information, see [High throughput for
     * FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html) and
     * [Quotas related to
     * messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the
     * *Developer Guide*.
     * 
     * @return the deduplicationScope value.
     */
    public String deduplicationScope() {
        return this.deduplicationScope;
    }

    /**
     * Set the deduplicationScope property: For high throughput for FIFO queues, specifies whether message deduplication
     * occurs at the message group or queue level. Valid values are ``messageGroup`` and ``queue``. To enable high
     * throughput for a FIFO queue, set this attribute to ``messageGroup`` *and* set the ``FifoThroughputLimit``
     * attribute to ``perMessageGroupId``. If you set these attributes to anything other than these values, normal
     * throughput is in effect and deduplication occurs as specified. For more information, see [High throughput for
     * FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html) and
     * [Quotas related to
     * messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the
     * *Developer Guide*.
     * 
     * @param deduplicationScope the deduplicationScope value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withDeduplicationScope(String deduplicationScope) {
        this.deduplicationScope = deduplicationScope;
        return this;
    }

    /**
     * Get the delaySeconds property: The time in seconds for which the delivery of all messages in the queue is
     * delayed. You can specify an integer value of ``0`` to ``900`` (15 minutes). The default value is ``0``.
     * 
     * @return the delaySeconds value.
     */
    public Integer delaySeconds() {
        return this.delaySeconds;
    }

    /**
     * Set the delaySeconds property: The time in seconds for which the delivery of all messages in the queue is
     * delayed. You can specify an integer value of ``0`` to ``900`` (15 minutes). The default value is ``0``.
     * 
     * @param delaySeconds the delaySeconds value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withDelaySeconds(Integer delaySeconds) {
        this.delaySeconds = delaySeconds;
        return this;
    }

    /**
     * Get the fifoQueue property: If set to true, creates a FIFO queue. If you don't specify this property, SQS creates
     * a standard queue. For more information, see [FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html) in the
     * *Developer Guide*.
     * 
     * @return the fifoQueue value.
     */
    public Boolean fifoQueue() {
        return this.fifoQueue;
    }

    /**
     * Set the fifoQueue property: If set to true, creates a FIFO queue. If you don't specify this property, SQS creates
     * a standard queue. For more information, see [FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html) in the
     * *Developer Guide*.
     * 
     * @param fifoQueue the fifoQueue value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withFifoQueue(Boolean fifoQueue) {
        this.fifoQueue = fifoQueue;
        return this;
    }

    /**
     * Get the fifoThroughputLimit property: For high throughput for FIFO queues, specifies whether the FIFO queue
     * throughput quota applies to the entire queue or per message group. Valid values are ``perQueue`` and
     * ``perMessageGroupId``. To enable high throughput for a FIFO queue, set this attribute to ``perMessageGroupId``
     * *and* set the ``DeduplicationScope`` attribute to ``messageGroup``. If you set these attributes to anything other
     * than these values, normal throughput is in effect and deduplication occurs as specified. For more information,
     * see [High throughput for FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html) and
     * [Quotas related to
     * messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the
     * *Developer Guide*.
     * 
     * @return the fifoThroughputLimit value.
     */
    public String fifoThroughputLimit() {
        return this.fifoThroughputLimit;
    }

    /**
     * Set the fifoThroughputLimit property: For high throughput for FIFO queues, specifies whether the FIFO queue
     * throughput quota applies to the entire queue or per message group. Valid values are ``perQueue`` and
     * ``perMessageGroupId``. To enable high throughput for a FIFO queue, set this attribute to ``perMessageGroupId``
     * *and* set the ``DeduplicationScope`` attribute to ``messageGroup``. If you set these attributes to anything other
     * than these values, normal throughput is in effect and deduplication occurs as specified. For more information,
     * see [High throughput for FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html) and
     * [Quotas related to
     * messages](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html) in the
     * *Developer Guide*.
     * 
     * @param fifoThroughputLimit the fifoThroughputLimit value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withFifoThroughputLimit(String fifoThroughputLimit) {
        this.fifoThroughputLimit = fifoThroughputLimit;
        return this;
    }

    /**
     * Get the kmsDataKeyReusePeriodSeconds property: The length of time in seconds for which SQS can reuse a data key
     * to encrypt or decrypt messages before calling KMS again. The value must be an integer between 60 (1 minute) and
     * 86,400 (24 hours). The default is 300 (5 minutes). A shorter time period provides better security, but results in
     * more calls to KMS, which might incur charges after Free Tier. For more information, see [Encryption at
     * rest](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work)
     * in the *Developer Guide*.
     * 
     * @return the kmsDataKeyReusePeriodSeconds value.
     */
    public Integer kmsDataKeyReusePeriodSeconds() {
        return this.kmsDataKeyReusePeriodSeconds;
    }

    /**
     * Set the kmsDataKeyReusePeriodSeconds property: The length of time in seconds for which SQS can reuse a data key
     * to encrypt or decrypt messages before calling KMS again. The value must be an integer between 60 (1 minute) and
     * 86,400 (24 hours). The default is 300 (5 minutes). A shorter time period provides better security, but results in
     * more calls to KMS, which might incur charges after Free Tier. For more information, see [Encryption at
     * rest](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work)
     * in the *Developer Guide*.
     * 
     * @param kmsDataKeyReusePeriodSeconds the kmsDataKeyReusePeriodSeconds value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withKmsDataKeyReusePeriodSeconds(Integer kmsDataKeyReusePeriodSeconds) {
        this.kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds;
        return this;
    }

    /**
     * Get the kmsMasterKeyId property: The ID of an AWS Key Management Service (KMS) for SQS, or a custom KMS. To use
     * the AWS managed KMS for SQS, specify a (default) alias ARN, alias name (e.g. ``alias/aws/sqs``), key ARN, or key
     * ID. For more information, see the following: + [Encryption at
     * rest](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html)
     * in the *Developer Guide* +
     * [CreateQueue](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html) in the
     * *API Reference* + [Request
     * Parameters](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters)
     * in the *Key Management Service API Reference* + The Key Management Service (KMS) section of the [Best
     * Practices](https://docs.aws.amazon.com/https://d0.awsstatic.com/whitepapers/aws-kms-best-practices.pdf)
     * whitepaper.
     * 
     * @return the kmsMasterKeyId value.
     */
    public String kmsMasterKeyId() {
        return this.kmsMasterKeyId;
    }

    /**
     * Set the kmsMasterKeyId property: The ID of an AWS Key Management Service (KMS) for SQS, or a custom KMS. To use
     * the AWS managed KMS for SQS, specify a (default) alias ARN, alias name (e.g. ``alias/aws/sqs``), key ARN, or key
     * ID. For more information, see the following: + [Encryption at
     * rest](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html)
     * in the *Developer Guide* +
     * [CreateQueue](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html) in the
     * *API Reference* + [Request
     * Parameters](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters)
     * in the *Key Management Service API Reference* + The Key Management Service (KMS) section of the [Best
     * Practices](https://docs.aws.amazon.com/https://d0.awsstatic.com/whitepapers/aws-kms-best-practices.pdf)
     * whitepaper.
     * 
     * @param kmsMasterKeyId the kmsMasterKeyId value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withKmsMasterKeyId(String kmsMasterKeyId) {
        this.kmsMasterKeyId = kmsMasterKeyId;
        return this;
    }

    /**
     * Get the maximumMessageSize property: The limit of how many bytes that a message can contain before SQS rejects
     * it. You can specify an integer value from ``1,024`` bytes (1 KiB) to ``262,144`` bytes (256 KiB). The default
     * value is ``262,144`` (256 KiB).
     * 
     * @return the maximumMessageSize value.
     */
    public Integer maximumMessageSize() {
        return this.maximumMessageSize;
    }

    /**
     * Set the maximumMessageSize property: The limit of how many bytes that a message can contain before SQS rejects
     * it. You can specify an integer value from ``1,024`` bytes (1 KiB) to ``262,144`` bytes (256 KiB). The default
     * value is ``262,144`` (256 KiB).
     * 
     * @param maximumMessageSize the maximumMessageSize value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withMaximumMessageSize(Integer maximumMessageSize) {
        this.maximumMessageSize = maximumMessageSize;
        return this;
    }

    /**
     * Get the messageRetentionPeriod property: The number of seconds that SQS retains a message. You can specify an
     * integer value from ``60`` seconds (1 minute) to ``1,209,600`` seconds (14 days). The default value is ``345,600``
     * seconds (4 days).
     * 
     * @return the messageRetentionPeriod value.
     */
    public Integer messageRetentionPeriod() {
        return this.messageRetentionPeriod;
    }

    /**
     * Set the messageRetentionPeriod property: The number of seconds that SQS retains a message. You can specify an
     * integer value from ``60`` seconds (1 minute) to ``1,209,600`` seconds (14 days). The default value is ``345,600``
     * seconds (4 days).
     * 
     * @param messageRetentionPeriod the messageRetentionPeriod value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withMessageRetentionPeriod(Integer messageRetentionPeriod) {
        this.messageRetentionPeriod = messageRetentionPeriod;
        return this;
    }

    /**
     * Get the queueName property: A name for the queue. To create a FIFO queue, the name of your FIFO queue must end
     * with the ``.fifo`` suffix. For more information, see [FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html) in the
     * *Developer Guide*. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the queue
     * name. For more information, see [Name
     * type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) in the *User
     * Guide*. If you specify a name, you can't perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     * 
     * @return the queueName value.
     */
    public String queueName() {
        return this.queueName;
    }

    /**
     * Set the queueName property: A name for the queue. To create a FIFO queue, the name of your FIFO queue must end
     * with the ``.fifo`` suffix. For more information, see [FIFO
     * queues](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html) in the
     * *Developer Guide*. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the queue
     * name. For more information, see [Name
     * type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) in the *User
     * Guide*. If you specify a name, you can't perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     * 
     * @param queueName the queueName value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withQueueName(String queueName) {
        this.queueName = queueName;
        return this;
    }

    /**
     * Get the queueUrl property: Property queueUrl.
     * 
     * @return the queueUrl value.
     */
    public String queueUrl() {
        return this.queueUrl;
    }

    /**
     * Set the queueUrl property: Property queueUrl.
     * 
     * @param queueUrl the queueUrl value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withQueueUrl(String queueUrl) {
        this.queueUrl = queueUrl;
        return this;
    }

    /**
     * Get the receiveMessageWaitTimeSeconds property: Specifies the duration, in seconds, that the ReceiveMessage
     * action call waits until a message is in the queue in order to include it in the response, rather than returning
     * an empty response if a message isn't yet available. You can specify an integer from 1 to 20. Short polling is
     * used as the default or when you specify 0 for this property. For more information, see [Consuming messages using
     * long
     * polling](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html#sqs-long-polling)
     * in the *Developer Guide*.
     * 
     * @return the receiveMessageWaitTimeSeconds value.
     */
    public Integer receiveMessageWaitTimeSeconds() {
        return this.receiveMessageWaitTimeSeconds;
    }

    /**
     * Set the receiveMessageWaitTimeSeconds property: Specifies the duration, in seconds, that the ReceiveMessage
     * action call waits until a message is in the queue in order to include it in the response, rather than returning
     * an empty response if a message isn't yet available. You can specify an integer from 1 to 20. Short polling is
     * used as the default or when you specify 0 for this property. For more information, see [Consuming messages using
     * long
     * polling](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html#sqs-long-polling)
     * in the *Developer Guide*.
     * 
     * @param receiveMessageWaitTimeSeconds the receiveMessageWaitTimeSeconds value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withReceiveMessageWaitTimeSeconds(Integer receiveMessageWaitTimeSeconds) {
        this.receiveMessageWaitTimeSeconds = receiveMessageWaitTimeSeconds;
        return this;
    }

    /**
     * Get the redriveAllowPolicy property: The string that includes the parameters for the permissions for the
     * dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The
     * parameters are as follows: + ``redrivePermission``: The permission type that defines which source queues can
     * specify the current queue as the dead-letter queue. Valid values are: + ``allowAll``: (Default) Any source queues
     * in this AWS account in the same Region can specify this queue as the dead-letter queue. + ``denyAll``: No source
     * queues can specify this queue as the dead-letter queue. + ``byQueue``: Only queues specified by the
     * ``sourceQueueArns`` parameter can specify this queue as the dead-letter queue. + ``sourceQueueArns``: The Amazon
     * Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive
     * messages. You can specify this parameter only when the ``redrivePermission`` parameter is set to ``byQueue``. You
     * can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set
     * the ``redrivePermission`` parameter to ``allowAll``.
     * 
     * @return the redriveAllowPolicy value.
     */
    public Map<String, Object> redriveAllowPolicy() {
        return this.redriveAllowPolicy;
    }

    /**
     * Set the redriveAllowPolicy property: The string that includes the parameters for the permissions for the
     * dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The
     * parameters are as follows: + ``redrivePermission``: The permission type that defines which source queues can
     * specify the current queue as the dead-letter queue. Valid values are: + ``allowAll``: (Default) Any source queues
     * in this AWS account in the same Region can specify this queue as the dead-letter queue. + ``denyAll``: No source
     * queues can specify this queue as the dead-letter queue. + ``byQueue``: Only queues specified by the
     * ``sourceQueueArns`` parameter can specify this queue as the dead-letter queue. + ``sourceQueueArns``: The Amazon
     * Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive
     * messages. You can specify this parameter only when the ``redrivePermission`` parameter is set to ``byQueue``. You
     * can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set
     * the ``redrivePermission`` parameter to ``allowAll``.
     * 
     * @param redriveAllowPolicy the redriveAllowPolicy value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withRedriveAllowPolicy(Map<String, Object> redriveAllowPolicy) {
        this.redriveAllowPolicy = redriveAllowPolicy;
        return this;
    }

    /**
     * Get the redrivePolicy property: The string that includes the parameters for the dead-letter queue functionality
     * of the source queue as a JSON object. The parameters are as follows: + ``deadLetterTargetArn``: The Amazon
     * Resource Name (ARN) of the dead-letter queue to which SQS moves messages after the value of ``maxReceiveCount``
     * is exceeded. + ``maxReceiveCount``: The number of times a message is delivered to the source queue before being
     * moved to the dead-letter queue. When the ``ReceiveCount`` for a message exceeds the ``maxReceiveCount`` for a
     * queue, SQS moves the message to the dead-letter-queue. The dead-letter queue of a FIFO queue must also be a FIFO
     * queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. *JSON* ``{
     * 'deadLetterTargetArn' : String, 'maxReceiveCount' : Integer }`` *YAML* ``deadLetterTargetArn : String``
     * ``maxReceiveCount : Integer``.
     * 
     * @return the redrivePolicy value.
     */
    public Map<String, Object> redrivePolicy() {
        return this.redrivePolicy;
    }

    /**
     * Set the redrivePolicy property: The string that includes the parameters for the dead-letter queue functionality
     * of the source queue as a JSON object. The parameters are as follows: + ``deadLetterTargetArn``: The Amazon
     * Resource Name (ARN) of the dead-letter queue to which SQS moves messages after the value of ``maxReceiveCount``
     * is exceeded. + ``maxReceiveCount``: The number of times a message is delivered to the source queue before being
     * moved to the dead-letter queue. When the ``ReceiveCount`` for a message exceeds the ``maxReceiveCount`` for a
     * queue, SQS moves the message to the dead-letter-queue. The dead-letter queue of a FIFO queue must also be a FIFO
     * queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue. *JSON* ``{
     * 'deadLetterTargetArn' : String, 'maxReceiveCount' : Integer }`` *YAML* ``deadLetterTargetArn : String``
     * ``maxReceiveCount : Integer``.
     * 
     * @param redrivePolicy the redrivePolicy value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withRedrivePolicy(Map<String, Object> redrivePolicy) {
        this.redrivePolicy = redrivePolicy;
        return this;
    }

    /**
     * Get the sqsManagedSseEnabled property: Enables server-side queue encryption using SQS owned encryption keys. Only
     * one server-side encryption option is supported per queue (for example,
     * [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html)
     * or
     * [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
     * When ``SqsManagedSseEnabled`` is not defined, ``SSE-SQS`` encryption is enabled by default.
     * 
     * @return the sqsManagedSseEnabled value.
     */
    public Boolean sqsManagedSseEnabled() {
        return this.sqsManagedSseEnabled;
    }

    /**
     * Set the sqsManagedSseEnabled property: Enables server-side queue encryption using SQS owned encryption keys. Only
     * one server-side encryption option is supported per queue (for example,
     * [SSE-KMS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html)
     * or
     * [SSE-SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html)).
     * When ``SqsManagedSseEnabled`` is not defined, ``SSE-SQS`` encryption is enabled by default.
     * 
     * @param sqsManagedSseEnabled the sqsManagedSseEnabled value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withSqsManagedSseEnabled(Boolean sqsManagedSseEnabled) {
        this.sqsManagedSseEnabled = sqsManagedSseEnabled;
        return this;
    }

    /**
     * Get the tags property: The tags that you attach to this queue. For more information, see [Resource
     * tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) in the
     * *User Guide*.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated54> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags that you attach to this queue. For more information, see [Resource
     * tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) in the
     * *User Guide*.
     * 
     * @param tags the tags value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withTags(List<TagAutoGenerated54> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the visibilityTimeout property: The length of time during which a message will be unavailable after a message
     * is delivered from the queue. This blocks other components from receiving the same message and gives the initial
     * component time to process and delete the message from the queue. Values must be from 0 to 43,200 seconds (12
     * hours). If you don't specify a value, AWS CloudFormation uses the default value of 30 seconds. For more
     * information about SQS queue visibility timeouts, see [Visibility
     * timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html)
     * in the *Developer Guide*.
     * 
     * @return the visibilityTimeout value.
     */
    public Integer visibilityTimeout() {
        return this.visibilityTimeout;
    }

    /**
     * Set the visibilityTimeout property: The length of time during which a message will be unavailable after a message
     * is delivered from the queue. This blocks other components from receiving the same message and gives the initial
     * component time to process and delete the message from the queue. Values must be from 0 to 43,200 seconds (12
     * hours). If you don't specify a value, AWS CloudFormation uses the default value of 30 seconds. For more
     * information about SQS queue visibility timeouts, see [Visibility
     * timeout](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html)
     * in the *Developer Guide*.
     * 
     * @param visibilityTimeout the visibilityTimeout value to set.
     * @return the AwsSqsQueueProperties object itself.
     */
    public AwsSqsQueueProperties withVisibilityTimeout(Integer visibilityTimeout) {
        this.visibilityTimeout = visibilityTimeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeBooleanField("contentBasedDeduplication", this.contentBasedDeduplication);
        jsonWriter.writeStringField("deduplicationScope", this.deduplicationScope);
        jsonWriter.writeNumberField("delaySeconds", this.delaySeconds);
        jsonWriter.writeBooleanField("fifoQueue", this.fifoQueue);
        jsonWriter.writeStringField("fifoThroughputLimit", this.fifoThroughputLimit);
        jsonWriter.writeNumberField("kmsDataKeyReusePeriodSeconds", this.kmsDataKeyReusePeriodSeconds);
        jsonWriter.writeStringField("kmsMasterKeyId", this.kmsMasterKeyId);
        jsonWriter.writeNumberField("maximumMessageSize", this.maximumMessageSize);
        jsonWriter.writeNumberField("messageRetentionPeriod", this.messageRetentionPeriod);
        jsonWriter.writeStringField("queueName", this.queueName);
        jsonWriter.writeStringField("queueUrl", this.queueUrl);
        jsonWriter.writeNumberField("receiveMessageWaitTimeSeconds", this.receiveMessageWaitTimeSeconds);
        jsonWriter.writeMapField("redriveAllowPolicy", this.redriveAllowPolicy,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeMapField("redrivePolicy", this.redrivePolicy,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeBooleanField("sqsManagedSseEnabled", this.sqsManagedSseEnabled);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("visibilityTimeout", this.visibilityTimeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsSqsQueueProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsSqsQueueProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsSqsQueueProperties.
     */
    public static AwsSqsQueueProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsSqsQueueProperties deserializedAwsSqsQueueProperties = new AwsSqsQueueProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.arn = reader.getString();
                } else if ("contentBasedDeduplication".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.contentBasedDeduplication
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("deduplicationScope".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.deduplicationScope = reader.getString();
                } else if ("delaySeconds".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.delaySeconds = reader.getNullable(JsonReader::getInt);
                } else if ("fifoQueue".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.fifoQueue = reader.getNullable(JsonReader::getBoolean);
                } else if ("fifoThroughputLimit".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.fifoThroughputLimit = reader.getString();
                } else if ("kmsDataKeyReusePeriodSeconds".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.kmsDataKeyReusePeriodSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("kmsMasterKeyId".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.kmsMasterKeyId = reader.getString();
                } else if ("maximumMessageSize".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.maximumMessageSize = reader.getNullable(JsonReader::getInt);
                } else if ("messageRetentionPeriod".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.messageRetentionPeriod = reader.getNullable(JsonReader::getInt);
                } else if ("queueName".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.queueName = reader.getString();
                } else if ("queueUrl".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.queueUrl = reader.getString();
                } else if ("receiveMessageWaitTimeSeconds".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.receiveMessageWaitTimeSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("redriveAllowPolicy".equals(fieldName)) {
                    Map<String, Object> redriveAllowPolicy = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAwsSqsQueueProperties.redriveAllowPolicy = redriveAllowPolicy;
                } else if ("redrivePolicy".equals(fieldName)) {
                    Map<String, Object> redrivePolicy = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAwsSqsQueueProperties.redrivePolicy = redrivePolicy;
                } else if ("sqsManagedSseEnabled".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.sqsManagedSseEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated54> tags = reader.readArray(reader1 -> TagAutoGenerated54.fromJson(reader1));
                    deserializedAwsSqsQueueProperties.tags = tags;
                } else if ("visibilityTimeout".equals(fieldName)) {
                    deserializedAwsSqsQueueProperties.visibilityTimeout = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsSqsQueueProperties;
        });
    }
}
