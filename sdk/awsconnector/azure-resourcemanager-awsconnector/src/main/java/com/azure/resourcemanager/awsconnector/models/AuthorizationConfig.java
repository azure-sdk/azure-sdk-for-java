// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AuthorizationConfig.
 */
@Fluent
public final class AuthorizationConfig implements JsonSerializable<AuthorizationConfig> {
    /*
     * The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the
     * ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS
     * access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For
     * more information, see [Working with Amazon EFS access
     * points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User
     * Guide*.
     */
    private String accessPointId;

    /*
     * Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file
     * system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this
     * parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS
     * access
     * points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in
     * the *Amazon Elastic Container Service Developer Guide*.
     */
    private AuthorizationConfigIam iam;

    /**
     * Creates an instance of AuthorizationConfig class.
     */
    public AuthorizationConfig() {
    }

    /**
     * Get the accessPointId property: The Amazon EFS access point ID to use. If an access point is specified, the root
     * directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will
     * enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the
     * ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access
     * points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User
     * Guide*.
     * 
     * @return the accessPointId value.
     */
    public String accessPointId() {
        return this.accessPointId;
    }

    /**
     * Set the accessPointId property: The Amazon EFS access point ID to use. If an access point is specified, the root
     * directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will
     * enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the
     * ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access
     * points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User
     * Guide*.
     * 
     * @param accessPointId the accessPointId value to set.
     * @return the AuthorizationConfig object itself.
     */
    public AuthorizationConfig withAccessPointId(String accessPointId) {
        this.accessPointId = accessPointId;
        return this;
    }

    /**
     * Get the iam property: Determines whether to use the Amazon ECS task role defined in a task definition when
     * mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the
     * ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more
     * information, see [Using Amazon EFS access
     * points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in
     * the *Amazon Elastic Container Service Developer Guide*.
     * 
     * @return the iam value.
     */
    public AuthorizationConfigIam iam() {
        return this.iam;
    }

    /**
     * Set the iam property: Determines whether to use the Amazon ECS task role defined in a task definition when
     * mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the
     * ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more
     * information, see [Using Amazon EFS access
     * points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in
     * the *Amazon Elastic Container Service Developer Guide*.
     * 
     * @param iam the iam value to set.
     * @return the AuthorizationConfig object itself.
     */
    public AuthorizationConfig withIam(AuthorizationConfigIam iam) {
        this.iam = iam;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessPointId", this.accessPointId);
        jsonWriter.writeStringField("iam", this.iam == null ? null : this.iam.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizationConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizationConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthorizationConfig.
     */
    public static AuthorizationConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizationConfig deserializedAuthorizationConfig = new AuthorizationConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessPointId".equals(fieldName)) {
                    deserializedAuthorizationConfig.accessPointId = reader.getString();
                } else if ("iam".equals(fieldName)) {
                    deserializedAuthorizationConfig.iam = AuthorizationConfigIam.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizationConfig;
        });
    }
}
