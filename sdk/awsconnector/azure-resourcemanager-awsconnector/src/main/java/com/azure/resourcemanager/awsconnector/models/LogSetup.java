// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of LogSetup.
 */
@Fluent
public final class LogSetup implements JsonSerializable<LogSetup> {
    /*
     * <p>If a log type is enabled, that log type exports its control plane logs to CloudWatch Logs. If a log type isn't
     * enabled, that log type doesn't export its control plane logs. Each individual log type can be enabled or disabled
     * independently.</p>
     */
    private Boolean enabled;

    /*
     * <p>The available cluster control plane log types.</p>
     */
    private List<LogType> types;

    /**
     * Creates an instance of LogSetup class.
     */
    public LogSetup() {
    }

    /**
     * Get the enabled property: &lt;p&gt;If a log type is enabled, that log type exports its control plane logs to
     * CloudWatch Logs. If a log type isn't enabled, that log type doesn't export its control plane logs. Each
     * individual log type can be enabled or disabled independently.&lt;/p&gt;.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: &lt;p&gt;If a log type is enabled, that log type exports its control plane logs to
     * CloudWatch Logs. If a log type isn't enabled, that log type doesn't export its control plane logs. Each
     * individual log type can be enabled or disabled independently.&lt;/p&gt;.
     * 
     * @param enabled the enabled value to set.
     * @return the LogSetup object itself.
     */
    public LogSetup withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the types property: &lt;p&gt;The available cluster control plane log types.&lt;/p&gt;.
     * 
     * @return the types value.
     */
    public List<LogType> types() {
        return this.types;
    }

    /**
     * Set the types property: &lt;p&gt;The available cluster control plane log types.&lt;/p&gt;.
     * 
     * @param types the types value to set.
     * @return the LogSetup object itself.
     */
    public LogSetup withTypes(List<LogType> types) {
        this.types = types;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeArrayField("types", this.types,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogSetup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogSetup if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the LogSetup.
     */
    public static LogSetup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogSetup deserializedLogSetup = new LogSetup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedLogSetup.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("types".equals(fieldName)) {
                    List<LogType> types = reader.readArray(reader1 -> LogType.fromString(reader1.getString()));
                    deserializedLogSetup.types = types;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogSetup;
        });
    }
}
