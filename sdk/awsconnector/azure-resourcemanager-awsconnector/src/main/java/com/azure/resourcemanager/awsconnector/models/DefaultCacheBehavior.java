// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of DefaultCacheBehavior.
 */
@Fluent
public final class DefaultCacheBehavior implements JsonSerializable<DefaultCacheBehavior> {
    /*
     * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or
     * your custom origin. There are three choices: + CloudFront forwards only ``GET`` and ``HEAD`` requests. +
     * CloudFront forwards only ``GET``, ``HEAD``, and ``OPTIONS`` requests. + CloudFront forwards ``GET, HEAD, OPTIONS,
     * PUT, PATCH, POST``, and ``DELETE`` requests. If you pick the third choice, you may need to restrict access to
     * your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For
     * example, you might not want users to have permissions to delete objects from your origin.
     */
    private List<String> allowedMethods;

    /*
     * The unique identifier of the cache policy that is attached to the default cache behavior. For more information,
     * see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or
     * ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
     */
    private String cachePolicyId;

    /*
     * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods.
     * There are two choices: + CloudFront caches responses to ``GET`` and ``HEAD`` requests. + CloudFront caches
     * responses to ``GET``, ``HEAD``, and ``OPTIONS`` requests. If you pick the second choice for your Amazon S3
     * Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers
     * for the responses to be cached correctly.
     */
    private List<String> cachedMethods;

    /*
     * Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify
     * ``true``; if not, specify ``false``. For more information, see [Serving Compressed
     * Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the
     * *Amazon CloudFront Developer Guide*.
     */
    private Boolean compress;

    /*
     * This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this
     * field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. The value that you specify applies only when your origin does not add HTTP headers such as
     * ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see
     * [Managing How Long Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private Integer defaultTtl;

    /*
     * The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting
     * specific fields of data for the default cache behavior.
     */
    private String fieldLevelEncryptionId;

    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. For more information, see [Working with
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the
     * *Amazon CloudFront Developer Guide*. If you want to include values in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) or [Using the managed origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-
     * policies.html) in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a
     * ``CachePolicyId`` or ``ForwardedValues``. We recommend that you use a ``CachePolicyId``. A complex type that
     * specifies how CloudFront handles query strings, cookies, and HTTP headers. This field is deprecated. We recommend
     * that you use a cache policy or an origin request policy instead of this field. If you want to include values in
     * the cache key, use a cache policy. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin
     * but not include them in the cache key, use an origin request policy. For more information, see [Creating origin
     * request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that
     * specifies how CloudFront handles query strings, cookies, and HTTP headers.
     */
    private ForwardedValues forwardedValues;

    /*
     * A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be
     * published to the ``LIVE`` stage to associate them with a cache behavior.
     */
    private List<FunctionAssociation> functionAssociations;

    /*
     * A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
     */
    private List<LambdaFunctionAssociation> lambdaFunctionAssociations;

    /*
     * This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field.
     * For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control
     * max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long
     * Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private Integer maxTtl;

    /*
     * This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field.
     * For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. For more information, see [Managing How Long Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all
     * headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
     */
    private Integer minTtl;

    /*
     * The unique identifier of the origin request policy that is attached to the default cache behavior. For more
     * information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) or [Using the managed origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-
     * policies.html) in the *Amazon CloudFront Developer Guide*.
     */
    private String originRequestPolicyId;

    /*
     * The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For
     * more information, see [Real-time
     * logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private String realtimeLogConfigArn;

    /*
     * The identifier for a response headers policy.
     */
    private String responseHeadersPolicyId;

    /*
     * Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin
     * that is associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify
     * ``true`` for ``SmoothStreaming``, you can still distribute other content using this cache behavior if the content
     * matches the value of ``PathPattern``.
     */
    private Boolean smoothStreaming;

    /*
     * The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache
     * behavior.
     */
    private String targetOriginId;

    /*
     * A list of key groups that CloudFront can use to validate signed URLs or signed cookies. When a cache behavior
     * contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the
     * cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the
     * key group. The signed URL or cookie contains information about which public key CloudFront should use to verify
     * the signature. For more information, see [Serving private
     * content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private List<String> trustedKeyGroups;

    /*
     * We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``. A list of AWS-account IDs whose public
     * keys CloudFront can use to validate signed URLs or signed cookies. When a cache behavior contains trusted
     * signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The
     * URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted signer's AWS-account.
     * The signed URL or cookie contains information about which public key CloudFront should use to verify the
     * signature. For more information, see [Serving private
     * content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private List<String> trustedSigners;

    /*
     * The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a
     * request matches the path pattern in ``PathPattern``. You can specify the following options: + ``allow-all``:
     * Viewers can use HTTP or HTTPS. + ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns
     * an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits
     * the request using the new URL. + ``https-only``: If a viewer sends an HTTP request, CloudFront returns an HTTP
     * status code of 403 (Forbidden). For more information about requiring the HTTPS protocol, see [Requiring HTTPS
     * Between Viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.
     * html) in the *Amazon CloudFront Developer Guide*. The only way to guarantee that viewers retrieve an object that
     * was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have
     * recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are
     * protocol agnostic. That means that an edge location will return an object from the cache regardless of whether
     * the current request protocol matches the protocol used previously. For more information, see [Managing Cache
     * Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private String viewerProtocolPolicy;

    /**
     * Creates an instance of DefaultCacheBehavior class.
     */
    public DefaultCacheBehavior() {
    }

    /**
     * Get the allowedMethods property: A complex type that controls which HTTP methods CloudFront processes and
     * forwards to your Amazon S3 bucket or your custom origin. There are three choices: + CloudFront forwards only
     * ``GET`` and ``HEAD`` requests. + CloudFront forwards only ``GET``, ``HEAD``, and ``OPTIONS`` requests. +
     * CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE`` requests. If you pick the third
     * choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform
     * operations that you don't want them to. For example, you might not want users to have permissions to delete
     * objects from your origin.
     * 
     * @return the allowedMethods value.
     */
    public List<String> allowedMethods() {
        return this.allowedMethods;
    }

    /**
     * Set the allowedMethods property: A complex type that controls which HTTP methods CloudFront processes and
     * forwards to your Amazon S3 bucket or your custom origin. There are three choices: + CloudFront forwards only
     * ``GET`` and ``HEAD`` requests. + CloudFront forwards only ``GET``, ``HEAD``, and ``OPTIONS`` requests. +
     * CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE`` requests. If you pick the third
     * choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform
     * operations that you don't want them to. For example, you might not want users to have permissions to delete
     * objects from your origin.
     * 
     * @param allowedMethods the allowedMethods value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withAllowedMethods(List<String> allowedMethods) {
        this.allowedMethods = allowedMethods;
        return this;
    }

    /**
     * Get the cachePolicyId property: The unique identifier of the cache policy that is attached to the default cache
     * behavior. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or
     * ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
     * 
     * @return the cachePolicyId value.
     */
    public String cachePolicyId() {
        return this.cachePolicyId;
    }

    /**
     * Set the cachePolicyId property: The unique identifier of the cache policy that is attached to the default cache
     * behavior. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or
     * ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
     * 
     * @param cachePolicyId the cachePolicyId value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withCachePolicyId(String cachePolicyId) {
        this.cachePolicyId = cachePolicyId;
        return this;
    }

    /**
     * Get the cachedMethods property: A complex type that controls whether CloudFront caches the response to requests
     * using the specified HTTP methods. There are two choices: + CloudFront caches responses to ``GET`` and ``HEAD``
     * requests. + CloudFront caches responses to ``GET``, ``HEAD``, and ``OPTIONS`` requests. If you pick the second
     * choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method,
     * Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
     * 
     * @return the cachedMethods value.
     */
    public List<String> cachedMethods() {
        return this.cachedMethods;
    }

    /**
     * Set the cachedMethods property: A complex type that controls whether CloudFront caches the response to requests
     * using the specified HTTP methods. There are two choices: + CloudFront caches responses to ``GET`` and ``HEAD``
     * requests. + CloudFront caches responses to ``GET``, ``HEAD``, and ``OPTIONS`` requests. If you pick the second
     * choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method,
     * Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
     * 
     * @param cachedMethods the cachedMethods value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withCachedMethods(List<String> cachedMethods) {
        this.cachedMethods = cachedMethods;
        return this;
    }

    /**
     * Get the compress property: Whether you want CloudFront to automatically compress certain files for this cache
     * behavior. If so, specify ``true``; if not, specify ``false``. For more information, see [Serving Compressed
     * Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @return the compress value.
     */
    public Boolean compress() {
        return this.compress;
    }

    /**
     * Set the compress property: Whether you want CloudFront to automatically compress certain files for this cache
     * behavior. If so, specify ``true``; if not, specify ``false``. For more information, see [Serving Compressed
     * Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @param compress the compress value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withCompress(Boolean compress) {
        this.compress = compress;
        return this;
    }

    /**
     * Get the defaultTtl property: This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a
     * cache policy instead of this field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. The value that you specify applies only when your origin does not add HTTP headers such as
     * ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see
     * [Managing How Long Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the defaultTtl value.
     */
    public Integer defaultTtl() {
        return this.defaultTtl;
    }

    /**
     * Set the defaultTtl property: This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a
     * cache policy instead of this field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The default amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. The value that you specify applies only when your origin does not add HTTP headers such as
     * ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see
     * [Managing How Long Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param defaultTtl the defaultTtl value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withDefaultTtl(Integer defaultTtl) {
        this.defaultTtl = defaultTtl;
        return this;
    }

    /**
     * Get the fieldLevelEncryptionId property: The value of ``ID`` for the field-level encryption configuration that
     * you want CloudFront to use for encrypting specific fields of data for the default cache behavior.
     * 
     * @return the fieldLevelEncryptionId value.
     */
    public String fieldLevelEncryptionId() {
        return this.fieldLevelEncryptionId;
    }

    /**
     * Set the fieldLevelEncryptionId property: The value of ``ID`` for the field-level encryption configuration that
     * you want CloudFront to use for encrypting specific fields of data for the default cache behavior.
     * 
     * @param fieldLevelEncryptionId the fieldLevelEncryptionId value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withFieldLevelEncryptionId(String fieldLevelEncryptionId) {
        this.fieldLevelEncryptionId = fieldLevelEncryptionId;
        return this;
    }

    /**
     * Get the forwardedValues property: This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. For more information, see [Working with
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the
     * *Amazon CloudFront Developer Guide*. If you want to include values in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * or [Using the managed origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
     * in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or
     * ``ForwardedValues``. We recommend that you use a ``CachePolicyId``. A complex type that specifies how CloudFront
     * handles query strings, cookies, and HTTP headers. This field is deprecated. We recommend that you use a cache
     * policy or an origin request policy instead of this field. If you want to include values in the cache key, use a
     * cache policy. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies how CloudFront handles query strings,
     * cookies, and HTTP headers.
     * 
     * @return the forwardedValues value.
     */
    public ForwardedValues forwardedValues() {
        return this.forwardedValues;
    }

    /**
     * Set the forwardedValues property: This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. For more information, see [Working with
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the
     * *Amazon CloudFront Developer Guide*. If you want to include values in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * or [Using the managed origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
     * in the *Amazon CloudFront Developer Guide*. A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or
     * ``ForwardedValues``. We recommend that you use a ``CachePolicyId``. A complex type that specifies how CloudFront
     * handles query strings, cookies, and HTTP headers. This field is deprecated. We recommend that you use a cache
     * policy or an origin request policy instead of this field. If you want to include values in the cache key, use a
     * cache policy. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send values to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies how CloudFront handles query strings,
     * cookies, and HTTP headers.
     * 
     * @param forwardedValues the forwardedValues value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withForwardedValues(ForwardedValues forwardedValues) {
        this.forwardedValues = forwardedValues;
        return this;
    }

    /**
     * Get the functionAssociations property: A list of CloudFront functions that are associated with this cache
     * behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.
     * 
     * @return the functionAssociations value.
     */
    public List<FunctionAssociation> functionAssociations() {
        return this.functionAssociations;
    }

    /**
     * Set the functionAssociations property: A list of CloudFront functions that are associated with this cache
     * behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.
     * 
     * @param functionAssociations the functionAssociations value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withFunctionAssociations(List<FunctionAssociation> functionAssociations) {
        this.functionAssociations = functionAssociations;
        return this;
    }

    /**
     * Get the lambdaFunctionAssociations property: A complex type that contains zero or more Lambda&#064;Edge function
     * associations for a cache behavior.
     * 
     * @return the lambdaFunctionAssociations value.
     */
    public List<LambdaFunctionAssociation> lambdaFunctionAssociations() {
        return this.lambdaFunctionAssociations;
    }

    /**
     * Set the lambdaFunctionAssociations property: A complex type that contains zero or more Lambda&#064;Edge function
     * associations for a cache behavior.
     * 
     * @param lambdaFunctionAssociations the lambdaFunctionAssociations value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior
        withLambdaFunctionAssociations(List<LambdaFunctionAssociation> lambdaFunctionAssociations) {
        this.lambdaFunctionAssociations = lambdaFunctionAssociations;
        return this;
    }

    /**
     * Get the maxTtl property: This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache
     * policy instead of this field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control
     * max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long
     * Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the maxTtl value.
     */
    public Integer maxTtl() {
        return this.maxTtl;
    }

    /**
     * Set the maxTtl property: This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache
     * policy instead of this field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The maximum amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control
     * max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long
     * Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param maxTtl the maxTtl value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withMaxTtl(Integer maxTtl) {
        this.maxTtl = maxTtl;
        return this;
    }

    /**
     * Get the minTtl property: This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache
     * policy instead of this field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. For more information, see [Managing How Long Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all
     * headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
     * 
     * @return the minTtl value.
     */
    public Integer minTtl() {
        return this.minTtl;
    }

    /**
     * Set the minTtl property: This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache
     * policy instead of this field. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * or [Using the managed cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html)
     * in the *Amazon CloudFront Developer Guide*. The minimum amount of time that you want objects to stay in
     * CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has
     * been updated. For more information, see [Managing How Long Content Stays in an Edge Cache
     * (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*. You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all
     * headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
     * 
     * @param minTtl the minTtl value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withMinTtl(Integer minTtl) {
        this.minTtl = minTtl;
        return this;
    }

    /**
     * Get the originRequestPolicyId property: The unique identifier of the origin request policy that is attached to
     * the default cache behavior. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * or [Using the managed origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @return the originRequestPolicyId value.
     */
    public String originRequestPolicyId() {
        return this.originRequestPolicyId;
    }

    /**
     * Set the originRequestPolicyId property: The unique identifier of the origin request policy that is attached to
     * the default cache behavior. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * or [Using the managed origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @param originRequestPolicyId the originRequestPolicyId value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withOriginRequestPolicyId(String originRequestPolicyId) {
        this.originRequestPolicyId = originRequestPolicyId;
        return this;
    }

    /**
     * Get the realtimeLogConfigArn property: The Amazon Resource Name (ARN) of the real-time log configuration that is
     * attached to this cache behavior. For more information, see [Real-time
     * logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the realtimeLogConfigArn value.
     */
    public String realtimeLogConfigArn() {
        return this.realtimeLogConfigArn;
    }

    /**
     * Set the realtimeLogConfigArn property: The Amazon Resource Name (ARN) of the real-time log configuration that is
     * attached to this cache behavior. For more information, see [Real-time
     * logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param realtimeLogConfigArn the realtimeLogConfigArn value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withRealtimeLogConfigArn(String realtimeLogConfigArn) {
        this.realtimeLogConfigArn = realtimeLogConfigArn;
        return this;
    }

    /**
     * Get the responseHeadersPolicyId property: The identifier for a response headers policy.
     * 
     * @return the responseHeadersPolicyId value.
     */
    public String responseHeadersPolicyId() {
        return this.responseHeadersPolicyId;
    }

    /**
     * Set the responseHeadersPolicyId property: The identifier for a response headers policy.
     * 
     * @param responseHeadersPolicyId the responseHeadersPolicyId value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withResponseHeadersPolicyId(String responseHeadersPolicyId) {
        this.responseHeadersPolicyId = responseHeadersPolicyId;
        return this;
    }

    /**
     * Get the smoothStreaming property: Indicates whether you want to distribute media files in the Microsoft Smooth
     * Streaming format using the origin that is associated with this cache behavior. If so, specify ``true``; if not,
     * specify ``false``. If you specify ``true`` for ``SmoothStreaming``, you can still distribute other content using
     * this cache behavior if the content matches the value of ``PathPattern``.
     * 
     * @return the smoothStreaming value.
     */
    public Boolean smoothStreaming() {
        return this.smoothStreaming;
    }

    /**
     * Set the smoothStreaming property: Indicates whether you want to distribute media files in the Microsoft Smooth
     * Streaming format using the origin that is associated with this cache behavior. If so, specify ``true``; if not,
     * specify ``false``. If you specify ``true`` for ``SmoothStreaming``, you can still distribute other content using
     * this cache behavior if the content matches the value of ``PathPattern``.
     * 
     * @param smoothStreaming the smoothStreaming value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withSmoothStreaming(Boolean smoothStreaming) {
        this.smoothStreaming = smoothStreaming;
        return this;
    }

    /**
     * Get the targetOriginId property: The value of ``ID`` for the origin that you want CloudFront to route requests to
     * when they use the default cache behavior.
     * 
     * @return the targetOriginId value.
     */
    public String targetOriginId() {
        return this.targetOriginId;
    }

    /**
     * Set the targetOriginId property: The value of ``ID`` for the origin that you want CloudFront to route requests to
     * when they use the default cache behavior.
     * 
     * @param targetOriginId the targetOriginId value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withTargetOriginId(String targetOriginId) {
        this.targetOriginId = targetOriginId;
        return this;
    }

    /**
     * Get the trustedKeyGroups property: A list of key groups that CloudFront can use to validate signed URLs or signed
     * cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for
     * all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose
     * corresponding public key is in the key group. The signed URL or cookie contains information about which public
     * key CloudFront should use to verify the signature. For more information, see [Serving private
     * content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the trustedKeyGroups value.
     */
    public List<String> trustedKeyGroups() {
        return this.trustedKeyGroups;
    }

    /**
     * Set the trustedKeyGroups property: A list of key groups that CloudFront can use to validate signed URLs or signed
     * cookies. When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for
     * all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose
     * corresponding public key is in the key group. The signed URL or cookie contains information about which public
     * key CloudFront should use to verify the signature. For more information, see [Serving private
     * content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param trustedKeyGroups the trustedKeyGroups value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withTrustedKeyGroups(List<String> trustedKeyGroups) {
        this.trustedKeyGroups = trustedKeyGroups;
        return this;
    }

    /**
     * Get the trustedSigners property: We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``. A list of
     * AWS-account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache
     * behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match
     * the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted
     * signer's AWS-account. The signed URL or cookie contains information about which public key CloudFront should use
     * to verify the signature. For more information, see [Serving private
     * content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the trustedSigners value.
     */
    public List<String> trustedSigners() {
        return this.trustedSigners;
    }

    /**
     * Set the trustedSigners property: We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``. A list of
     * AWS-account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies. When a cache
     * behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match
     * the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted
     * signer's AWS-account. The signed URL or cookie contains information about which public key CloudFront should use
     * to verify the signature. For more information, see [Serving private
     * content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param trustedSigners the trustedSigners value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withTrustedSigners(List<String> trustedSigners) {
        this.trustedSigners = trustedSigners;
        return this;
    }

    /**
     * Get the viewerProtocolPolicy property: The protocol that viewers can use to access the files in the origin
     * specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern``. You can specify the
     * following options: + ``allow-all``: Viewers can use HTTP or HTTPS. + ``redirect-to-https``: If a viewer submits
     * an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the
     * HTTPS URL. The viewer then resubmits the request using the new URL. + ``https-only``: If a viewer sends an HTTP
     * request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about requiring the
     * HTTPS protocol, see [Requiring HTTPS Between Viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
     * in the *Amazon CloudFront Developer Guide*. The only way to guarantee that viewers retrieve an object that was
     * fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently
     * changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol
     * agnostic. That means that an edge location will return an object from the cache regardless of whether the current
     * request protocol matches the protocol used previously. For more information, see [Managing Cache
     * Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the viewerProtocolPolicy value.
     */
    public String viewerProtocolPolicy() {
        return this.viewerProtocolPolicy;
    }

    /**
     * Set the viewerProtocolPolicy property: The protocol that viewers can use to access the files in the origin
     * specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern``. You can specify the
     * following options: + ``allow-all``: Viewers can use HTTP or HTTPS. + ``redirect-to-https``: If a viewer submits
     * an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the
     * HTTPS URL. The viewer then resubmits the request using the new URL. + ``https-only``: If a viewer sends an HTTP
     * request, CloudFront returns an HTTP status code of 403 (Forbidden). For more information about requiring the
     * HTTPS protocol, see [Requiring HTTPS Between Viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html)
     * in the *Amazon CloudFront Developer Guide*. The only way to guarantee that viewers retrieve an object that was
     * fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently
     * changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol
     * agnostic. That means that an edge location will return an object from the cache regardless of whether the current
     * request protocol matches the protocol used previously. For more information, see [Managing Cache
     * Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param viewerProtocolPolicy the viewerProtocolPolicy value to set.
     * @return the DefaultCacheBehavior object itself.
     */
    public DefaultCacheBehavior withViewerProtocolPolicy(String viewerProtocolPolicy) {
        this.viewerProtocolPolicy = viewerProtocolPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (forwardedValues() != null) {
            forwardedValues().validate();
        }
        if (functionAssociations() != null) {
            functionAssociations().forEach(e -> e.validate());
        }
        if (lambdaFunctionAssociations() != null) {
            lambdaFunctionAssociations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedMethods", this.allowedMethods,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("cachePolicyId", this.cachePolicyId);
        jsonWriter.writeArrayField("cachedMethods", this.cachedMethods,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("compress", this.compress);
        jsonWriter.writeNumberField("defaultTTL", this.defaultTtl);
        jsonWriter.writeStringField("fieldLevelEncryptionId", this.fieldLevelEncryptionId);
        jsonWriter.writeJsonField("forwardedValues", this.forwardedValues);
        jsonWriter.writeArrayField("functionAssociations", this.functionAssociations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("lambdaFunctionAssociations", this.lambdaFunctionAssociations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("maxTTL", this.maxTtl);
        jsonWriter.writeNumberField("minTTL", this.minTtl);
        jsonWriter.writeStringField("originRequestPolicyId", this.originRequestPolicyId);
        jsonWriter.writeStringField("realtimeLogConfigArn", this.realtimeLogConfigArn);
        jsonWriter.writeStringField("responseHeadersPolicyId", this.responseHeadersPolicyId);
        jsonWriter.writeBooleanField("smoothStreaming", this.smoothStreaming);
        jsonWriter.writeStringField("targetOriginId", this.targetOriginId);
        jsonWriter.writeArrayField("trustedKeyGroups", this.trustedKeyGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("trustedSigners", this.trustedSigners,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("viewerProtocolPolicy", this.viewerProtocolPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultCacheBehavior from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultCacheBehavior if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefaultCacheBehavior.
     */
    public static DefaultCacheBehavior fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefaultCacheBehavior deserializedDefaultCacheBehavior = new DefaultCacheBehavior();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedMethods".equals(fieldName)) {
                    List<String> allowedMethods = reader.readArray(reader1 -> reader1.getString());
                    deserializedDefaultCacheBehavior.allowedMethods = allowedMethods;
                } else if ("cachePolicyId".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.cachePolicyId = reader.getString();
                } else if ("cachedMethods".equals(fieldName)) {
                    List<String> cachedMethods = reader.readArray(reader1 -> reader1.getString());
                    deserializedDefaultCacheBehavior.cachedMethods = cachedMethods;
                } else if ("compress".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.compress = reader.getNullable(JsonReader::getBoolean);
                } else if ("defaultTTL".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.defaultTtl = reader.getNullable(JsonReader::getInt);
                } else if ("fieldLevelEncryptionId".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.fieldLevelEncryptionId = reader.getString();
                } else if ("forwardedValues".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.forwardedValues = ForwardedValues.fromJson(reader);
                } else if ("functionAssociations".equals(fieldName)) {
                    List<FunctionAssociation> functionAssociations
                        = reader.readArray(reader1 -> FunctionAssociation.fromJson(reader1));
                    deserializedDefaultCacheBehavior.functionAssociations = functionAssociations;
                } else if ("lambdaFunctionAssociations".equals(fieldName)) {
                    List<LambdaFunctionAssociation> lambdaFunctionAssociations
                        = reader.readArray(reader1 -> LambdaFunctionAssociation.fromJson(reader1));
                    deserializedDefaultCacheBehavior.lambdaFunctionAssociations = lambdaFunctionAssociations;
                } else if ("maxTTL".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.maxTtl = reader.getNullable(JsonReader::getInt);
                } else if ("minTTL".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.minTtl = reader.getNullable(JsonReader::getInt);
                } else if ("originRequestPolicyId".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.originRequestPolicyId = reader.getString();
                } else if ("realtimeLogConfigArn".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.realtimeLogConfigArn = reader.getString();
                } else if ("responseHeadersPolicyId".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.responseHeadersPolicyId = reader.getString();
                } else if ("smoothStreaming".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.smoothStreaming = reader.getNullable(JsonReader::getBoolean);
                } else if ("targetOriginId".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.targetOriginId = reader.getString();
                } else if ("trustedKeyGroups".equals(fieldName)) {
                    List<String> trustedKeyGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedDefaultCacheBehavior.trustedKeyGroups = trustedKeyGroups;
                } else if ("trustedSigners".equals(fieldName)) {
                    List<String> trustedSigners = reader.readArray(reader1 -> reader1.getString());
                    deserializedDefaultCacheBehavior.trustedSigners = trustedSigners;
                } else if ("viewerProtocolPolicy".equals(fieldName)) {
                    deserializedDefaultCacheBehavior.viewerProtocolPolicy = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefaultCacheBehavior;
        });
    }
}
