// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of CanarySetting.
 */
@Fluent
public final class CanarySetting implements JsonSerializable<CanarySetting> {
    /*
     * The ID of the canary deployment.
     */
    private String deploymentId;

    /*
     * The percent (0-100) of traffic diverted to a canary deployment.
     */
    private Integer percentTraffic;

    /*
     * Stage variables overridden for a canary release deployment, including new stage variables introduced in the
     * canary. These stage variables are represented as a string-to-string map between stage variable names and their
     * values.
     */
    private Map<String, String> stageVariableOverrides;

    /*
     * A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
     */
    private Boolean useStageCache;

    /**
     * Creates an instance of CanarySetting class.
     */
    public CanarySetting() {
    }

    /**
     * Get the deploymentId property: The ID of the canary deployment.
     * 
     * @return the deploymentId value.
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Set the deploymentId property: The ID of the canary deployment.
     * 
     * @param deploymentId the deploymentId value to set.
     * @return the CanarySetting object itself.
     */
    public CanarySetting withDeploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
        return this;
    }

    /**
     * Get the percentTraffic property: The percent (0-100) of traffic diverted to a canary deployment.
     * 
     * @return the percentTraffic value.
     */
    public Integer percentTraffic() {
        return this.percentTraffic;
    }

    /**
     * Set the percentTraffic property: The percent (0-100) of traffic diverted to a canary deployment.
     * 
     * @param percentTraffic the percentTraffic value to set.
     * @return the CanarySetting object itself.
     */
    public CanarySetting withPercentTraffic(Integer percentTraffic) {
        this.percentTraffic = percentTraffic;
        return this;
    }

    /**
     * Get the stageVariableOverrides property: Stage variables overridden for a canary release deployment, including
     * new stage variables introduced in the canary. These stage variables are represented as a string-to-string map
     * between stage variable names and their values.
     * 
     * @return the stageVariableOverrides value.
     */
    public Map<String, String> stageVariableOverrides() {
        return this.stageVariableOverrides;
    }

    /**
     * Set the stageVariableOverrides property: Stage variables overridden for a canary release deployment, including
     * new stage variables introduced in the canary. These stage variables are represented as a string-to-string map
     * between stage variable names and their values.
     * 
     * @param stageVariableOverrides the stageVariableOverrides value to set.
     * @return the CanarySetting object itself.
     */
    public CanarySetting withStageVariableOverrides(Map<String, String> stageVariableOverrides) {
        this.stageVariableOverrides = stageVariableOverrides;
        return this;
    }

    /**
     * Get the useStageCache property: A Boolean flag to indicate whether the canary deployment uses the stage cache or
     * not.
     * 
     * @return the useStageCache value.
     */
    public Boolean useStageCache() {
        return this.useStageCache;
    }

    /**
     * Set the useStageCache property: A Boolean flag to indicate whether the canary deployment uses the stage cache or
     * not.
     * 
     * @param useStageCache the useStageCache value to set.
     * @return the CanarySetting object itself.
     */
    public CanarySetting withUseStageCache(Boolean useStageCache) {
        this.useStageCache = useStageCache;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentId", this.deploymentId);
        jsonWriter.writeNumberField("percentTraffic", this.percentTraffic);
        jsonWriter.writeMapField("stageVariableOverrides", this.stageVariableOverrides,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("useStageCache", this.useStageCache);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CanarySetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CanarySetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CanarySetting.
     */
    public static CanarySetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CanarySetting deserializedCanarySetting = new CanarySetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentId".equals(fieldName)) {
                    deserializedCanarySetting.deploymentId = reader.getString();
                } else if ("percentTraffic".equals(fieldName)) {
                    deserializedCanarySetting.percentTraffic = reader.getNullable(JsonReader::getInt);
                } else if ("stageVariableOverrides".equals(fieldName)) {
                    Map<String, String> stageVariableOverrides = reader.readMap(reader1 -> reader1.getString());
                    deserializedCanarySetting.stageVariableOverrides = stageVariableOverrides;
                } else if ("useStageCache".equals(fieldName)) {
                    deserializedCanarySetting.useStageCache = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCanarySetting;
        });
    }
}
