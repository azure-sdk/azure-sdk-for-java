// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of UnusedAccessConfiguration.
 */
@Fluent
public final class UnusedAccessConfiguration implements JsonSerializable<UnusedAccessConfiguration> {
    /*
     * The specified access age in days for which to generate findings for unused access. For example, if you specify 90
     * days, the analyzer will generate findings for IAM entities within the accounts of the selected organization for
     * any access that hasn't been used in 90 or more days since the analyzer's last scan. You can choose a value
     * between 1 and 180 days.
     */
    private Integer unusedAccessAge;

    /**
     * Creates an instance of UnusedAccessConfiguration class.
     */
    public UnusedAccessConfiguration() {
    }

    /**
     * Get the unusedAccessAge property: The specified access age in days for which to generate findings for unused
     * access. For example, if you specify 90 days, the analyzer will generate findings for IAM entities within the
     * accounts of the selected organization for any access that hasn't been used in 90 or more days since the
     * analyzer's last scan. You can choose a value between 1 and 180 days.
     * 
     * @return the unusedAccessAge value.
     */
    public Integer unusedAccessAge() {
        return this.unusedAccessAge;
    }

    /**
     * Set the unusedAccessAge property: The specified access age in days for which to generate findings for unused
     * access. For example, if you specify 90 days, the analyzer will generate findings for IAM entities within the
     * accounts of the selected organization for any access that hasn't been used in 90 or more days since the
     * analyzer's last scan. You can choose a value between 1 and 180 days.
     * 
     * @param unusedAccessAge the unusedAccessAge value to set.
     * @return the UnusedAccessConfiguration object itself.
     */
    public UnusedAccessConfiguration withUnusedAccessAge(Integer unusedAccessAge) {
        this.unusedAccessAge = unusedAccessAge;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("unusedAccessAge", this.unusedAccessAge);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UnusedAccessConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UnusedAccessConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UnusedAccessConfiguration.
     */
    public static UnusedAccessConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UnusedAccessConfiguration deserializedUnusedAccessConfiguration = new UnusedAccessConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unusedAccessAge".equals(fieldName)) {
                    deserializedUnusedAccessConfiguration.unusedAccessAge = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUnusedAccessConfiguration;
        });
    }
}
