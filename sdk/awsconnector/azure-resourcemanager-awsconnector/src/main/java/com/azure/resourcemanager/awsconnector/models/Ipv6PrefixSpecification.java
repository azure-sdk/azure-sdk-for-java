// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Ipv6PrefixSpecification.
 */
@Fluent
public final class Ipv6PrefixSpecification implements JsonSerializable<Ipv6PrefixSpecification> {
    /*
     * Property ipv6Prefix
     */
    private String ipv6Prefix;

    /**
     * Creates an instance of Ipv6PrefixSpecification class.
     */
    public Ipv6PrefixSpecification() {
    }

    /**
     * Get the ipv6Prefix property: Property ipv6Prefix.
     * 
     * @return the ipv6Prefix value.
     */
    public String ipv6Prefix() {
        return this.ipv6Prefix;
    }

    /**
     * Set the ipv6Prefix property: Property ipv6Prefix.
     * 
     * @param ipv6Prefix the ipv6Prefix value to set.
     * @return the Ipv6PrefixSpecification object itself.
     */
    public Ipv6PrefixSpecification withIpv6Prefix(String ipv6Prefix) {
        this.ipv6Prefix = ipv6Prefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ipv6Prefix", this.ipv6Prefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ipv6PrefixSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ipv6PrefixSpecification if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the Ipv6PrefixSpecification.
     */
    public static Ipv6PrefixSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Ipv6PrefixSpecification deserializedIpv6PrefixSpecification = new Ipv6PrefixSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipv6Prefix".equals(fieldName)) {
                    deserializedIpv6PrefixSpecification.ipv6Prefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpv6PrefixSpecification;
        });
    }
}
