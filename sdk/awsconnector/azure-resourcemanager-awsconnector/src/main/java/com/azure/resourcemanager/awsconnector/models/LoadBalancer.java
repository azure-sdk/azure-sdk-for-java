// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LoadBalancer.
 */
@Fluent
public final class LoadBalancer implements JsonSerializable<LoadBalancer> {
    /*
     * The name of the container (as it appears in a container definition) to associate with the load balancer. You need
     * to specify the container name when configuring the target group for an Amazon ECS load balancer.
     */
    private String containerName;

    /*
     * The port on the container to associate with the load balancer. This port must correspond to a ``containerPort``
     * in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container
     * instance they're launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
     */
    private Integer containerPort;

    /*
     * The name of the load balancer to associate with the Amazon ECS service or task set. If you are using an
     * Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
     */
    private String loadBalancerName;

    /*
     * The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a
     * service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load
     * Balancer. For services using the ``ECS`` deployment controller, you can specify one or multiple target groups.
     * For more information, see [Registering multiple target groups with a
     * service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the
     * *Amazon Elastic Container Service Developer Guide*. For services using the ``CODE_DEPLOY`` deployment controller,
     * you're required to define two target groups for the load balancer. For more information, see [Blue/green
     * deployment with
     * CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the
     * *Amazon Elastic Container Service Developer Guide*. If your service's task definition uses the ``awsvpc`` network
     * mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups
     * because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an
     * Amazon EC2 instance. This network mode is required for the Fargate launch type.
     */
    private String targetGroupArn;

    /**
     * Creates an instance of LoadBalancer class.
     */
    public LoadBalancer() {
    }

    /**
     * Get the containerName property: The name of the container (as it appears in a container definition) to associate
     * with the load balancer. You need to specify the container name when configuring the target group for an Amazon
     * ECS load balancer.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: The name of the container (as it appears in a container definition) to associate
     * with the load balancer. You need to specify the container name when configuring the target group for an Amazon
     * ECS load balancer.
     * 
     * @param containerName the containerName value to set.
     * @return the LoadBalancer object itself.
     */
    public LoadBalancer withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the containerPort property: The port on the container to associate with the load balancer. This port must
     * correspond to a ``containerPort`` in the task definition the tasks in the service are using. For tasks that use
     * the EC2 launch type, the container instance they're launched on must allow ingress traffic on the ``hostPort`` of
     * the port mapping.
     * 
     * @return the containerPort value.
     */
    public Integer containerPort() {
        return this.containerPort;
    }

    /**
     * Set the containerPort property: The port on the container to associate with the load balancer. This port must
     * correspond to a ``containerPort`` in the task definition the tasks in the service are using. For tasks that use
     * the EC2 launch type, the container instance they're launched on must allow ingress traffic on the ``hostPort`` of
     * the port mapping.
     * 
     * @param containerPort the containerPort value to set.
     * @return the LoadBalancer object itself.
     */
    public LoadBalancer withContainerPort(Integer containerPort) {
        this.containerPort = containerPort;
        return this;
    }

    /**
     * Get the loadBalancerName property: The name of the load balancer to associate with the Amazon ECS service or task
     * set. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter
     * should be omitted.
     * 
     * @return the loadBalancerName value.
     */
    public String loadBalancerName() {
        return this.loadBalancerName;
    }

    /**
     * Set the loadBalancerName property: The name of the load balancer to associate with the Amazon ECS service or task
     * set. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter
     * should be omitted.
     * 
     * @param loadBalancerName the loadBalancerName value to set.
     * @return the LoadBalancer object itself.
     */
    public LoadBalancer withLoadBalancerName(String loadBalancerName) {
        this.loadBalancerName = loadBalancerName;
        return this;
    }

    /**
     * Get the targetGroupArn property: The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group
     * or groups associated with a service or task set. A target group ARN is only specified when using an Application
     * Load Balancer or Network Load Balancer. For services using the ``ECS`` deployment controller, you can specify one
     * or multiple target groups. For more information, see [Registering multiple target groups with a
     * service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the
     * *Amazon Elastic Container Service Developer Guide*. For services using the ``CODE_DEPLOY`` deployment controller,
     * you're required to define two target groups for the load balancer. For more information, see [Blue/green
     * deployment with
     * CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the
     * *Amazon Elastic Container Service Developer Guide*. If your service's task definition uses the ``awsvpc`` network
     * mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups
     * because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an
     * Amazon EC2 instance. This network mode is required for the Fargate launch type.
     * 
     * @return the targetGroupArn value.
     */
    public String targetGroupArn() {
        return this.targetGroupArn;
    }

    /**
     * Set the targetGroupArn property: The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group
     * or groups associated with a service or task set. A target group ARN is only specified when using an Application
     * Load Balancer or Network Load Balancer. For services using the ``ECS`` deployment controller, you can specify one
     * or multiple target groups. For more information, see [Registering multiple target groups with a
     * service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the
     * *Amazon Elastic Container Service Developer Guide*. For services using the ``CODE_DEPLOY`` deployment controller,
     * you're required to define two target groups for the load balancer. For more information, see [Blue/green
     * deployment with
     * CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the
     * *Amazon Elastic Container Service Developer Guide*. If your service's task definition uses the ``awsvpc`` network
     * mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups
     * because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an
     * Amazon EC2 instance. This network mode is required for the Fargate launch type.
     * 
     * @param targetGroupArn the targetGroupArn value to set.
     * @return the LoadBalancer object itself.
     */
    public LoadBalancer withTargetGroupArn(String targetGroupArn) {
        this.targetGroupArn = targetGroupArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeNumberField("containerPort", this.containerPort);
        jsonWriter.writeStringField("loadBalancerName", this.loadBalancerName);
        jsonWriter.writeStringField("targetGroupArn", this.targetGroupArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancer.
     */
    public static LoadBalancer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancer deserializedLoadBalancer = new LoadBalancer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerName".equals(fieldName)) {
                    deserializedLoadBalancer.containerName = reader.getString();
                } else if ("containerPort".equals(fieldName)) {
                    deserializedLoadBalancer.containerPort = reader.getNullable(JsonReader::getInt);
                } else if ("loadBalancerName".equals(fieldName)) {
                    deserializedLoadBalancer.loadBalancerName = reader.getString();
                } else if ("targetGroupArn".equals(fieldName)) {
                    deserializedLoadBalancer.targetGroupArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancer;
        });
    }
}
