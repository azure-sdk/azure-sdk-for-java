// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EnvironmentVariable.
 */
@Fluent
public final class EnvironmentVariable implements JsonSerializable<EnvironmentVariable> {
    /*
     * <p>The name or key of the environment variable.</p>
     */
    private String name;

    /*
     * <p>The type of environment variable. Valid values include:</p> <ul> <li> <p> <code>PARAMETER_STORE</code>: An
     * environment variable stored in Systems Manager Parameter Store. For environment variables of this type, specify
     * the name of the parameter as the <code>value</code> of the EnvironmentVariable. The parameter value will be
     * substituted for the name at runtime. You can also define Parameter Store environment variables in the buildspec.
     * To learn how to do so, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.parameter-store'>
     * env/parameter-store</a> in the <i>CodeBuild User Guide</i>.</p> </li> <li> <p> <code>PLAINTEXT</code>: An
     * environment variable in plain text format. This is the default value.</p> </li> <li> <p>
     * <code>SECRETS_MANAGER</code>: An environment variable stored in Secrets Manager. For environment variables of
     * this type, specify the name of the secret as the <code>value</code> of the EnvironmentVariable. The secret value
     * will be substituted for the name at runtime. You can also define Secrets Manager environment variables in the
     * buildspec. To learn how to do so, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager'>
     * env/secrets-manager</a> in the <i>CodeBuild User Guide</i>.</p> </li> </ul>
     */
    private EnvironmentVariableTypeEnumValue type;

    /*
     * <p>The value of the environment variable.</p> <important> <p>We strongly discourage the use of
     * <code>PLAINTEXT</code> environment variables to store sensitive values, especially Amazon Web Services secret key
     * IDs. <code>PLAINTEXT</code> environment variables can be displayed in plain text using the CodeBuild console and
     * the CLI. For sensitive values, we recommend you use an environment variable of type <code>PARAMETER_STORE</code>
     * or <code>SECRETS_MANAGER</code>. </p> </important>
     */
    private String value;

    /**
     * Creates an instance of EnvironmentVariable class.
     */
    public EnvironmentVariable() {
    }

    /**
     * Get the name property: &lt;p&gt;The name or key of the environment variable.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name or key of the environment variable.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the EnvironmentVariable object itself.
     */
    public EnvironmentVariable withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt;The type of environment variable. Valid values include:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;PARAMETER_STORE&lt;/code&gt;: An environment variable stored in Systems Manager
     * Parameter Store. For environment variables of this type, specify the name of the parameter as the
     * &lt;code&gt;value&lt;/code&gt; of the EnvironmentVariable. The parameter value will be substituted for the name
     * at runtime. You can also define Parameter Store environment variables in the buildspec. To learn how to do so,
     * see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.parameter-store'&gt;env/parameter-store&lt;/a&gt;
     * in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;PLAINTEXT&lt;/code&gt;: An environment variable in plain text format. This is the default
     * value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SECRETS_MANAGER&lt;/code&gt;: An environment
     * variable stored in Secrets Manager. For environment variables of this type, specify the name of the secret as the
     * &lt;code&gt;value&lt;/code&gt; of the EnvironmentVariable. The secret value will be substituted for the name at
     * runtime. You can also define Secrets Manager environment variables in the buildspec. To learn how to do so, see
     * &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager'&gt;env/secrets-manager&lt;/a&gt;
     * in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the type value.
     */
    public EnvironmentVariableTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt;The type of environment variable. Valid values include:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;PARAMETER_STORE&lt;/code&gt;: An environment variable stored in Systems Manager
     * Parameter Store. For environment variables of this type, specify the name of the parameter as the
     * &lt;code&gt;value&lt;/code&gt; of the EnvironmentVariable. The parameter value will be substituted for the name
     * at runtime. You can also define Parameter Store environment variables in the buildspec. To learn how to do so,
     * see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.parameter-store'&gt;env/parameter-store&lt;/a&gt;
     * in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;PLAINTEXT&lt;/code&gt;: An environment variable in plain text format. This is the default
     * value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SECRETS_MANAGER&lt;/code&gt;: An environment
     * variable stored in Secrets Manager. For environment variables of this type, specify the name of the secret as the
     * &lt;code&gt;value&lt;/code&gt; of the EnvironmentVariable. The secret value will be substituted for the name at
     * runtime. You can also define Secrets Manager environment variables in the buildspec. To learn how to do so, see
     * &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager'&gt;env/secrets-manager&lt;/a&gt;
     * in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param type the type value to set.
     * @return the EnvironmentVariable object itself.
     */
    public EnvironmentVariable withType(EnvironmentVariableTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: &lt;p&gt;The value of the environment variable.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We
     * strongly discourage the use of &lt;code&gt;PLAINTEXT&lt;/code&gt; environment variables to store sensitive
     * values, especially Amazon Web Services secret key IDs. &lt;code&gt;PLAINTEXT&lt;/code&gt; environment variables
     * can be displayed in plain text using the CodeBuild console and the CLI. For sensitive values, we recommend you
     * use an environment variable of type &lt;code&gt;PARAMETER_STORE&lt;/code&gt; or
     * &lt;code&gt;SECRETS_MANAGER&lt;/code&gt;. &lt;/p&gt; &lt;/important&gt;.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: &lt;p&gt;The value of the environment variable.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We
     * strongly discourage the use of &lt;code&gt;PLAINTEXT&lt;/code&gt; environment variables to store sensitive
     * values, especially Amazon Web Services secret key IDs. &lt;code&gt;PLAINTEXT&lt;/code&gt; environment variables
     * can be displayed in plain text using the CodeBuild console and the CLI. For sensitive values, we recommend you
     * use an environment variable of type &lt;code&gt;PARAMETER_STORE&lt;/code&gt; or
     * &lt;code&gt;SECRETS_MANAGER&lt;/code&gt;. &lt;/p&gt; &lt;/important&gt;.
     * 
     * @param value the value value to set.
     * @return the EnvironmentVariable object itself.
     */
    public EnvironmentVariable withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("type", this.type);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentVariable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentVariable if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnvironmentVariable.
     */
    public static EnvironmentVariable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnvironmentVariable deserializedEnvironmentVariable = new EnvironmentVariable();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedEnvironmentVariable.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedEnvironmentVariable.type = EnvironmentVariableTypeEnumValue.fromJson(reader);
                } else if ("value".equals(fieldName)) {
                    deserializedEnvironmentVariable.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvironmentVariable;
        });
    }
}
