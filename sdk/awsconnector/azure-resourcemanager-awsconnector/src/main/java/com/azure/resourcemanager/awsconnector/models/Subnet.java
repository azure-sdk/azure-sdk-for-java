// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Subnet.
 */
@Fluent
public final class Subnet implements JsonSerializable<Subnet> {
    /*
     * <p>The Availability Zone of the subnet.</p>
     */
    private AvailabilityZone subnetAvailabilityZone;

    /*
     * <p>The subnet identifier.</p>
     */
    private String subnetIdentifier;

    /*
     * <p>The status of the subnet.</p>
     */
    private String subnetStatus;

    /**
     * Creates an instance of Subnet class.
     */
    public Subnet() {
    }

    /**
     * Get the subnetAvailabilityZone property: &lt;p&gt;The Availability Zone of the subnet.&lt;/p&gt;.
     * 
     * @return the subnetAvailabilityZone value.
     */
    public AvailabilityZone subnetAvailabilityZone() {
        return this.subnetAvailabilityZone;
    }

    /**
     * Set the subnetAvailabilityZone property: &lt;p&gt;The Availability Zone of the subnet.&lt;/p&gt;.
     * 
     * @param subnetAvailabilityZone the subnetAvailabilityZone value to set.
     * @return the Subnet object itself.
     */
    public Subnet withSubnetAvailabilityZone(AvailabilityZone subnetAvailabilityZone) {
        this.subnetAvailabilityZone = subnetAvailabilityZone;
        return this;
    }

    /**
     * Get the subnetIdentifier property: &lt;p&gt;The subnet identifier.&lt;/p&gt;.
     * 
     * @return the subnetIdentifier value.
     */
    public String subnetIdentifier() {
        return this.subnetIdentifier;
    }

    /**
     * Set the subnetIdentifier property: &lt;p&gt;The subnet identifier.&lt;/p&gt;.
     * 
     * @param subnetIdentifier the subnetIdentifier value to set.
     * @return the Subnet object itself.
     */
    public Subnet withSubnetIdentifier(String subnetIdentifier) {
        this.subnetIdentifier = subnetIdentifier;
        return this;
    }

    /**
     * Get the subnetStatus property: &lt;p&gt;The status of the subnet.&lt;/p&gt;.
     * 
     * @return the subnetStatus value.
     */
    public String subnetStatus() {
        return this.subnetStatus;
    }

    /**
     * Set the subnetStatus property: &lt;p&gt;The status of the subnet.&lt;/p&gt;.
     * 
     * @param subnetStatus the subnetStatus value to set.
     * @return the Subnet object itself.
     */
    public Subnet withSubnetStatus(String subnetStatus) {
        this.subnetStatus = subnetStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetAvailabilityZone() != null) {
            subnetAvailabilityZone().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("subnetAvailabilityZone", this.subnetAvailabilityZone);
        jsonWriter.writeStringField("subnetIdentifier", this.subnetIdentifier);
        jsonWriter.writeStringField("subnetStatus", this.subnetStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subnet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subnet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Subnet.
     */
    public static Subnet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subnet deserializedSubnet = new Subnet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetAvailabilityZone".equals(fieldName)) {
                    deserializedSubnet.subnetAvailabilityZone = AvailabilityZone.fromJson(reader);
                } else if ("subnetIdentifier".equals(fieldName)) {
                    deserializedSubnet.subnetIdentifier = reader.getString();
                } else if ("subnetStatus".equals(fieldName)) {
                    deserializedSubnet.subnetStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnet;
        });
    }
}
