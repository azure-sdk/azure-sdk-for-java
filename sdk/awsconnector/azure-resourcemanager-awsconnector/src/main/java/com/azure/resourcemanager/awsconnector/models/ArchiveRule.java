// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ArchiveRule.
 */
@Fluent
public final class ArchiveRule implements JsonSerializable<ArchiveRule> {
    /*
     * Property filter
     */
    private List<Filter> filter;

    /*
     * The archive rule name
     */
    private String ruleName;

    /**
     * Creates an instance of ArchiveRule class.
     */
    public ArchiveRule() {
    }

    /**
     * Get the filter property: Property filter.
     * 
     * @return the filter value.
     */
    public List<Filter> filter() {
        return this.filter;
    }

    /**
     * Set the filter property: Property filter.
     * 
     * @param filter the filter value to set.
     * @return the ArchiveRule object itself.
     */
    public ArchiveRule withFilter(List<Filter> filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the ruleName property: The archive rule name.
     * 
     * @return the ruleName value.
     */
    public String ruleName() {
        return this.ruleName;
    }

    /**
     * Set the ruleName property: The archive rule name.
     * 
     * @param ruleName the ruleName value to set.
     * @return the ArchiveRule object itself.
     */
    public ArchiveRule withRuleName(String ruleName) {
        this.ruleName = ruleName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filter() != null) {
            filter().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("filter", this.filter, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("ruleName", this.ruleName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArchiveRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArchiveRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArchiveRule.
     */
    public static ArchiveRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArchiveRule deserializedArchiveRule = new ArchiveRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filter".equals(fieldName)) {
                    List<Filter> filter = reader.readArray(reader1 -> Filter.fromJson(reader1));
                    deserializedArchiveRule.filter = filter;
                } else if ("ruleName".equals(fieldName)) {
                    deserializedArchiveRule.ruleName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArchiveRule;
        });
    }
}
