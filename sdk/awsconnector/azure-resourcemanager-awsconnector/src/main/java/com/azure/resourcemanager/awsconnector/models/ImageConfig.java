// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ImageConfig.
 */
@Fluent
public final class ImageConfig implements JsonSerializable<ImageConfig> {
    /*
     * Specifies parameters that you want to pass in with ENTRYPOINT. You can specify a maximum of 1,500 parameters in
     * the list.
     */
    private List<String> command;

    /*
     * Specifies the entry point to their application, which is typically the location of the runtime executable. You
     * can specify a maximum of 1,500 string entries in the list.
     */
    private List<String> entryPoint;

    /*
     * Specifies the working directory. The length of the directory string cannot exceed 1,000 characters.
     */
    private String workingDirectory;

    /**
     * Creates an instance of ImageConfig class.
     */
    public ImageConfig() {
    }

    /**
     * Get the command property: Specifies parameters that you want to pass in with ENTRYPOINT. You can specify a
     * maximum of 1,500 parameters in the list.
     * 
     * @return the command value.
     */
    public List<String> command() {
        return this.command;
    }

    /**
     * Set the command property: Specifies parameters that you want to pass in with ENTRYPOINT. You can specify a
     * maximum of 1,500 parameters in the list.
     * 
     * @param command the command value to set.
     * @return the ImageConfig object itself.
     */
    public ImageConfig withCommand(List<String> command) {
        this.command = command;
        return this;
    }

    /**
     * Get the entryPoint property: Specifies the entry point to their application, which is typically the location of
     * the runtime executable. You can specify a maximum of 1,500 string entries in the list.
     * 
     * @return the entryPoint value.
     */
    public List<String> entryPoint() {
        return this.entryPoint;
    }

    /**
     * Set the entryPoint property: Specifies the entry point to their application, which is typically the location of
     * the runtime executable. You can specify a maximum of 1,500 string entries in the list.
     * 
     * @param entryPoint the entryPoint value to set.
     * @return the ImageConfig object itself.
     */
    public ImageConfig withEntryPoint(List<String> entryPoint) {
        this.entryPoint = entryPoint;
        return this;
    }

    /**
     * Get the workingDirectory property: Specifies the working directory. The length of the directory string cannot
     * exceed 1,000 characters.
     * 
     * @return the workingDirectory value.
     */
    public String workingDirectory() {
        return this.workingDirectory;
    }

    /**
     * Set the workingDirectory property: Specifies the working directory. The length of the directory string cannot
     * exceed 1,000 characters.
     * 
     * @param workingDirectory the workingDirectory value to set.
     * @return the ImageConfig object itself.
     */
    public ImageConfig withWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("command", this.command, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("entryPoint", this.entryPoint, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("workingDirectory", this.workingDirectory);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageConfig.
     */
    public static ImageConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageConfig deserializedImageConfig = new ImageConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    List<String> command = reader.readArray(reader1 -> reader1.getString());
                    deserializedImageConfig.command = command;
                } else if ("entryPoint".equals(fieldName)) {
                    List<String> entryPoint = reader.readArray(reader1 -> reader1.getString());
                    deserializedImageConfig.entryPoint = entryPoint;
                } else if ("workingDirectory".equals(fieldName)) {
                    deserializedImageConfig.workingDirectory = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageConfig;
        });
    }
}
