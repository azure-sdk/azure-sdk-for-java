// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AdditionalAuthenticationProvider.
 */
@Fluent
public final class AdditionalAuthenticationProvider implements JsonSerializable<AdditionalAuthenticationProvider> {
    /*
     * <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito
     * user pools, or Lambda.</p>
     */
    private AuthenticationTypeEnumValue authenticationType;

    /*
     * <p>Configuration for Lambda function authorization.</p>
     */
    private LambdaAuthorizerConfig lambdaAuthorizerConfig;

    /*
     * <p>The OIDC configuration.</p>
     */
    private OpenIdConnectConfig openIdConnectConfig;

    /*
     * <p>The Amazon Cognito user pool configuration.</p>
     */
    private CognitoUserPoolConfig userPoolConfig;

    /**
     * Creates an instance of AdditionalAuthenticationProvider class.
     */
    public AdditionalAuthenticationProvider() {
    }

    /**
     * Get the authenticationType property: &lt;p&gt;The authentication type: API key, Identity and Access Management
     * (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.&lt;/p&gt;.
     * 
     * @return the authenticationType value.
     */
    public AuthenticationTypeEnumValue authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: &lt;p&gt;The authentication type: API key, Identity and Access Management
     * (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.&lt;/p&gt;.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the AdditionalAuthenticationProvider object itself.
     */
    public AdditionalAuthenticationProvider withAuthenticationType(AuthenticationTypeEnumValue authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the lambdaAuthorizerConfig property: &lt;p&gt;Configuration for Lambda function authorization.&lt;/p&gt;.
     * 
     * @return the lambdaAuthorizerConfig value.
     */
    public LambdaAuthorizerConfig lambdaAuthorizerConfig() {
        return this.lambdaAuthorizerConfig;
    }

    /**
     * Set the lambdaAuthorizerConfig property: &lt;p&gt;Configuration for Lambda function authorization.&lt;/p&gt;.
     * 
     * @param lambdaAuthorizerConfig the lambdaAuthorizerConfig value to set.
     * @return the AdditionalAuthenticationProvider object itself.
     */
    public AdditionalAuthenticationProvider withLambdaAuthorizerConfig(LambdaAuthorizerConfig lambdaAuthorizerConfig) {
        this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
        return this;
    }

    /**
     * Get the openIdConnectConfig property: &lt;p&gt;The OIDC configuration.&lt;/p&gt;.
     * 
     * @return the openIdConnectConfig value.
     */
    public OpenIdConnectConfig openIdConnectConfig() {
        return this.openIdConnectConfig;
    }

    /**
     * Set the openIdConnectConfig property: &lt;p&gt;The OIDC configuration.&lt;/p&gt;.
     * 
     * @param openIdConnectConfig the openIdConnectConfig value to set.
     * @return the AdditionalAuthenticationProvider object itself.
     */
    public AdditionalAuthenticationProvider withOpenIdConnectConfig(OpenIdConnectConfig openIdConnectConfig) {
        this.openIdConnectConfig = openIdConnectConfig;
        return this;
    }

    /**
     * Get the userPoolConfig property: &lt;p&gt;The Amazon Cognito user pool configuration.&lt;/p&gt;.
     * 
     * @return the userPoolConfig value.
     */
    public CognitoUserPoolConfig userPoolConfig() {
        return this.userPoolConfig;
    }

    /**
     * Set the userPoolConfig property: &lt;p&gt;The Amazon Cognito user pool configuration.&lt;/p&gt;.
     * 
     * @param userPoolConfig the userPoolConfig value to set.
     * @return the AdditionalAuthenticationProvider object itself.
     */
    public AdditionalAuthenticationProvider withUserPoolConfig(CognitoUserPoolConfig userPoolConfig) {
        this.userPoolConfig = userPoolConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authenticationType() != null) {
            authenticationType().validate();
        }
        if (lambdaAuthorizerConfig() != null) {
            lambdaAuthorizerConfig().validate();
        }
        if (openIdConnectConfig() != null) {
            openIdConnectConfig().validate();
        }
        if (userPoolConfig() != null) {
            userPoolConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authenticationType", this.authenticationType);
        jsonWriter.writeJsonField("lambdaAuthorizerConfig", this.lambdaAuthorizerConfig);
        jsonWriter.writeJsonField("openIDConnectConfig", this.openIdConnectConfig);
        jsonWriter.writeJsonField("userPoolConfig", this.userPoolConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdditionalAuthenticationProvider from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdditionalAuthenticationProvider if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdditionalAuthenticationProvider.
     */
    public static AdditionalAuthenticationProvider fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdditionalAuthenticationProvider deserializedAdditionalAuthenticationProvider
                = new AdditionalAuthenticationProvider();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationType".equals(fieldName)) {
                    deserializedAdditionalAuthenticationProvider.authenticationType
                        = AuthenticationTypeEnumValue.fromJson(reader);
                } else if ("lambdaAuthorizerConfig".equals(fieldName)) {
                    deserializedAdditionalAuthenticationProvider.lambdaAuthorizerConfig
                        = LambdaAuthorizerConfig.fromJson(reader);
                } else if ("openIDConnectConfig".equals(fieldName)) {
                    deserializedAdditionalAuthenticationProvider.openIdConnectConfig
                        = OpenIdConnectConfig.fromJson(reader);
                } else if ("userPoolConfig".equals(fieldName)) {
                    deserializedAdditionalAuthenticationProvider.userPoolConfig
                        = CognitoUserPoolConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdditionalAuthenticationProvider;
        });
    }
}
