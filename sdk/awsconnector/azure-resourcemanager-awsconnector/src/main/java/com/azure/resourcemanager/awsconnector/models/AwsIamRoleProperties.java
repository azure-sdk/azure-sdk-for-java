// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of awsIamRole.
 */
@Fluent
public final class AwsIamRoleProperties implements JsonSerializable<AwsIamRoleProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * The trust policy that is associated with this role. Trust policies define which entities can assume the role. You
     * can associate only one trust policy with a role. For an example of a policy that can be used to assume a role,
     * see [Template
     * Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-
     * iam-role--examples). For more information about the elements that you can use in an IAM policy, see [Policy
     * Elements Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the
     * *User Guide*.
     */
    private Map<String, Object> assumeRolePolicyDocument;

    /*
     * A description of the role that you provide.
     */
    private String description;

    /*
     * A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role. For more
     * information about ARNs, see [Amazon Resource Names (ARNs) and Service
     * Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General
     * Reference*.
     */
    private List<String> managedPolicyArns;

    /*
     * The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a
     * value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12
     * hours. Anyone who assumes the role from the CLI or API can use the ``DurationSeconds`` API parameter or the
     * ``duration-seconds`` CLI parameter to request a longer session. The ``MaxSessionDuration`` setting determines the
     * maximum duration that can be requested using the ``DurationSeconds`` parameter. If users don't specify a value
     * for the ``DurationSeconds`` parameter, their security credentials are valid for one hour by default. This applies
     * when you use the ``AssumeRole*`` API operations or the ``assume-role*`` CLI operations but does not apply when
     * you use those operations to create a console URL. For more information, see [Using IAM
     * roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
     */
    private Integer maxSessionDuration;

    /*
     * The path to the role. For more information about paths, see [IAM
     * Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     */
    private String path;

    /*
     * The ARN of the policy used to set the permissions boundary for the role. For more information about permissions
     * boundaries, see [Permissions boundaries for IAM
     * identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User
     * Guide*.
     */
    private String permissionsBoundary;

    /*
     * Adds or updates an inline policy document that is embedded in the specified IAM role. When you embed an inline
     * policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust
     * policy is created at the same time as the role. You can update a role's trust policy later. For more information
     * about IAM roles, go to [Using Roles to Delegate Permissions and Federate
     * Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html). A role can also have an
     * attached managed policy. For information about policies, see [Managed Policies and Inline
     * Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
     * For information about limits on the number of inline policies that you can embed with a role, see [Limitations on
     * Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*. If an
     * external policy (such as ``AWS::IAM::Policy`` or
     */
    private List<PolicyAutoGenerated> policies;

    /*
     * Property roleId
     */
    private String roleId;

    /*
     * A name for the IAM role, up to 64 characters in length. For valid values, see the ``RoleName`` parameter for the
     * [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *User Guide*.
     * This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a
     * string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also
     * include any of the following characters: _+=,.@-. The role name must be unique within the account. Role names are
     * not distinguished by case. For example, you cannot create roles named both 'Role1' and 'role1'. If you don't
     * specify a name, CFN generates a unique physical ID and uses that ID for the role name. If you specify a name, you
     * must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more
     * information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/Use
     */
    private String roleName;

    /*
     * A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM
     * resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
     */
    private List<TagAutoGenerated32> tags;

    /**
     * Creates an instance of AwsIamRoleProperties class.
     */
    public AwsIamRoleProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the assumeRolePolicyDocument property: The trust policy that is associated with this role. Trust policies
     * define which entities can assume the role. You can associate only one trust policy with a role. For an example of
     * a policy that can be used to assume a role, see [Template
     * Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples).
     * For more information about the elements that you can use in an IAM policy, see [Policy Elements
     * Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User
     * Guide*.
     * 
     * @return the assumeRolePolicyDocument value.
     */
    public Map<String, Object> assumeRolePolicyDocument() {
        return this.assumeRolePolicyDocument;
    }

    /**
     * Set the assumeRolePolicyDocument property: The trust policy that is associated with this role. Trust policies
     * define which entities can assume the role. You can associate only one trust policy with a role. For an example of
     * a policy that can be used to assume a role, see [Template
     * Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples).
     * For more information about the elements that you can use in an IAM policy, see [Policy Elements
     * Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User
     * Guide*.
     * 
     * @param assumeRolePolicyDocument the assumeRolePolicyDocument value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withAssumeRolePolicyDocument(Map<String, Object> assumeRolePolicyDocument) {
        this.assumeRolePolicyDocument = assumeRolePolicyDocument;
        return this;
    }

    /**
     * Get the description property: A description of the role that you provide.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the role that you provide.
     * 
     * @param description the description value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the managedPolicyArns property: A list of Amazon Resource Names (ARNs) of the IAM managed policies that you
     * want to attach to the role. For more information about ARNs, see [Amazon Resource Names (ARNs) and Service
     * Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General
     * Reference*.
     * 
     * @return the managedPolicyArns value.
     */
    public List<String> managedPolicyArns() {
        return this.managedPolicyArns;
    }

    /**
     * Set the managedPolicyArns property: A list of Amazon Resource Names (ARNs) of the IAM managed policies that you
     * want to attach to the role. For more information about ARNs, see [Amazon Resource Names (ARNs) and Service
     * Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General
     * Reference*.
     * 
     * @param managedPolicyArns the managedPolicyArns value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withManagedPolicyArns(List<String> managedPolicyArns) {
        this.managedPolicyArns = managedPolicyArns;
        return this;
    }

    /**
     * Get the maxSessionDuration property: The maximum session duration (in seconds) that you want to set for the
     * specified role. If you do not specify a value for this setting, the default value of one hour is applied. This
     * setting can have a value from 1 hour to 12 hours. Anyone who assumes the role from the CLI or API can use the
     * ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The
     * ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the
     * ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their
     * security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API
     * operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a
     * console URL. For more information, see [Using IAM
     * roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
     * 
     * @return the maxSessionDuration value.
     */
    public Integer maxSessionDuration() {
        return this.maxSessionDuration;
    }

    /**
     * Set the maxSessionDuration property: The maximum session duration (in seconds) that you want to set for the
     * specified role. If you do not specify a value for this setting, the default value of one hour is applied. This
     * setting can have a value from 1 hour to 12 hours. Anyone who assumes the role from the CLI or API can use the
     * ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The
     * ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the
     * ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their
     * security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API
     * operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a
     * console URL. For more information, see [Using IAM
     * roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
     * 
     * @param maxSessionDuration the maxSessionDuration value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withMaxSessionDuration(Integer maxSessionDuration) {
        this.maxSessionDuration = maxSessionDuration;
        return this;
    }

    /**
     * Get the path property: The path to the role. For more information about paths, see [IAM
     * Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path to the role. For more information about paths, see [IAM
     * Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     * 
     * @param path the path value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the permissionsBoundary property: The ARN of the policy used to set the permissions boundary for the role.
     * For more information about permissions boundaries, see [Permissions boundaries for IAM
     * identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User
     * Guide*.
     * 
     * @return the permissionsBoundary value.
     */
    public String permissionsBoundary() {
        return this.permissionsBoundary;
    }

    /**
     * Set the permissionsBoundary property: The ARN of the policy used to set the permissions boundary for the role.
     * For more information about permissions boundaries, see [Permissions boundaries for IAM
     * identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User
     * Guide*.
     * 
     * @param permissionsBoundary the permissionsBoundary value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withPermissionsBoundary(String permissionsBoundary) {
        this.permissionsBoundary = permissionsBoundary;
        return this;
    }

    /**
     * Get the policies property: Adds or updates an inline policy document that is embedded in the specified IAM role.
     * When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions)
     * policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy
     * later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate
     * Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html). A role can also have an
     * attached managed policy. For information about policies, see [Managed Policies and Inline
     * Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
     * For information about limits on the number of inline policies that you can embed with a role, see [Limitations on
     * Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*. If an
     * external policy (such as ``AWS::IAM::Policy`` or.
     * 
     * @return the policies value.
     */
    public List<PolicyAutoGenerated> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: Adds or updates an inline policy document that is embedded in the specified IAM role.
     * When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions)
     * policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy
     * later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate
     * Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html). A role can also have an
     * attached managed policy. For information about policies, see [Managed Policies and Inline
     * Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
     * For information about limits on the number of inline policies that you can embed with a role, see [Limitations on
     * Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*. If an
     * external policy (such as ``AWS::IAM::Policy`` or.
     * 
     * @param policies the policies value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withPolicies(List<PolicyAutoGenerated> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the roleId property: Property roleId.
     * 
     * @return the roleId value.
     */
    public String roleId() {
        return this.roleId;
    }

    /**
     * Set the roleId property: Property roleId.
     * 
     * @param roleId the roleId value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withRoleId(String roleId) {
        this.roleId = roleId;
        return this;
    }

    /**
     * Get the roleName property: A name for the IAM role, up to 64 characters in length. For valid values, see the
     * ``RoleName`` parameter for the
     * [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *User Guide*.
     * This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a
     * string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also
     * include any of the following characters: _+=,.&#064;-. The role name must be unique within the account. Role
     * names are not distinguished by case. For example, you cannot create roles named both 'Role1' and 'role1'. If you
     * don't specify a name, CFN generates a unique physical ID and uses that ID for the role name. If you specify a
     * name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more
     * information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/Use.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: A name for the IAM role, up to 64 characters in length. For valid values, see the
     * ``RoleName`` parameter for the
     * [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *User Guide*.
     * This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a
     * string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also
     * include any of the following characters: _+=,.&#064;-. The role name must be unique within the account. Role
     * names are not distinguished by case. For example, you cannot create roles named both 'Role1' and 'role1'. If you
     * don't specify a name, CFN generates a unique physical ID and uses that ID for the role name. If you specify a
     * name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more
     * information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/Use.
     * 
     * @param roleName the roleName value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Get the tags property: A list of tags that are attached to the role. For more information about tagging, see
     * [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated32> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A list of tags that are attached to the role. For more information about tagging, see
     * [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
     * 
     * @param tags the tags value to set.
     * @return the AwsIamRoleProperties object itself.
     */
    public AwsIamRoleProperties withTags(List<TagAutoGenerated32> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policies() != null) {
            policies().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeMapField("assumeRolePolicyDocument", this.assumeRolePolicyDocument,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("managedPolicyArns", this.managedPolicyArns,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("maxSessionDuration", this.maxSessionDuration);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("permissionsBoundary", this.permissionsBoundary);
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("roleId", this.roleId);
        jsonWriter.writeStringField("roleName", this.roleName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamRoleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamRoleProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamRoleProperties.
     */
    public static AwsIamRoleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamRoleProperties deserializedAwsIamRoleProperties = new AwsIamRoleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.arn = reader.getString();
                } else if ("assumeRolePolicyDocument".equals(fieldName)) {
                    Map<String, Object> assumeRolePolicyDocument = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAwsIamRoleProperties.assumeRolePolicyDocument = assumeRolePolicyDocument;
                } else if ("description".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.description = reader.getString();
                } else if ("managedPolicyArns".equals(fieldName)) {
                    List<String> managedPolicyArns = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsIamRoleProperties.managedPolicyArns = managedPolicyArns;
                } else if ("maxSessionDuration".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.maxSessionDuration = reader.getNullable(JsonReader::getInt);
                } else if ("path".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.path = reader.getString();
                } else if ("permissionsBoundary".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.permissionsBoundary = reader.getString();
                } else if ("policies".equals(fieldName)) {
                    List<PolicyAutoGenerated> policies
                        = reader.readArray(reader1 -> PolicyAutoGenerated.fromJson(reader1));
                    deserializedAwsIamRoleProperties.policies = policies;
                } else if ("roleId".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.roleId = reader.getString();
                } else if ("roleName".equals(fieldName)) {
                    deserializedAwsIamRoleProperties.roleName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated32> tags = reader.readArray(reader1 -> TagAutoGenerated32.fromJson(reader1));
                    deserializedAwsIamRoleProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamRoleProperties;
        });
    }
}
