// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ContainerDefinition.
 */
@Fluent
public final class ContainerDefinition implements JsonSerializable<ContainerDefinition> {
    /*
     * The command that's passed to the container. This parameter maps to ``Cmd`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``COMMAND`` parameter to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more
     * information, see
     * [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/
     * engine/reference/builder/#cmd). If there are multiple arguments, each argument is a separated string in the
     * array.
     */
    private List<String> command;

    /*
     * The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--cpu-shares`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of
     * CPU reserved for all containers within a task be lower than the task-level ``cpu`` value. You can determine the
     * number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance
     * type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024. Linux
     * containers share unallocated CPU units with other containers on the container instance with the same ratio as
     * their allocated amount. For example, if you run a single-container task on a single-core instance type with 512
     * CPU units specified for that container, and that's the only task running on the container instance, that
     * container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the
     * same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover,
     * each container could float to higher CPU usage if the other container was not using it. If both tasks were 100%
     * active all of the time, they would be limited to 512 CPU units. On Linux container instances, the Docker daemon
     * on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers.
     * For more information, see [CPU share
     * constraint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#cpu-share-constraint) in
     * the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2. However, the CPU
     * parameter isn't required, and you can use CPU values below 2 in your container definitions. For CPU values below
     * 2 (including null), the behavior varies based on your Amazon ECS container agent version: + *Agent versions less
     * than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024
     * CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares. +
     * *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2. On
     * Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only
     * have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is
     * passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
     */
    private Integer cpu;

    /*
     * A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file that configures the container for
     * Active Directory authentication. We recommend that you use this parameter instead of the
     * ``dockerSecurityOptions``. The maximum number of ARNs is 1. There are two formats for each ARN. +
     * credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional
     * section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on
     * any container instance can join different domains. You can use this format without joining the container instance
     * to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You
     * must join the container instance to the domain before you start any tasks that use this task definition. In both
     * formats, replace ``MyARN`` with the ARN in SSM or Amazon S3. If you provide a ``credentialspecdomainless:MyARN``,
     * the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to
     * connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other
     * applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the
     * same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for
     * Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using
     * gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
     */
    private List<String> credentialSpecs;

    /*
     * The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When
     * a dependency is defined for container startup, for container shutdown it is reversed. For tasks using the EC2
     * launch type, the container instances require at least version 1.26.0 of the container agent to turn on container
     * dependencies. However, we recommend using the latest container agent version. For information about checking your
     * agent version and updating to the latest version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. For tasks using the Fargate launch type, the task or service requires the
     * following platforms: + Linux platform version ``1.3.0`` or later. + Windows platform version ``1.0.0`` or later.
     * If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup
     * BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-
     * codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html), the ``dependsOn`` parameter is not supported.
     * For more information see [Issue
     * #680](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/
     * 680) on the on the GitHub website.
     */
    private List<ContainerDependency> dependsOn;

    /*
     * When this parameter is true, networking is off within the container. This parameter maps to ``NetworkDisabled``
     * in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/). This
     * parameter is not supported for Windows containers.
     */
    private Boolean disableNetworking;

    /*
     * A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--dns-search`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     */
    private List<String> dnsSearchDomains;

    /*
     * A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--dns`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     */
    private List<String> dnsServers;

    /*
     * A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--label`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'``
     */
    private Object dockerLabels;

    /*
     * A list of strings to provide custom configuration for multiple security systems. For more information about valid
     * values, see [Docker Run Security
     * Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * This field isn't valid for containers in tasks using the Fargate launch type. For Linux tasks on EC2, this
     * parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems. For any
     * tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for
     * Active Directory authentication. For more information, see [Using gMSAs for Windows
     * Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for
     * Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon
     * Elastic Container Service Developer Guide*. This parameter maps to ``SecurityOpt`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--security-opt`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or
     * ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these
     * security options. For more information, see [Amazon ECS Container Agent
     * Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon
     * Elastic Container Service Developer Guide*. For more information about valid values, see [Docker Run Security
     * Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * Valid values: 'no-new-privileges' | 'apparmor:PROFILE' | 'label:value' | 'credentialspec:CredentialSpecFilePath'
     */
    private List<String> dockerSecurityOptions;

    /*
     * Early versions of the Amazon ECS container agent don't properly handle ``entryPoint`` parameters. If you have
     * problems using ``entryPoint``, update your container agent or enter your commands and arguments as ``command``
     * array items instead. The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--entrypoint`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more
     * information, see
     * [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.
     * com/engine/reference/builder/#entrypoint).
     */
    private List<String> entryPoint;

    /*
     * The environment variables to pass to a container. This parameter maps to ``Env`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--env`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). We don't
     * recommend that you use plaintext environment variables for sensitive information, such as credential data.
     */
    private List<KeyValuePair> environment;

    /*
     * A list of files containing the environment variables to pass to a container. This parameter maps to the
     * ``--env-file`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). You can
     * specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment
     * file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as
     * comments and are ignored. For more information about the environment variable file syntax, see [Declare default
     * environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/). If there
     * are environment variables specified using the ``environment`` parameter in a container definition, they take
     * precedence over the variables contained within an environment file. If multiple environment files are specified
     * that contain the same variable, they're processed from the top down. We recommend that you use unique variable
     * names. For more information, see [Specifying Environment
     * Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private List<EnvironmentFile> environmentFiles;

    /*
     * If the ``essential`` parameter of a container is marked as ``true``, and that container fails or stops for any
     * reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container
     * is marked as ``false``, its failure doesn't affect the rest of the containers in a task. If this parameter is
     * omitted, a container is assumed to be essential. All tasks must have at least one essential container. If you
     * have an application that's composed of multiple containers, group containers that are used for a common purpose
     * into components, and separate the different components into multiple task definitions. For more information, see
     * [Application
     * Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the
     * *Amazon Elastic Container Service Developer Guide*.
     */
    private Boolean essential;

    /*
     * A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. This parameter
     * maps to ``ExtraHosts`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--add-host`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
     */
    private List<HostEntry> extraHosts;

    /*
     * The FireLens configuration for the container. This is used to specify and configure a log router for container
     * logs. For more information, see [Custom Log
     * Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The FireLens configuration for the container. This is used to specify and
     * configure a log router for container logs. For more information, see [Custom log
     * routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    private FirelensConfiguration firelensConfiguration;

    /*
     * The container health check command and associated configuration parameters for the container. This parameter maps
     * to ``HealthCheck`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``HEALTHCHECK`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * ``HealthCheck`` property specifies an object representing a container health check. Health check parameters that
     * are specified in a container definition override any Docker health checks that exist in the container image (such
     * as those specified in a parent image or from the image's Dockerfile). This configuration maps to the
     * ``HEALTHCHECK`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). The Amazon ECS container agent
     * only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor
     * Docker health checks that are embedded in a container image and not specified in the container definition. Health
     * check parameters that are specified in a container definition override any Docker health checks that exist in the
     * container image. If a task is run manually, and not as part of a service, the task will continue its lifecycle
     * regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the
     * task will be stopped and the service scheduler will replace it. The following are notes about container health
     * check support: + Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For
     * more information, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html). + Container health
     * checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information,
     * see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html). +
     * Container health checks are not supported for tasks that are part of a service that is configured to use a
     * Classic Load Balancer.
     */
    private HealthCheck healthCheck;

    /*
     * The hostname to use for your container. This parameter maps to ``Hostname`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--hostname`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
     */
    private String hostname;

    /*
     * The image used to start a container. This string is passed directly to the Docker daemon. By default, images in
     * the Docker Hub registry are available. Other repositories are specified with either ``repository-url/image:tag``
     * or ``repository-url/image@digest``. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores,
     * colons, periods, forward slashes, and number signs are allowed. This parameter maps to ``Image`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``IMAGE`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). + When a
     * new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the
     * container to use. However, subsequent updates to a repository image aren't propagated to already running tasks. +
     * Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or
     * ``registry/repository@digest``. For example,
     * ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or
     * ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:
     * 94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``. + Images in official repositories on Docker Hub use a single name
     * (for example, ``ubuntu`` or ``mongo``). + Images in other repositories on Docker Hub are qualified with an
     * organization name (for example, ``amazon/amazon-ecs-agent``). + Images in other online repositories are qualified
     * further by a domain name (for example, ``quay.io/assemblyline/ubuntu``).
     */
    private String image;

    /*
     * When this parameter is ``true``, you can deploy containerized applications that require ``stdin`` or a ``tty`` to
     * be allocated. This parameter maps to ``OpenStdin`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--interactive`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     */
    private Boolean interactive;

    /*
     * The ``links`` parameter allows containers to communicate with each other without the need for port mappings. This
     * parameter is only supported if the network mode of a task definition is ``bridge``. The ``name:internalName``
     * construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers,
     * underscores, and hyphens are allowed. For more information about linking Docker containers, go to [Legacy
     * container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker documentation.
     * This parameter maps to ``Links`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--link`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers. Containers that are collocated on a single container instance
     * may be able to communicate with each other without requiring links or host port mappings. Network isolation is
     * achieved on the container instance using security groups and VPC settings.
     */
    private List<String> links;

    /*
     * Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more
     * information see
     * [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html). This
     * parameter is not supported for Windows containers. The Linux-specific options that are applied to the container,
     * such as Linux
     * [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
     */
    private LinuxParameters linuxParameters;

    /*
     * The log configuration specification for the container. This parameter maps to ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the
     * same logging driver that the Docker daemon uses. However, the container may use a different logging driver than
     * the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different
     * logging driver for a container, the log system must be configured properly on the container instance (or on a
     * different log server for remote logging options). For more information on the options for different supported log
     * drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon
     * (shown in the
     * [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data
     * type). Additional log drivers may be available in future releases of the Amazon ECS container agent. This
     * parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'`` The Amazon ECS container agent running on a
     * container instance must register the logging drivers available on that instance with the
     * ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these
     * log configuration options. For more information, see [Amazon ECS Container Agent
     * Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon
     * Elastic Container Service Developer Guide*. The ``LogConfiguration`` property specifies log configuration options
     * to send to a custom log driver for the container.
     */
    private LogConfiguration logConfiguration;

    /*
     * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory
     * specified here, the container is killed. The total amount of memory reserved for all containers within a task
     * must be lower than the task ``memory`` value, if one is specified. This parameter maps to ``Memory`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--memory`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If using
     * the Fargate launch type, this parameter is optional. If using the EC2 launch type, you must specify either a
     * task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and
     * ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify
     * ``memoryReservation``, then that value is subtracted from the available memory resources for the container
     * instance where the container is placed. Otherwise, the value of ``memory`` is used. The Docker 20.10.0 or later
     * daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of
     * memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a
     * container, so you should not specify fewer than 4 MiB of memory for your containers.
     */
    private Integer memory;

    /*
     * The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention,
     * Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory
     * when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of
     * the available memory on the container instance, whichever comes first. This parameter maps to
     * ``MemoryReservation`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--memory-reservation`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If a
     * task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or
     * ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than
     * ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available
     * memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is
     * used. For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of
     * memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of
     * 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining
     * resources on the container instance, but also allow the container to consume more memory resources when needed.
     * The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less
     * than 6 MiB of memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of
     * memory for a container. So, don't specify less than 4 MiB of memory for your containers.
     */
    private Integer memoryReservation;

    /*
     * The mount points for data volumes in your container. This parameter maps to ``Volumes`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--volume`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). Windows
     * containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount
     * directories on a different drive, and mount point can't be across drives.
     */
    private List<MountPoint> mountPoints;

    /*
     * The name of a container. If you're linking multiple containers together in a task definition, the ``name`` of one
     * container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters
     * (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to ``name`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--name`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     */
    private String name;

    /*
     * The list of port mappings for the container. Port mappings allow containers to access ports on the host container
     * instance to send or receive traffic. For task definitions that use the ``awsvpc`` network mode, you should only
     * specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the
     * ``containerPort``. Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There
     * is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself.
     * This parameter maps to ``PortBindings`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     * If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network
     * mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the
     * container port in the port mapping. After a task reaches the ``RUNNING`` status, manual and automatic host and
     * container port assignments are visible in the *Network Bindings* section of a container description for a
     * selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section
     * [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
     */
    private List<PortMapping> portMappings;

    /*
     * When this parameter is true, the container is given elevated privileges on the host container instance (similar
     * to the ``root`` user). This parameter maps to ``Privileged`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--privileged`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers or tasks run on FARGATElong.
     */
    private Boolean privileged;

    /*
     * When this parameter is ``true``, a TTY is allocated. This parameter maps to ``Tty`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--tty`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     */
    private Boolean pseudoTerminal;

    /*
     * When this parameter is true, the container is given read-only access to its root file system. This parameter maps
     * to ``ReadonlyRootfs`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--read-only`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     */
    private Boolean readonlyRootFilesystem;

    /*
     * The private repository authentication credentials to use. The repository credentials for private registry
     * authentication.
     */
    private RepositoryCredentials repositoryCredentials;

    /*
     * The type and amount of a resource to assign to a container. The only supported resource is a GPU.
     */
    private List<ResourceRequirement> resourceRequirements;

    /*
     * The secrets to pass to the container. For more information, see [Specifying Sensitive
     * Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private List<Secret> secrets;

    /*
     * Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you
     * specify two containers in a task definition with containerA having a dependency on containerB reaching a
     * ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it
     * doesn't reach the desired status within that time then containerA gives up and not start. This results in the
     * task transitioning to a ``STOPPED`` state. When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration
     * variable is used, it's enforced independently from this start timeout value. For tasks using the Fargate launch
     * type, the task or service requires the following platforms: + Linux platform version ``1.3.0`` or later. +
     * Windows platform version ``1.0.0`` or later. For tasks using the EC2 launch type, your container instances
     * require at least version ``1.26.0`` of the container agent to use a container start timeout value. However, we
     * recommend using the latest container agent version. For information about checking your agent version and
     * updating to the latest version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The valid values are 2-120 seconds.
     */
    private Integer startTimeout;

    /*
     * Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its
     * own. For tasks using the Fargate launch type, the task or service requires the following platforms: + Linux
     * platform version ``1.3.0`` or later. + Windows platform version ``1.0.0`` or later. The max stop timeout value is
     * 120 seconds and if the parameter is not specified, the default value of 30 seconds is used. For tasks that use
     * the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container
     * agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or
     * the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds
     * for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least
     * version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the
     * latest container agent version. For information about checking your agent version and updating to the latest
     * version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The valid values are 2-120 seconds.
     */
    private Integer stopTimeout;

    /*
     * A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the [Create
     * a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--sysctl`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For
     * example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
     */
    private List<SystemControl> systemControls;

    /*
     * A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     * Valid naming values are displayed in the
     * [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter
     * requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote
     * API version on your container instance, log in to your container instance and run the following command: ``sudo
     * docker version --format '{{.Server.APIVersion}}'`` This parameter is not supported for Windows containers.
     */
    private List<Ulimit> ulimits;

    /*
     * The user to use inside the container. This parameter maps to ``User`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--user`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). When
     * running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend
     * using a non-root user for better security. You can specify the ``user`` using the following formats. If
     * specifying a UID or GID, you must specify it as a positive integer. + ``user`` + ``user:group`` + ``uid`` +
     * ``uid:gid`` + ``user:gid`` + ``uid:group`` This parameter is not supported for Windows containers.
     */
    private String user;

    /*
     * Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--volumes-from`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     */
    private List<VolumeFrom> volumesFrom;

    /*
     * The working directory to run commands inside the container in. This parameter maps to ``WorkingDir`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--workdir`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     */
    private String workingDirectory;

    /**
     * Creates an instance of ContainerDefinition class.
     */
    public ContainerDefinition() {
    }

    /**
     * Get the command property: The command that's passed to the container. This parameter maps to ``Cmd`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``COMMAND`` parameter to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more
     * information, see
     * [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd).
     * If there are multiple arguments, each argument is a separated string in the array.
     * 
     * @return the command value.
     */
    public List<String> command() {
        return this.command;
    }

    /**
     * Set the command property: The command that's passed to the container. This parameter maps to ``Cmd`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``COMMAND`` parameter to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more
     * information, see
     * [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd).
     * If there are multiple arguments, each argument is a separated string in the array.
     * 
     * @param command the command value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withCommand(List<String> command) {
        this.command = command;
        return this;
    }

    /**
     * Get the cpu property: The number of ``cpu`` units reserved for the container. This parameter maps to
     * ``CpuShares`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--cpu-shares`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of
     * CPU reserved for all containers within a task be lower than the task-level ``cpu`` value. You can determine the
     * number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance
     * type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024. Linux
     * containers share unallocated CPU units with other containers on the container instance with the same ratio as
     * their allocated amount. For example, if you run a single-container task on a single-core instance type with 512
     * CPU units specified for that container, and that's the only task running on the container instance, that
     * container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the
     * same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover,
     * each container could float to higher CPU usage if the other container was not using it. If both tasks were 100%
     * active all of the time, they would be limited to 512 CPU units. On Linux container instances, the Docker daemon
     * on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers.
     * For more information, see [CPU share
     * constraint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#cpu-share-constraint) in
     * the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2. However, the CPU
     * parameter isn't required, and you can use CPU values below 2 in your container definitions. For CPU values below
     * 2 (including null), the behavior varies based on your Amazon ECS container agent version: + *Agent versions less
     * than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024
     * CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares. +
     * *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2. On
     * Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only
     * have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is
     * passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
     * 
     * @return the cpu value.
     */
    public Integer cpu() {
        return this.cpu;
    }

    /**
     * Set the cpu property: The number of ``cpu`` units reserved for the container. This parameter maps to
     * ``CpuShares`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--cpu-shares`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of
     * CPU reserved for all containers within a task be lower than the task-level ``cpu`` value. You can determine the
     * number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance
     * type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024. Linux
     * containers share unallocated CPU units with other containers on the container instance with the same ratio as
     * their allocated amount. For example, if you run a single-container task on a single-core instance type with 512
     * CPU units specified for that container, and that's the only task running on the container instance, that
     * container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the
     * same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover,
     * each container could float to higher CPU usage if the other container was not using it. If both tasks were 100%
     * active all of the time, they would be limited to 512 CPU units. On Linux container instances, the Docker daemon
     * on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers.
     * For more information, see [CPU share
     * constraint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#cpu-share-constraint) in
     * the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2. However, the CPU
     * parameter isn't required, and you can use CPU values below 2 in your container definitions. For CPU values below
     * 2 (including null), the behavior varies based on your Amazon ECS container agent version: + *Agent versions less
     * than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024
     * CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares. +
     * *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2. On
     * Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only
     * have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is
     * passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
     * 
     * @param cpu the cpu value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withCpu(Integer cpu) {
        this.cpu = cpu;
        return this;
    }

    /**
     * Get the credentialSpecs property: A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file
     * that configures the container for Active Directory authentication. We recommend that you use this parameter
     * instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1. There are two formats for each ARN. +
     * credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional
     * section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on
     * any container instance can join different domains. You can use this format without joining the container instance
     * to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You
     * must join the container instance to the domain before you start any tasks that use this task definition. In both
     * formats, replace ``MyARN`` with the ARN in SSM or Amazon S3. If you provide a ``credentialspecdomainless:MyARN``,
     * the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to
     * connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other
     * applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the
     * same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for
     * Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using
     * gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
     * 
     * @return the credentialSpecs value.
     */
    public List<String> credentialSpecs() {
        return this.credentialSpecs;
    }

    /**
     * Set the credentialSpecs property: A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file
     * that configures the container for Active Directory authentication. We recommend that you use this parameter
     * instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1. There are two formats for each ARN. +
     * credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional
     * section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on
     * any container instance can join different domains. You can use this format without joining the container instance
     * to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You
     * must join the container instance to the domain before you start any tasks that use this task definition. In both
     * formats, replace ``MyARN`` with the ARN in SSM or Amazon S3. If you provide a ``credentialspecdomainless:MyARN``,
     * the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to
     * connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other
     * applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the
     * same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for
     * Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using
     * gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
     * 
     * @param credentialSpecs the credentialSpecs value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withCredentialSpecs(List<String> credentialSpecs) {
        this.credentialSpecs = credentialSpecs;
        return this;
    }

    /**
     * Get the dependsOn property: The dependencies defined for container startup and shutdown. A container can contain
     * multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
     * For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container
     * agent to turn on container dependencies. However, we recommend using the latest container agent version. For
     * information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS
     * Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the
     * *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your
     * instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched
     * from version ``20190301`` or later, then they contain the required versions of the container agent and
     * ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. For tasks using the Fargate launch type, the task or service requires the
     * following platforms: + Linux platform version ``1.3.0`` or later. + Windows platform version ``1.0.0`` or later.
     * If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup
     * BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html),
     * the ``dependsOn`` parameter is not supported. For more information see [Issue
     * #680](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/680)
     * on the on the GitHub website.
     * 
     * @return the dependsOn value.
     */
    public List<ContainerDependency> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Set the dependsOn property: The dependencies defined for container startup and shutdown. A container can contain
     * multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
     * For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container
     * agent to turn on container dependencies. However, we recommend using the latest container agent version. For
     * information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS
     * Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the
     * *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your
     * instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched
     * from version ``20190301`` or later, then they contain the required versions of the container agent and
     * ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. For tasks using the Fargate launch type, the task or service requires the
     * following platforms: + Linux platform version ``1.3.0`` or later. + Windows platform version ``1.0.0`` or later.
     * If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup
     * BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html),
     * the ``dependsOn`` parameter is not supported. For more information see [Issue
     * #680](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/680)
     * on the on the GitHub website.
     * 
     * @param dependsOn the dependsOn value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withDependsOn(List<ContainerDependency> dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }

    /**
     * Get the disableNetworking property: When this parameter is true, networking is off within the container. This
     * parameter maps to ``NetworkDisabled`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/). This
     * parameter is not supported for Windows containers.
     * 
     * @return the disableNetworking value.
     */
    public Boolean disableNetworking() {
        return this.disableNetworking;
    }

    /**
     * Set the disableNetworking property: When this parameter is true, networking is off within the container. This
     * parameter maps to ``NetworkDisabled`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/). This
     * parameter is not supported for Windows containers.
     * 
     * @param disableNetworking the disableNetworking value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withDisableNetworking(Boolean disableNetworking) {
        this.disableNetworking = disableNetworking;
        return this;
    }

    /**
     * Get the dnsSearchDomains property: A list of DNS search domains that are presented to the container. This
     * parameter maps to ``DnsSearch`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--dns-search`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     * 
     * @return the dnsSearchDomains value.
     */
    public List<String> dnsSearchDomains() {
        return this.dnsSearchDomains;
    }

    /**
     * Set the dnsSearchDomains property: A list of DNS search domains that are presented to the container. This
     * parameter maps to ``DnsSearch`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--dns-search`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     * 
     * @param dnsSearchDomains the dnsSearchDomains value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withDnsSearchDomains(List<String> dnsSearchDomains) {
        this.dnsSearchDomains = dnsSearchDomains;
        return this;
    }

    /**
     * Get the dnsServers property: A list of DNS servers that are presented to the container. This parameter maps to
     * ``Dns`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--dns`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: A list of DNS servers that are presented to the container. This parameter maps to
     * ``Dns`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--dns`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the dockerLabels property: A key/value map of labels to add to the container. This parameter maps to
     * ``Labels`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--label`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'``.
     * 
     * @return the dockerLabels value.
     */
    public Object dockerLabels() {
        return this.dockerLabels;
    }

    /**
     * Set the dockerLabels property: A key/value map of labels to add to the container. This parameter maps to
     * ``Labels`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--label`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'``.
     * 
     * @param dockerLabels the dockerLabels value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withDockerLabels(Object dockerLabels) {
        this.dockerLabels = dockerLabels;
        return this;
    }

    /**
     * Get the dockerSecurityOptions property: A list of strings to provide custom configuration for multiple security
     * systems. For more information about valid values, see [Docker Run Security
     * Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * This field isn't valid for containers in tasks using the Fargate launch type. For Linux tasks on EC2, this
     * parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems. For any
     * tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for
     * Active Directory authentication. For more information, see [Using gMSAs for Windows
     * Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for
     * Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon
     * Elastic Container Service Developer Guide*. This parameter maps to ``SecurityOpt`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--security-opt`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or
     * ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these
     * security options. For more information, see [Amazon ECS Container Agent
     * Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon
     * Elastic Container Service Developer Guide*. For more information about valid values, see [Docker Run Security
     * Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * Valid values: 'no-new-privileges' | 'apparmor:PROFILE' | 'label:value' | 'credentialspec:CredentialSpecFilePath'.
     * 
     * @return the dockerSecurityOptions value.
     */
    public List<String> dockerSecurityOptions() {
        return this.dockerSecurityOptions;
    }

    /**
     * Set the dockerSecurityOptions property: A list of strings to provide custom configuration for multiple security
     * systems. For more information about valid values, see [Docker Run Security
     * Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * This field isn't valid for containers in tasks using the Fargate launch type. For Linux tasks on EC2, this
     * parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems. For any
     * tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for
     * Active Directory authentication. For more information, see [Using gMSAs for Windows
     * Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for
     * Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon
     * Elastic Container Service Developer Guide*. This parameter maps to ``SecurityOpt`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--security-opt`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or
     * ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these
     * security options. For more information, see [Amazon ECS Container Agent
     * Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon
     * Elastic Container Service Developer Guide*. For more information about valid values, see [Docker Run Security
     * Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * Valid values: 'no-new-privileges' | 'apparmor:PROFILE' | 'label:value' | 'credentialspec:CredentialSpecFilePath'.
     * 
     * @param dockerSecurityOptions the dockerSecurityOptions value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withDockerSecurityOptions(List<String> dockerSecurityOptions) {
        this.dockerSecurityOptions = dockerSecurityOptions;
        return this;
    }

    /**
     * Get the entryPoint property: Early versions of the Amazon ECS container agent don't properly handle
     * ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your
     * commands and arguments as ``command`` array items instead. The entry point that's passed to the container. This
     * parameter maps to ``Entrypoint`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--entrypoint`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more
     * information, see
     * [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint).
     * 
     * @return the entryPoint value.
     */
    public List<String> entryPoint() {
        return this.entryPoint;
    }

    /**
     * Set the entryPoint property: Early versions of the Amazon ECS container agent don't properly handle
     * ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your
     * commands and arguments as ``command`` array items instead. The entry point that's passed to the container. This
     * parameter maps to ``Entrypoint`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--entrypoint`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more
     * information, see
     * [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint).
     * 
     * @param entryPoint the entryPoint value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withEntryPoint(List<String> entryPoint) {
        this.entryPoint = entryPoint;
        return this;
    }

    /**
     * Get the environment property: The environment variables to pass to a container. This parameter maps to ``Env`` in
     * the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--env`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). We don't
     * recommend that you use plaintext environment variables for sensitive information, such as credential data.
     * 
     * @return the environment value.
     */
    public List<KeyValuePair> environment() {
        return this.environment;
    }

    /**
     * Set the environment property: The environment variables to pass to a container. This parameter maps to ``Env`` in
     * the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--env`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). We don't
     * recommend that you use plaintext environment variables for sensitive information, such as credential data.
     * 
     * @param environment the environment value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withEnvironment(List<KeyValuePair> environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the environmentFiles property: A list of files containing the environment variables to pass to a container.
     * This parameter maps to the ``--env-file`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). You can
     * specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment
     * file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as
     * comments and are ignored. For more information about the environment variable file syntax, see [Declare default
     * environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/). If there
     * are environment variables specified using the ``environment`` parameter in a container definition, they take
     * precedence over the variables contained within an environment file. If multiple environment files are specified
     * that contain the same variable, they're processed from the top down. We recommend that you use unique variable
     * names. For more information, see [Specifying Environment
     * Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @return the environmentFiles value.
     */
    public List<EnvironmentFile> environmentFiles() {
        return this.environmentFiles;
    }

    /**
     * Set the environmentFiles property: A list of files containing the environment variables to pass to a container.
     * This parameter maps to the ``--env-file`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). You can
     * specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment
     * file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as
     * comments and are ignored. For more information about the environment variable file syntax, see [Declare default
     * environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/). If there
     * are environment variables specified using the ``environment`` parameter in a container definition, they take
     * precedence over the variables contained within an environment file. If multiple environment files are specified
     * that contain the same variable, they're processed from the top down. We recommend that you use unique variable
     * names. For more information, see [Specifying Environment
     * Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @param environmentFiles the environmentFiles value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withEnvironmentFiles(List<EnvironmentFile> environmentFiles) {
        this.environmentFiles = environmentFiles;
        return this;
    }

    /**
     * Get the essential property: If the ``essential`` parameter of a container is marked as ``true``, and that
     * container fails or stops for any reason, all other containers that are part of the task are stopped. If the
     * ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the
     * containers in a task. If this parameter is omitted, a container is assumed to be essential. All tasks must have
     * at least one essential container. If you have an application that's composed of multiple containers, group
     * containers that are used for a common purpose into components, and separate the different components into
     * multiple task definitions. For more information, see [Application
     * Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the
     * *Amazon Elastic Container Service Developer Guide*.
     * 
     * @return the essential value.
     */
    public Boolean essential() {
        return this.essential;
    }

    /**
     * Set the essential property: If the ``essential`` parameter of a container is marked as ``true``, and that
     * container fails or stops for any reason, all other containers that are part of the task are stopped. If the
     * ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the
     * containers in a task. If this parameter is omitted, a container is assumed to be essential. All tasks must have
     * at least one essential container. If you have an application that's composed of multiple containers, group
     * containers that are used for a common purpose into components, and separate the different components into
     * multiple task definitions. For more information, see [Application
     * Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the
     * *Amazon Elastic Container Service Developer Guide*.
     * 
     * @param essential the essential value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withEssential(Boolean essential) {
        this.essential = essential;
        return this;
    }

    /**
     * Get the extraHosts property: A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on
     * the container. This parameter maps to ``ExtraHosts`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--add-host`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
     * 
     * @return the extraHosts value.
     */
    public List<HostEntry> extraHosts() {
        return this.extraHosts;
    }

    /**
     * Set the extraHosts property: A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on
     * the container. This parameter maps to ``ExtraHosts`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--add-host`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
     * 
     * @param extraHosts the extraHosts value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withExtraHosts(List<HostEntry> extraHosts) {
        this.extraHosts = extraHosts;
        return this;
    }

    /**
     * Get the firelensConfiguration property: The FireLens configuration for the container. This is used to specify and
     * configure a log router for container logs. For more information, see [Custom Log
     * Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The FireLens configuration for the container. This is used to specify and
     * configure a log router for container logs. For more information, see [Custom log
     * routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @return the firelensConfiguration value.
     */
    public FirelensConfiguration firelensConfiguration() {
        return this.firelensConfiguration;
    }

    /**
     * Set the firelensConfiguration property: The FireLens configuration for the container. This is used to specify and
     * configure a log router for container logs. For more information, see [Custom Log
     * Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The FireLens configuration for the container. This is used to specify and
     * configure a log router for container logs. For more information, see [Custom log
     * routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @param firelensConfiguration the firelensConfiguration value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withFirelensConfiguration(FirelensConfiguration firelensConfiguration) {
        this.firelensConfiguration = firelensConfiguration;
        return this;
    }

    /**
     * Get the healthCheck property: The container health check command and associated configuration parameters for the
     * container. This parameter maps to ``HealthCheck`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``HEALTHCHECK`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * ``HealthCheck`` property specifies an object representing a container health check. Health check parameters that
     * are specified in a container definition override any Docker health checks that exist in the container image (such
     * as those specified in a parent image or from the image's Dockerfile). This configuration maps to the
     * ``HEALTHCHECK`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). The Amazon ECS container agent
     * only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor
     * Docker health checks that are embedded in a container image and not specified in the container definition. Health
     * check parameters that are specified in a container definition override any Docker health checks that exist in the
     * container image. If a task is run manually, and not as part of a service, the task will continue its lifecycle
     * regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the
     * task will be stopped and the service scheduler will replace it. The following are notes about container health
     * check support: + Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For
     * more information, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html). + Container health
     * checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information,
     * see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html). +
     * Container health checks are not supported for tasks that are part of a service that is configured to use a
     * Classic Load Balancer.
     * 
     * @return the healthCheck value.
     */
    public HealthCheck healthCheck() {
        return this.healthCheck;
    }

    /**
     * Set the healthCheck property: The container health check command and associated configuration parameters for the
     * container. This parameter maps to ``HealthCheck`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``HEALTHCHECK`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * ``HealthCheck`` property specifies an object representing a container health check. Health check parameters that
     * are specified in a container definition override any Docker health checks that exist in the container image (such
     * as those specified in a parent image or from the image's Dockerfile). This configuration maps to the
     * ``HEALTHCHECK`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). The Amazon ECS container agent
     * only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor
     * Docker health checks that are embedded in a container image and not specified in the container definition. Health
     * check parameters that are specified in a container definition override any Docker health checks that exist in the
     * container image. If a task is run manually, and not as part of a service, the task will continue its lifecycle
     * regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the
     * task will be stopped and the service scheduler will replace it. The following are notes about container health
     * check support: + Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For
     * more information, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html). + Container health
     * checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information,
     * see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html). +
     * Container health checks are not supported for tasks that are part of a service that is configured to use a
     * Classic Load Balancer.
     * 
     * @param healthCheck the healthCheck value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withHealthCheck(HealthCheck healthCheck) {
        this.healthCheck = healthCheck;
        return this;
    }

    /**
     * Get the hostname property: The hostname to use for your container. This parameter maps to ``Hostname`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--hostname`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname to use for your container. This parameter maps to ``Hostname`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--hostname`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). The
     * ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
     * 
     * @param hostname the hostname value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the image property: The image used to start a container. This string is passed directly to the Docker daemon.
     * By default, images in the Docker Hub registry are available. Other repositories are specified with either
     * ``repository-url/image:tag`` or ``repository-url/image&#064;digest``. Up to 255 letters (uppercase and
     * lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This
     * parameter maps to ``Image`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``IMAGE`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). + When a
     * new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the
     * container to use. However, subsequent updates to a repository image aren't propagated to already running tasks. +
     * Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or
     * ``registry/repository&#064;digest``. For example,
     * ``012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest`` or
     * ``012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;&#064;sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``.
     * + Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or ``mongo``). +
     * Images in other repositories on Docker Hub are qualified with an organization name (for example,
     * ``amazon/amazon-ecs-agent``). + Images in other online repositories are qualified further by a domain name (for
     * example, ``quay.io/assemblyline/ubuntu``).
     * 
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Set the image property: The image used to start a container. This string is passed directly to the Docker daemon.
     * By default, images in the Docker Hub registry are available. Other repositories are specified with either
     * ``repository-url/image:tag`` or ``repository-url/image&#064;digest``. Up to 255 letters (uppercase and
     * lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This
     * parameter maps to ``Image`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``IMAGE`` parameter of [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). + When a
     * new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the
     * container to use. However, subsequent updates to a repository image aren't propagated to already running tasks. +
     * Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or
     * ``registry/repository&#064;digest``. For example,
     * ``012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest`` or
     * ``012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;&#064;sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``.
     * + Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or ``mongo``). +
     * Images in other repositories on Docker Hub are qualified with an organization name (for example,
     * ``amazon/amazon-ecs-agent``). + Images in other online repositories are qualified further by a domain name (for
     * example, ``quay.io/assemblyline/ubuntu``).
     * 
     * @param image the image value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withImage(String image) {
        this.image = image;
        return this;
    }

    /**
     * Get the interactive property: When this parameter is ``true``, you can deploy containerized applications that
     * require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--interactive`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @return the interactive value.
     */
    public Boolean interactive() {
        return this.interactive;
    }

    /**
     * Set the interactive property: When this parameter is ``true``, you can deploy containerized applications that
     * require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--interactive`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @param interactive the interactive value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withInteractive(Boolean interactive) {
        this.interactive = interactive;
        return this;
    }

    /**
     * Get the links property: The ``links`` parameter allows containers to communicate with each other without the need
     * for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The
     * ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and
     * lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers,
     * go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker
     * documentation. This parameter maps to ``Links`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--link`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers. Containers that are collocated on a single container instance
     * may be able to communicate with each other without requiring links or host port mappings. Network isolation is
     * achieved on the container instance using security groups and VPC settings.
     * 
     * @return the links value.
     */
    public List<String> links() {
        return this.links;
    }

    /**
     * Set the links property: The ``links`` parameter allows containers to communicate with each other without the need
     * for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The
     * ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and
     * lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers,
     * go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker
     * documentation. This parameter maps to ``Links`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--link`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers. Containers that are collocated on a single container instance
     * may be able to communicate with each other without requiring links or host port mappings. Network isolation is
     * achieved on the container instance using security groups and VPC settings.
     * 
     * @param links the links value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withLinks(List<String> links) {
        this.links = links;
        return this;
    }

    /**
     * Get the linuxParameters property: Linux-specific modifications that are applied to the container, such as Linux
     * kernel capabilities. For more information see
     * [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html). This
     * parameter is not supported for Windows containers. The Linux-specific options that are applied to the container,
     * such as Linux
     * [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
     * 
     * @return the linuxParameters value.
     */
    public LinuxParameters linuxParameters() {
        return this.linuxParameters;
    }

    /**
     * Set the linuxParameters property: Linux-specific modifications that are applied to the container, such as Linux
     * kernel capabilities. For more information see
     * [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html). This
     * parameter is not supported for Windows containers. The Linux-specific options that are applied to the container,
     * such as Linux
     * [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
     * 
     * @param linuxParameters the linuxParameters value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withLinuxParameters(LinuxParameters linuxParameters) {
        this.linuxParameters = linuxParameters;
        return this;
    }

    /**
     * Get the logConfiguration property: The log configuration specification for the container. This parameter maps to
     * ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the
     * same logging driver that the Docker daemon uses. However, the container may use a different logging driver than
     * the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different
     * logging driver for a container, the log system must be configured properly on the container instance (or on a
     * different log server for remote logging options). For more information on the options for different supported log
     * drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon
     * (shown in the
     * [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data
     * type). Additional log drivers may be available in future releases of the Amazon ECS container agent. This
     * parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'`` The Amazon ECS container agent running on a
     * container instance must register the logging drivers available on that instance with the
     * ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these
     * log configuration options. For more information, see [Amazon ECS Container Agent
     * Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon
     * Elastic Container Service Developer Guide*. The ``LogConfiguration`` property specifies log configuration options
     * to send to a custom log driver for the container.
     * 
     * @return the logConfiguration value.
     */
    public LogConfiguration logConfiguration() {
        return this.logConfiguration;
    }

    /**
     * Set the logConfiguration property: The log configuration specification for the container. This parameter maps to
     * ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the
     * same logging driver that the Docker daemon uses. However, the container may use a different logging driver than
     * the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different
     * logging driver for a container, the log system must be configured properly on the container instance (or on a
     * different log server for remote logging options). For more information on the options for different supported log
     * drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon
     * (shown in the
     * [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data
     * type). Additional log drivers may be available in future releases of the Amazon ECS container agent. This
     * parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'`` The Amazon ECS container agent running on a
     * container instance must register the logging drivers available on that instance with the
     * ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these
     * log configuration options. For more information, see [Amazon ECS Container Agent
     * Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon
     * Elastic Container Service Developer Guide*. The ``LogConfiguration`` property specifies log configuration options
     * to send to a custom log driver for the container.
     * 
     * @param logConfiguration the logConfiguration value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withLogConfiguration(LogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
        return this;
    }

    /**
     * Get the memory property: The amount (in MiB) of memory to present to the container. If your container attempts to
     * exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers
     * within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to
     * ``Memory`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--memory`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If using
     * the Fargate launch type, this parameter is optional. If using the EC2 launch type, you must specify either a
     * task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and
     * ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify
     * ``memoryReservation``, then that value is subtracted from the available memory resources for the container
     * instance where the container is placed. Otherwise, the value of ``memory`` is used. The Docker 20.10.0 or later
     * daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of
     * memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a
     * container, so you should not specify fewer than 4 MiB of memory for your containers.
     * 
     * @return the memory value.
     */
    public Integer memory() {
        return this.memory;
    }

    /**
     * Set the memory property: The amount (in MiB) of memory to present to the container. If your container attempts to
     * exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers
     * within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to
     * ``Memory`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--memory`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If using
     * the Fargate launch type, this parameter is optional. If using the EC2 launch type, you must specify either a
     * task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and
     * ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify
     * ``memoryReservation``, then that value is subtracted from the available memory resources for the container
     * instance where the container is placed. Otherwise, the value of ``memory`` is used. The Docker 20.10.0 or later
     * daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of
     * memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a
     * container, so you should not specify fewer than 4 MiB of memory for your containers.
     * 
     * @param memory the memory value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withMemory(Integer memory) {
        this.memory = memory;
        return this;
    }

    /**
     * Get the memoryReservation property: The soft limit (in MiB) of memory to reserve for the container. When system
     * memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your
     * container can consume more memory when it needs to, up to either the hard limit specified with the ``memory``
     * parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This
     * parameter maps to ``MemoryReservation`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--memory-reservation`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If a
     * task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or
     * ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than
     * ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available
     * memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is
     * used. For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of
     * memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of
     * 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining
     * resources on the container instance, but also allow the container to consume more memory resources when needed.
     * The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less
     * than 6 MiB of memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of
     * memory for a container. So, don't specify less than 4 MiB of memory for your containers.
     * 
     * @return the memoryReservation value.
     */
    public Integer memoryReservation() {
        return this.memoryReservation;
    }

    /**
     * Set the memoryReservation property: The soft limit (in MiB) of memory to reserve for the container. When system
     * memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your
     * container can consume more memory when it needs to, up to either the hard limit specified with the ``memory``
     * parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This
     * parameter maps to ``MemoryReservation`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--memory-reservation`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If a
     * task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or
     * ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than
     * ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available
     * memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is
     * used. For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of
     * memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of
     * 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining
     * resources on the container instance, but also allow the container to consume more memory resources when needed.
     * The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less
     * than 6 MiB of memory for your containers. The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of
     * memory for a container. So, don't specify less than 4 MiB of memory for your containers.
     * 
     * @param memoryReservation the memoryReservation value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withMemoryReservation(Integer memoryReservation) {
        this.memoryReservation = memoryReservation;
        return this;
    }

    /**
     * Get the mountPoints property: The mount points for data volumes in your container. This parameter maps to
     * ``Volumes`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--volume`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). Windows
     * containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount
     * directories on a different drive, and mount point can't be across drives.
     * 
     * @return the mountPoints value.
     */
    public List<MountPoint> mountPoints() {
        return this.mountPoints;
    }

    /**
     * Set the mountPoints property: The mount points for data volumes in your container. This parameter maps to
     * ``Volumes`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--volume`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). Windows
     * containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount
     * directories on a different drive, and mount point can't be across drives.
     * 
     * @param mountPoints the mountPoints value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withMountPoints(List<MountPoint> mountPoints) {
        this.mountPoints = mountPoints;
        return this;
    }

    /**
     * Get the name property: The name of a container. If you're linking multiple containers together in a task
     * definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the
     * containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This
     * parameter maps to ``name`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--name`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of a container. If you're linking multiple containers together in a task
     * definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the
     * containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This
     * parameter maps to ``name`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--name`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @param name the name value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the portMappings property: The list of port mappings for the container. Port mappings allow containers to
     * access ports on the host container instance to send or receive traffic. For task definitions that use the
     * ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it
     * must be the same value as the ``containerPort``. Port mappings on Windows use the ``NetNAT`` gateway address
     * rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's
     * mapped port from the host itself. This parameter maps to ``PortBindings`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     * If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network
     * mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the
     * container port in the port mapping. After a task reaches the ``RUNNING`` status, manual and automatic host and
     * container port assignments are visible in the *Network Bindings* section of a container description for a
     * selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section
     * [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
     * 
     * @return the portMappings value.
     */
    public List<PortMapping> portMappings() {
        return this.portMappings;
    }

    /**
     * Set the portMappings property: The list of port mappings for the container. Port mappings allow containers to
     * access ports on the host container instance to send or receive traffic. For task definitions that use the
     * ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it
     * must be the same value as the ``containerPort``. Port mappings on Windows use the ``NetNAT`` gateway address
     * rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's
     * mapped port from the host itself. This parameter maps to ``PortBindings`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     * If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network
     * mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the
     * container port in the port mapping. After a task reaches the ``RUNNING`` status, manual and automatic host and
     * container port assignments are visible in the *Network Bindings* section of a container description for a
     * selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section
     * [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
     * 
     * @param portMappings the portMappings value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withPortMappings(List<PortMapping> portMappings) {
        this.portMappings = portMappings;
        return this;
    }

    /**
     * Get the privileged property: When this parameter is true, the container is given elevated privileges on the host
     * container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--privileged`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers or tasks run on FARGATElong.
     * 
     * @return the privileged value.
     */
    public Boolean privileged() {
        return this.privileged;
    }

    /**
     * Set the privileged property: When this parameter is true, the container is given elevated privileges on the host
     * container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--privileged`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers or tasks run on FARGATElong.
     * 
     * @param privileged the privileged value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withPrivileged(Boolean privileged) {
        this.privileged = privileged;
        return this;
    }

    /**
     * Get the pseudoTerminal property: When this parameter is ``true``, a TTY is allocated. This parameter maps to
     * ``Tty`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--tty`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @return the pseudoTerminal value.
     */
    public Boolean pseudoTerminal() {
        return this.pseudoTerminal;
    }

    /**
     * Set the pseudoTerminal property: When this parameter is ``true``, a TTY is allocated. This parameter maps to
     * ``Tty`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--tty`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @param pseudoTerminal the pseudoTerminal value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withPseudoTerminal(Boolean pseudoTerminal) {
        this.pseudoTerminal = pseudoTerminal;
        return this;
    }

    /**
     * Get the readonlyRootFilesystem property: When this parameter is true, the container is given read-only access to
     * its root file system. This parameter maps to ``ReadonlyRootfs`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--read-only`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     * 
     * @return the readonlyRootFilesystem value.
     */
    public Boolean readonlyRootFilesystem() {
        return this.readonlyRootFilesystem;
    }

    /**
     * Set the readonlyRootFilesystem property: When this parameter is true, the container is given read-only access to
     * its root file system. This parameter maps to ``ReadonlyRootfs`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--read-only`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter is not supported for Windows containers.
     * 
     * @param readonlyRootFilesystem the readonlyRootFilesystem value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withReadonlyRootFilesystem(Boolean readonlyRootFilesystem) {
        this.readonlyRootFilesystem = readonlyRootFilesystem;
        return this;
    }

    /**
     * Get the repositoryCredentials property: The private repository authentication credentials to use. The repository
     * credentials for private registry authentication.
     * 
     * @return the repositoryCredentials value.
     */
    public RepositoryCredentials repositoryCredentials() {
        return this.repositoryCredentials;
    }

    /**
     * Set the repositoryCredentials property: The private repository authentication credentials to use. The repository
     * credentials for private registry authentication.
     * 
     * @param repositoryCredentials the repositoryCredentials value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withRepositoryCredentials(RepositoryCredentials repositoryCredentials) {
        this.repositoryCredentials = repositoryCredentials;
        return this;
    }

    /**
     * Get the resourceRequirements property: The type and amount of a resource to assign to a container. The only
     * supported resource is a GPU.
     * 
     * @return the resourceRequirements value.
     */
    public List<ResourceRequirement> resourceRequirements() {
        return this.resourceRequirements;
    }

    /**
     * Set the resourceRequirements property: The type and amount of a resource to assign to a container. The only
     * supported resource is a GPU.
     * 
     * @param resourceRequirements the resourceRequirements value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withResourceRequirements(List<ResourceRequirement> resourceRequirements) {
        this.resourceRequirements = resourceRequirements;
        return this;
    }

    /**
     * Get the secrets property: The secrets to pass to the container. For more information, see [Specifying Sensitive
     * Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @return the secrets value.
     */
    public List<Secret> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: The secrets to pass to the container. For more information, see [Specifying Sensitive
     * Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @param secrets the secrets value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withSecrets(List<Secret> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the startTimeout property: Time duration (in seconds) to wait before giving up on resolving dependencies for
     * a container. For example, you specify two containers in a task definition with containerA having a dependency on
     * containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified
     * for containerB and it doesn't reach the desired status within that time then containerA gives up and not start.
     * This results in the task transitioning to a ``STOPPED`` state. When the ``ECS_CONTAINER_START_TIMEOUT`` container
     * agent configuration variable is used, it's enforced independently from this start timeout value. For tasks using
     * the Fargate launch type, the task or service requires the following platforms: + Linux platform version ``1.3.0``
     * or later. + Windows platform version ``1.0.0`` or later. For tasks using the EC2 launch type, your container
     * instances require at least version ``1.26.0`` of the container agent to use a container start timeout value.
     * However, we recommend using the latest container agent version. For information about checking your agent version
     * and updating to the latest version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The valid values are 2-120 seconds.
     * 
     * @return the startTimeout value.
     */
    public Integer startTimeout() {
        return this.startTimeout;
    }

    /**
     * Set the startTimeout property: Time duration (in seconds) to wait before giving up on resolving dependencies for
     * a container. For example, you specify two containers in a task definition with containerA having a dependency on
     * containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified
     * for containerB and it doesn't reach the desired status within that time then containerA gives up and not start.
     * This results in the task transitioning to a ``STOPPED`` state. When the ``ECS_CONTAINER_START_TIMEOUT`` container
     * agent configuration variable is used, it's enforced independently from this start timeout value. For tasks using
     * the Fargate launch type, the task or service requires the following platforms: + Linux platform version ``1.3.0``
     * or later. + Windows platform version ``1.0.0`` or later. For tasks using the EC2 launch type, your container
     * instances require at least version ``1.26.0`` of the container agent to use a container start timeout value.
     * However, we recommend using the latest container agent version. For information about checking your agent version
     * and updating to the latest version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The valid values are 2-120 seconds.
     * 
     * @param startTimeout the startTimeout value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withStartTimeout(Integer startTimeout) {
        this.startTimeout = startTimeout;
        return this;
    }

    /**
     * Get the stopTimeout property: Time duration (in seconds) to wait before the container is forcefully killed if it
     * doesn't exit normally on its own. For tasks using the Fargate launch type, the task or service requires the
     * following platforms: + Linux platform version ``1.3.0`` or later. + Windows platform version ``1.0.0`` or later.
     * The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds
     * is used. For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set
     * for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the
     * ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the
     * default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container
     * instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However,
     * we recommend using the latest container agent version. For information about checking your agent version and
     * updating to the latest version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The valid values are 2-120 seconds.
     * 
     * @return the stopTimeout value.
     */
    public Integer stopTimeout() {
        return this.stopTimeout;
    }

    /**
     * Set the stopTimeout property: Time duration (in seconds) to wait before the container is forcefully killed if it
     * doesn't exit normally on its own. For tasks using the Fargate launch type, the task or service requires the
     * following platforms: + Linux platform version ``1.3.0`` or later. + Windows platform version ``1.0.0`` or later.
     * The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds
     * is used. For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set
     * for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the
     * ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the
     * default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container
     * instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However,
     * we recommend using the latest container agent version. For information about checking your agent version and
     * updating to the latest version, see [Updating the Amazon ECS Container
     * Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic
     * Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at
     * least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version
     * ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more
     * information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The valid values are 2-120 seconds.
     * 
     * @param stopTimeout the stopTimeout value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withStopTimeout(Integer stopTimeout) {
        this.stopTimeout = stopTimeout;
        return this;
    }

    /**
     * Get the systemControls property: A list of namespaced kernel parameters to set in the container. This parameter
     * maps to ``Sysctls`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--sysctl`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For
     * example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
     * 
     * @return the systemControls value.
     */
    public List<SystemControl> systemControls() {
        return this.systemControls;
    }

    /**
     * Set the systemControls property: A list of namespaced kernel parameters to set in the container. This parameter
     * maps to ``Sysctls`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--sysctl`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For
     * example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
     * 
     * @param systemControls the systemControls value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withSystemControls(List<SystemControl> systemControls) {
        this.systemControls = systemControls;
        return this;
    }

    /**
     * Get the ulimits property: A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
     * the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     * Valid naming values are displayed in the
     * [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter
     * requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote
     * API version on your container instance, log in to your container instance and run the following command: ``sudo
     * docker version --format '{{.Server.APIVersion}}'`` This parameter is not supported for Windows containers.
     * 
     * @return the ulimits value.
     */
    public List<Ulimit> ulimits() {
        return this.ulimits;
    }

    /**
     * Set the ulimits property: A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in
     * the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     * Valid naming values are displayed in the
     * [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter
     * requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote
     * API version on your container instance, log in to your container instance and run the following command: ``sudo
     * docker version --format '{{.Server.APIVersion}}'`` This parameter is not supported for Windows containers.
     * 
     * @param ulimits the ulimits value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withUlimits(List<Ulimit> ulimits) {
        this.ulimits = ulimits;
        return this;
    }

    /**
     * Get the user property: The user to use inside the container. This parameter maps to ``User`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--user`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). When
     * running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend
     * using a non-root user for better security. You can specify the ``user`` using the following formats. If
     * specifying a UID or GID, you must specify it as a positive integer. + ``user`` + ``user:group`` + ``uid`` +
     * ``uid:gid`` + ``user:gid`` + ``uid:group`` This parameter is not supported for Windows containers.
     * 
     * @return the user value.
     */
    public String user() {
        return this.user;
    }

    /**
     * Set the user property: The user to use inside the container. This parameter maps to ``User`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--user`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). When
     * running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend
     * using a non-root user for better security. You can specify the ``user`` using the following formats. If
     * specifying a UID or GID, you must specify it as a positive integer. + ``user`` + ``user:group`` + ``uid`` +
     * ``uid:gid`` + ``user:gid`` + ``uid:group`` This parameter is not supported for Windows containers.
     * 
     * @param user the user value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the volumesFrom property: Data volumes to mount from another container. This parameter maps to
     * ``VolumesFrom`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--volumes-from`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @return the volumesFrom value.
     */
    public List<VolumeFrom> volumesFrom() {
        return this.volumesFrom;
    }

    /**
     * Set the volumesFrom property: Data volumes to mount from another container. This parameter maps to
     * ``VolumesFrom`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--volumes-from`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @param volumesFrom the volumesFrom value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withVolumesFrom(List<VolumeFrom> volumesFrom) {
        this.volumesFrom = volumesFrom;
        return this;
    }

    /**
     * Get the workingDirectory property: The working directory to run commands inside the container in. This parameter
     * maps to ``WorkingDir`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--workdir`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @return the workingDirectory value.
     */
    public String workingDirectory() {
        return this.workingDirectory;
    }

    /**
     * Set the workingDirectory property: The working directory to run commands inside the container in. This parameter
     * maps to ``WorkingDir`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--workdir`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * 
     * @param workingDirectory the workingDirectory value to set.
     * @return the ContainerDefinition object itself.
     */
    public ContainerDefinition withWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dependsOn() != null) {
            dependsOn().forEach(e -> e.validate());
        }
        if (environment() != null) {
            environment().forEach(e -> e.validate());
        }
        if (environmentFiles() != null) {
            environmentFiles().forEach(e -> e.validate());
        }
        if (extraHosts() != null) {
            extraHosts().forEach(e -> e.validate());
        }
        if (firelensConfiguration() != null) {
            firelensConfiguration().validate();
        }
        if (healthCheck() != null) {
            healthCheck().validate();
        }
        if (linuxParameters() != null) {
            linuxParameters().validate();
        }
        if (logConfiguration() != null) {
            logConfiguration().validate();
        }
        if (mountPoints() != null) {
            mountPoints().forEach(e -> e.validate());
        }
        if (portMappings() != null) {
            portMappings().forEach(e -> e.validate());
        }
        if (repositoryCredentials() != null) {
            repositoryCredentials().validate();
        }
        if (resourceRequirements() != null) {
            resourceRequirements().forEach(e -> e.validate());
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (systemControls() != null) {
            systemControls().forEach(e -> e.validate());
        }
        if (ulimits() != null) {
            ulimits().forEach(e -> e.validate());
        }
        if (volumesFrom() != null) {
            volumesFrom().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("command", this.command, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("cpu", this.cpu);
        jsonWriter.writeArrayField("credentialSpecs", this.credentialSpecs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("dependsOn", this.dependsOn, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("disableNetworking", this.disableNetworking);
        jsonWriter.writeArrayField("dnsSearchDomains", this.dnsSearchDomains,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeUntypedField("dockerLabels", this.dockerLabels);
        jsonWriter.writeArrayField("dockerSecurityOptions", this.dockerSecurityOptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("entryPoint", this.entryPoint, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("environment", this.environment, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("environmentFiles", this.environmentFiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("essential", this.essential);
        jsonWriter.writeArrayField("extraHosts", this.extraHosts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("firelensConfiguration", this.firelensConfiguration);
        jsonWriter.writeJsonField("healthCheck", this.healthCheck);
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("image", this.image);
        jsonWriter.writeBooleanField("interactive", this.interactive);
        jsonWriter.writeArrayField("links", this.links, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("linuxParameters", this.linuxParameters);
        jsonWriter.writeJsonField("logConfiguration", this.logConfiguration);
        jsonWriter.writeNumberField("memory", this.memory);
        jsonWriter.writeNumberField("memoryReservation", this.memoryReservation);
        jsonWriter.writeArrayField("mountPoints", this.mountPoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("portMappings", this.portMappings, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("privileged", this.privileged);
        jsonWriter.writeBooleanField("pseudoTerminal", this.pseudoTerminal);
        jsonWriter.writeBooleanField("readonlyRootFilesystem", this.readonlyRootFilesystem);
        jsonWriter.writeJsonField("repositoryCredentials", this.repositoryCredentials);
        jsonWriter.writeArrayField("resourceRequirements", this.resourceRequirements,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("secrets", this.secrets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("startTimeout", this.startTimeout);
        jsonWriter.writeNumberField("stopTimeout", this.stopTimeout);
        jsonWriter.writeArrayField("systemControls", this.systemControls,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ulimits", this.ulimits, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("user", this.user);
        jsonWriter.writeArrayField("volumesFrom", this.volumesFrom, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("workingDirectory", this.workingDirectory);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContainerDefinition.
     */
    public static ContainerDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerDefinition deserializedContainerDefinition = new ContainerDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    List<String> command = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.command = command;
                } else if ("cpu".equals(fieldName)) {
                    deserializedContainerDefinition.cpu = reader.getNullable(JsonReader::getInt);
                } else if ("credentialSpecs".equals(fieldName)) {
                    List<String> credentialSpecs = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.credentialSpecs = credentialSpecs;
                } else if ("dependsOn".equals(fieldName)) {
                    List<ContainerDependency> dependsOn
                        = reader.readArray(reader1 -> ContainerDependency.fromJson(reader1));
                    deserializedContainerDefinition.dependsOn = dependsOn;
                } else if ("disableNetworking".equals(fieldName)) {
                    deserializedContainerDefinition.disableNetworking = reader.getNullable(JsonReader::getBoolean);
                } else if ("dnsSearchDomains".equals(fieldName)) {
                    List<String> dnsSearchDomains = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.dnsSearchDomains = dnsSearchDomains;
                } else if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.dnsServers = dnsServers;
                } else if ("dockerLabels".equals(fieldName)) {
                    deserializedContainerDefinition.dockerLabels = reader.readUntyped();
                } else if ("dockerSecurityOptions".equals(fieldName)) {
                    List<String> dockerSecurityOptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.dockerSecurityOptions = dockerSecurityOptions;
                } else if ("entryPoint".equals(fieldName)) {
                    List<String> entryPoint = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.entryPoint = entryPoint;
                } else if ("environment".equals(fieldName)) {
                    List<KeyValuePair> environment = reader.readArray(reader1 -> KeyValuePair.fromJson(reader1));
                    deserializedContainerDefinition.environment = environment;
                } else if ("environmentFiles".equals(fieldName)) {
                    List<EnvironmentFile> environmentFiles
                        = reader.readArray(reader1 -> EnvironmentFile.fromJson(reader1));
                    deserializedContainerDefinition.environmentFiles = environmentFiles;
                } else if ("essential".equals(fieldName)) {
                    deserializedContainerDefinition.essential = reader.getNullable(JsonReader::getBoolean);
                } else if ("extraHosts".equals(fieldName)) {
                    List<HostEntry> extraHosts = reader.readArray(reader1 -> HostEntry.fromJson(reader1));
                    deserializedContainerDefinition.extraHosts = extraHosts;
                } else if ("firelensConfiguration".equals(fieldName)) {
                    deserializedContainerDefinition.firelensConfiguration = FirelensConfiguration.fromJson(reader);
                } else if ("healthCheck".equals(fieldName)) {
                    deserializedContainerDefinition.healthCheck = HealthCheck.fromJson(reader);
                } else if ("hostname".equals(fieldName)) {
                    deserializedContainerDefinition.hostname = reader.getString();
                } else if ("image".equals(fieldName)) {
                    deserializedContainerDefinition.image = reader.getString();
                } else if ("interactive".equals(fieldName)) {
                    deserializedContainerDefinition.interactive = reader.getNullable(JsonReader::getBoolean);
                } else if ("links".equals(fieldName)) {
                    List<String> links = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerDefinition.links = links;
                } else if ("linuxParameters".equals(fieldName)) {
                    deserializedContainerDefinition.linuxParameters = LinuxParameters.fromJson(reader);
                } else if ("logConfiguration".equals(fieldName)) {
                    deserializedContainerDefinition.logConfiguration = LogConfiguration.fromJson(reader);
                } else if ("memory".equals(fieldName)) {
                    deserializedContainerDefinition.memory = reader.getNullable(JsonReader::getInt);
                } else if ("memoryReservation".equals(fieldName)) {
                    deserializedContainerDefinition.memoryReservation = reader.getNullable(JsonReader::getInt);
                } else if ("mountPoints".equals(fieldName)) {
                    List<MountPoint> mountPoints = reader.readArray(reader1 -> MountPoint.fromJson(reader1));
                    deserializedContainerDefinition.mountPoints = mountPoints;
                } else if ("name".equals(fieldName)) {
                    deserializedContainerDefinition.name = reader.getString();
                } else if ("portMappings".equals(fieldName)) {
                    List<PortMapping> portMappings = reader.readArray(reader1 -> PortMapping.fromJson(reader1));
                    deserializedContainerDefinition.portMappings = portMappings;
                } else if ("privileged".equals(fieldName)) {
                    deserializedContainerDefinition.privileged = reader.getNullable(JsonReader::getBoolean);
                } else if ("pseudoTerminal".equals(fieldName)) {
                    deserializedContainerDefinition.pseudoTerminal = reader.getNullable(JsonReader::getBoolean);
                } else if ("readonlyRootFilesystem".equals(fieldName)) {
                    deserializedContainerDefinition.readonlyRootFilesystem = reader.getNullable(JsonReader::getBoolean);
                } else if ("repositoryCredentials".equals(fieldName)) {
                    deserializedContainerDefinition.repositoryCredentials = RepositoryCredentials.fromJson(reader);
                } else if ("resourceRequirements".equals(fieldName)) {
                    List<ResourceRequirement> resourceRequirements
                        = reader.readArray(reader1 -> ResourceRequirement.fromJson(reader1));
                    deserializedContainerDefinition.resourceRequirements = resourceRequirements;
                } else if ("secrets".equals(fieldName)) {
                    List<Secret> secrets = reader.readArray(reader1 -> Secret.fromJson(reader1));
                    deserializedContainerDefinition.secrets = secrets;
                } else if ("startTimeout".equals(fieldName)) {
                    deserializedContainerDefinition.startTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("stopTimeout".equals(fieldName)) {
                    deserializedContainerDefinition.stopTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("systemControls".equals(fieldName)) {
                    List<SystemControl> systemControls = reader.readArray(reader1 -> SystemControl.fromJson(reader1));
                    deserializedContainerDefinition.systemControls = systemControls;
                } else if ("ulimits".equals(fieldName)) {
                    List<Ulimit> ulimits = reader.readArray(reader1 -> Ulimit.fromJson(reader1));
                    deserializedContainerDefinition.ulimits = ulimits;
                } else if ("user".equals(fieldName)) {
                    deserializedContainerDefinition.user = reader.getString();
                } else if ("volumesFrom".equals(fieldName)) {
                    List<VolumeFrom> volumesFrom = reader.readArray(reader1 -> VolumeFrom.fromJson(reader1));
                    deserializedContainerDefinition.volumesFrom = volumesFrom;
                } else if ("workingDirectory".equals(fieldName)) {
                    deserializedContainerDefinition.workingDirectory = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerDefinition;
        });
    }
}
