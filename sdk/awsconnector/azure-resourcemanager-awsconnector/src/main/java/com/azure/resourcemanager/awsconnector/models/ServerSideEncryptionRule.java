// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ServerSideEncryptionRule.
 */
@Fluent
public final class ServerSideEncryptionRule implements JsonSerializable<ServerSideEncryptionRule> {
    /*
     * Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new
     * objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true``
     * causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled. For more information, see
     * [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User
     * Guide*.
     */
    private Boolean bucketKeyEnabled;

    /*
     * Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request
     * doesn't specify any server-side encryption, this default encryption will be applied. Describes the default
     * server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any
     * server-side encryption, this default encryption will be applied. If you don't specify a customer managed key at
     * configuration, Amazon S3 automatically creates an AWS KMS key in your AWS account the first time that you add an
     * object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses this KMS key for SSE-KMS. For more
     * information, see [PUT Bucket
     * encryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html) in the *Amazon S3 API
     * Reference*.
     */
    private ServerSideEncryptionByDefault serverSideEncryptionByDefault;

    /**
     * Creates an instance of ServerSideEncryptionRule class.
     */
    public ServerSideEncryptionRule() {
    }

    /**
     * Get the bucketKeyEnabled property: Specifies whether Amazon S3 should use an S3 Bucket Key with server-side
     * encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the
     * ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is
     * not enabled. For more information, see [Amazon S3 Bucket
     * Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.
     * 
     * @return the bucketKeyEnabled value.
     */
    public Boolean bucketKeyEnabled() {
        return this.bucketKeyEnabled;
    }

    /**
     * Set the bucketKeyEnabled property: Specifies whether Amazon S3 should use an S3 Bucket Key with server-side
     * encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the
     * ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is
     * not enabled. For more information, see [Amazon S3 Bucket
     * Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.
     * 
     * @param bucketKeyEnabled the bucketKeyEnabled value to set.
     * @return the ServerSideEncryptionRule object itself.
     */
    public ServerSideEncryptionRule withBucketKeyEnabled(Boolean bucketKeyEnabled) {
        this.bucketKeyEnabled = bucketKeyEnabled;
        return this;
    }

    /**
     * Get the serverSideEncryptionByDefault property: Specifies the default server-side encryption to apply to new
     * objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default
     * encryption will be applied. Describes the default server-side encryption to apply to new objects in the bucket.
     * If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. If
     * you don't specify a customer managed key at configuration, Amazon S3 automatically creates an AWS KMS key in your
     * AWS account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses
     * this KMS key for SSE-KMS. For more information, see [PUT Bucket
     * encryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html) in the *Amazon S3 API
     * Reference*.
     * 
     * @return the serverSideEncryptionByDefault value.
     */
    public ServerSideEncryptionByDefault serverSideEncryptionByDefault() {
        return this.serverSideEncryptionByDefault;
    }

    /**
     * Set the serverSideEncryptionByDefault property: Specifies the default server-side encryption to apply to new
     * objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default
     * encryption will be applied. Describes the default server-side encryption to apply to new objects in the bucket.
     * If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. If
     * you don't specify a customer managed key at configuration, Amazon S3 automatically creates an AWS KMS key in your
     * AWS account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses
     * this KMS key for SSE-KMS. For more information, see [PUT Bucket
     * encryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html) in the *Amazon S3 API
     * Reference*.
     * 
     * @param serverSideEncryptionByDefault the serverSideEncryptionByDefault value to set.
     * @return the ServerSideEncryptionRule object itself.
     */
    public ServerSideEncryptionRule
        withServerSideEncryptionByDefault(ServerSideEncryptionByDefault serverSideEncryptionByDefault) {
        this.serverSideEncryptionByDefault = serverSideEncryptionByDefault;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serverSideEncryptionByDefault() != null) {
            serverSideEncryptionByDefault().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("bucketKeyEnabled", this.bucketKeyEnabled);
        jsonWriter.writeJsonField("serverSideEncryptionByDefault", this.serverSideEncryptionByDefault);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerSideEncryptionRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerSideEncryptionRule if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerSideEncryptionRule.
     */
    public static ServerSideEncryptionRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerSideEncryptionRule deserializedServerSideEncryptionRule = new ServerSideEncryptionRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucketKeyEnabled".equals(fieldName)) {
                    deserializedServerSideEncryptionRule.bucketKeyEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("serverSideEncryptionByDefault".equals(fieldName)) {
                    deserializedServerSideEncryptionRule.serverSideEncryptionByDefault
                        = ServerSideEncryptionByDefault.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerSideEncryptionRule;
        });
    }
}
