// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of ConnectorConfigResponse.
 */
@Fluent
public final class ConnectorConfigResponse implements JsonSerializable<ConnectorConfigResponse> {
    /*
     * <p>A unique code associated with the cluster for registration purposes.</p>
     */
    private String activationCode;

    /*
     * <p>The expiration time of the connected cluster. The cluster's YAML file must be applied through the native
     * provider.</p>
     */
    private OffsetDateTime activationExpiry;

    /*
     * <p>A unique ID associated with the cluster for registration purposes.</p>
     */
    private String activationId;

    /*
     * <p>The cluster's cloud service provider.</p>
     */
    private String provider;

    /*
     * <p>The Amazon Resource Name (ARN) of the role to communicate with services from the connected Kubernetes
     * cluster.</p>
     */
    private String roleArn;

    /**
     * Creates an instance of ConnectorConfigResponse class.
     */
    public ConnectorConfigResponse() {
    }

    /**
     * Get the activationCode property: &lt;p&gt;A unique code associated with the cluster for registration
     * purposes.&lt;/p&gt;.
     * 
     * @return the activationCode value.
     */
    public String activationCode() {
        return this.activationCode;
    }

    /**
     * Set the activationCode property: &lt;p&gt;A unique code associated with the cluster for registration
     * purposes.&lt;/p&gt;.
     * 
     * @param activationCode the activationCode value to set.
     * @return the ConnectorConfigResponse object itself.
     */
    public ConnectorConfigResponse withActivationCode(String activationCode) {
        this.activationCode = activationCode;
        return this;
    }

    /**
     * Get the activationExpiry property: &lt;p&gt;The expiration time of the connected cluster. The cluster's YAML file
     * must be applied through the native provider.&lt;/p&gt;.
     * 
     * @return the activationExpiry value.
     */
    public OffsetDateTime activationExpiry() {
        return this.activationExpiry;
    }

    /**
     * Set the activationExpiry property: &lt;p&gt;The expiration time of the connected cluster. The cluster's YAML file
     * must be applied through the native provider.&lt;/p&gt;.
     * 
     * @param activationExpiry the activationExpiry value to set.
     * @return the ConnectorConfigResponse object itself.
     */
    public ConnectorConfigResponse withActivationExpiry(OffsetDateTime activationExpiry) {
        this.activationExpiry = activationExpiry;
        return this;
    }

    /**
     * Get the activationId property: &lt;p&gt;A unique ID associated with the cluster for registration
     * purposes.&lt;/p&gt;.
     * 
     * @return the activationId value.
     */
    public String activationId() {
        return this.activationId;
    }

    /**
     * Set the activationId property: &lt;p&gt;A unique ID associated with the cluster for registration
     * purposes.&lt;/p&gt;.
     * 
     * @param activationId the activationId value to set.
     * @return the ConnectorConfigResponse object itself.
     */
    public ConnectorConfigResponse withActivationId(String activationId) {
        this.activationId = activationId;
        return this;
    }

    /**
     * Get the provider property: &lt;p&gt;The cluster's cloud service provider.&lt;/p&gt;.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: &lt;p&gt;The cluster's cloud service provider.&lt;/p&gt;.
     * 
     * @param provider the provider value to set.
     * @return the ConnectorConfigResponse object itself.
     */
    public ConnectorConfigResponse withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the roleArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the role to communicate with services from
     * the connected Kubernetes cluster.&lt;/p&gt;.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the role to communicate with services from
     * the connected Kubernetes cluster.&lt;/p&gt;.
     * 
     * @param roleArn the roleArn value to set.
     * @return the ConnectorConfigResponse object itself.
     */
    public ConnectorConfigResponse withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activationCode", this.activationCode);
        jsonWriter.writeStringField("activationExpiry",
            this.activationExpiry == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.activationExpiry));
        jsonWriter.writeStringField("activationId", this.activationId);
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("roleArn", this.roleArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorConfigResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorConfigResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectorConfigResponse.
     */
    public static ConnectorConfigResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorConfigResponse deserializedConnectorConfigResponse = new ConnectorConfigResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activationCode".equals(fieldName)) {
                    deserializedConnectorConfigResponse.activationCode = reader.getString();
                } else if ("activationExpiry".equals(fieldName)) {
                    deserializedConnectorConfigResponse.activationExpiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("activationId".equals(fieldName)) {
                    deserializedConnectorConfigResponse.activationId = reader.getString();
                } else if ("provider".equals(fieldName)) {
                    deserializedConnectorConfigResponse.provider = reader.getString();
                } else if ("roleArn".equals(fieldName)) {
                    deserializedConnectorConfigResponse.roleArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorConfigResponse;
        });
    }
}
