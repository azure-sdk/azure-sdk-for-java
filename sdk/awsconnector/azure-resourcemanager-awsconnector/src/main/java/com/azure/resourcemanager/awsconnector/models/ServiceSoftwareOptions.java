// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of ServiceSoftwareOptions.
 */
@Fluent
public final class ServiceSoftwareOptions implements JsonSerializable<ServiceSoftwareOptions> {
    /*
     * <p>The timestamp, in Epoch time, until which you can manually request a service software update. After this date,
     * we automatically update your service software.</p>
     */
    private OffsetDateTime automatedUpdateDate;

    /*
     * <p> True if you're able to cancel your service software version update. False if you can't cancel your service
     * software update.</p>
     */
    private Boolean cancellable;

    /*
     * <p>The current service software version present on the domain.</p>
     */
    private String currentVersion;

    /*
     * <p>A description of the service software update status.</p>
     */
    private String description;

    /*
     * <p>The new service software version, if one is available.</p>
     */
    private String newVersion;

    /*
     * <p>True if a service software is never automatically updated. False if a service software is automatically
     * updated after the automated update date.</p>
     */
    private Boolean optionalDeployment;

    /*
     * <p>True if you're able to update your service software version. False if you can't update your service software
     * version.</p>
     */
    private Boolean updateAvailable;

    /*
     * <p>The status of your service software update.</p>
     */
    private DeploymentStatusEnumValue updateStatus;

    /**
     * Creates an instance of ServiceSoftwareOptions class.
     */
    public ServiceSoftwareOptions() {
    }

    /**
     * Get the automatedUpdateDate property: &lt;p&gt;The timestamp, in Epoch time, until which you can manually request
     * a service software update. After this date, we automatically update your service software.&lt;/p&gt;.
     * 
     * @return the automatedUpdateDate value.
     */
    public OffsetDateTime automatedUpdateDate() {
        return this.automatedUpdateDate;
    }

    /**
     * Set the automatedUpdateDate property: &lt;p&gt;The timestamp, in Epoch time, until which you can manually request
     * a service software update. After this date, we automatically update your service software.&lt;/p&gt;.
     * 
     * @param automatedUpdateDate the automatedUpdateDate value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withAutomatedUpdateDate(OffsetDateTime automatedUpdateDate) {
        this.automatedUpdateDate = automatedUpdateDate;
        return this;
    }

    /**
     * Get the cancellable property: &lt;p&gt; True if you're able to cancel your service software version update. False
     * if you can't cancel your service software update.&lt;/p&gt;.
     * 
     * @return the cancellable value.
     */
    public Boolean cancellable() {
        return this.cancellable;
    }

    /**
     * Set the cancellable property: &lt;p&gt; True if you're able to cancel your service software version update. False
     * if you can't cancel your service software update.&lt;/p&gt;.
     * 
     * @param cancellable the cancellable value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withCancellable(Boolean cancellable) {
        this.cancellable = cancellable;
        return this;
    }

    /**
     * Get the currentVersion property: &lt;p&gt;The current service software version present on the domain.&lt;/p&gt;.
     * 
     * @return the currentVersion value.
     */
    public String currentVersion() {
        return this.currentVersion;
    }

    /**
     * Set the currentVersion property: &lt;p&gt;The current service software version present on the domain.&lt;/p&gt;.
     * 
     * @param currentVersion the currentVersion value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withCurrentVersion(String currentVersion) {
        this.currentVersion = currentVersion;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;A description of the service software update status.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description of the service software update status.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the newVersion property: &lt;p&gt;The new service software version, if one is available.&lt;/p&gt;.
     * 
     * @return the newVersion value.
     */
    public String newVersion() {
        return this.newVersion;
    }

    /**
     * Set the newVersion property: &lt;p&gt;The new service software version, if one is available.&lt;/p&gt;.
     * 
     * @param newVersion the newVersion value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withNewVersion(String newVersion) {
        this.newVersion = newVersion;
        return this;
    }

    /**
     * Get the optionalDeployment property: &lt;p&gt;True if a service software is never automatically updated. False if
     * a service software is automatically updated after the automated update date.&lt;/p&gt;.
     * 
     * @return the optionalDeployment value.
     */
    public Boolean optionalDeployment() {
        return this.optionalDeployment;
    }

    /**
     * Set the optionalDeployment property: &lt;p&gt;True if a service software is never automatically updated. False if
     * a service software is automatically updated after the automated update date.&lt;/p&gt;.
     * 
     * @param optionalDeployment the optionalDeployment value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withOptionalDeployment(Boolean optionalDeployment) {
        this.optionalDeployment = optionalDeployment;
        return this;
    }

    /**
     * Get the updateAvailable property: &lt;p&gt;True if you're able to update your service software version. False if
     * you can't update your service software version.&lt;/p&gt;.
     * 
     * @return the updateAvailable value.
     */
    public Boolean updateAvailable() {
        return this.updateAvailable;
    }

    /**
     * Set the updateAvailable property: &lt;p&gt;True if you're able to update your service software version. False if
     * you can't update your service software version.&lt;/p&gt;.
     * 
     * @param updateAvailable the updateAvailable value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withUpdateAvailable(Boolean updateAvailable) {
        this.updateAvailable = updateAvailable;
        return this;
    }

    /**
     * Get the updateStatus property: &lt;p&gt;The status of your service software update.&lt;/p&gt;.
     * 
     * @return the updateStatus value.
     */
    public DeploymentStatusEnumValue updateStatus() {
        return this.updateStatus;
    }

    /**
     * Set the updateStatus property: &lt;p&gt;The status of your service software update.&lt;/p&gt;.
     * 
     * @param updateStatus the updateStatus value to set.
     * @return the ServiceSoftwareOptions object itself.
     */
    public ServiceSoftwareOptions withUpdateStatus(DeploymentStatusEnumValue updateStatus) {
        this.updateStatus = updateStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (updateStatus() != null) {
            updateStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("automatedUpdateDate",
            this.automatedUpdateDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.automatedUpdateDate));
        jsonWriter.writeBooleanField("cancellable", this.cancellable);
        jsonWriter.writeStringField("currentVersion", this.currentVersion);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("newVersion", this.newVersion);
        jsonWriter.writeBooleanField("optionalDeployment", this.optionalDeployment);
        jsonWriter.writeBooleanField("updateAvailable", this.updateAvailable);
        jsonWriter.writeJsonField("updateStatus", this.updateStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceSoftwareOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceSoftwareOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceSoftwareOptions.
     */
    public static ServiceSoftwareOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceSoftwareOptions deserializedServiceSoftwareOptions = new ServiceSoftwareOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("automatedUpdateDate".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.automatedUpdateDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("cancellable".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.cancellable = reader.getNullable(JsonReader::getBoolean);
                } else if ("currentVersion".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.currentVersion = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.description = reader.getString();
                } else if ("newVersion".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.newVersion = reader.getString();
                } else if ("optionalDeployment".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.optionalDeployment = reader.getNullable(JsonReader::getBoolean);
                } else if ("updateAvailable".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.updateAvailable = reader.getNullable(JsonReader::getBoolean);
                } else if ("updateStatus".equals(fieldName)) {
                    deserializedServiceSoftwareOptions.updateStatus = DeploymentStatusEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceSoftwareOptions;
        });
    }
}
