// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FilterRule.
 */
@Fluent
public final class FilterRule implements JsonSerializable<FilterRule> {
    /*
     * The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The
     * maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information,
     * see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in
     * the *Amazon S3 User Guide*.
     */
    private String name;

    /*
     * The value that the filter searches for in object key names.
     */
    private String value;

    /**
     * Creates an instance of FilterRule class.
     */
    public FilterRule() {
    }

    /**
     * Get the name property: The object key name prefix or suffix identifying one or more objects to which the
     * filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not
     * supported. For more information, see [Configuring Event
     * Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The object key name prefix or suffix identifying one or more objects to which the
     * filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not
     * supported. For more information, see [Configuring Event
     * Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @param name the name value to set.
     * @return the FilterRule object itself.
     */
    public FilterRule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the value property: The value that the filter searches for in object key names.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The value that the filter searches for in object key names.
     * 
     * @param value the value value to set.
     * @return the FilterRule object itself.
     */
    public FilterRule withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterRule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the FilterRule.
     */
    public static FilterRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterRule deserializedFilterRule = new FilterRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedFilterRule.name = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedFilterRule.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterRule;
        });
    }
}
