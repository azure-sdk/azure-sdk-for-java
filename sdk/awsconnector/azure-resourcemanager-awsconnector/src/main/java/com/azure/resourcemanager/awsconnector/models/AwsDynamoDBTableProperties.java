// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsDynamoDBTable.
 */
@Fluent
public final class AwsDynamoDBTableProperties implements JsonSerializable<AwsDynamoDBTableProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * A list of attributes that describe the key schema for the table and indexes. This property is required to create
     * a DDB table. Update requires: [Some
     * interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-
     * behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
     */
    private List<AttributeDefinition> attributeDefinitions;

    /*
     * Specify how you are charged for read and write throughput and how you manage capacity. Valid values include: +
     * ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing
     * mode to [Provisioned
     * Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#
     * HowItWorks.ProvisionedThroughput.Manual). + ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for
     * unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand
     * Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#
     * HowItWorks.OnDemand). If not specified, the default is ``PROVISIONED``.
     */
    private String billingMode;

    /*
     * The settings used to enable or disable CloudWatch Contributor Insights for the specified table. The settings used
     * to enable or disable CloudWatch Contributor Insights.
     */
    private ContributorInsightsSpecification contributorInsightsSpecification;

    /*
     * Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or
     * process. This setting is disabled by default. For more information, see [Using deletion
     * protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#
     * WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
     */
    private Boolean deletionProtectionEnabled;

    /*
     * Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes. If you
     * update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds
     * with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can
     * take a long time, depending on the size of the table. You can't use the index or update the table until the
     * index's status is ``ACTIVE``. You can track its status by using the DynamoDB
     * [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command. If you
     * add or delete an index during an update, we recommend that you don't update any other resources. If your stack
     * fails to update and is rolled back while adding a new index, you must manually delete the index. Updates are not
     * supported. The following are exceptions: + If you update either the contributor insights specification or the
     * provisioned throughput values of global secondary indexes, you can update the table without interruption. + You
     * can delete or add one global secondary index without interruption. If you do both in the same update (for
     * example, by changing the index's logical ID), the update fails.
     */
    private List<GlobalSecondaryIndex> globalSecondaryIndexes;

    /*
     * Specifies the properties of data being imported from the S3 bucket source to the table. If you specify the
     * ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass``
     * property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have
     * ``UpdateTable`` permission. Specifies the properties of data being imported from the S3 bucket source to the
     * table.
     */
    private ImportSourceSpecification importSourceSpecification;

    /*
     * Specifies the attributes that make up the primary key for the table. The attributes in the ``KeySchema`` property
     * must also be defined in the ``AttributeDefinitions`` property.
     */
    private List<KeySchema> keySchema;

    /*
     * The Kinesis Data Streams configuration for the specified table. The Kinesis Data Streams configuration for the
     * specified table.
     */
    private KinesisStreamSpecification kinesisStreamSpecification;

    /*
     * Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is
     * scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
     */
    private List<LocalSecondaryIndex> localSecondaryIndexes;

    /*
     * The settings used to enable point in time recovery. The settings used to enable point in time recovery.
     */
    private PointInTimeRecoverySpecification pointInTimeRecoverySpecification;

    /*
     * Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and
     * ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see
     * [Amazon DynamoDB Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.
     * html). If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode``
     * as ``PAY_PER_REQUEST``, you cannot specify this property. Throughput for the specified table, which consists of
     * values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a
     * provisioned throughput structure, see [Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.
     * html).
     */
    private ProvisionedThroughput provisionedThroughput;

    /*
     * A resource-based policy document that contains permissions to add to the specified table. In a CFNshort template,
     * you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to
     * DDB. For more information about resource-based policies, see [Using resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). When you attach a
     * resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about
     * the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based
     * policy
     * considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     * Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a
     * table, its indexes, and stream. Resource-based policies let you define access permissions by specifying who has
     * access to each resource, and the actions they are allowed to perform on each resource. In a CFNshort template,
     * you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to
     * DDB. For more information about resource-based policies, see [Using resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). While defining
     * resource-based policies in your CFNshort templates, the following considerations apply: + The maximum size
     * supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating
     * the size of a policy against this limit. + Resource-based policies don't support [drift
     * detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#). If you
     * update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the
     * changes. + Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy
     * outside of the CFNshort template, the change won't be overwritten if there are no changes to the policy within
     * the template. For example, say that your template contains a resource-based policy, which you later update
     * outside of the template. If you don't make any changes to the policy in the template, the updated policy in DDB
     * won’t be synced with the policy in the template. Conversely, say that your template doesn’t contain a
     * resource-based policy, but you add a policy outside of the template. This policy won’t be removed from DDB as
     * long as you don’t add it to the template. When you add a policy to the template and update the stack, the
     * existing policy in DDB will be updated to match the one defined in the template. For a full list of all
     * considerations, see [Resource-based policy
     * considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     */
    private ResourcePolicy resourcePolicy;

    /*
     * Specifies the settings to enable server-side encryption. Represents the settings used to enable server-side
     * encryption.
     */
    private SseSpecification sseSpecification;

    /*
     * Property streamArn
     */
    private String streamArn;

    /*
     * The settings for the DDB table stream, which capture changes to items stored in the table. Represents the
     * DynamoDB Streams configuration for a table in DynamoDB.
     */
    private StreamSpecification streamSpecification;

    /*
     * The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
     */
    private String tableClass;

    /*
     * A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for
     * the table name. For more information, see [Name
     * Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). If you specify a
     * name, you cannot perform updates that require replacement of this resource. You can perform updates that require
     * no or some interruption. If you must replace the resource, specify a new name.
     */
    private String tableName;

    /*
     * An array of key-value pairs to apply to this resource. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     */
    private List<TagAutoGenerated8> tags;

    /*
     * Specifies the Time to Live (TTL) settings for the table. For detailed information about the limits in DynamoDB,
     * see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in
     * the Amazon DynamoDB Developer Guide. Represents the settings used to enable or disable Time to Live (TTL) for the
     * specified table.
     */
    private TimeToLiveSpecification timeToLiveSpecification;

    /**
     * Creates an instance of AwsDynamoDBTableProperties class.
     */
    public AwsDynamoDBTableProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the attributeDefinitions property: A list of attributes that describe the key schema for the table and
     * indexes. This property is required to create a DDB table. Update requires: [Some
     * interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt).
     * Replacement if you edit an existing AttributeDefinition.
     * 
     * @return the attributeDefinitions value.
     */
    public List<AttributeDefinition> attributeDefinitions() {
        return this.attributeDefinitions;
    }

    /**
     * Set the attributeDefinitions property: A list of attributes that describe the key schema for the table and
     * indexes. This property is required to create a DDB table. Update requires: [Some
     * interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt).
     * Replacement if you edit an existing AttributeDefinition.
     * 
     * @param attributeDefinitions the attributeDefinitions value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withAttributeDefinitions(List<AttributeDefinition> attributeDefinitions) {
        this.attributeDefinitions = attributeDefinitions;
        return this;
    }

    /**
     * Get the billingMode property: Specify how you are charged for read and write throughput and how you manage
     * capacity. Valid values include: + ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads.
     * ``PROVISIONED`` sets the billing mode to [Provisioned
     * Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
     * + ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST``
     * sets the billing mode to [On-Demand
     * Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
     * If not specified, the default is ``PROVISIONED``.
     * 
     * @return the billingMode value.
     */
    public String billingMode() {
        return this.billingMode;
    }

    /**
     * Set the billingMode property: Specify how you are charged for read and write throughput and how you manage
     * capacity. Valid values include: + ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads.
     * ``PROVISIONED`` sets the billing mode to [Provisioned
     * Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
     * + ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST``
     * sets the billing mode to [On-Demand
     * Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
     * If not specified, the default is ``PROVISIONED``.
     * 
     * @param billingMode the billingMode value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withBillingMode(String billingMode) {
        this.billingMode = billingMode;
        return this;
    }

    /**
     * Get the contributorInsightsSpecification property: The settings used to enable or disable CloudWatch Contributor
     * Insights for the specified table. The settings used to enable or disable CloudWatch Contributor Insights.
     * 
     * @return the contributorInsightsSpecification value.
     */
    public ContributorInsightsSpecification contributorInsightsSpecification() {
        return this.contributorInsightsSpecification;
    }

    /**
     * Set the contributorInsightsSpecification property: The settings used to enable or disable CloudWatch Contributor
     * Insights for the specified table. The settings used to enable or disable CloudWatch Contributor Insights.
     * 
     * @param contributorInsightsSpecification the contributorInsightsSpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties
        withContributorInsightsSpecification(ContributorInsightsSpecification contributorInsightsSpecification) {
        this.contributorInsightsSpecification = contributorInsightsSpecification;
        return this;
    }

    /**
     * Get the deletionProtectionEnabled property: Determines if a table is protected from deletion. When enabled, the
     * table cannot be deleted by any user or process. This setting is disabled by default. For more information, see
     * [Using deletion
     * protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection)
     * in the *Developer Guide*.
     * 
     * @return the deletionProtectionEnabled value.
     */
    public Boolean deletionProtectionEnabled() {
        return this.deletionProtectionEnabled;
    }

    /**
     * Set the deletionProtectionEnabled property: Determines if a table is protected from deletion. When enabled, the
     * table cannot be deleted by any user or process. This setting is disabled by default. For more information, see
     * [Using deletion
     * protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection)
     * in the *Developer Guide*.
     * 
     * @param deletionProtectionEnabled the deletionProtectionEnabled value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withDeletionProtectionEnabled(Boolean deletionProtectionEnabled) {
        this.deletionProtectionEnabled = deletionProtectionEnabled;
        return this;
    }

    /**
     * Get the globalSecondaryIndexes property: Global secondary indexes to be created on the table. You can create up
     * to 20 global secondary indexes. If you update a table to include a new global secondary index, CFNlong initiates
     * the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete
     * creation because the backfilling phase can take a long time, depending on the size of the table. You can't use
     * the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the
     * DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
     * If you add or delete an index during an update, we recommend that you don't update any other resources. If your
     * stack fails to update and is rolled back while adding a new index, you must manually delete the index. Updates
     * are not supported. The following are exceptions: + If you update either the contributor insights specification or
     * the provisioned throughput values of global secondary indexes, you can update the table without interruption. +
     * You can delete or add one global secondary index without interruption. If you do both in the same update (for
     * example, by changing the index's logical ID), the update fails.
     * 
     * @return the globalSecondaryIndexes value.
     */
    public List<GlobalSecondaryIndex> globalSecondaryIndexes() {
        return this.globalSecondaryIndexes;
    }

    /**
     * Set the globalSecondaryIndexes property: Global secondary indexes to be created on the table. You can create up
     * to 20 global secondary indexes. If you update a table to include a new global secondary index, CFNlong initiates
     * the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete
     * creation because the backfilling phase can take a long time, depending on the size of the table. You can't use
     * the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the
     * DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
     * If you add or delete an index during an update, we recommend that you don't update any other resources. If your
     * stack fails to update and is rolled back while adding a new index, you must manually delete the index. Updates
     * are not supported. The following are exceptions: + If you update either the contributor insights specification or
     * the provisioned throughput values of global secondary indexes, you can update the table without interruption. +
     * You can delete or add one global secondary index without interruption. If you do both in the same update (for
     * example, by changing the index's logical ID), the update fails.
     * 
     * @param globalSecondaryIndexes the globalSecondaryIndexes value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withGlobalSecondaryIndexes(List<GlobalSecondaryIndex> globalSecondaryIndexes) {
        this.globalSecondaryIndexes = globalSecondaryIndexes;
        return this;
    }

    /**
     * Get the importSourceSpecification property: Specifies the properties of data being imported from the S3 bucket
     * source to the table. If you specify the ``ImportSourceSpecification`` property, and also specify either the
     * ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM
     * entity creating/updating stack must have ``UpdateTable`` permission. Specifies the properties of data being
     * imported from the S3 bucket source to the table.
     * 
     * @return the importSourceSpecification value.
     */
    public ImportSourceSpecification importSourceSpecification() {
        return this.importSourceSpecification;
    }

    /**
     * Set the importSourceSpecification property: Specifies the properties of data being imported from the S3 bucket
     * source to the table. If you specify the ``ImportSourceSpecification`` property, and also specify either the
     * ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM
     * entity creating/updating stack must have ``UpdateTable`` permission. Specifies the properties of data being
     * imported from the S3 bucket source to the table.
     * 
     * @param importSourceSpecification the importSourceSpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties
        withImportSourceSpecification(ImportSourceSpecification importSourceSpecification) {
        this.importSourceSpecification = importSourceSpecification;
        return this;
    }

    /**
     * Get the keySchema property: Specifies the attributes that make up the primary key for the table. The attributes
     * in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
     * 
     * @return the keySchema value.
     */
    public List<KeySchema> keySchema() {
        return this.keySchema;
    }

    /**
     * Set the keySchema property: Specifies the attributes that make up the primary key for the table. The attributes
     * in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
     * 
     * @param keySchema the keySchema value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withKeySchema(List<KeySchema> keySchema) {
        this.keySchema = keySchema;
        return this;
    }

    /**
     * Get the kinesisStreamSpecification property: The Kinesis Data Streams configuration for the specified table. The
     * Kinesis Data Streams configuration for the specified table.
     * 
     * @return the kinesisStreamSpecification value.
     */
    public KinesisStreamSpecification kinesisStreamSpecification() {
        return this.kinesisStreamSpecification;
    }

    /**
     * Set the kinesisStreamSpecification property: The Kinesis Data Streams configuration for the specified table. The
     * Kinesis Data Streams configuration for the specified table.
     * 
     * @param kinesisStreamSpecification the kinesisStreamSpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties
        withKinesisStreamSpecification(KinesisStreamSpecification kinesisStreamSpecification) {
        this.kinesisStreamSpecification = kinesisStreamSpecification;
        return this;
    }

    /**
     * Get the localSecondaryIndexes property: Local secondary indexes to be created on the table. You can create up to
     * 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to
     * 10 gigabytes.
     * 
     * @return the localSecondaryIndexes value.
     */
    public List<LocalSecondaryIndex> localSecondaryIndexes() {
        return this.localSecondaryIndexes;
    }

    /**
     * Set the localSecondaryIndexes property: Local secondary indexes to be created on the table. You can create up to
     * 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to
     * 10 gigabytes.
     * 
     * @param localSecondaryIndexes the localSecondaryIndexes value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withLocalSecondaryIndexes(List<LocalSecondaryIndex> localSecondaryIndexes) {
        this.localSecondaryIndexes = localSecondaryIndexes;
        return this;
    }

    /**
     * Get the pointInTimeRecoverySpecification property: The settings used to enable point in time recovery. The
     * settings used to enable point in time recovery.
     * 
     * @return the pointInTimeRecoverySpecification value.
     */
    public PointInTimeRecoverySpecification pointInTimeRecoverySpecification() {
        return this.pointInTimeRecoverySpecification;
    }

    /**
     * Set the pointInTimeRecoverySpecification property: The settings used to enable point in time recovery. The
     * settings used to enable point in time recovery.
     * 
     * @param pointInTimeRecoverySpecification the pointInTimeRecoverySpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties
        withPointInTimeRecoverySpecification(PointInTimeRecoverySpecification pointInTimeRecoverySpecification) {
        this.pointInTimeRecoverySpecification = pointInTimeRecoverySpecification;
        return this;
    }

    /**
     * Get the provisionedThroughput property: Throughput for the specified table, which consists of values for
     * ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned
     * throughput structure, see [Amazon DynamoDB Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     * If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as
     * ``PAY_PER_REQUEST``, you cannot specify this property. Throughput for the specified table, which consists of
     * values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a
     * provisioned throughput structure, see [Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     * 
     * @return the provisionedThroughput value.
     */
    public ProvisionedThroughput provisionedThroughput() {
        return this.provisionedThroughput;
    }

    /**
     * Set the provisionedThroughput property: Throughput for the specified table, which consists of values for
     * ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned
     * throughput structure, see [Amazon DynamoDB Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     * If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as
     * ``PAY_PER_REQUEST``, you cannot specify this property. Throughput for the specified table, which consists of
     * values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a
     * provisioned throughput structure, see [Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     * 
     * @param provisionedThroughput the provisionedThroughput value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withProvisionedThroughput(ProvisionedThroughput provisionedThroughput) {
        this.provisionedThroughput = provisionedThroughput;
        return this;
    }

    /**
     * Get the resourcePolicy property: A resource-based policy document that contains permissions to add to the
     * specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort
     * converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using
     * resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). When you attach a
     * resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about
     * the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based
     * policy
     * considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     * Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a
     * table, its indexes, and stream. Resource-based policies let you define access permissions by specifying who has
     * access to each resource, and the actions they are allowed to perform on each resource. In a CFNshort template,
     * you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to
     * DDB. For more information about resource-based policies, see [Using resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). While defining
     * resource-based policies in your CFNshort templates, the following considerations apply: + The maximum size
     * supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating
     * the size of a policy against this limit. + Resource-based policies don't support [drift
     * detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#). If you
     * update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the
     * changes. + Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy
     * outside of the CFNshort template, the change won't be overwritten if there are no changes to the policy within
     * the template. For example, say that your template contains a resource-based policy, which you later update
     * outside of the template. If you don't make any changes to the policy in the template, the updated policy in DDB
     * won’t be synced with the policy in the template. Conversely, say that your template doesn’t contain a
     * resource-based policy, but you add a policy outside of the template. This policy won’t be removed from DDB as
     * long as you don’t add it to the template. When you add a policy to the template and update the stack, the
     * existing policy in DDB will be updated to match the one defined in the template. For a full list of all
     * considerations, see [Resource-based policy
     * considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     * 
     * @return the resourcePolicy value.
     */
    public ResourcePolicy resourcePolicy() {
        return this.resourcePolicy;
    }

    /**
     * Set the resourcePolicy property: A resource-based policy document that contains permissions to add to the
     * specified table. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort
     * converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using
     * resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). When you attach a
     * resource-based policy while creating a table, the policy creation is *strongly consistent*. For information about
     * the considerations that you should keep in mind while attaching a resource-based policy, see [Resource-based
     * policy
     * considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     * Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a
     * table, its indexes, and stream. Resource-based policies let you define access permissions by specifying who has
     * access to each resource, and the actions they are allowed to perform on each resource. In a CFNshort template,
     * you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to
     * DDB. For more information about resource-based policies, see [Using resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html). While defining
     * resource-based policies in your CFNshort templates, the following considerations apply: + The maximum size
     * supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating
     * the size of a policy against this limit. + Resource-based policies don't support [drift
     * detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#). If you
     * update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the
     * changes. + Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy
     * outside of the CFNshort template, the change won't be overwritten if there are no changes to the policy within
     * the template. For example, say that your template contains a resource-based policy, which you later update
     * outside of the template. If you don't make any changes to the policy in the template, the updated policy in DDB
     * won’t be synced with the policy in the template. Conversely, say that your template doesn’t contain a
     * resource-based policy, but you add a policy outside of the template. This policy won’t be removed from DDB as
     * long as you don’t add it to the template. When you add a policy to the template and update the stack, the
     * existing policy in DDB will be updated to match the one defined in the template. For a full list of all
     * considerations, see [Resource-based policy
     * considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     * 
     * @param resourcePolicy the resourcePolicy value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withResourcePolicy(ResourcePolicy resourcePolicy) {
        this.resourcePolicy = resourcePolicy;
        return this;
    }

    /**
     * Get the sseSpecification property: Specifies the settings to enable server-side encryption. Represents the
     * settings used to enable server-side encryption.
     * 
     * @return the sseSpecification value.
     */
    public SseSpecification sseSpecification() {
        return this.sseSpecification;
    }

    /**
     * Set the sseSpecification property: Specifies the settings to enable server-side encryption. Represents the
     * settings used to enable server-side encryption.
     * 
     * @param sseSpecification the sseSpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withSseSpecification(SseSpecification sseSpecification) {
        this.sseSpecification = sseSpecification;
        return this;
    }

    /**
     * Get the streamArn property: Property streamArn.
     * 
     * @return the streamArn value.
     */
    public String streamArn() {
        return this.streamArn;
    }

    /**
     * Set the streamArn property: Property streamArn.
     * 
     * @param streamArn the streamArn value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withStreamArn(String streamArn) {
        this.streamArn = streamArn;
        return this;
    }

    /**
     * Get the streamSpecification property: The settings for the DDB table stream, which capture changes to items
     * stored in the table. Represents the DynamoDB Streams configuration for a table in DynamoDB.
     * 
     * @return the streamSpecification value.
     */
    public StreamSpecification streamSpecification() {
        return this.streamSpecification;
    }

    /**
     * Set the streamSpecification property: The settings for the DDB table stream, which capture changes to items
     * stored in the table. Represents the DynamoDB Streams configuration for a table in DynamoDB.
     * 
     * @param streamSpecification the streamSpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withStreamSpecification(StreamSpecification streamSpecification) {
        this.streamSpecification = streamSpecification;
        return this;
    }

    /**
     * Get the tableClass property: The table class of the new table. Valid values are ``STANDARD`` and
     * ``STANDARD_INFREQUENT_ACCESS``.
     * 
     * @return the tableClass value.
     */
    public String tableClass() {
        return this.tableClass;
    }

    /**
     * Set the tableClass property: The table class of the new table. Valid values are ``STANDARD`` and
     * ``STANDARD_INFREQUENT_ACCESS``.
     * 
     * @param tableClass the tableClass value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withTableClass(String tableClass) {
        this.tableClass = tableClass;
        return this;
    }

    /**
     * Get the tableName property: A name for the table. If you don't specify a name, CFNlong generates a unique
     * physical ID and uses that ID for the table name. For more information, see [Name
     * Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). If you specify a
     * name, you cannot perform updates that require replacement of this resource. You can perform updates that require
     * no or some interruption. If you must replace the resource, specify a new name.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: A name for the table. If you don't specify a name, CFNlong generates a unique
     * physical ID and uses that ID for the table name. For more information, see [Name
     * Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html). If you specify a
     * name, you cannot perform updates that require replacement of this resource. You can perform updates that require
     * no or some interruption. If you must replace the resource, specify a new name.
     * 
     * @param tableName the tableName value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the tags property: An array of key-value pairs to apply to this resource. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated8> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of key-value pairs to apply to this resource. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     * 
     * @param tags the tags value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withTags(List<TagAutoGenerated8> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the timeToLiveSpecification property: Specifies the Time to Live (TTL) settings for the table. For detailed
     * information about the limits in DynamoDB, see [Limits in Amazon
     * DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB
     * Developer Guide. Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
     * 
     * @return the timeToLiveSpecification value.
     */
    public TimeToLiveSpecification timeToLiveSpecification() {
        return this.timeToLiveSpecification;
    }

    /**
     * Set the timeToLiveSpecification property: Specifies the Time to Live (TTL) settings for the table. For detailed
     * information about the limits in DynamoDB, see [Limits in Amazon
     * DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB
     * Developer Guide. Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
     * 
     * @param timeToLiveSpecification the timeToLiveSpecification value to set.
     * @return the AwsDynamoDBTableProperties object itself.
     */
    public AwsDynamoDBTableProperties withTimeToLiveSpecification(TimeToLiveSpecification timeToLiveSpecification) {
        this.timeToLiveSpecification = timeToLiveSpecification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributeDefinitions() != null) {
            attributeDefinitions().forEach(e -> e.validate());
        }
        if (contributorInsightsSpecification() != null) {
            contributorInsightsSpecification().validate();
        }
        if (globalSecondaryIndexes() != null) {
            globalSecondaryIndexes().forEach(e -> e.validate());
        }
        if (importSourceSpecification() != null) {
            importSourceSpecification().validate();
        }
        if (keySchema() != null) {
            keySchema().forEach(e -> e.validate());
        }
        if (kinesisStreamSpecification() != null) {
            kinesisStreamSpecification().validate();
        }
        if (localSecondaryIndexes() != null) {
            localSecondaryIndexes().forEach(e -> e.validate());
        }
        if (pointInTimeRecoverySpecification() != null) {
            pointInTimeRecoverySpecification().validate();
        }
        if (provisionedThroughput() != null) {
            provisionedThroughput().validate();
        }
        if (resourcePolicy() != null) {
            resourcePolicy().validate();
        }
        if (sseSpecification() != null) {
            sseSpecification().validate();
        }
        if (streamSpecification() != null) {
            streamSpecification().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (timeToLiveSpecification() != null) {
            timeToLiveSpecification().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeArrayField("attributeDefinitions", this.attributeDefinitions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("billingMode", this.billingMode);
        jsonWriter.writeJsonField("contributorInsightsSpecification", this.contributorInsightsSpecification);
        jsonWriter.writeBooleanField("deletionProtectionEnabled", this.deletionProtectionEnabled);
        jsonWriter.writeArrayField("globalSecondaryIndexes", this.globalSecondaryIndexes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("importSourceSpecification", this.importSourceSpecification);
        jsonWriter.writeArrayField("keySchema", this.keySchema, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("kinesisStreamSpecification", this.kinesisStreamSpecification);
        jsonWriter.writeArrayField("localSecondaryIndexes", this.localSecondaryIndexes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("pointInTimeRecoverySpecification", this.pointInTimeRecoverySpecification);
        jsonWriter.writeJsonField("provisionedThroughput", this.provisionedThroughput);
        jsonWriter.writeJsonField("resourcePolicy", this.resourcePolicy);
        jsonWriter.writeJsonField("sseSpecification", this.sseSpecification);
        jsonWriter.writeStringField("streamArn", this.streamArn);
        jsonWriter.writeJsonField("streamSpecification", this.streamSpecification);
        jsonWriter.writeStringField("tableClass", this.tableClass);
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("timeToLiveSpecification", this.timeToLiveSpecification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsDynamoDBTableProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsDynamoDBTableProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsDynamoDBTableProperties.
     */
    public static AwsDynamoDBTableProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsDynamoDBTableProperties deserializedAwsDynamoDBTableProperties = new AwsDynamoDBTableProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.arn = reader.getString();
                } else if ("attributeDefinitions".equals(fieldName)) {
                    List<AttributeDefinition> attributeDefinitions
                        = reader.readArray(reader1 -> AttributeDefinition.fromJson(reader1));
                    deserializedAwsDynamoDBTableProperties.attributeDefinitions = attributeDefinitions;
                } else if ("billingMode".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.billingMode = reader.getString();
                } else if ("contributorInsightsSpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.contributorInsightsSpecification
                        = ContributorInsightsSpecification.fromJson(reader);
                } else if ("deletionProtectionEnabled".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.deletionProtectionEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("globalSecondaryIndexes".equals(fieldName)) {
                    List<GlobalSecondaryIndex> globalSecondaryIndexes
                        = reader.readArray(reader1 -> GlobalSecondaryIndex.fromJson(reader1));
                    deserializedAwsDynamoDBTableProperties.globalSecondaryIndexes = globalSecondaryIndexes;
                } else if ("importSourceSpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.importSourceSpecification
                        = ImportSourceSpecification.fromJson(reader);
                } else if ("keySchema".equals(fieldName)) {
                    List<KeySchema> keySchema = reader.readArray(reader1 -> KeySchema.fromJson(reader1));
                    deserializedAwsDynamoDBTableProperties.keySchema = keySchema;
                } else if ("kinesisStreamSpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.kinesisStreamSpecification
                        = KinesisStreamSpecification.fromJson(reader);
                } else if ("localSecondaryIndexes".equals(fieldName)) {
                    List<LocalSecondaryIndex> localSecondaryIndexes
                        = reader.readArray(reader1 -> LocalSecondaryIndex.fromJson(reader1));
                    deserializedAwsDynamoDBTableProperties.localSecondaryIndexes = localSecondaryIndexes;
                } else if ("pointInTimeRecoverySpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.pointInTimeRecoverySpecification
                        = PointInTimeRecoverySpecification.fromJson(reader);
                } else if ("provisionedThroughput".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.provisionedThroughput
                        = ProvisionedThroughput.fromJson(reader);
                } else if ("resourcePolicy".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.resourcePolicy = ResourcePolicy.fromJson(reader);
                } else if ("sseSpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.sseSpecification = SseSpecification.fromJson(reader);
                } else if ("streamArn".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.streamArn = reader.getString();
                } else if ("streamSpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.streamSpecification = StreamSpecification.fromJson(reader);
                } else if ("tableClass".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.tableClass = reader.getString();
                } else if ("tableName".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.tableName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated8> tags = reader.readArray(reader1 -> TagAutoGenerated8.fromJson(reader1));
                    deserializedAwsDynamoDBTableProperties.tags = tags;
                } else if ("timeToLiveSpecification".equals(fieldName)) {
                    deserializedAwsDynamoDBTableProperties.timeToLiveSpecification
                        = TimeToLiveSpecification.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsDynamoDBTableProperties;
        });
    }
}
