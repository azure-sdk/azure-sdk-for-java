// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LambdaAuthorizerConfig.
 */
@Fluent
public final class LambdaAuthorizerConfig implements JsonSerializable<LambdaAuthorizerConfig> {
    /*
     * <p>The number of seconds a response should be cached for. The default is 0 seconds, which disables caching. If
     * you don't specify a value for <code>authorizerResultTtlInSeconds</code>, the default value is used. The maximum
     * value is one hour (3600 seconds). The Lambda function can override this by returning a <code>ttlOverride</code>
     * key in its response.</p>
     */
    private Integer authorizerResultTtlInSeconds;

    /*
     * <p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard
     * Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must
     * have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this
     * is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda
     * add-permission --function-name 'arn:aws:lambda:us-east-2:111122223333:function:my-function' --statement-id
     * 'appsync' --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>
     */
    private String authorizerUri;

    /*
     * <p>A regular expression for validation of tokens before the Lambda function is called.</p>
     */
    private String identityValidationExpression;

    /**
     * Creates an instance of LambdaAuthorizerConfig class.
     */
    public LambdaAuthorizerConfig() {
    }

    /**
     * Get the authorizerResultTtlInSeconds property: &lt;p&gt;The number of seconds a response should be cached for.
     * The default is 0 seconds, which disables caching. If you don't specify a value for
     * &lt;code&gt;authorizerResultTtlInSeconds&lt;/code&gt;, the default value is used. The maximum value is one hour
     * (3600 seconds). The Lambda function can override this by returning a &lt;code&gt;ttlOverride&lt;/code&gt; key in
     * its response.&lt;/p&gt;.
     * 
     * @return the authorizerResultTtlInSeconds value.
     */
    public Integer authorizerResultTtlInSeconds() {
        return this.authorizerResultTtlInSeconds;
    }

    /**
     * Set the authorizerResultTtlInSeconds property: &lt;p&gt;The number of seconds a response should be cached for.
     * The default is 0 seconds, which disables caching. If you don't specify a value for
     * &lt;code&gt;authorizerResultTtlInSeconds&lt;/code&gt;, the default value is used. The maximum value is one hour
     * (3600 seconds). The Lambda function can override this by returning a &lt;code&gt;ttlOverride&lt;/code&gt; key in
     * its response.&lt;/p&gt;.
     * 
     * @param authorizerResultTtlInSeconds the authorizerResultTtlInSeconds value to set.
     * @return the LambdaAuthorizerConfig object itself.
     */
    public LambdaAuthorizerConfig withAuthorizerResultTtlInSeconds(Integer authorizerResultTtlInSeconds) {
        this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
        return this;
    }

    /**
     * Get the authorizerUri property: &lt;p&gt;The Amazon Resource Name (ARN) of the Lambda function to be called for
     * authorization. This can be a standard Lambda ARN, a version ARN (&lt;code&gt;.../v3&lt;/code&gt;), or an alias
     * ARN. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Note&lt;/b&gt;: This Lambda function must have the following resource-based
     * policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the
     * Command Line Interface (CLI), run the following:&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws lambda add-permission
     * --function-name 'arn:aws:lambda:us-east-2:111122223333:function:my-function' --statement-id 'appsync' --principal
     * appsync.amazonaws.com --action lambda:InvokeFunction&lt;/code&gt; &lt;/p&gt;.
     * 
     * @return the authorizerUri value.
     */
    public String authorizerUri() {
        return this.authorizerUri;
    }

    /**
     * Set the authorizerUri property: &lt;p&gt;The Amazon Resource Name (ARN) of the Lambda function to be called for
     * authorization. This can be a standard Lambda ARN, a version ARN (&lt;code&gt;.../v3&lt;/code&gt;), or an alias
     * ARN. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Note&lt;/b&gt;: This Lambda function must have the following resource-based
     * policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the
     * Command Line Interface (CLI), run the following:&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws lambda add-permission
     * --function-name 'arn:aws:lambda:us-east-2:111122223333:function:my-function' --statement-id 'appsync' --principal
     * appsync.amazonaws.com --action lambda:InvokeFunction&lt;/code&gt; &lt;/p&gt;.
     * 
     * @param authorizerUri the authorizerUri value to set.
     * @return the LambdaAuthorizerConfig object itself.
     */
    public LambdaAuthorizerConfig withAuthorizerUri(String authorizerUri) {
        this.authorizerUri = authorizerUri;
        return this;
    }

    /**
     * Get the identityValidationExpression property: &lt;p&gt;A regular expression for validation of tokens before the
     * Lambda function is called.&lt;/p&gt;.
     * 
     * @return the identityValidationExpression value.
     */
    public String identityValidationExpression() {
        return this.identityValidationExpression;
    }

    /**
     * Set the identityValidationExpression property: &lt;p&gt;A regular expression for validation of tokens before the
     * Lambda function is called.&lt;/p&gt;.
     * 
     * @param identityValidationExpression the identityValidationExpression value to set.
     * @return the LambdaAuthorizerConfig object itself.
     */
    public LambdaAuthorizerConfig withIdentityValidationExpression(String identityValidationExpression) {
        this.identityValidationExpression = identityValidationExpression;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("authorizerResultTtlInSeconds", this.authorizerResultTtlInSeconds);
        jsonWriter.writeStringField("authorizerUri", this.authorizerUri);
        jsonWriter.writeStringField("identityValidationExpression", this.identityValidationExpression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LambdaAuthorizerConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LambdaAuthorizerConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LambdaAuthorizerConfig.
     */
    public static LambdaAuthorizerConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LambdaAuthorizerConfig deserializedLambdaAuthorizerConfig = new LambdaAuthorizerConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizerResultTtlInSeconds".equals(fieldName)) {
                    deserializedLambdaAuthorizerConfig.authorizerResultTtlInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("authorizerUri".equals(fieldName)) {
                    deserializedLambdaAuthorizerConfig.authorizerUri = reader.getString();
                } else if ("identityValidationExpression".equals(fieldName)) {
                    deserializedLambdaAuthorizerConfig.identityValidationExpression = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLambdaAuthorizerConfig;
        });
    }
}
