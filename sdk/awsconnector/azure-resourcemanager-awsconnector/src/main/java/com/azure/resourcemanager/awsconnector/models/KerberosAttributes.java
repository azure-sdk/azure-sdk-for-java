// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of KerberosAttributes.
 */
@Fluent
public final class KerberosAttributes implements JsonSerializable<KerberosAttributes> {
    /*
     * <p>The Active Directory password for <code>ADDomainJoinUser</code>.</p>
     */
    private String adDomainJoinPassword;

    /*
     * <p>Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient
     * privileges to join resources to the domain.</p>
     */
    private String adDomainJoinUser;

    /*
     * <p>Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal
     * password, which must be identical across realms.</p>
     */
    private String crossRealmTrustPrincipalPassword;

    /*
     * <p>The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains
     * Kerberos principals, password policies, and keytabs for the cluster.</p>
     */
    private String kdcAdminPassword;

    /*
     * <p>The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>.
     * </p>
     */
    private String realm;

    /**
     * Creates an instance of KerberosAttributes class.
     */
    public KerberosAttributes() {
    }

    /**
     * Get the adDomainJoinPassword property: &lt;p&gt;The Active Directory password for
     * &lt;code&gt;ADDomainJoinUser&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the adDomainJoinPassword value.
     */
    public String adDomainJoinPassword() {
        return this.adDomainJoinPassword;
    }

    /**
     * Set the adDomainJoinPassword property: &lt;p&gt;The Active Directory password for
     * &lt;code&gt;ADDomainJoinUser&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param adDomainJoinPassword the adDomainJoinPassword value to set.
     * @return the KerberosAttributes object itself.
     */
    public KerberosAttributes withAdDomainJoinPassword(String adDomainJoinPassword) {
        this.adDomainJoinPassword = adDomainJoinPassword;
        return this;
    }

    /**
     * Get the adDomainJoinUser property: &lt;p&gt;Required only when establishing a cross-realm trust with an Active
     * Directory domain. A user with sufficient privileges to join resources to the domain.&lt;/p&gt;.
     * 
     * @return the adDomainJoinUser value.
     */
    public String adDomainJoinUser() {
        return this.adDomainJoinUser;
    }

    /**
     * Set the adDomainJoinUser property: &lt;p&gt;Required only when establishing a cross-realm trust with an Active
     * Directory domain. A user with sufficient privileges to join resources to the domain.&lt;/p&gt;.
     * 
     * @param adDomainJoinUser the adDomainJoinUser value to set.
     * @return the KerberosAttributes object itself.
     */
    public KerberosAttributes withAdDomainJoinUser(String adDomainJoinUser) {
        this.adDomainJoinUser = adDomainJoinUser;
        return this;
    }

    /**
     * Get the crossRealmTrustPrincipalPassword property: &lt;p&gt;Required only when establishing a cross-realm trust
     * with a KDC in a different realm. The cross-realm principal password, which must be identical across
     * realms.&lt;/p&gt;.
     * 
     * @return the crossRealmTrustPrincipalPassword value.
     */
    public String crossRealmTrustPrincipalPassword() {
        return this.crossRealmTrustPrincipalPassword;
    }

    /**
     * Set the crossRealmTrustPrincipalPassword property: &lt;p&gt;Required only when establishing a cross-realm trust
     * with a KDC in a different realm. The cross-realm principal password, which must be identical across
     * realms.&lt;/p&gt;.
     * 
     * @param crossRealmTrustPrincipalPassword the crossRealmTrustPrincipalPassword value to set.
     * @return the KerberosAttributes object itself.
     */
    public KerberosAttributes withCrossRealmTrustPrincipalPassword(String crossRealmTrustPrincipalPassword) {
        this.crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPassword;
        return this;
    }

    /**
     * Get the kdcAdminPassword property: &lt;p&gt;The password used within the cluster for the kadmin service on the
     * cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the
     * cluster.&lt;/p&gt;.
     * 
     * @return the kdcAdminPassword value.
     */
    public String kdcAdminPassword() {
        return this.kdcAdminPassword;
    }

    /**
     * Set the kdcAdminPassword property: &lt;p&gt;The password used within the cluster for the kadmin service on the
     * cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the
     * cluster.&lt;/p&gt;.
     * 
     * @param kdcAdminPassword the kdcAdminPassword value to set.
     * @return the KerberosAttributes object itself.
     */
    public KerberosAttributes withKdcAdminPassword(String kdcAdminPassword) {
        this.kdcAdminPassword = kdcAdminPassword;
        return this;
    }

    /**
     * Get the realm property: &lt;p&gt;The name of the Kerberos realm to which all nodes in a cluster belong. For
     * example, &lt;code&gt;EC2.INTERNAL&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the realm value.
     */
    public String realm() {
        return this.realm;
    }

    /**
     * Set the realm property: &lt;p&gt;The name of the Kerberos realm to which all nodes in a cluster belong. For
     * example, &lt;code&gt;EC2.INTERNAL&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param realm the realm value to set.
     * @return the KerberosAttributes object itself.
     */
    public KerberosAttributes withRealm(String realm) {
        this.realm = realm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adDomainJoinPassword", this.adDomainJoinPassword);
        jsonWriter.writeStringField("adDomainJoinUser", this.adDomainJoinUser);
        jsonWriter.writeStringField("crossRealmTrustPrincipalPassword", this.crossRealmTrustPrincipalPassword);
        jsonWriter.writeStringField("kdcAdminPassword", this.kdcAdminPassword);
        jsonWriter.writeStringField("realm", this.realm);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KerberosAttributes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KerberosAttributes if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the KerberosAttributes.
     */
    public static KerberosAttributes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KerberosAttributes deserializedKerberosAttributes = new KerberosAttributes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adDomainJoinPassword".equals(fieldName)) {
                    deserializedKerberosAttributes.adDomainJoinPassword = reader.getString();
                } else if ("adDomainJoinUser".equals(fieldName)) {
                    deserializedKerberosAttributes.adDomainJoinUser = reader.getString();
                } else if ("crossRealmTrustPrincipalPassword".equals(fieldName)) {
                    deserializedKerberosAttributes.crossRealmTrustPrincipalPassword = reader.getString();
                } else if ("kdcAdminPassword".equals(fieldName)) {
                    deserializedKerberosAttributes.kdcAdminPassword = reader.getString();
                } else if ("realm".equals(fieldName)) {
                    deserializedKerberosAttributes.realm = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKerberosAttributes;
        });
    }
}
