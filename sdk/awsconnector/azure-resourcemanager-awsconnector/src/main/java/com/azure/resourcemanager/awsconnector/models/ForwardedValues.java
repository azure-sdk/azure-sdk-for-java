// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ForwardedValues.
 */
@Fluent
public final class ForwardedValues implements JsonSerializable<ForwardedValues> {
    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating
     * cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin
     * but not include them in the cache key, use an origin request policy. For more information, see [Creating origin
     * request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that
     * specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more
     * information about forwarding cookies to the origin, see [How CloudFront Forwards, Caches, and Logs
     * Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon
     * CloudFront Developer Guide*. This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For
     * more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin
     * but not include them in the cache key, use an origin request policy. For more information, see [Creating origin
     * request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that
     * specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more
     * information about forwarding cookies to the origin, see [How CloudFront Forwards, Caches, and Logs
     * Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private Cookies cookies;

    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. If you want to include headers in the cache key, use a cache policy. For more information, see [Creating
     * cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin
     * but not include them in the cache key, use an origin request policy. For more information, see [Creating origin
     * request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that
     * specifies the ``Headers``, if any, that you want CloudFront to forward to the origin for this cache behavior
     * (whitelisted headers). For the headers that you specify, CloudFront also caches separate versions of a specified
     * object that is based on the header values in viewer requests. For more information, see [Caching Content Based on
     * Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html) in the
     * *Amazon CloudFront Developer Guide*.
     */
    private List<String> headers;

    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. If you want to include query strings in the cache key, use a cache policy. For more information, see
     * [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the
     * origin but not include them in the cache key, use an origin request policy. For more information, see [Creating
     * origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. Indicates whether you
     * want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache
     * based on the query string parameters. CloudFront behavior depends on the value of ``QueryString`` and on the
     * values that you specify for ``QueryStringCacheKeys``, if any: If you specify true for ``QueryString`` and you
     * don't specify any values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the
     * origin and caches based on all query string parameters. Depending on how many query string parameters and values
     * you have, this can adversely affect performance because CloudFront must forward more requests to the origin. If
     * you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys``, CloudFront
     * forwards all query string parameters to the origin, but it only caches based on the query string parameters that
     * you specify. If you specify false for ``QueryString``, CloudFront doesn't forward any query string parameters to
     * the origin, and doesn't cache based on query string parameters. For more information, see [Configuring CloudFront
     * to Cache Based on Query String
     * Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the
     * *Amazon CloudFront Developer Guide*.
     */
    private Boolean queryString;

    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. If you want to include query strings in the cache key, use a cache policy. For more information, see
     * [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the
     * origin but not include them in the cache key, use an origin request policy. For more information, see [Creating
     * origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. A complex type that
     * contains information about the query string parameters that you want CloudFront to use for caching for this cache
     * behavior.
     */
    private List<String> queryStringCacheKeys;

    /**
     * Creates an instance of ForwardedValues class.
     */
    public ForwardedValues() {
    }

    /**
     * Get the cookies property: This field is deprecated. We recommend that you use a cache policy or an origin request
     * policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies whether you want CloudFront to forward
     * cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see
     * [How CloudFront Forwards, Caches, and Logs
     * Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon
     * CloudFront Developer Guide*. This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For
     * more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies whether you want CloudFront to forward
     * cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see
     * [How CloudFront Forwards, Caches, and Logs
     * Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the cookies value.
     */
    public Cookies cookies() {
        return this.cookies;
    }

    /**
     * Set the cookies property: This field is deprecated. We recommend that you use a cache policy or an origin request
     * policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies whether you want CloudFront to forward
     * cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see
     * [How CloudFront Forwards, Caches, and Logs
     * Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon
     * CloudFront Developer Guide*. This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For
     * more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies whether you want CloudFront to forward
     * cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see
     * [How CloudFront Forwards, Caches, and Logs
     * Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param cookies the cookies value to set.
     * @return the ForwardedValues object itself.
     */
    public ForwardedValues withCookies(Cookies cookies) {
        this.cookies = cookies;
        return this;
    }

    /**
     * Get the headers property: This field is deprecated. We recommend that you use a cache policy or an origin request
     * policy instead of this field. If you want to include headers in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies the ``Headers``, if any, that you want
     * CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you
     * specify, CloudFront also caches separate versions of a specified object that is based on the header values in
     * viewer requests. For more information, see [Caching Content Based on Request
     * Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the headers value.
     */
    public List<String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: This field is deprecated. We recommend that you use a cache policy or an origin request
     * policy instead of this field. If you want to include headers in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send headers to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that specifies the ``Headers``, if any, that you want
     * CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you
     * specify, CloudFront also caches separate versions of a specified object that is based on the header values in
     * viewer requests. For more information, see [Caching Content Based on Request
     * Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param headers the headers value to set.
     * @return the ForwardedValues object itself.
     */
    public ForwardedValues withHeaders(List<String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the queryString property: This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. If you want to include query strings in the cache key, use a cache policy.
     * For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them
     * in the cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. Indicates whether you want CloudFront to forward query strings to the
     * origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront
     * behavior depends on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``,
     * if any: If you specify true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``,
     * CloudFront forwards all query string parameters to the origin and caches based on all query string parameters.
     * Depending on how many query string parameters and values you have, this can adversely affect performance because
     * CloudFront must forward more requests to the origin. If you specify true for ``QueryString`` and you specify one
     * or more values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the origin, but
     * it only caches based on the query string parameters that you specify. If you specify false for ``QueryString``,
     * CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string
     * parameters. For more information, see [Configuring CloudFront to Cache Based on Query String
     * Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @return the queryString value.
     */
    public Boolean queryString() {
        return this.queryString;
    }

    /**
     * Set the queryString property: This field is deprecated. We recommend that you use a cache policy or an origin
     * request policy instead of this field. If you want to include query strings in the cache key, use a cache policy.
     * For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them
     * in the cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. Indicates whether you want CloudFront to forward query strings to the
     * origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront
     * behavior depends on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``,
     * if any: If you specify true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``,
     * CloudFront forwards all query string parameters to the origin and caches based on all query string parameters.
     * Depending on how many query string parameters and values you have, this can adversely affect performance because
     * CloudFront must forward more requests to the origin. If you specify true for ``QueryString`` and you specify one
     * or more values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the origin, but
     * it only caches based on the query string parameters that you specify. If you specify false for ``QueryString``,
     * CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string
     * parameters. For more information, see [Configuring CloudFront to Cache Based on Query String
     * Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @param queryString the queryString value to set.
     * @return the ForwardedValues object itself.
     */
    public ForwardedValues withQueryString(Boolean queryString) {
        this.queryString = queryString;
        return this;
    }

    /**
     * Get the queryStringCacheKeys property: This field is deprecated. We recommend that you use a cache policy or an
     * origin request policy instead of this field. If you want to include query strings in the cache key, use a cache
     * policy. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them
     * in the cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that contains information about the query string
     * parameters that you want CloudFront to use for caching for this cache behavior.
     * 
     * @return the queryStringCacheKeys value.
     */
    public List<String> queryStringCacheKeys() {
        return this.queryStringCacheKeys;
    }

    /**
     * Set the queryStringCacheKeys property: This field is deprecated. We recommend that you use a cache policy or an
     * origin request policy instead of this field. If you want to include query strings in the cache key, use a cache
     * policy. For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send query strings to the origin but not include them
     * in the cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. A complex type that contains information about the query string
     * parameters that you want CloudFront to use for caching for this cache behavior.
     * 
     * @param queryStringCacheKeys the queryStringCacheKeys value to set.
     * @return the ForwardedValues object itself.
     */
    public ForwardedValues withQueryStringCacheKeys(List<String> queryStringCacheKeys) {
        this.queryStringCacheKeys = queryStringCacheKeys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cookies() != null) {
            cookies().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("cookies", this.cookies);
        jsonWriter.writeArrayField("headers", this.headers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("queryString", this.queryString);
        jsonWriter.writeArrayField("queryStringCacheKeys", this.queryStringCacheKeys,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ForwardedValues from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ForwardedValues if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ForwardedValues.
     */
    public static ForwardedValues fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ForwardedValues deserializedForwardedValues = new ForwardedValues();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cookies".equals(fieldName)) {
                    deserializedForwardedValues.cookies = Cookies.fromJson(reader);
                } else if ("headers".equals(fieldName)) {
                    List<String> headers = reader.readArray(reader1 -> reader1.getString());
                    deserializedForwardedValues.headers = headers;
                } else if ("queryString".equals(fieldName)) {
                    deserializedForwardedValues.queryString = reader.getNullable(JsonReader::getBoolean);
                } else if ("queryStringCacheKeys".equals(fieldName)) {
                    List<String> queryStringCacheKeys = reader.readArray(reader1 -> reader1.getString());
                    deserializedForwardedValues.queryStringCacheKeys = queryStringCacheKeys;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedForwardedValues;
        });
    }
}
