// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ReplicationSubnetGroup.
 */
@Fluent
public final class ReplicationSubnetGroup implements JsonSerializable<ReplicationSubnetGroup> {
    /*
     * <p>A description for the replication subnet group.</p>
     */
    private String replicationSubnetGroupDescription;

    /*
     * <p>The identifier of the replication instance subnet group.</p>
     */
    private String replicationSubnetGroupIdentifier;

    /*
     * <p>The status of the subnet group.</p>
     */
    private String subnetGroupStatus;

    /*
     * <p>The subnets that are in the subnet group.</p>
     */
    private List<Subnet> subnets;

    /*
     * <p>The IP addressing protocol supported by the subnet group. This is used by a replication instance with values
     * such as IPv4 only or Dual-stack that supports both IPv4 and IPv6 addressing. IPv6 only is not yet supported.</p>
     */
    private List<String> supportedNetworkTypes;

    /*
     * <p>The ID of the VPC.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of ReplicationSubnetGroup class.
     */
    public ReplicationSubnetGroup() {
    }

    /**
     * Get the replicationSubnetGroupDescription property: &lt;p&gt;A description for the replication subnet
     * group.&lt;/p&gt;.
     * 
     * @return the replicationSubnetGroupDescription value.
     */
    public String replicationSubnetGroupDescription() {
        return this.replicationSubnetGroupDescription;
    }

    /**
     * Set the replicationSubnetGroupDescription property: &lt;p&gt;A description for the replication subnet
     * group.&lt;/p&gt;.
     * 
     * @param replicationSubnetGroupDescription the replicationSubnetGroupDescription value to set.
     * @return the ReplicationSubnetGroup object itself.
     */
    public ReplicationSubnetGroup withReplicationSubnetGroupDescription(String replicationSubnetGroupDescription) {
        this.replicationSubnetGroupDescription = replicationSubnetGroupDescription;
        return this;
    }

    /**
     * Get the replicationSubnetGroupIdentifier property: &lt;p&gt;The identifier of the replication instance subnet
     * group.&lt;/p&gt;.
     * 
     * @return the replicationSubnetGroupIdentifier value.
     */
    public String replicationSubnetGroupIdentifier() {
        return this.replicationSubnetGroupIdentifier;
    }

    /**
     * Set the replicationSubnetGroupIdentifier property: &lt;p&gt;The identifier of the replication instance subnet
     * group.&lt;/p&gt;.
     * 
     * @param replicationSubnetGroupIdentifier the replicationSubnetGroupIdentifier value to set.
     * @return the ReplicationSubnetGroup object itself.
     */
    public ReplicationSubnetGroup withReplicationSubnetGroupIdentifier(String replicationSubnetGroupIdentifier) {
        this.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier;
        return this;
    }

    /**
     * Get the subnetGroupStatus property: &lt;p&gt;The status of the subnet group.&lt;/p&gt;.
     * 
     * @return the subnetGroupStatus value.
     */
    public String subnetGroupStatus() {
        return this.subnetGroupStatus;
    }

    /**
     * Set the subnetGroupStatus property: &lt;p&gt;The status of the subnet group.&lt;/p&gt;.
     * 
     * @param subnetGroupStatus the subnetGroupStatus value to set.
     * @return the ReplicationSubnetGroup object itself.
     */
    public ReplicationSubnetGroup withSubnetGroupStatus(String subnetGroupStatus) {
        this.subnetGroupStatus = subnetGroupStatus;
        return this;
    }

    /**
     * Get the subnets property: &lt;p&gt;The subnets that are in the subnet group.&lt;/p&gt;.
     * 
     * @return the subnets value.
     */
    public List<Subnet> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: &lt;p&gt;The subnets that are in the subnet group.&lt;/p&gt;.
     * 
     * @param subnets the subnets value to set.
     * @return the ReplicationSubnetGroup object itself.
     */
    public ReplicationSubnetGroup withSubnets(List<Subnet> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the supportedNetworkTypes property: &lt;p&gt;The IP addressing protocol supported by the subnet group. This
     * is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6
     * addressing. IPv6 only is not yet supported.&lt;/p&gt;.
     * 
     * @return the supportedNetworkTypes value.
     */
    public List<String> supportedNetworkTypes() {
        return this.supportedNetworkTypes;
    }

    /**
     * Set the supportedNetworkTypes property: &lt;p&gt;The IP addressing protocol supported by the subnet group. This
     * is used by a replication instance with values such as IPv4 only or Dual-stack that supports both IPv4 and IPv6
     * addressing. IPv6 only is not yet supported.&lt;/p&gt;.
     * 
     * @param supportedNetworkTypes the supportedNetworkTypes value to set.
     * @return the ReplicationSubnetGroup object itself.
     */
    public ReplicationSubnetGroup withSupportedNetworkTypes(List<String> supportedNetworkTypes) {
        this.supportedNetworkTypes = supportedNetworkTypes;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID of the VPC.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID of the VPC.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the ReplicationSubnetGroup object itself.
     */
    public ReplicationSubnetGroup withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("replicationSubnetGroupDescription", this.replicationSubnetGroupDescription);
        jsonWriter.writeStringField("replicationSubnetGroupIdentifier", this.replicationSubnetGroupIdentifier);
        jsonWriter.writeStringField("subnetGroupStatus", this.subnetGroupStatus);
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("supportedNetworkTypes", this.supportedNetworkTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationSubnetGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationSubnetGroup if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationSubnetGroup.
     */
    public static ReplicationSubnetGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationSubnetGroup deserializedReplicationSubnetGroup = new ReplicationSubnetGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("replicationSubnetGroupDescription".equals(fieldName)) {
                    deserializedReplicationSubnetGroup.replicationSubnetGroupDescription = reader.getString();
                } else if ("replicationSubnetGroupIdentifier".equals(fieldName)) {
                    deserializedReplicationSubnetGroup.replicationSubnetGroupIdentifier = reader.getString();
                } else if ("subnetGroupStatus".equals(fieldName)) {
                    deserializedReplicationSubnetGroup.subnetGroupStatus = reader.getString();
                } else if ("subnets".equals(fieldName)) {
                    List<Subnet> subnets = reader.readArray(reader1 -> Subnet.fromJson(reader1));
                    deserializedReplicationSubnetGroup.subnets = subnets;
                } else if ("supportedNetworkTypes".equals(fieldName)) {
                    List<String> supportedNetworkTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedReplicationSubnetGroup.supportedNetworkTypes = supportedNetworkTypes;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedReplicationSubnetGroup.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationSubnetGroup;
        });
    }
}
