// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of DeploymentTargets.
 */
@Fluent
public final class DeploymentTargets implements JsonSerializable<DeploymentTargets> {
    /*
     * The filter type you want to apply on organizational units and accounts.
     */
    private DeploymentTargetsAccountFilterType accountFilterType;

    /*
     * AWS accounts that you want to create stack instances in the specified Region(s) for.
     */
    private List<String> accounts;

    /*
     * Returns the value of the AccountsUrl property.
     */
    private String accountsUrl;

    /*
     * The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
     */
    private List<String> organizationalUnitIds;

    /**
     * Creates an instance of DeploymentTargets class.
     */
    public DeploymentTargets() {
    }

    /**
     * Get the accountFilterType property: The filter type you want to apply on organizational units and accounts.
     * 
     * @return the accountFilterType value.
     */
    public DeploymentTargetsAccountFilterType accountFilterType() {
        return this.accountFilterType;
    }

    /**
     * Set the accountFilterType property: The filter type you want to apply on organizational units and accounts.
     * 
     * @param accountFilterType the accountFilterType value to set.
     * @return the DeploymentTargets object itself.
     */
    public DeploymentTargets withAccountFilterType(DeploymentTargetsAccountFilterType accountFilterType) {
        this.accountFilterType = accountFilterType;
        return this;
    }

    /**
     * Get the accounts property: AWS accounts that you want to create stack instances in the specified Region(s) for.
     * 
     * @return the accounts value.
     */
    public List<String> accounts() {
        return this.accounts;
    }

    /**
     * Set the accounts property: AWS accounts that you want to create stack instances in the specified Region(s) for.
     * 
     * @param accounts the accounts value to set.
     * @return the DeploymentTargets object itself.
     */
    public DeploymentTargets withAccounts(List<String> accounts) {
        this.accounts = accounts;
        return this;
    }

    /**
     * Get the accountsUrl property: Returns the value of the AccountsUrl property.
     * 
     * @return the accountsUrl value.
     */
    public String accountsUrl() {
        return this.accountsUrl;
    }

    /**
     * Set the accountsUrl property: Returns the value of the AccountsUrl property.
     * 
     * @param accountsUrl the accountsUrl value to set.
     * @return the DeploymentTargets object itself.
     */
    public DeploymentTargets withAccountsUrl(String accountsUrl) {
        this.accountsUrl = accountsUrl;
        return this;
    }

    /**
     * Get the organizationalUnitIds property: The organization root ID or organizational unit (OU) IDs to which
     * StackSets deploys.
     * 
     * @return the organizationalUnitIds value.
     */
    public List<String> organizationalUnitIds() {
        return this.organizationalUnitIds;
    }

    /**
     * Set the organizationalUnitIds property: The organization root ID or organizational unit (OU) IDs to which
     * StackSets deploys.
     * 
     * @param organizationalUnitIds the organizationalUnitIds value to set.
     * @return the DeploymentTargets object itself.
     */
    public DeploymentTargets withOrganizationalUnitIds(List<String> organizationalUnitIds) {
        this.organizationalUnitIds = organizationalUnitIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accountFilterType",
            this.accountFilterType == null ? null : this.accountFilterType.toString());
        jsonWriter.writeArrayField("accounts", this.accounts, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("accountsUrl", this.accountsUrl);
        jsonWriter.writeArrayField("organizationalUnitIds", this.organizationalUnitIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentTargets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentTargets if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentTargets.
     */
    public static DeploymentTargets fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentTargets deserializedDeploymentTargets = new DeploymentTargets();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountFilterType".equals(fieldName)) {
                    deserializedDeploymentTargets.accountFilterType
                        = DeploymentTargetsAccountFilterType.fromString(reader.getString());
                } else if ("accounts".equals(fieldName)) {
                    List<String> accounts = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeploymentTargets.accounts = accounts;
                } else if ("accountsUrl".equals(fieldName)) {
                    deserializedDeploymentTargets.accountsUrl = reader.getString();
                } else if ("organizationalUnitIds".equals(fieldName)) {
                    List<String> organizationalUnitIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeploymentTargets.organizationalUnitIds = organizationalUnitIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentTargets;
        });
    }
}
