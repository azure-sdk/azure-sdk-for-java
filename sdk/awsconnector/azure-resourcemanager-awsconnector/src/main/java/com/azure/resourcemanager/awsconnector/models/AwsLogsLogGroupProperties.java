// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsLogsLogGroup.
 */
@Fluent
public final class AwsLogsLogGroupProperties implements JsonSerializable<AwsLogsLogGroupProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * Creates a data protection policy and assigns it to the log group. A data protection policy can help safeguard
     * sensitive data that's ingested by the log group by auditing and masking the sensitive log data. When a user who
     * does not have permission to view masked data views a log event that includes masked data, the sensitive data is
     * replaced by asterisks. For more information, including a list of types of data that can be audited and masked,
     * see [Protect sensitive log data with
     * masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
     */
    private Object dataProtectionPolicy;

    /*
     * The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To associate an KMS key with the
     * log group, specify the ARN of that KMS key here. If you do so, ingested data is encrypted using this key. This
     * association is stored as long as the data encrypted with the KMS key is still within CWL. This enables CWL to
     * decrypt this data whenever it is requested. If you attempt to associate a KMS key with the log group but the KMS
     * key doesn't exist or is deactivated, you will receive an ``InvalidParameterException`` error. Log group data is
     * always encrypted in CWL. If you omit this key, the encryption does not use KMS. For more information, see
     * [Encrypt log data in using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)
     */
    private String kmsKeyId;

    /*
     * Specifies the log group class for this log group. There are two classes: + The ``Standard`` log class supports
     * all CWL features. + The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs.
     * For details about the features supported by each class, see [Log
     * classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
     */
    private LogGroupClass logGroupClass;

    /*
     * The name of the log group. If you don't specify a name, CFNlong generates a unique ID for the log group.
     */
    private String logGroupName;

    /*
     * The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30,
     * 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so
     * that its log events do not expire, use
     * [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/
     * API_DeleteRetentionPolicy.html).
     */
    private Integer retentionInDays;

    /*
     * An array of key-value pairs to apply to the log group. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     */
    private List<TagAutoGenerated39> tags;

    /**
     * Creates an instance of AwsLogsLogGroupProperties class.
     */
    public AwsLogsLogGroupProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the dataProtectionPolicy property: Creates a data protection policy and assigns it to the log group. A data
     * protection policy can help safeguard sensitive data that's ingested by the log group by auditing and masking the
     * sensitive log data. When a user who does not have permission to view masked data views a log event that includes
     * masked data, the sensitive data is replaced by asterisks. For more information, including a list of types of data
     * that can be audited and masked, see [Protect sensitive log data with
     * masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
     * 
     * @return the dataProtectionPolicy value.
     */
    public Object dataProtectionPolicy() {
        return this.dataProtectionPolicy;
    }

    /**
     * Set the dataProtectionPolicy property: Creates a data protection policy and assigns it to the log group. A data
     * protection policy can help safeguard sensitive data that's ingested by the log group by auditing and masking the
     * sensitive log data. When a user who does not have permission to view masked data views a log event that includes
     * masked data, the sensitive data is replaced by asterisks. For more information, including a list of types of data
     * that can be audited and masked, see [Protect sensitive log data with
     * masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
     * 
     * @param dataProtectionPolicy the dataProtectionPolicy value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withDataProtectionPolicy(Object dataProtectionPolicy) {
        this.dataProtectionPolicy = dataProtectionPolicy;
        return this;
    }

    /**
     * Get the kmsKeyId property: The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To
     * associate an KMS key with the log group, specify the ARN of that KMS key here. If you do so, ingested data is
     * encrypted using this key. This association is stored as long as the data encrypted with the KMS key is still
     * within CWL. This enables CWL to decrypt this data whenever it is requested. If you attempt to associate a KMS key
     * with the log group but the KMS key doesn't exist or is deactivated, you will receive an
     * ``InvalidParameterException`` error. Log group data is always encrypted in CWL. If you omit this key, the
     * encryption does not use KMS. For more information, see [Encrypt log data in
     * using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html).
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. To
     * associate an KMS key with the log group, specify the ARN of that KMS key here. If you do so, ingested data is
     * encrypted using this key. This association is stored as long as the data encrypted with the KMS key is still
     * within CWL. This enables CWL to decrypt this data whenever it is requested. If you attempt to associate a KMS key
     * with the log group but the KMS key doesn't exist or is deactivated, you will receive an
     * ``InvalidParameterException`` error. Log group data is always encrypted in CWL. If you omit this key, the
     * encryption does not use KMS. For more information, see [Encrypt log data in
     * using](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html).
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the logGroupClass property: Specifies the log group class for this log group. There are two classes: + The
     * ``Standard`` log class supports all CWL features. + The ``Infrequent Access`` log class supports a subset of CWL
     * features and incurs lower costs. For details about the features supported by each class, see [Log
     * classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html).
     * 
     * @return the logGroupClass value.
     */
    public LogGroupClass logGroupClass() {
        return this.logGroupClass;
    }

    /**
     * Set the logGroupClass property: Specifies the log group class for this log group. There are two classes: + The
     * ``Standard`` log class supports all CWL features. + The ``Infrequent Access`` log class supports a subset of CWL
     * features and incurs lower costs. For details about the features supported by each class, see [Log
     * classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html).
     * 
     * @param logGroupClass the logGroupClass value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withLogGroupClass(LogGroupClass logGroupClass) {
        this.logGroupClass = logGroupClass;
        return this;
    }

    /**
     * Get the logGroupName property: The name of the log group. If you don't specify a name, CFNlong generates a unique
     * ID for the log group.
     * 
     * @return the logGroupName value.
     */
    public String logGroupName() {
        return this.logGroupName;
    }

    /**
     * Set the logGroupName property: The name of the log group. If you don't specify a name, CFNlong generates a unique
     * ID for the log group.
     * 
     * @param logGroupName the logGroupName value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withLogGroupName(String logGroupName) {
        this.logGroupName = logGroupName;
        return this;
    }

    /**
     * Get the retentionInDays property: The number of days to retain the log events in the specified log group.
     * Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922,
     * 3288, and 3653. To set a log group so that its log events do not expire, use
     * [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
     * 
     * @return the retentionInDays value.
     */
    public Integer retentionInDays() {
        return this.retentionInDays;
    }

    /**
     * Set the retentionInDays property: The number of days to retain the log events in the specified log group.
     * Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922,
     * 3288, and 3653. To set a log group so that its log events do not expire, use
     * [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
     * 
     * @param retentionInDays the retentionInDays value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withRetentionInDays(Integer retentionInDays) {
        this.retentionInDays = retentionInDays;
        return this;
    }

    /**
     * Get the tags property: An array of key-value pairs to apply to the log group. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated39> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of key-value pairs to apply to the log group. For more information, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     * 
     * @param tags the tags value to set.
     * @return the AwsLogsLogGroupProperties object itself.
     */
    public AwsLogsLogGroupProperties withTags(List<TagAutoGenerated39> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeUntypedField("dataProtectionPolicy", this.dataProtectionPolicy);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("logGroupClass", this.logGroupClass == null ? null : this.logGroupClass.toString());
        jsonWriter.writeStringField("logGroupName", this.logGroupName);
        jsonWriter.writeNumberField("retentionInDays", this.retentionInDays);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsLogsLogGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsLogsLogGroupProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsLogsLogGroupProperties.
     */
    public static AwsLogsLogGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsLogsLogGroupProperties deserializedAwsLogsLogGroupProperties = new AwsLogsLogGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsLogsLogGroupProperties.arn = reader.getString();
                } else if ("dataProtectionPolicy".equals(fieldName)) {
                    deserializedAwsLogsLogGroupProperties.dataProtectionPolicy = reader.readUntyped();
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsLogsLogGroupProperties.kmsKeyId = reader.getString();
                } else if ("logGroupClass".equals(fieldName)) {
                    deserializedAwsLogsLogGroupProperties.logGroupClass = LogGroupClass.fromString(reader.getString());
                } else if ("logGroupName".equals(fieldName)) {
                    deserializedAwsLogsLogGroupProperties.logGroupName = reader.getString();
                } else if ("retentionInDays".equals(fieldName)) {
                    deserializedAwsLogsLogGroupProperties.retentionInDays = reader.getNullable(JsonReader::getInt);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated39> tags = reader.readArray(reader1 -> TagAutoGenerated39.fromJson(reader1));
                    deserializedAwsLogsLogGroupProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsLogsLogGroupProperties;
        });
    }
}
