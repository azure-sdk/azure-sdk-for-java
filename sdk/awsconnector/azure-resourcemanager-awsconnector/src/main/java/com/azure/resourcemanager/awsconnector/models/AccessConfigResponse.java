// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AccessConfigResponse.
 */
@Fluent
public final class AccessConfigResponse implements JsonSerializable<AccessConfigResponse> {
    /*
     * <p>The current authentication mode of the cluster.</p>
     */
    private AuthenticationModeEnumValue authenticationMode;

    /*
     * <p>Specifies whether or not the cluster creator IAM principal was set as a cluster admin access entry during
     * cluster creation time.</p>
     */
    private Boolean bootstrapClusterCreatorAdminPermissions;

    /**
     * Creates an instance of AccessConfigResponse class.
     */
    public AccessConfigResponse() {
    }

    /**
     * Get the authenticationMode property: &lt;p&gt;The current authentication mode of the cluster.&lt;/p&gt;.
     * 
     * @return the authenticationMode value.
     */
    public AuthenticationModeEnumValue authenticationMode() {
        return this.authenticationMode;
    }

    /**
     * Set the authenticationMode property: &lt;p&gt;The current authentication mode of the cluster.&lt;/p&gt;.
     * 
     * @param authenticationMode the authenticationMode value to set.
     * @return the AccessConfigResponse object itself.
     */
    public AccessConfigResponse withAuthenticationMode(AuthenticationModeEnumValue authenticationMode) {
        this.authenticationMode = authenticationMode;
        return this;
    }

    /**
     * Get the bootstrapClusterCreatorAdminPermissions property: &lt;p&gt;Specifies whether or not the cluster creator
     * IAM principal was set as a cluster admin access entry during cluster creation time.&lt;/p&gt;.
     * 
     * @return the bootstrapClusterCreatorAdminPermissions value.
     */
    public Boolean bootstrapClusterCreatorAdminPermissions() {
        return this.bootstrapClusterCreatorAdminPermissions;
    }

    /**
     * Set the bootstrapClusterCreatorAdminPermissions property: &lt;p&gt;Specifies whether or not the cluster creator
     * IAM principal was set as a cluster admin access entry during cluster creation time.&lt;/p&gt;.
     * 
     * @param bootstrapClusterCreatorAdminPermissions the bootstrapClusterCreatorAdminPermissions value to set.
     * @return the AccessConfigResponse object itself.
     */
    public AccessConfigResponse
        withBootstrapClusterCreatorAdminPermissions(Boolean bootstrapClusterCreatorAdminPermissions) {
        this.bootstrapClusterCreatorAdminPermissions = bootstrapClusterCreatorAdminPermissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authenticationMode() != null) {
            authenticationMode().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authenticationMode", this.authenticationMode);
        jsonWriter.writeBooleanField("bootstrapClusterCreatorAdminPermissions",
            this.bootstrapClusterCreatorAdminPermissions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessConfigResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessConfigResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessConfigResponse.
     */
    public static AccessConfigResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessConfigResponse deserializedAccessConfigResponse = new AccessConfigResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationMode".equals(fieldName)) {
                    deserializedAccessConfigResponse.authenticationMode = AuthenticationModeEnumValue.fromJson(reader);
                } else if ("bootstrapClusterCreatorAdminPermissions".equals(fieldName)) {
                    deserializedAccessConfigResponse.bootstrapClusterCreatorAdminPermissions
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessConfigResponse;
        });
    }
}
