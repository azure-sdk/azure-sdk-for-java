// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ModifyingProperties.
 */
@Fluent
public final class ModifyingProperties implements JsonSerializable<ModifyingProperties> {
    /*
     * <p>The current value of the domain property that is being modified.</p>
     */
    private String activeValue;

    /*
     * <p>The name of the property that is currently being modified.</p>
     */
    private String name;

    /*
     * <p>The value that the property that is currently being modified will eventually have.</p>
     */
    private String pendingValue;

    /*
     * <p>The type of value that is currently being modified. Properties can have two types:</p> <ul> <li> <p>
     * <code>PLAIN_TEXT</code>: Contain direct values such as '1', 'True', or 'c5.large.search'.</p> </li> <li> <p>
     * <code>STRINGIFIED_JSON</code>: Contain content in JSON format, such as {'Enabled':'True'}'.</p> </li> </ul>
     */
    private PropertyValueTypeEnumValue valueType;

    /**
     * Creates an instance of ModifyingProperties class.
     */
    public ModifyingProperties() {
    }

    /**
     * Get the activeValue property: &lt;p&gt;The current value of the domain property that is being
     * modified.&lt;/p&gt;.
     * 
     * @return the activeValue value.
     */
    public String activeValue() {
        return this.activeValue;
    }

    /**
     * Set the activeValue property: &lt;p&gt;The current value of the domain property that is being
     * modified.&lt;/p&gt;.
     * 
     * @param activeValue the activeValue value to set.
     * @return the ModifyingProperties object itself.
     */
    public ModifyingProperties withActiveValue(String activeValue) {
        this.activeValue = activeValue;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name of the property that is currently being modified.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name of the property that is currently being modified.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the ModifyingProperties object itself.
     */
    public ModifyingProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the pendingValue property: &lt;p&gt;The value that the property that is currently being modified will
     * eventually have.&lt;/p&gt;.
     * 
     * @return the pendingValue value.
     */
    public String pendingValue() {
        return this.pendingValue;
    }

    /**
     * Set the pendingValue property: &lt;p&gt;The value that the property that is currently being modified will
     * eventually have.&lt;/p&gt;.
     * 
     * @param pendingValue the pendingValue value to set.
     * @return the ModifyingProperties object itself.
     */
    public ModifyingProperties withPendingValue(String pendingValue) {
        this.pendingValue = pendingValue;
        return this;
    }

    /**
     * Get the valueType property: &lt;p&gt;The type of value that is currently being modified. Properties can have two
     * types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PLAIN_TEXT&lt;/code&gt;: Contain direct values such
     * as '1', 'True', or 'c5.large.search'.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;STRINGIFIED_JSON&lt;/code&gt;: Contain content in JSON format, such as {'Enabled':'True'}'.&lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the valueType value.
     */
    public PropertyValueTypeEnumValue valueType() {
        return this.valueType;
    }

    /**
     * Set the valueType property: &lt;p&gt;The type of value that is currently being modified. Properties can have two
     * types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PLAIN_TEXT&lt;/code&gt;: Contain direct values such
     * as '1', 'True', or 'c5.large.search'.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;STRINGIFIED_JSON&lt;/code&gt;: Contain content in JSON format, such as {'Enabled':'True'}'.&lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param valueType the valueType value to set.
     * @return the ModifyingProperties object itself.
     */
    public ModifyingProperties withValueType(PropertyValueTypeEnumValue valueType) {
        this.valueType = valueType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (valueType() != null) {
            valueType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activeValue", this.activeValue);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("pendingValue", this.pendingValue);
        jsonWriter.writeJsonField("valueType", this.valueType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModifyingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModifyingProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ModifyingProperties.
     */
    public static ModifyingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModifyingProperties deserializedModifyingProperties = new ModifyingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeValue".equals(fieldName)) {
                    deserializedModifyingProperties.activeValue = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedModifyingProperties.name = reader.getString();
                } else if ("pendingValue".equals(fieldName)) {
                    deserializedModifyingProperties.pendingValue = reader.getString();
                } else if ("valueType".equals(fieldName)) {
                    deserializedModifyingProperties.valueType = PropertyValueTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModifyingProperties;
        });
    }
}
