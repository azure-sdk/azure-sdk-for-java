// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of BlockDeviceMapping.
 */
@Fluent
public final class BlockDeviceMapping implements JsonSerializable<BlockDeviceMapping> {
    /*
     * <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
     */
    private String deviceName;

    /*
     * <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
     */
    private EbsBlockDevice ebs;

    /*
     * <p>To omit the device from the block device mapping, specify an empty string. When this property is specified,
     * the device is removed from the block device mapping regardless of the assigned value.</p>
     */
    private String noDevice;

    /*
     * <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An
     * instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and
     * <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you
     * connect to the instance, you must mount the volume.</p> <p>NVMe instance store volumes are automatically
     * enumerated and assigned a device name. Including them in your block device mapping has no effect.</p>
     * <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the
     * instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device
     * mapping for the AMI.</p>
     */
    private String virtualName;

    /**
     * Creates an instance of BlockDeviceMapping class.
     */
    public BlockDeviceMapping() {
    }

    /**
     * Get the deviceName property: &lt;p&gt;The device name (for example, &lt;code&gt;/dev/sdh&lt;/code&gt; or
     * &lt;code&gt;xvdh&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @return the deviceName value.
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Set the deviceName property: &lt;p&gt;The device name (for example, &lt;code&gt;/dev/sdh&lt;/code&gt; or
     * &lt;code&gt;xvdh&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @param deviceName the deviceName value to set.
     * @return the BlockDeviceMapping object itself.
     */
    public BlockDeviceMapping withDeviceName(String deviceName) {
        this.deviceName = deviceName;
        return this;
    }

    /**
     * Get the ebs property: &lt;p&gt;Parameters used to automatically set up EBS volumes when the instance is
     * launched.&lt;/p&gt;.
     * 
     * @return the ebs value.
     */
    public EbsBlockDevice ebs() {
        return this.ebs;
    }

    /**
     * Set the ebs property: &lt;p&gt;Parameters used to automatically set up EBS volumes when the instance is
     * launched.&lt;/p&gt;.
     * 
     * @param ebs the ebs value to set.
     * @return the BlockDeviceMapping object itself.
     */
    public BlockDeviceMapping withEbs(EbsBlockDevice ebs) {
        this.ebs = ebs;
        return this;
    }

    /**
     * Get the noDevice property: &lt;p&gt;To omit the device from the block device mapping, specify an empty string.
     * When this property is specified, the device is removed from the block device mapping regardless of the assigned
     * value.&lt;/p&gt;.
     * 
     * @return the noDevice value.
     */
    public String noDevice() {
        return this.noDevice;
    }

    /**
     * Set the noDevice property: &lt;p&gt;To omit the device from the block device mapping, specify an empty string.
     * When this property is specified, the device is removed from the block device mapping regardless of the assigned
     * value.&lt;/p&gt;.
     * 
     * @param noDevice the noDevice value to set.
     * @return the BlockDeviceMapping object itself.
     */
    public BlockDeviceMapping withNoDevice(String noDevice) {
        this.noDevice = noDevice;
        return this;
    }

    /**
     * Get the virtualName property: &lt;p&gt;The virtual device name (&lt;code&gt;ephemeral&lt;/code&gt;N). Instance
     * store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify
     * mappings for &lt;code&gt;ephemeral0&lt;/code&gt; and &lt;code&gt;ephemeral1&lt;/code&gt;. The number of available
     * instance store volumes depends on the instance type. After you connect to the instance, you must mount the
     * volume.&lt;/p&gt; &lt;p&gt;NVMe instance store volumes are automatically enumerated and assigned a device name.
     * Including them in your block device mapping has no effect.&lt;/p&gt; &lt;p&gt;Constraints: For M3 instances, you
     * must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance,
     * we ignore any instance store volumes specified in the block device mapping for the AMI.&lt;/p&gt;.
     * 
     * @return the virtualName value.
     */
    public String virtualName() {
        return this.virtualName;
    }

    /**
     * Set the virtualName property: &lt;p&gt;The virtual device name (&lt;code&gt;ephemeral&lt;/code&gt;N). Instance
     * store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify
     * mappings for &lt;code&gt;ephemeral0&lt;/code&gt; and &lt;code&gt;ephemeral1&lt;/code&gt;. The number of available
     * instance store volumes depends on the instance type. After you connect to the instance, you must mount the
     * volume.&lt;/p&gt; &lt;p&gt;NVMe instance store volumes are automatically enumerated and assigned a device name.
     * Including them in your block device mapping has no effect.&lt;/p&gt; &lt;p&gt;Constraints: For M3 instances, you
     * must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance,
     * we ignore any instance store volumes specified in the block device mapping for the AMI.&lt;/p&gt;.
     * 
     * @param virtualName the virtualName value to set.
     * @return the BlockDeviceMapping object itself.
     */
    public BlockDeviceMapping withVirtualName(String virtualName) {
        this.virtualName = virtualName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ebs() != null) {
            ebs().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceName", this.deviceName);
        jsonWriter.writeJsonField("ebs", this.ebs);
        jsonWriter.writeStringField("noDevice", this.noDevice);
        jsonWriter.writeStringField("virtualName", this.virtualName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlockDeviceMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlockDeviceMapping if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BlockDeviceMapping.
     */
    public static BlockDeviceMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlockDeviceMapping deserializedBlockDeviceMapping = new BlockDeviceMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceName".equals(fieldName)) {
                    deserializedBlockDeviceMapping.deviceName = reader.getString();
                } else if ("ebs".equals(fieldName)) {
                    deserializedBlockDeviceMapping.ebs = EbsBlockDevice.fromJson(reader);
                } else if ("noDevice".equals(fieldName)) {
                    deserializedBlockDeviceMapping.noDevice = reader.getString();
                } else if ("virtualName".equals(fieldName)) {
                    deserializedBlockDeviceMapping.virtualName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlockDeviceMapping;
        });
    }
}
