// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LoggingConfig.
 */
@Fluent
public final class LoggingConfig implements JsonSerializable<LoggingConfig> {
    /*
     * Set this property to filter the application logs for your function that Lambda sends to CloudWatch. Lambda only
     * sends application logs at the selected level of detail and lower, where ``TRACE`` is the highest level and
     * ``FATAL`` is the lowest.
     */
    private LoggingConfigApplicationLogLevel applicationLogLevel;

    /*
     * The format in which Lambda sends your function's application and system logs to CloudWatch. Select between plain
     * text and structured JSON.
     */
    private LoggingConfigLogFormat logFormat;

    /*
     * The name of the Amazon CloudWatch log group the function sends logs to. By default, Lambda functions send logs to
     * a default log group named ``/aws/lambda/<function name>``. To use a different log group, enter an existing log
     * group or enter a new log group name.
     */
    private String logGroup;

    /*
     * Set this property to filter the system logs for your function that Lambda sends to CloudWatch. Lambda only sends
     * system logs at the selected level of detail and lower, where ``DEBUG`` is the highest level and ``WARN`` is the
     * lowest.
     */
    private LoggingConfigSystemLogLevel systemLogLevel;

    /**
     * Creates an instance of LoggingConfig class.
     */
    public LoggingConfig() {
    }

    /**
     * Get the applicationLogLevel property: Set this property to filter the application logs for your function that
     * Lambda sends to CloudWatch. Lambda only sends application logs at the selected level of detail and lower, where
     * ``TRACE`` is the highest level and ``FATAL`` is the lowest.
     * 
     * @return the applicationLogLevel value.
     */
    public LoggingConfigApplicationLogLevel applicationLogLevel() {
        return this.applicationLogLevel;
    }

    /**
     * Set the applicationLogLevel property: Set this property to filter the application logs for your function that
     * Lambda sends to CloudWatch. Lambda only sends application logs at the selected level of detail and lower, where
     * ``TRACE`` is the highest level and ``FATAL`` is the lowest.
     * 
     * @param applicationLogLevel the applicationLogLevel value to set.
     * @return the LoggingConfig object itself.
     */
    public LoggingConfig withApplicationLogLevel(LoggingConfigApplicationLogLevel applicationLogLevel) {
        this.applicationLogLevel = applicationLogLevel;
        return this;
    }

    /**
     * Get the logFormat property: The format in which Lambda sends your function's application and system logs to
     * CloudWatch. Select between plain text and structured JSON.
     * 
     * @return the logFormat value.
     */
    public LoggingConfigLogFormat logFormat() {
        return this.logFormat;
    }

    /**
     * Set the logFormat property: The format in which Lambda sends your function's application and system logs to
     * CloudWatch. Select between plain text and structured JSON.
     * 
     * @param logFormat the logFormat value to set.
     * @return the LoggingConfig object itself.
     */
    public LoggingConfig withLogFormat(LoggingConfigLogFormat logFormat) {
        this.logFormat = logFormat;
        return this;
    }

    /**
     * Get the logGroup property: The name of the Amazon CloudWatch log group the function sends logs to. By default,
     * Lambda functions send logs to a default log group named ``/aws/lambda/&lt;function name&gt;``. To use a different
     * log group, enter an existing log group or enter a new log group name.
     * 
     * @return the logGroup value.
     */
    public String logGroup() {
        return this.logGroup;
    }

    /**
     * Set the logGroup property: The name of the Amazon CloudWatch log group the function sends logs to. By default,
     * Lambda functions send logs to a default log group named ``/aws/lambda/&lt;function name&gt;``. To use a different
     * log group, enter an existing log group or enter a new log group name.
     * 
     * @param logGroup the logGroup value to set.
     * @return the LoggingConfig object itself.
     */
    public LoggingConfig withLogGroup(String logGroup) {
        this.logGroup = logGroup;
        return this;
    }

    /**
     * Get the systemLogLevel property: Set this property to filter the system logs for your function that Lambda sends
     * to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where ``DEBUG`` is the
     * highest level and ``WARN`` is the lowest.
     * 
     * @return the systemLogLevel value.
     */
    public LoggingConfigSystemLogLevel systemLogLevel() {
        return this.systemLogLevel;
    }

    /**
     * Set the systemLogLevel property: Set this property to filter the system logs for your function that Lambda sends
     * to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where ``DEBUG`` is the
     * highest level and ``WARN`` is the lowest.
     * 
     * @param systemLogLevel the systemLogLevel value to set.
     * @return the LoggingConfig object itself.
     */
    public LoggingConfig withSystemLogLevel(LoggingConfigSystemLogLevel systemLogLevel) {
        this.systemLogLevel = systemLogLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationLogLevel",
            this.applicationLogLevel == null ? null : this.applicationLogLevel.toString());
        jsonWriter.writeStringField("logFormat", this.logFormat == null ? null : this.logFormat.toString());
        jsonWriter.writeStringField("logGroup", this.logGroup);
        jsonWriter.writeStringField("systemLogLevel",
            this.systemLogLevel == null ? null : this.systemLogLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoggingConfig.
     */
    public static LoggingConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingConfig deserializedLoggingConfig = new LoggingConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationLogLevel".equals(fieldName)) {
                    deserializedLoggingConfig.applicationLogLevel
                        = LoggingConfigApplicationLogLevel.fromString(reader.getString());
                } else if ("logFormat".equals(fieldName)) {
                    deserializedLoggingConfig.logFormat = LoggingConfigLogFormat.fromString(reader.getString());
                } else if ("logGroup".equals(fieldName)) {
                    deserializedLoggingConfig.logGroup = reader.getString();
                } else if ("systemLogLevel".equals(fieldName)) {
                    deserializedLoggingConfig.systemLogLevel
                        = LoggingConfigSystemLogLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingConfig;
        });
    }
}
