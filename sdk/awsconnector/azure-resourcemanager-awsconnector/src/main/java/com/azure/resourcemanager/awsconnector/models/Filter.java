// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Filter.
 */
@Fluent
public final class Filter implements JsonSerializable<Filter> {
    /*
     * Property contains
     */
    private List<String> contains;

    /*
     * Property eq
     */
    private List<String> eq;

    /*
     * Property exists
     */
    private Boolean exists;

    /*
     * Property neq
     */
    private List<String> neq;

    /*
     * Property property
     */
    private String property;

    /**
     * Creates an instance of Filter class.
     */
    public Filter() {
    }

    /**
     * Get the contains property: Property contains.
     * 
     * @return the contains value.
     */
    public List<String> contains() {
        return this.contains;
    }

    /**
     * Set the contains property: Property contains.
     * 
     * @param contains the contains value to set.
     * @return the Filter object itself.
     */
    public Filter withContains(List<String> contains) {
        this.contains = contains;
        return this;
    }

    /**
     * Get the eq property: Property eq.
     * 
     * @return the eq value.
     */
    public List<String> eq() {
        return this.eq;
    }

    /**
     * Set the eq property: Property eq.
     * 
     * @param eq the eq value to set.
     * @return the Filter object itself.
     */
    public Filter withEq(List<String> eq) {
        this.eq = eq;
        return this;
    }

    /**
     * Get the exists property: Property exists.
     * 
     * @return the exists value.
     */
    public Boolean exists() {
        return this.exists;
    }

    /**
     * Set the exists property: Property exists.
     * 
     * @param exists the exists value to set.
     * @return the Filter object itself.
     */
    public Filter withExists(Boolean exists) {
        this.exists = exists;
        return this;
    }

    /**
     * Get the neq property: Property neq.
     * 
     * @return the neq value.
     */
    public List<String> neq() {
        return this.neq;
    }

    /**
     * Set the neq property: Property neq.
     * 
     * @param neq the neq value to set.
     * @return the Filter object itself.
     */
    public Filter withNeq(List<String> neq) {
        this.neq = neq;
        return this;
    }

    /**
     * Get the property property: Property property.
     * 
     * @return the property value.
     */
    public String property() {
        return this.property;
    }

    /**
     * Set the property property: Property property.
     * 
     * @param property the property value to set.
     * @return the Filter object itself.
     */
    public Filter withProperty(String property) {
        this.property = property;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("contains", this.contains, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("eq", this.eq, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("exists", this.exists);
        jsonWriter.writeArrayField("neq", this.neq, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("property", this.property);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Filter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Filter if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Filter.
     */
    public static Filter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Filter deserializedFilter = new Filter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contains".equals(fieldName)) {
                    List<String> contains = reader.readArray(reader1 -> reader1.getString());
                    deserializedFilter.contains = contains;
                } else if ("eq".equals(fieldName)) {
                    List<String> eq = reader.readArray(reader1 -> reader1.getString());
                    deserializedFilter.eq = eq;
                } else if ("exists".equals(fieldName)) {
                    deserializedFilter.exists = reader.getNullable(JsonReader::getBoolean);
                } else if ("neq".equals(fieldName)) {
                    List<String> neq = reader.readArray(reader1 -> reader1.getString());
                    deserializedFilter.neq = neq;
                } else if ("property".equals(fieldName)) {
                    deserializedFilter.property = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilter;
        });
    }
}
