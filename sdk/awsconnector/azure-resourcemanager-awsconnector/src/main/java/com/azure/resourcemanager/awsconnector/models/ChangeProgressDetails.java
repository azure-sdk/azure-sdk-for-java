// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of ChangeProgressDetails.
 */
@Fluent
public final class ChangeProgressDetails implements JsonSerializable<ChangeProgressDetails> {
    /*
     * <p>The ID of the configuration change.</p>
     */
    private String changeId;

    /*
     * <p>The current status of the configuration change.</p>
     */
    private ConfigChangeStatusEnumValue configChangeStatus;

    /*
     * <p>The IAM principal who initiated the configuration change.</p>
     */
    private InitiatedByEnumValue initiatedBy;

    /*
     * <p>The last time that the configuration change was updated.</p>
     */
    private OffsetDateTime lastUpdatedTime;

    /*
     * <p>A message corresponding to the status of the configuration change.</p>
     */
    private String message;

    /*
     * <p>The time that the configuration change was initiated, in Universal Coordinated Time (UTC).</p>
     */
    private OffsetDateTime startTime;

    /**
     * Creates an instance of ChangeProgressDetails class.
     */
    public ChangeProgressDetails() {
    }

    /**
     * Get the changeId property: &lt;p&gt;The ID of the configuration change.&lt;/p&gt;.
     * 
     * @return the changeId value.
     */
    public String changeId() {
        return this.changeId;
    }

    /**
     * Set the changeId property: &lt;p&gt;The ID of the configuration change.&lt;/p&gt;.
     * 
     * @param changeId the changeId value to set.
     * @return the ChangeProgressDetails object itself.
     */
    public ChangeProgressDetails withChangeId(String changeId) {
        this.changeId = changeId;
        return this;
    }

    /**
     * Get the configChangeStatus property: &lt;p&gt;The current status of the configuration change.&lt;/p&gt;.
     * 
     * @return the configChangeStatus value.
     */
    public ConfigChangeStatusEnumValue configChangeStatus() {
        return this.configChangeStatus;
    }

    /**
     * Set the configChangeStatus property: &lt;p&gt;The current status of the configuration change.&lt;/p&gt;.
     * 
     * @param configChangeStatus the configChangeStatus value to set.
     * @return the ChangeProgressDetails object itself.
     */
    public ChangeProgressDetails withConfigChangeStatus(ConfigChangeStatusEnumValue configChangeStatus) {
        this.configChangeStatus = configChangeStatus;
        return this;
    }

    /**
     * Get the initiatedBy property: &lt;p&gt;The IAM principal who initiated the configuration change.&lt;/p&gt;.
     * 
     * @return the initiatedBy value.
     */
    public InitiatedByEnumValue initiatedBy() {
        return this.initiatedBy;
    }

    /**
     * Set the initiatedBy property: &lt;p&gt;The IAM principal who initiated the configuration change.&lt;/p&gt;.
     * 
     * @param initiatedBy the initiatedBy value to set.
     * @return the ChangeProgressDetails object itself.
     */
    public ChangeProgressDetails withInitiatedBy(InitiatedByEnumValue initiatedBy) {
        this.initiatedBy = initiatedBy;
        return this;
    }

    /**
     * Get the lastUpdatedTime property: &lt;p&gt;The last time that the configuration change was updated.&lt;/p&gt;.
     * 
     * @return the lastUpdatedTime value.
     */
    public OffsetDateTime lastUpdatedTime() {
        return this.lastUpdatedTime;
    }

    /**
     * Set the lastUpdatedTime property: &lt;p&gt;The last time that the configuration change was updated.&lt;/p&gt;.
     * 
     * @param lastUpdatedTime the lastUpdatedTime value to set.
     * @return the ChangeProgressDetails object itself.
     */
    public ChangeProgressDetails withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
        return this;
    }

    /**
     * Get the message property: &lt;p&gt;A message corresponding to the status of the configuration change.&lt;/p&gt;.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: &lt;p&gt;A message corresponding to the status of the configuration change.&lt;/p&gt;.
     * 
     * @param message the message value to set.
     * @return the ChangeProgressDetails object itself.
     */
    public ChangeProgressDetails withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the startTime property: &lt;p&gt;The time that the configuration change was initiated, in Universal
     * Coordinated Time (UTC).&lt;/p&gt;.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: &lt;p&gt;The time that the configuration change was initiated, in Universal
     * Coordinated Time (UTC).&lt;/p&gt;.
     * 
     * @param startTime the startTime value to set.
     * @return the ChangeProgressDetails object itself.
     */
    public ChangeProgressDetails withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configChangeStatus() != null) {
            configChangeStatus().validate();
        }
        if (initiatedBy() != null) {
            initiatedBy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("changeId", this.changeId);
        jsonWriter.writeJsonField("configChangeStatus", this.configChangeStatus);
        jsonWriter.writeJsonField("initiatedBy", this.initiatedBy);
        jsonWriter.writeStringField("lastUpdatedTime",
            this.lastUpdatedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedTime));
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChangeProgressDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChangeProgressDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChangeProgressDetails.
     */
    public static ChangeProgressDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChangeProgressDetails deserializedChangeProgressDetails = new ChangeProgressDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("changeId".equals(fieldName)) {
                    deserializedChangeProgressDetails.changeId = reader.getString();
                } else if ("configChangeStatus".equals(fieldName)) {
                    deserializedChangeProgressDetails.configChangeStatus = ConfigChangeStatusEnumValue.fromJson(reader);
                } else if ("initiatedBy".equals(fieldName)) {
                    deserializedChangeProgressDetails.initiatedBy = InitiatedByEnumValue.fromJson(reader);
                } else if ("lastUpdatedTime".equals(fieldName)) {
                    deserializedChangeProgressDetails.lastUpdatedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    deserializedChangeProgressDetails.message = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedChangeProgressDetails.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChangeProgressDetails;
        });
    }
}
