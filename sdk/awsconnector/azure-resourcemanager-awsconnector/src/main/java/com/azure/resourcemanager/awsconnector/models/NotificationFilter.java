// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of NotificationFilter.
 */
@Fluent
public final class NotificationFilter implements JsonSerializable<NotificationFilter> {
    /*
     * A container for object key name prefix and suffix filtering rules. A container for object key name prefix and
     * suffix filtering rules. For more information about object key name filtering, see [Configuring event
     * notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*. The same type of filter rule cannot be used more than once. For example, you cannot
     * specify two prefix rules.
     */
    private S3KeyFilter s3Key;

    /**
     * Creates an instance of NotificationFilter class.
     */
    public NotificationFilter() {
    }

    /**
     * Get the s3Key property: A container for object key name prefix and suffix filtering rules. A container for object
     * key name prefix and suffix filtering rules. For more information about object key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*. The same type of filter rule cannot be used more than once. For example, you cannot
     * specify two prefix rules.
     * 
     * @return the s3Key value.
     */
    public S3KeyFilter s3Key() {
        return this.s3Key;
    }

    /**
     * Set the s3Key property: A container for object key name prefix and suffix filtering rules. A container for object
     * key name prefix and suffix filtering rules. For more information about object key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*. The same type of filter rule cannot be used more than once. For example, you cannot
     * specify two prefix rules.
     * 
     * @param s3Key the s3Key value to set.
     * @return the NotificationFilter object itself.
     */
    public NotificationFilter withS3Key(S3KeyFilter s3Key) {
        this.s3Key = s3Key;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (s3Key() != null) {
            s3Key().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("s3Key", this.s3Key);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationFilter.
     */
    public static NotificationFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationFilter deserializedNotificationFilter = new NotificationFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("s3Key".equals(fieldName)) {
                    deserializedNotificationFilter.s3Key = S3KeyFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationFilter;
        });
    }
}
