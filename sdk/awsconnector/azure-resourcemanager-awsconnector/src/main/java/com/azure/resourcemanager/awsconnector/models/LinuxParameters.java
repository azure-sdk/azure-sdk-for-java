// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of LinuxParameters.
 */
@Fluent
public final class LinuxParameters implements JsonSerializable<LinuxParameters> {
    /*
     * The Linux capabilities for the container that are added to or dropped from the default configuration provided by
     * Docker. For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but
     * the ``add`` parameter is only supported if using platform version 1.4.0 or later. The Linux capabilities to add
     * or remove from the default Docker configuration for a container defined in the task definition. For more
     * information about the default capabilities and the non-default available capabilities, see [Runtime privilege and
     * Linux
     * capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-
     * linux-capabilities) in the *Docker run reference*. For more detailed information about these Linux capabilities,
     * see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html)
     * Linux manual page.
     */
    private KernelCapabilities capabilities;

    /*
     * Any host devices to expose to the container. This parameter maps to ``Devices`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--device`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
     */
    private List<Device> devices;

    /*
     * Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to
     * the ``--init`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'``
     */
    private Boolean initProcessEnabled;

    /*
     * The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the
     * ``--memory-swap`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the
     * value would be the sum of the container memory plus the ``maxSwap`` value. If a ``maxSwap`` value of ``0`` is
     * specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap``
     * parameter is omitted, the container will use the swap configuration for the container instance it is running on.
     * A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used. If you're using tasks that use the
     * Fargate launch type, the ``maxSwap`` parameter isn't supported. If you're using tasks on Amazon Linux 2023 the
     * ``swappiness`` parameter isn't supported.
     */
    private Integer maxSwap;

    /*
     * The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to
     * [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
     * If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
     */
    private Integer sharedMemorySize;

    /*
     * This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of ``0`` will cause
     * swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100`` will cause pages to be
     * swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If the ``swappiness``
     * parameter is not specified, a default value of ``60`` is used. If a value is not specified for ``maxSwap`` then
     * this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported. If you're using tasks
     * on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
     */
    private Integer swappiness;

    /*
     * The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs``
     * option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
     */
    private List<Tmpfs> tmpfs;

    /**
     * Creates an instance of LinuxParameters class.
     */
    public LinuxParameters() {
    }

    /**
     * Get the capabilities property: The Linux capabilities for the container that are added to or dropped from the
     * default configuration provided by Docker. For tasks that use the Fargate launch type, ``capabilities`` is
     * supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0
     * or later. The Linux capabilities to add or remove from the default Docker configuration for a container defined
     * in the task definition. For more information about the default capabilities and the non-default available
     * capabilities, see [Runtime privilege and Linux
     * capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities)
     * in the *Docker run reference*. For more detailed information about these Linux capabilities, see the
     * [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux
     * manual page.
     * 
     * @return the capabilities value.
     */
    public KernelCapabilities capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The Linux capabilities for the container that are added to or dropped from the
     * default configuration provided by Docker. For tasks that use the Fargate launch type, ``capabilities`` is
     * supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0
     * or later. The Linux capabilities to add or remove from the default Docker configuration for a container defined
     * in the task definition. For more information about the default capabilities and the non-default available
     * capabilities, see [Runtime privilege and Linux
     * capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities)
     * in the *Docker run reference*. For more detailed information about these Linux capabilities, see the
     * [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux
     * manual page.
     * 
     * @param capabilities the capabilities value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withCapabilities(KernelCapabilities capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the devices property: Any host devices to expose to the container. This parameter maps to ``Devices`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--device`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
     * 
     * @return the devices value.
     */
    public List<Device> devices() {
        return this.devices;
    }

    /**
     * Set the devices property: Any host devices to expose to the container. This parameter maps to ``Devices`` in the
     * [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--device`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
     * 
     * @param devices the devices value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withDevices(List<Device> devices) {
        this.devices = devices;
        return this;
    }

    /**
     * Get the initProcessEnabled property: Run an ``init`` process inside the container that forwards signals and reaps
     * processes. This parameter maps to the ``--init`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'``.
     * 
     * @return the initProcessEnabled value.
     */
    public Boolean initProcessEnabled() {
        return this.initProcessEnabled;
    }

    /**
     * Set the initProcessEnabled property: Run an ``init`` process inside the container that forwards signals and reaps
     * processes. This parameter maps to the ``--init`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This
     * parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the
     * Docker Remote API version on your container instance, log in to your container instance and run the following
     * command: ``sudo docker version --format '{{.Server.APIVersion}}'``.
     * 
     * @param initProcessEnabled the initProcessEnabled value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withInitProcessEnabled(Boolean initProcessEnabled) {
        this.initProcessEnabled = initProcessEnabled;
        return this;
    }

    /**
     * Get the maxSwap property: The total amount of swap memory (in MiB) a container can use. This parameter will be
     * translated to the ``--memory-swap`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the
     * value would be the sum of the container memory plus the ``maxSwap`` value. If a ``maxSwap`` value of ``0`` is
     * specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap``
     * parameter is omitted, the container will use the swap configuration for the container instance it is running on.
     * A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used. If you're using tasks that use the
     * Fargate launch type, the ``maxSwap`` parameter isn't supported. If you're using tasks on Amazon Linux 2023 the
     * ``swappiness`` parameter isn't supported.
     * 
     * @return the maxSwap value.
     */
    public Integer maxSwap() {
        return this.maxSwap;
    }

    /**
     * Set the maxSwap property: The total amount of swap memory (in MiB) a container can use. This parameter will be
     * translated to the ``--memory-swap`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the
     * value would be the sum of the container memory plus the ``maxSwap`` value. If a ``maxSwap`` value of ``0`` is
     * specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap``
     * parameter is omitted, the container will use the swap configuration for the container instance it is running on.
     * A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used. If you're using tasks that use the
     * Fargate launch type, the ``maxSwap`` parameter isn't supported. If you're using tasks on Amazon Linux 2023 the
     * ``swappiness`` parameter isn't supported.
     * 
     * @param maxSwap the maxSwap value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withMaxSwap(Integer maxSwap) {
        this.maxSwap = maxSwap;
        return this;
    }

    /**
     * Get the sharedMemorySize property: The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter
     * maps to the ``--shm-size`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you
     * are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
     * 
     * @return the sharedMemorySize value.
     */
    public Integer sharedMemorySize() {
        return this.sharedMemorySize;
    }

    /**
     * Set the sharedMemorySize property: The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter
     * maps to the ``--shm-size`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you
     * are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
     * 
     * @param sharedMemorySize the sharedMemorySize value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withSharedMemorySize(Integer sharedMemorySize) {
        this.sharedMemorySize = sharedMemorySize;
        return this;
    }

    /**
     * Get the swappiness property: This allows you to tune a container's memory swappiness behavior. A ``swappiness``
     * value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100``
     * will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If
     * the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for
     * ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported. If you're using tasks
     * on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
     * 
     * @return the swappiness value.
     */
    public Integer swappiness() {
        return this.swappiness;
    }

    /**
     * Set the swappiness property: This allows you to tune a container's memory swappiness behavior. A ``swappiness``
     * value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100``
     * will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If
     * the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for
     * ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported. If you're using tasks
     * on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
     * 
     * @param swappiness the swappiness value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withSwappiness(Integer swappiness) {
        this.swappiness = swappiness;
        return this;
    }

    /**
     * Get the tmpfs property: The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter
     * maps to the ``--tmpfs`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
     * 
     * @return the tmpfs value.
     */
    public List<Tmpfs> tmpfs() {
        return this.tmpfs;
    }

    /**
     * Set the tmpfs property: The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter
     * maps to the ``--tmpfs`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). If you're
     * using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
     * 
     * @param tmpfs the tmpfs value to set.
     * @return the LinuxParameters object itself.
     */
    public LinuxParameters withTmpfs(List<Tmpfs> tmpfs) {
        this.tmpfs = tmpfs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() != null) {
            capabilities().validate();
        }
        if (devices() != null) {
            devices().forEach(e -> e.validate());
        }
        if (tmpfs() != null) {
            tmpfs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("capabilities", this.capabilities);
        jsonWriter.writeArrayField("devices", this.devices, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("initProcessEnabled", this.initProcessEnabled);
        jsonWriter.writeNumberField("maxSwap", this.maxSwap);
        jsonWriter.writeNumberField("sharedMemorySize", this.sharedMemorySize);
        jsonWriter.writeNumberField("swappiness", this.swappiness);
        jsonWriter.writeArrayField("tmpfs", this.tmpfs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinuxParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinuxParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinuxParameters.
     */
    public static LinuxParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinuxParameters deserializedLinuxParameters = new LinuxParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capabilities".equals(fieldName)) {
                    deserializedLinuxParameters.capabilities = KernelCapabilities.fromJson(reader);
                } else if ("devices".equals(fieldName)) {
                    List<Device> devices = reader.readArray(reader1 -> Device.fromJson(reader1));
                    deserializedLinuxParameters.devices = devices;
                } else if ("initProcessEnabled".equals(fieldName)) {
                    deserializedLinuxParameters.initProcessEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("maxSwap".equals(fieldName)) {
                    deserializedLinuxParameters.maxSwap = reader.getNullable(JsonReader::getInt);
                } else if ("sharedMemorySize".equals(fieldName)) {
                    deserializedLinuxParameters.sharedMemorySize = reader.getNullable(JsonReader::getInt);
                } else if ("swappiness".equals(fieldName)) {
                    deserializedLinuxParameters.swappiness = reader.getNullable(JsonReader::getInt);
                } else if ("tmpfs".equals(fieldName)) {
                    List<Tmpfs> tmpfs = reader.readArray(reader1 -> Tmpfs.fromJson(reader1));
                    deserializedLinuxParameters.tmpfs = tmpfs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinuxParameters;
        });
    }
}
