// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Networking.
 */
@Fluent
public final class Networking implements JsonSerializable<Networking> {
    /*
     * Monthly Transfer of the Instance.
     */
    private MonthlyTransfer monthlyTransfer;

    /*
     * Ports to the Instance.
     */
    private List<Port> ports;

    /**
     * Creates an instance of Networking class.
     */
    public Networking() {
    }

    /**
     * Get the monthlyTransfer property: Monthly Transfer of the Instance.
     * 
     * @return the monthlyTransfer value.
     */
    public MonthlyTransfer monthlyTransfer() {
        return this.monthlyTransfer;
    }

    /**
     * Set the monthlyTransfer property: Monthly Transfer of the Instance.
     * 
     * @param monthlyTransfer the monthlyTransfer value to set.
     * @return the Networking object itself.
     */
    public Networking withMonthlyTransfer(MonthlyTransfer monthlyTransfer) {
        this.monthlyTransfer = monthlyTransfer;
        return this;
    }

    /**
     * Get the ports property: Ports to the Instance.
     * 
     * @return the ports value.
     */
    public List<Port> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: Ports to the Instance.
     * 
     * @param ports the ports value to set.
     * @return the Networking object itself.
     */
    public Networking withPorts(List<Port> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (monthlyTransfer() != null) {
            monthlyTransfer().validate();
        }
        if (ports() != null) {
            ports().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("monthlyTransfer", this.monthlyTransfer);
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Networking from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Networking if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Networking.
     */
    public static Networking fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Networking deserializedNetworking = new Networking();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("monthlyTransfer".equals(fieldName)) {
                    deserializedNetworking.monthlyTransfer = MonthlyTransfer.fromJson(reader);
                } else if ("ports".equals(fieldName)) {
                    List<Port> ports = reader.readArray(reader1 -> Port.fromJson(reader1));
                    deserializedNetworking.ports = ports;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworking;
        });
    }
}
