// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FixedResponseConfig.
 */
@Fluent
public final class FixedResponseConfig implements JsonSerializable<FixedResponseConfig> {
    /*
     * The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json
     */
    private String contentType;

    /*
     * The message.
     */
    private String messageBody;

    /*
     * The HTTP response code (2XX, 4XX, or 5XX).
     */
    private String statusCode;

    /**
     * Creates an instance of FixedResponseConfig class.
     */
    public FixedResponseConfig() {
    }

    /**
     * Get the contentType property: The content type. Valid Values: text/plain | text/css | text/html |
     * application/javascript | application/json.
     * 
     * @return the contentType value.
     */
    public String contentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: The content type. Valid Values: text/plain | text/css | text/html |
     * application/javascript | application/json.
     * 
     * @param contentType the contentType value to set.
     * @return the FixedResponseConfig object itself.
     */
    public FixedResponseConfig withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the messageBody property: The message.
     * 
     * @return the messageBody value.
     */
    public String messageBody() {
        return this.messageBody;
    }

    /**
     * Set the messageBody property: The message.
     * 
     * @param messageBody the messageBody value to set.
     * @return the FixedResponseConfig object itself.
     */
    public FixedResponseConfig withMessageBody(String messageBody) {
        this.messageBody = messageBody;
        return this;
    }

    /**
     * Get the statusCode property: The HTTP response code (2XX, 4XX, or 5XX).
     * 
     * @return the statusCode value.
     */
    public String statusCode() {
        return this.statusCode;
    }

    /**
     * Set the statusCode property: The HTTP response code (2XX, 4XX, or 5XX).
     * 
     * @param statusCode the statusCode value to set.
     * @return the FixedResponseConfig object itself.
     */
    public FixedResponseConfig withStatusCode(String statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeStringField("messageBody", this.messageBody);
        jsonWriter.writeStringField("statusCode", this.statusCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FixedResponseConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FixedResponseConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FixedResponseConfig.
     */
    public static FixedResponseConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FixedResponseConfig deserializedFixedResponseConfig = new FixedResponseConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contentType".equals(fieldName)) {
                    deserializedFixedResponseConfig.contentType = reader.getString();
                } else if ("messageBody".equals(fieldName)) {
                    deserializedFixedResponseConfig.messageBody = reader.getString();
                } else if ("statusCode".equals(fieldName)) {
                    deserializedFixedResponseConfig.statusCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFixedResponseConfig;
        });
    }
}
