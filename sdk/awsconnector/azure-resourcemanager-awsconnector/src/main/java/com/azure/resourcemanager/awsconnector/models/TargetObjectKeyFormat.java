// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TargetObjectKeyFormat.
 */
@Fluent
public final class TargetObjectKeyFormat implements JsonSerializable<TargetObjectKeyFormat> {
    /*
     * This format defaults the prefix to the given log file prefix for delivering server access log file.
     */
    private Object simplePrefix;

    /*
     * Amazon S3 keys for log objects are partitioned in the following format:
     * ``[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-
     * [ss]-[UniqueString]`` PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.
     */
    private PartitionedPrefix partitionedPrefix;

    /**
     * Creates an instance of TargetObjectKeyFormat class.
     */
    public TargetObjectKeyFormat() {
    }

    /**
     * Get the simplePrefix property: This format defaults the prefix to the given log file prefix for delivering server
     * access log file.
     * 
     * @return the simplePrefix value.
     */
    public Object simplePrefix() {
        return this.simplePrefix;
    }

    /**
     * Set the simplePrefix property: This format defaults the prefix to the given log file prefix for delivering server
     * access log file.
     * 
     * @param simplePrefix the simplePrefix value to set.
     * @return the TargetObjectKeyFormat object itself.
     */
    public TargetObjectKeyFormat withSimplePrefix(Object simplePrefix) {
        this.simplePrefix = simplePrefix;
        return this;
    }

    /**
     * Get the partitionedPrefix property: Amazon S3 keys for log objects are partitioned in the following format:
     * ``[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]``
     * PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.
     * 
     * @return the partitionedPrefix value.
     */
    public PartitionedPrefix partitionedPrefix() {
        return this.partitionedPrefix;
    }

    /**
     * Set the partitionedPrefix property: Amazon S3 keys for log objects are partitioned in the following format:
     * ``[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]``
     * PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.
     * 
     * @param partitionedPrefix the partitionedPrefix value to set.
     * @return the TargetObjectKeyFormat object itself.
     */
    public TargetObjectKeyFormat withPartitionedPrefix(PartitionedPrefix partitionedPrefix) {
        this.partitionedPrefix = partitionedPrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (partitionedPrefix() != null) {
            partitionedPrefix().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("simplePrefix", this.simplePrefix);
        jsonWriter.writeJsonField("partitionedPrefix", this.partitionedPrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetObjectKeyFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetObjectKeyFormat if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetObjectKeyFormat.
     */
    public static TargetObjectKeyFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetObjectKeyFormat deserializedTargetObjectKeyFormat = new TargetObjectKeyFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("simplePrefix".equals(fieldName)) {
                    deserializedTargetObjectKeyFormat.simplePrefix = reader.readUntyped();
                } else if ("partitionedPrefix".equals(fieldName)) {
                    deserializedTargetObjectKeyFormat.partitionedPrefix = PartitionedPrefix.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetObjectKeyFormat;
        });
    }
}
