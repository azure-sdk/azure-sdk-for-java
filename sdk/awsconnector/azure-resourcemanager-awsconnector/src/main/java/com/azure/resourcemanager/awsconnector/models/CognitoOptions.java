// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CognitoOptions.
 */
@Fluent
public final class CognitoOptions implements JsonSerializable<CognitoOptions> {
    /*
     * <p>Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards.</p>
     */
    private Boolean enabled;

    /*
     * <p>The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards
     * authentication.</p>
     */
    private String identityPoolId;

    /*
     * <p>The <code>AmazonOpenSearchServiceCognitoAccess</code> role that allows OpenSearch Service to configure your
     * user pool and identity pool.</p>
     */
    private String roleArn;

    /*
     * <p>The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards
     * authentication.</p>
     */
    private String userPoolId;

    /**
     * Creates an instance of CognitoOptions class.
     */
    public CognitoOptions() {
    }

    /**
     * Get the enabled property: &lt;p&gt;Whether to enable or disable Amazon Cognito authentication for OpenSearch
     * Dashboards.&lt;/p&gt;.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: &lt;p&gt;Whether to enable or disable Amazon Cognito authentication for OpenSearch
     * Dashboards.&lt;/p&gt;.
     * 
     * @param enabled the enabled value to set.
     * @return the CognitoOptions object itself.
     */
    public CognitoOptions withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the identityPoolId property: &lt;p&gt;The Amazon Cognito identity pool ID that you want OpenSearch Service to
     * use for OpenSearch Dashboards authentication.&lt;/p&gt;.
     * 
     * @return the identityPoolId value.
     */
    public String identityPoolId() {
        return this.identityPoolId;
    }

    /**
     * Set the identityPoolId property: &lt;p&gt;The Amazon Cognito identity pool ID that you want OpenSearch Service to
     * use for OpenSearch Dashboards authentication.&lt;/p&gt;.
     * 
     * @param identityPoolId the identityPoolId value to set.
     * @return the CognitoOptions object itself.
     */
    public CognitoOptions withIdentityPoolId(String identityPoolId) {
        this.identityPoolId = identityPoolId;
        return this;
    }

    /**
     * Get the roleArn property: &lt;p&gt;The &lt;code&gt;AmazonOpenSearchServiceCognitoAccess&lt;/code&gt; role that
     * allows OpenSearch Service to configure your user pool and identity pool.&lt;/p&gt;.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: &lt;p&gt;The &lt;code&gt;AmazonOpenSearchServiceCognitoAccess&lt;/code&gt; role that
     * allows OpenSearch Service to configure your user pool and identity pool.&lt;/p&gt;.
     * 
     * @param roleArn the roleArn value to set.
     * @return the CognitoOptions object itself.
     */
    public CognitoOptions withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Get the userPoolId property: &lt;p&gt;The Amazon Cognito user pool ID that you want OpenSearch Service to use for
     * OpenSearch Dashboards authentication.&lt;/p&gt;.
     * 
     * @return the userPoolId value.
     */
    public String userPoolId() {
        return this.userPoolId;
    }

    /**
     * Set the userPoolId property: &lt;p&gt;The Amazon Cognito user pool ID that you want OpenSearch Service to use for
     * OpenSearch Dashboards authentication.&lt;/p&gt;.
     * 
     * @param userPoolId the userPoolId value to set.
     * @return the CognitoOptions object itself.
     */
    public CognitoOptions withUserPoolId(String userPoolId) {
        this.userPoolId = userPoolId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("identityPoolId", this.identityPoolId);
        jsonWriter.writeStringField("roleArn", this.roleArn);
        jsonWriter.writeStringField("userPoolId", this.userPoolId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CognitoOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CognitoOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CognitoOptions.
     */
    public static CognitoOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CognitoOptions deserializedCognitoOptions = new CognitoOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedCognitoOptions.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("identityPoolId".equals(fieldName)) {
                    deserializedCognitoOptions.identityPoolId = reader.getString();
                } else if ("roleArn".equals(fieldName)) {
                    deserializedCognitoOptions.roleArn = reader.getString();
                } else if ("userPoolId".equals(fieldName)) {
                    deserializedCognitoOptions.userPoolId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCognitoOptions;
        });
    }
}
