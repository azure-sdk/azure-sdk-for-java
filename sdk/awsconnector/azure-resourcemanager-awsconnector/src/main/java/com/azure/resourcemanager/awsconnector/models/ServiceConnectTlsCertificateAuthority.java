// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ServiceConnectTlsCertificateAuthority.
 */
@Fluent
public final class ServiceConnectTlsCertificateAuthority
    implements JsonSerializable<ServiceConnectTlsCertificateAuthority> {
    /*
     * The ARN of the AWS Private Certificate Authority certificate.
     */
    private String awsPcaAuthorityArn;

    /**
     * Creates an instance of ServiceConnectTlsCertificateAuthority class.
     */
    public ServiceConnectTlsCertificateAuthority() {
    }

    /**
     * Get the awsPcaAuthorityArn property: The ARN of the AWS Private Certificate Authority certificate.
     * 
     * @return the awsPcaAuthorityArn value.
     */
    public String awsPcaAuthorityArn() {
        return this.awsPcaAuthorityArn;
    }

    /**
     * Set the awsPcaAuthorityArn property: The ARN of the AWS Private Certificate Authority certificate.
     * 
     * @param awsPcaAuthorityArn the awsPcaAuthorityArn value to set.
     * @return the ServiceConnectTlsCertificateAuthority object itself.
     */
    public ServiceConnectTlsCertificateAuthority withAwsPcaAuthorityArn(String awsPcaAuthorityArn) {
        this.awsPcaAuthorityArn = awsPcaAuthorityArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("awsPcaAuthorityArn", this.awsPcaAuthorityArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConnectTlsCertificateAuthority from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConnectTlsCertificateAuthority if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceConnectTlsCertificateAuthority.
     */
    public static ServiceConnectTlsCertificateAuthority fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConnectTlsCertificateAuthority deserializedServiceConnectTlsCertificateAuthority
                = new ServiceConnectTlsCertificateAuthority();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("awsPcaAuthorityArn".equals(fieldName)) {
                    deserializedServiceConnectTlsCertificateAuthority.awsPcaAuthorityArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConnectTlsCertificateAuthority;
        });
    }
}
