// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of awsIamMFADevice.
 */
@Fluent
public final class AwsIamMfaDeviceProperties implements JsonSerializable<AwsIamMfaDeviceProperties> {
    /*
     * <p>The date when the MFA device was enabled for the user.</p>
     */
    private OffsetDateTime enableDate;

    /*
     * <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the
     * device ARN.</p>
     */
    private String serialNumber;

    /*
     * <p>The user with whom the MFA device is associated.</p>
     */
    private String username;

    /**
     * Creates an instance of AwsIamMfaDeviceProperties class.
     */
    public AwsIamMfaDeviceProperties() {
    }

    /**
     * Get the enableDate property: &lt;p&gt;The date when the MFA device was enabled for the user.&lt;/p&gt;.
     * 
     * @return the enableDate value.
     */
    public OffsetDateTime enableDate() {
        return this.enableDate;
    }

    /**
     * Set the enableDate property: &lt;p&gt;The date when the MFA device was enabled for the user.&lt;/p&gt;.
     * 
     * @param enableDate the enableDate value to set.
     * @return the AwsIamMfaDeviceProperties object itself.
     */
    public AwsIamMfaDeviceProperties withEnableDate(OffsetDateTime enableDate) {
        this.enableDate = enableDate;
        return this;
    }

    /**
     * Get the serialNumber property: &lt;p&gt;The serial number that uniquely identifies the MFA device. For virtual
     * MFA devices, the serial number is the device ARN.&lt;/p&gt;.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: &lt;p&gt;The serial number that uniquely identifies the MFA device. For virtual
     * MFA devices, the serial number is the device ARN.&lt;/p&gt;.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the AwsIamMfaDeviceProperties object itself.
     */
    public AwsIamMfaDeviceProperties withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the username property: &lt;p&gt;The user with whom the MFA device is associated.&lt;/p&gt;.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: &lt;p&gt;The user with whom the MFA device is associated.&lt;/p&gt;.
     * 
     * @param username the username value to set.
     * @return the AwsIamMfaDeviceProperties object itself.
     */
    public AwsIamMfaDeviceProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enableDate",
            this.enableDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.enableDate));
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("userName", this.username);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamMfaDeviceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamMfaDeviceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamMfaDeviceProperties.
     */
    public static AwsIamMfaDeviceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamMfaDeviceProperties deserializedAwsIamMfaDeviceProperties = new AwsIamMfaDeviceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableDate".equals(fieldName)) {
                    deserializedAwsIamMfaDeviceProperties.enableDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedAwsIamMfaDeviceProperties.serialNumber = reader.getString();
                } else if ("userName".equals(fieldName)) {
                    deserializedAwsIamMfaDeviceProperties.username = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamMfaDeviceProperties;
        });
    }
}
