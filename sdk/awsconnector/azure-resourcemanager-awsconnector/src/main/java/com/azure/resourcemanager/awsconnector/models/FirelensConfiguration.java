// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FirelensConfiguration.
 */
@Fluent
public final class FirelensConfiguration implements JsonSerializable<FirelensConfiguration> {
    /*
     * The options to use when configuring the log router. This field is optional and can be used to add additional
     * metadata, such as the task, task definition, cluster, and container instance details to the log event. If
     * specified, valid option keys are: + ``enable-ecs-log-metadata``, which can be ``true`` or ``false`` +
     * ``config-file-type``, which can be ``s3`` or ``file`` + ``config-file-value``, which is either an S3 ARN or a
     * file path
     */
    private Object options;

    /*
     * The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
     */
    private String type;

    /**
     * Creates an instance of FirelensConfiguration class.
     */
    public FirelensConfiguration() {
    }

    /**
     * Get the options property: The options to use when configuring the log router. This field is optional and can be
     * used to add additional metadata, such as the task, task definition, cluster, and container instance details to
     * the log event. If specified, valid option keys are: + ``enable-ecs-log-metadata``, which can be ``true`` or
     * ``false`` + ``config-file-type``, which can be ``s3`` or ``file`` + ``config-file-value``, which is either an S3
     * ARN or a file path.
     * 
     * @return the options value.
     */
    public Object options() {
        return this.options;
    }

    /**
     * Set the options property: The options to use when configuring the log router. This field is optional and can be
     * used to add additional metadata, such as the task, task definition, cluster, and container instance details to
     * the log event. If specified, valid option keys are: + ``enable-ecs-log-metadata``, which can be ``true`` or
     * ``false`` + ``config-file-type``, which can be ``s3`` or ``file`` + ``config-file-value``, which is either an S3
     * ARN or a file path.
     * 
     * @param options the options value to set.
     * @return the FirelensConfiguration object itself.
     */
    public FirelensConfiguration withOptions(Object options) {
        this.options = options;
        return this;
    }

    /**
     * Get the type property: The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
     * 
     * @param type the type value to set.
     * @return the FirelensConfiguration object itself.
     */
    public FirelensConfiguration withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("options", this.options);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FirelensConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FirelensConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FirelensConfiguration.
     */
    public static FirelensConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FirelensConfiguration deserializedFirelensConfiguration = new FirelensConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("options".equals(fieldName)) {
                    deserializedFirelensConfiguration.options = reader.readUntyped();
                } else if ("type".equals(fieldName)) {
                    deserializedFirelensConfiguration.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFirelensConfiguration;
        });
    }
}
