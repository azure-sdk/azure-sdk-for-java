// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Destination.
 */
@Fluent
public final class Destination implements JsonSerializable<Destination> {
    /*
     * The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated
     * before exporting data. Although this value is optional, we strongly recommend that you set it to help prevent
     * problems if the destination bucket ownership changes.
     */
    private String bucketAccountId;

    /*
     * The Amazon Resource Name (ARN) of the bucket to which data is exported.
     */
    private String bucketArn;

    /*
     * Specifies the file format used when exporting data to Amazon S3. *Allowed values*: ``CSV`` | ``ORC`` |
     * ``Parquet``
     */
    private DestinationFormat format;

    /*
     * The prefix to use when exporting data. The prefix is prepended to all results.
     */
    private String prefix;

    /**
     * Creates an instance of Destination class.
     */
    public Destination() {
    }

    /**
     * Get the bucketAccountId property: The account ID that owns the destination S3 bucket. If no account ID is
     * provided, the owner is not validated before exporting data. Although this value is optional, we strongly
     * recommend that you set it to help prevent problems if the destination bucket ownership changes.
     * 
     * @return the bucketAccountId value.
     */
    public String bucketAccountId() {
        return this.bucketAccountId;
    }

    /**
     * Set the bucketAccountId property: The account ID that owns the destination S3 bucket. If no account ID is
     * provided, the owner is not validated before exporting data. Although this value is optional, we strongly
     * recommend that you set it to help prevent problems if the destination bucket ownership changes.
     * 
     * @param bucketAccountId the bucketAccountId value to set.
     * @return the Destination object itself.
     */
    public Destination withBucketAccountId(String bucketAccountId) {
        this.bucketAccountId = bucketAccountId;
        return this;
    }

    /**
     * Get the bucketArn property: The Amazon Resource Name (ARN) of the bucket to which data is exported.
     * 
     * @return the bucketArn value.
     */
    public String bucketArn() {
        return this.bucketArn;
    }

    /**
     * Set the bucketArn property: The Amazon Resource Name (ARN) of the bucket to which data is exported.
     * 
     * @param bucketArn the bucketArn value to set.
     * @return the Destination object itself.
     */
    public Destination withBucketArn(String bucketArn) {
        this.bucketArn = bucketArn;
        return this;
    }

    /**
     * Get the format property: Specifies the file format used when exporting data to Amazon S3. *Allowed values*:
     * ``CSV`` | ``ORC`` | ``Parquet``.
     * 
     * @return the format value.
     */
    public DestinationFormat format() {
        return this.format;
    }

    /**
     * Set the format property: Specifies the file format used when exporting data to Amazon S3. *Allowed values*:
     * ``CSV`` | ``ORC`` | ``Parquet``.
     * 
     * @param format the format value to set.
     * @return the Destination object itself.
     */
    public Destination withFormat(DestinationFormat format) {
        this.format = format;
        return this;
    }

    /**
     * Get the prefix property: The prefix to use when exporting data. The prefix is prepended to all results.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: The prefix to use when exporting data. The prefix is prepended to all results.
     * 
     * @param prefix the prefix value to set.
     * @return the Destination object itself.
     */
    public Destination withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bucketAccountId", this.bucketAccountId);
        jsonWriter.writeStringField("bucketArn", this.bucketArn);
        jsonWriter.writeStringField("format", this.format == null ? null : this.format.toString());
        jsonWriter.writeStringField("prefix", this.prefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Destination from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Destination if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Destination.
     */
    public static Destination fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Destination deserializedDestination = new Destination();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucketAccountId".equals(fieldName)) {
                    deserializedDestination.bucketAccountId = reader.getString();
                } else if ("bucketArn".equals(fieldName)) {
                    deserializedDestination.bucketArn = reader.getString();
                } else if ("format".equals(fieldName)) {
                    deserializedDestination.format = DestinationFormat.fromString(reader.getString());
                } else if ("prefix".equals(fieldName)) {
                    deserializedDestination.prefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDestination;
        });
    }
}
