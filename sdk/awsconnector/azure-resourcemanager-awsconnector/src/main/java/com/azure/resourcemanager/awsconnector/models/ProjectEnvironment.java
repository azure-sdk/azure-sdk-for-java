// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ProjectEnvironment.
 */
@Fluent
public final class ProjectEnvironment implements JsonSerializable<ProjectEnvironment> {
    /*
     * <p>The ARN of the Amazon S3 bucket, path prefix, and object key that contains the PEM-encoded certificate for the
     * build project. For more information, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/create-project-cli.html#cli.environment.certificate'
     * >certificate</a> in the <i>CodeBuild User Guide</i>.</p>
     */
    private String certificate;

    /*
     * <p>Information about the compute resources the build project uses. Available values include:</p> <ul> <li> <p>
     * <code>BUILD_GENERAL1_SMALL</code>: Use up to 3 GB memory and 2 vCPUs for builds.</p> </li> <li> <p>
     * <code>BUILD_GENERAL1_MEDIUM</code>: Use up to 7 GB memory and 4 vCPUs for builds.</p> </li> <li> <p>
     * <code>BUILD_GENERAL1_LARGE</code>: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment
     * type.</p> </li> <li> <p> <code>BUILD_GENERAL1_XLARGE</code>: Use up to 70 GB memory and 36 vCPUs for builds,
     * depending on your environment type.</p> </li> <li> <p> <code>BUILD_GENERAL1_2XLARGE</code>: Use up to 145 GB
     * memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB
     * uncompressed.</p> </li> <li> <p> <code>BUILD_LAMBDA_1GB</code>: Use up to 1 GB memory for builds. Only available
     * for environment type <code>LINUX_LAMBDA_CONTAINER</code> and <code>ARM_LAMBDA_CONTAINER</code>.</p> </li> <li>
     * <p> <code>BUILD_LAMBDA_2GB</code>: Use up to 2 GB memory for builds. Only available for environment type
     * <code>LINUX_LAMBDA_CONTAINER</code> and <code>ARM_LAMBDA_CONTAINER</code>.</p> </li> <li> <p>
     * <code>BUILD_LAMBDA_4GB</code>: Use up to 4 GB memory for builds. Only available for environment type
     * <code>LINUX_LAMBDA_CONTAINER</code> and <code>ARM_LAMBDA_CONTAINER</code>.</p> </li> <li> <p>
     * <code>BUILD_LAMBDA_8GB</code>: Use up to 8 GB memory for builds. Only available for environment type
     * <code>LINUX_LAMBDA_CONTAINER</code> and <code>ARM_LAMBDA_CONTAINER</code>.</p> </li> <li> <p>
     * <code>BUILD_LAMBDA_10GB</code>: Use up to 10 GB memory for builds. Only available for environment type
     * <code>LINUX_LAMBDA_CONTAINER</code> and <code>ARM_LAMBDA_CONTAINER</code>.</p> </li> </ul> <p> If you use
     * <code>BUILD_GENERAL1_SMALL</code>: </p> <ul> <li> <p> For environment type <code>LINUX_CONTAINER</code>, you can
     * use up to 3 GB memory and 2 vCPUs for builds. </p> </li> <li> <p> For environment type
     * <code>LINUX_GPU_CONTAINER</code>, you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for
     * builds.</p> </li> <li> <p> For environment type <code>ARM_CONTAINER</code>, you can use up to 4 GB memory and 2
     * vCPUs on ARM-based processors for builds.</p> </li> </ul> <p> If you use <code>BUILD_GENERAL1_LARGE</code>: </p>
     * <ul> <li> <p> For environment type <code>LINUX_CONTAINER</code>, you can use up to 15 GB memory and 8 vCPUs for
     * builds. </p> </li> <li> <p> For environment type <code>LINUX_GPU_CONTAINER</code>, you can use up to 255 GB
     * memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.</p> </li> <li> <p> For environment type
     * <code>ARM_CONTAINER</code>, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.</p>
     * </li> </ul> <note> <p>If you're using compute fleets during project creation, <code>computeType</code> will be
     * ignored.</p> </note> <p>For more information, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'>Build Environment
     * Compute Types</a> in the <i>CodeBuild User Guide.</i> </p>
     */
    private ComputeTypeEnumValue computeType;

    /*
     * <p>A set of environment variables to make available to builds for this build project.</p>
     */
    private List<EnvironmentVariable> environmentVariables;

    /*
     * <p>A ProjectFleet object to use for this build project.</p>
     */
    private ProjectFleet fleet;

    /*
     * <p>The image tag or image digest that identifies the Docker image to use for this build project. Use the
     * following formats:</p> <ul> <li> <p>For an image tag:
     * <code>&lt;registry&gt;/&lt;repository&gt;:&lt;tag&gt;</code>. For example, in the Docker repository that
     * CodeBuild uses to manage its Docker images, this would be <code>aws/codebuild/standard:4.0</code>. </p> </li>
     * <li> <p>For an image digest: <code>&lt;registry&gt;/&lt;repository&gt;@&lt;digest&gt;</code>. For example, to
     * specify an image with the digest 'sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf,' use
     * <code>&lt;registry&gt;/&lt;repository&gt;@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf
     * </code>.</p> </li> </ul> <p>For more information, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html'>Docker images provided
     * by CodeBuild</a> in the <i>CodeBuild user guide</i>.</p>
     */
    private String image;

    /*
     * <p> The type of credentials CodeBuild uses to pull images in your build. There are two valid values: </p> <ul>
     * <li> <p> <code>CODEBUILD</code> specifies that CodeBuild uses its own credentials. This requires that you modify
     * your ECR repository policy to trust CodeBuild service principal. </p> </li> <li> <p> <code>SERVICE_ROLE</code>
     * specifies that CodeBuild uses your build project's service role. </p> </li> </ul> <p> When you use a
     * cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an CodeBuild curated
     * image, you must use CODEBUILD credentials. </p>
     */
    private ImagePullCredentialsTypeEnumValue imagePullCredentialsType;

    /*
     * <p>Enables running the Docker daemon inside a Docker container. Set to true only if the build project is used to
     * build Docker images. Otherwise, a build that attempts to interact with the Docker daemon fails. The default
     * setting is <code>false</code>.</p> <p>You can initialize the Docker daemon during the install phase of your build
     * by adding one of the following sets of commands to the install phase of your buildspec file:</p> <p>If the
     * operating system's base image is Ubuntu Linux:</p> <p> <code>- nohup /usr/local/bin/dockerd
     * --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;</code> </p> <p>
     * <code>- timeout 15 sh -c 'until docker info; do echo .; sleep 1; done'</code> </p> <p>If the operating system's
     * base image is Alpine Linux and the previous command does not work, add the <code>-t</code> argument to
     * <code>timeout</code>:</p> <p> <code>- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock
     * --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;</code> </p> <p> <code>- timeout -t 15 sh -c 'until docker
     * info; do echo .; sleep 1; done'</code> </p>
     */
    private Boolean privilegedMode;

    /*
     * <p> The credentials for access to a private registry.</p>
     */
    private RegistryCredential registryCredential;

    /*
     * <p>The type of build environment to use for related builds.</p> <ul> <li> <p>The environment type
     * <code>ARM_CONTAINER</code> is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon),
     * EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Sydney), and EU (Frankfurt).</p> </li>
     * <li> <p>The environment type <code>LINUX_CONTAINER</code> is available only in regions US East (N. Virginia), US
     * East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo),
     * Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China (Ningxia).</p>
     * </li> <li> <p>The environment type <code>LINUX_GPU_CONTAINER</code> is available only in regions US East (N.
     * Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia
     * Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney) , China (Beijing), and
     * China (Ningxia).</p> </li> </ul> <ul> <li> <p>The environment types <code>ARM_LAMBDA_CONTAINER</code> and
     * <code>LINUX_LAMBDA_CONTAINER</code> are available only in regions US East (N. Virginia), US East (Ohio), US West
     * (Oregon), Asia Pacific (Mumbai), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), EU
     * (Frankfurt), EU (Ireland), and South America (SÃ£o Paulo).</p> </li> </ul> <ul> <li> <p>The environment types
     * <code>WINDOWS_CONTAINER</code> and <code>WINDOWS_SERVER_2019_CONTAINER</code> are available only in regions US
     * East (N. Virginia), US East (Ohio), US West (Oregon), and EU (Ireland).</p> </li> </ul> <note> <p>If you're using
     * compute fleets during project creation, <code>type</code> will be ignored.</p> </note> <p>For more information,
     * see <a href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'>Build
     * environment compute types</a> in the <i>CodeBuild user guide</i>.</p>
     */
    private EnvironmentTypeEnumValue type;

    /**
     * Creates an instance of ProjectEnvironment class.
     */
    public ProjectEnvironment() {
    }

    /**
     * Get the certificate property: &lt;p&gt;The ARN of the Amazon S3 bucket, path prefix, and object key that contains
     * the PEM-encoded certificate for the build project. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/create-project-cli.html#cli.environment.certificate'&gt;certificate&lt;/a&gt;
     * in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the certificate value.
     */
    public String certificate() {
        return this.certificate;
    }

    /**
     * Set the certificate property: &lt;p&gt;The ARN of the Amazon S3 bucket, path prefix, and object key that contains
     * the PEM-encoded certificate for the build project. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/create-project-cli.html#cli.environment.certificate'&gt;certificate&lt;/a&gt;
     * in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param certificate the certificate value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withCertificate(String certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Get the computeType property: &lt;p&gt;Information about the compute resources the build project uses. Available
     * values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_GENERAL1_SMALL&lt;/code&gt;: Use up
     * to 3 GB memory and 2 vCPUs for builds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_GENERAL1_MEDIUM&lt;/code&gt;: Use up to 7 GB memory and 4 vCPUs for builds.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_GENERAL1_LARGE&lt;/code&gt;: Use up to 16 GB memory and 8
     * vCPUs for builds, depending on your environment type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_GENERAL1_XLARGE&lt;/code&gt;: Use up to 70 GB memory and 36 vCPUs for builds, depending on your
     * environment type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_GENERAL1_2XLARGE&lt;/code&gt;: Use
     * up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up
     * to 100 GB uncompressed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_LAMBDA_1GB&lt;/code&gt;: Use
     * up to 1 GB memory for builds. Only available for environment type &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt;
     * and &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_LAMBDA_2GB&lt;/code&gt;: Use up to 2 GB memory for builds. Only available for environment type
     * &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_LAMBDA_4GB&lt;/code&gt;: Use up to 4 GB memory for builds.
     * Only available for environment type &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_LAMBDA_8GB&lt;/code&gt;: Use up to 8 GB memory for builds. Only available for environment type
     * &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_LAMBDA_10GB&lt;/code&gt;: Use up to 10 GB memory for builds.
     * Only available for environment type &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you use
     * &lt;code&gt;BUILD_GENERAL1_SMALL&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For environment type
     * &lt;code&gt;LINUX_CONTAINER&lt;/code&gt;, you can use up to 3 GB memory and 2 vCPUs for builds. &lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; For environment type &lt;code&gt;LINUX_GPU_CONTAINER&lt;/code&gt;, you can use
     * up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; For environment type &lt;code&gt;ARM_CONTAINER&lt;/code&gt;, you can use up to 4 GB memory and 2 vCPUs
     * on ARM-based processors for builds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you use
     * &lt;code&gt;BUILD_GENERAL1_LARGE&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For environment type
     * &lt;code&gt;LINUX_CONTAINER&lt;/code&gt;, you can use up to 15 GB memory and 8 vCPUs for builds. &lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; For environment type &lt;code&gt;LINUX_GPU_CONTAINER&lt;/code&gt;, you can use
     * up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; For environment type &lt;code&gt;ARM_CONTAINER&lt;/code&gt;, you can use up to 16 GB memory and 8 vCPUs
     * on ARM-based processors for builds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;If you're using
     * compute fleets during project creation, &lt;code&gt;computeType&lt;/code&gt; will be ignored.&lt;/p&gt;
     * &lt;/note&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'&gt;Build
     * Environment Compute Types&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide.&lt;/i&gt; &lt;/p&gt;.
     * 
     * @return the computeType value.
     */
    public ComputeTypeEnumValue computeType() {
        return this.computeType;
    }

    /**
     * Set the computeType property: &lt;p&gt;Information about the compute resources the build project uses. Available
     * values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_GENERAL1_SMALL&lt;/code&gt;: Use up
     * to 3 GB memory and 2 vCPUs for builds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_GENERAL1_MEDIUM&lt;/code&gt;: Use up to 7 GB memory and 4 vCPUs for builds.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_GENERAL1_LARGE&lt;/code&gt;: Use up to 16 GB memory and 8
     * vCPUs for builds, depending on your environment type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_GENERAL1_XLARGE&lt;/code&gt;: Use up to 70 GB memory and 36 vCPUs for builds, depending on your
     * environment type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_GENERAL1_2XLARGE&lt;/code&gt;: Use
     * up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up
     * to 100 GB uncompressed.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_LAMBDA_1GB&lt;/code&gt;: Use
     * up to 1 GB memory for builds. Only available for environment type &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt;
     * and &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_LAMBDA_2GB&lt;/code&gt;: Use up to 2 GB memory for builds. Only available for environment type
     * &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_LAMBDA_4GB&lt;/code&gt;: Use up to 4 GB memory for builds.
     * Only available for environment type &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;BUILD_LAMBDA_8GB&lt;/code&gt;: Use up to 8 GB memory for builds. Only available for environment type
     * &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BUILD_LAMBDA_10GB&lt;/code&gt;: Use up to 10 GB memory for builds.
     * Only available for environment type &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you use
     * &lt;code&gt;BUILD_GENERAL1_SMALL&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For environment type
     * &lt;code&gt;LINUX_CONTAINER&lt;/code&gt;, you can use up to 3 GB memory and 2 vCPUs for builds. &lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; For environment type &lt;code&gt;LINUX_GPU_CONTAINER&lt;/code&gt;, you can use
     * up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; For environment type &lt;code&gt;ARM_CONTAINER&lt;/code&gt;, you can use up to 4 GB memory and 2 vCPUs
     * on ARM-based processors for builds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you use
     * &lt;code&gt;BUILD_GENERAL1_LARGE&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For environment type
     * &lt;code&gt;LINUX_CONTAINER&lt;/code&gt;, you can use up to 15 GB memory and 8 vCPUs for builds. &lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; For environment type &lt;code&gt;LINUX_GPU_CONTAINER&lt;/code&gt;, you can use
     * up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; For environment type &lt;code&gt;ARM_CONTAINER&lt;/code&gt;, you can use up to 16 GB memory and 8 vCPUs
     * on ARM-based processors for builds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;If you're using
     * compute fleets during project creation, &lt;code&gt;computeType&lt;/code&gt; will be ignored.&lt;/p&gt;
     * &lt;/note&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'&gt;Build
     * Environment Compute Types&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide.&lt;/i&gt; &lt;/p&gt;.
     * 
     * @param computeType the computeType value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withComputeType(ComputeTypeEnumValue computeType) {
        this.computeType = computeType;
        return this;
    }

    /**
     * Get the environmentVariables property: &lt;p&gt;A set of environment variables to make available to builds for
     * this build project.&lt;/p&gt;.
     * 
     * @return the environmentVariables value.
     */
    public List<EnvironmentVariable> environmentVariables() {
        return this.environmentVariables;
    }

    /**
     * Set the environmentVariables property: &lt;p&gt;A set of environment variables to make available to builds for
     * this build project.&lt;/p&gt;.
     * 
     * @param environmentVariables the environmentVariables value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
        this.environmentVariables = environmentVariables;
        return this;
    }

    /**
     * Get the fleet property: &lt;p&gt;A ProjectFleet object to use for this build project.&lt;/p&gt;.
     * 
     * @return the fleet value.
     */
    public ProjectFleet fleet() {
        return this.fleet;
    }

    /**
     * Set the fleet property: &lt;p&gt;A ProjectFleet object to use for this build project.&lt;/p&gt;.
     * 
     * @param fleet the fleet value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withFleet(ProjectFleet fleet) {
        this.fleet = fleet;
        return this;
    }

    /**
     * Get the image property: &lt;p&gt;The image tag or image digest that identifies the Docker image to use for this
     * build project. Use the following formats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For an image tag:
     * &lt;code&gt;&amp;lt;registry&amp;gt;/&amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt;. For example, in
     * the Docker repository that CodeBuild uses to manage its Docker images, this would be
     * &lt;code&gt;aws/codebuild/standard:4.0&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an image
     * digest: &lt;code&gt;&amp;lt;registry&amp;gt;/&amp;lt;repository&amp;gt;&#064;&amp;lt;digest&amp;gt;&lt;/code&gt;.
     * For example, to specify an image with the digest
     * 'sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf,' use
     * &lt;code&gt;&amp;lt;registry&amp;gt;/&amp;lt;repository&amp;gt;&#064;sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf&lt;/code&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html'&gt;Docker images
     * provided by CodeBuild&lt;/a&gt; in the &lt;i&gt;CodeBuild user guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Set the image property: &lt;p&gt;The image tag or image digest that identifies the Docker image to use for this
     * build project. Use the following formats:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For an image tag:
     * &lt;code&gt;&amp;lt;registry&amp;gt;/&amp;lt;repository&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt;. For example, in
     * the Docker repository that CodeBuild uses to manage its Docker images, this would be
     * &lt;code&gt;aws/codebuild/standard:4.0&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an image
     * digest: &lt;code&gt;&amp;lt;registry&amp;gt;/&amp;lt;repository&amp;gt;&#064;&amp;lt;digest&amp;gt;&lt;/code&gt;.
     * For example, to specify an image with the digest
     * 'sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf,' use
     * &lt;code&gt;&amp;lt;registry&amp;gt;/&amp;lt;repository&amp;gt;&#064;sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf&lt;/code&gt;.&lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html'&gt;Docker images
     * provided by CodeBuild&lt;/a&gt; in the &lt;i&gt;CodeBuild user guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param image the image value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withImage(String image) {
        this.image = image;
        return this;
    }

    /**
     * Get the imagePullCredentialsType property: &lt;p&gt; The type of credentials CodeBuild uses to pull images in
     * your build. There are two valid values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;CODEBUILD&lt;/code&gt; specifies that CodeBuild uses its own credentials. This requires that you
     * modify your ECR repository policy to trust CodeBuild service principal. &lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;SERVICE_ROLE&lt;/code&gt; specifies that CodeBuild uses your build project's service role.
     * &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; When you use a cross-account or private registry image, you must use
     * SERVICE_ROLE credentials. When you use an CodeBuild curated image, you must use CODEBUILD credentials.
     * &lt;/p&gt;.
     * 
     * @return the imagePullCredentialsType value.
     */
    public ImagePullCredentialsTypeEnumValue imagePullCredentialsType() {
        return this.imagePullCredentialsType;
    }

    /**
     * Set the imagePullCredentialsType property: &lt;p&gt; The type of credentials CodeBuild uses to pull images in
     * your build. There are two valid values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;CODEBUILD&lt;/code&gt; specifies that CodeBuild uses its own credentials. This requires that you
     * modify your ECR repository policy to trust CodeBuild service principal. &lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;SERVICE_ROLE&lt;/code&gt; specifies that CodeBuild uses your build project's service role.
     * &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; When you use a cross-account or private registry image, you must use
     * SERVICE_ROLE credentials. When you use an CodeBuild curated image, you must use CODEBUILD credentials.
     * &lt;/p&gt;.
     * 
     * @param imagePullCredentialsType the imagePullCredentialsType value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withImagePullCredentialsType(ImagePullCredentialsTypeEnumValue imagePullCredentialsType) {
        this.imagePullCredentialsType = imagePullCredentialsType;
        return this;
    }

    /**
     * Get the privilegedMode property: &lt;p&gt;Enables running the Docker daemon inside a Docker container. Set to
     * true only if the build project is used to build Docker images. Otherwise, a build that attempts to interact with
     * the Docker daemon fails. The default setting is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can
     * initialize the Docker daemon during the install phase of your build by adding one of the following sets of
     * commands to the install phase of your buildspec file:&lt;/p&gt; &lt;p&gt;If the operating system's base image is
     * Ubuntu Linux:&lt;/p&gt; &lt;p&gt; &lt;code&gt;- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock
     * --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;amp;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;-
     * timeout 15 sh -c 'until docker info; do echo .; sleep 1; done'&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If the operating
     * system's base image is Alpine Linux and the previous command does not work, add the &lt;code&gt;-t&lt;/code&gt;
     * argument to &lt;code&gt;timeout&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;- nohup /usr/local/bin/dockerd
     * --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;amp;&lt;/code&gt;
     * &lt;/p&gt; &lt;p&gt; &lt;code&gt;- timeout -t 15 sh -c 'until docker info; do echo .; sleep 1; done'&lt;/code&gt;
     * &lt;/p&gt;.
     * 
     * @return the privilegedMode value.
     */
    public Boolean privilegedMode() {
        return this.privilegedMode;
    }

    /**
     * Set the privilegedMode property: &lt;p&gt;Enables running the Docker daemon inside a Docker container. Set to
     * true only if the build project is used to build Docker images. Otherwise, a build that attempts to interact with
     * the Docker daemon fails. The default setting is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can
     * initialize the Docker daemon during the install phase of your build by adding one of the following sets of
     * commands to the install phase of your buildspec file:&lt;/p&gt; &lt;p&gt;If the operating system's base image is
     * Ubuntu Linux:&lt;/p&gt; &lt;p&gt; &lt;code&gt;- nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock
     * --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;amp;&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;-
     * timeout 15 sh -c 'until docker info; do echo .; sleep 1; done'&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If the operating
     * system's base image is Alpine Linux and the previous command does not work, add the &lt;code&gt;-t&lt;/code&gt;
     * argument to &lt;code&gt;timeout&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;- nohup /usr/local/bin/dockerd
     * --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;amp;&lt;/code&gt;
     * &lt;/p&gt; &lt;p&gt; &lt;code&gt;- timeout -t 15 sh -c 'until docker info; do echo .; sleep 1; done'&lt;/code&gt;
     * &lt;/p&gt;.
     * 
     * @param privilegedMode the privilegedMode value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withPrivilegedMode(Boolean privilegedMode) {
        this.privilegedMode = privilegedMode;
        return this;
    }

    /**
     * Get the registryCredential property: &lt;p&gt; The credentials for access to a private registry.&lt;/p&gt;.
     * 
     * @return the registryCredential value.
     */
    public RegistryCredential registryCredential() {
        return this.registryCredential;
    }

    /**
     * Set the registryCredential property: &lt;p&gt; The credentials for access to a private registry.&lt;/p&gt;.
     * 
     * @param registryCredential the registryCredential value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withRegistryCredential(RegistryCredential registryCredential) {
        this.registryCredential = registryCredential;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt;The type of build environment to use for related builds.&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt;The environment type &lt;code&gt;ARM_CONTAINER&lt;/code&gt; is available only in regions US
     * East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo),
     * Asia Pacific (Sydney), and EU (Frankfurt).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The environment type
     * &lt;code&gt;LINUX_CONTAINER&lt;/code&gt; is available only in regions US East (N. Virginia), US East (Ohio), US
     * West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific
     * (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China (Ningxia).&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt;The environment type &lt;code&gt;LINUX_GPU_CONTAINER&lt;/code&gt; is available
     * only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU
     * (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific
     * (Sydney) , China (Beijing), and China (Ningxia).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;The environment types &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; are available only in regions US East (N. Virginia), US East
     * (Ohio), US West (Oregon), Asia Pacific (Mumbai), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific
     * (Tokyo), EU (Frankfurt), EU (Ireland), and South America (SÃ£o Paulo).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt;The environment types &lt;code&gt;WINDOWS_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;WINDOWS_SERVER_2019_CONTAINER&lt;/code&gt; are available only in regions US East (N. Virginia), US
     * East (Ohio), US West (Oregon), and EU (Ireland).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;If
     * you're using compute fleets during project creation, &lt;code&gt;type&lt;/code&gt; will be ignored.&lt;/p&gt;
     * &lt;/note&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'&gt;Build
     * environment compute types&lt;/a&gt; in the &lt;i&gt;CodeBuild user guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the type value.
     */
    public EnvironmentTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt;The type of build environment to use for related builds.&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt;The environment type &lt;code&gt;ARM_CONTAINER&lt;/code&gt; is available only in regions US
     * East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo),
     * Asia Pacific (Sydney), and EU (Frankfurt).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The environment type
     * &lt;code&gt;LINUX_CONTAINER&lt;/code&gt; is available only in regions US East (N. Virginia), US East (Ohio), US
     * West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific
     * (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China (Ningxia).&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt;The environment type &lt;code&gt;LINUX_GPU_CONTAINER&lt;/code&gt; is available
     * only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU
     * (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific
     * (Sydney) , China (Beijing), and China (Ningxia).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;The environment types &lt;code&gt;ARM_LAMBDA_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;LINUX_LAMBDA_CONTAINER&lt;/code&gt; are available only in regions US East (N. Virginia), US East
     * (Ohio), US West (Oregon), Asia Pacific (Mumbai), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific
     * (Tokyo), EU (Frankfurt), EU (Ireland), and South America (SÃ£o Paulo).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt;The environment types &lt;code&gt;WINDOWS_CONTAINER&lt;/code&gt; and
     * &lt;code&gt;WINDOWS_SERVER_2019_CONTAINER&lt;/code&gt; are available only in regions US East (N. Virginia), US
     * East (Ohio), US West (Oregon), and EU (Ireland).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;If
     * you're using compute fleets during project creation, &lt;code&gt;type&lt;/code&gt; will be ignored.&lt;/p&gt;
     * &lt;/note&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'&gt;Build
     * environment compute types&lt;/a&gt; in the &lt;i&gt;CodeBuild user guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param type the type value to set.
     * @return the ProjectEnvironment object itself.
     */
    public ProjectEnvironment withType(EnvironmentTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (computeType() != null) {
            computeType().validate();
        }
        if (environmentVariables() != null) {
            environmentVariables().forEach(e -> e.validate());
        }
        if (fleet() != null) {
            fleet().validate();
        }
        if (imagePullCredentialsType() != null) {
            imagePullCredentialsType().validate();
        }
        if (registryCredential() != null) {
            registryCredential().validate();
        }
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificate", this.certificate);
        jsonWriter.writeJsonField("computeType", this.computeType);
        jsonWriter.writeArrayField("environmentVariables", this.environmentVariables,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("fleet", this.fleet);
        jsonWriter.writeStringField("image", this.image);
        jsonWriter.writeJsonField("imagePullCredentialsType", this.imagePullCredentialsType);
        jsonWriter.writeBooleanField("privilegedMode", this.privilegedMode);
        jsonWriter.writeJsonField("registryCredential", this.registryCredential);
        jsonWriter.writeJsonField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectEnvironment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectEnvironment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectEnvironment.
     */
    public static ProjectEnvironment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectEnvironment deserializedProjectEnvironment = new ProjectEnvironment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificate".equals(fieldName)) {
                    deserializedProjectEnvironment.certificate = reader.getString();
                } else if ("computeType".equals(fieldName)) {
                    deserializedProjectEnvironment.computeType = ComputeTypeEnumValue.fromJson(reader);
                } else if ("environmentVariables".equals(fieldName)) {
                    List<EnvironmentVariable> environmentVariables
                        = reader.readArray(reader1 -> EnvironmentVariable.fromJson(reader1));
                    deserializedProjectEnvironment.environmentVariables = environmentVariables;
                } else if ("fleet".equals(fieldName)) {
                    deserializedProjectEnvironment.fleet = ProjectFleet.fromJson(reader);
                } else if ("image".equals(fieldName)) {
                    deserializedProjectEnvironment.image = reader.getString();
                } else if ("imagePullCredentialsType".equals(fieldName)) {
                    deserializedProjectEnvironment.imagePullCredentialsType
                        = ImagePullCredentialsTypeEnumValue.fromJson(reader);
                } else if ("privilegedMode".equals(fieldName)) {
                    deserializedProjectEnvironment.privilegedMode = reader.getNullable(JsonReader::getBoolean);
                } else if ("registryCredential".equals(fieldName)) {
                    deserializedProjectEnvironment.registryCredential = RegistryCredential.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedProjectEnvironment.type = EnvironmentTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectEnvironment;
        });
    }
}
