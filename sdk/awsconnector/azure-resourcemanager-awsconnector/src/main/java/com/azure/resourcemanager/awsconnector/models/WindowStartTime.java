// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of WindowStartTime.
 */
@Fluent
public final class WindowStartTime implements JsonSerializable<WindowStartTime> {
    /*
     * <p>The start hour of the window in Coordinated Universal Time (UTC), using 24-hour time. For example,
     * <code>17</code> refers to 5:00 P.M. UTC.</p>
     */
    private Long hours;

    /*
     * <p>The start minute of the window, in UTC.</p>
     */
    private Long minutes;

    /**
     * Creates an instance of WindowStartTime class.
     */
    public WindowStartTime() {
    }

    /**
     * Get the hours property: &lt;p&gt;The start hour of the window in Coordinated Universal Time (UTC), using 24-hour
     * time. For example, &lt;code&gt;17&lt;/code&gt; refers to 5:00 P.M. UTC.&lt;/p&gt;.
     * 
     * @return the hours value.
     */
    public Long hours() {
        return this.hours;
    }

    /**
     * Set the hours property: &lt;p&gt;The start hour of the window in Coordinated Universal Time (UTC), using 24-hour
     * time. For example, &lt;code&gt;17&lt;/code&gt; refers to 5:00 P.M. UTC.&lt;/p&gt;.
     * 
     * @param hours the hours value to set.
     * @return the WindowStartTime object itself.
     */
    public WindowStartTime withHours(Long hours) {
        this.hours = hours;
        return this;
    }

    /**
     * Get the minutes property: &lt;p&gt;The start minute of the window, in UTC.&lt;/p&gt;.
     * 
     * @return the minutes value.
     */
    public Long minutes() {
        return this.minutes;
    }

    /**
     * Set the minutes property: &lt;p&gt;The start minute of the window, in UTC.&lt;/p&gt;.
     * 
     * @param minutes the minutes value to set.
     * @return the WindowStartTime object itself.
     */
    public WindowStartTime withMinutes(Long minutes) {
        this.minutes = minutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("hours", this.hours);
        jsonWriter.writeNumberField("minutes", this.minutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WindowStartTime from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WindowStartTime if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WindowStartTime.
     */
    public static WindowStartTime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WindowStartTime deserializedWindowStartTime = new WindowStartTime();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hours".equals(fieldName)) {
                    deserializedWindowStartTime.hours = reader.getNullable(JsonReader::getLong);
                } else if ("minutes".equals(fieldName)) {
                    deserializedWindowStartTime.minutes = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWindowStartTime;
        });
    }
}
