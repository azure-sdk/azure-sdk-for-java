// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Csv.
 */
@Fluent
public final class Csv implements JsonSerializable<Csv> {
    /*
     * The delimiter used for separating items in the CSV file being imported.
     */
    private String delimiter;

    /*
     * List of the headers used to specify a common header for all source CSV files being imported. If this field is
     * specified then the first line of each CSV file is treated as data instead of the header. If this field is not
     * specified the the first line of each CSV file is treated as the header.
     */
    private List<String> headerList;

    /**
     * Creates an instance of Csv class.
     */
    public Csv() {
    }

    /**
     * Get the delimiter property: The delimiter used for separating items in the CSV file being imported.
     * 
     * @return the delimiter value.
     */
    public String delimiter() {
        return this.delimiter;
    }

    /**
     * Set the delimiter property: The delimiter used for separating items in the CSV file being imported.
     * 
     * @param delimiter the delimiter value to set.
     * @return the Csv object itself.
     */
    public Csv withDelimiter(String delimiter) {
        this.delimiter = delimiter;
        return this;
    }

    /**
     * Get the headerList property: List of the headers used to specify a common header for all source CSV files being
     * imported. If this field is specified then the first line of each CSV file is treated as data instead of the
     * header. If this field is not specified the the first line of each CSV file is treated as the header.
     * 
     * @return the headerList value.
     */
    public List<String> headerList() {
        return this.headerList;
    }

    /**
     * Set the headerList property: List of the headers used to specify a common header for all source CSV files being
     * imported. If this field is specified then the first line of each CSV file is treated as data instead of the
     * header. If this field is not specified the the first line of each CSV file is treated as the header.
     * 
     * @param headerList the headerList value to set.
     * @return the Csv object itself.
     */
    public Csv withHeaderList(List<String> headerList) {
        this.headerList = headerList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("delimiter", this.delimiter);
        jsonWriter.writeArrayField("headerList", this.headerList, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Csv from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Csv if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Csv.
     */
    public static Csv fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Csv deserializedCsv = new Csv();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("delimiter".equals(fieldName)) {
                    deserializedCsv.delimiter = reader.getString();
                } else if ("headerList".equals(fieldName)) {
                    List<String> headerList = reader.readArray(reader1 -> reader1.getString());
                    deserializedCsv.headerList = headerList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCsv;
        });
    }
}
