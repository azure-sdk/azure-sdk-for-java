// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ProvisionedThroughput.
 */
@Fluent
public final class ProvisionedThroughput implements JsonSerializable<ProvisionedThroughput> {
    /*
     * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a
     * ``ThrottlingException``. For more information, see [Specifying Read and Write
     * Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the
     * *Amazon DynamoDB Developer Guide*. If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
     */
    private Integer readCapacityUnits;

    /*
     * The maximum number of writes consumed per second before DynamoDB returns a ``ThrottlingException``. For more
     * information, see [Specifying Read and Write
     * Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the
     * *Amazon DynamoDB Developer Guide*. If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
     */
    private Integer writeCapacityUnits;

    /**
     * Creates an instance of ProvisionedThroughput class.
     */
    public ProvisionedThroughput() {
    }

    /**
     * Get the readCapacityUnits property: The maximum number of strongly consistent reads consumed per second before
     * DynamoDB returns a ``ThrottlingException``. For more information, see [Specifying Read and Write
     * Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the
     * *Amazon DynamoDB Developer Guide*. If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
     * 
     * @return the readCapacityUnits value.
     */
    public Integer readCapacityUnits() {
        return this.readCapacityUnits;
    }

    /**
     * Set the readCapacityUnits property: The maximum number of strongly consistent reads consumed per second before
     * DynamoDB returns a ``ThrottlingException``. For more information, see [Specifying Read and Write
     * Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the
     * *Amazon DynamoDB Developer Guide*. If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
     * 
     * @param readCapacityUnits the readCapacityUnits value to set.
     * @return the ProvisionedThroughput object itself.
     */
    public ProvisionedThroughput withReadCapacityUnits(Integer readCapacityUnits) {
        this.readCapacityUnits = readCapacityUnits;
        return this;
    }

    /**
     * Get the writeCapacityUnits property: The maximum number of writes consumed per second before DynamoDB returns a
     * ``ThrottlingException``. For more information, see [Specifying Read and Write
     * Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the
     * *Amazon DynamoDB Developer Guide*. If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
     * 
     * @return the writeCapacityUnits value.
     */
    public Integer writeCapacityUnits() {
        return this.writeCapacityUnits;
    }

    /**
     * Set the writeCapacityUnits property: The maximum number of writes consumed per second before DynamoDB returns a
     * ``ThrottlingException``. For more information, see [Specifying Read and Write
     * Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the
     * *Amazon DynamoDB Developer Guide*. If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
     * 
     * @param writeCapacityUnits the writeCapacityUnits value to set.
     * @return the ProvisionedThroughput object itself.
     */
    public ProvisionedThroughput withWriteCapacityUnits(Integer writeCapacityUnits) {
        this.writeCapacityUnits = writeCapacityUnits;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("readCapacityUnits", this.readCapacityUnits);
        jsonWriter.writeNumberField("writeCapacityUnits", this.writeCapacityUnits);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProvisionedThroughput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProvisionedThroughput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProvisionedThroughput.
     */
    public static ProvisionedThroughput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProvisionedThroughput deserializedProvisionedThroughput = new ProvisionedThroughput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("readCapacityUnits".equals(fieldName)) {
                    deserializedProvisionedThroughput.readCapacityUnits = reader.getNullable(JsonReader::getInt);
                } else if ("writeCapacityUnits".equals(fieldName)) {
                    deserializedProvisionedThroughput.writeCapacityUnits = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvisionedThroughput;
        });
    }
}
