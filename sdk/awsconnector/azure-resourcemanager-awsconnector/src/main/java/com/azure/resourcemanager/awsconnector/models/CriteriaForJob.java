// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CriteriaForJob.
 */
@Fluent
public final class CriteriaForJob implements JsonSerializable<CriteriaForJob> {
    /*
     * <p>A property-based condition that defines a property, operator, and one or more values for including or
     * excluding buckets from the job.</p>
     */
    private SimpleCriterionForJob simpleCriterion;

    /*
     * <p>A tag-based condition that defines an operator and tag keys, tag values, or tag key and value pairs for
     * including or excluding buckets from the job.</p>
     */
    private TagCriterionForJob tagCriterion;

    /**
     * Creates an instance of CriteriaForJob class.
     */
    public CriteriaForJob() {
    }

    /**
     * Get the simpleCriterion property: &lt;p&gt;A property-based condition that defines a property, operator, and one
     * or more values for including or excluding buckets from the job.&lt;/p&gt;.
     * 
     * @return the simpleCriterion value.
     */
    public SimpleCriterionForJob simpleCriterion() {
        return this.simpleCriterion;
    }

    /**
     * Set the simpleCriterion property: &lt;p&gt;A property-based condition that defines a property, operator, and one
     * or more values for including or excluding buckets from the job.&lt;/p&gt;.
     * 
     * @param simpleCriterion the simpleCriterion value to set.
     * @return the CriteriaForJob object itself.
     */
    public CriteriaForJob withSimpleCriterion(SimpleCriterionForJob simpleCriterion) {
        this.simpleCriterion = simpleCriterion;
        return this;
    }

    /**
     * Get the tagCriterion property: &lt;p&gt;A tag-based condition that defines an operator and tag keys, tag values,
     * or tag key and value pairs for including or excluding buckets from the job.&lt;/p&gt;.
     * 
     * @return the tagCriterion value.
     */
    public TagCriterionForJob tagCriterion() {
        return this.tagCriterion;
    }

    /**
     * Set the tagCriterion property: &lt;p&gt;A tag-based condition that defines an operator and tag keys, tag values,
     * or tag key and value pairs for including or excluding buckets from the job.&lt;/p&gt;.
     * 
     * @param tagCriterion the tagCriterion value to set.
     * @return the CriteriaForJob object itself.
     */
    public CriteriaForJob withTagCriterion(TagCriterionForJob tagCriterion) {
        this.tagCriterion = tagCriterion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (simpleCriterion() != null) {
            simpleCriterion().validate();
        }
        if (tagCriterion() != null) {
            tagCriterion().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("simpleCriterion", this.simpleCriterion);
        jsonWriter.writeJsonField("tagCriterion", this.tagCriterion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CriteriaForJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CriteriaForJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CriteriaForJob.
     */
    public static CriteriaForJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CriteriaForJob deserializedCriteriaForJob = new CriteriaForJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("simpleCriterion".equals(fieldName)) {
                    deserializedCriteriaForJob.simpleCriterion = SimpleCriterionForJob.fromJson(reader);
                } else if ("tagCriterion".equals(fieldName)) {
                    deserializedCriteriaForJob.tagCriterion = TagCriterionForJob.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCriteriaForJob;
        });
    }
}
