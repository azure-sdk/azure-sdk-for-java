// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of LegacyCustomOrigin.
 */
@Fluent
public final class LegacyCustomOrigin implements JsonSerializable<LegacyCustomOrigin> {
    /*
     * Property dnsName
     */
    private String dnsName;

    /*
     * Property httpPort
     */
    private Integer httpPort;

    /*
     * Property httpsPort
     */
    private Integer httpsPort;

    /*
     * Property originProtocolPolicy
     */
    private String originProtocolPolicy;

    /*
     * Property originSSLProtocols
     */
    private List<String> originSslProtocols;

    /**
     * Creates an instance of LegacyCustomOrigin class.
     */
    public LegacyCustomOrigin() {
    }

    /**
     * Get the dnsName property: Property dnsName.
     * 
     * @return the dnsName value.
     */
    public String dnsName() {
        return this.dnsName;
    }

    /**
     * Set the dnsName property: Property dnsName.
     * 
     * @param dnsName the dnsName value to set.
     * @return the LegacyCustomOrigin object itself.
     */
    public LegacyCustomOrigin withDnsName(String dnsName) {
        this.dnsName = dnsName;
        return this;
    }

    /**
     * Get the httpPort property: Property httpPort.
     * 
     * @return the httpPort value.
     */
    public Integer httpPort() {
        return this.httpPort;
    }

    /**
     * Set the httpPort property: Property httpPort.
     * 
     * @param httpPort the httpPort value to set.
     * @return the LegacyCustomOrigin object itself.
     */
    public LegacyCustomOrigin withHttpPort(Integer httpPort) {
        this.httpPort = httpPort;
        return this;
    }

    /**
     * Get the httpsPort property: Property httpsPort.
     * 
     * @return the httpsPort value.
     */
    public Integer httpsPort() {
        return this.httpsPort;
    }

    /**
     * Set the httpsPort property: Property httpsPort.
     * 
     * @param httpsPort the httpsPort value to set.
     * @return the LegacyCustomOrigin object itself.
     */
    public LegacyCustomOrigin withHttpsPort(Integer httpsPort) {
        this.httpsPort = httpsPort;
        return this;
    }

    /**
     * Get the originProtocolPolicy property: Property originProtocolPolicy.
     * 
     * @return the originProtocolPolicy value.
     */
    public String originProtocolPolicy() {
        return this.originProtocolPolicy;
    }

    /**
     * Set the originProtocolPolicy property: Property originProtocolPolicy.
     * 
     * @param originProtocolPolicy the originProtocolPolicy value to set.
     * @return the LegacyCustomOrigin object itself.
     */
    public LegacyCustomOrigin withOriginProtocolPolicy(String originProtocolPolicy) {
        this.originProtocolPolicy = originProtocolPolicy;
        return this;
    }

    /**
     * Get the originSslProtocols property: Property originSSLProtocols.
     * 
     * @return the originSslProtocols value.
     */
    public List<String> originSslProtocols() {
        return this.originSslProtocols;
    }

    /**
     * Set the originSslProtocols property: Property originSSLProtocols.
     * 
     * @param originSslProtocols the originSslProtocols value to set.
     * @return the LegacyCustomOrigin object itself.
     */
    public LegacyCustomOrigin withOriginSslProtocols(List<String> originSslProtocols) {
        this.originSslProtocols = originSslProtocols;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dnsName", this.dnsName);
        jsonWriter.writeNumberField("httpPort", this.httpPort);
        jsonWriter.writeNumberField("httpsPort", this.httpsPort);
        jsonWriter.writeStringField("originProtocolPolicy", this.originProtocolPolicy);
        jsonWriter.writeArrayField("originSSLProtocols", this.originSslProtocols,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LegacyCustomOrigin from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LegacyCustomOrigin if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LegacyCustomOrigin.
     */
    public static LegacyCustomOrigin fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LegacyCustomOrigin deserializedLegacyCustomOrigin = new LegacyCustomOrigin();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dnsName".equals(fieldName)) {
                    deserializedLegacyCustomOrigin.dnsName = reader.getString();
                } else if ("httpPort".equals(fieldName)) {
                    deserializedLegacyCustomOrigin.httpPort = reader.getNullable(JsonReader::getInt);
                } else if ("httpsPort".equals(fieldName)) {
                    deserializedLegacyCustomOrigin.httpsPort = reader.getNullable(JsonReader::getInt);
                } else if ("originProtocolPolicy".equals(fieldName)) {
                    deserializedLegacyCustomOrigin.originProtocolPolicy = reader.getString();
                } else if ("originSSLProtocols".equals(fieldName)) {
                    List<String> originSslProtocols = reader.readArray(reader1 -> reader1.getString());
                    deserializedLegacyCustomOrigin.originSslProtocols = originSslProtocols;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLegacyCustomOrigin;
        });
    }
}
