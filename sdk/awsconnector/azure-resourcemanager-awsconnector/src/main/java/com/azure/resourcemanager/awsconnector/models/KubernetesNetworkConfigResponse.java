// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of KubernetesNetworkConfigResponse.
 */
@Fluent
public final class KubernetesNetworkConfigResponse implements JsonSerializable<KubernetesNetworkConfigResponse> {
    /*
     * <p>The IP family used to assign Kubernetes <code>Pod</code> and <code>Service</code> objects IP addresses. The IP
     * family is always <code>ipv4</code>, unless you have a <code>1.21</code> or later cluster running version
     * <code>1.10.1</code> or later of the Amazon VPC CNI plugin for Kubernetes and specified <code>ipv6</code> when you
     * created the cluster. </p>
     */
    private IpFamilyEnumValue ipFamily;

    /*
     * <p>The CIDR block that Kubernetes <code>Pod</code> and <code>Service</code> object IP addresses are assigned
     * from. Kubernetes assigns addresses from an <code>IPv4</code> CIDR block assigned to a subnet that the node is in.
     * If you didn't specify a CIDR block when you created the cluster, then Kubernetes assigns addresses from either
     * the <code>10.100.0.0/16</code> or <code>172.20.0.0/16</code> CIDR blocks. If this was specified, then it was
     * specified when the cluster was created and it can't be changed.</p>
     */
    private String serviceIpv4Cidr;

    /*
     * <p>The CIDR block that Kubernetes pod and service IP addresses are assigned from if you created a 1.21 or later
     * cluster with version 1.10.1 or later of the Amazon VPC CNI add-on and specified <code>ipv6</code> for
     * <b>ipFamily</b> when you created the cluster. Kubernetes assigns service addresses from the unique local address
     * range (<code>fc00::/7</code>) because you can't specify a custom IPv6 CIDR block when you create the cluster.</p>
     */
    private String serviceIpv6Cidr;

    /**
     * Creates an instance of KubernetesNetworkConfigResponse class.
     */
    public KubernetesNetworkConfigResponse() {
    }

    /**
     * Get the ipFamily property: &lt;p&gt;The IP family used to assign Kubernetes &lt;code&gt;Pod&lt;/code&gt; and
     * &lt;code&gt;Service&lt;/code&gt; objects IP addresses. The IP family is always &lt;code&gt;ipv4&lt;/code&gt;,
     * unless you have a &lt;code&gt;1.21&lt;/code&gt; or later cluster running version &lt;code&gt;1.10.1&lt;/code&gt;
     * or later of the Amazon VPC CNI plugin for Kubernetes and specified &lt;code&gt;ipv6&lt;/code&gt; when you created
     * the cluster. &lt;/p&gt;.
     * 
     * @return the ipFamily value.
     */
    public IpFamilyEnumValue ipFamily() {
        return this.ipFamily;
    }

    /**
     * Set the ipFamily property: &lt;p&gt;The IP family used to assign Kubernetes &lt;code&gt;Pod&lt;/code&gt; and
     * &lt;code&gt;Service&lt;/code&gt; objects IP addresses. The IP family is always &lt;code&gt;ipv4&lt;/code&gt;,
     * unless you have a &lt;code&gt;1.21&lt;/code&gt; or later cluster running version &lt;code&gt;1.10.1&lt;/code&gt;
     * or later of the Amazon VPC CNI plugin for Kubernetes and specified &lt;code&gt;ipv6&lt;/code&gt; when you created
     * the cluster. &lt;/p&gt;.
     * 
     * @param ipFamily the ipFamily value to set.
     * @return the KubernetesNetworkConfigResponse object itself.
     */
    public KubernetesNetworkConfigResponse withIpFamily(IpFamilyEnumValue ipFamily) {
        this.ipFamily = ipFamily;
        return this;
    }

    /**
     * Get the serviceIpv4Cidr property: &lt;p&gt;The CIDR block that Kubernetes &lt;code&gt;Pod&lt;/code&gt; and
     * &lt;code&gt;Service&lt;/code&gt; object IP addresses are assigned from. Kubernetes assigns addresses from an
     * &lt;code&gt;IPv4&lt;/code&gt; CIDR block assigned to a subnet that the node is in. If you didn't specify a CIDR
     * block when you created the cluster, then Kubernetes assigns addresses from either the
     * &lt;code&gt;10.100.0.0/16&lt;/code&gt; or &lt;code&gt;172.20.0.0/16&lt;/code&gt; CIDR blocks. If this was
     * specified, then it was specified when the cluster was created and it can't be changed.&lt;/p&gt;.
     * 
     * @return the serviceIpv4Cidr value.
     */
    public String serviceIpv4Cidr() {
        return this.serviceIpv4Cidr;
    }

    /**
     * Set the serviceIpv4Cidr property: &lt;p&gt;The CIDR block that Kubernetes &lt;code&gt;Pod&lt;/code&gt; and
     * &lt;code&gt;Service&lt;/code&gt; object IP addresses are assigned from. Kubernetes assigns addresses from an
     * &lt;code&gt;IPv4&lt;/code&gt; CIDR block assigned to a subnet that the node is in. If you didn't specify a CIDR
     * block when you created the cluster, then Kubernetes assigns addresses from either the
     * &lt;code&gt;10.100.0.0/16&lt;/code&gt; or &lt;code&gt;172.20.0.0/16&lt;/code&gt; CIDR blocks. If this was
     * specified, then it was specified when the cluster was created and it can't be changed.&lt;/p&gt;.
     * 
     * @param serviceIpv4Cidr the serviceIpv4Cidr value to set.
     * @return the KubernetesNetworkConfigResponse object itself.
     */
    public KubernetesNetworkConfigResponse withServiceIpv4Cidr(String serviceIpv4Cidr) {
        this.serviceIpv4Cidr = serviceIpv4Cidr;
        return this;
    }

    /**
     * Get the serviceIpv6Cidr property: &lt;p&gt;The CIDR block that Kubernetes pod and service IP addresses are
     * assigned from if you created a 1.21 or later cluster with version 1.10.1 or later of the Amazon VPC CNI add-on
     * and specified &lt;code&gt;ipv6&lt;/code&gt; for &lt;b&gt;ipFamily&lt;/b&gt; when you created the cluster.
     * Kubernetes assigns service addresses from the unique local address range (&lt;code&gt;fc00::/7&lt;/code&gt;)
     * because you can't specify a custom IPv6 CIDR block when you create the cluster.&lt;/p&gt;.
     * 
     * @return the serviceIpv6Cidr value.
     */
    public String serviceIpv6Cidr() {
        return this.serviceIpv6Cidr;
    }

    /**
     * Set the serviceIpv6Cidr property: &lt;p&gt;The CIDR block that Kubernetes pod and service IP addresses are
     * assigned from if you created a 1.21 or later cluster with version 1.10.1 or later of the Amazon VPC CNI add-on
     * and specified &lt;code&gt;ipv6&lt;/code&gt; for &lt;b&gt;ipFamily&lt;/b&gt; when you created the cluster.
     * Kubernetes assigns service addresses from the unique local address range (&lt;code&gt;fc00::/7&lt;/code&gt;)
     * because you can't specify a custom IPv6 CIDR block when you create the cluster.&lt;/p&gt;.
     * 
     * @param serviceIpv6Cidr the serviceIpv6Cidr value to set.
     * @return the KubernetesNetworkConfigResponse object itself.
     */
    public KubernetesNetworkConfigResponse withServiceIpv6Cidr(String serviceIpv6Cidr) {
        this.serviceIpv6Cidr = serviceIpv6Cidr;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipFamily() != null) {
            ipFamily().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("ipFamily", this.ipFamily);
        jsonWriter.writeStringField("serviceIpv4Cidr", this.serviceIpv4Cidr);
        jsonWriter.writeStringField("serviceIpv6Cidr", this.serviceIpv6Cidr);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesNetworkConfigResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesNetworkConfigResponse if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the KubernetesNetworkConfigResponse.
     */
    public static KubernetesNetworkConfigResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesNetworkConfigResponse deserializedKubernetesNetworkConfigResponse
                = new KubernetesNetworkConfigResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipFamily".equals(fieldName)) {
                    deserializedKubernetesNetworkConfigResponse.ipFamily = IpFamilyEnumValue.fromJson(reader);
                } else if ("serviceIpv4Cidr".equals(fieldName)) {
                    deserializedKubernetesNetworkConfigResponse.serviceIpv4Cidr = reader.getString();
                } else if ("serviceIpv6Cidr".equals(fieldName)) {
                    deserializedKubernetesNetworkConfigResponse.serviceIpv6Cidr = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesNetworkConfigResponse;
        });
    }
}
