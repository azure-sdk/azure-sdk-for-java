// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of QueueConfiguration.
 */
@Fluent
public final class QueueConfiguration implements JsonSerializable<QueueConfiguration> {
    /*
     * The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see
     * [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3
     * User Guide*.
     */
    private String event;

    /*
     * The filtering rules that determine which objects trigger notifications. For example, you can create a filter so
     * that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For
     * more information, see [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*. Specifies object key name filtering rules. For information about key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     */
    private NotificationFilter filter;

    /*
     * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects
     * events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification
     * destination.
     */
    private String queue;

    /**
     * Creates an instance of QueueConfiguration class.
     */
    public QueueConfiguration() {
    }

    /**
     * Get the event property: The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For
     * more information, see [Supported Event
     * Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
     * 
     * @return the event value.
     */
    public String event() {
        return this.event;
    }

    /**
     * Set the event property: The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For
     * more information, see [Supported Event
     * Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
     * 
     * @param event the event value to set.
     * @return the QueueConfiguration object itself.
     */
    public QueueConfiguration withEvent(String event) {
        this.event = event;
        return this;
    }

    /**
     * Get the filter property: The filtering rules that determine which objects trigger notifications. For example, you
     * can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are
     * added to the bucket. For more information, see [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*. Specifies object key name filtering rules. For information about key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @return the filter value.
     */
    public NotificationFilter filter() {
        return this.filter;
    }

    /**
     * Set the filter property: The filtering rules that determine which objects trigger notifications. For example, you
     * can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are
     * added to the bucket. For more information, see [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*. Specifies object key name filtering rules. For information about key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @param filter the filter value to set.
     * @return the QueueConfiguration object itself.
     */
    public QueueConfiguration withFilter(NotificationFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the queue property: The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a
     * message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as
     * the event notification destination.
     * 
     * @return the queue value.
     */
    public String queue() {
        return this.queue;
    }

    /**
     * Set the queue property: The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a
     * message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as
     * the event notification destination.
     * 
     * @param queue the queue value to set.
     * @return the QueueConfiguration object itself.
     */
    public QueueConfiguration withQueue(String queue) {
        this.queue = queue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filter() != null) {
            filter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event", this.event);
        jsonWriter.writeJsonField("filter", this.filter);
        jsonWriter.writeStringField("queue", this.queue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueueConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueueConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueueConfiguration.
     */
    public static QueueConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueueConfiguration deserializedQueueConfiguration = new QueueConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event".equals(fieldName)) {
                    deserializedQueueConfiguration.event = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    deserializedQueueConfiguration.filter = NotificationFilter.fromJson(reader);
                } else if ("queue".equals(fieldName)) {
                    deserializedQueueConfiguration.queue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueueConfiguration;
        });
    }
}
