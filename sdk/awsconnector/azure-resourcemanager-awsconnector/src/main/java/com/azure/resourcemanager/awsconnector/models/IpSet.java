// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of IPSet.
 */
@Fluent
public final class IpSet implements JsonSerializable<IpSet> {
    /*
     * Property definition
     */
    private List<String> definition;

    /**
     * Creates an instance of IpSet class.
     */
    public IpSet() {
    }

    /**
     * Get the definition property: Property definition.
     * 
     * @return the definition value.
     */
    public List<String> definition() {
        return this.definition;
    }

    /**
     * Set the definition property: Property definition.
     * 
     * @param definition the definition value to set.
     * @return the IpSet object itself.
     */
    public IpSet withDefinition(List<String> definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("definition", this.definition, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpSet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpSet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the IpSet.
     */
    public static IpSet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpSet deserializedIpSet = new IpSet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("definition".equals(fieldName)) {
                    List<String> definition = reader.readArray(reader1 -> reader1.getString());
                    deserializedIpSet.definition = definition;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpSet;
        });
    }
}
