// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsCloudFormationStackSet.
 */
@Fluent
public final class AwsCloudFormationStackSetProperties
    implements JsonSerializable<AwsCloudFormationStackSetProperties> {
    /*
     * The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you
     * are using customized administrator roles to control which users or groups can manage specific stack sets within
     * the same administrator account.
     */
    private String administrationRoleArn;

    /*
     * Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target
     * organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
     */
    private AutoDeployment autoDeployment;

    /*
     * Specifies the AWS account that you are acting from. By default, SELF is specified. For self-managed permissions,
     * specify SELF; for service-managed permissions, if you are signed in to the organization's management account,
     * specify SELF. If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN.
     */
    private CallAs callAs;

    /*
     * In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in
     * order for AWS CloudFormation to create the stack set and related stack instances.
     */
    private List<String> capabilities;

    /*
     * A description of the stack set. You can use the description to identify the stack set's purpose or other
     * important information.
     */
    private String description;

    /*
     * The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS
     * CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
     */
    private String executionRoleName;

    /*
     * Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     */
    private ActiveModel managedExecution;

    /*
     * The user-specified preferences for how AWS CloudFormation performs a stack set operation.
     */
    private OperationPreferences operationPreferences;

    /*
     * The input parameters for the stack set template.
     */
    private List<Parameter> parameters;

    /*
     * Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
     */
    private PermissionModel permissionModel;

    /*
     * A group of stack instances with parameters in some specific accounts and regions.
     */
    private List<StackInstances> stackInstancesGroup;

    /*
     * The ID of the stack set that you're creating.
     */
    private String stackSetId;

    /*
     * The name to associate with the stack set. The name must be unique in the Region where you create your stack set.
     */
    private String stackSetName;

    /*
     * The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also
     * propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be
     * specified.
     */
    private List<TagAutoGenerated4> tags;

    /*
     * The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200
     * bytes.
     */
    private String templateBody;

    /*
     * Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is
     * located in an Amazon S3 bucket.
     */
    private String templateUrl;

    /**
     * Creates an instance of AwsCloudFormationStackSetProperties class.
     */
    public AwsCloudFormationStackSetProperties() {
    }

    /**
     * Get the administrationRoleArn property: The Amazon Resource Number (ARN) of the IAM role to use to create this
     * stack set. Specify an IAM role only if you are using customized administrator roles to control which users or
     * groups can manage specific stack sets within the same administrator account.
     * 
     * @return the administrationRoleArn value.
     */
    public String administrationRoleArn() {
        return this.administrationRoleArn;
    }

    /**
     * Set the administrationRoleArn property: The Amazon Resource Number (ARN) of the IAM role to use to create this
     * stack set. Specify an IAM role only if you are using customized administrator roles to control which users or
     * groups can manage specific stack sets within the same administrator account.
     * 
     * @param administrationRoleArn the administrationRoleArn value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withAdministrationRoleArn(String administrationRoleArn) {
        this.administrationRoleArn = administrationRoleArn;
        return this;
    }

    /**
     * Get the autoDeployment property: Describes whether StackSets automatically deploys to AWS Organizations accounts
     * that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is
     * SERVICE_MANAGED.
     * 
     * @return the autoDeployment value.
     */
    public AutoDeployment autoDeployment() {
        return this.autoDeployment;
    }

    /**
     * Set the autoDeployment property: Describes whether StackSets automatically deploys to AWS Organizations accounts
     * that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is
     * SERVICE_MANAGED.
     * 
     * @param autoDeployment the autoDeployment value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withAutoDeployment(AutoDeployment autoDeployment) {
        this.autoDeployment = autoDeployment;
        return this;
    }

    /**
     * Get the callAs property: Specifies the AWS account that you are acting from. By default, SELF is specified. For
     * self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the
     * organization's management account, specify SELF. If you are signed in to a delegated administrator account,
     * specify DELEGATED_ADMIN.
     * 
     * @return the callAs value.
     */
    public CallAs callAs() {
        return this.callAs;
    }

    /**
     * Set the callAs property: Specifies the AWS account that you are acting from. By default, SELF is specified. For
     * self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the
     * organization's management account, specify SELF. If you are signed in to a delegated administrator account,
     * specify DELEGATED_ADMIN.
     * 
     * @param callAs the callAs value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withCallAs(CallAs callAs) {
        this.callAs = callAs;
        return this;
    }

    /**
     * Get the capabilities property: In some cases, you must explicitly acknowledge that your stack set template
     * contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack
     * instances.
     * 
     * @return the capabilities value.
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: In some cases, you must explicitly acknowledge that your stack set template
     * contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack
     * instances.
     * 
     * @param capabilities the capabilities value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withCapabilities(List<String> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the description property: A description of the stack set. You can use the description to identify the stack
     * set's purpose or other important information.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the stack set. You can use the description to identify the stack
     * set's purpose or other important information.
     * 
     * @param description the description value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the executionRoleName property: The name of the IAM execution role to use to create the stack set. If you do
     * not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the
     * stack set operation.
     * 
     * @return the executionRoleName value.
     */
    public String executionRoleName() {
        return this.executionRoleName;
    }

    /**
     * Set the executionRoleName property: The name of the IAM execution role to use to create the stack set. If you do
     * not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the
     * stack set operation.
     * 
     * @param executionRoleName the executionRoleName value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withExecutionRoleName(String executionRoleName) {
        this.executionRoleName = executionRoleName;
        return this;
    }

    /**
     * Get the managedExecution property: Describes whether StackSets performs non-conflicting operations concurrently
     * and queues conflicting operations.
     * 
     * @return the managedExecution value.
     */
    public ActiveModel managedExecution() {
        return this.managedExecution;
    }

    /**
     * Set the managedExecution property: Describes whether StackSets performs non-conflicting operations concurrently
     * and queues conflicting operations.
     * 
     * @param managedExecution the managedExecution value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withManagedExecution(ActiveModel managedExecution) {
        this.managedExecution = managedExecution;
        return this;
    }

    /**
     * Get the operationPreferences property: The user-specified preferences for how AWS CloudFormation performs a stack
     * set operation.
     * 
     * @return the operationPreferences value.
     */
    public OperationPreferences operationPreferences() {
        return this.operationPreferences;
    }

    /**
     * Set the operationPreferences property: The user-specified preferences for how AWS CloudFormation performs a stack
     * set operation.
     * 
     * @param operationPreferences the operationPreferences value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withOperationPreferences(OperationPreferences operationPreferences) {
        this.operationPreferences = operationPreferences;
        return this;
    }

    /**
     * Get the parameters property: The input parameters for the stack set template.
     * 
     * @return the parameters value.
     */
    public List<Parameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The input parameters for the stack set template.
     * 
     * @param parameters the parameters value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withParameters(List<Parameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the permissionModel property: Describes how the IAM roles required for stack set operations are created. By
     * default, SELF-MANAGED is specified.
     * 
     * @return the permissionModel value.
     */
    public PermissionModel permissionModel() {
        return this.permissionModel;
    }

    /**
     * Set the permissionModel property: Describes how the IAM roles required for stack set operations are created. By
     * default, SELF-MANAGED is specified.
     * 
     * @param permissionModel the permissionModel value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withPermissionModel(PermissionModel permissionModel) {
        this.permissionModel = permissionModel;
        return this;
    }

    /**
     * Get the stackInstancesGroup property: A group of stack instances with parameters in some specific accounts and
     * regions.
     * 
     * @return the stackInstancesGroup value.
     */
    public List<StackInstances> stackInstancesGroup() {
        return this.stackInstancesGroup;
    }

    /**
     * Set the stackInstancesGroup property: A group of stack instances with parameters in some specific accounts and
     * regions.
     * 
     * @param stackInstancesGroup the stackInstancesGroup value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withStackInstancesGroup(List<StackInstances> stackInstancesGroup) {
        this.stackInstancesGroup = stackInstancesGroup;
        return this;
    }

    /**
     * Get the stackSetId property: The ID of the stack set that you're creating.
     * 
     * @return the stackSetId value.
     */
    public String stackSetId() {
        return this.stackSetId;
    }

    /**
     * Set the stackSetId property: The ID of the stack set that you're creating.
     * 
     * @param stackSetId the stackSetId value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withStackSetId(String stackSetId) {
        this.stackSetId = stackSetId;
        return this;
    }

    /**
     * Get the stackSetName property: The name to associate with the stack set. The name must be unique in the Region
     * where you create your stack set.
     * 
     * @return the stackSetName value.
     */
    public String stackSetName() {
        return this.stackSetName;
    }

    /**
     * Set the stackSetName property: The name to associate with the stack set. The name must be unique in the Region
     * where you create your stack set.
     * 
     * @param stackSetName the stackSetName value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withStackSetName(String stackSetName) {
        this.stackSetName = stackSetName;
        return this;
    }

    /**
     * Get the tags property: The key-value pairs to associate with this stack set and the stacks created from it. AWS
     * CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number
     * of 50 tags can be specified.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated4> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The key-value pairs to associate with this stack set and the stacks created from it. AWS
     * CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number
     * of 50 tags can be specified.
     * 
     * @param tags the tags value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withTags(List<TagAutoGenerated4> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the templateBody property: The structure that contains the template body, with a minimum length of 1 byte and
     * a maximum length of 51,200 bytes.
     * 
     * @return the templateBody value.
     */
    public String templateBody() {
        return this.templateBody;
    }

    /**
     * Set the templateBody property: The structure that contains the template body, with a minimum length of 1 byte and
     * a maximum length of 51,200 bytes.
     * 
     * @param templateBody the templateBody value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withTemplateBody(String templateBody) {
        this.templateBody = templateBody;
        return this;
    }

    /**
     * Get the templateUrl property: Location of file containing the template body. The URL must point to a template
     * (max size: 460,800 bytes) that is located in an Amazon S3 bucket.
     * 
     * @return the templateUrl value.
     */
    public String templateUrl() {
        return this.templateUrl;
    }

    /**
     * Set the templateUrl property: Location of file containing the template body. The URL must point to a template
     * (max size: 460,800 bytes) that is located in an Amazon S3 bucket.
     * 
     * @param templateUrl the templateUrl value to set.
     * @return the AwsCloudFormationStackSetProperties object itself.
     */
    public AwsCloudFormationStackSetProperties withTemplateUrl(String templateUrl) {
        this.templateUrl = templateUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (autoDeployment() != null) {
            autoDeployment().validate();
        }
        if (managedExecution() != null) {
            managedExecution().validate();
        }
        if (operationPreferences() != null) {
            operationPreferences().validate();
        }
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
        if (stackInstancesGroup() != null) {
            stackInstancesGroup().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("administrationRoleARN", this.administrationRoleArn);
        jsonWriter.writeJsonField("autoDeployment", this.autoDeployment);
        jsonWriter.writeStringField("callAs", this.callAs == null ? null : this.callAs.toString());
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("executionRoleName", this.executionRoleName);
        jsonWriter.writeJsonField("managedExecution", this.managedExecution);
        jsonWriter.writeJsonField("operationPreferences", this.operationPreferences);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("permissionModel",
            this.permissionModel == null ? null : this.permissionModel.toString());
        jsonWriter.writeArrayField("stackInstancesGroup", this.stackInstancesGroup,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("stackSetId", this.stackSetId);
        jsonWriter.writeStringField("stackSetName", this.stackSetName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("templateBody", this.templateBody);
        jsonWriter.writeStringField("templateURL", this.templateUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsCloudFormationStackSetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsCloudFormationStackSetProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsCloudFormationStackSetProperties.
     */
    public static AwsCloudFormationStackSetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsCloudFormationStackSetProperties deserializedAwsCloudFormationStackSetProperties
                = new AwsCloudFormationStackSetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("administrationRoleARN".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.administrationRoleArn = reader.getString();
                } else if ("autoDeployment".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.autoDeployment = AutoDeployment.fromJson(reader);
                } else if ("callAs".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.callAs = CallAs.fromString(reader.getString());
                } else if ("capabilities".equals(fieldName)) {
                    List<String> capabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsCloudFormationStackSetProperties.capabilities = capabilities;
                } else if ("description".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.description = reader.getString();
                } else if ("executionRoleName".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.executionRoleName = reader.getString();
                } else if ("managedExecution".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.managedExecution = ActiveModel.fromJson(reader);
                } else if ("operationPreferences".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.operationPreferences
                        = OperationPreferences.fromJson(reader);
                } else if ("parameters".equals(fieldName)) {
                    List<Parameter> parameters = reader.readArray(reader1 -> Parameter.fromJson(reader1));
                    deserializedAwsCloudFormationStackSetProperties.parameters = parameters;
                } else if ("permissionModel".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.permissionModel
                        = PermissionModel.fromString(reader.getString());
                } else if ("stackInstancesGroup".equals(fieldName)) {
                    List<StackInstances> stackInstancesGroup
                        = reader.readArray(reader1 -> StackInstances.fromJson(reader1));
                    deserializedAwsCloudFormationStackSetProperties.stackInstancesGroup = stackInstancesGroup;
                } else if ("stackSetId".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.stackSetId = reader.getString();
                } else if ("stackSetName".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.stackSetName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated4> tags = reader.readArray(reader1 -> TagAutoGenerated4.fromJson(reader1));
                    deserializedAwsCloudFormationStackSetProperties.tags = tags;
                } else if ("templateBody".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.templateBody = reader.getString();
                } else if ("templateURL".equals(fieldName)) {
                    deserializedAwsCloudFormationStackSetProperties.templateUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsCloudFormationStackSetProperties;
        });
    }
}
