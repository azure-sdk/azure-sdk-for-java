// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ClusterIssue.
 */
@Fluent
public final class ClusterIssue implements JsonSerializable<ClusterIssue> {
    /*
     * <p>The error code of the issue.</p>
     */
    private ClusterIssueCodeEnumValue code;

    /*
     * <p>A description of the issue.</p>
     */
    private String message;

    /*
     * <p>The resource IDs that the issue relates to.</p>
     */
    private List<String> resourceIds;

    /**
     * Creates an instance of ClusterIssue class.
     */
    public ClusterIssue() {
    }

    /**
     * Get the code property: &lt;p&gt;The error code of the issue.&lt;/p&gt;.
     * 
     * @return the code value.
     */
    public ClusterIssueCodeEnumValue code() {
        return this.code;
    }

    /**
     * Set the code property: &lt;p&gt;The error code of the issue.&lt;/p&gt;.
     * 
     * @param code the code value to set.
     * @return the ClusterIssue object itself.
     */
    public ClusterIssue withCode(ClusterIssueCodeEnumValue code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: &lt;p&gt;A description of the issue.&lt;/p&gt;.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: &lt;p&gt;A description of the issue.&lt;/p&gt;.
     * 
     * @param message the message value to set.
     * @return the ClusterIssue object itself.
     */
    public ClusterIssue withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the resourceIds property: &lt;p&gt;The resource IDs that the issue relates to.&lt;/p&gt;.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: &lt;p&gt;The resource IDs that the issue relates to.&lt;/p&gt;.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the ClusterIssue object itself.
     */
    public ClusterIssue withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (code() != null) {
            code().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterIssue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterIssue if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterIssue.
     */
    public static ClusterIssue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterIssue deserializedClusterIssue = new ClusterIssue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedClusterIssue.code = ClusterIssueCodeEnumValue.fromJson(reader);
                } else if ("message".equals(fieldName)) {
                    deserializedClusterIssue.message = reader.getString();
                } else if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterIssue.resourceIds = resourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterIssue;
        });
    }
}
