// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of Node.
 */
@Fluent
public final class Node implements JsonSerializable<Node> {
    /*
     * <p>The Availability Zone (AZ) in which the node has been deployed.</p>
     */
    private String availabilityZone;

    /*
     * <p>The endpoint for the node, consisting of a DNS name and a port number. Client applications can connect
     * directly to a node endpoint, if desired (as an alternative to allowing DAX client software to intelligently route
     * requests and responses to nodes in the DAX cluster.</p>
     */
    private Endpoint endpoint;

    /*
     * <p>The date and time (in UNIX epoch format) when the node was launched.</p>
     */
    private OffsetDateTime nodeCreateTime;

    /*
     * <p>A system-generated identifier for the node.</p>
     */
    private String nodeId;

    /*
     * <p>The current status of the node. For example: <code>available</code>.</p>
     */
    private String nodeStatus;

    /*
     * <p>The status of the parameter group associated with this node. For example, <code>in-sync</code>.</p>
     */
    private String parameterGroupStatus;

    /**
     * Creates an instance of Node class.
     */
    public Node() {
    }

    /**
     * Get the availabilityZone property: &lt;p&gt;The Availability Zone (AZ) in which the node has been
     * deployed.&lt;/p&gt;.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: &lt;p&gt;The Availability Zone (AZ) in which the node has been
     * deployed.&lt;/p&gt;.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the Node object itself.
     */
    public Node withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the endpoint property: &lt;p&gt;The endpoint for the node, consisting of a DNS name and a port number. Client
     * applications can connect directly to a node endpoint, if desired (as an alternative to allowing DAX client
     * software to intelligently route requests and responses to nodes in the DAX cluster.&lt;/p&gt;.
     * 
     * @return the endpoint value.
     */
    public Endpoint endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: &lt;p&gt;The endpoint for the node, consisting of a DNS name and a port number. Client
     * applications can connect directly to a node endpoint, if desired (as an alternative to allowing DAX client
     * software to intelligently route requests and responses to nodes in the DAX cluster.&lt;/p&gt;.
     * 
     * @param endpoint the endpoint value to set.
     * @return the Node object itself.
     */
    public Node withEndpoint(Endpoint endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the nodeCreateTime property: &lt;p&gt;The date and time (in UNIX epoch format) when the node was
     * launched.&lt;/p&gt;.
     * 
     * @return the nodeCreateTime value.
     */
    public OffsetDateTime nodeCreateTime() {
        return this.nodeCreateTime;
    }

    /**
     * Set the nodeCreateTime property: &lt;p&gt;The date and time (in UNIX epoch format) when the node was
     * launched.&lt;/p&gt;.
     * 
     * @param nodeCreateTime the nodeCreateTime value to set.
     * @return the Node object itself.
     */
    public Node withNodeCreateTime(OffsetDateTime nodeCreateTime) {
        this.nodeCreateTime = nodeCreateTime;
        return this;
    }

    /**
     * Get the nodeId property: &lt;p&gt;A system-generated identifier for the node.&lt;/p&gt;.
     * 
     * @return the nodeId value.
     */
    public String nodeId() {
        return this.nodeId;
    }

    /**
     * Set the nodeId property: &lt;p&gt;A system-generated identifier for the node.&lt;/p&gt;.
     * 
     * @param nodeId the nodeId value to set.
     * @return the Node object itself.
     */
    public Node withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }

    /**
     * Get the nodeStatus property: &lt;p&gt;The current status of the node. For example:
     * &lt;code&gt;available&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the nodeStatus value.
     */
    public String nodeStatus() {
        return this.nodeStatus;
    }

    /**
     * Set the nodeStatus property: &lt;p&gt;The current status of the node. For example:
     * &lt;code&gt;available&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param nodeStatus the nodeStatus value to set.
     * @return the Node object itself.
     */
    public Node withNodeStatus(String nodeStatus) {
        this.nodeStatus = nodeStatus;
        return this;
    }

    /**
     * Get the parameterGroupStatus property: &lt;p&gt;The status of the parameter group associated with this node. For
     * example, &lt;code&gt;in-sync&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the parameterGroupStatus value.
     */
    public String parameterGroupStatus() {
        return this.parameterGroupStatus;
    }

    /**
     * Set the parameterGroupStatus property: &lt;p&gt;The status of the parameter group associated with this node. For
     * example, &lt;code&gt;in-sync&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param parameterGroupStatus the parameterGroupStatus value to set.
     * @return the Node object itself.
     */
    public Node withParameterGroupStatus(String parameterGroupStatus) {
        this.parameterGroupStatus = parameterGroupStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoint() != null) {
            endpoint().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeJsonField("endpoint", this.endpoint);
        jsonWriter.writeStringField("nodeCreateTime",
            this.nodeCreateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.nodeCreateTime));
        jsonWriter.writeStringField("nodeId", this.nodeId);
        jsonWriter.writeStringField("nodeStatus", this.nodeStatus);
        jsonWriter.writeStringField("parameterGroupStatus", this.parameterGroupStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Node from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Node if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Node.
     */
    public static Node fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Node deserializedNode = new Node();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedNode.availabilityZone = reader.getString();
                } else if ("endpoint".equals(fieldName)) {
                    deserializedNode.endpoint = Endpoint.fromJson(reader);
                } else if ("nodeCreateTime".equals(fieldName)) {
                    deserializedNode.nodeCreateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("nodeId".equals(fieldName)) {
                    deserializedNode.nodeId = reader.getString();
                } else if ("nodeStatus".equals(fieldName)) {
                    deserializedNode.nodeStatus = reader.getString();
                } else if ("parameterGroupStatus".equals(fieldName)) {
                    deserializedNode.parameterGroupStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNode;
        });
    }
}
