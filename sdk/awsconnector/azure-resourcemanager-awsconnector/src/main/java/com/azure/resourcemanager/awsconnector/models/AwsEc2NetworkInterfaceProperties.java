// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2NetworkInterface.
 */
@Fluent
public final class AwsEc2NetworkInterfaceProperties implements JsonSerializable<AwsEc2NetworkInterfaceProperties> {
    /*
     * Property connectionTrackingSpecification
     */
    private ConnectionTrackingSpecification connectionTrackingSpecification;

    /*
     * A description for the network interface.
     */
    private String description;

    /*
     * If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to
     * instances or ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6
     * associated with the ENI attached to your instance to be the primary IPv6 address. When you enable an IPv6 address
     * to be a primary IPv6, you cannot disable it. Traffic will be routed to the primary IPv6 address until the
     * instance is terminated or the ENI is detached. If you have multiple IPv6 addresses associated with an ENI and you
     * enable a primary IPv6 address, the first IPv6 address associated with the ENI becomes the primary IPv6 address.
     */
    private Boolean enablePrimaryIpv6;

    /*
     * A list of security group IDs associated with this network interface.
     */
    private List<String> groupSet;

    /*
     * Network interface id.
     */
    private String id;

    /*
     * Indicates the type of network interface.
     */
    private String interfaceType;

    /*
     * The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon
     * EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the
     * subnet. By default, these will be /28 prefixes. You can't specify a count of IPv4 prefixes if you've specified
     * one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4
     * addresses.
     */
    private Integer ipv4PrefixCount;

    /*
     * Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes,
     * use the Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported.
     * You can't specify IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific
     * private IPv4 addresses, or a count of private IPv4 addresses.
     */
    private List<Ipv4PrefixSpecification> ipv4Prefixes;

    /*
     * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6
     * addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't
     * specify this property.
     */
    private Integer ipv6AddressCount;

    /*
     * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network
     * interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify
     * this property.
     */
    private List<InstanceIpv6AddressAutoGenerated> ipv6Addresses;

    /*
     * The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon
     * EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the
     * subnet. By default, these will be /80 prefixes. You can't specify a count of IPv6 prefixes if you've specified
     * one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
     */
    private Integer ipv6PrefixCount;

    /*
     * Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes,
     * use the Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported.
     * You can't specify IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6
     * addresses, or a count of IPv6 addresses.
     */
    private List<Ipv6PrefixSpecification> ipv6Prefixes;

    /*
     * The primary IPv6 address
     */
    private String primaryIpv6Address;

    /*
     * Returns the primary private IP address of the network interface.
     */
    private String primaryPrivateIpAddress;

    /*
     * Assigns a single private IP address to the network interface, which is used as the primary private IP address. If
     * you want to specify multiple private IP address, use the PrivateIpAddresses property.
     */
    private String privateIpAddress;

    /*
     * Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by
     * setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2
     * to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify
     * this property.
     */
    private List<PrivateIpAddressSpecification> privateIpAddresses;

    /*
     * The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of
     * secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't
     * specify this option and specify more than one private IP address using privateIpAddresses
     */
    private Integer secondaryPrivateIpAddressCount;

    /*
     * Returns the secondary private IP addresses of the network interface.
     */
    private List<String> secondaryPrivateIpAddresses;

    /*
     * Indicates whether traffic to or from the instance is validated.
     */
    private Boolean sourceDestCheck;

    /*
     * The ID of the subnet to associate with the network interface.
     */
    private String subnetId;

    /*
     * An arbitrary set of tags (key-value pairs) for this network interface.
     */
    private List<TagAutoGenerated16> tags;

    /*
     * The ID of the VPC
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2NetworkInterfaceProperties class.
     */
    public AwsEc2NetworkInterfaceProperties() {
    }

    /**
     * Get the connectionTrackingSpecification property: Property connectionTrackingSpecification.
     * 
     * @return the connectionTrackingSpecification value.
     */
    public ConnectionTrackingSpecification connectionTrackingSpecification() {
        return this.connectionTrackingSpecification;
    }

    /**
     * Set the connectionTrackingSpecification property: Property connectionTrackingSpecification.
     * 
     * @param connectionTrackingSpecification the connectionTrackingSpecification value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties
        withConnectionTrackingSpecification(ConnectionTrackingSpecification connectionTrackingSpecification) {
        this.connectionTrackingSpecification = connectionTrackingSpecification;
        return this;
    }

    /**
     * Get the description property: A description for the network interface.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for the network interface.
     * 
     * @param description the description value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the enablePrimaryIpv6 property: If you have instances or ENIs that rely on the IPv6 address not changing, to
     * avoid disrupting traffic to instances or ENIs, you can enable a primary IPv6 address. Enable this option to
     * automatically assign an IPv6 associated with the ENI attached to your instance to be the primary IPv6 address.
     * When you enable an IPv6 address to be a primary IPv6, you cannot disable it. Traffic will be routed to the
     * primary IPv6 address until the instance is terminated or the ENI is detached. If you have multiple IPv6 addresses
     * associated with an ENI and you enable a primary IPv6 address, the first IPv6 address associated with the ENI
     * becomes the primary IPv6 address.
     * 
     * @return the enablePrimaryIpv6 value.
     */
    public Boolean enablePrimaryIpv6() {
        return this.enablePrimaryIpv6;
    }

    /**
     * Set the enablePrimaryIpv6 property: If you have instances or ENIs that rely on the IPv6 address not changing, to
     * avoid disrupting traffic to instances or ENIs, you can enable a primary IPv6 address. Enable this option to
     * automatically assign an IPv6 associated with the ENI attached to your instance to be the primary IPv6 address.
     * When you enable an IPv6 address to be a primary IPv6, you cannot disable it. Traffic will be routed to the
     * primary IPv6 address until the instance is terminated or the ENI is detached. If you have multiple IPv6 addresses
     * associated with an ENI and you enable a primary IPv6 address, the first IPv6 address associated with the ENI
     * becomes the primary IPv6 address.
     * 
     * @param enablePrimaryIpv6 the enablePrimaryIpv6 value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withEnablePrimaryIpv6(Boolean enablePrimaryIpv6) {
        this.enablePrimaryIpv6 = enablePrimaryIpv6;
        return this;
    }

    /**
     * Get the groupSet property: A list of security group IDs associated with this network interface.
     * 
     * @return the groupSet value.
     */
    public List<String> groupSet() {
        return this.groupSet;
    }

    /**
     * Set the groupSet property: A list of security group IDs associated with this network interface.
     * 
     * @param groupSet the groupSet value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withGroupSet(List<String> groupSet) {
        this.groupSet = groupSet;
        return this;
    }

    /**
     * Get the id property: Network interface id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Network interface id.
     * 
     * @param id the id value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the interfaceType property: Indicates the type of network interface.
     * 
     * @return the interfaceType value.
     */
    public String interfaceType() {
        return this.interfaceType;
    }

    /**
     * Set the interfaceType property: Indicates the type of network interface.
     * 
     * @param interfaceType the interfaceType value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withInterfaceType(String interfaceType) {
        this.interfaceType = interfaceType;
        return this;
    }

    /**
     * Get the ipv4PrefixCount property: The number of IPv4 prefixes to assign to a network interface. When you specify
     * a number of IPv4 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if
     * available, or from free spaces in the subnet. By default, these will be /28 prefixes. You can't specify a count
     * of IPv4 prefixes if you've specified one of the following: specific IPv4 prefixes, specific private IPv4
     * addresses, or a count of private IPv4 addresses.
     * 
     * @return the ipv4PrefixCount value.
     */
    public Integer ipv4PrefixCount() {
        return this.ipv4PrefixCount;
    }

    /**
     * Set the ipv4PrefixCount property: The number of IPv4 prefixes to assign to a network interface. When you specify
     * a number of IPv4 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if
     * available, or from free spaces in the subnet. By default, these will be /28 prefixes. You can't specify a count
     * of IPv4 prefixes if you've specified one of the following: specific IPv4 prefixes, specific private IPv4
     * addresses, or a count of private IPv4 addresses.
     * 
     * @param ipv4PrefixCount the ipv4PrefixCount value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withIpv4PrefixCount(Integer ipv4PrefixCount) {
        this.ipv4PrefixCount = ipv4PrefixCount;
        return this;
    }

    /**
     * Get the ipv4Prefixes property: Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to
     * automatically assign IPv4 prefixes, use the Ipv4PrefixCount property and do not specify this property. Presently,
     * only /28 prefixes are supported. You can't specify IPv4 prefixes if you've specified one of the following: a
     * count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
     * 
     * @return the ipv4Prefixes value.
     */
    public List<Ipv4PrefixSpecification> ipv4Prefixes() {
        return this.ipv4Prefixes;
    }

    /**
     * Set the ipv4Prefixes property: Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to
     * automatically assign IPv4 prefixes, use the Ipv4PrefixCount property and do not specify this property. Presently,
     * only /28 prefixes are supported. You can't specify IPv4 prefixes if you've specified one of the following: a
     * count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
     * 
     * @param ipv4Prefixes the ipv4Prefixes value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withIpv4Prefixes(List<Ipv4PrefixSpecification> ipv4Prefixes) {
        this.ipv4Prefixes = ipv4Prefixes;
        return this;
    }

    /**
     * Get the ipv6AddressCount property: The number of IPv6 addresses to assign to a network interface. Amazon EC2
     * automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the
     * Ipv6Addresses property and don't specify this property.
     * 
     * @return the ipv6AddressCount value.
     */
    public Integer ipv6AddressCount() {
        return this.ipv6AddressCount;
    }

    /**
     * Set the ipv6AddressCount property: The number of IPv6 addresses to assign to a network interface. Amazon EC2
     * automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the
     * Ipv6Addresses property and don't specify this property.
     * 
     * @param ipv6AddressCount the ipv6AddressCount value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withIpv6AddressCount(Integer ipv6AddressCount) {
        this.ipv6AddressCount = ipv6AddressCount;
        return this;
    }

    /**
     * Get the ipv6Addresses property: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet
     * to associate with the network interface. If you're specifying a number of IPv6 addresses, use the
     * Ipv6AddressCount property and don't specify this property.
     * 
     * @return the ipv6Addresses value.
     */
    public List<InstanceIpv6AddressAutoGenerated> ipv6Addresses() {
        return this.ipv6Addresses;
    }

    /**
     * Set the ipv6Addresses property: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet
     * to associate with the network interface. If you're specifying a number of IPv6 addresses, use the
     * Ipv6AddressCount property and don't specify this property.
     * 
     * @param ipv6Addresses the ipv6Addresses value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withIpv6Addresses(List<InstanceIpv6AddressAutoGenerated> ipv6Addresses) {
        this.ipv6Addresses = ipv6Addresses;
        return this;
    }

    /**
     * Get the ipv6PrefixCount property: The number of IPv6 prefixes to assign to a network interface. When you specify
     * a number of IPv6 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if
     * available, or from free spaces in the subnet. By default, these will be /80 prefixes. You can't specify a count
     * of IPv6 prefixes if you've specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a
     * count of IPv6 addresses.
     * 
     * @return the ipv6PrefixCount value.
     */
    public Integer ipv6PrefixCount() {
        return this.ipv6PrefixCount;
    }

    /**
     * Set the ipv6PrefixCount property: The number of IPv6 prefixes to assign to a network interface. When you specify
     * a number of IPv6 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if
     * available, or from free spaces in the subnet. By default, these will be /80 prefixes. You can't specify a count
     * of IPv6 prefixes if you've specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a
     * count of IPv6 addresses.
     * 
     * @param ipv6PrefixCount the ipv6PrefixCount value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withIpv6PrefixCount(Integer ipv6PrefixCount) {
        this.ipv6PrefixCount = ipv6PrefixCount;
        return this;
    }

    /**
     * Get the ipv6Prefixes property: Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to
     * automatically assign IPv6 prefixes, use the Ipv6PrefixCount property and do not specify this property. Presently,
     * only /80 prefixes are supported. You can't specify IPv6 prefixes if you've specified one of the following: a
     * count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
     * 
     * @return the ipv6Prefixes value.
     */
    public List<Ipv6PrefixSpecification> ipv6Prefixes() {
        return this.ipv6Prefixes;
    }

    /**
     * Set the ipv6Prefixes property: Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to
     * automatically assign IPv6 prefixes, use the Ipv6PrefixCount property and do not specify this property. Presently,
     * only /80 prefixes are supported. You can't specify IPv6 prefixes if you've specified one of the following: a
     * count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
     * 
     * @param ipv6Prefixes the ipv6Prefixes value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withIpv6Prefixes(List<Ipv6PrefixSpecification> ipv6Prefixes) {
        this.ipv6Prefixes = ipv6Prefixes;
        return this;
    }

    /**
     * Get the primaryIpv6Address property: The primary IPv6 address.
     * 
     * @return the primaryIpv6Address value.
     */
    public String primaryIpv6Address() {
        return this.primaryIpv6Address;
    }

    /**
     * Set the primaryIpv6Address property: The primary IPv6 address.
     * 
     * @param primaryIpv6Address the primaryIpv6Address value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withPrimaryIpv6Address(String primaryIpv6Address) {
        this.primaryIpv6Address = primaryIpv6Address;
        return this;
    }

    /**
     * Get the primaryPrivateIpAddress property: Returns the primary private IP address of the network interface.
     * 
     * @return the primaryPrivateIpAddress value.
     */
    public String primaryPrivateIpAddress() {
        return this.primaryPrivateIpAddress;
    }

    /**
     * Set the primaryPrivateIpAddress property: Returns the primary private IP address of the network interface.
     * 
     * @param primaryPrivateIpAddress the primaryPrivateIpAddress value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withPrimaryPrivateIpAddress(String primaryPrivateIpAddress) {
        this.primaryPrivateIpAddress = primaryPrivateIpAddress;
        return this;
    }

    /**
     * Get the privateIpAddress property: Assigns a single private IP address to the network interface, which is used as
     * the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses
     * property.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: Assigns a single private IP address to the network interface, which is used as
     * the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses
     * property.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the privateIpAddresses property: Assigns a list of private IP addresses to the network interface. You can
     * specify a primary private IP address by setting the value of the Primary property to true in the
     * PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the
     * SecondaryPrivateIpAddressCount property and do not specify this property.
     * 
     * @return the privateIpAddresses value.
     */
    public List<PrivateIpAddressSpecification> privateIpAddresses() {
        return this.privateIpAddresses;
    }

    /**
     * Set the privateIpAddresses property: Assigns a list of private IP addresses to the network interface. You can
     * specify a primary private IP address by setting the value of the Primary property to true in the
     * PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the
     * SecondaryPrivateIpAddressCount property and do not specify this property.
     * 
     * @param privateIpAddresses the privateIpAddresses value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties
        withPrivateIpAddresses(List<PrivateIpAddressSpecification> privateIpAddresses) {
        this.privateIpAddresses = privateIpAddresses;
        return this;
    }

    /**
     * Get the secondaryPrivateIpAddressCount property: The number of secondary private IPv4 addresses to assign to a
     * network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses
     * within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address
     * using privateIpAddresses.
     * 
     * @return the secondaryPrivateIpAddressCount value.
     */
    public Integer secondaryPrivateIpAddressCount() {
        return this.secondaryPrivateIpAddressCount;
    }

    /**
     * Set the secondaryPrivateIpAddressCount property: The number of secondary private IPv4 addresses to assign to a
     * network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses
     * within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address
     * using privateIpAddresses.
     * 
     * @param secondaryPrivateIpAddressCount the secondaryPrivateIpAddressCount value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withSecondaryPrivateIpAddressCount(Integer secondaryPrivateIpAddressCount) {
        this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
        return this;
    }

    /**
     * Get the secondaryPrivateIpAddresses property: Returns the secondary private IP addresses of the network
     * interface.
     * 
     * @return the secondaryPrivateIpAddresses value.
     */
    public List<String> secondaryPrivateIpAddresses() {
        return this.secondaryPrivateIpAddresses;
    }

    /**
     * Set the secondaryPrivateIpAddresses property: Returns the secondary private IP addresses of the network
     * interface.
     * 
     * @param secondaryPrivateIpAddresses the secondaryPrivateIpAddresses value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withSecondaryPrivateIpAddresses(List<String> secondaryPrivateIpAddresses) {
        this.secondaryPrivateIpAddresses = secondaryPrivateIpAddresses;
        return this;
    }

    /**
     * Get the sourceDestCheck property: Indicates whether traffic to or from the instance is validated.
     * 
     * @return the sourceDestCheck value.
     */
    public Boolean sourceDestCheck() {
        return this.sourceDestCheck;
    }

    /**
     * Set the sourceDestCheck property: Indicates whether traffic to or from the instance is validated.
     * 
     * @param sourceDestCheck the sourceDestCheck value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withSourceDestCheck(Boolean sourceDestCheck) {
        this.sourceDestCheck = sourceDestCheck;
        return this;
    }

    /**
     * Get the subnetId property: The ID of the subnet to associate with the network interface.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The ID of the subnet to associate with the network interface.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the tags property: An arbitrary set of tags (key-value pairs) for this network interface.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated16> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An arbitrary set of tags (key-value pairs) for this network interface.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withTags(List<TagAutoGenerated16> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcId property: The ID of the VPC.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: The ID of the VPC.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2NetworkInterfaceProperties object itself.
     */
    public AwsEc2NetworkInterfaceProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionTrackingSpecification() != null) {
            connectionTrackingSpecification().validate();
        }
        if (ipv4Prefixes() != null) {
            ipv4Prefixes().forEach(e -> e.validate());
        }
        if (ipv6Addresses() != null) {
            ipv6Addresses().forEach(e -> e.validate());
        }
        if (ipv6Prefixes() != null) {
            ipv6Prefixes().forEach(e -> e.validate());
        }
        if (privateIpAddresses() != null) {
            privateIpAddresses().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectionTrackingSpecification", this.connectionTrackingSpecification);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("enablePrimaryIpv6", this.enablePrimaryIpv6);
        jsonWriter.writeArrayField("groupSet", this.groupSet, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("interfaceType", this.interfaceType);
        jsonWriter.writeNumberField("ipv4PrefixCount", this.ipv4PrefixCount);
        jsonWriter.writeArrayField("ipv4Prefixes", this.ipv4Prefixes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("ipv6AddressCount", this.ipv6AddressCount);
        jsonWriter.writeArrayField("ipv6Addresses", this.ipv6Addresses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("ipv6PrefixCount", this.ipv6PrefixCount);
        jsonWriter.writeArrayField("ipv6Prefixes", this.ipv6Prefixes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("primaryIpv6Address", this.primaryIpv6Address);
        jsonWriter.writeStringField("primaryPrivateIpAddress", this.primaryPrivateIpAddress);
        jsonWriter.writeStringField("privateIpAddress", this.privateIpAddress);
        jsonWriter.writeArrayField("privateIpAddresses", this.privateIpAddresses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("secondaryPrivateIpAddressCount", this.secondaryPrivateIpAddressCount);
        jsonWriter.writeArrayField("secondaryPrivateIpAddresses", this.secondaryPrivateIpAddresses,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("sourceDestCheck", this.sourceDestCheck);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2NetworkInterfaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2NetworkInterfaceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2NetworkInterfaceProperties.
     */
    public static AwsEc2NetworkInterfaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2NetworkInterfaceProperties deserializedAwsEc2NetworkInterfaceProperties
                = new AwsEc2NetworkInterfaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionTrackingSpecification".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.connectionTrackingSpecification
                        = ConnectionTrackingSpecification.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.description = reader.getString();
                } else if ("enablePrimaryIpv6".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.enablePrimaryIpv6
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("groupSet".equals(fieldName)) {
                    List<String> groupSet = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2NetworkInterfaceProperties.groupSet = groupSet;
                } else if ("id".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.id = reader.getString();
                } else if ("interfaceType".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.interfaceType = reader.getString();
                } else if ("ipv4PrefixCount".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.ipv4PrefixCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("ipv4Prefixes".equals(fieldName)) {
                    List<Ipv4PrefixSpecification> ipv4Prefixes
                        = reader.readArray(reader1 -> Ipv4PrefixSpecification.fromJson(reader1));
                    deserializedAwsEc2NetworkInterfaceProperties.ipv4Prefixes = ipv4Prefixes;
                } else if ("ipv6AddressCount".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.ipv6AddressCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("ipv6Addresses".equals(fieldName)) {
                    List<InstanceIpv6AddressAutoGenerated> ipv6Addresses
                        = reader.readArray(reader1 -> InstanceIpv6AddressAutoGenerated.fromJson(reader1));
                    deserializedAwsEc2NetworkInterfaceProperties.ipv6Addresses = ipv6Addresses;
                } else if ("ipv6PrefixCount".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.ipv6PrefixCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("ipv6Prefixes".equals(fieldName)) {
                    List<Ipv6PrefixSpecification> ipv6Prefixes
                        = reader.readArray(reader1 -> Ipv6PrefixSpecification.fromJson(reader1));
                    deserializedAwsEc2NetworkInterfaceProperties.ipv6Prefixes = ipv6Prefixes;
                } else if ("primaryIpv6Address".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.primaryIpv6Address = reader.getString();
                } else if ("primaryPrivateIpAddress".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.primaryPrivateIpAddress = reader.getString();
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.privateIpAddress = reader.getString();
                } else if ("privateIpAddresses".equals(fieldName)) {
                    List<PrivateIpAddressSpecification> privateIpAddresses
                        = reader.readArray(reader1 -> PrivateIpAddressSpecification.fromJson(reader1));
                    deserializedAwsEc2NetworkInterfaceProperties.privateIpAddresses = privateIpAddresses;
                } else if ("secondaryPrivateIpAddressCount".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.secondaryPrivateIpAddressCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("secondaryPrivateIpAddresses".equals(fieldName)) {
                    List<String> secondaryPrivateIpAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2NetworkInterfaceProperties.secondaryPrivateIpAddresses
                        = secondaryPrivateIpAddresses;
                } else if ("sourceDestCheck".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.sourceDestCheck
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.subnetId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated16> tags = reader.readArray(reader1 -> TagAutoGenerated16.fromJson(reader1));
                    deserializedAwsEc2NetworkInterfaceProperties.tags = tags;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2NetworkInterfaceProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2NetworkInterfaceProperties;
        });
    }
}
