// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Definition of awsEc2Instance.
 */
@Fluent
public final class AwsEc2InstanceProperties implements JsonSerializable<AwsEc2InstanceProperties> {
    /*
     * <p>The AMI launch index, which can be used to find this instance in the launch group.</p>
     */
    private Integer amiLaunchIndex;

    /*
     * <p>The architecture of the image.</p>
     */
    private ArchitectureValuesEnumValue architecture;

    /*
     * <p>Any block device mapping entries for the instance.</p>
     */
    private List<InstanceBlockDeviceMapping> blockDeviceMappings;

    /*
     * <p>The boot mode that was specified by the AMI. If the value is <code>uefi-preferred</code>, the AMI supports
     * both UEFI and Legacy BIOS. The <code>currentInstanceBootMode</code> parameter is the boot mode that is used to
     * boot the instance at launch or start.</p> <note> <p>The operating system contained in the AMI must be configured
     * to support the specified boot mode.</p> </note> <p>For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'>Boot modes</a> in the <i>Amazon EC2 User
     * Guide</i>.</p>
     */
    private BootModeValuesEnumValue bootMode;

    /*
     * <p>The ID of the Capacity Reservation.</p>
     */
    private String capacityReservationId;

    /*
     * <p>Information about the Capacity Reservation targeting option.</p>
     */
    private CapacityReservationSpecificationResponse capacityReservationSpecification;

    /*
     * <p>The idempotency token you provided when you launched the instance, if applicable.</p>
     */
    private String clientToken;

    /*
     * <p>The CPU options for the instance.</p>
     */
    private CpuOptions cpuOptions;

    /*
     * <p>The boot mode that is used to boot the instance at launch or start. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'>Boot modes</a> in the <i>Amazon EC2 User
     * Guide</i>.</p>
     */
    private InstanceBootModeValuesEnumValue currentInstanceBootMode;

    /*
     * <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated
     * throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This
     * optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized
     * instance.</p>
     */
    private Boolean ebsOptimized;

    /*
     * <p>Deprecated.</p> <note> <p>Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads that
     * require graphics acceleration, we recommend that you use Amazon EC2 G4ad, G4dn, or G5 instances.</p> </note>
     */
    private List<ElasticGpuAssociation> elasticGpuAssociations;

    /*
     * <p>The elastic inference accelerator associated with the instance.</p>
     */
    private List<ElasticInferenceAcceleratorAssociation> elasticInferenceAcceleratorAssociations;

    /*
     * <p>Specifies whether enhanced networking with ENA is enabled.</p>
     */
    private Boolean enaSupport;

    /*
     * <p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.</p>
     */
    private EnclaveOptions enclaveOptions;

    /*
     * <p>Indicates whether the instance is enabled for hibernation.</p>
     */
    private HibernationOptions hibernationOptions;

    /*
     * <p>The hypervisor type of the instance. The value <code>xen</code> is used for both Xen and Nitro
     * hypervisors.</p>
     */
    private HypervisorTypeEnumValue hypervisor;

    /*
     * <p>The IAM instance profile associated with the instance, if applicable.</p>
     */
    private IamInstanceProfile iamInstanceProfile;

    /*
     * <p>The ID of the AMI used to launch the instance.</p>
     */
    private String imageId;

    /*
     * <p>The ID of the instance.</p>
     */
    private String instanceId;

    /*
     * <p>Indicates whether this is a Spot Instance or a Scheduled Instance.</p>
     */
    private InstanceLifecycleTypeEnumValue instanceLifecycle;

    /*
     * <p>The instance type.</p>
     */
    private InstanceTypeEnumValue instanceType;

    /*
     * <p>The IPv6 address assigned to the instance.</p>
     */
    private String ipv6Address;

    /*
     * <p>The kernel associated with this instance, if applicable.</p>
     */
    private String kernelId;

    /*
     * <p>The name of the key pair, if this instance was launched with an associated key pair.</p>
     */
    private String keyName;

    /*
     * <p>The time the instance was launched.</p>
     */
    private OffsetDateTime launchTime;

    /*
     * <p>The license configurations for the instance.</p>
     */
    private List<LicenseConfiguration> licenses;

    /*
     * <p>Provides information on the recovery and maintenance options of your instance.</p>
     */
    private InstanceMaintenanceOptions maintenanceOptions;

    /*
     * <p>The metadata options for the instance.</p>
     */
    private InstanceMetadataOptionsResponse metadataOptions;

    /*
     * <p>The monitoring for the instance.</p>
     */
    private Monitoring monitoring;

    /*
     * <p>The network interfaces for the instance.</p>
     */
    private List<InstanceNetworkInterface> networkInterfaces;

    /*
     * <p>The Amazon Resource Name (ARN) of the Outpost.</p>
     */
    private String outpostArn;

    /*
     * <p>The location where the instance launched, if applicable.</p>
     */
    private Placement placement;

    /*
     * <p>The platform. This value is <code>windows</code> for Windows instances; otherwise, it is empty.</p>
     */
    private PlatformValuesEnumValue platform;

    /*
     * <p>The platform details value for the instance. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html'>AMI billing information
     * fields</a> in the <i>Amazon EC2 User Guide</i>.</p>
     */
    private String platformDetails;

    /*
     * <p>[IPv4 only] The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside
     * the Amazon EC2 network. This name is not available until the instance enters the <code>running</code> state. </p>
     * <p>The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution
     * and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom
     * domain name servers must resolve the hostname as appropriate.</p>
     */
    private String privateDnsName;

    /*
     * <p>The options for the instance hostname.</p>
     */
    private PrivateDnsNameOptionsResponse privateDnsNameOptions;

    /*
     * <p>The private IPv4 address assigned to the instance.</p>
     */
    private String privateIpAddress;

    /*
     * <p>The product codes attached to this instance, if applicable.</p>
     */
    private List<ProductCode> productCodes;

    /*
     * <p>[IPv4 only] The public DNS name assigned to the instance. This name is not available until the instance enters
     * the <code>running</code> state. This name is only available if you've enabled DNS hostnames for your VPC.</p>
     */
    private String publicDnsName;

    /*
     * <p>The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable.</p> <p>A Carrier
     * IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.</p>
     */
    private String publicIpAddress;

    /*
     * <p>The RAM disk associated with this instance, if applicable.</p>
     */
    private String ramdiskId;

    /*
     * <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
     */
    private String rootDeviceName;

    /*
     * <p>The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
     */
    private DeviceTypeEnumValue rootDeviceType;

    /*
     * <p>The security groups for the instance.</p>
     */
    private List<GroupIdentifier> securityGroups;

    /*
     * <p>Indicates whether source/destination checking is enabled.</p>
     */
    private Boolean sourceDestCheck;

    /*
     * <p>If the request is a Spot Instance request, the ID of the request.</p>
     */
    private String spotInstanceRequestId;

    /*
     * <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
     */
    private String sriovNetSupport;

    /*
     * <p>The current state of the instance.</p>
     */
    private InstanceState state;

    /*
     * <p>The reason for the most recent state transition.</p>
     */
    private StateReason stateReason;

    /*
     * <p>The reason for the most recent state transition. This might be an empty string.</p>
     */
    private String stateTransitionReason;

    /*
     * <p>The ID of the subnet in which the instance is running.</p>
     */
    private String subnetId;

    /*
     * <p>Any tags assigned to the instance.</p>
     */
    private List<TagAutoGenerated12> tags;

    /*
     * <p>If the instance is configured for NitroTPM support, the value is <code>v2.0</code>. For more information, see
     * <a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html'>NitroTPM</a> in the <i>Amazon EC2
     * User Guide</i>.</p>
     */
    private String tpmSupport;

    /*
     * <p>The usage operation value for the instance. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html'>AMI billing information
     * fields</a> in the <i>Amazon EC2 User Guide</i>.</p>
     */
    private String usageOperation;

    /*
     * <p>The time that the usage operation was last updated.</p>
     */
    private OffsetDateTime usageOperationUpdateTime;

    /*
     * <p>The virtualization type of the instance.</p>
     */
    private VirtualizationTypeEnumValue virtualizationType;

    /*
     * <p>The ID of the VPC in which the instance is running.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2InstanceProperties class.
     */
    public AwsEc2InstanceProperties() {
    }

    /**
     * Get the amiLaunchIndex property: &lt;p&gt;The AMI launch index, which can be used to find this instance in the
     * launch group.&lt;/p&gt;.
     * 
     * @return the amiLaunchIndex value.
     */
    public Integer amiLaunchIndex() {
        return this.amiLaunchIndex;
    }

    /**
     * Set the amiLaunchIndex property: &lt;p&gt;The AMI launch index, which can be used to find this instance in the
     * launch group.&lt;/p&gt;.
     * 
     * @param amiLaunchIndex the amiLaunchIndex value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withAmiLaunchIndex(Integer amiLaunchIndex) {
        this.amiLaunchIndex = amiLaunchIndex;
        return this;
    }

    /**
     * Get the architecture property: &lt;p&gt;The architecture of the image.&lt;/p&gt;.
     * 
     * @return the architecture value.
     */
    public ArchitectureValuesEnumValue architecture() {
        return this.architecture;
    }

    /**
     * Set the architecture property: &lt;p&gt;The architecture of the image.&lt;/p&gt;.
     * 
     * @param architecture the architecture value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withArchitecture(ArchitectureValuesEnumValue architecture) {
        this.architecture = architecture;
        return this;
    }

    /**
     * Get the blockDeviceMappings property: &lt;p&gt;Any block device mapping entries for the instance.&lt;/p&gt;.
     * 
     * @return the blockDeviceMappings value.
     */
    public List<InstanceBlockDeviceMapping> blockDeviceMappings() {
        return this.blockDeviceMappings;
    }

    /**
     * Set the blockDeviceMappings property: &lt;p&gt;Any block device mapping entries for the instance.&lt;/p&gt;.
     * 
     * @param blockDeviceMappings the blockDeviceMappings value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withBlockDeviceMappings(List<InstanceBlockDeviceMapping> blockDeviceMappings) {
        this.blockDeviceMappings = blockDeviceMappings;
        return this;
    }

    /**
     * Get the bootMode property: &lt;p&gt;The boot mode that was specified by the AMI. If the value is
     * &lt;code&gt;uefi-preferred&lt;/code&gt;, the AMI supports both UEFI and Legacy BIOS. The
     * &lt;code&gt;currentInstanceBootMode&lt;/code&gt; parameter is the boot mode that is used to boot the instance at
     * launch or start.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The operating system contained in the AMI must be configured to
     * support the specified boot mode.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'&gt;Boot modes&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the bootMode value.
     */
    public BootModeValuesEnumValue bootMode() {
        return this.bootMode;
    }

    /**
     * Set the bootMode property: &lt;p&gt;The boot mode that was specified by the AMI. If the value is
     * &lt;code&gt;uefi-preferred&lt;/code&gt;, the AMI supports both UEFI and Legacy BIOS. The
     * &lt;code&gt;currentInstanceBootMode&lt;/code&gt; parameter is the boot mode that is used to boot the instance at
     * launch or start.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The operating system contained in the AMI must be configured to
     * support the specified boot mode.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'&gt;Boot modes&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param bootMode the bootMode value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withBootMode(BootModeValuesEnumValue bootMode) {
        this.bootMode = bootMode;
        return this;
    }

    /**
     * Get the capacityReservationId property: &lt;p&gt;The ID of the Capacity Reservation.&lt;/p&gt;.
     * 
     * @return the capacityReservationId value.
     */
    public String capacityReservationId() {
        return this.capacityReservationId;
    }

    /**
     * Set the capacityReservationId property: &lt;p&gt;The ID of the Capacity Reservation.&lt;/p&gt;.
     * 
     * @param capacityReservationId the capacityReservationId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withCapacityReservationId(String capacityReservationId) {
        this.capacityReservationId = capacityReservationId;
        return this;
    }

    /**
     * Get the capacityReservationSpecification property: &lt;p&gt;Information about the Capacity Reservation targeting
     * option.&lt;/p&gt;.
     * 
     * @return the capacityReservationSpecification value.
     */
    public CapacityReservationSpecificationResponse capacityReservationSpecification() {
        return this.capacityReservationSpecification;
    }

    /**
     * Set the capacityReservationSpecification property: &lt;p&gt;Information about the Capacity Reservation targeting
     * option.&lt;/p&gt;.
     * 
     * @param capacityReservationSpecification the capacityReservationSpecification value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withCapacityReservationSpecification(
        CapacityReservationSpecificationResponse capacityReservationSpecification) {
        this.capacityReservationSpecification = capacityReservationSpecification;
        return this;
    }

    /**
     * Get the clientToken property: &lt;p&gt;The idempotency token you provided when you launched the instance, if
     * applicable.&lt;/p&gt;.
     * 
     * @return the clientToken value.
     */
    public String clientToken() {
        return this.clientToken;
    }

    /**
     * Set the clientToken property: &lt;p&gt;The idempotency token you provided when you launched the instance, if
     * applicable.&lt;/p&gt;.
     * 
     * @param clientToken the clientToken value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }

    /**
     * Get the cpuOptions property: &lt;p&gt;The CPU options for the instance.&lt;/p&gt;.
     * 
     * @return the cpuOptions value.
     */
    public CpuOptions cpuOptions() {
        return this.cpuOptions;
    }

    /**
     * Set the cpuOptions property: &lt;p&gt;The CPU options for the instance.&lt;/p&gt;.
     * 
     * @param cpuOptions the cpuOptions value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withCpuOptions(CpuOptions cpuOptions) {
        this.cpuOptions = cpuOptions;
        return this;
    }

    /**
     * Get the currentInstanceBootMode property: &lt;p&gt;The boot mode that is used to boot the instance at launch or
     * start. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'&gt;Boot modes&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the currentInstanceBootMode value.
     */
    public InstanceBootModeValuesEnumValue currentInstanceBootMode() {
        return this.currentInstanceBootMode;
    }

    /**
     * Set the currentInstanceBootMode property: &lt;p&gt;The boot mode that is used to boot the instance at launch or
     * start. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html'&gt;Boot modes&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param currentInstanceBootMode the currentInstanceBootMode value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties
        withCurrentInstanceBootMode(InstanceBootModeValuesEnumValue currentInstanceBootMode) {
        this.currentInstanceBootMode = currentInstanceBootMode;
        return this;
    }

    /**
     * Get the ebsOptimized property: &lt;p&gt;Indicates whether the instance is optimized for Amazon EBS I/O. This
     * optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal
     * I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when
     * using an EBS Optimized instance.&lt;/p&gt;.
     * 
     * @return the ebsOptimized value.
     */
    public Boolean ebsOptimized() {
        return this.ebsOptimized;
    }

    /**
     * Set the ebsOptimized property: &lt;p&gt;Indicates whether the instance is optimized for Amazon EBS I/O. This
     * optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal
     * I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when
     * using an EBS Optimized instance.&lt;/p&gt;.
     * 
     * @param ebsOptimized the ebsOptimized value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withEbsOptimized(Boolean ebsOptimized) {
        this.ebsOptimized = ebsOptimized;
        return this;
    }

    /**
     * Get the elasticGpuAssociations property: &lt;p&gt;Deprecated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Elastic
     * Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend
     * that you use Amazon EC2 G4ad, G4dn, or G5 instances.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the elasticGpuAssociations value.
     */
    public List<ElasticGpuAssociation> elasticGpuAssociations() {
        return this.elasticGpuAssociations;
    }

    /**
     * Set the elasticGpuAssociations property: &lt;p&gt;Deprecated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Elastic
     * Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend
     * that you use Amazon EC2 G4ad, G4dn, or G5 instances.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param elasticGpuAssociations the elasticGpuAssociations value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withElasticGpuAssociations(List<ElasticGpuAssociation> elasticGpuAssociations) {
        this.elasticGpuAssociations = elasticGpuAssociations;
        return this;
    }

    /**
     * Get the elasticInferenceAcceleratorAssociations property: &lt;p&gt;The elastic inference accelerator associated
     * with the instance.&lt;/p&gt;.
     * 
     * @return the elasticInferenceAcceleratorAssociations value.
     */
    public List<ElasticInferenceAcceleratorAssociation> elasticInferenceAcceleratorAssociations() {
        return this.elasticInferenceAcceleratorAssociations;
    }

    /**
     * Set the elasticInferenceAcceleratorAssociations property: &lt;p&gt;The elastic inference accelerator associated
     * with the instance.&lt;/p&gt;.
     * 
     * @param elasticInferenceAcceleratorAssociations the elasticInferenceAcceleratorAssociations value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withElasticInferenceAcceleratorAssociations(
        List<ElasticInferenceAcceleratorAssociation> elasticInferenceAcceleratorAssociations) {
        this.elasticInferenceAcceleratorAssociations = elasticInferenceAcceleratorAssociations;
        return this;
    }

    /**
     * Get the enaSupport property: &lt;p&gt;Specifies whether enhanced networking with ENA is enabled.&lt;/p&gt;.
     * 
     * @return the enaSupport value.
     */
    public Boolean enaSupport() {
        return this.enaSupport;
    }

    /**
     * Set the enaSupport property: &lt;p&gt;Specifies whether enhanced networking with ENA is enabled.&lt;/p&gt;.
     * 
     * @param enaSupport the enaSupport value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withEnaSupport(Boolean enaSupport) {
        this.enaSupport = enaSupport;
        return this;
    }

    /**
     * Get the enclaveOptions property: &lt;p&gt;Indicates whether the instance is enabled for Amazon Web Services Nitro
     * Enclaves.&lt;/p&gt;.
     * 
     * @return the enclaveOptions value.
     */
    public EnclaveOptions enclaveOptions() {
        return this.enclaveOptions;
    }

    /**
     * Set the enclaveOptions property: &lt;p&gt;Indicates whether the instance is enabled for Amazon Web Services Nitro
     * Enclaves.&lt;/p&gt;.
     * 
     * @param enclaveOptions the enclaveOptions value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withEnclaveOptions(EnclaveOptions enclaveOptions) {
        this.enclaveOptions = enclaveOptions;
        return this;
    }

    /**
     * Get the hibernationOptions property: &lt;p&gt;Indicates whether the instance is enabled for
     * hibernation.&lt;/p&gt;.
     * 
     * @return the hibernationOptions value.
     */
    public HibernationOptions hibernationOptions() {
        return this.hibernationOptions;
    }

    /**
     * Set the hibernationOptions property: &lt;p&gt;Indicates whether the instance is enabled for
     * hibernation.&lt;/p&gt;.
     * 
     * @param hibernationOptions the hibernationOptions value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withHibernationOptions(HibernationOptions hibernationOptions) {
        this.hibernationOptions = hibernationOptions;
        return this;
    }

    /**
     * Get the hypervisor property: &lt;p&gt;The hypervisor type of the instance. The value &lt;code&gt;xen&lt;/code&gt;
     * is used for both Xen and Nitro hypervisors.&lt;/p&gt;.
     * 
     * @return the hypervisor value.
     */
    public HypervisorTypeEnumValue hypervisor() {
        return this.hypervisor;
    }

    /**
     * Set the hypervisor property: &lt;p&gt;The hypervisor type of the instance. The value &lt;code&gt;xen&lt;/code&gt;
     * is used for both Xen and Nitro hypervisors.&lt;/p&gt;.
     * 
     * @param hypervisor the hypervisor value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withHypervisor(HypervisorTypeEnumValue hypervisor) {
        this.hypervisor = hypervisor;
        return this;
    }

    /**
     * Get the iamInstanceProfile property: &lt;p&gt;The IAM instance profile associated with the instance, if
     * applicable.&lt;/p&gt;.
     * 
     * @return the iamInstanceProfile value.
     */
    public IamInstanceProfile iamInstanceProfile() {
        return this.iamInstanceProfile;
    }

    /**
     * Set the iamInstanceProfile property: &lt;p&gt;The IAM instance profile associated with the instance, if
     * applicable.&lt;/p&gt;.
     * 
     * @param iamInstanceProfile the iamInstanceProfile value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withIamInstanceProfile(IamInstanceProfile iamInstanceProfile) {
        this.iamInstanceProfile = iamInstanceProfile;
        return this;
    }

    /**
     * Get the imageId property: &lt;p&gt;The ID of the AMI used to launch the instance.&lt;/p&gt;.
     * 
     * @return the imageId value.
     */
    public String imageId() {
        return this.imageId;
    }

    /**
     * Set the imageId property: &lt;p&gt;The ID of the AMI used to launch the instance.&lt;/p&gt;.
     * 
     * @param imageId the imageId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withImageId(String imageId) {
        this.imageId = imageId;
        return this;
    }

    /**
     * Get the instanceId property: &lt;p&gt;The ID of the instance.&lt;/p&gt;.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instanceId property: &lt;p&gt;The ID of the instance.&lt;/p&gt;.
     * 
     * @param instanceId the instanceId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Get the instanceLifecycle property: &lt;p&gt;Indicates whether this is a Spot Instance or a Scheduled
     * Instance.&lt;/p&gt;.
     * 
     * @return the instanceLifecycle value.
     */
    public InstanceLifecycleTypeEnumValue instanceLifecycle() {
        return this.instanceLifecycle;
    }

    /**
     * Set the instanceLifecycle property: &lt;p&gt;Indicates whether this is a Spot Instance or a Scheduled
     * Instance.&lt;/p&gt;.
     * 
     * @param instanceLifecycle the instanceLifecycle value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withInstanceLifecycle(InstanceLifecycleTypeEnumValue instanceLifecycle) {
        this.instanceLifecycle = instanceLifecycle;
        return this;
    }

    /**
     * Get the instanceType property: &lt;p&gt;The instance type.&lt;/p&gt;.
     * 
     * @return the instanceType value.
     */
    public InstanceTypeEnumValue instanceType() {
        return this.instanceType;
    }

    /**
     * Set the instanceType property: &lt;p&gt;The instance type.&lt;/p&gt;.
     * 
     * @param instanceType the instanceType value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withInstanceType(InstanceTypeEnumValue instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Get the ipv6Address property: &lt;p&gt;The IPv6 address assigned to the instance.&lt;/p&gt;.
     * 
     * @return the ipv6Address value.
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }

    /**
     * Set the ipv6Address property: &lt;p&gt;The IPv6 address assigned to the instance.&lt;/p&gt;.
     * 
     * @param ipv6Address the ipv6Address value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withIpv6Address(String ipv6Address) {
        this.ipv6Address = ipv6Address;
        return this;
    }

    /**
     * Get the kernelId property: &lt;p&gt;The kernel associated with this instance, if applicable.&lt;/p&gt;.
     * 
     * @return the kernelId value.
     */
    public String kernelId() {
        return this.kernelId;
    }

    /**
     * Set the kernelId property: &lt;p&gt;The kernel associated with this instance, if applicable.&lt;/p&gt;.
     * 
     * @param kernelId the kernelId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withKernelId(String kernelId) {
        this.kernelId = kernelId;
        return this;
    }

    /**
     * Get the keyName property: &lt;p&gt;The name of the key pair, if this instance was launched with an associated key
     * pair.&lt;/p&gt;.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: &lt;p&gt;The name of the key pair, if this instance was launched with an associated key
     * pair.&lt;/p&gt;.
     * 
     * @param keyName the keyName value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the launchTime property: &lt;p&gt;The time the instance was launched.&lt;/p&gt;.
     * 
     * @return the launchTime value.
     */
    public OffsetDateTime launchTime() {
        return this.launchTime;
    }

    /**
     * Set the launchTime property: &lt;p&gt;The time the instance was launched.&lt;/p&gt;.
     * 
     * @param launchTime the launchTime value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withLaunchTime(OffsetDateTime launchTime) {
        this.launchTime = launchTime;
        return this;
    }

    /**
     * Get the licenses property: &lt;p&gt;The license configurations for the instance.&lt;/p&gt;.
     * 
     * @return the licenses value.
     */
    public List<LicenseConfiguration> licenses() {
        return this.licenses;
    }

    /**
     * Set the licenses property: &lt;p&gt;The license configurations for the instance.&lt;/p&gt;.
     * 
     * @param licenses the licenses value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withLicenses(List<LicenseConfiguration> licenses) {
        this.licenses = licenses;
        return this;
    }

    /**
     * Get the maintenanceOptions property: &lt;p&gt;Provides information on the recovery and maintenance options of
     * your instance.&lt;/p&gt;.
     * 
     * @return the maintenanceOptions value.
     */
    public InstanceMaintenanceOptions maintenanceOptions() {
        return this.maintenanceOptions;
    }

    /**
     * Set the maintenanceOptions property: &lt;p&gt;Provides information on the recovery and maintenance options of
     * your instance.&lt;/p&gt;.
     * 
     * @param maintenanceOptions the maintenanceOptions value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withMaintenanceOptions(InstanceMaintenanceOptions maintenanceOptions) {
        this.maintenanceOptions = maintenanceOptions;
        return this;
    }

    /**
     * Get the metadataOptions property: &lt;p&gt;The metadata options for the instance.&lt;/p&gt;.
     * 
     * @return the metadataOptions value.
     */
    public InstanceMetadataOptionsResponse metadataOptions() {
        return this.metadataOptions;
    }

    /**
     * Set the metadataOptions property: &lt;p&gt;The metadata options for the instance.&lt;/p&gt;.
     * 
     * @param metadataOptions the metadataOptions value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withMetadataOptions(InstanceMetadataOptionsResponse metadataOptions) {
        this.metadataOptions = metadataOptions;
        return this;
    }

    /**
     * Get the monitoring property: &lt;p&gt;The monitoring for the instance.&lt;/p&gt;.
     * 
     * @return the monitoring value.
     */
    public Monitoring monitoring() {
        return this.monitoring;
    }

    /**
     * Set the monitoring property: &lt;p&gt;The monitoring for the instance.&lt;/p&gt;.
     * 
     * @param monitoring the monitoring value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withMonitoring(Monitoring monitoring) {
        this.monitoring = monitoring;
        return this;
    }

    /**
     * Get the networkInterfaces property: &lt;p&gt;The network interfaces for the instance.&lt;/p&gt;.
     * 
     * @return the networkInterfaces value.
     */
    public List<InstanceNetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Set the networkInterfaces property: &lt;p&gt;The network interfaces for the instance.&lt;/p&gt;.
     * 
     * @param networkInterfaces the networkInterfaces value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withNetworkInterfaces(List<InstanceNetworkInterface> networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }

    /**
     * Get the outpostArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the Outpost.&lt;/p&gt;.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the Outpost.&lt;/p&gt;.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the placement property: &lt;p&gt;The location where the instance launched, if applicable.&lt;/p&gt;.
     * 
     * @return the placement value.
     */
    public Placement placement() {
        return this.placement;
    }

    /**
     * Set the placement property: &lt;p&gt;The location where the instance launched, if applicable.&lt;/p&gt;.
     * 
     * @param placement the placement value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPlacement(Placement placement) {
        this.placement = placement;
        return this;
    }

    /**
     * Get the platform property: &lt;p&gt;The platform. This value is &lt;code&gt;windows&lt;/code&gt; for Windows
     * instances; otherwise, it is empty.&lt;/p&gt;.
     * 
     * @return the platform value.
     */
    public PlatformValuesEnumValue platform() {
        return this.platform;
    }

    /**
     * Set the platform property: &lt;p&gt;The platform. This value is &lt;code&gt;windows&lt;/code&gt; for Windows
     * instances; otherwise, it is empty.&lt;/p&gt;.
     * 
     * @param platform the platform value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPlatform(PlatformValuesEnumValue platform) {
        this.platform = platform;
        return this;
    }

    /**
     * Get the platformDetails property: &lt;p&gt;The platform details value for the instance. For more information, see
     * &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html'&gt;AMI billing
     * information fields&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the platformDetails value.
     */
    public String platformDetails() {
        return this.platformDetails;
    }

    /**
     * Set the platformDetails property: &lt;p&gt;The platform details value for the instance. For more information, see
     * &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html'&gt;AMI billing
     * information fields&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param platformDetails the platformDetails value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPlatformDetails(String platformDetails) {
        this.platformDetails = platformDetails;
        return this;
    }

    /**
     * Get the privateDnsName property: &lt;p&gt;[IPv4 only] The private DNS hostname name assigned to the instance.
     * This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance
     * enters the &lt;code&gt;running&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;The Amazon-provided DNS server resolves
     * Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are
     * not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname
     * as appropriate.&lt;/p&gt;.
     * 
     * @return the privateDnsName value.
     */
    public String privateDnsName() {
        return this.privateDnsName;
    }

    /**
     * Set the privateDnsName property: &lt;p&gt;[IPv4 only] The private DNS hostname name assigned to the instance.
     * This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance
     * enters the &lt;code&gt;running&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;The Amazon-provided DNS server resolves
     * Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are
     * not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname
     * as appropriate.&lt;/p&gt;.
     * 
     * @param privateDnsName the privateDnsName value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPrivateDnsName(String privateDnsName) {
        this.privateDnsName = privateDnsName;
        return this;
    }

    /**
     * Get the privateDnsNameOptions property: &lt;p&gt;The options for the instance hostname.&lt;/p&gt;.
     * 
     * @return the privateDnsNameOptions value.
     */
    public PrivateDnsNameOptionsResponse privateDnsNameOptions() {
        return this.privateDnsNameOptions;
    }

    /**
     * Set the privateDnsNameOptions property: &lt;p&gt;The options for the instance hostname.&lt;/p&gt;.
     * 
     * @param privateDnsNameOptions the privateDnsNameOptions value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPrivateDnsNameOptions(PrivateDnsNameOptionsResponse privateDnsNameOptions) {
        this.privateDnsNameOptions = privateDnsNameOptions;
        return this;
    }

    /**
     * Get the privateIpAddress property: &lt;p&gt;The private IPv4 address assigned to the instance.&lt;/p&gt;.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: &lt;p&gt;The private IPv4 address assigned to the instance.&lt;/p&gt;.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the productCodes property: &lt;p&gt;The product codes attached to this instance, if applicable.&lt;/p&gt;.
     * 
     * @return the productCodes value.
     */
    public List<ProductCode> productCodes() {
        return this.productCodes;
    }

    /**
     * Set the productCodes property: &lt;p&gt;The product codes attached to this instance, if applicable.&lt;/p&gt;.
     * 
     * @param productCodes the productCodes value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withProductCodes(List<ProductCode> productCodes) {
        this.productCodes = productCodes;
        return this;
    }

    /**
     * Get the publicDnsName property: &lt;p&gt;[IPv4 only] The public DNS name assigned to the instance. This name is
     * not available until the instance enters the &lt;code&gt;running&lt;/code&gt; state. This name is only available
     * if you've enabled DNS hostnames for your VPC.&lt;/p&gt;.
     * 
     * @return the publicDnsName value.
     */
    public String publicDnsName() {
        return this.publicDnsName;
    }

    /**
     * Set the publicDnsName property: &lt;p&gt;[IPv4 only] The public DNS name assigned to the instance. This name is
     * not available until the instance enters the &lt;code&gt;running&lt;/code&gt; state. This name is only available
     * if you've enabled DNS hostnames for your VPC.&lt;/p&gt;.
     * 
     * @param publicDnsName the publicDnsName value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPublicDnsName(String publicDnsName) {
        this.publicDnsName = publicDnsName;
        return this;
    }

    /**
     * Get the publicIpAddress property: &lt;p&gt;The public IPv4 address, or the Carrier IP address assigned to the
     * instance, if applicable.&lt;/p&gt; &lt;p&gt;A Carrier IP address only applies to an instance launched in a subnet
     * associated with a Wavelength Zone.&lt;/p&gt;.
     * 
     * @return the publicIpAddress value.
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * Set the publicIpAddress property: &lt;p&gt;The public IPv4 address, or the Carrier IP address assigned to the
     * instance, if applicable.&lt;/p&gt; &lt;p&gt;A Carrier IP address only applies to an instance launched in a subnet
     * associated with a Wavelength Zone.&lt;/p&gt;.
     * 
     * @param publicIpAddress the publicIpAddress value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withPublicIpAddress(String publicIpAddress) {
        this.publicIpAddress = publicIpAddress;
        return this;
    }

    /**
     * Get the ramdiskId property: &lt;p&gt;The RAM disk associated with this instance, if applicable.&lt;/p&gt;.
     * 
     * @return the ramdiskId value.
     */
    public String ramdiskId() {
        return this.ramdiskId;
    }

    /**
     * Set the ramdiskId property: &lt;p&gt;The RAM disk associated with this instance, if applicable.&lt;/p&gt;.
     * 
     * @param ramdiskId the ramdiskId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withRamdiskId(String ramdiskId) {
        this.ramdiskId = ramdiskId;
        return this;
    }

    /**
     * Get the rootDeviceName property: &lt;p&gt;The device name of the root device volume (for example,
     * &lt;code&gt;/dev/sda1&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @return the rootDeviceName value.
     */
    public String rootDeviceName() {
        return this.rootDeviceName;
    }

    /**
     * Set the rootDeviceName property: &lt;p&gt;The device name of the root device volume (for example,
     * &lt;code&gt;/dev/sda1&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @param rootDeviceName the rootDeviceName value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withRootDeviceName(String rootDeviceName) {
        this.rootDeviceName = rootDeviceName;
        return this;
    }

    /**
     * Get the rootDeviceType property: &lt;p&gt;The root device type used by the AMI. The AMI can use an EBS volume or
     * an instance store volume.&lt;/p&gt;.
     * 
     * @return the rootDeviceType value.
     */
    public DeviceTypeEnumValue rootDeviceType() {
        return this.rootDeviceType;
    }

    /**
     * Set the rootDeviceType property: &lt;p&gt;The root device type used by the AMI. The AMI can use an EBS volume or
     * an instance store volume.&lt;/p&gt;.
     * 
     * @param rootDeviceType the rootDeviceType value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withRootDeviceType(DeviceTypeEnumValue rootDeviceType) {
        this.rootDeviceType = rootDeviceType;
        return this;
    }

    /**
     * Get the securityGroups property: &lt;p&gt;The security groups for the instance.&lt;/p&gt;.
     * 
     * @return the securityGroups value.
     */
    public List<GroupIdentifier> securityGroups() {
        return this.securityGroups;
    }

    /**
     * Set the securityGroups property: &lt;p&gt;The security groups for the instance.&lt;/p&gt;.
     * 
     * @param securityGroups the securityGroups value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withSecurityGroups(List<GroupIdentifier> securityGroups) {
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Get the sourceDestCheck property: &lt;p&gt;Indicates whether source/destination checking is enabled.&lt;/p&gt;.
     * 
     * @return the sourceDestCheck value.
     */
    public Boolean sourceDestCheck() {
        return this.sourceDestCheck;
    }

    /**
     * Set the sourceDestCheck property: &lt;p&gt;Indicates whether source/destination checking is enabled.&lt;/p&gt;.
     * 
     * @param sourceDestCheck the sourceDestCheck value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withSourceDestCheck(Boolean sourceDestCheck) {
        this.sourceDestCheck = sourceDestCheck;
        return this;
    }

    /**
     * Get the spotInstanceRequestId property: &lt;p&gt;If the request is a Spot Instance request, the ID of the
     * request.&lt;/p&gt;.
     * 
     * @return the spotInstanceRequestId value.
     */
    public String spotInstanceRequestId() {
        return this.spotInstanceRequestId;
    }

    /**
     * Set the spotInstanceRequestId property: &lt;p&gt;If the request is a Spot Instance request, the ID of the
     * request.&lt;/p&gt;.
     * 
     * @param spotInstanceRequestId the spotInstanceRequestId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withSpotInstanceRequestId(String spotInstanceRequestId) {
        this.spotInstanceRequestId = spotInstanceRequestId;
        return this;
    }

    /**
     * Get the sriovNetSupport property: &lt;p&gt;Specifies whether enhanced networking with the Intel 82599 Virtual
     * Function interface is enabled.&lt;/p&gt;.
     * 
     * @return the sriovNetSupport value.
     */
    public String sriovNetSupport() {
        return this.sriovNetSupport;
    }

    /**
     * Set the sriovNetSupport property: &lt;p&gt;Specifies whether enhanced networking with the Intel 82599 Virtual
     * Function interface is enabled.&lt;/p&gt;.
     * 
     * @param sriovNetSupport the sriovNetSupport value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withSriovNetSupport(String sriovNetSupport) {
        this.sriovNetSupport = sriovNetSupport;
        return this;
    }

    /**
     * Get the state property: &lt;p&gt;The current state of the instance.&lt;/p&gt;.
     * 
     * @return the state value.
     */
    public InstanceState state() {
        return this.state;
    }

    /**
     * Set the state property: &lt;p&gt;The current state of the instance.&lt;/p&gt;.
     * 
     * @param state the state value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withState(InstanceState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the stateReason property: &lt;p&gt;The reason for the most recent state transition.&lt;/p&gt;.
     * 
     * @return the stateReason value.
     */
    public StateReason stateReason() {
        return this.stateReason;
    }

    /**
     * Set the stateReason property: &lt;p&gt;The reason for the most recent state transition.&lt;/p&gt;.
     * 
     * @param stateReason the stateReason value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withStateReason(StateReason stateReason) {
        this.stateReason = stateReason;
        return this;
    }

    /**
     * Get the stateTransitionReason property: &lt;p&gt;The reason for the most recent state transition. This might be
     * an empty string.&lt;/p&gt;.
     * 
     * @return the stateTransitionReason value.
     */
    public String stateTransitionReason() {
        return this.stateTransitionReason;
    }

    /**
     * Set the stateTransitionReason property: &lt;p&gt;The reason for the most recent state transition. This might be
     * an empty string.&lt;/p&gt;.
     * 
     * @param stateTransitionReason the stateTransitionReason value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withStateTransitionReason(String stateTransitionReason) {
        this.stateTransitionReason = stateTransitionReason;
        return this;
    }

    /**
     * Get the subnetId property: &lt;p&gt;The ID of the subnet in which the instance is running.&lt;/p&gt;.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: &lt;p&gt;The ID of the subnet in which the instance is running.&lt;/p&gt;.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the tags property: &lt;p&gt;Any tags assigned to the instance.&lt;/p&gt;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated12> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: &lt;p&gt;Any tags assigned to the instance.&lt;/p&gt;.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withTags(List<TagAutoGenerated12> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the tpmSupport property: &lt;p&gt;If the instance is configured for NitroTPM support, the value is
     * &lt;code&gt;v2.0&lt;/code&gt;. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html'&gt;NitroTPM&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the tpmSupport value.
     */
    public String tpmSupport() {
        return this.tpmSupport;
    }

    /**
     * Set the tpmSupport property: &lt;p&gt;If the instance is configured for NitroTPM support, the value is
     * &lt;code&gt;v2.0&lt;/code&gt;. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html'&gt;NitroTPM&lt;/a&gt; in the
     * &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param tpmSupport the tpmSupport value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withTpmSupport(String tpmSupport) {
        this.tpmSupport = tpmSupport;
        return this;
    }

    /**
     * Get the usageOperation property: &lt;p&gt;The usage operation value for the instance. For more information, see
     * &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html'&gt;AMI billing
     * information fields&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the usageOperation value.
     */
    public String usageOperation() {
        return this.usageOperation;
    }

    /**
     * Set the usageOperation property: &lt;p&gt;The usage operation value for the instance. For more information, see
     * &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html'&gt;AMI billing
     * information fields&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param usageOperation the usageOperation value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withUsageOperation(String usageOperation) {
        this.usageOperation = usageOperation;
        return this;
    }

    /**
     * Get the usageOperationUpdateTime property: &lt;p&gt;The time that the usage operation was last
     * updated.&lt;/p&gt;.
     * 
     * @return the usageOperationUpdateTime value.
     */
    public OffsetDateTime usageOperationUpdateTime() {
        return this.usageOperationUpdateTime;
    }

    /**
     * Set the usageOperationUpdateTime property: &lt;p&gt;The time that the usage operation was last
     * updated.&lt;/p&gt;.
     * 
     * @param usageOperationUpdateTime the usageOperationUpdateTime value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withUsageOperationUpdateTime(OffsetDateTime usageOperationUpdateTime) {
        this.usageOperationUpdateTime = usageOperationUpdateTime;
        return this;
    }

    /**
     * Get the virtualizationType property: &lt;p&gt;The virtualization type of the instance.&lt;/p&gt;.
     * 
     * @return the virtualizationType value.
     */
    public VirtualizationTypeEnumValue virtualizationType() {
        return this.virtualizationType;
    }

    /**
     * Set the virtualizationType property: &lt;p&gt;The virtualization type of the instance.&lt;/p&gt;.
     * 
     * @param virtualizationType the virtualizationType value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withVirtualizationType(VirtualizationTypeEnumValue virtualizationType) {
        this.virtualizationType = virtualizationType;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID of the VPC in which the instance is running.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID of the VPC in which the instance is running.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2InstanceProperties object itself.
     */
    public AwsEc2InstanceProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (architecture() != null) {
            architecture().validate();
        }
        if (blockDeviceMappings() != null) {
            blockDeviceMappings().forEach(e -> e.validate());
        }
        if (bootMode() != null) {
            bootMode().validate();
        }
        if (capacityReservationSpecification() != null) {
            capacityReservationSpecification().validate();
        }
        if (cpuOptions() != null) {
            cpuOptions().validate();
        }
        if (currentInstanceBootMode() != null) {
            currentInstanceBootMode().validate();
        }
        if (elasticGpuAssociations() != null) {
            elasticGpuAssociations().forEach(e -> e.validate());
        }
        if (elasticInferenceAcceleratorAssociations() != null) {
            elasticInferenceAcceleratorAssociations().forEach(e -> e.validate());
        }
        if (enclaveOptions() != null) {
            enclaveOptions().validate();
        }
        if (hibernationOptions() != null) {
            hibernationOptions().validate();
        }
        if (hypervisor() != null) {
            hypervisor().validate();
        }
        if (iamInstanceProfile() != null) {
            iamInstanceProfile().validate();
        }
        if (instanceLifecycle() != null) {
            instanceLifecycle().validate();
        }
        if (instanceType() != null) {
            instanceType().validate();
        }
        if (licenses() != null) {
            licenses().forEach(e -> e.validate());
        }
        if (maintenanceOptions() != null) {
            maintenanceOptions().validate();
        }
        if (metadataOptions() != null) {
            metadataOptions().validate();
        }
        if (monitoring() != null) {
            monitoring().validate();
        }
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
        if (placement() != null) {
            placement().validate();
        }
        if (platform() != null) {
            platform().validate();
        }
        if (privateDnsNameOptions() != null) {
            privateDnsNameOptions().validate();
        }
        if (productCodes() != null) {
            productCodes().forEach(e -> e.validate());
        }
        if (rootDeviceType() != null) {
            rootDeviceType().validate();
        }
        if (securityGroups() != null) {
            securityGroups().forEach(e -> e.validate());
        }
        if (state() != null) {
            state().validate();
        }
        if (stateReason() != null) {
            stateReason().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (virtualizationType() != null) {
            virtualizationType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("amiLaunchIndex", this.amiLaunchIndex);
        jsonWriter.writeJsonField("architecture", this.architecture);
        jsonWriter.writeArrayField("blockDeviceMappings", this.blockDeviceMappings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("bootMode", this.bootMode);
        jsonWriter.writeStringField("capacityReservationId", this.capacityReservationId);
        jsonWriter.writeJsonField("capacityReservationSpecification", this.capacityReservationSpecification);
        jsonWriter.writeStringField("clientToken", this.clientToken);
        jsonWriter.writeJsonField("cpuOptions", this.cpuOptions);
        jsonWriter.writeJsonField("currentInstanceBootMode", this.currentInstanceBootMode);
        jsonWriter.writeBooleanField("ebsOptimized", this.ebsOptimized);
        jsonWriter.writeArrayField("elasticGpuAssociations", this.elasticGpuAssociations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("elasticInferenceAcceleratorAssociations",
            this.elasticInferenceAcceleratorAssociations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("enaSupport", this.enaSupport);
        jsonWriter.writeJsonField("enclaveOptions", this.enclaveOptions);
        jsonWriter.writeJsonField("hibernationOptions", this.hibernationOptions);
        jsonWriter.writeJsonField("hypervisor", this.hypervisor);
        jsonWriter.writeJsonField("iamInstanceProfile", this.iamInstanceProfile);
        jsonWriter.writeStringField("imageId", this.imageId);
        jsonWriter.writeStringField("instanceId", this.instanceId);
        jsonWriter.writeJsonField("instanceLifecycle", this.instanceLifecycle);
        jsonWriter.writeJsonField("instanceType", this.instanceType);
        jsonWriter.writeStringField("ipv6Address", this.ipv6Address);
        jsonWriter.writeStringField("kernelId", this.kernelId);
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("launchTime",
            this.launchTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.launchTime));
        jsonWriter.writeArrayField("licenses", this.licenses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("maintenanceOptions", this.maintenanceOptions);
        jsonWriter.writeJsonField("metadataOptions", this.metadataOptions);
        jsonWriter.writeJsonField("monitoring", this.monitoring);
        jsonWriter.writeArrayField("networkInterfaces", this.networkInterfaces,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeJsonField("placement", this.placement);
        jsonWriter.writeJsonField("platform", this.platform);
        jsonWriter.writeStringField("platformDetails", this.platformDetails);
        jsonWriter.writeStringField("privateDnsName", this.privateDnsName);
        jsonWriter.writeJsonField("privateDnsNameOptions", this.privateDnsNameOptions);
        jsonWriter.writeStringField("privateIpAddress", this.privateIpAddress);
        jsonWriter.writeArrayField("productCodes", this.productCodes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("publicDnsName", this.publicDnsName);
        jsonWriter.writeStringField("publicIpAddress", this.publicIpAddress);
        jsonWriter.writeStringField("ramdiskId", this.ramdiskId);
        jsonWriter.writeStringField("rootDeviceName", this.rootDeviceName);
        jsonWriter.writeJsonField("rootDeviceType", this.rootDeviceType);
        jsonWriter.writeArrayField("securityGroups", this.securityGroups,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("sourceDestCheck", this.sourceDestCheck);
        jsonWriter.writeStringField("spotInstanceRequestId", this.spotInstanceRequestId);
        jsonWriter.writeStringField("sriovNetSupport", this.sriovNetSupport);
        jsonWriter.writeJsonField("state", this.state);
        jsonWriter.writeJsonField("stateReason", this.stateReason);
        jsonWriter.writeStringField("stateTransitionReason", this.stateTransitionReason);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("tpmSupport", this.tpmSupport);
        jsonWriter.writeStringField("usageOperation", this.usageOperation);
        jsonWriter.writeStringField("usageOperationUpdateTime",
            this.usageOperationUpdateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.usageOperationUpdateTime));
        jsonWriter.writeJsonField("virtualizationType", this.virtualizationType);
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2InstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2InstanceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2InstanceProperties.
     */
    public static AwsEc2InstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2InstanceProperties deserializedAwsEc2InstanceProperties = new AwsEc2InstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amiLaunchIndex".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.amiLaunchIndex = reader.getNullable(JsonReader::getInt);
                } else if ("architecture".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.architecture = ArchitectureValuesEnumValue.fromJson(reader);
                } else if ("blockDeviceMappings".equals(fieldName)) {
                    List<InstanceBlockDeviceMapping> blockDeviceMappings
                        = reader.readArray(reader1 -> InstanceBlockDeviceMapping.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.blockDeviceMappings = blockDeviceMappings;
                } else if ("bootMode".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.bootMode = BootModeValuesEnumValue.fromJson(reader);
                } else if ("capacityReservationId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.capacityReservationId = reader.getString();
                } else if ("capacityReservationSpecification".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.capacityReservationSpecification
                        = CapacityReservationSpecificationResponse.fromJson(reader);
                } else if ("clientToken".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.clientToken = reader.getString();
                } else if ("cpuOptions".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.cpuOptions = CpuOptions.fromJson(reader);
                } else if ("currentInstanceBootMode".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.currentInstanceBootMode
                        = InstanceBootModeValuesEnumValue.fromJson(reader);
                } else if ("ebsOptimized".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.ebsOptimized = reader.getNullable(JsonReader::getBoolean);
                } else if ("elasticGpuAssociations".equals(fieldName)) {
                    List<ElasticGpuAssociation> elasticGpuAssociations
                        = reader.readArray(reader1 -> ElasticGpuAssociation.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.elasticGpuAssociations = elasticGpuAssociations;
                } else if ("elasticInferenceAcceleratorAssociations".equals(fieldName)) {
                    List<ElasticInferenceAcceleratorAssociation> elasticInferenceAcceleratorAssociations
                        = reader.readArray(reader1 -> ElasticInferenceAcceleratorAssociation.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.elasticInferenceAcceleratorAssociations
                        = elasticInferenceAcceleratorAssociations;
                } else if ("enaSupport".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.enaSupport = reader.getNullable(JsonReader::getBoolean);
                } else if ("enclaveOptions".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.enclaveOptions = EnclaveOptions.fromJson(reader);
                } else if ("hibernationOptions".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.hibernationOptions = HibernationOptions.fromJson(reader);
                } else if ("hypervisor".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.hypervisor = HypervisorTypeEnumValue.fromJson(reader);
                } else if ("iamInstanceProfile".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.iamInstanceProfile = IamInstanceProfile.fromJson(reader);
                } else if ("imageId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.imageId = reader.getString();
                } else if ("instanceId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.instanceId = reader.getString();
                } else if ("instanceLifecycle".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.instanceLifecycle
                        = InstanceLifecycleTypeEnumValue.fromJson(reader);
                } else if ("instanceType".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.instanceType = InstanceTypeEnumValue.fromJson(reader);
                } else if ("ipv6Address".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.ipv6Address = reader.getString();
                } else if ("kernelId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.kernelId = reader.getString();
                } else if ("keyName".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.keyName = reader.getString();
                } else if ("launchTime".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.launchTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("licenses".equals(fieldName)) {
                    List<LicenseConfiguration> licenses
                        = reader.readArray(reader1 -> LicenseConfiguration.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.licenses = licenses;
                } else if ("maintenanceOptions".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.maintenanceOptions
                        = InstanceMaintenanceOptions.fromJson(reader);
                } else if ("metadataOptions".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.metadataOptions
                        = InstanceMetadataOptionsResponse.fromJson(reader);
                } else if ("monitoring".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.monitoring = Monitoring.fromJson(reader);
                } else if ("networkInterfaces".equals(fieldName)) {
                    List<InstanceNetworkInterface> networkInterfaces
                        = reader.readArray(reader1 -> InstanceNetworkInterface.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.networkInterfaces = networkInterfaces;
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.outpostArn = reader.getString();
                } else if ("placement".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.placement = Placement.fromJson(reader);
                } else if ("platform".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.platform = PlatformValuesEnumValue.fromJson(reader);
                } else if ("platformDetails".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.platformDetails = reader.getString();
                } else if ("privateDnsName".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.privateDnsName = reader.getString();
                } else if ("privateDnsNameOptions".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.privateDnsNameOptions
                        = PrivateDnsNameOptionsResponse.fromJson(reader);
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.privateIpAddress = reader.getString();
                } else if ("productCodes".equals(fieldName)) {
                    List<ProductCode> productCodes = reader.readArray(reader1 -> ProductCode.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.productCodes = productCodes;
                } else if ("publicDnsName".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.publicDnsName = reader.getString();
                } else if ("publicIpAddress".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.publicIpAddress = reader.getString();
                } else if ("ramdiskId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.ramdiskId = reader.getString();
                } else if ("rootDeviceName".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.rootDeviceName = reader.getString();
                } else if ("rootDeviceType".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.rootDeviceType = DeviceTypeEnumValue.fromJson(reader);
                } else if ("securityGroups".equals(fieldName)) {
                    List<GroupIdentifier> securityGroups
                        = reader.readArray(reader1 -> GroupIdentifier.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.securityGroups = securityGroups;
                } else if ("sourceDestCheck".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.sourceDestCheck = reader.getNullable(JsonReader::getBoolean);
                } else if ("spotInstanceRequestId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.spotInstanceRequestId = reader.getString();
                } else if ("sriovNetSupport".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.sriovNetSupport = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.state = InstanceState.fromJson(reader);
                } else if ("stateReason".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.stateReason = StateReason.fromJson(reader);
                } else if ("stateTransitionReason".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.stateTransitionReason = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.subnetId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated12> tags = reader.readArray(reader1 -> TagAutoGenerated12.fromJson(reader1));
                    deserializedAwsEc2InstanceProperties.tags = tags;
                } else if ("tpmSupport".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.tpmSupport = reader.getString();
                } else if ("usageOperation".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.usageOperation = reader.getString();
                } else if ("usageOperationUpdateTime".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.usageOperationUpdateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("virtualizationType".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.virtualizationType
                        = VirtualizationTypeEnumValue.fromJson(reader);
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2InstanceProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2InstanceProperties;
        });
    }
}
