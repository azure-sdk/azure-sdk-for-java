// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of PortRange.
 */
@Fluent
public final class PortRange implements JsonSerializable<PortRange> {
    /*
     * Property fromPort
     */
    private Integer fromPort;

    /*
     * Property toPort
     */
    private Integer toPort;

    /**
     * Creates an instance of PortRange class.
     */
    public PortRange() {
    }

    /**
     * Get the fromPort property: Property fromPort.
     * 
     * @return the fromPort value.
     */
    public Integer fromPort() {
        return this.fromPort;
    }

    /**
     * Set the fromPort property: Property fromPort.
     * 
     * @param fromPort the fromPort value to set.
     * @return the PortRange object itself.
     */
    public PortRange withFromPort(Integer fromPort) {
        this.fromPort = fromPort;
        return this;
    }

    /**
     * Get the toPort property: Property toPort.
     * 
     * @return the toPort value.
     */
    public Integer toPort() {
        return this.toPort;
    }

    /**
     * Set the toPort property: Property toPort.
     * 
     * @param toPort the toPort value to set.
     * @return the PortRange object itself.
     */
    public PortRange withToPort(Integer toPort) {
        this.toPort = toPort;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("fromPort", this.fromPort);
        jsonWriter.writeNumberField("toPort", this.toPort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PortRange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PortRange if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PortRange.
     */
    public static PortRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PortRange deserializedPortRange = new PortRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fromPort".equals(fieldName)) {
                    deserializedPortRange.fromPort = reader.getNullable(JsonReader::getInt);
                } else if ("toPort".equals(fieldName)) {
                    deserializedPortRange.toPort = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPortRange;
        });
    }
}
