// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of GlobalSecondaryIndex.
 */
@Fluent
public final class GlobalSecondaryIndex implements JsonSerializable<GlobalSecondaryIndex> {
    /*
     * The settings used to enable or disable CloudWatch Contributor Insights for the specified global secondary index.
     * The settings used to enable or disable CloudWatch Contributor Insights.
     */
    private ContributorInsightsSpecification contributorInsightsSpecification;

    /*
     * The name of the global secondary index. The name must be unique among all other indexes on this table.
     */
    private String indexName;

    /*
     * The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and
     * key types: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key of an item is also known as its
     * *hash attribute*. The term 'hash attribute' derives from DynamoDB's usage of an internal hash function to evenly
     * distribute data items across partitions, based on their partition key values. The sort key of an item is also
     * known as its *range attribute*. The term 'range attribute' derives from the way DynamoDB stores items with the
     * same partition key physically close together, in sorted order by the sort key value.
     */
    private List<KeySchema> keySchema;

    /*
     * Represents attributes that are copied (projected) from the table into the global secondary index. These are in
     * addition to the primary key attributes and index key attributes, which are automatically projected. Represents
     * attributes that are copied (projected) from the table into an index. These are in addition to the primary key
     * attributes and index key attributes, which are automatically projected.
     */
    private Projection projection;

    /*
     * Represents the provisioned throughput settings for the specified global secondary index. For current minimum and
     * maximum provisioned throughput values, see [Service, Account, and Table
     * Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the *Amazon DynamoDB
     * Developer Guide*. Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and
     * ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.
     * html).
     */
    private ProvisionedThroughput provisionedThroughput;

    /**
     * Creates an instance of GlobalSecondaryIndex class.
     */
    public GlobalSecondaryIndex() {
    }

    /**
     * Get the contributorInsightsSpecification property: The settings used to enable or disable CloudWatch Contributor
     * Insights for the specified global secondary index. The settings used to enable or disable CloudWatch Contributor
     * Insights.
     * 
     * @return the contributorInsightsSpecification value.
     */
    public ContributorInsightsSpecification contributorInsightsSpecification() {
        return this.contributorInsightsSpecification;
    }

    /**
     * Set the contributorInsightsSpecification property: The settings used to enable or disable CloudWatch Contributor
     * Insights for the specified global secondary index. The settings used to enable or disable CloudWatch Contributor
     * Insights.
     * 
     * @param contributorInsightsSpecification the contributorInsightsSpecification value to set.
     * @return the GlobalSecondaryIndex object itself.
     */
    public GlobalSecondaryIndex
        withContributorInsightsSpecification(ContributorInsightsSpecification contributorInsightsSpecification) {
        this.contributorInsightsSpecification = contributorInsightsSpecification;
        return this;
    }

    /**
     * Get the indexName property: The name of the global secondary index. The name must be unique among all other
     * indexes on this table.
     * 
     * @return the indexName value.
     */
    public String indexName() {
        return this.indexName;
    }

    /**
     * Set the indexName property: The name of the global secondary index. The name must be unique among all other
     * indexes on this table.
     * 
     * @param indexName the indexName value to set.
     * @return the GlobalSecondaryIndex object itself.
     */
    public GlobalSecondaryIndex withIndexName(String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Get the keySchema property: The complete key schema for a global secondary index, which consists of one or more
     * pairs of attribute names and key types: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key of an
     * item is also known as its *hash attribute*. The term 'hash attribute' derives from DynamoDB's usage of an
     * internal hash function to evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its *range attribute*. The term 'range attribute' derives from the way
     * DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key
     * value.
     * 
     * @return the keySchema value.
     */
    public List<KeySchema> keySchema() {
        return this.keySchema;
    }

    /**
     * Set the keySchema property: The complete key schema for a global secondary index, which consists of one or more
     * pairs of attribute names and key types: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key of an
     * item is also known as its *hash attribute*. The term 'hash attribute' derives from DynamoDB's usage of an
     * internal hash function to evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its *range attribute*. The term 'range attribute' derives from the way
     * DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key
     * value.
     * 
     * @param keySchema the keySchema value to set.
     * @return the GlobalSecondaryIndex object itself.
     */
    public GlobalSecondaryIndex withKeySchema(List<KeySchema> keySchema) {
        this.keySchema = keySchema;
        return this;
    }

    /**
     * Get the projection property: Represents attributes that are copied (projected) from the table into the global
     * secondary index. These are in addition to the primary key attributes and index key attributes, which are
     * automatically projected. Represents attributes that are copied (projected) from the table into an index. These
     * are in addition to the primary key attributes and index key attributes, which are automatically projected.
     * 
     * @return the projection value.
     */
    public Projection projection() {
        return this.projection;
    }

    /**
     * Set the projection property: Represents attributes that are copied (projected) from the table into the global
     * secondary index. These are in addition to the primary key attributes and index key attributes, which are
     * automatically projected. Represents attributes that are copied (projected) from the table into an index. These
     * are in addition to the primary key attributes and index key attributes, which are automatically projected.
     * 
     * @param projection the projection value to set.
     * @return the GlobalSecondaryIndex object itself.
     */
    public GlobalSecondaryIndex withProjection(Projection projection) {
        this.projection = projection;
        return this;
    }

    /**
     * Get the provisionedThroughput property: Represents the provisioned throughput settings for the specified global
     * secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table
     * Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the *Amazon DynamoDB
     * Developer Guide*. Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and
     * ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     * 
     * @return the provisionedThroughput value.
     */
    public ProvisionedThroughput provisionedThroughput() {
        return this.provisionedThroughput;
    }

    /**
     * Set the provisionedThroughput property: Represents the provisioned throughput settings for the specified global
     * secondary index. For current minimum and maximum provisioned throughput values, see [Service, Account, and Table
     * Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the *Amazon DynamoDB
     * Developer Guide*. Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and
     * ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table
     * ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     * 
     * @param provisionedThroughput the provisionedThroughput value to set.
     * @return the GlobalSecondaryIndex object itself.
     */
    public GlobalSecondaryIndex withProvisionedThroughput(ProvisionedThroughput provisionedThroughput) {
        this.provisionedThroughput = provisionedThroughput;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contributorInsightsSpecification() != null) {
            contributorInsightsSpecification().validate();
        }
        if (keySchema() != null) {
            keySchema().forEach(e -> e.validate());
        }
        if (projection() != null) {
            projection().validate();
        }
        if (provisionedThroughput() != null) {
            provisionedThroughput().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("contributorInsightsSpecification", this.contributorInsightsSpecification);
        jsonWriter.writeStringField("indexName", this.indexName);
        jsonWriter.writeArrayField("keySchema", this.keySchema, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("projection", this.projection);
        jsonWriter.writeJsonField("provisionedThroughput", this.provisionedThroughput);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GlobalSecondaryIndex from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GlobalSecondaryIndex if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GlobalSecondaryIndex.
     */
    public static GlobalSecondaryIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalSecondaryIndex deserializedGlobalSecondaryIndex = new GlobalSecondaryIndex();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("contributorInsightsSpecification".equals(fieldName)) {
                    deserializedGlobalSecondaryIndex.contributorInsightsSpecification
                        = ContributorInsightsSpecification.fromJson(reader);
                } else if ("indexName".equals(fieldName)) {
                    deserializedGlobalSecondaryIndex.indexName = reader.getString();
                } else if ("keySchema".equals(fieldName)) {
                    List<KeySchema> keySchema = reader.readArray(reader1 -> KeySchema.fromJson(reader1));
                    deserializedGlobalSecondaryIndex.keySchema = keySchema;
                } else if ("projection".equals(fieldName)) {
                    deserializedGlobalSecondaryIndex.projection = Projection.fromJson(reader);
                } else if ("provisionedThroughput".equals(fieldName)) {
                    deserializedGlobalSecondaryIndex.provisionedThroughput = ProvisionedThroughput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGlobalSecondaryIndex;
        });
    }
}
