// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TopicConfiguration.
 */
@Fluent
public final class TopicConfiguration implements JsonSerializable<TopicConfiguration> {
    /*
     * The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event
     * Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
     */
    private String event;

    /*
     * The filtering rules that determine for which objects to send notifications. For example, you can create a filter
     * so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.
     * Specifies object key name filtering rules. For information about key name filtering, see [Configuring event
     * notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     */
    private NotificationFilter filter;

    /*
     * The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects
     * events of the specified type.
     */
    private String topic;

    /**
     * Creates an instance of TopicConfiguration class.
     */
    public TopicConfiguration() {
    }

    /**
     * Get the event property: The Amazon S3 bucket event about which to send notifications. For more information, see
     * [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3
     * User Guide*.
     * 
     * @return the event value.
     */
    public String event() {
        return this.event;
    }

    /**
     * Set the event property: The Amazon S3 bucket event about which to send notifications. For more information, see
     * [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3
     * User Guide*.
     * 
     * @param event the event value to set.
     * @return the TopicConfiguration object itself.
     */
    public TopicConfiguration withEvent(String event) {
        this.event = event;
        return this;
    }

    /**
     * Get the filter property: The filtering rules that determine for which objects to send notifications. For example,
     * you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are
     * added to the bucket. Specifies object key name filtering rules. For information about key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @return the filter value.
     */
    public NotificationFilter filter() {
        return this.filter;
    }

    /**
     * Set the filter property: The filtering rules that determine for which objects to send notifications. For example,
     * you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are
     * added to the bucket. Specifies object key name filtering rules. For information about key name filtering, see
     * [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @param filter the filter value to set.
     * @return the TopicConfiguration object itself.
     */
    public TopicConfiguration withFilter(NotificationFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the topic property: The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a
     * message when it detects events of the specified type.
     * 
     * @return the topic value.
     */
    public String topic() {
        return this.topic;
    }

    /**
     * Set the topic property: The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a
     * message when it detects events of the specified type.
     * 
     * @param topic the topic value to set.
     * @return the TopicConfiguration object itself.
     */
    public TopicConfiguration withTopic(String topic) {
        this.topic = topic;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filter() != null) {
            filter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event", this.event);
        jsonWriter.writeJsonField("filter", this.filter);
        jsonWriter.writeStringField("topic", this.topic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TopicConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TopicConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TopicConfiguration.
     */
    public static TopicConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TopicConfiguration deserializedTopicConfiguration = new TopicConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event".equals(fieldName)) {
                    deserializedTopicConfiguration.event = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    deserializedTopicConfiguration.filter = NotificationFilter.fromJson(reader);
                } else if ("topic".equals(fieldName)) {
                    deserializedTopicConfiguration.topic = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTopicConfiguration;
        });
    }
}
