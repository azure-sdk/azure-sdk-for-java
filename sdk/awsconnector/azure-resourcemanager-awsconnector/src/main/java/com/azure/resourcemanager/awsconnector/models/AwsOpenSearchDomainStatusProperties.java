// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of awsOpenSearchDomainStatus.
 */
@Fluent
public final class AwsOpenSearchDomainStatusProperties
    implements JsonSerializable<AwsOpenSearchDomainStatusProperties> {
    /*
     * <p>The Amazon Resource Name (ARN) of the domain. For more information, see <a
     * href='https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html'>IAM identifiers </a> in the
     * <i>AWS Identity and Access Management User Guide</i>.</p>
     */
    private String arn;

    /*
     * <p>Identity and Access Management (IAM) policy document specifying the access policies for the domain.</p>
     */
    private String accessPolicies;

    /*
     * <p>Key-value pairs that specify advanced configuration options.</p>
     */
    private Map<String, String> advancedOptions;

    /*
     * <p>Settings for fine-grained access control.</p>
     */
    private AdvancedSecurityOptions advancedSecurityOptions;

    /*
     * <p>Auto-Tune settings for the domain.</p>
     */
    private AutoTuneOptionsOutput autoTuneOptions;

    /*
     * <p>Information about a configuration change happening on the domain.</p>
     */
    private ChangeProgressDetails changeProgressDetails;

    /*
     * <p>Container for the cluster configuration of the domain.</p>
     */
    private ClusterConfig clusterConfig;

    /*
     * <p>Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.</p>
     */
    private CognitoOptions cognitoOptions;

    /*
     * <p>Creation status of an OpenSearch Service domain. True if domain creation is complete. False if domain creation
     * is still in progress.</p>
     */
    private Boolean created;

    /*
     * <p>Deletion status of an OpenSearch Service domain. True if domain deletion is complete. False if domain deletion
     * is still in progress. Once deletion is complete, the status of the domain is no longer returned.</p>
     */
    private Boolean deleted;

    /*
     * <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
     */
    private DomainEndpointOptions domainEndpointOptions;

    /*
     * <p>Unique identifier for the domain.</p>
     */
    private String domainId;

    /*
     * <p>Name of the domain. Domain names are unique across all domains owned by the same account within an Amazon Web
     * Services Region.</p>
     */
    private String domainName;

    /*
     * <p>The status of any changes that are currently in progress for the domain.</p>
     */
    private DomainProcessingStatusTypeEnumValue domainProcessingStatus;

    /*
     * <p>Container for EBS-based storage settings for the domain.</p>
     */
    private EbsOptions ebsOptions;

    /*
     * <p>Encryption at rest settings for the domain.</p>
     */
    private EncryptionAtRestOptions encryptionAtRestOptions;

    /*
     * <p>Domain-specific endpoint used to submit index, search, and data upload requests to the domain.</p>
     */
    private String endpoint;

    /*
     * <p>If <code>IPAddressType</code> to set to <code>dualstack</code>, a version 2 domain endpoint is provisioned.
     * This endpoint functions like a normal endpoint, except that it works with both IPv4 and IPv6 IP addresses. Normal
     * endpoints work only with IPv4 IP addresses. </p>
     */
    private String endpointV2;

    /*
     * <p>The key-value pair that exists if the OpenSearch Service domain uses VPC endpoints. Example <code>key,
     * value</code>: <code>'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'</code>.</p>
     */
    private Map<String, String> endpoints;

    /*
     * <p>Version of OpenSearch or Elasticsearch that the domain is running, in the format
     * <code>Elasticsearch_X.Y</code> or <code>OpenSearch_X.Y</code>.</p>
     */
    private String engineVersion;

    /*
     * <p>The type of IP addresses supported by the endpoint for the domain.</p>
     */
    private IpAddressTypeEnumValue ipAddressType;

    /*
     * <p>Log publishing options for the domain.</p>
     */
    private Map<String, LogPublishingOption> logPublishingOptions;

    /*
     * <p>Information about the domain properties that are currently being modified.</p>
     */
    private List<ModifyingProperties> modifyingProperties;

    /*
     * <p>Whether node-to-node encryption is enabled or disabled.</p>
     */
    private NodeToNodeEncryptionOptions nodeToNodeEncryptionOptions;

    /*
     * <p>Options that specify a custom 10-hour window during which OpenSearch Service can perform configuration changes
     * on the domain.</p>
     */
    private OffPeakWindowOptions offPeakWindowOptions;

    /*
     * <p>The status of the domain configuration. True if OpenSearch Service is processing configuration changes. False
     * if the configuration is active.</p>
     */
    private Boolean processing;

    /*
     * <p>The current status of the domain's service software.</p>
     */
    private ServiceSoftwareOptions serviceSoftwareOptions;

    /*
     * <p>DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.</p>
     */
    private SnapshotOptions snapshotOptions;

    /*
     * <p>Service software update options for the domain.</p>
     */
    private SoftwareUpdateOptions softwareUpdateOptions;

    /*
     * <p>The status of a domain version upgrade to a new version of OpenSearch or Elasticsearch. True if OpenSearch
     * Service is in the process of a version upgrade. False if the configuration is active.</p>
     */
    private Boolean upgradeProcessing;

    /*
     * <p>The VPC configuration for the domain.</p>
     */
    private VpcDerivedInfo vpcOptions;

    /**
     * Creates an instance of AwsOpenSearchDomainStatusProperties class.
     */
    public AwsOpenSearchDomainStatusProperties() {
    }

    /**
     * Get the arn property: &lt;p&gt;The Amazon Resource Name (ARN) of the domain. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html'&gt;IAM identifiers &lt;/a&gt;
     * in the &lt;i&gt;AWS Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: &lt;p&gt;The Amazon Resource Name (ARN) of the domain. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html'&gt;IAM identifiers &lt;/a&gt;
     * in the &lt;i&gt;AWS Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param arn the arn value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the accessPolicies property: &lt;p&gt;Identity and Access Management (IAM) policy document specifying the
     * access policies for the domain.&lt;/p&gt;.
     * 
     * @return the accessPolicies value.
     */
    public String accessPolicies() {
        return this.accessPolicies;
    }

    /**
     * Set the accessPolicies property: &lt;p&gt;Identity and Access Management (IAM) policy document specifying the
     * access policies for the domain.&lt;/p&gt;.
     * 
     * @param accessPolicies the accessPolicies value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withAccessPolicies(String accessPolicies) {
        this.accessPolicies = accessPolicies;
        return this;
    }

    /**
     * Get the advancedOptions property: &lt;p&gt;Key-value pairs that specify advanced configuration
     * options.&lt;/p&gt;.
     * 
     * @return the advancedOptions value.
     */
    public Map<String, String> advancedOptions() {
        return this.advancedOptions;
    }

    /**
     * Set the advancedOptions property: &lt;p&gt;Key-value pairs that specify advanced configuration
     * options.&lt;/p&gt;.
     * 
     * @param advancedOptions the advancedOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withAdvancedOptions(Map<String, String> advancedOptions) {
        this.advancedOptions = advancedOptions;
        return this;
    }

    /**
     * Get the advancedSecurityOptions property: &lt;p&gt;Settings for fine-grained access control.&lt;/p&gt;.
     * 
     * @return the advancedSecurityOptions value.
     */
    public AdvancedSecurityOptions advancedSecurityOptions() {
        return this.advancedSecurityOptions;
    }

    /**
     * Set the advancedSecurityOptions property: &lt;p&gt;Settings for fine-grained access control.&lt;/p&gt;.
     * 
     * @param advancedSecurityOptions the advancedSecurityOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties
        withAdvancedSecurityOptions(AdvancedSecurityOptions advancedSecurityOptions) {
        this.advancedSecurityOptions = advancedSecurityOptions;
        return this;
    }

    /**
     * Get the autoTuneOptions property: &lt;p&gt;Auto-Tune settings for the domain.&lt;/p&gt;.
     * 
     * @return the autoTuneOptions value.
     */
    public AutoTuneOptionsOutput autoTuneOptions() {
        return this.autoTuneOptions;
    }

    /**
     * Set the autoTuneOptions property: &lt;p&gt;Auto-Tune settings for the domain.&lt;/p&gt;.
     * 
     * @param autoTuneOptions the autoTuneOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withAutoTuneOptions(AutoTuneOptionsOutput autoTuneOptions) {
        this.autoTuneOptions = autoTuneOptions;
        return this;
    }

    /**
     * Get the changeProgressDetails property: &lt;p&gt;Information about a configuration change happening on the
     * domain.&lt;/p&gt;.
     * 
     * @return the changeProgressDetails value.
     */
    public ChangeProgressDetails changeProgressDetails() {
        return this.changeProgressDetails;
    }

    /**
     * Set the changeProgressDetails property: &lt;p&gt;Information about a configuration change happening on the
     * domain.&lt;/p&gt;.
     * 
     * @param changeProgressDetails the changeProgressDetails value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withChangeProgressDetails(ChangeProgressDetails changeProgressDetails) {
        this.changeProgressDetails = changeProgressDetails;
        return this;
    }

    /**
     * Get the clusterConfig property: &lt;p&gt;Container for the cluster configuration of the domain.&lt;/p&gt;.
     * 
     * @return the clusterConfig value.
     */
    public ClusterConfig clusterConfig() {
        return this.clusterConfig;
    }

    /**
     * Set the clusterConfig property: &lt;p&gt;Container for the cluster configuration of the domain.&lt;/p&gt;.
     * 
     * @param clusterConfig the clusterConfig value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withClusterConfig(ClusterConfig clusterConfig) {
        this.clusterConfig = clusterConfig;
        return this;
    }

    /**
     * Get the cognitoOptions property: &lt;p&gt;Key-value pairs to configure Amazon Cognito authentication for
     * OpenSearch Dashboards.&lt;/p&gt;.
     * 
     * @return the cognitoOptions value.
     */
    public CognitoOptions cognitoOptions() {
        return this.cognitoOptions;
    }

    /**
     * Set the cognitoOptions property: &lt;p&gt;Key-value pairs to configure Amazon Cognito authentication for
     * OpenSearch Dashboards.&lt;/p&gt;.
     * 
     * @param cognitoOptions the cognitoOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withCognitoOptions(CognitoOptions cognitoOptions) {
        this.cognitoOptions = cognitoOptions;
        return this;
    }

    /**
     * Get the created property: &lt;p&gt;Creation status of an OpenSearch Service domain. True if domain creation is
     * complete. False if domain creation is still in progress.&lt;/p&gt;.
     * 
     * @return the created value.
     */
    public Boolean created() {
        return this.created;
    }

    /**
     * Set the created property: &lt;p&gt;Creation status of an OpenSearch Service domain. True if domain creation is
     * complete. False if domain creation is still in progress.&lt;/p&gt;.
     * 
     * @param created the created value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withCreated(Boolean created) {
        this.created = created;
        return this;
    }

    /**
     * Get the deleted property: &lt;p&gt;Deletion status of an OpenSearch Service domain. True if domain deletion is
     * complete. False if domain deletion is still in progress. Once deletion is complete, the status of the domain is
     * no longer returned.&lt;/p&gt;.
     * 
     * @return the deleted value.
     */
    public Boolean deleted() {
        return this.deleted;
    }

    /**
     * Set the deleted property: &lt;p&gt;Deletion status of an OpenSearch Service domain. True if domain deletion is
     * complete. False if domain deletion is still in progress. Once deletion is complete, the status of the domain is
     * no longer returned.&lt;/p&gt;.
     * 
     * @param deleted the deleted value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * Get the domainEndpointOptions property: &lt;p&gt;Additional options for the domain endpoint, such as whether to
     * require HTTPS for all traffic.&lt;/p&gt;.
     * 
     * @return the domainEndpointOptions value.
     */
    public DomainEndpointOptions domainEndpointOptions() {
        return this.domainEndpointOptions;
    }

    /**
     * Set the domainEndpointOptions property: &lt;p&gt;Additional options for the domain endpoint, such as whether to
     * require HTTPS for all traffic.&lt;/p&gt;.
     * 
     * @param domainEndpointOptions the domainEndpointOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withDomainEndpointOptions(DomainEndpointOptions domainEndpointOptions) {
        this.domainEndpointOptions = domainEndpointOptions;
        return this;
    }

    /**
     * Get the domainId property: &lt;p&gt;Unique identifier for the domain.&lt;/p&gt;.
     * 
     * @return the domainId value.
     */
    public String domainId() {
        return this.domainId;
    }

    /**
     * Set the domainId property: &lt;p&gt;Unique identifier for the domain.&lt;/p&gt;.
     * 
     * @param domainId the domainId value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withDomainId(String domainId) {
        this.domainId = domainId;
        return this;
    }

    /**
     * Get the domainName property: &lt;p&gt;Name of the domain. Domain names are unique across all domains owned by the
     * same account within an Amazon Web Services Region.&lt;/p&gt;.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: &lt;p&gt;Name of the domain. Domain names are unique across all domains owned by the
     * same account within an Amazon Web Services Region.&lt;/p&gt;.
     * 
     * @param domainName the domainName value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the domainProcessingStatus property: &lt;p&gt;The status of any changes that are currently in progress for
     * the domain.&lt;/p&gt;.
     * 
     * @return the domainProcessingStatus value.
     */
    public DomainProcessingStatusTypeEnumValue domainProcessingStatus() {
        return this.domainProcessingStatus;
    }

    /**
     * Set the domainProcessingStatus property: &lt;p&gt;The status of any changes that are currently in progress for
     * the domain.&lt;/p&gt;.
     * 
     * @param domainProcessingStatus the domainProcessingStatus value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties
        withDomainProcessingStatus(DomainProcessingStatusTypeEnumValue domainProcessingStatus) {
        this.domainProcessingStatus = domainProcessingStatus;
        return this;
    }

    /**
     * Get the ebsOptions property: &lt;p&gt;Container for EBS-based storage settings for the domain.&lt;/p&gt;.
     * 
     * @return the ebsOptions value.
     */
    public EbsOptions ebsOptions() {
        return this.ebsOptions;
    }

    /**
     * Set the ebsOptions property: &lt;p&gt;Container for EBS-based storage settings for the domain.&lt;/p&gt;.
     * 
     * @param ebsOptions the ebsOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withEbsOptions(EbsOptions ebsOptions) {
        this.ebsOptions = ebsOptions;
        return this;
    }

    /**
     * Get the encryptionAtRestOptions property: &lt;p&gt;Encryption at rest settings for the domain.&lt;/p&gt;.
     * 
     * @return the encryptionAtRestOptions value.
     */
    public EncryptionAtRestOptions encryptionAtRestOptions() {
        return this.encryptionAtRestOptions;
    }

    /**
     * Set the encryptionAtRestOptions property: &lt;p&gt;Encryption at rest settings for the domain.&lt;/p&gt;.
     * 
     * @param encryptionAtRestOptions the encryptionAtRestOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties
        withEncryptionAtRestOptions(EncryptionAtRestOptions encryptionAtRestOptions) {
        this.encryptionAtRestOptions = encryptionAtRestOptions;
        return this;
    }

    /**
     * Get the endpoint property: &lt;p&gt;Domain-specific endpoint used to submit index, search, and data upload
     * requests to the domain.&lt;/p&gt;.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: &lt;p&gt;Domain-specific endpoint used to submit index, search, and data upload
     * requests to the domain.&lt;/p&gt;.
     * 
     * @param endpoint the endpoint value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the endpointV2 property: &lt;p&gt;If &lt;code&gt;IPAddressType&lt;/code&gt; to set to
     * &lt;code&gt;dualstack&lt;/code&gt;, a version 2 domain endpoint is provisioned. This endpoint functions like a
     * normal endpoint, except that it works with both IPv4 and IPv6 IP addresses. Normal endpoints work only with IPv4
     * IP addresses. &lt;/p&gt;.
     * 
     * @return the endpointV2 value.
     */
    public String endpointV2() {
        return this.endpointV2;
    }

    /**
     * Set the endpointV2 property: &lt;p&gt;If &lt;code&gt;IPAddressType&lt;/code&gt; to set to
     * &lt;code&gt;dualstack&lt;/code&gt;, a version 2 domain endpoint is provisioned. This endpoint functions like a
     * normal endpoint, except that it works with both IPv4 and IPv6 IP addresses. Normal endpoints work only with IPv4
     * IP addresses. &lt;/p&gt;.
     * 
     * @param endpointV2 the endpointV2 value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withEndpointV2(String endpointV2) {
        this.endpointV2 = endpointV2;
        return this;
    }

    /**
     * Get the endpoints property: &lt;p&gt;The key-value pair that exists if the OpenSearch Service domain uses VPC
     * endpoints. Example &lt;code&gt;key, value&lt;/code&gt;:
     * &lt;code&gt;'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the endpoints value.
     */
    public Map<String, String> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: &lt;p&gt;The key-value pair that exists if the OpenSearch Service domain uses VPC
     * endpoints. Example &lt;code&gt;key, value&lt;/code&gt;:
     * &lt;code&gt;'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param endpoints the endpoints value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withEndpoints(Map<String, String> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the engineVersion property: &lt;p&gt;Version of OpenSearch or Elasticsearch that the domain is running, in
     * the format &lt;code&gt;Elasticsearch_X.Y&lt;/code&gt; or &lt;code&gt;OpenSearch_X.Y&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the engineVersion value.
     */
    public String engineVersion() {
        return this.engineVersion;
    }

    /**
     * Set the engineVersion property: &lt;p&gt;Version of OpenSearch or Elasticsearch that the domain is running, in
     * the format &lt;code&gt;Elasticsearch_X.Y&lt;/code&gt; or &lt;code&gt;OpenSearch_X.Y&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param engineVersion the engineVersion value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }

    /**
     * Get the ipAddressType property: &lt;p&gt;The type of IP addresses supported by the endpoint for the
     * domain.&lt;/p&gt;.
     * 
     * @return the ipAddressType value.
     */
    public IpAddressTypeEnumValue ipAddressType() {
        return this.ipAddressType;
    }

    /**
     * Set the ipAddressType property: &lt;p&gt;The type of IP addresses supported by the endpoint for the
     * domain.&lt;/p&gt;.
     * 
     * @param ipAddressType the ipAddressType value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withIpAddressType(IpAddressTypeEnumValue ipAddressType) {
        this.ipAddressType = ipAddressType;
        return this;
    }

    /**
     * Get the logPublishingOptions property: &lt;p&gt;Log publishing options for the domain.&lt;/p&gt;.
     * 
     * @return the logPublishingOptions value.
     */
    public Map<String, LogPublishingOption> logPublishingOptions() {
        return this.logPublishingOptions;
    }

    /**
     * Set the logPublishingOptions property: &lt;p&gt;Log publishing options for the domain.&lt;/p&gt;.
     * 
     * @param logPublishingOptions the logPublishingOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties
        withLogPublishingOptions(Map<String, LogPublishingOption> logPublishingOptions) {
        this.logPublishingOptions = logPublishingOptions;
        return this;
    }

    /**
     * Get the modifyingProperties property: &lt;p&gt;Information about the domain properties that are currently being
     * modified.&lt;/p&gt;.
     * 
     * @return the modifyingProperties value.
     */
    public List<ModifyingProperties> modifyingProperties() {
        return this.modifyingProperties;
    }

    /**
     * Set the modifyingProperties property: &lt;p&gt;Information about the domain properties that are currently being
     * modified.&lt;/p&gt;.
     * 
     * @param modifyingProperties the modifyingProperties value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withModifyingProperties(List<ModifyingProperties> modifyingProperties) {
        this.modifyingProperties = modifyingProperties;
        return this;
    }

    /**
     * Get the nodeToNodeEncryptionOptions property: &lt;p&gt;Whether node-to-node encryption is enabled or
     * disabled.&lt;/p&gt;.
     * 
     * @return the nodeToNodeEncryptionOptions value.
     */
    public NodeToNodeEncryptionOptions nodeToNodeEncryptionOptions() {
        return this.nodeToNodeEncryptionOptions;
    }

    /**
     * Set the nodeToNodeEncryptionOptions property: &lt;p&gt;Whether node-to-node encryption is enabled or
     * disabled.&lt;/p&gt;.
     * 
     * @param nodeToNodeEncryptionOptions the nodeToNodeEncryptionOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties
        withNodeToNodeEncryptionOptions(NodeToNodeEncryptionOptions nodeToNodeEncryptionOptions) {
        this.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions;
        return this;
    }

    /**
     * Get the offPeakWindowOptions property: &lt;p&gt;Options that specify a custom 10-hour window during which
     * OpenSearch Service can perform configuration changes on the domain.&lt;/p&gt;.
     * 
     * @return the offPeakWindowOptions value.
     */
    public OffPeakWindowOptions offPeakWindowOptions() {
        return this.offPeakWindowOptions;
    }

    /**
     * Set the offPeakWindowOptions property: &lt;p&gt;Options that specify a custom 10-hour window during which
     * OpenSearch Service can perform configuration changes on the domain.&lt;/p&gt;.
     * 
     * @param offPeakWindowOptions the offPeakWindowOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withOffPeakWindowOptions(OffPeakWindowOptions offPeakWindowOptions) {
        this.offPeakWindowOptions = offPeakWindowOptions;
        return this;
    }

    /**
     * Get the processing property: &lt;p&gt;The status of the domain configuration. True if OpenSearch Service is
     * processing configuration changes. False if the configuration is active.&lt;/p&gt;.
     * 
     * @return the processing value.
     */
    public Boolean processing() {
        return this.processing;
    }

    /**
     * Set the processing property: &lt;p&gt;The status of the domain configuration. True if OpenSearch Service is
     * processing configuration changes. False if the configuration is active.&lt;/p&gt;.
     * 
     * @param processing the processing value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withProcessing(Boolean processing) {
        this.processing = processing;
        return this;
    }

    /**
     * Get the serviceSoftwareOptions property: &lt;p&gt;The current status of the domain's service software.&lt;/p&gt;.
     * 
     * @return the serviceSoftwareOptions value.
     */
    public ServiceSoftwareOptions serviceSoftwareOptions() {
        return this.serviceSoftwareOptions;
    }

    /**
     * Set the serviceSoftwareOptions property: &lt;p&gt;The current status of the domain's service software.&lt;/p&gt;.
     * 
     * @param serviceSoftwareOptions the serviceSoftwareOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties
        withServiceSoftwareOptions(ServiceSoftwareOptions serviceSoftwareOptions) {
        this.serviceSoftwareOptions = serviceSoftwareOptions;
        return this;
    }

    /**
     * Get the snapshotOptions property: &lt;p&gt;DEPRECATED. Container for parameters required to configure automated
     * snapshots of domain indexes.&lt;/p&gt;.
     * 
     * @return the snapshotOptions value.
     */
    public SnapshotOptions snapshotOptions() {
        return this.snapshotOptions;
    }

    /**
     * Set the snapshotOptions property: &lt;p&gt;DEPRECATED. Container for parameters required to configure automated
     * snapshots of domain indexes.&lt;/p&gt;.
     * 
     * @param snapshotOptions the snapshotOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withSnapshotOptions(SnapshotOptions snapshotOptions) {
        this.snapshotOptions = snapshotOptions;
        return this;
    }

    /**
     * Get the softwareUpdateOptions property: &lt;p&gt;Service software update options for the domain.&lt;/p&gt;.
     * 
     * @return the softwareUpdateOptions value.
     */
    public SoftwareUpdateOptions softwareUpdateOptions() {
        return this.softwareUpdateOptions;
    }

    /**
     * Set the softwareUpdateOptions property: &lt;p&gt;Service software update options for the domain.&lt;/p&gt;.
     * 
     * @param softwareUpdateOptions the softwareUpdateOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withSoftwareUpdateOptions(SoftwareUpdateOptions softwareUpdateOptions) {
        this.softwareUpdateOptions = softwareUpdateOptions;
        return this;
    }

    /**
     * Get the upgradeProcessing property: &lt;p&gt;The status of a domain version upgrade to a new version of
     * OpenSearch or Elasticsearch. True if OpenSearch Service is in the process of a version upgrade. False if the
     * configuration is active.&lt;/p&gt;.
     * 
     * @return the upgradeProcessing value.
     */
    public Boolean upgradeProcessing() {
        return this.upgradeProcessing;
    }

    /**
     * Set the upgradeProcessing property: &lt;p&gt;The status of a domain version upgrade to a new version of
     * OpenSearch or Elasticsearch. True if OpenSearch Service is in the process of a version upgrade. False if the
     * configuration is active.&lt;/p&gt;.
     * 
     * @param upgradeProcessing the upgradeProcessing value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withUpgradeProcessing(Boolean upgradeProcessing) {
        this.upgradeProcessing = upgradeProcessing;
        return this;
    }

    /**
     * Get the vpcOptions property: &lt;p&gt;The VPC configuration for the domain.&lt;/p&gt;.
     * 
     * @return the vpcOptions value.
     */
    public VpcDerivedInfo vpcOptions() {
        return this.vpcOptions;
    }

    /**
     * Set the vpcOptions property: &lt;p&gt;The VPC configuration for the domain.&lt;/p&gt;.
     * 
     * @param vpcOptions the vpcOptions value to set.
     * @return the AwsOpenSearchDomainStatusProperties object itself.
     */
    public AwsOpenSearchDomainStatusProperties withVpcOptions(VpcDerivedInfo vpcOptions) {
        this.vpcOptions = vpcOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (advancedSecurityOptions() != null) {
            advancedSecurityOptions().validate();
        }
        if (autoTuneOptions() != null) {
            autoTuneOptions().validate();
        }
        if (changeProgressDetails() != null) {
            changeProgressDetails().validate();
        }
        if (clusterConfig() != null) {
            clusterConfig().validate();
        }
        if (cognitoOptions() != null) {
            cognitoOptions().validate();
        }
        if (domainEndpointOptions() != null) {
            domainEndpointOptions().validate();
        }
        if (domainProcessingStatus() != null) {
            domainProcessingStatus().validate();
        }
        if (ebsOptions() != null) {
            ebsOptions().validate();
        }
        if (encryptionAtRestOptions() != null) {
            encryptionAtRestOptions().validate();
        }
        if (ipAddressType() != null) {
            ipAddressType().validate();
        }
        if (logPublishingOptions() != null) {
            logPublishingOptions().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (modifyingProperties() != null) {
            modifyingProperties().forEach(e -> e.validate());
        }
        if (nodeToNodeEncryptionOptions() != null) {
            nodeToNodeEncryptionOptions().validate();
        }
        if (offPeakWindowOptions() != null) {
            offPeakWindowOptions().validate();
        }
        if (serviceSoftwareOptions() != null) {
            serviceSoftwareOptions().validate();
        }
        if (snapshotOptions() != null) {
            snapshotOptions().validate();
        }
        if (softwareUpdateOptions() != null) {
            softwareUpdateOptions().validate();
        }
        if (vpcOptions() != null) {
            vpcOptions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("accessPolicies", this.accessPolicies);
        jsonWriter.writeMapField("advancedOptions", this.advancedOptions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("advancedSecurityOptions", this.advancedSecurityOptions);
        jsonWriter.writeJsonField("autoTuneOptions", this.autoTuneOptions);
        jsonWriter.writeJsonField("changeProgressDetails", this.changeProgressDetails);
        jsonWriter.writeJsonField("clusterConfig", this.clusterConfig);
        jsonWriter.writeJsonField("cognitoOptions", this.cognitoOptions);
        jsonWriter.writeBooleanField("created", this.created);
        jsonWriter.writeBooleanField("deleted", this.deleted);
        jsonWriter.writeJsonField("domainEndpointOptions", this.domainEndpointOptions);
        jsonWriter.writeStringField("domainId", this.domainId);
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeJsonField("domainProcessingStatus", this.domainProcessingStatus);
        jsonWriter.writeJsonField("ebsOptions", this.ebsOptions);
        jsonWriter.writeJsonField("encryptionAtRestOptions", this.encryptionAtRestOptions);
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeStringField("endpointV2", this.endpointV2);
        jsonWriter.writeMapField("endpoints", this.endpoints, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("engineVersion", this.engineVersion);
        jsonWriter.writeJsonField("ipAddressType", this.ipAddressType);
        jsonWriter.writeMapField("logPublishingOptions", this.logPublishingOptions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("modifyingProperties", this.modifyingProperties,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("nodeToNodeEncryptionOptions", this.nodeToNodeEncryptionOptions);
        jsonWriter.writeJsonField("offPeakWindowOptions", this.offPeakWindowOptions);
        jsonWriter.writeBooleanField("processing", this.processing);
        jsonWriter.writeJsonField("serviceSoftwareOptions", this.serviceSoftwareOptions);
        jsonWriter.writeJsonField("snapshotOptions", this.snapshotOptions);
        jsonWriter.writeJsonField("softwareUpdateOptions", this.softwareUpdateOptions);
        jsonWriter.writeBooleanField("upgradeProcessing", this.upgradeProcessing);
        jsonWriter.writeJsonField("vpcOptions", this.vpcOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsOpenSearchDomainStatusProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsOpenSearchDomainStatusProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsOpenSearchDomainStatusProperties.
     */
    public static AwsOpenSearchDomainStatusProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsOpenSearchDomainStatusProperties deserializedAwsOpenSearchDomainStatusProperties
                = new AwsOpenSearchDomainStatusProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.arn = reader.getString();
                } else if ("accessPolicies".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.accessPolicies = reader.getString();
                } else if ("advancedOptions".equals(fieldName)) {
                    Map<String, String> advancedOptions = reader.readMap(reader1 -> reader1.getString());
                    deserializedAwsOpenSearchDomainStatusProperties.advancedOptions = advancedOptions;
                } else if ("advancedSecurityOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.advancedSecurityOptions
                        = AdvancedSecurityOptions.fromJson(reader);
                } else if ("autoTuneOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.autoTuneOptions
                        = AutoTuneOptionsOutput.fromJson(reader);
                } else if ("changeProgressDetails".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.changeProgressDetails
                        = ChangeProgressDetails.fromJson(reader);
                } else if ("clusterConfig".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.clusterConfig = ClusterConfig.fromJson(reader);
                } else if ("cognitoOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.cognitoOptions = CognitoOptions.fromJson(reader);
                } else if ("created".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.created
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("deleted".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.deleted
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("domainEndpointOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.domainEndpointOptions
                        = DomainEndpointOptions.fromJson(reader);
                } else if ("domainId".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.domainId = reader.getString();
                } else if ("domainName".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.domainName = reader.getString();
                } else if ("domainProcessingStatus".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.domainProcessingStatus
                        = DomainProcessingStatusTypeEnumValue.fromJson(reader);
                } else if ("ebsOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.ebsOptions = EbsOptions.fromJson(reader);
                } else if ("encryptionAtRestOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.encryptionAtRestOptions
                        = EncryptionAtRestOptions.fromJson(reader);
                } else if ("endpoint".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.endpoint = reader.getString();
                } else if ("endpointV2".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.endpointV2 = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    Map<String, String> endpoints = reader.readMap(reader1 -> reader1.getString());
                    deserializedAwsOpenSearchDomainStatusProperties.endpoints = endpoints;
                } else if ("engineVersion".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.engineVersion = reader.getString();
                } else if ("ipAddressType".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.ipAddressType
                        = IpAddressTypeEnumValue.fromJson(reader);
                } else if ("logPublishingOptions".equals(fieldName)) {
                    Map<String, LogPublishingOption> logPublishingOptions
                        = reader.readMap(reader1 -> LogPublishingOption.fromJson(reader1));
                    deserializedAwsOpenSearchDomainStatusProperties.logPublishingOptions = logPublishingOptions;
                } else if ("modifyingProperties".equals(fieldName)) {
                    List<ModifyingProperties> modifyingProperties
                        = reader.readArray(reader1 -> ModifyingProperties.fromJson(reader1));
                    deserializedAwsOpenSearchDomainStatusProperties.modifyingProperties = modifyingProperties;
                } else if ("nodeToNodeEncryptionOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.nodeToNodeEncryptionOptions
                        = NodeToNodeEncryptionOptions.fromJson(reader);
                } else if ("offPeakWindowOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.offPeakWindowOptions
                        = OffPeakWindowOptions.fromJson(reader);
                } else if ("processing".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.processing
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("serviceSoftwareOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.serviceSoftwareOptions
                        = ServiceSoftwareOptions.fromJson(reader);
                } else if ("snapshotOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.snapshotOptions = SnapshotOptions.fromJson(reader);
                } else if ("softwareUpdateOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.softwareUpdateOptions
                        = SoftwareUpdateOptions.fromJson(reader);
                } else if ("upgradeProcessing".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.upgradeProcessing
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("vpcOptions".equals(fieldName)) {
                    deserializedAwsOpenSearchDomainStatusProperties.vpcOptions = VpcDerivedInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsOpenSearchDomainStatusProperties;
        });
    }
}
