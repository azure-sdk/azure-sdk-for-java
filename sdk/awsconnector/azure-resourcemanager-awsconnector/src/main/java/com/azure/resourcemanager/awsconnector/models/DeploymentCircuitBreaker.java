// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of DeploymentCircuitBreaker.
 */
@Fluent
public final class DeploymentCircuitBreaker implements JsonSerializable<DeploymentCircuitBreaker> {
    /*
     * Determines whether to use the deployment circuit breaker logic for the service.
     */
    private Boolean enable;

    /*
     * Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is
     * on, when a service deployment fails, the service is rolled back to the last deployment that completed
     * successfully.
     */
    private Boolean rollback;

    /**
     * Creates an instance of DeploymentCircuitBreaker class.
     */
    public DeploymentCircuitBreaker() {
    }

    /**
     * Get the enable property: Determines whether to use the deployment circuit breaker logic for the service.
     * 
     * @return the enable value.
     */
    public Boolean enable() {
        return this.enable;
    }

    /**
     * Set the enable property: Determines whether to use the deployment circuit breaker logic for the service.
     * 
     * @param enable the enable value to set.
     * @return the DeploymentCircuitBreaker object itself.
     */
    public DeploymentCircuitBreaker withEnable(Boolean enable) {
        this.enable = enable;
        return this;
    }

    /**
     * Get the rollback property: Determines whether to configure Amazon ECS to roll back the service if a service
     * deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last
     * deployment that completed successfully.
     * 
     * @return the rollback value.
     */
    public Boolean rollback() {
        return this.rollback;
    }

    /**
     * Set the rollback property: Determines whether to configure Amazon ECS to roll back the service if a service
     * deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last
     * deployment that completed successfully.
     * 
     * @param rollback the rollback value to set.
     * @return the DeploymentCircuitBreaker object itself.
     */
    public DeploymentCircuitBreaker withRollback(Boolean rollback) {
        this.rollback = rollback;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enable", this.enable);
        jsonWriter.writeBooleanField("rollback", this.rollback);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentCircuitBreaker from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentCircuitBreaker if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentCircuitBreaker.
     */
    public static DeploymentCircuitBreaker fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentCircuitBreaker deserializedDeploymentCircuitBreaker = new DeploymentCircuitBreaker();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enable".equals(fieldName)) {
                    deserializedDeploymentCircuitBreaker.enable = reader.getNullable(JsonReader::getBoolean);
                } else if ("rollback".equals(fieldName)) {
                    deserializedDeploymentCircuitBreaker.rollback = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentCircuitBreaker;
        });
    }
}
