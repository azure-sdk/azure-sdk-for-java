// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsCodeBuildSourceCredentialsInfo.
 */
@Fluent
public final class AwsCodeBuildSourceCredentialsInfoProperties
    implements JsonSerializable<AwsCodeBuildSourceCredentialsInfoProperties> {
    /*
     * <p> The Amazon Resource Name (ARN) of the token. </p>
     */
    private String arn;

    /*
     * <p> The type of authentication used by the credentials. Valid options are OAUTH, BASIC_AUTH,
     * PERSONAL_ACCESS_TOKEN, or CODECONNECTIONS. </p>
     */
    private AuthTypeEnumValue authType;

    /*
     * <p>The connection ARN if your serverType type is GITLAB or GITLAB_SELF_MANAGED and your authType is
     * CODECONNECTIONS.</p>
     */
    private String resource;

    /*
     * <p> The type of source provider. The valid options are GITHUB, GITHUB_ENTERPRISE, GITLAB, GITLAB_SELF_MANAGED, or
     * BITBUCKET. </p>
     */
    private ServerTypeEnumValue serverType;

    /**
     * Creates an instance of AwsCodeBuildSourceCredentialsInfoProperties class.
     */
    public AwsCodeBuildSourceCredentialsInfoProperties() {
    }

    /**
     * Get the arn property: &lt;p&gt; The Amazon Resource Name (ARN) of the token. &lt;/p&gt;.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: &lt;p&gt; The Amazon Resource Name (ARN) of the token. &lt;/p&gt;.
     * 
     * @param arn the arn value to set.
     * @return the AwsCodeBuildSourceCredentialsInfoProperties object itself.
     */
    public AwsCodeBuildSourceCredentialsInfoProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the authType property: &lt;p&gt; The type of authentication used by the credentials. Valid options are OAUTH,
     * BASIC_AUTH, PERSONAL_ACCESS_TOKEN, or CODECONNECTIONS. &lt;/p&gt;.
     * 
     * @return the authType value.
     */
    public AuthTypeEnumValue authType() {
        return this.authType;
    }

    /**
     * Set the authType property: &lt;p&gt; The type of authentication used by the credentials. Valid options are OAUTH,
     * BASIC_AUTH, PERSONAL_ACCESS_TOKEN, or CODECONNECTIONS. &lt;/p&gt;.
     * 
     * @param authType the authType value to set.
     * @return the AwsCodeBuildSourceCredentialsInfoProperties object itself.
     */
    public AwsCodeBuildSourceCredentialsInfoProperties withAuthType(AuthTypeEnumValue authType) {
        this.authType = authType;
        return this;
    }

    /**
     * Get the resource property: &lt;p&gt;The connection ARN if your serverType type is GITLAB or GITLAB_SELF_MANAGED
     * and your authType is CODECONNECTIONS.&lt;/p&gt;.
     * 
     * @return the resource value.
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Set the resource property: &lt;p&gt;The connection ARN if your serverType type is GITLAB or GITLAB_SELF_MANAGED
     * and your authType is CODECONNECTIONS.&lt;/p&gt;.
     * 
     * @param resource the resource value to set.
     * @return the AwsCodeBuildSourceCredentialsInfoProperties object itself.
     */
    public AwsCodeBuildSourceCredentialsInfoProperties withResource(String resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the serverType property: &lt;p&gt; The type of source provider. The valid options are GITHUB,
     * GITHUB_ENTERPRISE, GITLAB, GITLAB_SELF_MANAGED, or BITBUCKET. &lt;/p&gt;.
     * 
     * @return the serverType value.
     */
    public ServerTypeEnumValue serverType() {
        return this.serverType;
    }

    /**
     * Set the serverType property: &lt;p&gt; The type of source provider. The valid options are GITHUB,
     * GITHUB_ENTERPRISE, GITLAB, GITLAB_SELF_MANAGED, or BITBUCKET. &lt;/p&gt;.
     * 
     * @param serverType the serverType value to set.
     * @return the AwsCodeBuildSourceCredentialsInfoProperties object itself.
     */
    public AwsCodeBuildSourceCredentialsInfoProperties withServerType(ServerTypeEnumValue serverType) {
        this.serverType = serverType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authType() != null) {
            authType().validate();
        }
        if (serverType() != null) {
            serverType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeJsonField("authType", this.authType);
        jsonWriter.writeStringField("resource", this.resource);
        jsonWriter.writeJsonField("serverType", this.serverType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsCodeBuildSourceCredentialsInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsCodeBuildSourceCredentialsInfoProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsCodeBuildSourceCredentialsInfoProperties.
     */
    public static AwsCodeBuildSourceCredentialsInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsCodeBuildSourceCredentialsInfoProperties deserializedAwsCodeBuildSourceCredentialsInfoProperties
                = new AwsCodeBuildSourceCredentialsInfoProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsCodeBuildSourceCredentialsInfoProperties.arn = reader.getString();
                } else if ("authType".equals(fieldName)) {
                    deserializedAwsCodeBuildSourceCredentialsInfoProperties.authType
                        = AuthTypeEnumValue.fromJson(reader);
                } else if ("resource".equals(fieldName)) {
                    deserializedAwsCodeBuildSourceCredentialsInfoProperties.resource = reader.getString();
                } else if ("serverType".equals(fieldName)) {
                    deserializedAwsCodeBuildSourceCredentialsInfoProperties.serverType
                        = ServerTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsCodeBuildSourceCredentialsInfoProperties;
        });
    }
}
