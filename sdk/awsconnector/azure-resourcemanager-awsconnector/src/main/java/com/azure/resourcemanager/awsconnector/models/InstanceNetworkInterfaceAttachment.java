// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of InstanceNetworkInterfaceAttachment.
 */
@Fluent
public final class InstanceNetworkInterfaceAttachment implements JsonSerializable<InstanceNetworkInterfaceAttachment> {
    /*
     * <p>The time stamp when the attachment initiated.</p>
     */
    private OffsetDateTime attachTime;

    /*
     * <p>The ID of the network interface attachment.</p>
     */
    private String attachmentId;

    /*
     * <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
     */
    private Boolean deleteOnTermination;

    /*
     * <p>The index of the device on the instance for the network interface attachment.</p>
     */
    private Integer deviceIndex;

    /*
     * <p>Contains the ENA Express settings for the network interface that's attached to the instance.</p>
     */
    private InstanceAttachmentEnaSrdSpecification enaSrdSpecification;

    /*
     * <p>The index of the network card.</p>
     */
    private Integer networkCardIndex;

    /*
     * <p>The attachment state.</p>
     */
    private AttachmentStatusEnumValue status;

    /**
     * Creates an instance of InstanceNetworkInterfaceAttachment class.
     */
    public InstanceNetworkInterfaceAttachment() {
    }

    /**
     * Get the attachTime property: &lt;p&gt;The time stamp when the attachment initiated.&lt;/p&gt;.
     * 
     * @return the attachTime value.
     */
    public OffsetDateTime attachTime() {
        return this.attachTime;
    }

    /**
     * Set the attachTime property: &lt;p&gt;The time stamp when the attachment initiated.&lt;/p&gt;.
     * 
     * @param attachTime the attachTime value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment withAttachTime(OffsetDateTime attachTime) {
        this.attachTime = attachTime;
        return this;
    }

    /**
     * Get the attachmentId property: &lt;p&gt;The ID of the network interface attachment.&lt;/p&gt;.
     * 
     * @return the attachmentId value.
     */
    public String attachmentId() {
        return this.attachmentId;
    }

    /**
     * Set the attachmentId property: &lt;p&gt;The ID of the network interface attachment.&lt;/p&gt;.
     * 
     * @param attachmentId the attachmentId value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment withAttachmentId(String attachmentId) {
        this.attachmentId = attachmentId;
        return this;
    }

    /**
     * Get the deleteOnTermination property: &lt;p&gt;Indicates whether the network interface is deleted when the
     * instance is terminated.&lt;/p&gt;.
     * 
     * @return the deleteOnTermination value.
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }

    /**
     * Set the deleteOnTermination property: &lt;p&gt;Indicates whether the network interface is deleted when the
     * instance is terminated.&lt;/p&gt;.
     * 
     * @param deleteOnTermination the deleteOnTermination value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment withDeleteOnTermination(Boolean deleteOnTermination) {
        this.deleteOnTermination = deleteOnTermination;
        return this;
    }

    /**
     * Get the deviceIndex property: &lt;p&gt;The index of the device on the instance for the network interface
     * attachment.&lt;/p&gt;.
     * 
     * @return the deviceIndex value.
     */
    public Integer deviceIndex() {
        return this.deviceIndex;
    }

    /**
     * Set the deviceIndex property: &lt;p&gt;The index of the device on the instance for the network interface
     * attachment.&lt;/p&gt;.
     * 
     * @param deviceIndex the deviceIndex value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment withDeviceIndex(Integer deviceIndex) {
        this.deviceIndex = deviceIndex;
        return this;
    }

    /**
     * Get the enaSrdSpecification property: &lt;p&gt;Contains the ENA Express settings for the network interface that's
     * attached to the instance.&lt;/p&gt;.
     * 
     * @return the enaSrdSpecification value.
     */
    public InstanceAttachmentEnaSrdSpecification enaSrdSpecification() {
        return this.enaSrdSpecification;
    }

    /**
     * Set the enaSrdSpecification property: &lt;p&gt;Contains the ENA Express settings for the network interface that's
     * attached to the instance.&lt;/p&gt;.
     * 
     * @param enaSrdSpecification the enaSrdSpecification value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment
        withEnaSrdSpecification(InstanceAttachmentEnaSrdSpecification enaSrdSpecification) {
        this.enaSrdSpecification = enaSrdSpecification;
        return this;
    }

    /**
     * Get the networkCardIndex property: &lt;p&gt;The index of the network card.&lt;/p&gt;.
     * 
     * @return the networkCardIndex value.
     */
    public Integer networkCardIndex() {
        return this.networkCardIndex;
    }

    /**
     * Set the networkCardIndex property: &lt;p&gt;The index of the network card.&lt;/p&gt;.
     * 
     * @param networkCardIndex the networkCardIndex value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment withNetworkCardIndex(Integer networkCardIndex) {
        this.networkCardIndex = networkCardIndex;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The attachment state.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public AttachmentStatusEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The attachment state.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the InstanceNetworkInterfaceAttachment object itself.
     */
    public InstanceNetworkInterfaceAttachment withStatus(AttachmentStatusEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (enaSrdSpecification() != null) {
            enaSrdSpecification().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("attachTime",
            this.attachTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.attachTime));
        jsonWriter.writeStringField("attachmentId", this.attachmentId);
        jsonWriter.writeBooleanField("deleteOnTermination", this.deleteOnTermination);
        jsonWriter.writeNumberField("deviceIndex", this.deviceIndex);
        jsonWriter.writeJsonField("enaSrdSpecification", this.enaSrdSpecification);
        jsonWriter.writeNumberField("networkCardIndex", this.networkCardIndex);
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceNetworkInterfaceAttachment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceNetworkInterfaceAttachment if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceNetworkInterfaceAttachment.
     */
    public static InstanceNetworkInterfaceAttachment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceNetworkInterfaceAttachment deserializedInstanceNetworkInterfaceAttachment
                = new InstanceNetworkInterfaceAttachment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attachTime".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.attachTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("attachmentId".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.attachmentId = reader.getString();
                } else if ("deleteOnTermination".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.deleteOnTermination
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("deviceIndex".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.deviceIndex = reader.getNullable(JsonReader::getInt);
                } else if ("enaSrdSpecification".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.enaSrdSpecification
                        = InstanceAttachmentEnaSrdSpecification.fromJson(reader);
                } else if ("networkCardIndex".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.networkCardIndex
                        = reader.getNullable(JsonReader::getInt);
                } else if ("status".equals(fieldName)) {
                    deserializedInstanceNetworkInterfaceAttachment.status = AttachmentStatusEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceNetworkInterfaceAttachment;
        });
    }
}
