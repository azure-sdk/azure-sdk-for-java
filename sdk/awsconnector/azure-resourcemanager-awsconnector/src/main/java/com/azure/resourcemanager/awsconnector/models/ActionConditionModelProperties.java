// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ActionConditionModelProperties.
 */
@Fluent
public final class ActionConditionModelProperties implements JsonSerializable<ActionConditionModelProperties> {
    /*
     * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must
     * match all conditions or must match at least one condition.
     */
    private Action action;

    /**
     * Creates an instance of ActionConditionModelProperties class.
     */
    public ActionConditionModelProperties() {
    }

    /**
     * Get the action property: Logic to apply to the filtering conditions. You can specify that, in order to satisfy
     * the filter, a log must match all conditions or must match at least one condition.
     * 
     * @return the action value.
     */
    public Action action() {
        return this.action;
    }

    /**
     * Set the action property: Logic to apply to the filtering conditions. You can specify that, in order to satisfy
     * the filter, a log must match all conditions or must match at least one condition.
     * 
     * @param action the action value to set.
     * @return the ActionConditionModelProperties object itself.
     */
    public ActionConditionModelProperties withAction(Action action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionConditionModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionConditionModelProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActionConditionModelProperties.
     */
    public static ActionConditionModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActionConditionModelProperties deserializedActionConditionModelProperties
                = new ActionConditionModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedActionConditionModelProperties.action = Action.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActionConditionModelProperties;
        });
    }
}
