// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Definition of awsEc2Snapshot.
 */
@Fluent
public final class AwsEc2SnapshotProperties implements JsonSerializable<AwsEc2SnapshotProperties> {
    /*
     * <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the
     * data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys
     * are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key
     * identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by
     * <a>DescribeSnapshots</a>.</p>
     */
    private String dataEncryptionKeyId;

    /*
     * <p>The description for the snapshot.</p>
     */
    private String description;

    /*
     * <p>Indicates whether the snapshot is encrypted.</p>
     */
    private Boolean encrypted;

    /*
     * <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume
     * encryption key for the parent volume.</p>
     */
    private String kmsKeyId;

    /*
     * <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html'>Amazon EBS local snapshots on
     * Outposts</a> in the <i>Amazon EBS User Guide</i>.</p>
     */
    private String outpostArn;

    /*
     * <p>The Amazon Web Services owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not the
     * user-configured Amazon Web Services account alias set using the IAM console.</p>
     */
    private String ownerAlias;

    /*
     * <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
     */
    private String ownerId;

    /*
     * <p>The progress of the snapshot, as a percentage.</p>
     */
    private String progress;

    /*
     * <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily
     * restored snapshot will be automatically re-archived.</p>
     */
    private OffsetDateTime restoreExpiryTime;

    /*
     * <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
     */
    private String snapshotId;

    /*
     * <p>Reserved for future use.</p>
     */
    private SseTypeEnumValue sseType;

    /*
     * <p>The time stamp when the snapshot was initiated.</p>
     */
    private OffsetDateTime startTime;

    /*
     * <p>The snapshot state.</p>
     */
    private SnapshotStateEnumValue state;

    /*
     * <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if
     * the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to
     * help you diagnose why the error occurred. This parameter is only returned by <a>DescribeSnapshots</a>.</p>
     */
    private String stateMessage;

    /*
     * <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored
     * in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the
     * snapshot is currently archived and that it must be restored before it can be used.</p>
     */
    private StorageTierEnumValue storageTier;

    /*
     * <p>Any tags assigned to the snapshot.</p>
     */
    private List<TagAutoGenerated19> tags;

    /*
     * <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action
     * have an arbitrary volume ID that should not be used for any purpose.</p>
     */
    private String volumeId;

    /*
     * <p>The size of the volume, in GiB.</p>
     */
    private Integer volumeSize;

    /**
     * Creates an instance of AwsEc2SnapshotProperties class.
     */
    public AwsEc2SnapshotProperties() {
    }

    /**
     * Get the dataEncryptionKeyId property: &lt;p&gt;The data encryption key identifier for the snapshot. This value is
     * a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or
     * snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if
     * snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage.
     * This parameter is only returned by &lt;a&gt;DescribeSnapshots&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the dataEncryptionKeyId value.
     */
    public String dataEncryptionKeyId() {
        return this.dataEncryptionKeyId;
    }

    /**
     * Set the dataEncryptionKeyId property: &lt;p&gt;The data encryption key identifier for the snapshot. This value is
     * a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or
     * snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if
     * snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage.
     * This parameter is only returned by &lt;a&gt;DescribeSnapshots&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param dataEncryptionKeyId the dataEncryptionKeyId value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withDataEncryptionKeyId(String dataEncryptionKeyId) {
        this.dataEncryptionKeyId = dataEncryptionKeyId;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;The description for the snapshot.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;The description for the snapshot.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the encrypted property: &lt;p&gt;Indicates whether the snapshot is encrypted.&lt;/p&gt;.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: &lt;p&gt;Indicates whether the snapshot is encrypted.&lt;/p&gt;.
     * 
     * @param encrypted the encrypted value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the kmsKeyId property: &lt;p&gt;The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
     * that was used to protect the volume encryption key for the parent volume.&lt;/p&gt;.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: &lt;p&gt;The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
     * that was used to protect the volume encryption key for the parent volume.&lt;/p&gt;.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the outpostArn property: &lt;p&gt;The ARN of the Outpost on which the snapshot is stored. For more
     * information, see &lt;a href='https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html'&gt;Amazon
     * EBS local snapshots on Outposts&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: &lt;p&gt;The ARN of the Outpost on which the snapshot is stored. For more
     * information, see &lt;a href='https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html'&gt;Amazon
     * EBS local snapshots on Outposts&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the ownerAlias property: &lt;p&gt;The Amazon Web Services owner alias, from an Amazon-maintained list
     * (&lt;code&gt;amazon&lt;/code&gt;). This is not the user-configured Amazon Web Services account alias set using
     * the IAM console.&lt;/p&gt;.
     * 
     * @return the ownerAlias value.
     */
    public String ownerAlias() {
        return this.ownerAlias;
    }

    /**
     * Set the ownerAlias property: &lt;p&gt;The Amazon Web Services owner alias, from an Amazon-maintained list
     * (&lt;code&gt;amazon&lt;/code&gt;). This is not the user-configured Amazon Web Services account alias set using
     * the IAM console.&lt;/p&gt;.
     * 
     * @param ownerAlias the ownerAlias value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withOwnerAlias(String ownerAlias) {
        this.ownerAlias = ownerAlias;
        return this;
    }

    /**
     * Get the ownerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the EBS
     * snapshot.&lt;/p&gt;.
     * 
     * @return the ownerId value.
     */
    public String ownerId() {
        return this.ownerId;
    }

    /**
     * Set the ownerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the EBS
     * snapshot.&lt;/p&gt;.
     * 
     * @param ownerId the ownerId value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Get the progress property: &lt;p&gt;The progress of the snapshot, as a percentage.&lt;/p&gt;.
     * 
     * @return the progress value.
     */
    public String progress() {
        return this.progress;
    }

    /**
     * Set the progress property: &lt;p&gt;The progress of the snapshot, as a percentage.&lt;/p&gt;.
     * 
     * @param progress the progress value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withProgress(String progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Get the restoreExpiryTime property: &lt;p&gt;Only for archived snapshots that are temporarily restored. Indicates
     * the date and time when a temporarily restored snapshot will be automatically re-archived.&lt;/p&gt;.
     * 
     * @return the restoreExpiryTime value.
     */
    public OffsetDateTime restoreExpiryTime() {
        return this.restoreExpiryTime;
    }

    /**
     * Set the restoreExpiryTime property: &lt;p&gt;Only for archived snapshots that are temporarily restored. Indicates
     * the date and time when a temporarily restored snapshot will be automatically re-archived.&lt;/p&gt;.
     * 
     * @param restoreExpiryTime the restoreExpiryTime value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withRestoreExpiryTime(OffsetDateTime restoreExpiryTime) {
        this.restoreExpiryTime = restoreExpiryTime;
        return this;
    }

    /**
     * Get the snapshotId property: &lt;p&gt;The ID of the snapshot. Each snapshot receives a unique identifier when it
     * is created.&lt;/p&gt;.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: &lt;p&gt;The ID of the snapshot. Each snapshot receives a unique identifier when it
     * is created.&lt;/p&gt;.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Get the sseType property: &lt;p&gt;Reserved for future use.&lt;/p&gt;.
     * 
     * @return the sseType value.
     */
    public SseTypeEnumValue sseType() {
        return this.sseType;
    }

    /**
     * Set the sseType property: &lt;p&gt;Reserved for future use.&lt;/p&gt;.
     * 
     * @param sseType the sseType value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withSseType(SseTypeEnumValue sseType) {
        this.sseType = sseType;
        return this;
    }

    /**
     * Get the startTime property: &lt;p&gt;The time stamp when the snapshot was initiated.&lt;/p&gt;.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: &lt;p&gt;The time stamp when the snapshot was initiated.&lt;/p&gt;.
     * 
     * @param startTime the startTime value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the state property: &lt;p&gt;The snapshot state.&lt;/p&gt;.
     * 
     * @return the state value.
     */
    public SnapshotStateEnumValue state() {
        return this.state;
    }

    /**
     * Set the state property: &lt;p&gt;The snapshot state.&lt;/p&gt;.
     * 
     * @param state the state value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withState(SnapshotStateEnumValue state) {
        this.state = state;
        return this;
    }

    /**
     * Get the stateMessage property: &lt;p&gt;Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot
     * copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this
     * field displays error state details to help you diagnose why the error occurred. This parameter is only returned
     * by &lt;a&gt;DescribeSnapshots&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the stateMessage value.
     */
    public String stateMessage() {
        return this.stateMessage;
    }

    /**
     * Set the stateMessage property: &lt;p&gt;Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot
     * copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this
     * field displays error state details to help you diagnose why the error occurred. This parameter is only returned
     * by &lt;a&gt;DescribeSnapshots&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param stateMessage the stateMessage value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withStateMessage(String stateMessage) {
        this.stateMessage = stateMessage;
        return this;
    }

    /**
     * Get the storageTier property: &lt;p&gt;The storage tier in which the snapshot is stored.
     * &lt;code&gt;standard&lt;/code&gt; indicates that the snapshot is stored in the standard snapshot storage tier and
     * that it is ready for use. &lt;code&gt;archive&lt;/code&gt; indicates that the snapshot is currently archived and
     * that it must be restored before it can be used.&lt;/p&gt;.
     * 
     * @return the storageTier value.
     */
    public StorageTierEnumValue storageTier() {
        return this.storageTier;
    }

    /**
     * Set the storageTier property: &lt;p&gt;The storage tier in which the snapshot is stored.
     * &lt;code&gt;standard&lt;/code&gt; indicates that the snapshot is stored in the standard snapshot storage tier and
     * that it is ready for use. &lt;code&gt;archive&lt;/code&gt; indicates that the snapshot is currently archived and
     * that it must be restored before it can be used.&lt;/p&gt;.
     * 
     * @param storageTier the storageTier value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withStorageTier(StorageTierEnumValue storageTier) {
        this.storageTier = storageTier;
        return this;
    }

    /**
     * Get the tags property: &lt;p&gt;Any tags assigned to the snapshot.&lt;/p&gt;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated19> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: &lt;p&gt;Any tags assigned to the snapshot.&lt;/p&gt;.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withTags(List<TagAutoGenerated19> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the volumeId property: &lt;p&gt;The ID of the volume that was used to create the snapshot. Snapshots created
     * by the &lt;a&gt;CopySnapshot&lt;/a&gt; action have an arbitrary volume ID that should not be used for any
     * purpose.&lt;/p&gt;.
     * 
     * @return the volumeId value.
     */
    public String volumeId() {
        return this.volumeId;
    }

    /**
     * Set the volumeId property: &lt;p&gt;The ID of the volume that was used to create the snapshot. Snapshots created
     * by the &lt;a&gt;CopySnapshot&lt;/a&gt; action have an arbitrary volume ID that should not be used for any
     * purpose.&lt;/p&gt;.
     * 
     * @param volumeId the volumeId value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withVolumeId(String volumeId) {
        this.volumeId = volumeId;
        return this;
    }

    /**
     * Get the volumeSize property: &lt;p&gt;The size of the volume, in GiB.&lt;/p&gt;.
     * 
     * @return the volumeSize value.
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    /**
     * Set the volumeSize property: &lt;p&gt;The size of the volume, in GiB.&lt;/p&gt;.
     * 
     * @param volumeSize the volumeSize value to set.
     * @return the AwsEc2SnapshotProperties object itself.
     */
    public AwsEc2SnapshotProperties withVolumeSize(Integer volumeSize) {
        this.volumeSize = volumeSize;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sseType() != null) {
            sseType().validate();
        }
        if (state() != null) {
            state().validate();
        }
        if (storageTier() != null) {
            storageTier().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataEncryptionKeyId", this.dataEncryptionKeyId);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeStringField("ownerAlias", this.ownerAlias);
        jsonWriter.writeStringField("ownerId", this.ownerId);
        jsonWriter.writeStringField("progress", this.progress);
        jsonWriter.writeStringField("restoreExpiryTime",
            this.restoreExpiryTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.restoreExpiryTime));
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        jsonWriter.writeJsonField("sseType", this.sseType);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeJsonField("state", this.state);
        jsonWriter.writeStringField("stateMessage", this.stateMessage);
        jsonWriter.writeJsonField("storageTier", this.storageTier);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("volumeId", this.volumeId);
        jsonWriter.writeNumberField("volumeSize", this.volumeSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2SnapshotProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2SnapshotProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2SnapshotProperties.
     */
    public static AwsEc2SnapshotProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2SnapshotProperties deserializedAwsEc2SnapshotProperties = new AwsEc2SnapshotProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataEncryptionKeyId".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.dataEncryptionKeyId = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.description = reader.getString();
                } else if ("encrypted".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.kmsKeyId = reader.getString();
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.outpostArn = reader.getString();
                } else if ("ownerAlias".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.ownerAlias = reader.getString();
                } else if ("ownerId".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.ownerId = reader.getString();
                } else if ("progress".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.progress = reader.getString();
                } else if ("restoreExpiryTime".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.restoreExpiryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.snapshotId = reader.getString();
                } else if ("sseType".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.sseType = SseTypeEnumValue.fromJson(reader);
                } else if ("startTime".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.state = SnapshotStateEnumValue.fromJson(reader);
                } else if ("stateMessage".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.stateMessage = reader.getString();
                } else if ("storageTier".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.storageTier = StorageTierEnumValue.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated19> tags = reader.readArray(reader1 -> TagAutoGenerated19.fromJson(reader1));
                    deserializedAwsEc2SnapshotProperties.tags = tags;
                } else if ("volumeId".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.volumeId = reader.getString();
                } else if ("volumeSize".equals(fieldName)) {
                    deserializedAwsEc2SnapshotProperties.volumeSize = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2SnapshotProperties;
        });
    }
}
