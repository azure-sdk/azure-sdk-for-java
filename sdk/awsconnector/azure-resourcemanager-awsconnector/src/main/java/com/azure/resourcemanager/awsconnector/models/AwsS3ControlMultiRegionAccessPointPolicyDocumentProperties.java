// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsS3ControlMultiRegionAccessPointPolicyDocument.
 */
@Fluent
public final class AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties
    implements JsonSerializable<AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties> {
    /*
     * <p>The last established policy for the Multi-Region Access Point.</p>
     */
    private EstablishedMultiRegionAccessPointPolicy established;

    /*
     * <p>The proposed policy for the Multi-Region Access Point.</p>
     */
    private ProposedMultiRegionAccessPointPolicy proposed;

    /**
     * Creates an instance of AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties class.
     */
    public AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties() {
    }

    /**
     * Get the established property: &lt;p&gt;The last established policy for the Multi-Region Access Point.&lt;/p&gt;.
     * 
     * @return the established value.
     */
    public EstablishedMultiRegionAccessPointPolicy established() {
        return this.established;
    }

    /**
     * Set the established property: &lt;p&gt;The last established policy for the Multi-Region Access Point.&lt;/p&gt;.
     * 
     * @param established the established value to set.
     * @return the AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties object itself.
     */
    public AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties
        withEstablished(EstablishedMultiRegionAccessPointPolicy established) {
        this.established = established;
        return this;
    }

    /**
     * Get the proposed property: &lt;p&gt;The proposed policy for the Multi-Region Access Point.&lt;/p&gt;.
     * 
     * @return the proposed value.
     */
    public ProposedMultiRegionAccessPointPolicy proposed() {
        return this.proposed;
    }

    /**
     * Set the proposed property: &lt;p&gt;The proposed policy for the Multi-Region Access Point.&lt;/p&gt;.
     * 
     * @param proposed the proposed value to set.
     * @return the AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties object itself.
     */
    public AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties
        withProposed(ProposedMultiRegionAccessPointPolicy proposed) {
        this.proposed = proposed;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (established() != null) {
            established().validate();
        }
        if (proposed() != null) {
            proposed().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("established", this.established);
        jsonWriter.writeJsonField("proposed", this.proposed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties.
     */
    public static AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties deserializedAwsS3ControlMultiRegionAccessPointPolicyDocumentProperties
                = new AwsS3ControlMultiRegionAccessPointPolicyDocumentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("established".equals(fieldName)) {
                    deserializedAwsS3ControlMultiRegionAccessPointPolicyDocumentProperties.established
                        = EstablishedMultiRegionAccessPointPolicy.fromJson(reader);
                } else if ("proposed".equals(fieldName)) {
                    deserializedAwsS3ControlMultiRegionAccessPointPolicyDocumentProperties.proposed
                        = ProposedMultiRegionAccessPointPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsS3ControlMultiRegionAccessPointPolicyDocumentProperties;
        });
    }
}
