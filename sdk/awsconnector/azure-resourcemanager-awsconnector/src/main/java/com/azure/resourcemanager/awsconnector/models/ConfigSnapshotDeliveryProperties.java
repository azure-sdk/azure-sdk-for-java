// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ConfigSnapshotDeliveryProperties.
 */
@Fluent
public final class ConfigSnapshotDeliveryProperties implements JsonSerializable<ConfigSnapshotDeliveryProperties> {
    /*
     * <p>The frequency with which Config delivers configuration snapshots.</p>
     */
    private MaximumExecutionFrequencyEnumValue deliveryFrequency;

    /**
     * Creates an instance of ConfigSnapshotDeliveryProperties class.
     */
    public ConfigSnapshotDeliveryProperties() {
    }

    /**
     * Get the deliveryFrequency property: &lt;p&gt;The frequency with which Config delivers configuration
     * snapshots.&lt;/p&gt;.
     * 
     * @return the deliveryFrequency value.
     */
    public MaximumExecutionFrequencyEnumValue deliveryFrequency() {
        return this.deliveryFrequency;
    }

    /**
     * Set the deliveryFrequency property: &lt;p&gt;The frequency with which Config delivers configuration
     * snapshots.&lt;/p&gt;.
     * 
     * @param deliveryFrequency the deliveryFrequency value to set.
     * @return the ConfigSnapshotDeliveryProperties object itself.
     */
    public ConfigSnapshotDeliveryProperties
        withDeliveryFrequency(MaximumExecutionFrequencyEnumValue deliveryFrequency) {
        this.deliveryFrequency = deliveryFrequency;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deliveryFrequency() != null) {
            deliveryFrequency().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("deliveryFrequency", this.deliveryFrequency);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigSnapshotDeliveryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigSnapshotDeliveryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigSnapshotDeliveryProperties.
     */
    public static ConfigSnapshotDeliveryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigSnapshotDeliveryProperties deserializedConfigSnapshotDeliveryProperties
                = new ConfigSnapshotDeliveryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deliveryFrequency".equals(fieldName)) {
                    deserializedConfigSnapshotDeliveryProperties.deliveryFrequency
                        = MaximumExecutionFrequencyEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigSnapshotDeliveryProperties;
        });
    }
}
