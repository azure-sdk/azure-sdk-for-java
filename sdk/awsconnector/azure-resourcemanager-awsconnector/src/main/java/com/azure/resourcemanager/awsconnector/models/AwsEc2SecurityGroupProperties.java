// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2SecurityGroup.
 */
@Fluent
public final class AwsEc2SecurityGroupProperties implements JsonSerializable<AwsEc2SecurityGroupProperties> {
    /*
     * <p>A description of the security group.</p>
     */
    private String description;

    /*
     * <p>The ID of the security group.</p>
     */
    private String groupId;

    /*
     * <p>The name of the security group.</p>
     */
    private String groupName;

    /*
     * <p>The inbound rules associated with the security group.</p>
     */
    private List<IpPermission> ipPermissions;

    /*
     * <p>The outbound rules associated with the security group.</p>
     */
    private List<IpPermission> ipPermissionsEgress;

    /*
     * <p>The Amazon Web Services account ID of the owner of the security group.</p>
     */
    private String ownerId;

    /*
     * <p>Any tags assigned to the security group.</p>
     */
    private List<TagAutoGenerated18> tags;

    /*
     * <p>The ID of the VPC for the security group.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2SecurityGroupProperties class.
     */
    public AwsEc2SecurityGroupProperties() {
    }

    /**
     * Get the description property: &lt;p&gt;A description of the security group.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description of the security group.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the groupId property: &lt;p&gt;The ID of the security group.&lt;/p&gt;.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: &lt;p&gt;The ID of the security group.&lt;/p&gt;.
     * 
     * @param groupId the groupId value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the groupName property: &lt;p&gt;The name of the security group.&lt;/p&gt;.
     * 
     * @return the groupName value.
     */
    public String groupName() {
        return this.groupName;
    }

    /**
     * Set the groupName property: &lt;p&gt;The name of the security group.&lt;/p&gt;.
     * 
     * @param groupName the groupName value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    /**
     * Get the ipPermissions property: &lt;p&gt;The inbound rules associated with the security group.&lt;/p&gt;.
     * 
     * @return the ipPermissions value.
     */
    public List<IpPermission> ipPermissions() {
        return this.ipPermissions;
    }

    /**
     * Set the ipPermissions property: &lt;p&gt;The inbound rules associated with the security group.&lt;/p&gt;.
     * 
     * @param ipPermissions the ipPermissions value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withIpPermissions(List<IpPermission> ipPermissions) {
        this.ipPermissions = ipPermissions;
        return this;
    }

    /**
     * Get the ipPermissionsEgress property: &lt;p&gt;The outbound rules associated with the security group.&lt;/p&gt;.
     * 
     * @return the ipPermissionsEgress value.
     */
    public List<IpPermission> ipPermissionsEgress() {
        return this.ipPermissionsEgress;
    }

    /**
     * Set the ipPermissionsEgress property: &lt;p&gt;The outbound rules associated with the security group.&lt;/p&gt;.
     * 
     * @param ipPermissionsEgress the ipPermissionsEgress value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withIpPermissionsEgress(List<IpPermission> ipPermissionsEgress) {
        this.ipPermissionsEgress = ipPermissionsEgress;
        return this;
    }

    /**
     * Get the ownerId property: &lt;p&gt;The Amazon Web Services account ID of the owner of the security
     * group.&lt;/p&gt;.
     * 
     * @return the ownerId value.
     */
    public String ownerId() {
        return this.ownerId;
    }

    /**
     * Set the ownerId property: &lt;p&gt;The Amazon Web Services account ID of the owner of the security
     * group.&lt;/p&gt;.
     * 
     * @param ownerId the ownerId value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Get the tags property: &lt;p&gt;Any tags assigned to the security group.&lt;/p&gt;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated18> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: &lt;p&gt;Any tags assigned to the security group.&lt;/p&gt;.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withTags(List<TagAutoGenerated18> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID of the VPC for the security group.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID of the VPC for the security group.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2SecurityGroupProperties object itself.
     */
    public AwsEc2SecurityGroupProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipPermissions() != null) {
            ipPermissions().forEach(e -> e.validate());
        }
        if (ipPermissionsEgress() != null) {
            ipPermissionsEgress().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("groupId", this.groupId);
        jsonWriter.writeStringField("groupName", this.groupName);
        jsonWriter.writeArrayField("ipPermissions", this.ipPermissions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipPermissionsEgress", this.ipPermissionsEgress,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("ownerId", this.ownerId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2SecurityGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2SecurityGroupProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2SecurityGroupProperties.
     */
    public static AwsEc2SecurityGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2SecurityGroupProperties deserializedAwsEc2SecurityGroupProperties
                = new AwsEc2SecurityGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedAwsEc2SecurityGroupProperties.description = reader.getString();
                } else if ("groupId".equals(fieldName)) {
                    deserializedAwsEc2SecurityGroupProperties.groupId = reader.getString();
                } else if ("groupName".equals(fieldName)) {
                    deserializedAwsEc2SecurityGroupProperties.groupName = reader.getString();
                } else if ("ipPermissions".equals(fieldName)) {
                    List<IpPermission> ipPermissions = reader.readArray(reader1 -> IpPermission.fromJson(reader1));
                    deserializedAwsEc2SecurityGroupProperties.ipPermissions = ipPermissions;
                } else if ("ipPermissionsEgress".equals(fieldName)) {
                    List<IpPermission> ipPermissionsEgress
                        = reader.readArray(reader1 -> IpPermission.fromJson(reader1));
                    deserializedAwsEc2SecurityGroupProperties.ipPermissionsEgress = ipPermissionsEgress;
                } else if ("ownerId".equals(fieldName)) {
                    deserializedAwsEc2SecurityGroupProperties.ownerId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated18> tags = reader.readArray(reader1 -> TagAutoGenerated18.fromJson(reader1));
                    deserializedAwsEc2SecurityGroupProperties.tags = tags;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2SecurityGroupProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2SecurityGroupProperties;
        });
    }
}
