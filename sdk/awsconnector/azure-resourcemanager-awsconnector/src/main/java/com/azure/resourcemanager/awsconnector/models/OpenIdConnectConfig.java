// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of OpenIDConnectConfig.
 */
@Fluent
public final class OpenIdConnectConfig implements JsonSerializable<OpenIdConnectConfig> {
    /*
     * <p>The number of milliseconds that a token is valid after being authenticated.</p>
     */
    private Long authTtl;

    /*
     * <p>The client identifier of the relying party at the OpenID identity provider. This identifier is typically
     * obtained when the relying party is registered with the OpenID identity provider. You can specify a regular
     * expression so that AppSync can validate against multiple client identifiers at a time.</p>
     */
    private String clientId;

    /*
     * <p>The number of milliseconds that a token is valid after it's issued to a user.</p>
     */
    private Long iatTtl;

    /*
     * <p>The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of
     * <code>iss</code> in the ID token.</p>
     */
    private String issuer;

    /**
     * Creates an instance of OpenIdConnectConfig class.
     */
    public OpenIdConnectConfig() {
    }

    /**
     * Get the authTtl property: &lt;p&gt;The number of milliseconds that a token is valid after being
     * authenticated.&lt;/p&gt;.
     * 
     * @return the authTtl value.
     */
    public Long authTtl() {
        return this.authTtl;
    }

    /**
     * Set the authTtl property: &lt;p&gt;The number of milliseconds that a token is valid after being
     * authenticated.&lt;/p&gt;.
     * 
     * @param authTtl the authTtl value to set.
     * @return the OpenIdConnectConfig object itself.
     */
    public OpenIdConnectConfig withAuthTtl(Long authTtl) {
        this.authTtl = authTtl;
        return this;
    }

    /**
     * Get the clientId property: &lt;p&gt;The client identifier of the relying party at the OpenID identity provider.
     * This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You
     * can specify a regular expression so that AppSync can validate against multiple client identifiers at a
     * time.&lt;/p&gt;.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: &lt;p&gt;The client identifier of the relying party at the OpenID identity provider.
     * This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You
     * can specify a regular expression so that AppSync can validate against multiple client identifiers at a
     * time.&lt;/p&gt;.
     * 
     * @param clientId the clientId value to set.
     * @return the OpenIdConnectConfig object itself.
     */
    public OpenIdConnectConfig withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the iatTtl property: &lt;p&gt;The number of milliseconds that a token is valid after it's issued to a
     * user.&lt;/p&gt;.
     * 
     * @return the iatTtl value.
     */
    public Long iatTtl() {
        return this.iatTtl;
    }

    /**
     * Set the iatTtl property: &lt;p&gt;The number of milliseconds that a token is valid after it's issued to a
     * user.&lt;/p&gt;.
     * 
     * @param iatTtl the iatTtl value to set.
     * @return the OpenIdConnectConfig object itself.
     */
    public OpenIdConnectConfig withIatTtl(Long iatTtl) {
        this.iatTtl = iatTtl;
        return this;
    }

    /**
     * Get the issuer property: &lt;p&gt;The issuer for the OIDC configuration. The issuer returned by discovery must
     * exactly match the value of &lt;code&gt;iss&lt;/code&gt; in the ID token.&lt;/p&gt;.
     * 
     * @return the issuer value.
     */
    public String issuer() {
        return this.issuer;
    }

    /**
     * Set the issuer property: &lt;p&gt;The issuer for the OIDC configuration. The issuer returned by discovery must
     * exactly match the value of &lt;code&gt;iss&lt;/code&gt; in the ID token.&lt;/p&gt;.
     * 
     * @param issuer the issuer value to set.
     * @return the OpenIdConnectConfig object itself.
     */
    public OpenIdConnectConfig withIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("authTTL", this.authTtl);
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeNumberField("iatTTL", this.iatTtl);
        jsonWriter.writeStringField("issuer", this.issuer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OpenIdConnectConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OpenIdConnectConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OpenIdConnectConfig.
     */
    public static OpenIdConnectConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OpenIdConnectConfig deserializedOpenIdConnectConfig = new OpenIdConnectConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authTTL".equals(fieldName)) {
                    deserializedOpenIdConnectConfig.authTtl = reader.getNullable(JsonReader::getLong);
                } else if ("clientId".equals(fieldName)) {
                    deserializedOpenIdConnectConfig.clientId = reader.getString();
                } else if ("iatTTL".equals(fieldName)) {
                    deserializedOpenIdConnectConfig.iatTtl = reader.getNullable(JsonReader::getLong);
                } else if ("issuer".equals(fieldName)) {
                    deserializedOpenIdConnectConfig.issuer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOpenIdConnectConfig;
        });
    }
}
