// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RuntimeManagementConfig.
 */
@Fluent
public final class RuntimeManagementConfig implements JsonSerializable<RuntimeManagementConfig> {
    /*
     * The ARN of the runtime version you want the function to use. This is only required if you're using the *Manual*
     * runtime update mode.
     */
    private String runtimeVersionArn;

    /*
     * Specify the runtime update mode. + *Auto (default)* - Automatically update to the most recent and secure runtime
     * version using a [Two-phase runtime version
     * rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is
     * the best choice for most customers to ensure they always benefit from runtime updates. + *FunctionUpdate* - LAM
     * updates the runtime of you function to the most recent and secure runtime version when you update your function.
     * This approach synchronizes runtime updates with function deployments, giving you control over when runtime
     * updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When
     * using this setting, you need to regularly update your functions to keep their runtime up-to-date. + *Manual* -
     * You specify a runtime version in your function configuration. The function will use this runtime version
     * indefinitely. In the rare case where a new runtime version is incompatible with an existing function, this allows
     * you to roll back your function to an earlier runtime version. For more information, see [Roll back a runtime
     * version](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-rollback). *Valid
     * Values*: ``Auto`` | ``FunctionUpdate`` | ``Manual``
     */
    private RuntimeManagementConfigUpdateRuntimeOn updateRuntimeOn;

    /**
     * Creates an instance of RuntimeManagementConfig class.
     */
    public RuntimeManagementConfig() {
    }

    /**
     * Get the runtimeVersionArn property: The ARN of the runtime version you want the function to use. This is only
     * required if you're using the *Manual* runtime update mode.
     * 
     * @return the runtimeVersionArn value.
     */
    public String runtimeVersionArn() {
        return this.runtimeVersionArn;
    }

    /**
     * Set the runtimeVersionArn property: The ARN of the runtime version you want the function to use. This is only
     * required if you're using the *Manual* runtime update mode.
     * 
     * @param runtimeVersionArn the runtimeVersionArn value to set.
     * @return the RuntimeManagementConfig object itself.
     */
    public RuntimeManagementConfig withRuntimeVersionArn(String runtimeVersionArn) {
        this.runtimeVersionArn = runtimeVersionArn;
        return this;
    }

    /**
     * Get the updateRuntimeOn property: Specify the runtime update mode. + *Auto (default)* - Automatically update to
     * the most recent and secure runtime version using a [Two-phase runtime version
     * rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is
     * the best choice for most customers to ensure they always benefit from runtime updates. + *FunctionUpdate* - LAM
     * updates the runtime of you function to the most recent and secure runtime version when you update your function.
     * This approach synchronizes runtime updates with function deployments, giving you control over when runtime
     * updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When
     * using this setting, you need to regularly update your functions to keep their runtime up-to-date. + *Manual* -
     * You specify a runtime version in your function configuration. The function will use this runtime version
     * indefinitely. In the rare case where a new runtime version is incompatible with an existing function, this allows
     * you to roll back your function to an earlier runtime version. For more information, see [Roll back a runtime
     * version](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-rollback). *Valid
     * Values*: ``Auto`` | ``FunctionUpdate`` | ``Manual``.
     * 
     * @return the updateRuntimeOn value.
     */
    public RuntimeManagementConfigUpdateRuntimeOn updateRuntimeOn() {
        return this.updateRuntimeOn;
    }

    /**
     * Set the updateRuntimeOn property: Specify the runtime update mode. + *Auto (default)* - Automatically update to
     * the most recent and secure runtime version using a [Two-phase runtime version
     * rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is
     * the best choice for most customers to ensure they always benefit from runtime updates. + *FunctionUpdate* - LAM
     * updates the runtime of you function to the most recent and secure runtime version when you update your function.
     * This approach synchronizes runtime updates with function deployments, giving you control over when runtime
     * updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When
     * using this setting, you need to regularly update your functions to keep their runtime up-to-date. + *Manual* -
     * You specify a runtime version in your function configuration. The function will use this runtime version
     * indefinitely. In the rare case where a new runtime version is incompatible with an existing function, this allows
     * you to roll back your function to an earlier runtime version. For more information, see [Roll back a runtime
     * version](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-rollback). *Valid
     * Values*: ``Auto`` | ``FunctionUpdate`` | ``Manual``.
     * 
     * @param updateRuntimeOn the updateRuntimeOn value to set.
     * @return the RuntimeManagementConfig object itself.
     */
    public RuntimeManagementConfig withUpdateRuntimeOn(RuntimeManagementConfigUpdateRuntimeOn updateRuntimeOn) {
        this.updateRuntimeOn = updateRuntimeOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("runtimeVersionArn", this.runtimeVersionArn);
        jsonWriter.writeStringField("updateRuntimeOn",
            this.updateRuntimeOn == null ? null : this.updateRuntimeOn.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuntimeManagementConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuntimeManagementConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuntimeManagementConfig.
     */
    public static RuntimeManagementConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuntimeManagementConfig deserializedRuntimeManagementConfig = new RuntimeManagementConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runtimeVersionArn".equals(fieldName)) {
                    deserializedRuntimeManagementConfig.runtimeVersionArn = reader.getString();
                } else if ("updateRuntimeOn".equals(fieldName)) {
                    deserializedRuntimeManagementConfig.updateRuntimeOn
                        = RuntimeManagementConfigUpdateRuntimeOn.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuntimeManagementConfig;
        });
    }
}
