// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsAutoScalingAutoScalingGroup.
 */
@Fluent
public final class AwsAutoScalingGroupProperties implements JsonSerializable<AwsAutoScalingGroupProperties> {
    /*
     * The name of the Auto Scaling group. This name must be unique per Region per account. The name can contain any
     * ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters. You
     * cannot use a colon (:) in the name.
     */
    private String autoScalingGroupName;

    /*
     * A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into
     * the default VPC subnet in each Availability Zone when not using the ``VPCZoneIdentifier`` property, or for
     * attaching a network interface when an existing network interface ID is specified in a launch template.
     */
    private List<String> availabilityZones;

    /*
     * Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on
     * Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies
     * that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates
     * an old instance. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot
     * Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html)
     * in the in the *Amazon EC2 Auto Scaling User Guide*.
     */
    private Boolean capacityRebalance;

    /*
     * Reserved.
     */
    private String context;

    /*
     * *Only needed if you use simple scaling policies.* The amount of time, in seconds, between one scaling activity
     * ending and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for
     * Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Default: ``300`` seconds
     */
    private String cooldown;

    /*
     * The amount of time, in seconds, until a new instance is considered to have finished initializing and resource
     * consumption to become stable after it enters the ``InService`` state. During an instance refresh, Amazon EC2 Auto
     * Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next
     * instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new
     * instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more
     * reliable usage data. For more information, see [Set the default instance warmup for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. To manage various warm-up settings at the group level, we recommend
     * that you set the default instance warmup, *even if it is set to 0 seconds*. To remove a value that you previously
     * set, include the property but specify ``-1`` for the value. However, we strongly recommend keeping the default
     * instance warmup enabled by specifying a value of ``0`` or other nominal value. Default: None
     */
    private Integer defaultInstanceWarmup;

    /*
     * The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the
     * capacity it attempts to maintain. It can scale beyond this capacity if you configure automatic scaling. The
     * number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size
     * of the group. If you do not specify a desired capacity when creating the stack, the default is the minimum size
     * of the group. CloudFormation marks the Auto Scaling group as successful (by setting its status to
     * CREATE_COMPLETE) when the desired capacity is reached. However, if a maximum Spot price is set in the launch
     * template or launch configuration that you specified, then desired capacity is not used as a criteria for success.
     * Whether your request is fulfilled depends on Spot Instance capacity and your maximum price.
     */
    private String desiredCapacity;

    /*
     * The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports
     * ``DesiredCapacityType`` for attribute-based instance type selection only. For more information, see [Creating an
     * Auto Scaling group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. By default, Amazon EC2 Auto Scaling specifies ``units``, which
     * translates into number of instances. Valid values: ``units`` | ``vcpu`` | ``memory-mib``
     */
    private String desiredCapacityType;

    /*
     * The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2
     * instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your
     * instances do not immediately pass their health checks after they enter the ``InService`` state. For more
     * information, see [Set the health check grace period for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Default: ``0`` seconds
     */
    private Integer healthCheckGracePeriod;

    /*
     * A comma-separated value string of one or more health check types. The valid values are ``EC2``, ``ELB``, and
     * ``VPC_LATTICE``. ``EC2`` is the default health check and cannot be disabled. For more information, see [Health
     * checks for Auto Scaling instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. Only specify ``EC2`` if you must clear a value that was previously set.
     */
    private String healthCheckType;

    /*
     * The ID of the instance used to base the launch configuration on. For more information, see [Create an Auto
     * Scaling group using an EC2
     * instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the *Amazon EC2
     * Auto Scaling User Guide*. If you specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or
     * ``LaunchConfigurationName``, don't specify ``InstanceId``.
     */
    private String instanceId;

    /*
     * An instance maintenance policy. For more information, see [Set instance maintenance
     * policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. ``InstanceMaintenancePolicy`` is a property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-
     * autoscaling-autoscalinggroup.html) resource. For more information, see [Instance maintenance
     * policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.
     * html) in the *Amazon EC2 Auto Scaling User Guide*.
     */
    private InstanceMaintenancePolicy instanceMaintenancePolicy;

    /*
     * The name of the launch configuration to use to launch instances. Required only if you don't specify
     * ``LaunchTemplate``, ``MixedInstancesPolicy``, or ``InstanceId``.
     */
    private String launchConfigurationName;

    /*
     * Information used to specify the launch template and version to use to launch instances. You can alternatively
     * associate a launch template to the Auto Scaling group by specifying a ``MixedInstancesPolicy``. For more
     * information about creating launch templates, see [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. If you omit this property, you must specify ``MixedInstancesPolicy``,
     * ``LaunchConfigurationName``, or ``InstanceId``. Specifies a launch template to use when provisioning EC2
     * instances for an Auto Scaling group. You must specify the following: + The ID or the name of the launch template,
     * but not both. + The version of the launch template. ``LaunchTemplateSpecification`` is property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-
     * autoscaling-autoscalinggroup.html) resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-
     * autoscalinggroup-launchtemplate.html) and [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-
     * autoscaling-autoscalinggroup-launchtemplateoverrides.html) property types. For information about creating a
     * launch template, see
     * [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-
     * launchtemplate.html) and [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. For examples of launch templates, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html) and the
     * [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#
     * aws-resource-ec2-launchtemplate--examples) section in the ``AWS::EC2::LaunchTemplate`` resource.
     */
    private LaunchTemplateSpecification launchTemplate;

    /*
     * One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.
     */
    private List<LifecycleHookSpecification> lifecycleHookSpecificationList;

    /*
     * A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network
     * Load Balancers, and Gateway Load Balancers, specify the ``TargetGroupARNs`` property instead.
     */
    private List<String> loadBalancerNames;

    /*
     * The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified,
     * the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see
     * [Replacing Auto Scaling instances based on maximum instance
     * lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     */
    private Integer maxInstanceLifetime;

    /*
     * The maximum size of the group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto
     * Scaling may need to go above ``MaxSize`` to meet your capacity requirements. In this event, Amazon EC2 Auto
     * Scaling will never go above ``MaxSize`` by more than your largest instance weight (weights that define how many
     * units each instance contributes to the desired capacity of the group).
     */
    private String maxSize;

    /*
     * Enables the monitoring of group metrics of an Auto Scaling group. By default, these metrics are disabled.
     */
    private List<MetricsCollection> metricsCollection;

    /*
     * The minimum size of the group.
     */
    private String minSize;

    /*
     * An embedded object that specifies a mixed instances policy. The policy includes properties that not only define
     * the distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances
     * (optional), and how the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities, but
     * also the properties that specify the instance configuration information—the launch template and instance types.
     * The policy can also include a weight for each instance type and different launch templates for individual
     * instance types. For more information, see [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. Use this structure to launch multiple instance types and On-Demand
     * Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information
     * that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see
     * [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. You can create a mixed instances policy for new and existing Auto
     * Scaling groups. You must use a launch template to configure the policy. You cannot use a launch configuration.
     * There are key differences between Spot Instances and On-Demand Instances: + The price for Spot Instances varies
     * based on demand + Amazon EC2 can terminate an individual Spot Instance as the availability of, or price for, Spot
     * Instances changes When a Spot Instance is terminated, Amazon EC2 Auto Scaling group attempts to launch a
     * replacement instance to maintain the desired capacity for the group. ``MixedInstancesPolicy`` is a property of
     * the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-
     * autoscaling-autoscalinggroup.html) resource.
     */
    private MixedInstancesPolicy mixedInstancesPolicy;

    /*
     * Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling
     * in. For more information about preventing instances from terminating on scale in, see [Using instance scale-in
     * protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in
     * the *Amazon EC2 Auto Scaling User Guide*.
     */
    private Boolean newInstancesProtectedFromScaleIn;

    /*
     * A structure that specifies an Amazon SNS notification configuration for the ``NotificationConfigurations``
     * property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-
     * autoscaling-autoscalinggroup.html) resource. For an example template snippet, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more
     * information, see [Get Amazon SNS notifications when your Auto Scaling group
     * scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     */
    private NotificationConfiguration notificationConfiguration;

    /*
     * Configures an Auto Scaling group to send notifications when specified events take place.
     */
    private List<NotificationConfiguration> notificationConfigurations;

    /*
     * The name of the placement group into which to launch your instances. For more information, see [Placement
     * groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide
     * for Linux Instances*. A *cluster* placement group is a logical grouping of instances within a single Availability
     * Zone. You cannot specify multiple Availability Zones and a cluster placement group.
     */
    private String placementGroup;

    /*
     * The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other AWS
     * service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named
     * ``AWSServiceRoleForAutoScaling``, which it creates if it does not exist. For more information, see
     * [Service-linked
     * roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     */
    private String serviceLinkedRoleArn;

    /*
     * One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it
     * launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a
     * launch template but use caution. If the launch template specifies an instance tag with a key that is also
     * specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the
     * value specified by the Auto Scaling group. For more information, see [Tag Auto Scaling groups and
     * instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     */
    private List<TagProperty> tags;

    /*
     * The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling
     * group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and
     * route requests to one or more registered targets. For more information, see [Use Elastic Load Balancing to
     * distribute traffic across the instances in your Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     */
    private List<String> targetGroupARNs;

    /*
     * A policy or a list of policies that are used to select the instance to terminate. These policies are executed in
     * the order that you list them. For more information, see [Work with Amazon EC2 Auto Scaling termination
     * policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. Valid values: ``Default`` | ``AllocationStrategy`` |
     * ``ClosestToNextInstanceHour`` | ``NewestInstance`` | ``OldestInstance`` | ``OldestLaunchConfiguration`` |
     * ``OldestLaunchTemplate`` | ``arn:aws:lambda:region:account-id:function:my-function:my-alias``
     */
    private List<String> terminationPolicies;

    /*
     * A list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created.
     * If this resource specifies public subnets and is also in a VPC that is defined in the same stack template, you
     * must use the [DependsOn
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to
     * declare a dependency on the [VPC-gateway
     * attachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-
     * attachment.html). When you update ``VPCZoneIdentifier``, this retains the same Auto Scaling group and replaces
     * old instances with new ones, according to the specified subnets. You can optionally specify how CloudFormation
     * handles these updates by using an [UpdatePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html).
     * Required to launch instances into a nondefault VPC. If you specify ``VPCZoneIdentifier`` with
     * ``AvailabilityZones``, the subnets that you specify for this property must reside in those Availability Zones.
     */
    private List<String> vpcZoneIdentifier;

    /**
     * Creates an instance of AwsAutoScalingGroupProperties class.
     */
    public AwsAutoScalingGroupProperties() {
    }

    /**
     * Get the autoScalingGroupName property: The name of the Auto Scaling group. This name must be unique per Region
     * per account. The name can contain any ASCII character 33 to 126 including most punctuation characters, digits,
     * and upper and lowercased letters. You cannot use a colon (:) in the name.
     * 
     * @return the autoScalingGroupName value.
     */
    public String autoScalingGroupName() {
        return this.autoScalingGroupName;
    }

    /**
     * Set the autoScalingGroupName property: The name of the Auto Scaling group. This name must be unique per Region
     * per account. The name can contain any ASCII character 33 to 126 including most punctuation characters, digits,
     * and upper and lowercased letters. You cannot use a colon (:) in the name.
     * 
     * @param autoScalingGroupName the autoScalingGroupName value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withAutoScalingGroupName(String autoScalingGroupName) {
        this.autoScalingGroupName = autoScalingGroupName;
        return this;
    }

    /**
     * Get the availabilityZones property: A list of Availability Zones where instances in the Auto Scaling group can be
     * created. Used for launching into the default VPC subnet in each Availability Zone when not using the
     * ``VPCZoneIdentifier`` property, or for attaching a network interface when an existing network interface ID is
     * specified in a launch template.
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: A list of Availability Zones where instances in the Auto Scaling group can be
     * created. Used for launching into the default VPC subnet in each Availability Zone when not using the
     * ``VPCZoneIdentifier`` property, or for attaching a network interface when an existing network interface ID is
     * specified in a launch template.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the capacityRebalance property: Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity
     * Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot
     * Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After
     * launching a new instance, it then terminates an old instance. For more information, see [Use Capacity Rebalancing
     * to handle Amazon EC2 Spot
     * Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html)
     * in the in the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @return the capacityRebalance value.
     */
    public Boolean capacityRebalance() {
        return this.capacityRebalance;
    }

    /**
     * Set the capacityRebalance property: Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity
     * Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot
     * Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After
     * launching a new instance, it then terminates an old instance. For more information, see [Use Capacity Rebalancing
     * to handle Amazon EC2 Spot
     * Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html)
     * in the in the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @param capacityRebalance the capacityRebalance value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withCapacityRebalance(Boolean capacityRebalance) {
        this.capacityRebalance = capacityRebalance;
        return this;
    }

    /**
     * Get the context property: Reserved.
     * 
     * @return the context value.
     */
    public String context() {
        return this.context;
    }

    /**
     * Set the context property: Reserved.
     * 
     * @param context the context value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withContext(String context) {
        this.context = context;
        return this;
    }

    /**
     * Get the cooldown property: *Only needed if you use simple scaling policies.* The amount of time, in seconds,
     * between one scaling activity ending and another one starting due to simple scaling policies. For more
     * information, see [Scaling cooldowns for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the *Amazon EC2 Auto Scaling
     * User Guide*. Default: ``300`` seconds.
     * 
     * @return the cooldown value.
     */
    public String cooldown() {
        return this.cooldown;
    }

    /**
     * Set the cooldown property: *Only needed if you use simple scaling policies.* The amount of time, in seconds,
     * between one scaling activity ending and another one starting due to simple scaling policies. For more
     * information, see [Scaling cooldowns for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html) in the *Amazon EC2 Auto Scaling
     * User Guide*. Default: ``300`` seconds.
     * 
     * @param cooldown the cooldown value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withCooldown(String cooldown) {
        this.cooldown = cooldown;
        return this;
    }

    /**
     * Get the defaultInstanceWarmup property: The amount of time, in seconds, until a new instance is considered to
     * have finished initializing and resource consumption to become stable after it enters the ``InService`` state.
     * During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance
     * before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period
     * before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that
     * are used for scaling, resulting in more reliable usage data. For more information, see [Set the default instance
     * warmup for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. To manage various warm-up settings at the group level, we recommend
     * that you set the default instance warmup, *even if it is set to 0 seconds*. To remove a value that you previously
     * set, include the property but specify ``-1`` for the value. However, we strongly recommend keeping the default
     * instance warmup enabled by specifying a value of ``0`` or other nominal value. Default: None.
     * 
     * @return the defaultInstanceWarmup value.
     */
    public Integer defaultInstanceWarmup() {
        return this.defaultInstanceWarmup;
    }

    /**
     * Set the defaultInstanceWarmup property: The amount of time, in seconds, until a new instance is considered to
     * have finished initializing and resource consumption to become stable after it enters the ``InService`` state.
     * During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance
     * before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period
     * before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that
     * are used for scaling, resulting in more reliable usage data. For more information, see [Set the default instance
     * warmup for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. To manage various warm-up settings at the group level, we recommend
     * that you set the default instance warmup, *even if it is set to 0 seconds*. To remove a value that you previously
     * set, include the property but specify ``-1`` for the value. However, we strongly recommend keeping the default
     * instance warmup enabled by specifying a value of ``0`` or other nominal value. Default: None.
     * 
     * @param defaultInstanceWarmup the defaultInstanceWarmup value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withDefaultInstanceWarmup(Integer defaultInstanceWarmup) {
        this.defaultInstanceWarmup = defaultInstanceWarmup;
        return this;
    }

    /**
     * Get the desiredCapacity property: The desired capacity is the initial capacity of the Auto Scaling group at the
     * time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure
     * automatic scaling. The number must be greater than or equal to the minimum size of the group and less than or
     * equal to the maximum size of the group. If you do not specify a desired capacity when creating the stack, the
     * default is the minimum size of the group. CloudFormation marks the Auto Scaling group as successful (by setting
     * its status to CREATE_COMPLETE) when the desired capacity is reached. However, if a maximum Spot price is set in
     * the launch template or launch configuration that you specified, then desired capacity is not used as a criteria
     * for success. Whether your request is fulfilled depends on Spot Instance capacity and your maximum price.
     * 
     * @return the desiredCapacity value.
     */
    public String desiredCapacity() {
        return this.desiredCapacity;
    }

    /**
     * Set the desiredCapacity property: The desired capacity is the initial capacity of the Auto Scaling group at the
     * time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure
     * automatic scaling. The number must be greater than or equal to the minimum size of the group and less than or
     * equal to the maximum size of the group. If you do not specify a desired capacity when creating the stack, the
     * default is the minimum size of the group. CloudFormation marks the Auto Scaling group as successful (by setting
     * its status to CREATE_COMPLETE) when the desired capacity is reached. However, if a maximum Spot price is set in
     * the launch template or launch configuration that you specified, then desired capacity is not used as a criteria
     * for success. Whether your request is fulfilled depends on Spot Instance capacity and your maximum price.
     * 
     * @param desiredCapacity the desiredCapacity value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withDesiredCapacity(String desiredCapacity) {
        this.desiredCapacity = desiredCapacity;
        return this;
    }

    /**
     * Get the desiredCapacityType property: The unit of measurement for the value specified for desired capacity.
     * Amazon EC2 Auto Scaling supports ``DesiredCapacityType`` for attribute-based instance type selection only. For
     * more information, see [Creating an Auto Scaling group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. By default, Amazon EC2 Auto Scaling specifies ``units``, which
     * translates into number of instances. Valid values: ``units`` | ``vcpu`` | ``memory-mib``.
     * 
     * @return the desiredCapacityType value.
     */
    public String desiredCapacityType() {
        return this.desiredCapacityType;
    }

    /**
     * Set the desiredCapacityType property: The unit of measurement for the value specified for desired capacity.
     * Amazon EC2 Auto Scaling supports ``DesiredCapacityType`` for attribute-based instance type selection only. For
     * more information, see [Creating an Auto Scaling group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. By default, Amazon EC2 Auto Scaling specifies ``units``, which
     * translates into number of instances. Valid values: ``units`` | ``vcpu`` | ``memory-mib``.
     * 
     * @param desiredCapacityType the desiredCapacityType value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withDesiredCapacityType(String desiredCapacityType) {
        this.desiredCapacityType = desiredCapacityType;
        return this;
    }

    /**
     * Get the healthCheckGracePeriod property: The amount of time, in seconds, that Amazon EC2 Auto Scaling waits
     * before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a
     * failed health check. This is useful if your instances do not immediately pass their health checks after they
     * enter the ``InService`` state. For more information, see [Set the health check grace period for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Default: ``0`` seconds.
     * 
     * @return the healthCheckGracePeriod value.
     */
    public Integer healthCheckGracePeriod() {
        return this.healthCheckGracePeriod;
    }

    /**
     * Set the healthCheckGracePeriod property: The amount of time, in seconds, that Amazon EC2 Auto Scaling waits
     * before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a
     * failed health check. This is useful if your instances do not immediately pass their health checks after they
     * enter the ``InService`` state. For more information, see [Set the health check grace period for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the *Amazon EC2
     * Auto Scaling User Guide*. Default: ``0`` seconds.
     * 
     * @param healthCheckGracePeriod the healthCheckGracePeriod value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withHealthCheckGracePeriod(Integer healthCheckGracePeriod) {
        this.healthCheckGracePeriod = healthCheckGracePeriod;
        return this;
    }

    /**
     * Get the healthCheckType property: A comma-separated value string of one or more health check types. The valid
     * values are ``EC2``, ``ELB``, and ``VPC_LATTICE``. ``EC2`` is the default health check and cannot be disabled. For
     * more information, see [Health checks for Auto Scaling
     * instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. Only specify ``EC2`` if you must clear a value that was previously set.
     * 
     * @return the healthCheckType value.
     */
    public String healthCheckType() {
        return this.healthCheckType;
    }

    /**
     * Set the healthCheckType property: A comma-separated value string of one or more health check types. The valid
     * values are ``EC2``, ``ELB``, and ``VPC_LATTICE``. ``EC2`` is the default health check and cannot be disabled. For
     * more information, see [Health checks for Auto Scaling
     * instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. Only specify ``EC2`` if you must clear a value that was previously set.
     * 
     * @param healthCheckType the healthCheckType value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withHealthCheckType(String healthCheckType) {
        this.healthCheckType = healthCheckType;
        return this;
    }

    /**
     * Get the instanceId property: The ID of the instance used to base the launch configuration on. For more
     * information, see [Create an Auto Scaling group using an EC2
     * instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the *Amazon EC2
     * Auto Scaling User Guide*. If you specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or
     * ``LaunchConfigurationName``, don't specify ``InstanceId``.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instanceId property: The ID of the instance used to base the launch configuration on. For more
     * information, see [Create an Auto Scaling group using an EC2
     * instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the *Amazon EC2
     * Auto Scaling User Guide*. If you specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or
     * ``LaunchConfigurationName``, don't specify ``InstanceId``.
     * 
     * @param instanceId the instanceId value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Get the instanceMaintenancePolicy property: An instance maintenance policy. For more information, see [Set
     * instance maintenance
     * policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. ``InstanceMaintenancePolicy`` is a property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For more information, see [Instance maintenance
     * policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html)
     * in the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @return the instanceMaintenancePolicy value.
     */
    public InstanceMaintenancePolicy instanceMaintenancePolicy() {
        return this.instanceMaintenancePolicy;
    }

    /**
     * Set the instanceMaintenancePolicy property: An instance maintenance policy. For more information, see [Set
     * instance maintenance
     * policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. ``InstanceMaintenancePolicy`` is a property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For more information, see [Instance maintenance
     * policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html)
     * in the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @param instanceMaintenancePolicy the instanceMaintenancePolicy value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties
        withInstanceMaintenancePolicy(InstanceMaintenancePolicy instanceMaintenancePolicy) {
        this.instanceMaintenancePolicy = instanceMaintenancePolicy;
        return this;
    }

    /**
     * Get the launchConfigurationName property: The name of the launch configuration to use to launch instances.
     * Required only if you don't specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or ``InstanceId``.
     * 
     * @return the launchConfigurationName value.
     */
    public String launchConfigurationName() {
        return this.launchConfigurationName;
    }

    /**
     * Set the launchConfigurationName property: The name of the launch configuration to use to launch instances.
     * Required only if you don't specify ``LaunchTemplate``, ``MixedInstancesPolicy``, or ``InstanceId``.
     * 
     * @param launchConfigurationName the launchConfigurationName value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withLaunchConfigurationName(String launchConfigurationName) {
        this.launchConfigurationName = launchConfigurationName;
        return this;
    }

    /**
     * Get the launchTemplate property: Information used to specify the launch template and version to use to launch
     * instances. You can alternatively associate a launch template to the Auto Scaling group by specifying a
     * ``MixedInstancesPolicy``. For more information about creating launch templates, see [Create a launch template for
     * an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. If you omit this property, you must specify ``MixedInstancesPolicy``,
     * ``LaunchConfigurationName``, or ``InstanceId``. Specifies a launch template to use when provisioning EC2
     * instances for an Auto Scaling group. You must specify the following: + The ID or the name of the launch template,
     * but not both. + The version of the launch template. ``LaunchTemplateSpecification`` is property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
     * and [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html)
     * property types. For information about creating a launch template, see
     * [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html)
     * and [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. For examples of launch templates, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html) and the
     * [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate--examples)
     * section in the ``AWS::EC2::LaunchTemplate`` resource.
     * 
     * @return the launchTemplate value.
     */
    public LaunchTemplateSpecification launchTemplate() {
        return this.launchTemplate;
    }

    /**
     * Set the launchTemplate property: Information used to specify the launch template and version to use to launch
     * instances. You can alternatively associate a launch template to the Auto Scaling group by specifying a
     * ``MixedInstancesPolicy``. For more information about creating launch templates, see [Create a launch template for
     * an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the
     * *Amazon EC2 Auto Scaling User Guide*. If you omit this property, you must specify ``MixedInstancesPolicy``,
     * ``LaunchConfigurationName``, or ``InstanceId``. Specifies a launch template to use when provisioning EC2
     * instances for an Auto Scaling group. You must specify the following: + The ID or the name of the launch template,
     * but not both. + The version of the launch template. ``LaunchTemplateSpecification`` is property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
     * and [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html)
     * property types. For information about creating a launch template, see
     * [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html)
     * and [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. For examples of launch templates, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html) and the
     * [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate--examples)
     * section in the ``AWS::EC2::LaunchTemplate`` resource.
     * 
     * @param launchTemplate the launchTemplate value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withLaunchTemplate(LaunchTemplateSpecification launchTemplate) {
        this.launchTemplate = launchTemplate;
        return this;
    }

    /**
     * Get the lifecycleHookSpecificationList property: One or more lifecycle hooks to add to the Auto Scaling group
     * before instances are launched.
     * 
     * @return the lifecycleHookSpecificationList value.
     */
    public List<LifecycleHookSpecification> lifecycleHookSpecificationList() {
        return this.lifecycleHookSpecificationList;
    }

    /**
     * Set the lifecycleHookSpecificationList property: One or more lifecycle hooks to add to the Auto Scaling group
     * before instances are launched.
     * 
     * @param lifecycleHookSpecificationList the lifecycleHookSpecificationList value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties
        withLifecycleHookSpecificationList(List<LifecycleHookSpecification> lifecycleHookSpecificationList) {
        this.lifecycleHookSpecificationList = lifecycleHookSpecificationList;
        return this;
    }

    /**
     * Get the loadBalancerNames property: A list of Classic Load Balancers associated with this Auto Scaling group. For
     * Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the ``TargetGroupARNs``
     * property instead.
     * 
     * @return the loadBalancerNames value.
     */
    public List<String> loadBalancerNames() {
        return this.loadBalancerNames;
    }

    /**
     * Set the loadBalancerNames property: A list of Classic Load Balancers associated with this Auto Scaling group. For
     * Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the ``TargetGroupARNs``
     * property instead.
     * 
     * @param loadBalancerNames the loadBalancerNames value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withLoadBalancerNames(List<String> loadBalancerNames) {
        this.loadBalancerNames = loadBalancerNames;
        return this;
    }

    /**
     * Get the maxInstanceLifetime property: The maximum amount of time, in seconds, that an instance can be in service.
     * The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds
     * (1 day). For more information, see [Replacing Auto Scaling instances based on maximum instance
     * lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     * 
     * @return the maxInstanceLifetime value.
     */
    public Integer maxInstanceLifetime() {
        return this.maxInstanceLifetime;
    }

    /**
     * Set the maxInstanceLifetime property: The maximum amount of time, in seconds, that an instance can be in service.
     * The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds
     * (1 day). For more information, see [Replacing Auto Scaling instances based on maximum instance
     * lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     * 
     * @param maxInstanceLifetime the maxInstanceLifetime value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withMaxInstanceLifetime(Integer maxInstanceLifetime) {
        this.maxInstanceLifetime = maxInstanceLifetime;
        return this;
    }

    /**
     * Get the maxSize property: The maximum size of the group. With a mixed instances policy that uses instance
     * weighting, Amazon EC2 Auto Scaling may need to go above ``MaxSize`` to meet your capacity requirements. In this
     * event, Amazon EC2 Auto Scaling will never go above ``MaxSize`` by more than your largest instance weight (weights
     * that define how many units each instance contributes to the desired capacity of the group).
     * 
     * @return the maxSize value.
     */
    public String maxSize() {
        return this.maxSize;
    }

    /**
     * Set the maxSize property: The maximum size of the group. With a mixed instances policy that uses instance
     * weighting, Amazon EC2 Auto Scaling may need to go above ``MaxSize`` to meet your capacity requirements. In this
     * event, Amazon EC2 Auto Scaling will never go above ``MaxSize`` by more than your largest instance weight (weights
     * that define how many units each instance contributes to the desired capacity of the group).
     * 
     * @param maxSize the maxSize value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withMaxSize(String maxSize) {
        this.maxSize = maxSize;
        return this;
    }

    /**
     * Get the metricsCollection property: Enables the monitoring of group metrics of an Auto Scaling group. By default,
     * these metrics are disabled.
     * 
     * @return the metricsCollection value.
     */
    public List<MetricsCollection> metricsCollection() {
        return this.metricsCollection;
    }

    /**
     * Set the metricsCollection property: Enables the monitoring of group metrics of an Auto Scaling group. By default,
     * these metrics are disabled.
     * 
     * @param metricsCollection the metricsCollection value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withMetricsCollection(List<MetricsCollection> metricsCollection) {
        this.metricsCollection = metricsCollection;
        return this;
    }

    /**
     * Get the minSize property: The minimum size of the group.
     * 
     * @return the minSize value.
     */
    public String minSize() {
        return this.minSize;
    }

    /**
     * Set the minSize property: The minimum size of the group.
     * 
     * @param minSize the minSize value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withMinSize(String minSize) {
        this.minSize = minSize;
        return this;
    }

    /**
     * Get the mixedInstancesPolicy property: An embedded object that specifies a mixed instances policy. The policy
     * includes properties that not only define the distribution of On-Demand Instances and Spot Instances, the maximum
     * price to pay for Spot Instances (optional), and how the Auto Scaling group allocates instance types to fulfill
     * On-Demand and Spot capacities, but also the properties that specify the instance configuration information—the
     * launch template and instance types. The policy can also include a weight for each instance type and different
     * launch templates for individual instance types. For more information, see [Auto Scaling groups with multiple
     * instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. Use this structure to launch multiple instance types and On-Demand
     * Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information
     * that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see
     * [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. You can create a mixed instances policy for new and existing Auto
     * Scaling groups. You must use a launch template to configure the policy. You cannot use a launch configuration.
     * There are key differences between Spot Instances and On-Demand Instances: + The price for Spot Instances varies
     * based on demand + Amazon EC2 can terminate an individual Spot Instance as the availability of, or price for, Spot
     * Instances changes When a Spot Instance is terminated, Amazon EC2 Auto Scaling group attempts to launch a
     * replacement instance to maintain the desired capacity for the group. ``MixedInstancesPolicy`` is a property of
     * the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource.
     * 
     * @return the mixedInstancesPolicy value.
     */
    public MixedInstancesPolicy mixedInstancesPolicy() {
        return this.mixedInstancesPolicy;
    }

    /**
     * Set the mixedInstancesPolicy property: An embedded object that specifies a mixed instances policy. The policy
     * includes properties that not only define the distribution of On-Demand Instances and Spot Instances, the maximum
     * price to pay for Spot Instances (optional), and how the Auto Scaling group allocates instance types to fulfill
     * On-Demand and Spot capacities, but also the properties that specify the instance configuration information—the
     * launch template and instance types. The policy can also include a weight for each instance type and different
     * launch templates for individual instance types. For more information, see [Auto Scaling groups with multiple
     * instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. Use this structure to launch multiple instance types and On-Demand
     * Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information
     * that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see
     * [Auto Scaling groups with multiple instance types and purchase
     * options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. You can create a mixed instances policy for new and existing Auto
     * Scaling groups. You must use a launch template to configure the policy. You cannot use a launch configuration.
     * There are key differences between Spot Instances and On-Demand Instances: + The price for Spot Instances varies
     * based on demand + Amazon EC2 can terminate an individual Spot Instance as the availability of, or price for, Spot
     * Instances changes When a Spot Instance is terminated, Amazon EC2 Auto Scaling group attempts to launch a
     * replacement instance to maintain the desired capacity for the group. ``MixedInstancesPolicy`` is a property of
     * the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource.
     * 
     * @param mixedInstancesPolicy the mixedInstancesPolicy value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withMixedInstancesPolicy(MixedInstancesPolicy mixedInstancesPolicy) {
        this.mixedInstancesPolicy = mixedInstancesPolicy;
        return this;
    }

    /**
     * Get the newInstancesProtectedFromScaleIn property: Indicates whether newly launched instances are protected from
     * termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from
     * terminating on scale in, see [Using instance scale-in
     * protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in
     * the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @return the newInstancesProtectedFromScaleIn value.
     */
    public Boolean newInstancesProtectedFromScaleIn() {
        return this.newInstancesProtectedFromScaleIn;
    }

    /**
     * Set the newInstancesProtectedFromScaleIn property: Indicates whether newly launched instances are protected from
     * termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from
     * terminating on scale in, see [Using instance scale-in
     * protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in
     * the *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @param newInstancesProtectedFromScaleIn the newInstancesProtectedFromScaleIn value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties
        withNewInstancesProtectedFromScaleIn(Boolean newInstancesProtectedFromScaleIn) {
        this.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn;
        return this;
    }

    /**
     * Get the notificationConfiguration property: A structure that specifies an Amazon SNS notification configuration
     * for the ``NotificationConfigurations`` property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For an example template snippet, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more
     * information, see [Get Amazon SNS notifications when your Auto Scaling group
     * scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     * 
     * @return the notificationConfiguration value.
     */
    public NotificationConfiguration notificationConfiguration() {
        return this.notificationConfiguration;
    }

    /**
     * Set the notificationConfiguration property: A structure that specifies an Amazon SNS notification configuration
     * for the ``NotificationConfigurations`` property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. For an example template snippet, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more
     * information, see [Get Amazon SNS notifications when your Auto Scaling group
     * scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     * 
     * @param notificationConfiguration the notificationConfiguration value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties
        withNotificationConfiguration(NotificationConfiguration notificationConfiguration) {
        this.notificationConfiguration = notificationConfiguration;
        return this;
    }

    /**
     * Get the notificationConfigurations property: Configures an Auto Scaling group to send notifications when
     * specified events take place.
     * 
     * @return the notificationConfigurations value.
     */
    public List<NotificationConfiguration> notificationConfigurations() {
        return this.notificationConfigurations;
    }

    /**
     * Set the notificationConfigurations property: Configures an Auto Scaling group to send notifications when
     * specified events take place.
     * 
     * @param notificationConfigurations the notificationConfigurations value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties
        withNotificationConfigurations(List<NotificationConfiguration> notificationConfigurations) {
        this.notificationConfigurations = notificationConfigurations;
        return this;
    }

    /**
     * Get the placementGroup property: The name of the placement group into which to launch your instances. For more
     * information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in
     * the *Amazon EC2 User Guide for Linux Instances*. A *cluster* placement group is a logical grouping of instances
     * within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group.
     * 
     * @return the placementGroup value.
     */
    public String placementGroup() {
        return this.placementGroup;
    }

    /**
     * Set the placementGroup property: The name of the placement group into which to launch your instances. For more
     * information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in
     * the *Amazon EC2 User Guide for Linux Instances*. A *cluster* placement group is a logical grouping of instances
     * within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group.
     * 
     * @param placementGroup the placementGroup value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withPlacementGroup(String placementGroup) {
        this.placementGroup = placementGroup;
        return this;
    }

    /**
     * Get the serviceLinkedRoleArn property: The Amazon Resource Name (ARN) of the service-linked role that the Auto
     * Scaling group uses to call other AWS service on your behalf. By default, Amazon EC2 Auto Scaling uses a
     * service-linked role named ``AWSServiceRoleForAutoScaling``, which it creates if it does not exist. For more
     * information, see [Service-linked
     * roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     * 
     * @return the serviceLinkedRoleArn value.
     */
    public String serviceLinkedRoleArn() {
        return this.serviceLinkedRoleArn;
    }

    /**
     * Set the serviceLinkedRoleArn property: The Amazon Resource Name (ARN) of the service-linked role that the Auto
     * Scaling group uses to call other AWS service on your behalf. By default, Amazon EC2 Auto Scaling uses a
     * service-linked role named ``AWSServiceRoleForAutoScaling``, which it creates if it does not exist. For more
     * information, see [Service-linked
     * roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the *Amazon
     * EC2 Auto Scaling User Guide*.
     * 
     * @param serviceLinkedRoleArn the serviceLinkedRoleArn value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withServiceLinkedRoleArn(String serviceLinkedRoleArn) {
        this.serviceLinkedRoleArn = serviceLinkedRoleArn;
        return this;
    }

    /**
     * Get the tags property: One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon
     * EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes,
     * specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a
     * key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that
     * instance tag with the value specified by the Auto Scaling group. For more information, see [Tag Auto Scaling
     * groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @return the tags value.
     */
    public List<TagProperty> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon
     * EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes,
     * specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a
     * key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that
     * instance tag with the value specified by the Auto Scaling group. For more information, see [Tag Auto Scaling
     * groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the
     * *Amazon EC2 Auto Scaling User Guide*.
     * 
     * @param tags the tags value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withTags(List<TagProperty> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the targetGroupARNs property: The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to
     * associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target
     * groups receive incoming traffic and route requests to one or more registered targets. For more information, see
     * [Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     * 
     * @return the targetGroupARNs value.
     */
    public List<String> targetGroupARNs() {
        return this.targetGroupARNs;
    }

    /**
     * Set the targetGroupARNs property: The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to
     * associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target
     * groups receive incoming traffic and route requests to one or more registered targets. For more information, see
     * [Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the *Amazon EC2
     * Auto Scaling User Guide*.
     * 
     * @param targetGroupARNs the targetGroupARNs value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withTargetGroupARNs(List<String> targetGroupARNs) {
        this.targetGroupARNs = targetGroupARNs;
        return this;
    }

    /**
     * Get the terminationPolicies property: A policy or a list of policies that are used to select the instance to
     * terminate. These policies are executed in the order that you list them. For more information, see [Work with
     * Amazon EC2 Auto Scaling termination
     * policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. Valid values: ``Default`` | ``AllocationStrategy`` |
     * ``ClosestToNextInstanceHour`` | ``NewestInstance`` | ``OldestInstance`` | ``OldestLaunchConfiguration`` |
     * ``OldestLaunchTemplate`` | ``arn:aws:lambda:region:account-id:function:my-function:my-alias``.
     * 
     * @return the terminationPolicies value.
     */
    public List<String> terminationPolicies() {
        return this.terminationPolicies;
    }

    /**
     * Set the terminationPolicies property: A policy or a list of policies that are used to select the instance to
     * terminate. These policies are executed in the order that you list them. For more information, see [Work with
     * Amazon EC2 Auto Scaling termination
     * policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. Valid values: ``Default`` | ``AllocationStrategy`` |
     * ``ClosestToNextInstanceHour`` | ``NewestInstance`` | ``OldestInstance`` | ``OldestLaunchConfiguration`` |
     * ``OldestLaunchTemplate`` | ``arn:aws:lambda:region:account-id:function:my-function:my-alias``.
     * 
     * @param terminationPolicies the terminationPolicies value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withTerminationPolicies(List<String> terminationPolicies) {
        this.terminationPolicies = terminationPolicies;
        return this;
    }

    /**
     * Get the vpcZoneIdentifier property: A list of subnet IDs for a virtual private cloud (VPC) where instances in the
     * Auto Scaling group can be created. If this resource specifies public subnets and is also in a VPC that is defined
     * in the same stack template, you must use the [DependsOn
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to
     * declare a dependency on the [VPC-gateway
     * attachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html).
     * When you update ``VPCZoneIdentifier``, this retains the same Auto Scaling group and replaces old instances with
     * new ones, according to the specified subnets. You can optionally specify how CloudFormation handles these updates
     * by using an [UpdatePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html).
     * Required to launch instances into a nondefault VPC. If you specify ``VPCZoneIdentifier`` with
     * ``AvailabilityZones``, the subnets that you specify for this property must reside in those Availability Zones.
     * 
     * @return the vpcZoneIdentifier value.
     */
    public List<String> vpcZoneIdentifier() {
        return this.vpcZoneIdentifier;
    }

    /**
     * Set the vpcZoneIdentifier property: A list of subnet IDs for a virtual private cloud (VPC) where instances in the
     * Auto Scaling group can be created. If this resource specifies public subnets and is also in a VPC that is defined
     * in the same stack template, you must use the [DependsOn
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to
     * declare a dependency on the [VPC-gateway
     * attachment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html).
     * When you update ``VPCZoneIdentifier``, this retains the same Auto Scaling group and replaces old instances with
     * new ones, according to the specified subnets. You can optionally specify how CloudFormation handles these updates
     * by using an [UpdatePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html).
     * Required to launch instances into a nondefault VPC. If you specify ``VPCZoneIdentifier`` with
     * ``AvailabilityZones``, the subnets that you specify for this property must reside in those Availability Zones.
     * 
     * @param vpcZoneIdentifier the vpcZoneIdentifier value to set.
     * @return the AwsAutoScalingGroupProperties object itself.
     */
    public AwsAutoScalingGroupProperties withVpcZoneIdentifier(List<String> vpcZoneIdentifier) {
        this.vpcZoneIdentifier = vpcZoneIdentifier;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceMaintenancePolicy() != null) {
            instanceMaintenancePolicy().validate();
        }
        if (launchTemplate() != null) {
            launchTemplate().validate();
        }
        if (lifecycleHookSpecificationList() != null) {
            lifecycleHookSpecificationList().forEach(e -> e.validate());
        }
        if (metricsCollection() != null) {
            metricsCollection().forEach(e -> e.validate());
        }
        if (mixedInstancesPolicy() != null) {
            mixedInstancesPolicy().validate();
        }
        if (notificationConfiguration() != null) {
            notificationConfiguration().validate();
        }
        if (notificationConfigurations() != null) {
            notificationConfigurations().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("autoScalingGroupName", this.autoScalingGroupName);
        jsonWriter.writeArrayField("availabilityZones", this.availabilityZones,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("capacityRebalance", this.capacityRebalance);
        jsonWriter.writeStringField("context", this.context);
        jsonWriter.writeStringField("cooldown", this.cooldown);
        jsonWriter.writeNumberField("defaultInstanceWarmup", this.defaultInstanceWarmup);
        jsonWriter.writeStringField("desiredCapacity", this.desiredCapacity);
        jsonWriter.writeStringField("desiredCapacityType", this.desiredCapacityType);
        jsonWriter.writeNumberField("healthCheckGracePeriod", this.healthCheckGracePeriod);
        jsonWriter.writeStringField("healthCheckType", this.healthCheckType);
        jsonWriter.writeStringField("instanceId", this.instanceId);
        jsonWriter.writeJsonField("instanceMaintenancePolicy", this.instanceMaintenancePolicy);
        jsonWriter.writeStringField("launchConfigurationName", this.launchConfigurationName);
        jsonWriter.writeJsonField("launchTemplate", this.launchTemplate);
        jsonWriter.writeArrayField("lifecycleHookSpecificationList", this.lifecycleHookSpecificationList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("loadBalancerNames", this.loadBalancerNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("maxInstanceLifetime", this.maxInstanceLifetime);
        jsonWriter.writeStringField("maxSize", this.maxSize);
        jsonWriter.writeArrayField("metricsCollection", this.metricsCollection,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("minSize", this.minSize);
        jsonWriter.writeJsonField("mixedInstancesPolicy", this.mixedInstancesPolicy);
        jsonWriter.writeBooleanField("newInstancesProtectedFromScaleIn", this.newInstancesProtectedFromScaleIn);
        jsonWriter.writeJsonField("notificationConfiguration", this.notificationConfiguration);
        jsonWriter.writeArrayField("notificationConfigurations", this.notificationConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("placementGroup", this.placementGroup);
        jsonWriter.writeStringField("serviceLinkedRoleARN", this.serviceLinkedRoleArn);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("targetGroupARNs", this.targetGroupARNs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("terminationPolicies", this.terminationPolicies,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vpcZoneIdentifier", this.vpcZoneIdentifier,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsAutoScalingGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsAutoScalingGroupProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsAutoScalingGroupProperties.
     */
    public static AwsAutoScalingGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsAutoScalingGroupProperties deserializedAwsAutoScalingGroupProperties
                = new AwsAutoScalingGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoScalingGroupName".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.autoScalingGroupName = reader.getString();
                } else if ("availabilityZones".equals(fieldName)) {
                    List<String> availabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsAutoScalingGroupProperties.availabilityZones = availabilityZones;
                } else if ("capacityRebalance".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.capacityRebalance
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("context".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.context = reader.getString();
                } else if ("cooldown".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.cooldown = reader.getString();
                } else if ("defaultInstanceWarmup".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.defaultInstanceWarmup
                        = reader.getNullable(JsonReader::getInt);
                } else if ("desiredCapacity".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.desiredCapacity = reader.getString();
                } else if ("desiredCapacityType".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.desiredCapacityType = reader.getString();
                } else if ("healthCheckGracePeriod".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.healthCheckGracePeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("healthCheckType".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.healthCheckType = reader.getString();
                } else if ("instanceId".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.instanceId = reader.getString();
                } else if ("instanceMaintenancePolicy".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.instanceMaintenancePolicy
                        = InstanceMaintenancePolicy.fromJson(reader);
                } else if ("launchConfigurationName".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.launchConfigurationName = reader.getString();
                } else if ("launchTemplate".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.launchTemplate
                        = LaunchTemplateSpecification.fromJson(reader);
                } else if ("lifecycleHookSpecificationList".equals(fieldName)) {
                    List<LifecycleHookSpecification> lifecycleHookSpecificationList
                        = reader.readArray(reader1 -> LifecycleHookSpecification.fromJson(reader1));
                    deserializedAwsAutoScalingGroupProperties.lifecycleHookSpecificationList
                        = lifecycleHookSpecificationList;
                } else if ("loadBalancerNames".equals(fieldName)) {
                    List<String> loadBalancerNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsAutoScalingGroupProperties.loadBalancerNames = loadBalancerNames;
                } else if ("maxInstanceLifetime".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.maxInstanceLifetime
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxSize".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.maxSize = reader.getString();
                } else if ("metricsCollection".equals(fieldName)) {
                    List<MetricsCollection> metricsCollection
                        = reader.readArray(reader1 -> MetricsCollection.fromJson(reader1));
                    deserializedAwsAutoScalingGroupProperties.metricsCollection = metricsCollection;
                } else if ("minSize".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.minSize = reader.getString();
                } else if ("mixedInstancesPolicy".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.mixedInstancesPolicy
                        = MixedInstancesPolicy.fromJson(reader);
                } else if ("newInstancesProtectedFromScaleIn".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.newInstancesProtectedFromScaleIn
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("notificationConfiguration".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.notificationConfiguration
                        = NotificationConfiguration.fromJson(reader);
                } else if ("notificationConfigurations".equals(fieldName)) {
                    List<NotificationConfiguration> notificationConfigurations
                        = reader.readArray(reader1 -> NotificationConfiguration.fromJson(reader1));
                    deserializedAwsAutoScalingGroupProperties.notificationConfigurations = notificationConfigurations;
                } else if ("placementGroup".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.placementGroup = reader.getString();
                } else if ("serviceLinkedRoleARN".equals(fieldName)) {
                    deserializedAwsAutoScalingGroupProperties.serviceLinkedRoleArn = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagProperty> tags = reader.readArray(reader1 -> TagProperty.fromJson(reader1));
                    deserializedAwsAutoScalingGroupProperties.tags = tags;
                } else if ("targetGroupARNs".equals(fieldName)) {
                    List<String> targetGroupARNs = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsAutoScalingGroupProperties.targetGroupARNs = targetGroupARNs;
                } else if ("terminationPolicies".equals(fieldName)) {
                    List<String> terminationPolicies = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsAutoScalingGroupProperties.terminationPolicies = terminationPolicies;
                } else if ("vpcZoneIdentifier".equals(fieldName)) {
                    List<String> vpcZoneIdentifier = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsAutoScalingGroupProperties.vpcZoneIdentifier = vpcZoneIdentifier;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsAutoScalingGroupProperties;
        });
    }
}
