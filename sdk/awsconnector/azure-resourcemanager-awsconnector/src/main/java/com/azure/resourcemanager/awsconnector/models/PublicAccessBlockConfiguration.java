// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of PublicAccessBlockConfiguration.
 */
@Fluent
public final class PublicAccessBlockConfiguration implements JsonSerializable<PublicAccessBlockConfiguration> {
    /*
     * Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting
     * this element to TRUE causes the following behavior:- PUT Bucket acl and PUT Object acl calls fail if the
     * specified ACL is public. - PUT Object calls fail if the request includes a public ACL.. - PUT Bucket calls fail
     * if the request includes a public ACL.Enabling this setting doesn't affect existing policies or ACLs.
     */
    private Boolean blockPublicAcls;

    /*
     * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element
     * to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public
     * access. Enabling this setting doesn't affect existing bucket policies.
     */
    private Boolean blockPublicPolicy;

    /*
     * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE
     * causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling
     * this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being
     * set.
     */
    private Boolean ignorePublicAcls;

    /*
     * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE
     * restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a
     * public policy.Enabling this setting doesn't affect previously stored bucket policies, except that public and
     * cross-account access within any public bucket policy, including non-public delegation to specific accounts, is
     * blocked.
     */
    private Boolean restrictPublicBuckets;

    /**
     * Creates an instance of PublicAccessBlockConfiguration class.
     */
    public PublicAccessBlockConfiguration() {
    }

    /**
     * Get the blockPublicAcls property: Specifies whether Amazon S3 should block public access control lists (ACLs) for
     * buckets in this account. Setting this element to TRUE causes the following behavior:- PUT Bucket acl and PUT
     * Object acl calls fail if the specified ACL is public. - PUT Object calls fail if the request includes a public
     * ACL.. - PUT Bucket calls fail if the request includes a public ACL.Enabling this setting doesn't affect existing
     * policies or ACLs.
     * 
     * @return the blockPublicAcls value.
     */
    public Boolean blockPublicAcls() {
        return this.blockPublicAcls;
    }

    /**
     * Set the blockPublicAcls property: Specifies whether Amazon S3 should block public access control lists (ACLs) for
     * buckets in this account. Setting this element to TRUE causes the following behavior:- PUT Bucket acl and PUT
     * Object acl calls fail if the specified ACL is public. - PUT Object calls fail if the request includes a public
     * ACL.. - PUT Bucket calls fail if the request includes a public ACL.Enabling this setting doesn't affect existing
     * policies or ACLs.
     * 
     * @param blockPublicAcls the blockPublicAcls value to set.
     * @return the PublicAccessBlockConfiguration object itself.
     */
    public PublicAccessBlockConfiguration withBlockPublicAcls(Boolean blockPublicAcls) {
        this.blockPublicAcls = blockPublicAcls;
        return this;
    }

    /**
     * Get the blockPublicPolicy property: Specifies whether Amazon S3 should block public bucket policies for buckets
     * in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the
     * specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
     * 
     * @return the blockPublicPolicy value.
     */
    public Boolean blockPublicPolicy() {
        return this.blockPublicPolicy;
    }

    /**
     * Set the blockPublicPolicy property: Specifies whether Amazon S3 should block public bucket policies for buckets
     * in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the
     * specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
     * 
     * @param blockPublicPolicy the blockPublicPolicy value to set.
     * @return the PublicAccessBlockConfiguration object itself.
     */
    public PublicAccessBlockConfiguration withBlockPublicPolicy(Boolean blockPublicPolicy) {
        this.blockPublicPolicy = blockPublicPolicy;
        return this;
    }

    /**
     * Get the ignorePublicAcls property: Specifies whether Amazon S3 should ignore public ACLs for buckets in this
     * account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and
     * any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and
     * doesn't prevent new public ACLs from being set.
     * 
     * @return the ignorePublicAcls value.
     */
    public Boolean ignorePublicAcls() {
        return this.ignorePublicAcls;
    }

    /**
     * Set the ignorePublicAcls property: Specifies whether Amazon S3 should ignore public ACLs for buckets in this
     * account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and
     * any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and
     * doesn't prevent new public ACLs from being set.
     * 
     * @param ignorePublicAcls the ignorePublicAcls value to set.
     * @return the PublicAccessBlockConfiguration object itself.
     */
    public PublicAccessBlockConfiguration withIgnorePublicAcls(Boolean ignorePublicAcls) {
        this.ignorePublicAcls = ignorePublicAcls;
        return this;
    }

    /**
     * Get the restrictPublicBuckets property: Specifies whether Amazon S3 should restrict public bucket policies for
     * this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized
     * users within this account if the bucket has a public policy.Enabling this setting doesn't affect previously
     * stored bucket policies, except that public and cross-account access within any public bucket policy, including
     * non-public delegation to specific accounts, is blocked.
     * 
     * @return the restrictPublicBuckets value.
     */
    public Boolean restrictPublicBuckets() {
        return this.restrictPublicBuckets;
    }

    /**
     * Set the restrictPublicBuckets property: Specifies whether Amazon S3 should restrict public bucket policies for
     * this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized
     * users within this account if the bucket has a public policy.Enabling this setting doesn't affect previously
     * stored bucket policies, except that public and cross-account access within any public bucket policy, including
     * non-public delegation to specific accounts, is blocked.
     * 
     * @param restrictPublicBuckets the restrictPublicBuckets value to set.
     * @return the PublicAccessBlockConfiguration object itself.
     */
    public PublicAccessBlockConfiguration withRestrictPublicBuckets(Boolean restrictPublicBuckets) {
        this.restrictPublicBuckets = restrictPublicBuckets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("blockPublicAcls", this.blockPublicAcls);
        jsonWriter.writeBooleanField("blockPublicPolicy", this.blockPublicPolicy);
        jsonWriter.writeBooleanField("ignorePublicAcls", this.ignorePublicAcls);
        jsonWriter.writeBooleanField("restrictPublicBuckets", this.restrictPublicBuckets);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PublicAccessBlockConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PublicAccessBlockConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PublicAccessBlockConfiguration.
     */
    public static PublicAccessBlockConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PublicAccessBlockConfiguration deserializedPublicAccessBlockConfiguration
                = new PublicAccessBlockConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blockPublicAcls".equals(fieldName)) {
                    deserializedPublicAccessBlockConfiguration.blockPublicAcls
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("blockPublicPolicy".equals(fieldName)) {
                    deserializedPublicAccessBlockConfiguration.blockPublicPolicy
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("ignorePublicAcls".equals(fieldName)) {
                    deserializedPublicAccessBlockConfiguration.ignorePublicAcls
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("restrictPublicBuckets".equals(fieldName)) {
                    deserializedPublicAccessBlockConfiguration.restrictPublicBuckets
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPublicAccessBlockConfiguration;
        });
    }
}
