// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of GeoRestriction.
 */
@Fluent
public final class GeoRestriction implements JsonSerializable<GeoRestriction> {
    /*
     * A complex type that contains a ``Location`` element for each country in which you want CloudFront either to
     * distribute your content or not distribute your content.
     */
    private List<String> locations;

    /*
     * The method that you want to use to restrict distribution of your content by country.
     */
    private String restrictionType;

    /**
     * Creates an instance of GeoRestriction class.
     */
    public GeoRestriction() {
    }

    /**
     * Get the locations property: A complex type that contains a ``Location`` element for each country in which you
     * want CloudFront either to distribute your content or not distribute your content.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: A complex type that contains a ``Location`` element for each country in which you
     * want CloudFront either to distribute your content or not distribute your content.
     * 
     * @param locations the locations value to set.
     * @return the GeoRestriction object itself.
     */
    public GeoRestriction withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the restrictionType property: The method that you want to use to restrict distribution of your content by
     * country.
     * 
     * @return the restrictionType value.
     */
    public String restrictionType() {
        return this.restrictionType;
    }

    /**
     * Set the restrictionType property: The method that you want to use to restrict distribution of your content by
     * country.
     * 
     * @param restrictionType the restrictionType value to set.
     * @return the GeoRestriction object itself.
     */
    public GeoRestriction withRestrictionType(String restrictionType) {
        this.restrictionType = restrictionType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("restrictionType", this.restrictionType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoRestriction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoRestriction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeoRestriction.
     */
    public static GeoRestriction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoRestriction deserializedGeoRestriction = new GeoRestriction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedGeoRestriction.locations = locations;
                } else if ("restrictionType".equals(fieldName)) {
                    deserializedGeoRestriction.restrictionType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeoRestriction;
        });
    }
}
