// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsMacieAllowList.
 */
@Fluent
public final class AwsMacieAllowListProperties implements JsonSerializable<AwsMacieAllowListProperties> {
    /*
     * AllowList ARN.
     */
    private String arn;

    /*
     * AllowList criteria. The regex or s3 object to use for the AllowList.
     */
    private Criteria criteria;

    /*
     * Description of AllowList.
     */
    private String description;

    /*
     * AllowList ID.
     */
    private String id;

    /*
     * Name of AllowList.
     */
    private String name;

    /*
     * AllowList status. The status for the AllowList
     */
    private Status status;

    /*
     * A collection of tags associated with a resource
     */
    private List<TagAutoGenerated40> tags;

    /**
     * Creates an instance of AwsMacieAllowListProperties class.
     */
    public AwsMacieAllowListProperties() {
    }

    /**
     * Get the arn property: AllowList ARN.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: AllowList ARN.
     * 
     * @param arn the arn value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the criteria property: AllowList criteria. The regex or s3 object to use for the AllowList.
     * 
     * @return the criteria value.
     */
    public Criteria criteria() {
        return this.criteria;
    }

    /**
     * Set the criteria property: AllowList criteria. The regex or s3 object to use for the AllowList.
     * 
     * @param criteria the criteria value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withCriteria(Criteria criteria) {
        this.criteria = criteria;
        return this;
    }

    /**
     * Get the description property: Description of AllowList.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of AllowList.
     * 
     * @param description the description value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the id property: AllowList ID.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: AllowList ID.
     * 
     * @param id the id value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Name of AllowList.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of AllowList.
     * 
     * @param name the name value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the status property: AllowList status. The status for the AllowList.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: AllowList status. The status for the AllowList.
     * 
     * @param status the status value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tags property: A collection of tags associated with a resource.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated40> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A collection of tags associated with a resource.
     * 
     * @param tags the tags value to set.
     * @return the AwsMacieAllowListProperties object itself.
     */
    public AwsMacieAllowListProperties withTags(List<TagAutoGenerated40> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (criteria() != null) {
            criteria().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeJsonField("criteria", this.criteria);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsMacieAllowListProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsMacieAllowListProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsMacieAllowListProperties.
     */
    public static AwsMacieAllowListProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsMacieAllowListProperties deserializedAwsMacieAllowListProperties = new AwsMacieAllowListProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsMacieAllowListProperties.arn = reader.getString();
                } else if ("criteria".equals(fieldName)) {
                    deserializedAwsMacieAllowListProperties.criteria = Criteria.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedAwsMacieAllowListProperties.description = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedAwsMacieAllowListProperties.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsMacieAllowListProperties.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAwsMacieAllowListProperties.status = Status.fromString(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated40> tags = reader.readArray(reader1 -> TagAutoGenerated40.fromJson(reader1));
                    deserializedAwsMacieAllowListProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsMacieAllowListProperties;
        });
    }
}
