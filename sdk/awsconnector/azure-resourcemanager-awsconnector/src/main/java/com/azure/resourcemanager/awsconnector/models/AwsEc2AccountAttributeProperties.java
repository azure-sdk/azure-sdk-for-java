// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2AccountAttribute.
 */
@Fluent
public final class AwsEc2AccountAttributeProperties implements JsonSerializable<AwsEc2AccountAttributeProperties> {
    /*
     * <p>The name of the account attribute.</p>
     */
    private String attributeName;

    /*
     * <p>The values for the account attribute.</p>
     */
    private List<AccountAttributeValue> attributeValues;

    /**
     * Creates an instance of AwsEc2AccountAttributeProperties class.
     */
    public AwsEc2AccountAttributeProperties() {
    }

    /**
     * Get the attributeName property: &lt;p&gt;The name of the account attribute.&lt;/p&gt;.
     * 
     * @return the attributeName value.
     */
    public String attributeName() {
        return this.attributeName;
    }

    /**
     * Set the attributeName property: &lt;p&gt;The name of the account attribute.&lt;/p&gt;.
     * 
     * @param attributeName the attributeName value to set.
     * @return the AwsEc2AccountAttributeProperties object itself.
     */
    public AwsEc2AccountAttributeProperties withAttributeName(String attributeName) {
        this.attributeName = attributeName;
        return this;
    }

    /**
     * Get the attributeValues property: &lt;p&gt;The values for the account attribute.&lt;/p&gt;.
     * 
     * @return the attributeValues value.
     */
    public List<AccountAttributeValue> attributeValues() {
        return this.attributeValues;
    }

    /**
     * Set the attributeValues property: &lt;p&gt;The values for the account attribute.&lt;/p&gt;.
     * 
     * @param attributeValues the attributeValues value to set.
     * @return the AwsEc2AccountAttributeProperties object itself.
     */
    public AwsEc2AccountAttributeProperties withAttributeValues(List<AccountAttributeValue> attributeValues) {
        this.attributeValues = attributeValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributeValues() != null) {
            attributeValues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("attributeName", this.attributeName);
        jsonWriter.writeArrayField("attributeValues", this.attributeValues,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2AccountAttributeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2AccountAttributeProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2AccountAttributeProperties.
     */
    public static AwsEc2AccountAttributeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2AccountAttributeProperties deserializedAwsEc2AccountAttributeProperties
                = new AwsEc2AccountAttributeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributeName".equals(fieldName)) {
                    deserializedAwsEc2AccountAttributeProperties.attributeName = reader.getString();
                } else if ("attributeValues".equals(fieldName)) {
                    List<AccountAttributeValue> attributeValues
                        = reader.readArray(reader1 -> AccountAttributeValue.fromJson(reader1));
                    deserializedAwsEc2AccountAttributeProperties.attributeValues = attributeValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2AccountAttributeProperties;
        });
    }
}
