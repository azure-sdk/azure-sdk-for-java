// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Code.
 */
@Fluent
public final class Code implements JsonSerializable<Code> {
    /*
     * URI of a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR
     * registry.
     */
    private String imageUri;

    /*
     * An Amazon S3 bucket in the same AWS-Region as your function. The bucket can be in a different AWS-account.
     */
    private String s3Bucket;

    /*
     * The Amazon S3 key of the deployment package.
     */
    private String s3Key;

    /*
     * For versioned objects, the version of the deployment package object to use.
     */
    private String s3ObjectVersion;

    /*
     * (Node.js and Python) The source code of your Lambda function. If you include your function source inline with
     * this parameter, CFN places it in a file named ``index`` and zips it to create a [deployment
     * package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html). This zip file cannot exceed
     * 4MB. For the ``Handler`` property, the first part of the handler identifier must be ``index``. For example,
     * ``index.handler``. For JSON, you must escape quotes and special characters such as newline (``\n``) with a
     * backslash. If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have to
     * write your own functions to send responses to the custom resource that invoked the function. AWS CloudFormation
     * provides a response module
     * ([cfn-response](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-
     * cfnresponsemodule.html)) that simplifies sending responses. See [Using Lambda with
     * CloudFormation](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html) for details.
     */
    private String zipFile;

    /**
     * Creates an instance of Code class.
     */
    public Code() {
    }

    /**
     * Get the imageUri property: URI of a [container
     * image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR registry.
     * 
     * @return the imageUri value.
     */
    public String imageUri() {
        return this.imageUri;
    }

    /**
     * Set the imageUri property: URI of a [container
     * image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR registry.
     * 
     * @param imageUri the imageUri value to set.
     * @return the Code object itself.
     */
    public Code withImageUri(String imageUri) {
        this.imageUri = imageUri;
        return this;
    }

    /**
     * Get the s3Bucket property: An Amazon S3 bucket in the same AWS-Region as your function. The bucket can be in a
     * different AWS-account.
     * 
     * @return the s3Bucket value.
     */
    public String s3Bucket() {
        return this.s3Bucket;
    }

    /**
     * Set the s3Bucket property: An Amazon S3 bucket in the same AWS-Region as your function. The bucket can be in a
     * different AWS-account.
     * 
     * @param s3Bucket the s3Bucket value to set.
     * @return the Code object itself.
     */
    public Code withS3Bucket(String s3Bucket) {
        this.s3Bucket = s3Bucket;
        return this;
    }

    /**
     * Get the s3Key property: The Amazon S3 key of the deployment package.
     * 
     * @return the s3Key value.
     */
    public String s3Key() {
        return this.s3Key;
    }

    /**
     * Set the s3Key property: The Amazon S3 key of the deployment package.
     * 
     * @param s3Key the s3Key value to set.
     * @return the Code object itself.
     */
    public Code withS3Key(String s3Key) {
        this.s3Key = s3Key;
        return this;
    }

    /**
     * Get the s3ObjectVersion property: For versioned objects, the version of the deployment package object to use.
     * 
     * @return the s3ObjectVersion value.
     */
    public String s3ObjectVersion() {
        return this.s3ObjectVersion;
    }

    /**
     * Set the s3ObjectVersion property: For versioned objects, the version of the deployment package object to use.
     * 
     * @param s3ObjectVersion the s3ObjectVersion value to set.
     * @return the Code object itself.
     */
    public Code withS3ObjectVersion(String s3ObjectVersion) {
        this.s3ObjectVersion = s3ObjectVersion;
        return this;
    }

    /**
     * Get the zipFile property: (Node.js and Python) The source code of your Lambda function. If you include your
     * function source inline with this parameter, CFN places it in a file named ``index`` and zips it to create a
     * [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html). This zip file
     * cannot exceed 4MB. For the ``Handler`` property, the first part of the handler identifier must be ``index``. For
     * example, ``index.handler``. For JSON, you must escape quotes and special characters such as newline (``\n``) with
     * a backslash. If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have
     * to write your own functions to send responses to the custom resource that invoked the function. AWS
     * CloudFormation provides a response module
     * ([cfn-response](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html))
     * that simplifies sending responses. See [Using Lambda with
     * CloudFormation](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html) for details.
     * 
     * @return the zipFile value.
     */
    public String zipFile() {
        return this.zipFile;
    }

    /**
     * Set the zipFile property: (Node.js and Python) The source code of your Lambda function. If you include your
     * function source inline with this parameter, CFN places it in a file named ``index`` and zips it to create a
     * [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html). This zip file
     * cannot exceed 4MB. For the ``Handler`` property, the first part of the handler identifier must be ``index``. For
     * example, ``index.handler``. For JSON, you must escape quotes and special characters such as newline (``\n``) with
     * a backslash. If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have
     * to write your own functions to send responses to the custom resource that invoked the function. AWS
     * CloudFormation provides a response module
     * ([cfn-response](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html))
     * that simplifies sending responses. See [Using Lambda with
     * CloudFormation](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html) for details.
     * 
     * @param zipFile the zipFile value to set.
     * @return the Code object itself.
     */
    public Code withZipFile(String zipFile) {
        this.zipFile = zipFile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imageUri", this.imageUri);
        jsonWriter.writeStringField("s3Bucket", this.s3Bucket);
        jsonWriter.writeStringField("s3Key", this.s3Key);
        jsonWriter.writeStringField("s3ObjectVersion", this.s3ObjectVersion);
        jsonWriter.writeStringField("zipFile", this.zipFile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Code from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Code if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Code.
     */
    public static Code fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Code deserializedCode = new Code();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageUri".equals(fieldName)) {
                    deserializedCode.imageUri = reader.getString();
                } else if ("s3Bucket".equals(fieldName)) {
                    deserializedCode.s3Bucket = reader.getString();
                } else if ("s3Key".equals(fieldName)) {
                    deserializedCode.s3Key = reader.getString();
                } else if ("s3ObjectVersion".equals(fieldName)) {
                    deserializedCode.s3ObjectVersion = reader.getString();
                } else if ("zipFile".equals(fieldName)) {
                    deserializedCode.zipFile = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCode;
        });
    }
}
