// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FileSystemProtection.
 */
@Fluent
public final class FileSystemProtection implements JsonSerializable<FileSystemProtection> {
    /*
     * The status of the file system's replication overwrite protection. + ``ENABLED`` – The file system cannot be used
     * as the destination file system in a replication configuration. The file system is writeable. Replication
     * overwrite protection is ``ENABLED`` by default. + ``DISABLED`` – The file system can be used as the destination
     * file system in a replication configuration. The file system is read-only and can only be modified by EFS
     * replication. + ``REPLICATING`` – The file system is being used as the destination file system in a replication
     * configuration. The file system is read-only and is only modified only by EFS replication. If the replication
     * configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system
     * becomes writeable.
     */
    private FileSystemProtectionReplicationOverwriteProtection replicationOverwriteProtection;

    /**
     * Creates an instance of FileSystemProtection class.
     */
    public FileSystemProtection() {
    }

    /**
     * Get the replicationOverwriteProtection property: The status of the file system's replication overwrite
     * protection. + ``ENABLED`` – The file system cannot be used as the destination file system in a replication
     * configuration. The file system is writeable. Replication overwrite protection is ``ENABLED`` by default. +
     * ``DISABLED`` – The file system can be used as the destination file system in a replication configuration. The
     * file system is read-only and can only be modified by EFS replication. + ``REPLICATING`` – The file system is
     * being used as the destination file system in a replication configuration. The file system is read-only and is
     * only modified only by EFS replication. If the replication configuration is deleted, the file system's replication
     * overwrite protection is re-enabled, the file system becomes writeable.
     * 
     * @return the replicationOverwriteProtection value.
     */
    public FileSystemProtectionReplicationOverwriteProtection replicationOverwriteProtection() {
        return this.replicationOverwriteProtection;
    }

    /**
     * Set the replicationOverwriteProtection property: The status of the file system's replication overwrite
     * protection. + ``ENABLED`` – The file system cannot be used as the destination file system in a replication
     * configuration. The file system is writeable. Replication overwrite protection is ``ENABLED`` by default. +
     * ``DISABLED`` – The file system can be used as the destination file system in a replication configuration. The
     * file system is read-only and can only be modified by EFS replication. + ``REPLICATING`` – The file system is
     * being used as the destination file system in a replication configuration. The file system is read-only and is
     * only modified only by EFS replication. If the replication configuration is deleted, the file system's replication
     * overwrite protection is re-enabled, the file system becomes writeable.
     * 
     * @param replicationOverwriteProtection the replicationOverwriteProtection value to set.
     * @return the FileSystemProtection object itself.
     */
    public FileSystemProtection withReplicationOverwriteProtection(
        FileSystemProtectionReplicationOverwriteProtection replicationOverwriteProtection) {
        this.replicationOverwriteProtection = replicationOverwriteProtection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("replicationOverwriteProtection",
            this.replicationOverwriteProtection == null ? null : this.replicationOverwriteProtection.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSystemProtection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSystemProtection if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSystemProtection.
     */
    public static FileSystemProtection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSystemProtection deserializedFileSystemProtection = new FileSystemProtection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("replicationOverwriteProtection".equals(fieldName)) {
                    deserializedFileSystemProtection.replicationOverwriteProtection
                        = FileSystemProtectionReplicationOverwriteProtection.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFileSystemProtection;
        });
    }
}
