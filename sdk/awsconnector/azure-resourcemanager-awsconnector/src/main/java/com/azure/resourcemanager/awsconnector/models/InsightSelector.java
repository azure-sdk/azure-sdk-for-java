// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InsightSelector.
 */
@Fluent
public final class InsightSelector implements JsonSerializable<InsightSelector> {
    /*
     * The type of insight to log on a trail.
     */
    private String insightType;

    /**
     * Creates an instance of InsightSelector class.
     */
    public InsightSelector() {
    }

    /**
     * Get the insightType property: The type of insight to log on a trail.
     * 
     * @return the insightType value.
     */
    public String insightType() {
        return this.insightType;
    }

    /**
     * Set the insightType property: The type of insight to log on a trail.
     * 
     * @param insightType the insightType value to set.
     * @return the InsightSelector object itself.
     */
    public InsightSelector withInsightType(String insightType) {
        this.insightType = insightType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("insightType", this.insightType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InsightSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InsightSelector if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InsightSelector.
     */
    public static InsightSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InsightSelector deserializedInsightSelector = new InsightSelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("insightType".equals(fieldName)) {
                    deserializedInsightSelector.insightType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInsightSelector;
        });
    }
}
