// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of NotificationConfiguration.
 */
@Fluent
public final class NotificationConfigurationAutoGenerated2
    implements JsonSerializable<NotificationConfigurationAutoGenerated2> {
    /*
     * Enables delivery of events to Amazon EventBridge. Amazon S3 can send events to Amazon EventBridge whenever
     * certain events happen in your bucket, see [Using
     * EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User
     * Guide*. Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a
     * bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to
     * additional targets. For more information, see [What Is Amazon
     * EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge
     * User Guide*
     */
    private EventBridgeConfiguration eventBridgeConfiguration;

    /*
     * Describes the LAMlong functions to invoke and the events for which to invoke them.
     */
    private List<LambdaConfiguration> lambdaConfigurations;

    /*
     * The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
     */
    private List<QueueConfiguration> queueConfigurations;

    /*
     * The topic to which notifications are sent and the events for which notifications are generated.
     */
    private List<TopicConfiguration> topicConfigurations;

    /**
     * Creates an instance of NotificationConfigurationAutoGenerated2 class.
     */
    public NotificationConfigurationAutoGenerated2() {
    }

    /**
     * Get the eventBridgeConfiguration property: Enables delivery of events to Amazon EventBridge. Amazon S3 can send
     * events to Amazon EventBridge whenever certain events happen in your bucket, see [Using
     * EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User
     * Guide*. Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a
     * bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to
     * additional targets. For more information, see [What Is Amazon
     * EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge
     * User Guide*.
     * 
     * @return the eventBridgeConfiguration value.
     */
    public EventBridgeConfiguration eventBridgeConfiguration() {
        return this.eventBridgeConfiguration;
    }

    /**
     * Set the eventBridgeConfiguration property: Enables delivery of events to Amazon EventBridge. Amazon S3 can send
     * events to Amazon EventBridge whenever certain events happen in your bucket, see [Using
     * EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User
     * Guide*. Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a
     * bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to
     * additional targets. For more information, see [What Is Amazon
     * EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge
     * User Guide*.
     * 
     * @param eventBridgeConfiguration the eventBridgeConfiguration value to set.
     * @return the NotificationConfigurationAutoGenerated2 object itself.
     */
    public NotificationConfigurationAutoGenerated2
        withEventBridgeConfiguration(EventBridgeConfiguration eventBridgeConfiguration) {
        this.eventBridgeConfiguration = eventBridgeConfiguration;
        return this;
    }

    /**
     * Get the lambdaConfigurations property: Describes the LAMlong functions to invoke and the events for which to
     * invoke them.
     * 
     * @return the lambdaConfigurations value.
     */
    public List<LambdaConfiguration> lambdaConfigurations() {
        return this.lambdaConfigurations;
    }

    /**
     * Set the lambdaConfigurations property: Describes the LAMlong functions to invoke and the events for which to
     * invoke them.
     * 
     * @param lambdaConfigurations the lambdaConfigurations value to set.
     * @return the NotificationConfigurationAutoGenerated2 object itself.
     */
    public NotificationConfigurationAutoGenerated2
        withLambdaConfigurations(List<LambdaConfiguration> lambdaConfigurations) {
        this.lambdaConfigurations = lambdaConfigurations;
        return this;
    }

    /**
     * Get the queueConfigurations property: The Amazon Simple Queue Service queues to publish messages to and the
     * events for which to publish messages.
     * 
     * @return the queueConfigurations value.
     */
    public List<QueueConfiguration> queueConfigurations() {
        return this.queueConfigurations;
    }

    /**
     * Set the queueConfigurations property: The Amazon Simple Queue Service queues to publish messages to and the
     * events for which to publish messages.
     * 
     * @param queueConfigurations the queueConfigurations value to set.
     * @return the NotificationConfigurationAutoGenerated2 object itself.
     */
    public NotificationConfigurationAutoGenerated2
        withQueueConfigurations(List<QueueConfiguration> queueConfigurations) {
        this.queueConfigurations = queueConfigurations;
        return this;
    }

    /**
     * Get the topicConfigurations property: The topic to which notifications are sent and the events for which
     * notifications are generated.
     * 
     * @return the topicConfigurations value.
     */
    public List<TopicConfiguration> topicConfigurations() {
        return this.topicConfigurations;
    }

    /**
     * Set the topicConfigurations property: The topic to which notifications are sent and the events for which
     * notifications are generated.
     * 
     * @param topicConfigurations the topicConfigurations value to set.
     * @return the NotificationConfigurationAutoGenerated2 object itself.
     */
    public NotificationConfigurationAutoGenerated2
        withTopicConfigurations(List<TopicConfiguration> topicConfigurations) {
        this.topicConfigurations = topicConfigurations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (eventBridgeConfiguration() != null) {
            eventBridgeConfiguration().validate();
        }
        if (lambdaConfigurations() != null) {
            lambdaConfigurations().forEach(e -> e.validate());
        }
        if (queueConfigurations() != null) {
            queueConfigurations().forEach(e -> e.validate());
        }
        if (topicConfigurations() != null) {
            topicConfigurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("eventBridgeConfiguration", this.eventBridgeConfiguration);
        jsonWriter.writeArrayField("lambdaConfigurations", this.lambdaConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("queueConfigurations", this.queueConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("topicConfigurations", this.topicConfigurations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationConfigurationAutoGenerated2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationConfigurationAutoGenerated2 if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationConfigurationAutoGenerated2.
     */
    public static NotificationConfigurationAutoGenerated2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationConfigurationAutoGenerated2 deserializedNotificationConfigurationAutoGenerated2
                = new NotificationConfigurationAutoGenerated2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventBridgeConfiguration".equals(fieldName)) {
                    deserializedNotificationConfigurationAutoGenerated2.eventBridgeConfiguration
                        = EventBridgeConfiguration.fromJson(reader);
                } else if ("lambdaConfigurations".equals(fieldName)) {
                    List<LambdaConfiguration> lambdaConfigurations
                        = reader.readArray(reader1 -> LambdaConfiguration.fromJson(reader1));
                    deserializedNotificationConfigurationAutoGenerated2.lambdaConfigurations = lambdaConfigurations;
                } else if ("queueConfigurations".equals(fieldName)) {
                    List<QueueConfiguration> queueConfigurations
                        = reader.readArray(reader1 -> QueueConfiguration.fromJson(reader1));
                    deserializedNotificationConfigurationAutoGenerated2.queueConfigurations = queueConfigurations;
                } else if ("topicConfigurations".equals(fieldName)) {
                    List<TopicConfiguration> topicConfigurations
                        = reader.readArray(reader1 -> TopicConfiguration.fromJson(reader1));
                    deserializedNotificationConfigurationAutoGenerated2.topicConfigurations = topicConfigurations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationConfigurationAutoGenerated2;
        });
    }
}
