// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LaunchTemplateOverrides.
 */
@Fluent
public final class LaunchTemplateOverrides implements JsonSerializable<LaunchTemplateOverrides> {
    /*
     * The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types.
     * Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You
     * can specify up to four separate sets of instance requirements per Auto Scaling group. This is useful for
     * provisioning instances from different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this,
     * create the AMIs and create a new launch template for each AMI. Then, create a compatible set of instance
     * requirements for each launch template. If you specify ``InstanceRequirements``, you can't specify
     * ``InstanceType``. The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling
     * uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation
     * strategies to launch instances from these instance types. When you specify multiple attributes, you get instance
     * types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get
     * instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon
     * EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both
     * in the same request: + ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance
     * types are ignored, even if they match your specified attributes. + ``ExcludedInstanceTypes`` - The instance types
     * to exclude from the list, even if they match your specified attributes. You must specify ``VCpuCount`` and
     * ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default. For
     * an example template, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more
     * information, see [Creating an Auto Scaling group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before
     * you apply them to your Auto Scaling group, see [Preview instance types with specified
     * attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection
     * .html#ec2fleet-get-instance-types-from-instance-requirements) in the *Amazon EC2 User Guide for Linux Instances*.
     * ``InstanceRequirements`` is a property of the ``LaunchTemplateOverrides`` property of the
     * [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-
     * autoscalinggroup-launchtemplate.html) property type.
     */
    private InstanceRequirements instanceRequirements;

    /*
     * The instance type, such as ``m3.xlarge``. You must specify an instance type that is supported in your requested
     * Region and Availability Zones. For more information, see [Instance
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon Elastic Compute
     * Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.
     */
    private String instanceType;

    /*
     * Provides a launch template for the specified instance type or set of instance requirements. For example, some
     * instance types might require a launch template with a different AMI. If not provided, Amazon EC2 Auto Scaling
     * uses the launch template that's specified in the ``LaunchTemplate`` definition. For more information, see
     * [Specifying a different launch template for an instance
     * type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-
     * template-overrides.html) in the *Amazon EC2 Auto Scaling User Guide*. You can specify up to 20 launch templates
     * per Auto Scaling group. The launch templates specified in the overrides and in the ``LaunchTemplate`` definition
     * count towards this limit. Specifies a launch template to use when provisioning EC2 instances for an Auto Scaling
     * group. You must specify the following: + The ID or the name of the launch template, but not both. + The version
     * of the launch template. ``LaunchTemplateSpecification`` is property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-
     * autoscaling-autoscalinggroup.html) resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-
     * autoscalinggroup-launchtemplate.html) and [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-
     * autoscaling-autoscalinggroup-launchtemplateoverrides.html) property types. For information about creating a
     * launch template, see
     * [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-
     * launchtemplate.html) and [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. For examples of launch templates, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html) and the
     * [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#
     * aws-resource-ec2-launchtemplate--examples) section in the ``AWS::EC2::LaunchTemplate`` resource.
     */
    private LaunchTemplateSpecification launchTemplateSpecification;

    /*
     * If you provide a list of instance types to use, you can specify the number of capacity units provided by each
     * instance type in terms of virtual CPUs, memory, storage, throughput, or other relative performance
     * characteristic. When a Spot or On-Demand Instance is launched, the capacity units count toward the desired
     * capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally fulfilled, even if
     * this results in an overage. For example, if there are two units remaining to fulfill capacity, and Amazon EC2
     * Auto Scaling can only launch an instance with a ``WeightedCapacity`` of five units, the instance is launched, and
     * the desired capacity is exceeded by three units. For more information, see [Configure instance weighting for
     * Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-
     * weighting.html) in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. If you specify
     * a value for ``WeightedCapacity`` for one instance type, you must specify a value for ``WeightedCapacity`` for all
     * of them. Every Auto Scaling group has three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``).
     * Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances
     * policy that defines weights for the instance types, you must specify these sizes with the same units that you use
     * for weighting instances.
     */
    private String weightedCapacity;

    /**
     * Creates an instance of LaunchTemplateOverrides class.
     */
    public LaunchTemplateOverrides() {
    }

    /**
     * Get the instanceRequirements property: The instance requirements. Amazon EC2 Auto Scaling uses your specified
     * requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch
     * instances from these instance types. You can specify up to four separate sets of instance requirements per Auto
     * Scaling group. This is useful for provisioning instances from different Amazon Machine Images (AMIs) in the same
     * Auto Scaling group. To do this, create the AMIs and create a new launch template for each AMI. Then, create a
     * compatible set of instance requirements for each launch template. If you specify ``InstanceRequirements``, you
     * can't specify ``InstanceType``. The attributes for the instance types for a mixed instances policy. Amazon EC2
     * Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot
     * allocation strategies to launch instances from these instance types. When you specify multiple attributes, you
     * get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute,
     * you get instance types that satisfy any of the specified values. To limit the list of instance types from which
     * Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but
     * not both in the same request: + ``AllowedInstanceTypes`` - The instance types to include in the list. All other
     * instance types are ignored, even if they match your specified attributes. + ``ExcludedInstanceTypes`` - The
     * instance types to exclude from the list, even if they match your specified attributes. You must specify
     * ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to
     * its default. For an example template, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more
     * information, see [Creating an Auto Scaling group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before
     * you apply them to your Auto Scaling group, see [Preview instance types with specified
     * attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements)
     * in the *Amazon EC2 User Guide for Linux Instances*. ``InstanceRequirements`` is a property of the
     * ``LaunchTemplateOverrides`` property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
     * property type.
     * 
     * @return the instanceRequirements value.
     */
    public InstanceRequirements instanceRequirements() {
        return this.instanceRequirements;
    }

    /**
     * Set the instanceRequirements property: The instance requirements. Amazon EC2 Auto Scaling uses your specified
     * requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch
     * instances from these instance types. You can specify up to four separate sets of instance requirements per Auto
     * Scaling group. This is useful for provisioning instances from different Amazon Machine Images (AMIs) in the same
     * Auto Scaling group. To do this, create the AMIs and create a new launch template for each AMI. Then, create a
     * compatible set of instance requirements for each launch template. If you specify ``InstanceRequirements``, you
     * can't specify ``InstanceType``. The attributes for the instance types for a mixed instances policy. Amazon EC2
     * Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot
     * allocation strategies to launch instances from these instance types. When you specify multiple attributes, you
     * get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute,
     * you get instance types that satisfy any of the specified values. To limit the list of instance types from which
     * Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but
     * not both in the same request: + ``AllowedInstanceTypes`` - The instance types to include in the list. All other
     * instance types are ignored, even if they match your specified attributes. + ``ExcludedInstanceTypes`` - The
     * instance types to exclude from the list, even if they match your specified attributes. You must specify
     * ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to
     * its default. For an example template, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html). For more
     * information, see [Creating an Auto Scaling group using attribute-based instance type
     * selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in
     * the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before
     * you apply them to your Auto Scaling group, see [Preview instance types with specified
     * attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements)
     * in the *Amazon EC2 User Guide for Linux Instances*. ``InstanceRequirements`` is a property of the
     * ``LaunchTemplateOverrides`` property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
     * property type.
     * 
     * @param instanceRequirements the instanceRequirements value to set.
     * @return the LaunchTemplateOverrides object itself.
     */
    public LaunchTemplateOverrides withInstanceRequirements(InstanceRequirements instanceRequirements) {
        this.instanceRequirements = instanceRequirements;
        return this;
    }

    /**
     * Get the instanceType property: The instance type, such as ``m3.xlarge``. You must specify an instance type that
     * is supported in your requested Region and Availability Zones. For more information, see [Instance
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon Elastic Compute
     * Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.
     * 
     * @return the instanceType value.
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Set the instanceType property: The instance type, such as ``m3.xlarge``. You must specify an instance type that
     * is supported in your requested Region and Availability Zones. For more information, see [Instance
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon Elastic Compute
     * Cloud User Guide*. You can specify up to 40 instance types per Auto Scaling group.
     * 
     * @param instanceType the instanceType value to set.
     * @return the LaunchTemplateOverrides object itself.
     */
    public LaunchTemplateOverrides withInstanceType(String instanceType) {
        this.instanceType = instanceType;
        return this;
    }

    /**
     * Get the launchTemplateSpecification property: Provides a launch template for the specified instance type or set
     * of instance requirements. For example, some instance types might require a launch template with a different AMI.
     * If not provided, Amazon EC2 Auto Scaling uses the launch template that's specified in the ``LaunchTemplate``
     * definition. For more information, see [Specifying a different launch template for an instance
     * type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. You can specify up to 20 launch templates per Auto Scaling group.
     * The launch templates specified in the overrides and in the ``LaunchTemplate`` definition count towards this
     * limit. Specifies a launch template to use when provisioning EC2 instances for an Auto Scaling group. You must
     * specify the following: + The ID or the name of the launch template, but not both. + The version of the launch
     * template. ``LaunchTemplateSpecification`` is property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
     * and [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html)
     * property types. For information about creating a launch template, see
     * [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html)
     * and [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. For examples of launch templates, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html) and the
     * [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate--examples)
     * section in the ``AWS::EC2::LaunchTemplate`` resource.
     * 
     * @return the launchTemplateSpecification value.
     */
    public LaunchTemplateSpecification launchTemplateSpecification() {
        return this.launchTemplateSpecification;
    }

    /**
     * Set the launchTemplateSpecification property: Provides a launch template for the specified instance type or set
     * of instance requirements. For example, some instance types might require a launch template with a different AMI.
     * If not provided, Amazon EC2 Auto Scaling uses the launch template that's specified in the ``LaunchTemplate``
     * definition. For more information, see [Specifying a different launch template for an instance
     * type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. You can specify up to 20 launch templates per Auto Scaling group.
     * The launch templates specified in the overrides and in the ``LaunchTemplate`` definition count towards this
     * limit. Specifies a launch template to use when provisioning EC2 instances for an Auto Scaling group. You must
     * specify the following: + The ID or the name of the launch template, but not both. + The version of the launch
     * template. ``LaunchTemplateSpecification`` is property of the
     * [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html)
     * resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html)
     * and [AWS::AutoScaling::AutoScalingGroup
     * LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html)
     * property types. For information about creating a launch template, see
     * [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html)
     * and [Create a launch template for an Auto Scaling
     * group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto
     * Scaling User Guide*. For examples of launch templates, see [Auto scaling template
     * snippets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html) and the
     * [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate--examples)
     * section in the ``AWS::EC2::LaunchTemplate`` resource.
     * 
     * @param launchTemplateSpecification the launchTemplateSpecification value to set.
     * @return the LaunchTemplateOverrides object itself.
     */
    public LaunchTemplateOverrides
        withLaunchTemplateSpecification(LaunchTemplateSpecification launchTemplateSpecification) {
        this.launchTemplateSpecification = launchTemplateSpecification;
        return this;
    }

    /**
     * Get the weightedCapacity property: If you provide a list of instance types to use, you can specify the number of
     * capacity units provided by each instance type in terms of virtual CPUs, memory, storage, throughput, or other
     * relative performance characteristic. When a Spot or On-Demand Instance is launched, the capacity units count
     * toward the desired capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally
     * fulfilled, even if this results in an overage. For example, if there are two units remaining to fulfill capacity,
     * and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity`` of five units, the instance
     * is launched, and the desired capacity is exceeded by three units. For more information, see [Configure instance
     * weighting for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. If you specify a value for
     * ``WeightedCapacity`` for one instance type, you must specify a value for ``WeightedCapacity`` for all of them.
     * Every Auto Scaling group has three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually,
     * you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy
     * that defines weights for the instance types, you must specify these sizes with the same units that you use for
     * weighting instances.
     * 
     * @return the weightedCapacity value.
     */
    public String weightedCapacity() {
        return this.weightedCapacity;
    }

    /**
     * Set the weightedCapacity property: If you provide a list of instance types to use, you can specify the number of
     * capacity units provided by each instance type in terms of virtual CPUs, memory, storage, throughput, or other
     * relative performance characteristic. When a Spot or On-Demand Instance is launched, the capacity units count
     * toward the desired capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally
     * fulfilled, even if this results in an overage. For example, if there are two units remaining to fulfill capacity,
     * and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity`` of five units, the instance
     * is launched, and the desired capacity is exceeded by three units. For more information, see [Configure instance
     * weighting for Amazon EC2 Auto
     * Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html)
     * in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. If you specify a value for
     * ``WeightedCapacity`` for one instance type, you must specify a value for ``WeightedCapacity`` for all of them.
     * Every Auto Scaling group has three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually,
     * you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy
     * that defines weights for the instance types, you must specify these sizes with the same units that you use for
     * weighting instances.
     * 
     * @param weightedCapacity the weightedCapacity value to set.
     * @return the LaunchTemplateOverrides object itself.
     */
    public LaunchTemplateOverrides withWeightedCapacity(String weightedCapacity) {
        this.weightedCapacity = weightedCapacity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceRequirements() != null) {
            instanceRequirements().validate();
        }
        if (launchTemplateSpecification() != null) {
            launchTemplateSpecification().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("instanceRequirements", this.instanceRequirements);
        jsonWriter.writeStringField("instanceType", this.instanceType);
        jsonWriter.writeJsonField("launchTemplateSpecification", this.launchTemplateSpecification);
        jsonWriter.writeStringField("weightedCapacity", this.weightedCapacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LaunchTemplateOverrides from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LaunchTemplateOverrides if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LaunchTemplateOverrides.
     */
    public static LaunchTemplateOverrides fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LaunchTemplateOverrides deserializedLaunchTemplateOverrides = new LaunchTemplateOverrides();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceRequirements".equals(fieldName)) {
                    deserializedLaunchTemplateOverrides.instanceRequirements = InstanceRequirements.fromJson(reader);
                } else if ("instanceType".equals(fieldName)) {
                    deserializedLaunchTemplateOverrides.instanceType = reader.getString();
                } else if ("launchTemplateSpecification".equals(fieldName)) {
                    deserializedLaunchTemplateOverrides.launchTemplateSpecification
                        = LaunchTemplateSpecification.fromJson(reader);
                } else if ("weightedCapacity".equals(fieldName)) {
                    deserializedLaunchTemplateOverrides.weightedCapacity = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLaunchTemplateOverrides;
        });
    }
}
