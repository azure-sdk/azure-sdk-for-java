// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Ulimit.
 */
@Fluent
public final class Ulimit implements JsonSerializable<Ulimit> {
    /*
     * The hard limit for the ``ulimit`` type.
     */
    private Integer hardLimit;

    /*
     * The ``type`` of the ``ulimit``.
     */
    private String name;

    /*
     * The soft limit for the ``ulimit`` type.
     */
    private Integer softLimit;

    /**
     * Creates an instance of Ulimit class.
     */
    public Ulimit() {
    }

    /**
     * Get the hardLimit property: The hard limit for the ``ulimit`` type.
     * 
     * @return the hardLimit value.
     */
    public Integer hardLimit() {
        return this.hardLimit;
    }

    /**
     * Set the hardLimit property: The hard limit for the ``ulimit`` type.
     * 
     * @param hardLimit the hardLimit value to set.
     * @return the Ulimit object itself.
     */
    public Ulimit withHardLimit(Integer hardLimit) {
        this.hardLimit = hardLimit;
        return this;
    }

    /**
     * Get the name property: The ``type`` of the ``ulimit``.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The ``type`` of the ``ulimit``.
     * 
     * @param name the name value to set.
     * @return the Ulimit object itself.
     */
    public Ulimit withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the softLimit property: The soft limit for the ``ulimit`` type.
     * 
     * @return the softLimit value.
     */
    public Integer softLimit() {
        return this.softLimit;
    }

    /**
     * Set the softLimit property: The soft limit for the ``ulimit`` type.
     * 
     * @param softLimit the softLimit value to set.
     * @return the Ulimit object itself.
     */
    public Ulimit withSoftLimit(Integer softLimit) {
        this.softLimit = softLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("hardLimit", this.hardLimit);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("softLimit", this.softLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ulimit from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ulimit if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Ulimit.
     */
    public static Ulimit fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Ulimit deserializedUlimit = new Ulimit();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hardLimit".equals(fieldName)) {
                    deserializedUlimit.hardLimit = reader.getNullable(JsonReader::getInt);
                } else if ("name".equals(fieldName)) {
                    deserializedUlimit.name = reader.getString();
                } else if ("softLimit".equals(fieldName)) {
                    deserializedUlimit.softLimit = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUlimit;
        });
    }
}
