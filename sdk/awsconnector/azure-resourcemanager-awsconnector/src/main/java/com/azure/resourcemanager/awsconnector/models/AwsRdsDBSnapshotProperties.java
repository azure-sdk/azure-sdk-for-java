// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Definition of awsRdsDBSnapshot.
 */
@Fluent
public final class AwsRdsDBSnapshotProperties implements JsonSerializable<AwsRdsDBSnapshotProperties> {
    /*
     * <p>Specifies the allocated storage size in gibibytes (GiB).</p>
     */
    private Integer allocatedStorage;

    /*
     * <p>Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.</p>
     */
    private String availabilityZone;

    /*
     * <p>Specifies the DB instance identifier of the DB instance this DB snapshot was created from.</p>
     */
    private String dbInstanceIdentifier;

    /*
     * <p>The Amazon Resource Name (ARN) for the DB snapshot.</p>
     */
    private String dbSnapshotArn;

    /*
     * <p>Specifies the identifier for the DB snapshot.</p>
     */
    private String dbSnapshotIdentifier;

    /*
     * <p>The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your
     * database files. The Oracle SID is also the name of your CDB.</p>
     */
    private String dbSystemId;

    /*
     * <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web
     * Services Region.</p>
     */
    private String dbiResourceId;

    /*
     * <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
     */
    private Boolean dedicatedLogVolume;

    /*
     * <p>Indicates whether the DB snapshot is encrypted.</p>
     */
    private Boolean encrypted;

    /*
     * <p>Specifies the name of the database engine.</p>
     */
    private String engine;

    /*
     * <p>Specifies the version of the database engine.</p>
     */
    private String engineVersion;

    /*
     * <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database
     * accounts is enabled.</p>
     */
    private Boolean iamDatabaseAuthenticationEnabled;

    /*
     * <p>Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was
     * taken, was created.</p>
     */
    private OffsetDateTime instanceCreateTime;

    /*
     * <p>Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the
     * snapshot.</p>
     */
    private Integer iops;

    /*
     * <p>If <code>Encrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB
     * snapshot.</p> <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for
     * the KMS key.</p>
     */
    private String kmsKeyId;

    /*
     * <p>License model information for the restored DB instance.</p>
     */
    private String licenseModel;

    /*
     * <p>Provides the master username for the DB snapshot.</p>
     */
    private String masterUsername;

    /*
     * <p>Indicates whether the snapshot is of a DB instance using the multi-tenant configuration (TRUE) or the
     * single-tenant configuration (FALSE).</p>
     */
    private Boolean multiTenant;

    /*
     * <p>Provides the option group name for the DB snapshot.</p>
     */
    private String optionGroupName;

    /*
     * <p>Specifies the time of the CreateDBSnapshot operation in Coordinated Universal Time (UTC). Doesn't change when
     * the snapshot is copied.</p>
     */
    private OffsetDateTime originalSnapshotCreateTime;

    /*
     * <p>The percentage of the estimated data that has been transferred.</p>
     */
    private Integer percentProgress;

    /*
     * <p>Specifies the port that the database engine was listening on at the time of the snapshot.</p>
     */
    private Integer port;

    /*
     * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when
     * the DB snapshot was created.</p>
     */
    private List<ProcessorFeatureAutoGenerated> processorFeatures;

    /*
     * <p>Specifies when the snapshot was taken in Coordinated Universal Time (UTC). Changes for the copy when the
     * snapshot is copied.</p>
     */
    private OffsetDateTime snapshotCreateTime;

    /*
     * <p>The timestamp of the most recent transaction applied to the database that you're backing up. Thus, if you
     * restore a snapshot, SnapshotDatabaseTime is the most recent transaction in the restored DB instance. In contrast,
     * originalSnapshotCreateTime specifies the system time that the snapshot completed.</p> <p>If you back up a read
     * replica, you can determine the replica lag by comparing SnapshotDatabaseTime with originalSnapshotCreateTime. For
     * example, if originalSnapshotCreateTime is two hours later than SnapshotDatabaseTime, then the replica lag is two
     * hours.</p>
     */
    private OffsetDateTime snapshotDatabaseTime;

    /*
     * <p>Specifies where manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services
     * Region.</p>
     */
    private String snapshotTarget;

    /*
     * <p>Provides the type of the DB snapshot.</p>
     */
    private String snapshotType;

    /*
     * <p>The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has a value in the
     * case of a cross-account or cross-Region copy.</p>
     */
    private String sourceDBSnapshotIdentifier;

    /*
     * <p>The Amazon Web Services Region that the DB snapshot was created in or copied from.</p>
     */
    private String sourceRegion;

    /*
     * <p>Specifies the status of this DB snapshot.</p>
     */
    private String status;

    /*
     * <p>Specifies the storage throughput for the DB snapshot.</p>
     */
    private Integer storageThroughput;

    /*
     * <p>Specifies the storage type associated with DB snapshot.</p>
     */
    private String storageType;

    /*
     * Property tagList
     */
    private List<TagAutoGenerated47> tagList;

    /*
     * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
     */
    private String tdeCredentialArn;

    /*
     * <p>The time zone of the DB snapshot. In most cases, the <code>Timezone</code> element is empty.
     * <code>Timezone</code> content appears only for snapshots taken from Microsoft SQL Server DB instances that were
     * created with a time zone specified.</p>
     */
    private String timezone;

    /*
     * <p>Provides the VPC ID associated with the DB snapshot.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of AwsRdsDBSnapshotProperties class.
     */
    public AwsRdsDBSnapshotProperties() {
    }

    /**
     * Get the allocatedStorage property: &lt;p&gt;Specifies the allocated storage size in gibibytes (GiB).&lt;/p&gt;.
     * 
     * @return the allocatedStorage value.
     */
    public Integer allocatedStorage() {
        return this.allocatedStorage;
    }

    /**
     * Set the allocatedStorage property: &lt;p&gt;Specifies the allocated storage size in gibibytes (GiB).&lt;/p&gt;.
     * 
     * @param allocatedStorage the allocatedStorage value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withAllocatedStorage(Integer allocatedStorage) {
        this.allocatedStorage = allocatedStorage;
        return this;
    }

    /**
     * Get the availabilityZone property: &lt;p&gt;Specifies the name of the Availability Zone the DB instance was
     * located in at the time of the DB snapshot.&lt;/p&gt;.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: &lt;p&gt;Specifies the name of the Availability Zone the DB instance was
     * located in at the time of the DB snapshot.&lt;/p&gt;.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the dbInstanceIdentifier property: &lt;p&gt;Specifies the DB instance identifier of the DB instance this DB
     * snapshot was created from.&lt;/p&gt;.
     * 
     * @return the dbInstanceIdentifier value.
     */
    public String dbInstanceIdentifier() {
        return this.dbInstanceIdentifier;
    }

    /**
     * Set the dbInstanceIdentifier property: &lt;p&gt;Specifies the DB instance identifier of the DB instance this DB
     * snapshot was created from.&lt;/p&gt;.
     * 
     * @param dbInstanceIdentifier the dbInstanceIdentifier value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withDbInstanceIdentifier(String dbInstanceIdentifier) {
        this.dbInstanceIdentifier = dbInstanceIdentifier;
        return this;
    }

    /**
     * Get the dbSnapshotArn property: &lt;p&gt;The Amazon Resource Name (ARN) for the DB snapshot.&lt;/p&gt;.
     * 
     * @return the dbSnapshotArn value.
     */
    public String dbSnapshotArn() {
        return this.dbSnapshotArn;
    }

    /**
     * Set the dbSnapshotArn property: &lt;p&gt;The Amazon Resource Name (ARN) for the DB snapshot.&lt;/p&gt;.
     * 
     * @param dbSnapshotArn the dbSnapshotArn value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withDbSnapshotArn(String dbSnapshotArn) {
        this.dbSnapshotArn = dbSnapshotArn;
        return this;
    }

    /**
     * Get the dbSnapshotIdentifier property: &lt;p&gt;Specifies the identifier for the DB snapshot.&lt;/p&gt;.
     * 
     * @return the dbSnapshotIdentifier value.
     */
    public String dbSnapshotIdentifier() {
        return this.dbSnapshotIdentifier;
    }

    /**
     * Set the dbSnapshotIdentifier property: &lt;p&gt;Specifies the identifier for the DB snapshot.&lt;/p&gt;.
     * 
     * @param dbSnapshotIdentifier the dbSnapshotIdentifier value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withDbSnapshotIdentifier(String dbSnapshotIdentifier) {
        this.dbSnapshotIdentifier = dbSnapshotIdentifier;
        return this;
    }

    /**
     * Get the dbSystemId property: &lt;p&gt;The Oracle system identifier (SID), which is the name of the Oracle
     * database instance that manages your database files. The Oracle SID is also the name of your CDB.&lt;/p&gt;.
     * 
     * @return the dbSystemId value.
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }

    /**
     * Set the dbSystemId property: &lt;p&gt;The Oracle system identifier (SID), which is the name of the Oracle
     * database instance that manages your database files. The Oracle SID is also the name of your CDB.&lt;/p&gt;.
     * 
     * @param dbSystemId the dbSystemId value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withDbSystemId(String dbSystemId) {
        this.dbSystemId = dbSystemId;
        return this;
    }

    /**
     * Get the dbiResourceId property: &lt;p&gt;The identifier for the source DB instance, which can't be changed and
     * which is unique to an Amazon Web Services Region.&lt;/p&gt;.
     * 
     * @return the dbiResourceId value.
     */
    public String dbiResourceId() {
        return this.dbiResourceId;
    }

    /**
     * Set the dbiResourceId property: &lt;p&gt;The identifier for the source DB instance, which can't be changed and
     * which is unique to an Amazon Web Services Region.&lt;/p&gt;.
     * 
     * @param dbiResourceId the dbiResourceId value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withDbiResourceId(String dbiResourceId) {
        this.dbiResourceId = dbiResourceId;
        return this;
    }

    /**
     * Get the dedicatedLogVolume property: &lt;p&gt;Indicates whether the DB instance has a dedicated log volume (DLV)
     * enabled.&lt;/p&gt;.
     * 
     * @return the dedicatedLogVolume value.
     */
    public Boolean dedicatedLogVolume() {
        return this.dedicatedLogVolume;
    }

    /**
     * Set the dedicatedLogVolume property: &lt;p&gt;Indicates whether the DB instance has a dedicated log volume (DLV)
     * enabled.&lt;/p&gt;.
     * 
     * @param dedicatedLogVolume the dedicatedLogVolume value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withDedicatedLogVolume(Boolean dedicatedLogVolume) {
        this.dedicatedLogVolume = dedicatedLogVolume;
        return this;
    }

    /**
     * Get the encrypted property: &lt;p&gt;Indicates whether the DB snapshot is encrypted.&lt;/p&gt;.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: &lt;p&gt;Indicates whether the DB snapshot is encrypted.&lt;/p&gt;.
     * 
     * @param encrypted the encrypted value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the engine property: &lt;p&gt;Specifies the name of the database engine.&lt;/p&gt;.
     * 
     * @return the engine value.
     */
    public String engine() {
        return this.engine;
    }

    /**
     * Set the engine property: &lt;p&gt;Specifies the name of the database engine.&lt;/p&gt;.
     * 
     * @param engine the engine value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withEngine(String engine) {
        this.engine = engine;
        return this;
    }

    /**
     * Get the engineVersion property: &lt;p&gt;Specifies the version of the database engine.&lt;/p&gt;.
     * 
     * @return the engineVersion value.
     */
    public String engineVersion() {
        return this.engineVersion;
    }

    /**
     * Set the engineVersion property: &lt;p&gt;Specifies the version of the database engine.&lt;/p&gt;.
     * 
     * @param engineVersion the engineVersion value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }

    /**
     * Get the iamDatabaseAuthenticationEnabled property: &lt;p&gt;Indicates whether mapping of Amazon Web Services
     * Identity and Access Management (IAM) accounts to database accounts is enabled.&lt;/p&gt;.
     * 
     * @return the iamDatabaseAuthenticationEnabled value.
     */
    public Boolean iamDatabaseAuthenticationEnabled() {
        return this.iamDatabaseAuthenticationEnabled;
    }

    /**
     * Set the iamDatabaseAuthenticationEnabled property: &lt;p&gt;Indicates whether mapping of Amazon Web Services
     * Identity and Access Management (IAM) accounts to database accounts is enabled.&lt;/p&gt;.
     * 
     * @param iamDatabaseAuthenticationEnabled the iamDatabaseAuthenticationEnabled value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withIamDatabaseAuthenticationEnabled(Boolean iamDatabaseAuthenticationEnabled) {
        this.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled;
        return this;
    }

    /**
     * Get the instanceCreateTime property: &lt;p&gt;Specifies the time in Coordinated Universal Time (UTC) when the DB
     * instance, from which the snapshot was taken, was created.&lt;/p&gt;.
     * 
     * @return the instanceCreateTime value.
     */
    public OffsetDateTime instanceCreateTime() {
        return this.instanceCreateTime;
    }

    /**
     * Set the instanceCreateTime property: &lt;p&gt;Specifies the time in Coordinated Universal Time (UTC) when the DB
     * instance, from which the snapshot was taken, was created.&lt;/p&gt;.
     * 
     * @param instanceCreateTime the instanceCreateTime value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withInstanceCreateTime(OffsetDateTime instanceCreateTime) {
        this.instanceCreateTime = instanceCreateTime;
        return this;
    }

    /**
     * Get the iops property: &lt;p&gt;Specifies the Provisioned IOPS (I/O operations per second) value of the DB
     * instance at the time of the snapshot.&lt;/p&gt;.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: &lt;p&gt;Specifies the Provisioned IOPS (I/O operations per second) value of the DB
     * instance at the time of the snapshot.&lt;/p&gt;.
     * 
     * @param iops the iops value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the kmsKeyId property: &lt;p&gt;If &lt;code&gt;Encrypted&lt;/code&gt; is true, the Amazon Web Services KMS
     * key identifier for the encrypted DB snapshot.&lt;/p&gt; &lt;p&gt;The Amazon Web Services KMS key identifier is
     * the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt;.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: &lt;p&gt;If &lt;code&gt;Encrypted&lt;/code&gt; is true, the Amazon Web Services KMS
     * key identifier for the encrypted DB snapshot.&lt;/p&gt; &lt;p&gt;The Amazon Web Services KMS key identifier is
     * the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt;.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the licenseModel property: &lt;p&gt;License model information for the restored DB instance.&lt;/p&gt;.
     * 
     * @return the licenseModel value.
     */
    public String licenseModel() {
        return this.licenseModel;
    }

    /**
     * Set the licenseModel property: &lt;p&gt;License model information for the restored DB instance.&lt;/p&gt;.
     * 
     * @param licenseModel the licenseModel value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withLicenseModel(String licenseModel) {
        this.licenseModel = licenseModel;
        return this;
    }

    /**
     * Get the masterUsername property: &lt;p&gt;Provides the master username for the DB snapshot.&lt;/p&gt;.
     * 
     * @return the masterUsername value.
     */
    public String masterUsername() {
        return this.masterUsername;
    }

    /**
     * Set the masterUsername property: &lt;p&gt;Provides the master username for the DB snapshot.&lt;/p&gt;.
     * 
     * @param masterUsername the masterUsername value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withMasterUsername(String masterUsername) {
        this.masterUsername = masterUsername;
        return this;
    }

    /**
     * Get the multiTenant property: &lt;p&gt;Indicates whether the snapshot is of a DB instance using the multi-tenant
     * configuration (TRUE) or the single-tenant configuration (FALSE).&lt;/p&gt;.
     * 
     * @return the multiTenant value.
     */
    public Boolean multiTenant() {
        return this.multiTenant;
    }

    /**
     * Set the multiTenant property: &lt;p&gt;Indicates whether the snapshot is of a DB instance using the multi-tenant
     * configuration (TRUE) or the single-tenant configuration (FALSE).&lt;/p&gt;.
     * 
     * @param multiTenant the multiTenant value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withMultiTenant(Boolean multiTenant) {
        this.multiTenant = multiTenant;
        return this;
    }

    /**
     * Get the optionGroupName property: &lt;p&gt;Provides the option group name for the DB snapshot.&lt;/p&gt;.
     * 
     * @return the optionGroupName value.
     */
    public String optionGroupName() {
        return this.optionGroupName;
    }

    /**
     * Set the optionGroupName property: &lt;p&gt;Provides the option group name for the DB snapshot.&lt;/p&gt;.
     * 
     * @param optionGroupName the optionGroupName value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withOptionGroupName(String optionGroupName) {
        this.optionGroupName = optionGroupName;
        return this;
    }

    /**
     * Get the originalSnapshotCreateTime property: &lt;p&gt;Specifies the time of the CreateDBSnapshot operation in
     * Coordinated Universal Time (UTC). Doesn't change when the snapshot is copied.&lt;/p&gt;.
     * 
     * @return the originalSnapshotCreateTime value.
     */
    public OffsetDateTime originalSnapshotCreateTime() {
        return this.originalSnapshotCreateTime;
    }

    /**
     * Set the originalSnapshotCreateTime property: &lt;p&gt;Specifies the time of the CreateDBSnapshot operation in
     * Coordinated Universal Time (UTC). Doesn't change when the snapshot is copied.&lt;/p&gt;.
     * 
     * @param originalSnapshotCreateTime the originalSnapshotCreateTime value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withOriginalSnapshotCreateTime(OffsetDateTime originalSnapshotCreateTime) {
        this.originalSnapshotCreateTime = originalSnapshotCreateTime;
        return this;
    }

    /**
     * Get the percentProgress property: &lt;p&gt;The percentage of the estimated data that has been
     * transferred.&lt;/p&gt;.
     * 
     * @return the percentProgress value.
     */
    public Integer percentProgress() {
        return this.percentProgress;
    }

    /**
     * Set the percentProgress property: &lt;p&gt;The percentage of the estimated data that has been
     * transferred.&lt;/p&gt;.
     * 
     * @param percentProgress the percentProgress value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withPercentProgress(Integer percentProgress) {
        this.percentProgress = percentProgress;
        return this;
    }

    /**
     * Get the port property: &lt;p&gt;Specifies the port that the database engine was listening on at the time of the
     * snapshot.&lt;/p&gt;.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: &lt;p&gt;Specifies the port that the database engine was listening on at the time of the
     * snapshot.&lt;/p&gt;.
     * 
     * @param port the port value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the processorFeatures property: &lt;p&gt;The number of CPU cores and the number of threads per core for the
     * DB instance class of the DB instance when the DB snapshot was created.&lt;/p&gt;.
     * 
     * @return the processorFeatures value.
     */
    public List<ProcessorFeatureAutoGenerated> processorFeatures() {
        return this.processorFeatures;
    }

    /**
     * Set the processorFeatures property: &lt;p&gt;The number of CPU cores and the number of threads per core for the
     * DB instance class of the DB instance when the DB snapshot was created.&lt;/p&gt;.
     * 
     * @param processorFeatures the processorFeatures value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withProcessorFeatures(List<ProcessorFeatureAutoGenerated> processorFeatures) {
        this.processorFeatures = processorFeatures;
        return this;
    }

    /**
     * Get the snapshotCreateTime property: &lt;p&gt;Specifies when the snapshot was taken in Coordinated Universal Time
     * (UTC). Changes for the copy when the snapshot is copied.&lt;/p&gt;.
     * 
     * @return the snapshotCreateTime value.
     */
    public OffsetDateTime snapshotCreateTime() {
        return this.snapshotCreateTime;
    }

    /**
     * Set the snapshotCreateTime property: &lt;p&gt;Specifies when the snapshot was taken in Coordinated Universal Time
     * (UTC). Changes for the copy when the snapshot is copied.&lt;/p&gt;.
     * 
     * @param snapshotCreateTime the snapshotCreateTime value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withSnapshotCreateTime(OffsetDateTime snapshotCreateTime) {
        this.snapshotCreateTime = snapshotCreateTime;
        return this;
    }

    /**
     * Get the snapshotDatabaseTime property: &lt;p&gt;The timestamp of the most recent transaction applied to the
     * database that you're backing up. Thus, if you restore a snapshot, SnapshotDatabaseTime is the most recent
     * transaction in the restored DB instance. In contrast, originalSnapshotCreateTime specifies the system time that
     * the snapshot completed.&lt;/p&gt; &lt;p&gt;If you back up a read replica, you can determine the replica lag by
     * comparing SnapshotDatabaseTime with originalSnapshotCreateTime. For example, if originalSnapshotCreateTime is two
     * hours later than SnapshotDatabaseTime, then the replica lag is two hours.&lt;/p&gt;.
     * 
     * @return the snapshotDatabaseTime value.
     */
    public OffsetDateTime snapshotDatabaseTime() {
        return this.snapshotDatabaseTime;
    }

    /**
     * Set the snapshotDatabaseTime property: &lt;p&gt;The timestamp of the most recent transaction applied to the
     * database that you're backing up. Thus, if you restore a snapshot, SnapshotDatabaseTime is the most recent
     * transaction in the restored DB instance. In contrast, originalSnapshotCreateTime specifies the system time that
     * the snapshot completed.&lt;/p&gt; &lt;p&gt;If you back up a read replica, you can determine the replica lag by
     * comparing SnapshotDatabaseTime with originalSnapshotCreateTime. For example, if originalSnapshotCreateTime is two
     * hours later than SnapshotDatabaseTime, then the replica lag is two hours.&lt;/p&gt;.
     * 
     * @param snapshotDatabaseTime the snapshotDatabaseTime value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withSnapshotDatabaseTime(OffsetDateTime snapshotDatabaseTime) {
        this.snapshotDatabaseTime = snapshotDatabaseTime;
        return this;
    }

    /**
     * Get the snapshotTarget property: &lt;p&gt;Specifies where manual snapshots are stored: Amazon Web Services
     * Outposts or the Amazon Web Services Region.&lt;/p&gt;.
     * 
     * @return the snapshotTarget value.
     */
    public String snapshotTarget() {
        return this.snapshotTarget;
    }

    /**
     * Set the snapshotTarget property: &lt;p&gt;Specifies where manual snapshots are stored: Amazon Web Services
     * Outposts or the Amazon Web Services Region.&lt;/p&gt;.
     * 
     * @param snapshotTarget the snapshotTarget value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withSnapshotTarget(String snapshotTarget) {
        this.snapshotTarget = snapshotTarget;
        return this;
    }

    /**
     * Get the snapshotType property: &lt;p&gt;Provides the type of the DB snapshot.&lt;/p&gt;.
     * 
     * @return the snapshotType value.
     */
    public String snapshotType() {
        return this.snapshotType;
    }

    /**
     * Set the snapshotType property: &lt;p&gt;Provides the type of the DB snapshot.&lt;/p&gt;.
     * 
     * @param snapshotType the snapshotType value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withSnapshotType(String snapshotType) {
        this.snapshotType = snapshotType;
        return this;
    }

    /**
     * Get the sourceDBSnapshotIdentifier property: &lt;p&gt;The DB snapshot Amazon Resource Name (ARN) that the DB
     * snapshot was copied from. It only has a value in the case of a cross-account or cross-Region copy.&lt;/p&gt;.
     * 
     * @return the sourceDBSnapshotIdentifier value.
     */
    public String sourceDBSnapshotIdentifier() {
        return this.sourceDBSnapshotIdentifier;
    }

    /**
     * Set the sourceDBSnapshotIdentifier property: &lt;p&gt;The DB snapshot Amazon Resource Name (ARN) that the DB
     * snapshot was copied from. It only has a value in the case of a cross-account or cross-Region copy.&lt;/p&gt;.
     * 
     * @param sourceDBSnapshotIdentifier the sourceDBSnapshotIdentifier value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withSourceDBSnapshotIdentifier(String sourceDBSnapshotIdentifier) {
        this.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier;
        return this;
    }

    /**
     * Get the sourceRegion property: &lt;p&gt;The Amazon Web Services Region that the DB snapshot was created in or
     * copied from.&lt;/p&gt;.
     * 
     * @return the sourceRegion value.
     */
    public String sourceRegion() {
        return this.sourceRegion;
    }

    /**
     * Set the sourceRegion property: &lt;p&gt;The Amazon Web Services Region that the DB snapshot was created in or
     * copied from.&lt;/p&gt;.
     * 
     * @param sourceRegion the sourceRegion value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withSourceRegion(String sourceRegion) {
        this.sourceRegion = sourceRegion;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;Specifies the status of this DB snapshot.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;Specifies the status of this DB snapshot.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the storageThroughput property: &lt;p&gt;Specifies the storage throughput for the DB snapshot.&lt;/p&gt;.
     * 
     * @return the storageThroughput value.
     */
    public Integer storageThroughput() {
        return this.storageThroughput;
    }

    /**
     * Set the storageThroughput property: &lt;p&gt;Specifies the storage throughput for the DB snapshot.&lt;/p&gt;.
     * 
     * @param storageThroughput the storageThroughput value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withStorageThroughput(Integer storageThroughput) {
        this.storageThroughput = storageThroughput;
        return this;
    }

    /**
     * Get the storageType property: &lt;p&gt;Specifies the storage type associated with DB snapshot.&lt;/p&gt;.
     * 
     * @return the storageType value.
     */
    public String storageType() {
        return this.storageType;
    }

    /**
     * Set the storageType property: &lt;p&gt;Specifies the storage type associated with DB snapshot.&lt;/p&gt;.
     * 
     * @param storageType the storageType value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withStorageType(String storageType) {
        this.storageType = storageType;
        return this;
    }

    /**
     * Get the tagList property: Property tagList.
     * 
     * @return the tagList value.
     */
    public List<TagAutoGenerated47> tagList() {
        return this.tagList;
    }

    /**
     * Set the tagList property: Property tagList.
     * 
     * @param tagList the tagList value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withTagList(List<TagAutoGenerated47> tagList) {
        this.tagList = tagList;
        return this;
    }

    /**
     * Get the tdeCredentialArn property: &lt;p&gt;The ARN from the key store with which to associate the instance for
     * TDE encryption.&lt;/p&gt;.
     * 
     * @return the tdeCredentialArn value.
     */
    public String tdeCredentialArn() {
        return this.tdeCredentialArn;
    }

    /**
     * Set the tdeCredentialArn property: &lt;p&gt;The ARN from the key store with which to associate the instance for
     * TDE encryption.&lt;/p&gt;.
     * 
     * @param tdeCredentialArn the tdeCredentialArn value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withTdeCredentialArn(String tdeCredentialArn) {
        this.tdeCredentialArn = tdeCredentialArn;
        return this;
    }

    /**
     * Get the timezone property: &lt;p&gt;The time zone of the DB snapshot. In most cases, the
     * &lt;code&gt;Timezone&lt;/code&gt; element is empty. &lt;code&gt;Timezone&lt;/code&gt; content appears only for
     * snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified.&lt;/p&gt;.
     * 
     * @return the timezone value.
     */
    public String timezone() {
        return this.timezone;
    }

    /**
     * Set the timezone property: &lt;p&gt;The time zone of the DB snapshot. In most cases, the
     * &lt;code&gt;Timezone&lt;/code&gt; element is empty. &lt;code&gt;Timezone&lt;/code&gt; content appears only for
     * snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified.&lt;/p&gt;.
     * 
     * @param timezone the timezone value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;Provides the VPC ID associated with the DB snapshot.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;Provides the VPC ID associated with the DB snapshot.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsRdsDBSnapshotProperties object itself.
     */
    public AwsRdsDBSnapshotProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (processorFeatures() != null) {
            processorFeatures().forEach(e -> e.validate());
        }
        if (tagList() != null) {
            tagList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("allocatedStorage", this.allocatedStorage);
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("dbInstanceIdentifier", this.dbInstanceIdentifier);
        jsonWriter.writeStringField("dbSnapshotArn", this.dbSnapshotArn);
        jsonWriter.writeStringField("dbSnapshotIdentifier", this.dbSnapshotIdentifier);
        jsonWriter.writeStringField("dbSystemId", this.dbSystemId);
        jsonWriter.writeStringField("dbiResourceId", this.dbiResourceId);
        jsonWriter.writeBooleanField("dedicatedLogVolume", this.dedicatedLogVolume);
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeStringField("engine", this.engine);
        jsonWriter.writeStringField("engineVersion", this.engineVersion);
        jsonWriter.writeBooleanField("iamDatabaseAuthenticationEnabled", this.iamDatabaseAuthenticationEnabled);
        jsonWriter.writeStringField("instanceCreateTime",
            this.instanceCreateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.instanceCreateTime));
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("licenseModel", this.licenseModel);
        jsonWriter.writeStringField("masterUsername", this.masterUsername);
        jsonWriter.writeBooleanField("multiTenant", this.multiTenant);
        jsonWriter.writeStringField("optionGroupName", this.optionGroupName);
        jsonWriter.writeStringField("originalSnapshotCreateTime",
            this.originalSnapshotCreateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.originalSnapshotCreateTime));
        jsonWriter.writeNumberField("percentProgress", this.percentProgress);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeArrayField("processorFeatures", this.processorFeatures,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("snapshotCreateTime",
            this.snapshotCreateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.snapshotCreateTime));
        jsonWriter.writeStringField("snapshotDatabaseTime",
            this.snapshotDatabaseTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.snapshotDatabaseTime));
        jsonWriter.writeStringField("snapshotTarget", this.snapshotTarget);
        jsonWriter.writeStringField("snapshotType", this.snapshotType);
        jsonWriter.writeStringField("sourceDBSnapshotIdentifier", this.sourceDBSnapshotIdentifier);
        jsonWriter.writeStringField("sourceRegion", this.sourceRegion);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeNumberField("storageThroughput", this.storageThroughput);
        jsonWriter.writeStringField("storageType", this.storageType);
        jsonWriter.writeArrayField("tagList", this.tagList, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("tdeCredentialArn", this.tdeCredentialArn);
        jsonWriter.writeStringField("timezone", this.timezone);
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRdsDBSnapshotProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRdsDBSnapshotProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRdsDBSnapshotProperties.
     */
    public static AwsRdsDBSnapshotProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRdsDBSnapshotProperties deserializedAwsRdsDBSnapshotProperties = new AwsRdsDBSnapshotProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocatedStorage".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.allocatedStorage = reader.getNullable(JsonReader::getInt);
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.availabilityZone = reader.getString();
                } else if ("dbInstanceIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.dbInstanceIdentifier = reader.getString();
                } else if ("dbSnapshotArn".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.dbSnapshotArn = reader.getString();
                } else if ("dbSnapshotIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.dbSnapshotIdentifier = reader.getString();
                } else if ("dbSystemId".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.dbSystemId = reader.getString();
                } else if ("dbiResourceId".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.dbiResourceId = reader.getString();
                } else if ("dedicatedLogVolume".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.dedicatedLogVolume
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("encrypted".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("engine".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.engine = reader.getString();
                } else if ("engineVersion".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.engineVersion = reader.getString();
                } else if ("iamDatabaseAuthenticationEnabled".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.iamDatabaseAuthenticationEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("instanceCreateTime".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.instanceCreateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("iops".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.iops = reader.getNullable(JsonReader::getInt);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.kmsKeyId = reader.getString();
                } else if ("licenseModel".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.licenseModel = reader.getString();
                } else if ("masterUsername".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.masterUsername = reader.getString();
                } else if ("multiTenant".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.multiTenant = reader.getNullable(JsonReader::getBoolean);
                } else if ("optionGroupName".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.optionGroupName = reader.getString();
                } else if ("originalSnapshotCreateTime".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.originalSnapshotCreateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("percentProgress".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.percentProgress = reader.getNullable(JsonReader::getInt);
                } else if ("port".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.port = reader.getNullable(JsonReader::getInt);
                } else if ("processorFeatures".equals(fieldName)) {
                    List<ProcessorFeatureAutoGenerated> processorFeatures
                        = reader.readArray(reader1 -> ProcessorFeatureAutoGenerated.fromJson(reader1));
                    deserializedAwsRdsDBSnapshotProperties.processorFeatures = processorFeatures;
                } else if ("snapshotCreateTime".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.snapshotCreateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("snapshotDatabaseTime".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.snapshotDatabaseTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("snapshotTarget".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.snapshotTarget = reader.getString();
                } else if ("snapshotType".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.snapshotType = reader.getString();
                } else if ("sourceDBSnapshotIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.sourceDBSnapshotIdentifier = reader.getString();
                } else if ("sourceRegion".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.sourceRegion = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.status = reader.getString();
                } else if ("storageThroughput".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.storageThroughput = reader.getNullable(JsonReader::getInt);
                } else if ("storageType".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.storageType = reader.getString();
                } else if ("tagList".equals(fieldName)) {
                    List<TagAutoGenerated47> tagList
                        = reader.readArray(reader1 -> TagAutoGenerated47.fromJson(reader1));
                    deserializedAwsRdsDBSnapshotProperties.tagList = tagList;
                } else if ("tdeCredentialArn".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.tdeCredentialArn = reader.getString();
                } else if ("timezone".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.timezone = reader.getString();
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsRdsDBSnapshotProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRdsDBSnapshotProperties;
        });
    }
}
