// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SubnetMapping.
 */
@Fluent
public final class SubnetMapping implements JsonSerializable<SubnetMapping> {
    /*
     * [Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.
     */
    private String allocationId;

    /*
     * [Network Load Balancers] The IPv6 address.
     */
    private String iPv6Address;

    /*
     * [Network Load Balancers] The private IPv4 address for an internal load balancer.
     */
    private String privateIPv4Address;

    /*
     * The ID of the subnet.
     */
    private String subnetId;

    /**
     * Creates an instance of SubnetMapping class.
     */
    public SubnetMapping() {
    }

    /**
     * Get the allocationId property: [Network Load Balancers] The allocation ID of the Elastic IP address for an
     * internet-facing load balancer.
     * 
     * @return the allocationId value.
     */
    public String allocationId() {
        return this.allocationId;
    }

    /**
     * Set the allocationId property: [Network Load Balancers] The allocation ID of the Elastic IP address for an
     * internet-facing load balancer.
     * 
     * @param allocationId the allocationId value to set.
     * @return the SubnetMapping object itself.
     */
    public SubnetMapping withAllocationId(String allocationId) {
        this.allocationId = allocationId;
        return this;
    }

    /**
     * Get the iPv6Address property: [Network Load Balancers] The IPv6 address.
     * 
     * @return the iPv6Address value.
     */
    public String iPv6Address() {
        return this.iPv6Address;
    }

    /**
     * Set the iPv6Address property: [Network Load Balancers] The IPv6 address.
     * 
     * @param iPv6Address the iPv6Address value to set.
     * @return the SubnetMapping object itself.
     */
    public SubnetMapping withIPv6Address(String iPv6Address) {
        this.iPv6Address = iPv6Address;
        return this;
    }

    /**
     * Get the privateIPv4Address property: [Network Load Balancers] The private IPv4 address for an internal load
     * balancer.
     * 
     * @return the privateIPv4Address value.
     */
    public String privateIPv4Address() {
        return this.privateIPv4Address;
    }

    /**
     * Set the privateIPv4Address property: [Network Load Balancers] The private IPv4 address for an internal load
     * balancer.
     * 
     * @param privateIPv4Address the privateIPv4Address value to set.
     * @return the SubnetMapping object itself.
     */
    public SubnetMapping withPrivateIPv4Address(String privateIPv4Address) {
        this.privateIPv4Address = privateIPv4Address;
        return this;
    }

    /**
     * Get the subnetId property: The ID of the subnet.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The ID of the subnet.
     * 
     * @param subnetId the subnetId value to set.
     * @return the SubnetMapping object itself.
     */
    public SubnetMapping withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("allocationId", this.allocationId);
        jsonWriter.writeStringField("iPv6Address", this.iPv6Address);
        jsonWriter.writeStringField("privateIPv4Address", this.privateIPv4Address);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubnetMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubnetMapping if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubnetMapping.
     */
    public static SubnetMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubnetMapping deserializedSubnetMapping = new SubnetMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocationId".equals(fieldName)) {
                    deserializedSubnetMapping.allocationId = reader.getString();
                } else if ("iPv6Address".equals(fieldName)) {
                    deserializedSubnetMapping.iPv6Address = reader.getString();
                } else if ("privateIPv4Address".equals(fieldName)) {
                    deserializedSubnetMapping.privateIPv4Address = reader.getString();
                } else if ("subnetId".equals(fieldName)) {
                    deserializedSubnetMapping.subnetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnetMapping;
        });
    }
}
