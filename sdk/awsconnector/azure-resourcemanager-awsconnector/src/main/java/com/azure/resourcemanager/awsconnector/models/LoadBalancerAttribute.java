// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LoadBalancerAttribute.
 */
@Fluent
public final class LoadBalancerAttribute implements JsonSerializable<LoadBalancerAttribute> {
    /*
     * The name of the attribute. The following attributes are supported by all load balancers: +
     * ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or
     * ``false``. The default is ``false``. + ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load
     * balancing is enabled. The possible values are ``true`` and ``false``. The default for Network Load Balancers and
     * Gateway Load Balancers is ``false``. The default for Application Load Balancers is ``true``, and cannot be
     * changed. The following attributes are supported by both Application Load Balancers and Network Load Balancers: +
     * ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false``. The
     * default is ``false``. + ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute
     * is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a
     * bucket policy that grants Elastic Load Balancing permissions to write to the bucket. + ``access_logs.s3.prefix``
     * - The prefix for the location in the S3 bucket for the access logs. + ``ipv6.deny_all_igw_traffic`` - Blocks
     * internet gateway (IGW) access to the load balancer. It is set to ``false`` for internet-facing load balancers and
     * ``true`` for internal load balancers, preventing unintended access to your internal load balancer through an
     * internet gateway. The following attributes are supported by only Application Load Balancers: +
     * ``idle_timeout.timeout_seconds`` - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The
     * default is 60 seconds. + ``client_keep_alive.seconds`` - The client keep alive value, in seconds. The valid range
     * is 60-604800 seconds. The default is 3600 seconds. + ``connection_logs.s3.enabled`` - Indicates whether
     * connection logs are enabled. The value is ``true`` or ``false``. The default is ``false``. +
     * ``connection_logs.s3.bucket`` - The name of the S3 bucket for the connection logs. This attribute is required if
     * connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket
     * policy that grants Elastic Load Balancing permissions to write to the bucket. + ``connection_logs.s3.prefix`` -
     * The prefix for the location in the S3 bucket for the connection logs. + ``routing.http.desync_mitigation_mode`` -
     * Determines how the load balancer handles requests that might pose a security risk to your application. The
     * possible values are ``monitor``, ``defensive``, and ``strictest``. The default is ``defensive``. +
     * ``routing.http.drop_invalid_header_fields.enabled`` - Indicates whether HTTP headers with invalid header fields
     * are removed by the load balancer (``true``) or routed to targets (``false``). The default is ``false``. +
     * ``routing.http.preserve_host_header.enabled`` - Indicates whether the Application Load Balancer should preserve
     * the ``Host`` header in the HTTP request and send it to the target without any change. The possible values are
     * ``true`` and ``false``. The default is ``false``. + ``routing.http.x_amzn_tls_version_and_cipher_suite.enabled``
     * - Indicates whether the two headers (``x-amzn-tls-version`` and ``x-amzn-tls-cipher-suite``), which contain
     * information about the negotiated TLS version and cipher suite, are added to the client request before sending it
     * to the target. The ``x-amzn-tls-version`` header has information about the TLS protocol version negotiated with
     * the client, and the ``x-amzn-tls-cipher-suite`` header has information about the cipher suite negotiated with the
     * client. Both headers are in OpenSSL format. The possible values for the attribute are ``true`` and ``false``. The
     * default is ``false``. + ``routing.http.xff_client_port.enabled`` - Indicates whether the ``X-Forwarded-For``
     * header should preserve the source port that the client used to connect to the load balancer. The possible values
     * are ``true`` and ``false``. The default is ``false``. + ``routing.http.xff_header_processing.mode`` - Enables you
     * to modify, preserve, or remove the ``X-Forwarded-For`` header in the HTTP request before the Application Load
     * Balancer sends the request to the target. The possible values are ``append``, ``preserve``, and ``remove``. The
     * default is ``append``. + If the value is ``append``, the Application Load Balancer adds the client IP address (of
     * the last hop) to the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. + If the value
     * is ``preserve`` the Application Load Balancer preserves the ``X-Forwarded-For`` header in the HTTP request, and
     * sends it to targets without any change. + If the value is ``remove``, the Application Load Balancer removes the
     * ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. + ``routing.http2.enabled`` -
     * Indicates whether HTTP/2 is enabled. The possible values are ``true`` and ``false``. The default is ``true``.
     * Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. +
     * ``waf.fail_open.enabled`` - Indicates whether to allow a WAF-enabled load balancer to route requests to targets
     * if it is unable to forward the request to AWS WAF. The possible values are ``true`` and ``false``. The default is
     * ``false``. The following attributes are supported by only Network Load Balancers: +
     * ``dns_record.client_routing_policy`` - Indicates how traffic is distributed among the load balancer Availability
     * Zones. The possible values are ``availability_zone_affinity`` with 100 percent zonal affinity,
     * ``partial_availability_zone_affinity`` with 85 percent zonal affinity, and ``any_availability_zone`` with 0
     * percent zonal affinity.
     */
    private String key;

    /*
     * The value of the attribute.
     */
    private String value;

    /**
     * Creates an instance of LoadBalancerAttribute class.
     */
    public LoadBalancerAttribute() {
    }

    /**
     * Get the key property: The name of the attribute. The following attributes are supported by all load balancers: +
     * ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or
     * ``false``. The default is ``false``. + ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load
     * balancing is enabled. The possible values are ``true`` and ``false``. The default for Network Load Balancers and
     * Gateway Load Balancers is ``false``. The default for Application Load Balancers is ``true``, and cannot be
     * changed. The following attributes are supported by both Application Load Balancers and Network Load Balancers: +
     * ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false``. The
     * default is ``false``. + ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute
     * is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a
     * bucket policy that grants Elastic Load Balancing permissions to write to the bucket. + ``access_logs.s3.prefix``
     * - The prefix for the location in the S3 bucket for the access logs. + ``ipv6.deny_all_igw_traffic`` - Blocks
     * internet gateway (IGW) access to the load balancer. It is set to ``false`` for internet-facing load balancers and
     * ``true`` for internal load balancers, preventing unintended access to your internal load balancer through an
     * internet gateway. The following attributes are supported by only Application Load Balancers: +
     * ``idle_timeout.timeout_seconds`` - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The
     * default is 60 seconds. + ``client_keep_alive.seconds`` - The client keep alive value, in seconds. The valid range
     * is 60-604800 seconds. The default is 3600 seconds. + ``connection_logs.s3.enabled`` - Indicates whether
     * connection logs are enabled. The value is ``true`` or ``false``. The default is ``false``. +
     * ``connection_logs.s3.bucket`` - The name of the S3 bucket for the connection logs. This attribute is required if
     * connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket
     * policy that grants Elastic Load Balancing permissions to write to the bucket. + ``connection_logs.s3.prefix`` -
     * The prefix for the location in the S3 bucket for the connection logs. + ``routing.http.desync_mitigation_mode`` -
     * Determines how the load balancer handles requests that might pose a security risk to your application. The
     * possible values are ``monitor``, ``defensive``, and ``strictest``. The default is ``defensive``. +
     * ``routing.http.drop_invalid_header_fields.enabled`` - Indicates whether HTTP headers with invalid header fields
     * are removed by the load balancer (``true``) or routed to targets (``false``). The default is ``false``. +
     * ``routing.http.preserve_host_header.enabled`` - Indicates whether the Application Load Balancer should preserve
     * the ``Host`` header in the HTTP request and send it to the target without any change. The possible values are
     * ``true`` and ``false``. The default is ``false``. + ``routing.http.x_amzn_tls_version_and_cipher_suite.enabled``
     * - Indicates whether the two headers (``x-amzn-tls-version`` and ``x-amzn-tls-cipher-suite``), which contain
     * information about the negotiated TLS version and cipher suite, are added to the client request before sending it
     * to the target. The ``x-amzn-tls-version`` header has information about the TLS protocol version negotiated with
     * the client, and the ``x-amzn-tls-cipher-suite`` header has information about the cipher suite negotiated with the
     * client. Both headers are in OpenSSL format. The possible values for the attribute are ``true`` and ``false``. The
     * default is ``false``. + ``routing.http.xff_client_port.enabled`` - Indicates whether the ``X-Forwarded-For``
     * header should preserve the source port that the client used to connect to the load balancer. The possible values
     * are ``true`` and ``false``. The default is ``false``. + ``routing.http.xff_header_processing.mode`` - Enables you
     * to modify, preserve, or remove the ``X-Forwarded-For`` header in the HTTP request before the Application Load
     * Balancer sends the request to the target. The possible values are ``append``, ``preserve``, and ``remove``. The
     * default is ``append``. + If the value is ``append``, the Application Load Balancer adds the client IP address (of
     * the last hop) to the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. + If the value
     * is ``preserve`` the Application Load Balancer preserves the ``X-Forwarded-For`` header in the HTTP request, and
     * sends it to targets without any change. + If the value is ``remove``, the Application Load Balancer removes the
     * ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. + ``routing.http2.enabled`` -
     * Indicates whether HTTP/2 is enabled. The possible values are ``true`` and ``false``. The default is ``true``.
     * Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. +
     * ``waf.fail_open.enabled`` - Indicates whether to allow a WAF-enabled load balancer to route requests to targets
     * if it is unable to forward the request to AWS WAF. The possible values are ``true`` and ``false``. The default is
     * ``false``. The following attributes are supported by only Network Load Balancers: +
     * ``dns_record.client_routing_policy`` - Indicates how traffic is distributed among the load balancer Availability
     * Zones. The possible values are ``availability_zone_affinity`` with 100 percent zonal affinity,
     * ``partial_availability_zone_affinity`` with 85 percent zonal affinity, and ``any_availability_zone`` with 0
     * percent zonal affinity.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The name of the attribute. The following attributes are supported by all load balancers: +
     * ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or
     * ``false``. The default is ``false``. + ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load
     * balancing is enabled. The possible values are ``true`` and ``false``. The default for Network Load Balancers and
     * Gateway Load Balancers is ``false``. The default for Application Load Balancers is ``true``, and cannot be
     * changed. The following attributes are supported by both Application Load Balancers and Network Load Balancers: +
     * ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false``. The
     * default is ``false``. + ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute
     * is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a
     * bucket policy that grants Elastic Load Balancing permissions to write to the bucket. + ``access_logs.s3.prefix``
     * - The prefix for the location in the S3 bucket for the access logs. + ``ipv6.deny_all_igw_traffic`` - Blocks
     * internet gateway (IGW) access to the load balancer. It is set to ``false`` for internet-facing load balancers and
     * ``true`` for internal load balancers, preventing unintended access to your internal load balancer through an
     * internet gateway. The following attributes are supported by only Application Load Balancers: +
     * ``idle_timeout.timeout_seconds`` - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The
     * default is 60 seconds. + ``client_keep_alive.seconds`` - The client keep alive value, in seconds. The valid range
     * is 60-604800 seconds. The default is 3600 seconds. + ``connection_logs.s3.enabled`` - Indicates whether
     * connection logs are enabled. The value is ``true`` or ``false``. The default is ``false``. +
     * ``connection_logs.s3.bucket`` - The name of the S3 bucket for the connection logs. This attribute is required if
     * connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket
     * policy that grants Elastic Load Balancing permissions to write to the bucket. + ``connection_logs.s3.prefix`` -
     * The prefix for the location in the S3 bucket for the connection logs. + ``routing.http.desync_mitigation_mode`` -
     * Determines how the load balancer handles requests that might pose a security risk to your application. The
     * possible values are ``monitor``, ``defensive``, and ``strictest``. The default is ``defensive``. +
     * ``routing.http.drop_invalid_header_fields.enabled`` - Indicates whether HTTP headers with invalid header fields
     * are removed by the load balancer (``true``) or routed to targets (``false``). The default is ``false``. +
     * ``routing.http.preserve_host_header.enabled`` - Indicates whether the Application Load Balancer should preserve
     * the ``Host`` header in the HTTP request and send it to the target without any change. The possible values are
     * ``true`` and ``false``. The default is ``false``. + ``routing.http.x_amzn_tls_version_and_cipher_suite.enabled``
     * - Indicates whether the two headers (``x-amzn-tls-version`` and ``x-amzn-tls-cipher-suite``), which contain
     * information about the negotiated TLS version and cipher suite, are added to the client request before sending it
     * to the target. The ``x-amzn-tls-version`` header has information about the TLS protocol version negotiated with
     * the client, and the ``x-amzn-tls-cipher-suite`` header has information about the cipher suite negotiated with the
     * client. Both headers are in OpenSSL format. The possible values for the attribute are ``true`` and ``false``. The
     * default is ``false``. + ``routing.http.xff_client_port.enabled`` - Indicates whether the ``X-Forwarded-For``
     * header should preserve the source port that the client used to connect to the load balancer. The possible values
     * are ``true`` and ``false``. The default is ``false``. + ``routing.http.xff_header_processing.mode`` - Enables you
     * to modify, preserve, or remove the ``X-Forwarded-For`` header in the HTTP request before the Application Load
     * Balancer sends the request to the target. The possible values are ``append``, ``preserve``, and ``remove``. The
     * default is ``append``. + If the value is ``append``, the Application Load Balancer adds the client IP address (of
     * the last hop) to the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. + If the value
     * is ``preserve`` the Application Load Balancer preserves the ``X-Forwarded-For`` header in the HTTP request, and
     * sends it to targets without any change. + If the value is ``remove``, the Application Load Balancer removes the
     * ``X-Forwarded-For`` header in the HTTP request before it sends it to targets. + ``routing.http2.enabled`` -
     * Indicates whether HTTP/2 is enabled. The possible values are ``true`` and ``false``. The default is ``true``.
     * Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens. +
     * ``waf.fail_open.enabled`` - Indicates whether to allow a WAF-enabled load balancer to route requests to targets
     * if it is unable to forward the request to AWS WAF. The possible values are ``true`` and ``false``. The default is
     * ``false``. The following attributes are supported by only Network Load Balancers: +
     * ``dns_record.client_routing_policy`` - Indicates how traffic is distributed among the load balancer Availability
     * Zones. The possible values are ``availability_zone_affinity`` with 100 percent zonal affinity,
     * ``partial_availability_zone_affinity`` with 85 percent zonal affinity, and ``any_availability_zone`` with 0
     * percent zonal affinity.
     * 
     * @param key the key value to set.
     * @return the LoadBalancerAttribute object itself.
     */
    public LoadBalancerAttribute withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the value property: The value of the attribute.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The value of the attribute.
     * 
     * @param value the value value to set.
     * @return the LoadBalancerAttribute object itself.
     */
    public LoadBalancerAttribute withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancerAttribute from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancerAttribute if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancerAttribute.
     */
    public static LoadBalancerAttribute fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancerAttribute deserializedLoadBalancerAttribute = new LoadBalancerAttribute();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedLoadBalancerAttribute.key = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedLoadBalancerAttribute.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancerAttribute;
        });
    }
}
