// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CidrRoutingConfig.
 */
@Fluent
public final class CidrRoutingConfig implements JsonSerializable<CidrRoutingConfig> {
    /*
     * <p>The CIDR collection ID.</p>
     */
    private String collectionId;

    /*
     * <p>The CIDR collection location name.</p>
     */
    private String locationName;

    /**
     * Creates an instance of CidrRoutingConfig class.
     */
    public CidrRoutingConfig() {
    }

    /**
     * Get the collectionId property: &lt;p&gt;The CIDR collection ID.&lt;/p&gt;.
     * 
     * @return the collectionId value.
     */
    public String collectionId() {
        return this.collectionId;
    }

    /**
     * Set the collectionId property: &lt;p&gt;The CIDR collection ID.&lt;/p&gt;.
     * 
     * @param collectionId the collectionId value to set.
     * @return the CidrRoutingConfig object itself.
     */
    public CidrRoutingConfig withCollectionId(String collectionId) {
        this.collectionId = collectionId;
        return this;
    }

    /**
     * Get the locationName property: &lt;p&gt;The CIDR collection location name.&lt;/p&gt;.
     * 
     * @return the locationName value.
     */
    public String locationName() {
        return this.locationName;
    }

    /**
     * Set the locationName property: &lt;p&gt;The CIDR collection location name.&lt;/p&gt;.
     * 
     * @param locationName the locationName value to set.
     * @return the CidrRoutingConfig object itself.
     */
    public CidrRoutingConfig withLocationName(String locationName) {
        this.locationName = locationName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("collectionId", this.collectionId);
        jsonWriter.writeStringField("locationName", this.locationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CidrRoutingConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CidrRoutingConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CidrRoutingConfig.
     */
    public static CidrRoutingConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CidrRoutingConfig deserializedCidrRoutingConfig = new CidrRoutingConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collectionId".equals(fieldName)) {
                    deserializedCidrRoutingConfig.collectionId = reader.getString();
                } else if ("locationName".equals(fieldName)) {
                    deserializedCidrRoutingConfig.locationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCidrRoutingConfig;
        });
    }
}
