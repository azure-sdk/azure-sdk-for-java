// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Hardware.
 */
@Fluent
public final class Hardware implements JsonSerializable<Hardware> {
    /*
     * CPU count of the Instance.
     */
    private Integer cpuCount;

    /*
     * Disks attached to the Instance.
     */
    private List<Disk> disks;

    /*
     * RAM Size of the Instance.
     */
    private Integer ramSizeInGb;

    /**
     * Creates an instance of Hardware class.
     */
    public Hardware() {
    }

    /**
     * Get the cpuCount property: CPU count of the Instance.
     * 
     * @return the cpuCount value.
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }

    /**
     * Set the cpuCount property: CPU count of the Instance.
     * 
     * @param cpuCount the cpuCount value to set.
     * @return the Hardware object itself.
     */
    public Hardware withCpuCount(Integer cpuCount) {
        this.cpuCount = cpuCount;
        return this;
    }

    /**
     * Get the disks property: Disks attached to the Instance.
     * 
     * @return the disks value.
     */
    public List<Disk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: Disks attached to the Instance.
     * 
     * @param disks the disks value to set.
     * @return the Hardware object itself.
     */
    public Hardware withDisks(List<Disk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the ramSizeInGb property: RAM Size of the Instance.
     * 
     * @return the ramSizeInGb value.
     */
    public Integer ramSizeInGb() {
        return this.ramSizeInGb;
    }

    /**
     * Set the ramSizeInGb property: RAM Size of the Instance.
     * 
     * @param ramSizeInGb the ramSizeInGb value to set.
     * @return the Hardware object itself.
     */
    public Hardware withRamSizeInGb(Integer ramSizeInGb) {
        this.ramSizeInGb = ramSizeInGb;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("cpuCount", this.cpuCount);
        jsonWriter.writeArrayField("disks", this.disks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("ramSizeInGb", this.ramSizeInGb);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Hardware from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Hardware if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Hardware.
     */
    public static Hardware fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Hardware deserializedHardware = new Hardware();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cpuCount".equals(fieldName)) {
                    deserializedHardware.cpuCount = reader.getNullable(JsonReader::getInt);
                } else if ("disks".equals(fieldName)) {
                    List<Disk> disks = reader.readArray(reader1 -> Disk.fromJson(reader1));
                    deserializedHardware.disks = disks;
                } else if ("ramSizeInGb".equals(fieldName)) {
                    deserializedHardware.ramSizeInGb = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHardware;
        });
    }
}
