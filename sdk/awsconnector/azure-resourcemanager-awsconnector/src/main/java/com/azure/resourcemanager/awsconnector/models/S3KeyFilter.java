// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of S3KeyFilter.
 */
@Fluent
public final class S3KeyFilter implements JsonSerializable<S3KeyFilter> {
    /*
     * A list of containers for the key-value pair that defines the criteria for the filter rule.
     */
    private List<FilterRule> rules;

    /**
     * Creates an instance of S3KeyFilter class.
     */
    public S3KeyFilter() {
    }

    /**
     * Get the rules property: A list of containers for the key-value pair that defines the criteria for the filter
     * rule.
     * 
     * @return the rules value.
     */
    public List<FilterRule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: A list of containers for the key-value pair that defines the criteria for the filter
     * rule.
     * 
     * @param rules the rules value to set.
     * @return the S3KeyFilter object itself.
     */
    public S3KeyFilter withRules(List<FilterRule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of S3KeyFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of S3KeyFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the S3KeyFilter.
     */
    public static S3KeyFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            S3KeyFilter deserializedS3KeyFilter = new S3KeyFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rules".equals(fieldName)) {
                    List<FilterRule> rules = reader.readArray(reader1 -> FilterRule.fromJson(reader1));
                    deserializedS3KeyFilter.rules = rules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedS3KeyFilter;
        });
    }
}
