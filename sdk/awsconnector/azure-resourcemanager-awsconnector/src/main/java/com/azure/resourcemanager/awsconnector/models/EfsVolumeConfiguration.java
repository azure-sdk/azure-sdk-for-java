// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EFSVolumeConfiguration.
 */
@Fluent
public final class EfsVolumeConfiguration implements JsonSerializable<EfsVolumeConfiguration> {
    /*
     * The authorization configuration details for the Amazon EFS file system. The authorization configuration details
     * for the Amazon EFS file system.
     */
    private AuthorizationConfig authorizationConfig;

    /*
     * The Amazon EFS file system ID to use.
     */
    private String filesystemId;

    /*
     * The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter
     * is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as
     * omitting this parameter. If an EFS access point is specified in the ``authorizationConfig``, the root directory
     * parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
     */
    private String rootDirectory;

    /*
     * Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon
     * EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is
     * omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in
     * transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System
     * User Guide*.
     */
    private EfsVolumeConfigurationTransitEncryption transitEncryption;

    /*
     * The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not
     * specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
     * For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in
     * the *Amazon Elastic File System User Guide*.
     */
    private Integer transitEncryptionPort;

    /**
     * Creates an instance of EfsVolumeConfiguration class.
     */
    public EfsVolumeConfiguration() {
    }

    /**
     * Get the authorizationConfig property: The authorization configuration details for the Amazon EFS file system. The
     * authorization configuration details for the Amazon EFS file system.
     * 
     * @return the authorizationConfig value.
     */
    public AuthorizationConfig authorizationConfig() {
        return this.authorizationConfig;
    }

    /**
     * Set the authorizationConfig property: The authorization configuration details for the Amazon EFS file system. The
     * authorization configuration details for the Amazon EFS file system.
     * 
     * @param authorizationConfig the authorizationConfig value to set.
     * @return the EfsVolumeConfiguration object itself.
     */
    public EfsVolumeConfiguration withAuthorizationConfig(AuthorizationConfig authorizationConfig) {
        this.authorizationConfig = authorizationConfig;
        return this;
    }

    /**
     * Get the filesystemId property: The Amazon EFS file system ID to use.
     * 
     * @return the filesystemId value.
     */
    public String filesystemId() {
        return this.filesystemId;
    }

    /**
     * Set the filesystemId property: The Amazon EFS file system ID to use.
     * 
     * @param filesystemId the filesystemId value to set.
     * @return the EfsVolumeConfiguration object itself.
     */
    public EfsVolumeConfiguration withFilesystemId(String filesystemId) {
        this.filesystemId = filesystemId;
        return this;
    }

    /**
     * Get the rootDirectory property: The directory within the Amazon EFS file system to mount as the root directory
     * inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/``
     * will have the same effect as omitting this parameter. If an EFS access point is specified in the
     * ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce
     * the path set on the EFS access point.
     * 
     * @return the rootDirectory value.
     */
    public String rootDirectory() {
        return this.rootDirectory;
    }

    /**
     * Set the rootDirectory property: The directory within the Amazon EFS file system to mount as the root directory
     * inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/``
     * will have the same effect as omitting this parameter. If an EFS access point is specified in the
     * ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce
     * the path set on the EFS access point.
     * 
     * @param rootDirectory the rootDirectory value to set.
     * @return the EfsVolumeConfiguration object itself.
     */
    public EfsVolumeConfiguration withRootDirectory(String rootDirectory) {
        this.rootDirectory = rootDirectory;
        return this;
    }

    /**
     * Get the transitEncryption property: Determines whether to use encryption for Amazon EFS data in transit between
     * the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM
     * authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more
     * information, see [Encrypting data in
     * transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System
     * User Guide*.
     * 
     * @return the transitEncryption value.
     */
    public EfsVolumeConfigurationTransitEncryption transitEncryption() {
        return this.transitEncryption;
    }

    /**
     * Set the transitEncryption property: Determines whether to use encryption for Amazon EFS data in transit between
     * the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM
     * authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more
     * information, see [Encrypting data in
     * transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System
     * User Guide*.
     * 
     * @param transitEncryption the transitEncryption value to set.
     * @return the EfsVolumeConfiguration object itself.
     */
    public EfsVolumeConfiguration withTransitEncryption(EfsVolumeConfigurationTransitEncryption transitEncryption) {
        this.transitEncryption = transitEncryption;
        return this;
    }

    /**
     * Get the transitEncryptionPort property: The port to use when sending encrypted data between the Amazon ECS host
     * and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection
     * strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount
     * helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User
     * Guide*.
     * 
     * @return the transitEncryptionPort value.
     */
    public Integer transitEncryptionPort() {
        return this.transitEncryptionPort;
    }

    /**
     * Set the transitEncryptionPort property: The port to use when sending encrypted data between the Amazon ECS host
     * and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection
     * strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount
     * helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User
     * Guide*.
     * 
     * @param transitEncryptionPort the transitEncryptionPort value to set.
     * @return the EfsVolumeConfiguration object itself.
     */
    public EfsVolumeConfiguration withTransitEncryptionPort(Integer transitEncryptionPort) {
        this.transitEncryptionPort = transitEncryptionPort;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizationConfig() != null) {
            authorizationConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authorizationConfig", this.authorizationConfig);
        jsonWriter.writeStringField("filesystemId", this.filesystemId);
        jsonWriter.writeStringField("rootDirectory", this.rootDirectory);
        jsonWriter.writeStringField("transitEncryption",
            this.transitEncryption == null ? null : this.transitEncryption.toString());
        jsonWriter.writeNumberField("transitEncryptionPort", this.transitEncryptionPort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EfsVolumeConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EfsVolumeConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EfsVolumeConfiguration.
     */
    public static EfsVolumeConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EfsVolumeConfiguration deserializedEfsVolumeConfiguration = new EfsVolumeConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizationConfig".equals(fieldName)) {
                    deserializedEfsVolumeConfiguration.authorizationConfig = AuthorizationConfig.fromJson(reader);
                } else if ("filesystemId".equals(fieldName)) {
                    deserializedEfsVolumeConfiguration.filesystemId = reader.getString();
                } else if ("rootDirectory".equals(fieldName)) {
                    deserializedEfsVolumeConfiguration.rootDirectory = reader.getString();
                } else if ("transitEncryption".equals(fieldName)) {
                    deserializedEfsVolumeConfiguration.transitEncryption
                        = EfsVolumeConfigurationTransitEncryption.fromString(reader.getString());
                } else if ("transitEncryptionPort".equals(fieldName)) {
                    deserializedEfsVolumeConfiguration.transitEncryptionPort = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEfsVolumeConfiguration;
        });
    }
}
