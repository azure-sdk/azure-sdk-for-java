// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of ElasticInferenceAcceleratorAssociation.
 */
@Fluent
public final class ElasticInferenceAcceleratorAssociation
    implements JsonSerializable<ElasticInferenceAcceleratorAssociation> {
    /*
     * <p> The Amazon Resource Name (ARN) of the elastic inference accelerator. </p>
     */
    private String elasticInferenceAcceleratorArn;

    /*
     * <p> The ID of the association. </p>
     */
    private String elasticInferenceAcceleratorAssociationId;

    /*
     * <p> The state of the elastic inference accelerator. </p>
     */
    private String elasticInferenceAcceleratorAssociationState;

    /*
     * <p> The time at which the elastic inference accelerator is associated with an instance. </p>
     */
    private OffsetDateTime elasticInferenceAcceleratorAssociationTime;

    /**
     * Creates an instance of ElasticInferenceAcceleratorAssociation class.
     */
    public ElasticInferenceAcceleratorAssociation() {
    }

    /**
     * Get the elasticInferenceAcceleratorArn property: &lt;p&gt; The Amazon Resource Name (ARN) of the elastic
     * inference accelerator. &lt;/p&gt;.
     * 
     * @return the elasticInferenceAcceleratorArn value.
     */
    public String elasticInferenceAcceleratorArn() {
        return this.elasticInferenceAcceleratorArn;
    }

    /**
     * Set the elasticInferenceAcceleratorArn property: &lt;p&gt; The Amazon Resource Name (ARN) of the elastic
     * inference accelerator. &lt;/p&gt;.
     * 
     * @param elasticInferenceAcceleratorArn the elasticInferenceAcceleratorArn value to set.
     * @return the ElasticInferenceAcceleratorAssociation object itself.
     */
    public ElasticInferenceAcceleratorAssociation
        withElasticInferenceAcceleratorArn(String elasticInferenceAcceleratorArn) {
        this.elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArn;
        return this;
    }

    /**
     * Get the elasticInferenceAcceleratorAssociationId property: &lt;p&gt; The ID of the association. &lt;/p&gt;.
     * 
     * @return the elasticInferenceAcceleratorAssociationId value.
     */
    public String elasticInferenceAcceleratorAssociationId() {
        return this.elasticInferenceAcceleratorAssociationId;
    }

    /**
     * Set the elasticInferenceAcceleratorAssociationId property: &lt;p&gt; The ID of the association. &lt;/p&gt;.
     * 
     * @param elasticInferenceAcceleratorAssociationId the elasticInferenceAcceleratorAssociationId value to set.
     * @return the ElasticInferenceAcceleratorAssociation object itself.
     */
    public ElasticInferenceAcceleratorAssociation
        withElasticInferenceAcceleratorAssociationId(String elasticInferenceAcceleratorAssociationId) {
        this.elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationId;
        return this;
    }

    /**
     * Get the elasticInferenceAcceleratorAssociationState property: &lt;p&gt; The state of the elastic inference
     * accelerator. &lt;/p&gt;.
     * 
     * @return the elasticInferenceAcceleratorAssociationState value.
     */
    public String elasticInferenceAcceleratorAssociationState() {
        return this.elasticInferenceAcceleratorAssociationState;
    }

    /**
     * Set the elasticInferenceAcceleratorAssociationState property: &lt;p&gt; The state of the elastic inference
     * accelerator. &lt;/p&gt;.
     * 
     * @param elasticInferenceAcceleratorAssociationState the elasticInferenceAcceleratorAssociationState value to set.
     * @return the ElasticInferenceAcceleratorAssociation object itself.
     */
    public ElasticInferenceAcceleratorAssociation
        withElasticInferenceAcceleratorAssociationState(String elasticInferenceAcceleratorAssociationState) {
        this.elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationState;
        return this;
    }

    /**
     * Get the elasticInferenceAcceleratorAssociationTime property: &lt;p&gt; The time at which the elastic inference
     * accelerator is associated with an instance. &lt;/p&gt;.
     * 
     * @return the elasticInferenceAcceleratorAssociationTime value.
     */
    public OffsetDateTime elasticInferenceAcceleratorAssociationTime() {
        return this.elasticInferenceAcceleratorAssociationTime;
    }

    /**
     * Set the elasticInferenceAcceleratorAssociationTime property: &lt;p&gt; The time at which the elastic inference
     * accelerator is associated with an instance. &lt;/p&gt;.
     * 
     * @param elasticInferenceAcceleratorAssociationTime the elasticInferenceAcceleratorAssociationTime value to set.
     * @return the ElasticInferenceAcceleratorAssociation object itself.
     */
    public ElasticInferenceAcceleratorAssociation
        withElasticInferenceAcceleratorAssociationTime(OffsetDateTime elasticInferenceAcceleratorAssociationTime) {
        this.elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("elasticInferenceAcceleratorArn", this.elasticInferenceAcceleratorArn);
        jsonWriter.writeStringField("elasticInferenceAcceleratorAssociationId",
            this.elasticInferenceAcceleratorAssociationId);
        jsonWriter.writeStringField("elasticInferenceAcceleratorAssociationState",
            this.elasticInferenceAcceleratorAssociationState);
        jsonWriter.writeStringField("elasticInferenceAcceleratorAssociationTime",
            this.elasticInferenceAcceleratorAssociationTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.elasticInferenceAcceleratorAssociationTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticInferenceAcceleratorAssociation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticInferenceAcceleratorAssociation if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ElasticInferenceAcceleratorAssociation.
     */
    public static ElasticInferenceAcceleratorAssociation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticInferenceAcceleratorAssociation deserializedElasticInferenceAcceleratorAssociation
                = new ElasticInferenceAcceleratorAssociation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("elasticInferenceAcceleratorArn".equals(fieldName)) {
                    deserializedElasticInferenceAcceleratorAssociation.elasticInferenceAcceleratorArn
                        = reader.getString();
                } else if ("elasticInferenceAcceleratorAssociationId".equals(fieldName)) {
                    deserializedElasticInferenceAcceleratorAssociation.elasticInferenceAcceleratorAssociationId
                        = reader.getString();
                } else if ("elasticInferenceAcceleratorAssociationState".equals(fieldName)) {
                    deserializedElasticInferenceAcceleratorAssociation.elasticInferenceAcceleratorAssociationState
                        = reader.getString();
                } else if ("elasticInferenceAcceleratorAssociationTime".equals(fieldName)) {
                    deserializedElasticInferenceAcceleratorAssociation.elasticInferenceAcceleratorAssociationTime
                        = reader
                            .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticInferenceAcceleratorAssociation;
        });
    }
}
