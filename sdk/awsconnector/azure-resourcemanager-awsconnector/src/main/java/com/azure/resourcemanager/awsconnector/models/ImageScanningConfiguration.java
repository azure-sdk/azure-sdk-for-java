// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ImageScanningConfiguration.
 */
@Fluent
public final class ImageScanningConfiguration implements JsonSerializable<ImageScanningConfiguration> {
    /*
     * The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``,
     * images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and
     * images will not be scanned unless a scan is manually started. The setting that determines whether images are
     * scanned after being pushed to a repository.
     */
    private Boolean scanOnPush;

    /**
     * Creates an instance of ImageScanningConfiguration class.
     */
    public ImageScanningConfiguration() {
    }

    /**
     * Get the scanOnPush property: The setting that determines whether images are scanned after being pushed to a
     * repository. If set to ``true``, images will be scanned after being pushed. If this parameter is not specified, it
     * will default to ``false`` and images will not be scanned unless a scan is manually started. The setting that
     * determines whether images are scanned after being pushed to a repository.
     * 
     * @return the scanOnPush value.
     */
    public Boolean scanOnPush() {
        return this.scanOnPush;
    }

    /**
     * Set the scanOnPush property: The setting that determines whether images are scanned after being pushed to a
     * repository. If set to ``true``, images will be scanned after being pushed. If this parameter is not specified, it
     * will default to ``false`` and images will not be scanned unless a scan is manually started. The setting that
     * determines whether images are scanned after being pushed to a repository.
     * 
     * @param scanOnPush the scanOnPush value to set.
     * @return the ImageScanningConfiguration object itself.
     */
    public ImageScanningConfiguration withScanOnPush(Boolean scanOnPush) {
        this.scanOnPush = scanOnPush;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("scanOnPush", this.scanOnPush);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageScanningConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageScanningConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageScanningConfiguration.
     */
    public static ImageScanningConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageScanningConfiguration deserializedImageScanningConfiguration = new ImageScanningConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scanOnPush".equals(fieldName)) {
                    deserializedImageScanningConfiguration.scanOnPush = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageScanningConfiguration;
        });
    }
}
