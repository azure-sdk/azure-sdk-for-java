// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of TagCriterionForJob.
 */
@Fluent
public final class TagCriterionForJob implements JsonSerializable<TagCriterionForJob> {
    /*
     * <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
     */
    private JobComparatorEnumValue comparator;

    /*
     * <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
     */
    private List<TagCriterionPairForJob> tagValues;

    /**
     * Creates an instance of TagCriterionForJob class.
     */
    public TagCriterionForJob() {
    }

    /**
     * Get the comparator property: &lt;p&gt;The operator to use in the condition. Valid values are EQ (equals) and NE
     * (not equals).&lt;/p&gt;.
     * 
     * @return the comparator value.
     */
    public JobComparatorEnumValue comparator() {
        return this.comparator;
    }

    /**
     * Set the comparator property: &lt;p&gt;The operator to use in the condition. Valid values are EQ (equals) and NE
     * (not equals).&lt;/p&gt;.
     * 
     * @param comparator the comparator value to set.
     * @return the TagCriterionForJob object itself.
     */
    public TagCriterionForJob withComparator(JobComparatorEnumValue comparator) {
        this.comparator = comparator;
        return this;
    }

    /**
     * Get the tagValues property: &lt;p&gt;The tag keys, tag values, or tag key and value pairs to use in the
     * condition.&lt;/p&gt;.
     * 
     * @return the tagValues value.
     */
    public List<TagCriterionPairForJob> tagValues() {
        return this.tagValues;
    }

    /**
     * Set the tagValues property: &lt;p&gt;The tag keys, tag values, or tag key and value pairs to use in the
     * condition.&lt;/p&gt;.
     * 
     * @param tagValues the tagValues value to set.
     * @return the TagCriterionForJob object itself.
     */
    public TagCriterionForJob withTagValues(List<TagCriterionPairForJob> tagValues) {
        this.tagValues = tagValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (comparator() != null) {
            comparator().validate();
        }
        if (tagValues() != null) {
            tagValues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("comparator", this.comparator);
        jsonWriter.writeArrayField("tagValues", this.tagValues, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TagCriterionForJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TagCriterionForJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TagCriterionForJob.
     */
    public static TagCriterionForJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TagCriterionForJob deserializedTagCriterionForJob = new TagCriterionForJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("comparator".equals(fieldName)) {
                    deserializedTagCriterionForJob.comparator = JobComparatorEnumValue.fromJson(reader);
                } else if ("tagValues".equals(fieldName)) {
                    List<TagCriterionPairForJob> tagValues
                        = reader.readArray(reader1 -> TagCriterionPairForJob.fromJson(reader1));
                    deserializedTagCriterionForJob.tagValues = tagValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTagCriterionForJob;
        });
    }
}
