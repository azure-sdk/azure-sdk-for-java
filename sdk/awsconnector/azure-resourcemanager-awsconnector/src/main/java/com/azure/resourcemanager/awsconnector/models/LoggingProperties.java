// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LoggingProperties.
 */
@Fluent
public final class LoggingProperties implements JsonSerializable<LoggingProperties> {
    /*
     * Property bucketName
     */
    private String bucketName;

    /*
     * Property s3KeyPrefix
     */
    private String s3KeyPrefix;

    /**
     * Creates an instance of LoggingProperties class.
     */
    public LoggingProperties() {
    }

    /**
     * Get the bucketName property: Property bucketName.
     * 
     * @return the bucketName value.
     */
    public String bucketName() {
        return this.bucketName;
    }

    /**
     * Set the bucketName property: Property bucketName.
     * 
     * @param bucketName the bucketName value to set.
     * @return the LoggingProperties object itself.
     */
    public LoggingProperties withBucketName(String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    /**
     * Get the s3KeyPrefix property: Property s3KeyPrefix.
     * 
     * @return the s3KeyPrefix value.
     */
    public String s3KeyPrefix() {
        return this.s3KeyPrefix;
    }

    /**
     * Set the s3KeyPrefix property: Property s3KeyPrefix.
     * 
     * @param s3KeyPrefix the s3KeyPrefix value to set.
     * @return the LoggingProperties object itself.
     */
    public LoggingProperties withS3KeyPrefix(String s3KeyPrefix) {
        this.s3KeyPrefix = s3KeyPrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bucketName", this.bucketName);
        jsonWriter.writeStringField("s3KeyPrefix", this.s3KeyPrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoggingProperties.
     */
    public static LoggingProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingProperties deserializedLoggingProperties = new LoggingProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucketName".equals(fieldName)) {
                    deserializedLoggingProperties.bucketName = reader.getString();
                } else if ("s3KeyPrefix".equals(fieldName)) {
                    deserializedLoggingProperties.s3KeyPrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingProperties;
        });
    }
}
