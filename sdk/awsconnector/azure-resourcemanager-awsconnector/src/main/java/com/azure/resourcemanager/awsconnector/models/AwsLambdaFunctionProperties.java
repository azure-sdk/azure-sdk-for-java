// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsLambdaFunction.
 */
@Fluent
public final class AwsLambdaFunctionProperties implements JsonSerializable<AwsLambdaFunctionProperties> {
    /*
     * The instruction set architecture that the function supports. Enter a string array with one of the valid values
     * (arm64 or x86_64). The default value is ``x86_64``.
     */
    private List<Architectures> architectures;

    /*
     * Property arn
     */
    private String arn;

    /*
     * The code for the function. The [deployment
     * package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To
     * deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR
     * registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js
     * and Python functions, you can specify the function code inline in the template. Changes to a deployment package
     * in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the
     * function code, change the object key or version in the template.
     */
    private Code code;

    /*
     * To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing
     * configuration includes a set of signing profiles, which define the trusted publishers for this function.
     */
    private String codeSigningConfigArn;

    /*
     * A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when
     * they fail processing. For more information, see [Dead-letter
     * queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq). The [dead-letter
     * queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous
     * invocations.
     */
    private DeadLetterConfig deadLetterConfig;

    /*
     * A description of the function.
     */
    private String description;

    /*
     * Environment variables that are accessible from function code during execution. A function's environment variable
     * settings. You can use environment variables to adjust your function's behavior without updating code. An
     * environment variable is a pair of strings that are stored in a function's version-specific configuration.
     */
    private Environment environment;

    /*
     * The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number
     * between 512 and 10,240 MB. The size of the function's ``/tmp`` directory in MB. The default value is 512, but it
     * can be any whole number between 512 and 10,240 MB.
     */
    private EphemeralStorageAutoGenerated ephemeralStorage;

    /*
     * Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be
     * available in every Availability Zone that your function connects to. If your template contains an
     * [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-
     * mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is
     * created or updated before the function. For more information about using the ``DependsOn`` attribute, see
     * [DependsOn
     * Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
     */
    private List<FileSystemConfig> fileSystemConfigs;

    /*
     * The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one.
     * If you specify a name, you cannot perform updates that require replacement of this resource. You can perform
     * updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    private String functionName;

    /*
     * The name of the method within your code that Lambda calls to run your function. Handler is required if the
     * deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and
     * other qualifiers, depending on the runtime. For more information, see [Lambda programming
     * model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
     */
    private String handler;

    /*
     * Configuration values that override the container image Dockerfile settings. For more information, see [Container
     * image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms). Configuration
     * values that override the container image Dockerfile settings. For more information, see [Container image
     * settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
     */
    private ImageConfig imageConfig;

    /*
     * The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment
     * variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-
     * encryption). When [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is
     * activated, Lambda also uses this key is to encrypt your function's snapshot. If you deploy your function using a
     * container image, Lambda also uses this key to encrypt your function when it's deployed. Note that this is not the
     * same key that's used to protect your container image in the Amazon Elastic Container Registry (Amazon ECR). If
     * you don't provide a customer managed key, Lambda uses a default service key.
     */
    private String kmsKeyArn;

    /*
     * A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the
     * function's execution environment. Specify each layer by its ARN, including the version.
     */
    private List<String> layers;

    /*
     * The function's Amazon CloudWatch Logs configuration settings. The function's Amazon CloudWatch Logs configuration
     * settings.
     */
    private LoggingConfig loggingConfig;

    /*
     * The amount of [memory available to the
     * function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-
     * console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128
     * MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas.
     * AWS raises these quotas automatically based on your usage. You can also request a quota increase.
     */
    private Integer memorySize;

    /*
     * The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
     */
    private PackageType packageType;

    /*
     * The number of simultaneous executions to reserve for the function.
     */
    private Integer reservedConcurrentExecutions;

    /*
     * The Amazon Resource Name (ARN) of the function's execution role.
     */
    private String role;

    /*
     * The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html).
     * Runtime is required if the deployment package is a .zip file archive. The following list includes deprecated
     * runtimes. For more information, see [Runtime deprecation
     * policy](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy).
     */
    private String runtime;

    /*
     * Sets the runtime management configuration for a function's version. For more information, see [Runtime
     * updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html). Sets the runtime management
     * configuration for a function's version. For more information, see [Runtime
     * updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
     */
    private RuntimeManagementConfig runtimeManagementConfig;

    /*
     * The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting. The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     */
    private SnapStart snapStart;

    /*
     * The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     */
    private SnapStartResponse snapStartResponse;

    /*
     * A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
     */
    private List<TagAutoGenerated36> tags;

    /*
     * The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3
     * seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution
     * environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
     */
    private Integer timeout;

    /*
     * Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with
     * [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html). The function's
     * [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record
     * incoming requests, set ``Mode`` to ``Active``.
     */
    private TracingConfig tracingConfig;

    /*
     * For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
     * When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more
     * information, see [Configuring a Lambda function to access resources in a
     * VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). The VPC security groups and subnets
     * that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network
     * interface for each combination of security group and subnet in the function's VPC configuration. The function can
     * only access resources and the internet through that VPC. For more information, see [VPC
     * Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). When you delete a function, CFN
     * monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is
     * defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's
     * resources. To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains
     * this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for
     * network interfaces to be deleted.
     */
    private VpcConfigAutoGenerated vpcConfig;

    /**
     * Creates an instance of AwsLambdaFunctionProperties class.
     */
    public AwsLambdaFunctionProperties() {
    }

    /**
     * Get the architectures property: The instruction set architecture that the function supports. Enter a string array
     * with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
     * 
     * @return the architectures value.
     */
    public List<Architectures> architectures() {
        return this.architectures;
    }

    /**
     * Set the architectures property: The instruction set architecture that the function supports. Enter a string array
     * with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
     * 
     * @param architectures the architectures value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withArchitectures(List<Architectures> architectures) {
        this.architectures = architectures;
        return this;
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the code property: The code for the function. The [deployment
     * package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To
     * deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR
     * registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js
     * and Python functions, you can specify the function code inline in the template. Changes to a deployment package
     * in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the
     * function code, change the object key or version in the template.
     * 
     * @return the code value.
     */
    public Code code() {
        return this.code;
    }

    /**
     * Set the code property: The code for the function. The [deployment
     * package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To
     * deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR
     * registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js
     * and Python functions, you can specify the function code inline in the template. Changes to a deployment package
     * in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the
     * function code, change the object key or version in the template.
     * 
     * @param code the code value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withCode(Code code) {
        this.code = code;
        return this;
    }

    /**
     * Get the codeSigningConfigArn property: To enable code signing for this function, specify the ARN of a
     * code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the
     * trusted publishers for this function.
     * 
     * @return the codeSigningConfigArn value.
     */
    public String codeSigningConfigArn() {
        return this.codeSigningConfigArn;
    }

    /**
     * Set the codeSigningConfigArn property: To enable code signing for this function, specify the ARN of a
     * code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the
     * trusted publishers for this function.
     * 
     * @param codeSigningConfigArn the codeSigningConfigArn value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withCodeSigningConfigArn(String codeSigningConfigArn) {
        this.codeSigningConfigArn = codeSigningConfigArn;
        return this;
    }

    /**
     * Get the deadLetterConfig property: A dead-letter queue configuration that specifies the queue or topic where
     * Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter
     * queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq). The [dead-letter
     * queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous
     * invocations.
     * 
     * @return the deadLetterConfig value.
     */
    public DeadLetterConfig deadLetterConfig() {
        return this.deadLetterConfig;
    }

    /**
     * Set the deadLetterConfig property: A dead-letter queue configuration that specifies the queue or topic where
     * Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter
     * queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq). The [dead-letter
     * queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous
     * invocations.
     * 
     * @param deadLetterConfig the deadLetterConfig value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withDeadLetterConfig(DeadLetterConfig deadLetterConfig) {
        this.deadLetterConfig = deadLetterConfig;
        return this;
    }

    /**
     * Get the description property: A description of the function.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the function.
     * 
     * @param description the description value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the environment property: Environment variables that are accessible from function code during execution. A
     * function's environment variable settings. You can use environment variables to adjust your function's behavior
     * without updating code. An environment variable is a pair of strings that are stored in a function's
     * version-specific configuration.
     * 
     * @return the environment value.
     */
    public Environment environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Environment variables that are accessible from function code during execution. A
     * function's environment variable settings. You can use environment variables to adjust your function's behavior
     * without updating code. An environment variable is a pair of strings that are stored in a function's
     * version-specific configuration.
     * 
     * @param environment the environment value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withEnvironment(Environment environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the ephemeralStorage property: The size of the function's ``/tmp`` directory in MB. The default value is 512,
     * but it can be any whole number between 512 and 10,240 MB. The size of the function's ``/tmp`` directory in MB.
     * The default value is 512, but it can be any whole number between 512 and 10,240 MB.
     * 
     * @return the ephemeralStorage value.
     */
    public EphemeralStorageAutoGenerated ephemeralStorage() {
        return this.ephemeralStorage;
    }

    /**
     * Set the ephemeralStorage property: The size of the function's ``/tmp`` directory in MB. The default value is 512,
     * but it can be any whole number between 512 and 10,240 MB. The size of the function's ``/tmp`` directory in MB.
     * The default value is 512, but it can be any whole number between 512 and 10,240 MB.
     * 
     * @param ephemeralStorage the ephemeralStorage value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withEphemeralStorage(EphemeralStorageAutoGenerated ephemeralStorage) {
        this.ephemeralStorage = ephemeralStorage;
        return this;
    }

    /**
     * Get the fileSystemConfigs property: Connection settings for an Amazon EFS file system. To connect a function to a
     * file system, a mount target must be available in every Availability Zone that your function connects to. If your
     * template contains an
     * [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)
     * resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated
     * before the function. For more information about using the ``DependsOn`` attribute, see [DependsOn
     * Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
     * 
     * @return the fileSystemConfigs value.
     */
    public List<FileSystemConfig> fileSystemConfigs() {
        return this.fileSystemConfigs;
    }

    /**
     * Set the fileSystemConfigs property: Connection settings for an Amazon EFS file system. To connect a function to a
     * file system, a mount target must be available in every Availability Zone that your function connects to. If your
     * template contains an
     * [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)
     * resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated
     * before the function. For more information about using the ``DependsOn`` attribute, see [DependsOn
     * Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
     * 
     * @param fileSystemConfigs the fileSystemConfigs value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withFileSystemConfigs(List<FileSystemConfig> fileSystemConfigs) {
        this.fileSystemConfigs = fileSystemConfigs;
        return this;
    }

    /**
     * Get the functionName property: The name of the Lambda function, up to 64 characters in length. If you don't
     * specify a name, CFN generates one. If you specify a name, you cannot perform updates that require replacement of
     * this resource. You can perform updates that require no or some interruption. If you must replace the resource,
     * specify a new name.
     * 
     * @return the functionName value.
     */
    public String functionName() {
        return this.functionName;
    }

    /**
     * Set the functionName property: The name of the Lambda function, up to 64 characters in length. If you don't
     * specify a name, CFN generates one. If you specify a name, you cannot perform updates that require replacement of
     * this resource. You can perform updates that require no or some interruption. If you must replace the resource,
     * specify a new name.
     * 
     * @param functionName the functionName value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withFunctionName(String functionName) {
        this.functionName = functionName;
        return this;
    }

    /**
     * Get the handler property: The name of the method within your code that Lambda calls to run your function. Handler
     * is required if the deployment package is a .zip file archive. The format includes the file name. It can also
     * include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming
     * model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
     * 
     * @return the handler value.
     */
    public String handler() {
        return this.handler;
    }

    /**
     * Set the handler property: The name of the method within your code that Lambda calls to run your function. Handler
     * is required if the deployment package is a .zip file archive. The format includes the file name. It can also
     * include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming
     * model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
     * 
     * @param handler the handler value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withHandler(String handler) {
        this.handler = handler;
        return this;
    }

    /**
     * Get the imageConfig property: Configuration values that override the container image Dockerfile settings. For
     * more information, see [Container image
     * settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms). Configuration values
     * that override the container image Dockerfile settings. For more information, see [Container image
     * settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
     * 
     * @return the imageConfig value.
     */
    public ImageConfig imageConfig() {
        return this.imageConfig;
    }

    /**
     * Set the imageConfig property: Configuration values that override the container image Dockerfile settings. For
     * more information, see [Container image
     * settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms). Configuration values
     * that override the container image Dockerfile settings. For more information, see [Container image
     * settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
     * 
     * @param imageConfig the imageConfig value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withImageConfig(ImageConfig imageConfig) {
        this.imageConfig = imageConfig;
        return this;
    }

    /**
     * Get the kmsKeyArn property: The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your
     * function's [environment
     * variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption).
     * When [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated,
     * Lambda also uses this key is to encrypt your function's snapshot. If you deploy your function using a container
     * image, Lambda also uses this key to encrypt your function when it's deployed. Note that this is not the same key
     * that's used to protect your container image in the Amazon Elastic Container Registry (Amazon ECR). If you don't
     * provide a customer managed key, Lambda uses a default service key.
     * 
     * @return the kmsKeyArn value.
     */
    public String kmsKeyArn() {
        return this.kmsKeyArn;
    }

    /**
     * Set the kmsKeyArn property: The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your
     * function's [environment
     * variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption).
     * When [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated,
     * Lambda also uses this key is to encrypt your function's snapshot. If you deploy your function using a container
     * image, Lambda also uses this key to encrypt your function when it's deployed. Note that this is not the same key
     * that's used to protect your container image in the Amazon Elastic Container Registry (Amazon ECR). If you don't
     * provide a customer managed key, Lambda uses a default service key.
     * 
     * @param kmsKeyArn the kmsKeyArn value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withKmsKeyArn(String kmsKeyArn) {
        this.kmsKeyArn = kmsKeyArn;
        return this;
    }

    /**
     * Get the layers property: A list of [function
     * layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's
     * execution environment. Specify each layer by its ARN, including the version.
     * 
     * @return the layers value.
     */
    public List<String> layers() {
        return this.layers;
    }

    /**
     * Set the layers property: A list of [function
     * layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's
     * execution environment. Specify each layer by its ARN, including the version.
     * 
     * @param layers the layers value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withLayers(List<String> layers) {
        this.layers = layers;
        return this;
    }

    /**
     * Get the loggingConfig property: The function's Amazon CloudWatch Logs configuration settings. The function's
     * Amazon CloudWatch Logs configuration settings.
     * 
     * @return the loggingConfig value.
     */
    public LoggingConfig loggingConfig() {
        return this.loggingConfig;
    }

    /**
     * Set the loggingConfig property: The function's Amazon CloudWatch Logs configuration settings. The function's
     * Amazon CloudWatch Logs configuration settings.
     * 
     * @param loggingConfig the loggingConfig value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withLoggingConfig(LoggingConfig loggingConfig) {
        this.loggingConfig = loggingConfig;
        return this;
    }

    /**
     * Get the memorySize property: The amount of [memory available to the
     * function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console)
     * at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The
     * value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS
     * raises these quotas automatically based on your usage. You can also request a quota increase.
     * 
     * @return the memorySize value.
     */
    public Integer memorySize() {
        return this.memorySize;
    }

    /**
     * Set the memorySize property: The amount of [memory available to the
     * function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console)
     * at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The
     * value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS
     * raises these quotas automatically based on your usage. You can also request a quota increase.
     * 
     * @param memorySize the memorySize value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withMemorySize(Integer memorySize) {
        this.memorySize = memorySize;
        return this;
    }

    /**
     * Get the packageType property: The type of deployment package. Set to ``Image`` for container image and set
     * ``Zip`` for .zip file archive.
     * 
     * @return the packageType value.
     */
    public PackageType packageType() {
        return this.packageType;
    }

    /**
     * Set the packageType property: The type of deployment package. Set to ``Image`` for container image and set
     * ``Zip`` for .zip file archive.
     * 
     * @param packageType the packageType value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withPackageType(PackageType packageType) {
        this.packageType = packageType;
        return this;
    }

    /**
     * Get the reservedConcurrentExecutions property: The number of simultaneous executions to reserve for the function.
     * 
     * @return the reservedConcurrentExecutions value.
     */
    public Integer reservedConcurrentExecutions() {
        return this.reservedConcurrentExecutions;
    }

    /**
     * Set the reservedConcurrentExecutions property: The number of simultaneous executions to reserve for the function.
     * 
     * @param reservedConcurrentExecutions the reservedConcurrentExecutions value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withReservedConcurrentExecutions(Integer reservedConcurrentExecutions) {
        this.reservedConcurrentExecutions = reservedConcurrentExecutions;
        return this;
    }

    /**
     * Get the role property: The Amazon Resource Name (ARN) of the function's execution role.
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: The Amazon Resource Name (ARN) of the function's execution role.
     * 
     * @param role the role value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Get the runtime property: The identifier of the function's
     * [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the
     * deployment package is a .zip file archive. The following list includes deprecated runtimes. For more information,
     * see [Runtime deprecation
     * policy](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy).
     * 
     * @return the runtime value.
     */
    public String runtime() {
        return this.runtime;
    }

    /**
     * Set the runtime property: The identifier of the function's
     * [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the
     * deployment package is a .zip file archive. The following list includes deprecated runtimes. For more information,
     * see [Runtime deprecation
     * policy](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy).
     * 
     * @param runtime the runtime value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withRuntime(String runtime) {
        this.runtime = runtime;
        return this;
    }

    /**
     * Get the runtimeManagementConfig property: Sets the runtime management configuration for a function's version. For
     * more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html). Sets
     * the runtime management configuration for a function's version. For more information, see [Runtime
     * updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
     * 
     * @return the runtimeManagementConfig value.
     */
    public RuntimeManagementConfig runtimeManagementConfig() {
        return this.runtimeManagementConfig;
    }

    /**
     * Set the runtimeManagementConfig property: Sets the runtime management configuration for a function's version. For
     * more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html). Sets
     * the runtime management configuration for a function's version. For more information, see [Runtime
     * updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
     * 
     * @param runtimeManagementConfig the runtimeManagementConfig value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withRuntimeManagementConfig(RuntimeManagementConfig runtimeManagementConfig) {
        this.runtimeManagementConfig = runtimeManagementConfig;
        return this;
    }

    /**
     * Get the snapStart property: The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting. The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     * 
     * @return the snapStart value.
     */
    public SnapStart snapStart() {
        return this.snapStart;
    }

    /**
     * Set the snapStart property: The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting. The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     * 
     * @param snapStart the snapStart value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withSnapStart(SnapStart snapStart) {
        this.snapStart = snapStart;
        return this;
    }

    /**
     * Get the snapStartResponse property: The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     * 
     * @return the snapStartResponse value.
     */
    public SnapStartResponse snapStartResponse() {
        return this.snapStartResponse;
    }

    /**
     * Set the snapStartResponse property: The function's
     * [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     * 
     * @param snapStartResponse the snapStartResponse value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withSnapStartResponse(SnapStartResponse snapStartResponse) {
        this.snapStartResponse = snapStartResponse;
        return this;
    }

    /**
     * Get the tags property: A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to
     * the function.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated36> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to
     * the function.
     * 
     * @param tags the tags value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withTags(List<TagAutoGenerated36> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the timeout property: The amount of time (in seconds) that Lambda allows a function to run before stopping
     * it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda
     * execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The amount of time (in seconds) that Lambda allows a function to run before stopping
     * it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda
     * execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
     * 
     * @param timeout the timeout value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the tracingConfig property: Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with
     * [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html). The function's
     * [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record
     * incoming requests, set ``Mode`` to ``Active``.
     * 
     * @return the tracingConfig value.
     */
    public TracingConfig tracingConfig() {
        return this.tracingConfig;
    }

    /**
     * Set the tracingConfig property: Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with
     * [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html). The function's
     * [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record
     * incoming requests, set ``Mode`` to ``Active``.
     * 
     * @param tracingConfig the tracingConfig value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withTracingConfig(TracingConfig tracingConfig) {
        this.tracingConfig = tracingConfig;
        return this;
    }

    /**
     * Get the vpcConfig property: For network connectivity to AWS resources in a VPC, specify a list of security groups
     * and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only
     * through that VPC. For more information, see [Configuring a Lambda function to access resources in a
     * VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). The VPC security groups and subnets
     * that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network
     * interface for each combination of security group and subnet in the function's VPC configuration. The function can
     * only access resources and the internet through that VPC. For more information, see [VPC
     * Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). When you delete a function, CFN
     * monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is
     * defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's
     * resources. To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains
     * this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for
     * network interfaces to be deleted.
     * 
     * @return the vpcConfig value.
     */
    public VpcConfigAutoGenerated vpcConfig() {
        return this.vpcConfig;
    }

    /**
     * Set the vpcConfig property: For network connectivity to AWS resources in a VPC, specify a list of security groups
     * and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only
     * through that VPC. For more information, see [Configuring a Lambda function to access resources in a
     * VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). The VPC security groups and subnets
     * that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network
     * interface for each combination of security group and subnet in the function's VPC configuration. The function can
     * only access resources and the internet through that VPC. For more information, see [VPC
     * Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html). When you delete a function, CFN
     * monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is
     * defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's
     * resources. To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains
     * this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for
     * network interfaces to be deleted.
     * 
     * @param vpcConfig the vpcConfig value to set.
     * @return the AwsLambdaFunctionProperties object itself.
     */
    public AwsLambdaFunctionProperties withVpcConfig(VpcConfigAutoGenerated vpcConfig) {
        this.vpcConfig = vpcConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (code() != null) {
            code().validate();
        }
        if (deadLetterConfig() != null) {
            deadLetterConfig().validate();
        }
        if (environment() != null) {
            environment().validate();
        }
        if (ephemeralStorage() != null) {
            ephemeralStorage().validate();
        }
        if (fileSystemConfigs() != null) {
            fileSystemConfigs().forEach(e -> e.validate());
        }
        if (imageConfig() != null) {
            imageConfig().validate();
        }
        if (loggingConfig() != null) {
            loggingConfig().validate();
        }
        if (runtimeManagementConfig() != null) {
            runtimeManagementConfig().validate();
        }
        if (snapStart() != null) {
            snapStart().validate();
        }
        if (snapStartResponse() != null) {
            snapStartResponse().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (tracingConfig() != null) {
            tracingConfig().validate();
        }
        if (vpcConfig() != null) {
            vpcConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("architectures", this.architectures,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeStringField("codeSigningConfigArn", this.codeSigningConfigArn);
        jsonWriter.writeJsonField("deadLetterConfig", this.deadLetterConfig);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("environment", this.environment);
        jsonWriter.writeJsonField("ephemeralStorage", this.ephemeralStorage);
        jsonWriter.writeArrayField("fileSystemConfigs", this.fileSystemConfigs,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("functionName", this.functionName);
        jsonWriter.writeStringField("handler", this.handler);
        jsonWriter.writeJsonField("imageConfig", this.imageConfig);
        jsonWriter.writeStringField("kmsKeyArn", this.kmsKeyArn);
        jsonWriter.writeArrayField("layers", this.layers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("loggingConfig", this.loggingConfig);
        jsonWriter.writeNumberField("memorySize", this.memorySize);
        jsonWriter.writeStringField("packageType", this.packageType == null ? null : this.packageType.toString());
        jsonWriter.writeNumberField("reservedConcurrentExecutions", this.reservedConcurrentExecutions);
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeStringField("runtime", this.runtime);
        jsonWriter.writeJsonField("runtimeManagementConfig", this.runtimeManagementConfig);
        jsonWriter.writeJsonField("snapStart", this.snapStart);
        jsonWriter.writeJsonField("snapStartResponse", this.snapStartResponse);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("timeout", this.timeout);
        jsonWriter.writeJsonField("tracingConfig", this.tracingConfig);
        jsonWriter.writeJsonField("vpcConfig", this.vpcConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsLambdaFunctionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsLambdaFunctionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsLambdaFunctionProperties.
     */
    public static AwsLambdaFunctionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsLambdaFunctionProperties deserializedAwsLambdaFunctionProperties = new AwsLambdaFunctionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("architectures".equals(fieldName)) {
                    List<Architectures> architectures
                        = reader.readArray(reader1 -> Architectures.fromString(reader1.getString()));
                    deserializedAwsLambdaFunctionProperties.architectures = architectures;
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.arn = reader.getString();
                } else if ("code".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.code = Code.fromJson(reader);
                } else if ("codeSigningConfigArn".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.codeSigningConfigArn = reader.getString();
                } else if ("deadLetterConfig".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.deadLetterConfig = DeadLetterConfig.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.description = reader.getString();
                } else if ("environment".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.environment = Environment.fromJson(reader);
                } else if ("ephemeralStorage".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.ephemeralStorage
                        = EphemeralStorageAutoGenerated.fromJson(reader);
                } else if ("fileSystemConfigs".equals(fieldName)) {
                    List<FileSystemConfig> fileSystemConfigs
                        = reader.readArray(reader1 -> FileSystemConfig.fromJson(reader1));
                    deserializedAwsLambdaFunctionProperties.fileSystemConfigs = fileSystemConfigs;
                } else if ("functionName".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.functionName = reader.getString();
                } else if ("handler".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.handler = reader.getString();
                } else if ("imageConfig".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.imageConfig = ImageConfig.fromJson(reader);
                } else if ("kmsKeyArn".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.kmsKeyArn = reader.getString();
                } else if ("layers".equals(fieldName)) {
                    List<String> layers = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsLambdaFunctionProperties.layers = layers;
                } else if ("loggingConfig".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.loggingConfig = LoggingConfig.fromJson(reader);
                } else if ("memorySize".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.memorySize = reader.getNullable(JsonReader::getInt);
                } else if ("packageType".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.packageType = PackageType.fromString(reader.getString());
                } else if ("reservedConcurrentExecutions".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.reservedConcurrentExecutions
                        = reader.getNullable(JsonReader::getInt);
                } else if ("role".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.role = reader.getString();
                } else if ("runtime".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.runtime = reader.getString();
                } else if ("runtimeManagementConfig".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.runtimeManagementConfig
                        = RuntimeManagementConfig.fromJson(reader);
                } else if ("snapStart".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.snapStart = SnapStart.fromJson(reader);
                } else if ("snapStartResponse".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.snapStartResponse = SnapStartResponse.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated36> tags = reader.readArray(reader1 -> TagAutoGenerated36.fromJson(reader1));
                    deserializedAwsLambdaFunctionProperties.tags = tags;
                } else if ("timeout".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.timeout = reader.getNullable(JsonReader::getInt);
                } else if ("tracingConfig".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.tracingConfig = TracingConfig.fromJson(reader);
                } else if ("vpcConfig".equals(fieldName)) {
                    deserializedAwsLambdaFunctionProperties.vpcConfig = VpcConfigAutoGenerated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsLambdaFunctionProperties;
        });
    }
}
