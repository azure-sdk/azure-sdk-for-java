// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Subscription.
 */
@Fluent
public final class Subscription implements JsonSerializable<Subscription> {
    /*
     * The endpoint that receives notifications from the SNS topic. The endpoint value depends on the protocol that you
     * specify. For more information, see the ``Endpoint`` parameter of the ``Subscribe`` action in the *API Reference*.
     */
    private String endpoint;

    /*
     * The subscription's protocol. For more information, see the ``Protocol`` parameter of the ``Subscribe`` action in
     * the *API Reference*.
     */
    private String protocol;

    /**
     * Creates an instance of Subscription class.
     */
    public Subscription() {
    }

    /**
     * Get the endpoint property: The endpoint that receives notifications from the SNS topic. The endpoint value
     * depends on the protocol that you specify. For more information, see the ``Endpoint`` parameter of the
     * ``Subscribe`` action in the *API Reference*.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: The endpoint that receives notifications from the SNS topic. The endpoint value
     * depends on the protocol that you specify. For more information, see the ``Endpoint`` parameter of the
     * ``Subscribe`` action in the *API Reference*.
     * 
     * @param endpoint the endpoint value to set.
     * @return the Subscription object itself.
     */
    public Subscription withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the protocol property: The subscription's protocol. For more information, see the ``Protocol`` parameter of
     * the ``Subscribe`` action in the *API Reference*.
     * 
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The subscription's protocol. For more information, see the ``Protocol`` parameter of
     * the ``Subscribe`` action in the *API Reference*.
     * 
     * @param protocol the protocol value to set.
     * @return the Subscription object itself.
     */
    public Subscription withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeStringField("protocol", this.protocol);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subscription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subscription if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Subscription.
     */
    public static Subscription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subscription deserializedSubscription = new Subscription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoint".equals(fieldName)) {
                    deserializedSubscription.endpoint = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedSubscription.protocol = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscription;
        });
    }
}
