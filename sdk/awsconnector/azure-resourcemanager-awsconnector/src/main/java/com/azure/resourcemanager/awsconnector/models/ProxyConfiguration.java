// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ProxyConfiguration.
 */
@Fluent
public final class ProxyConfiguration implements JsonSerializable<ProxyConfiguration> {
    /*
     * The name of the container that will serve as the App Mesh proxy.
     */
    private String containerName;

    /*
     * The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as
     * key-value pairs. + ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the
     * ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If
     * ``IgnoredGID`` is specified, this field can be empty. + ``IgnoredGID`` - (Required) The group ID (GID) of the
     * proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy
     * ignores its own traffic. If ``IgnoredUID`` is specified, this field can be empty. + ``AppPorts`` - (Required) The
     * list of ports that the application uses. Network traffic to these ports is forwarded to the ``ProxyIngressPort``
     * and ``ProxyEgressPort``. + ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the
     * ``AppPorts`` is directed to. + ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the
     * ``AppPorts`` is directed to. + ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified
     * ports is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list. + ``EgressIgnoredIPs`` -
     * (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the
     * ``ProxyEgressPort``. It can be an empty list.
     */
    private List<KeyValuePair> proxyConfigurationProperties;

    /*
     * The proxy type. The only supported value is ``APPMESH``.
     */
    private String type;

    /**
     * Creates an instance of ProxyConfiguration class.
     */
    public ProxyConfiguration() {
    }

    /**
     * Get the containerName property: The name of the container that will serve as the App Mesh proxy.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: The name of the container that will serve as the App Mesh proxy.
     * 
     * @param containerName the containerName value to set.
     * @return the ProxyConfiguration object itself.
     */
    public ProxyConfiguration withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the proxyConfigurationProperties property: The set of network configuration parameters to provide the
     * Container Network Interface (CNI) plugin, specified as key-value pairs. + ``IgnoredUID`` - (Required) The user ID
     * (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to
     * ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty. +
     * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a
     * container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified,
     * this field can be empty. + ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
     * to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``. + ``ProxyIngressPort`` -
     * (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to. + ``ProxyEgressPort`` -
     * (Required) Specifies the port that outgoing traffic from the ``AppPorts`` is directed to. +
     * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is ignored and not redirected
     * to the ``ProxyEgressPort``. It can be an empty list. + ``EgressIgnoredIPs`` - (Required) The egress traffic going
     * to the specified IP addresses is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
     * 
     * @return the proxyConfigurationProperties value.
     */
    public List<KeyValuePair> proxyConfigurationProperties() {
        return this.proxyConfigurationProperties;
    }

    /**
     * Set the proxyConfigurationProperties property: The set of network configuration parameters to provide the
     * Container Network Interface (CNI) plugin, specified as key-value pairs. + ``IgnoredUID`` - (Required) The user ID
     * (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to
     * ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty. +
     * ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a
     * container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified,
     * this field can be empty. + ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic
     * to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``. + ``ProxyIngressPort`` -
     * (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to. + ``ProxyEgressPort`` -
     * (Required) Specifies the port that outgoing traffic from the ``AppPorts`` is directed to. +
     * ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is ignored and not redirected
     * to the ``ProxyEgressPort``. It can be an empty list. + ``EgressIgnoredIPs`` - (Required) The egress traffic going
     * to the specified IP addresses is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
     * 
     * @param proxyConfigurationProperties the proxyConfigurationProperties value to set.
     * @return the ProxyConfiguration object itself.
     */
    public ProxyConfiguration withProxyConfigurationProperties(List<KeyValuePair> proxyConfigurationProperties) {
        this.proxyConfigurationProperties = proxyConfigurationProperties;
        return this;
    }

    /**
     * Get the type property: The proxy type. The only supported value is ``APPMESH``.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The proxy type. The only supported value is ``APPMESH``.
     * 
     * @param type the type value to set.
     * @return the ProxyConfiguration object itself.
     */
    public ProxyConfiguration withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (proxyConfigurationProperties() != null) {
            proxyConfigurationProperties().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeArrayField("proxyConfigurationProperties", this.proxyConfigurationProperties,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProxyConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProxyConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProxyConfiguration.
     */
    public static ProxyConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProxyConfiguration deserializedProxyConfiguration = new ProxyConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerName".equals(fieldName)) {
                    deserializedProxyConfiguration.containerName = reader.getString();
                } else if ("proxyConfigurationProperties".equals(fieldName)) {
                    List<KeyValuePair> proxyConfigurationProperties
                        = reader.readArray(reader1 -> KeyValuePair.fromJson(reader1));
                    deserializedProxyConfiguration.proxyConfigurationProperties = proxyConfigurationProperties;
                } else if ("type".equals(fieldName)) {
                    deserializedProxyConfiguration.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProxyConfiguration;
        });
    }
}
