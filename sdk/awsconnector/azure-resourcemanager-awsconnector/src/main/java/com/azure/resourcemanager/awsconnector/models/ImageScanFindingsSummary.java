// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Definition of ImageScanFindingsSummary.
 */
@Fluent
public final class ImageScanFindingsSummary implements JsonSerializable<ImageScanFindingsSummary> {
    /*
     * <p>The image vulnerability counts, sorted by severity.</p>
     */
    private Map<String, Integer> findingSeverityCounts;

    /*
     * <p>The time of the last completed image scan.</p>
     */
    private OffsetDateTime imageScanCompletedAt;

    /*
     * <p>The time when the vulnerability data was last scanned.</p>
     */
    private OffsetDateTime vulnerabilitySourceUpdatedAt;

    /**
     * Creates an instance of ImageScanFindingsSummary class.
     */
    public ImageScanFindingsSummary() {
    }

    /**
     * Get the findingSeverityCounts property: &lt;p&gt;The image vulnerability counts, sorted by severity.&lt;/p&gt;.
     * 
     * @return the findingSeverityCounts value.
     */
    public Map<String, Integer> findingSeverityCounts() {
        return this.findingSeverityCounts;
    }

    /**
     * Set the findingSeverityCounts property: &lt;p&gt;The image vulnerability counts, sorted by severity.&lt;/p&gt;.
     * 
     * @param findingSeverityCounts the findingSeverityCounts value to set.
     * @return the ImageScanFindingsSummary object itself.
     */
    public ImageScanFindingsSummary withFindingSeverityCounts(Map<String, Integer> findingSeverityCounts) {
        this.findingSeverityCounts = findingSeverityCounts;
        return this;
    }

    /**
     * Get the imageScanCompletedAt property: &lt;p&gt;The time of the last completed image scan.&lt;/p&gt;.
     * 
     * @return the imageScanCompletedAt value.
     */
    public OffsetDateTime imageScanCompletedAt() {
        return this.imageScanCompletedAt;
    }

    /**
     * Set the imageScanCompletedAt property: &lt;p&gt;The time of the last completed image scan.&lt;/p&gt;.
     * 
     * @param imageScanCompletedAt the imageScanCompletedAt value to set.
     * @return the ImageScanFindingsSummary object itself.
     */
    public ImageScanFindingsSummary withImageScanCompletedAt(OffsetDateTime imageScanCompletedAt) {
        this.imageScanCompletedAt = imageScanCompletedAt;
        return this;
    }

    /**
     * Get the vulnerabilitySourceUpdatedAt property: &lt;p&gt;The time when the vulnerability data was last
     * scanned.&lt;/p&gt;.
     * 
     * @return the vulnerabilitySourceUpdatedAt value.
     */
    public OffsetDateTime vulnerabilitySourceUpdatedAt() {
        return this.vulnerabilitySourceUpdatedAt;
    }

    /**
     * Set the vulnerabilitySourceUpdatedAt property: &lt;p&gt;The time when the vulnerability data was last
     * scanned.&lt;/p&gt;.
     * 
     * @param vulnerabilitySourceUpdatedAt the vulnerabilitySourceUpdatedAt value to set.
     * @return the ImageScanFindingsSummary object itself.
     */
    public ImageScanFindingsSummary withVulnerabilitySourceUpdatedAt(OffsetDateTime vulnerabilitySourceUpdatedAt) {
        this.vulnerabilitySourceUpdatedAt = vulnerabilitySourceUpdatedAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("findingSeverityCounts", this.findingSeverityCounts,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeStringField("imageScanCompletedAt",
            this.imageScanCompletedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.imageScanCompletedAt));
        jsonWriter.writeStringField("vulnerabilitySourceUpdatedAt",
            this.vulnerabilitySourceUpdatedAt == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.vulnerabilitySourceUpdatedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageScanFindingsSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageScanFindingsSummary if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageScanFindingsSummary.
     */
    public static ImageScanFindingsSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageScanFindingsSummary deserializedImageScanFindingsSummary = new ImageScanFindingsSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("findingSeverityCounts".equals(fieldName)) {
                    Map<String, Integer> findingSeverityCounts = reader.readMap(reader1 -> reader1.getInt());
                    deserializedImageScanFindingsSummary.findingSeverityCounts = findingSeverityCounts;
                } else if ("imageScanCompletedAt".equals(fieldName)) {
                    deserializedImageScanFindingsSummary.imageScanCompletedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("vulnerabilitySourceUpdatedAt".equals(fieldName)) {
                    deserializedImageScanFindingsSummary.vulnerabilitySourceUpdatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageScanFindingsSummary;
        });
    }
}
