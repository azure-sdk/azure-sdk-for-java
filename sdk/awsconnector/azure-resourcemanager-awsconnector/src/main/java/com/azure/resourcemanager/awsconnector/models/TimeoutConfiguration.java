// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TimeoutConfiguration.
 */
@Fluent
public final class TimeoutConfiguration implements JsonSerializable<TimeoutConfiguration> {
    /*
     * The amount of time in seconds a connection will stay active while idle. A value of ``0`` can be set to disable
     * ``idleTimeout``. The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC`` is 5 minutes. The ``idleTimeout``
     * default for ``TCP`` is 1 hour.
     */
    private Integer idleTimeoutSeconds;

    /*
     * The amount of time waiting for the upstream to respond with a complete response per request. A value of ``0`` can
     * be set to disable ``perRequestTimeout``. ``perRequestTimeout`` can only be set if Service Connect ``appProtocol``
     * isn't ``TCP``. Only ``idleTimeout`` is allowed for ``TCP`` ``appProtocol``.
     */
    private Integer perRequestTimeoutSeconds;

    /**
     * Creates an instance of TimeoutConfiguration class.
     */
    public TimeoutConfiguration() {
    }

    /**
     * Get the idleTimeoutSeconds property: The amount of time in seconds a connection will stay active while idle. A
     * value of ``0`` can be set to disable ``idleTimeout``. The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC``
     * is 5 minutes. The ``idleTimeout`` default for ``TCP`` is 1 hour.
     * 
     * @return the idleTimeoutSeconds value.
     */
    public Integer idleTimeoutSeconds() {
        return this.idleTimeoutSeconds;
    }

    /**
     * Set the idleTimeoutSeconds property: The amount of time in seconds a connection will stay active while idle. A
     * value of ``0`` can be set to disable ``idleTimeout``. The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC``
     * is 5 minutes. The ``idleTimeout`` default for ``TCP`` is 1 hour.
     * 
     * @param idleTimeoutSeconds the idleTimeoutSeconds value to set.
     * @return the TimeoutConfiguration object itself.
     */
    public TimeoutConfiguration withIdleTimeoutSeconds(Integer idleTimeoutSeconds) {
        this.idleTimeoutSeconds = idleTimeoutSeconds;
        return this;
    }

    /**
     * Get the perRequestTimeoutSeconds property: The amount of time waiting for the upstream to respond with a complete
     * response per request. A value of ``0`` can be set to disable ``perRequestTimeout``. ``perRequestTimeout`` can
     * only be set if Service Connect ``appProtocol`` isn't ``TCP``. Only ``idleTimeout`` is allowed for ``TCP``
     * ``appProtocol``.
     * 
     * @return the perRequestTimeoutSeconds value.
     */
    public Integer perRequestTimeoutSeconds() {
        return this.perRequestTimeoutSeconds;
    }

    /**
     * Set the perRequestTimeoutSeconds property: The amount of time waiting for the upstream to respond with a complete
     * response per request. A value of ``0`` can be set to disable ``perRequestTimeout``. ``perRequestTimeout`` can
     * only be set if Service Connect ``appProtocol`` isn't ``TCP``. Only ``idleTimeout`` is allowed for ``TCP``
     * ``appProtocol``.
     * 
     * @param perRequestTimeoutSeconds the perRequestTimeoutSeconds value to set.
     * @return the TimeoutConfiguration object itself.
     */
    public TimeoutConfiguration withPerRequestTimeoutSeconds(Integer perRequestTimeoutSeconds) {
        this.perRequestTimeoutSeconds = perRequestTimeoutSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("idleTimeoutSeconds", this.idleTimeoutSeconds);
        jsonWriter.writeNumberField("perRequestTimeoutSeconds", this.perRequestTimeoutSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeoutConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeoutConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeoutConfiguration.
     */
    public static TimeoutConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeoutConfiguration deserializedTimeoutConfiguration = new TimeoutConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("idleTimeoutSeconds".equals(fieldName)) {
                    deserializedTimeoutConfiguration.idleTimeoutSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("perRequestTimeoutSeconds".equals(fieldName)) {
                    deserializedTimeoutConfiguration.perRequestTimeoutSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeoutConfiguration;
        });
    }
}
