// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsLightsailBucket.
 */
@Fluent
public final class AwsLightsailBucketProperties implements JsonSerializable<AwsLightsailBucketProperties> {
    /*
     * Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can
     * update a bucket's bundle only one time within a monthly AWS billing cycle.
     */
    private Boolean ableToUpdateBundle;

    /*
     * An object that sets the public accessibility of objects in the specified bucket.
     */
    private AccessRules accessRules;

    /*
     * Property bucketArn
     */
    private String bucketArn;

    /*
     * The name for the bucket.
     */
    private String bucketName;

    /*
     * The ID of the bundle to use for the bucket.
     */
    private String bundleId;

    /*
     * Specifies whether to enable or disable versioning of objects in the bucket.
     */
    private Boolean objectVersioning;

    /*
     * An array of strings to specify the AWS account IDs that can access the bucket.
     */
    private List<String> readOnlyAccessAccounts;

    /*
     * The names of the Lightsail resources for which to set bucket access.
     */
    private List<String> resourcesReceivingAccess;

    /*
     * An array of key-value pairs to apply to this resource.
     */
    private List<TagAutoGenerated37> tags;

    /*
     * The URL of the bucket.
     */
    private String url;

    /**
     * Creates an instance of AwsLightsailBucketProperties class.
     */
    public AwsLightsailBucketProperties() {
    }

    /**
     * Get the ableToUpdateBundle property: Indicates whether the bundle that is currently applied to a bucket can be
     * changed to another bundle. You can update a bucket's bundle only one time within a monthly AWS billing cycle.
     * 
     * @return the ableToUpdateBundle value.
     */
    public Boolean ableToUpdateBundle() {
        return this.ableToUpdateBundle;
    }

    /**
     * Set the ableToUpdateBundle property: Indicates whether the bundle that is currently applied to a bucket can be
     * changed to another bundle. You can update a bucket's bundle only one time within a monthly AWS billing cycle.
     * 
     * @param ableToUpdateBundle the ableToUpdateBundle value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withAbleToUpdateBundle(Boolean ableToUpdateBundle) {
        this.ableToUpdateBundle = ableToUpdateBundle;
        return this;
    }

    /**
     * Get the accessRules property: An object that sets the public accessibility of objects in the specified bucket.
     * 
     * @return the accessRules value.
     */
    public AccessRules accessRules() {
        return this.accessRules;
    }

    /**
     * Set the accessRules property: An object that sets the public accessibility of objects in the specified bucket.
     * 
     * @param accessRules the accessRules value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withAccessRules(AccessRules accessRules) {
        this.accessRules = accessRules;
        return this;
    }

    /**
     * Get the bucketArn property: Property bucketArn.
     * 
     * @return the bucketArn value.
     */
    public String bucketArn() {
        return this.bucketArn;
    }

    /**
     * Set the bucketArn property: Property bucketArn.
     * 
     * @param bucketArn the bucketArn value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withBucketArn(String bucketArn) {
        this.bucketArn = bucketArn;
        return this;
    }

    /**
     * Get the bucketName property: The name for the bucket.
     * 
     * @return the bucketName value.
     */
    public String bucketName() {
        return this.bucketName;
    }

    /**
     * Set the bucketName property: The name for the bucket.
     * 
     * @param bucketName the bucketName value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withBucketName(String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    /**
     * Get the bundleId property: The ID of the bundle to use for the bucket.
     * 
     * @return the bundleId value.
     */
    public String bundleId() {
        return this.bundleId;
    }

    /**
     * Set the bundleId property: The ID of the bundle to use for the bucket.
     * 
     * @param bundleId the bundleId value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withBundleId(String bundleId) {
        this.bundleId = bundleId;
        return this;
    }

    /**
     * Get the objectVersioning property: Specifies whether to enable or disable versioning of objects in the bucket.
     * 
     * @return the objectVersioning value.
     */
    public Boolean objectVersioning() {
        return this.objectVersioning;
    }

    /**
     * Set the objectVersioning property: Specifies whether to enable or disable versioning of objects in the bucket.
     * 
     * @param objectVersioning the objectVersioning value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withObjectVersioning(Boolean objectVersioning) {
        this.objectVersioning = objectVersioning;
        return this;
    }

    /**
     * Get the readOnlyAccessAccounts property: An array of strings to specify the AWS account IDs that can access the
     * bucket.
     * 
     * @return the readOnlyAccessAccounts value.
     */
    public List<String> readOnlyAccessAccounts() {
        return this.readOnlyAccessAccounts;
    }

    /**
     * Set the readOnlyAccessAccounts property: An array of strings to specify the AWS account IDs that can access the
     * bucket.
     * 
     * @param readOnlyAccessAccounts the readOnlyAccessAccounts value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withReadOnlyAccessAccounts(List<String> readOnlyAccessAccounts) {
        this.readOnlyAccessAccounts = readOnlyAccessAccounts;
        return this;
    }

    /**
     * Get the resourcesReceivingAccess property: The names of the Lightsail resources for which to set bucket access.
     * 
     * @return the resourcesReceivingAccess value.
     */
    public List<String> resourcesReceivingAccess() {
        return this.resourcesReceivingAccess;
    }

    /**
     * Set the resourcesReceivingAccess property: The names of the Lightsail resources for which to set bucket access.
     * 
     * @param resourcesReceivingAccess the resourcesReceivingAccess value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withResourcesReceivingAccess(List<String> resourcesReceivingAccess) {
        this.resourcesReceivingAccess = resourcesReceivingAccess;
        return this;
    }

    /**
     * Get the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated37> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @param tags the tags value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withTags(List<TagAutoGenerated37> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the url property: The URL of the bucket.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The URL of the bucket.
     * 
     * @param url the url value to set.
     * @return the AwsLightsailBucketProperties object itself.
     */
    public AwsLightsailBucketProperties withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accessRules() != null) {
            accessRules().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("ableToUpdateBundle", this.ableToUpdateBundle);
        jsonWriter.writeJsonField("accessRules", this.accessRules);
        jsonWriter.writeStringField("bucketArn", this.bucketArn);
        jsonWriter.writeStringField("bucketName", this.bucketName);
        jsonWriter.writeStringField("bundleId", this.bundleId);
        jsonWriter.writeBooleanField("objectVersioning", this.objectVersioning);
        jsonWriter.writeArrayField("readOnlyAccessAccounts", this.readOnlyAccessAccounts,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourcesReceivingAccess", this.resourcesReceivingAccess,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("url", this.url);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsLightsailBucketProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsLightsailBucketProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsLightsailBucketProperties.
     */
    public static AwsLightsailBucketProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsLightsailBucketProperties deserializedAwsLightsailBucketProperties = new AwsLightsailBucketProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ableToUpdateBundle".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.ableToUpdateBundle
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("accessRules".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.accessRules = AccessRules.fromJson(reader);
                } else if ("bucketArn".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.bucketArn = reader.getString();
                } else if ("bucketName".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.bucketName = reader.getString();
                } else if ("bundleId".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.bundleId = reader.getString();
                } else if ("objectVersioning".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.objectVersioning
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("readOnlyAccessAccounts".equals(fieldName)) {
                    List<String> readOnlyAccessAccounts = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsLightsailBucketProperties.readOnlyAccessAccounts = readOnlyAccessAccounts;
                } else if ("resourcesReceivingAccess".equals(fieldName)) {
                    List<String> resourcesReceivingAccess = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsLightsailBucketProperties.resourcesReceivingAccess = resourcesReceivingAccess;
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated37> tags = reader.readArray(reader1 -> TagAutoGenerated37.fromJson(reader1));
                    deserializedAwsLightsailBucketProperties.tags = tags;
                } else if ("url".equals(fieldName)) {
                    deserializedAwsLightsailBucketProperties.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsLightsailBucketProperties;
        });
    }
}
