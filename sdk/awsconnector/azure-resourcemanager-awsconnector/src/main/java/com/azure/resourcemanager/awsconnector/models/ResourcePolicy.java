// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ResourcePolicy.
 */
@Fluent
public final class ResourcePolicy implements JsonSerializable<ResourcePolicy> {
    /*
     * A resource-based policy document that contains permissions to add to the specified DDB table, index, or both. In
     * a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON
     * before submitting it to DDB. For more information about resource-based policies, see [Using resource-based
     * policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
     */
    private Object policyDocument;

    /**
     * Creates an instance of ResourcePolicy class.
     */
    public ResourcePolicy() {
    }

    /**
     * Get the policyDocument property: A resource-based policy document that contains permissions to add to the
     * specified DDB table, index, or both. In a CFNshort template, you can provide the policy in JSON or YAML format
     * because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based
     * policies, see [Using resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
     * 
     * @return the policyDocument value.
     */
    public Object policyDocument() {
        return this.policyDocument;
    }

    /**
     * Set the policyDocument property: A resource-based policy document that contains permissions to add to the
     * specified DDB table, index, or both. In a CFNshort template, you can provide the policy in JSON or YAML format
     * because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based
     * policies, see [Using resource-based policies
     * for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and
     * [Resource-based policy
     * examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
     * 
     * @param policyDocument the policyDocument value to set.
     * @return the ResourcePolicy object itself.
     */
    public ResourcePolicy withPolicyDocument(Object policyDocument) {
        this.policyDocument = policyDocument;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("policyDocument", this.policyDocument);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourcePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourcePolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourcePolicy.
     */
    public static ResourcePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourcePolicy deserializedResourcePolicy = new ResourcePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyDocument".equals(fieldName)) {
                    deserializedResourcePolicy.policyDocument = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourcePolicy;
        });
    }
}
