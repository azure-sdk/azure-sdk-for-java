// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of GeoProximityLocation.
 */
@Fluent
public final class GeoProximityLocation implements JsonSerializable<GeoProximityLocation> {
    /*
     * <p> The Amazon Web Services Region the resource you are directing DNS traffic to, is in. </p>
     */
    private String awsRegion;

    /*
     * <p> The bias increases or decreases the size of the geographic region from which Route 53 routes traffic to a
     * resource. </p> <p>To use <code>Bias</code> to change the size of the geographic region, specify the applicable
     * value for the bias:</p> <ul> <li> <p>To expand the size of the geographic region from which Route 53 routes
     * traffic to a resource, specify a positive integer from 1 to 99 for the bias. Route 53 shrinks the size of
     * adjacent regions. </p> </li> <li> <p>To shrink the size of the geographic region from which Route 53 routes
     * traffic to a resource, specify a negative bias of -1 to -99. Route 53 expands the size of adjacent regions. </p>
     * </li> </ul>
     */
    private Integer bias;

    /*
     * <p> Contains the longitude and latitude for a geographic region. </p>
     */
    private Coordinates coordinates;

    /*
     * <p> Specifies an Amazon Web Services Local Zone Group. </p> <p>A local Zone Group is usually the Local Zone code
     * without the ending character. For example, if the Local Zone is <code>us-east-1-bue-1a</code> the Local Zone
     * Group is <code>us-east-1-bue-1</code>.</p> <p>You can identify the Local Zones Group for a specific Local Zone by
     * using the <a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html'>describe-
     * availability-zones</a> CLI command:</p> <p>This command returns: <code>'GroupName': 'us-west-2-den-1'</code>,
     * specifying that the Local Zone <code>us-west-2-den-1a</code> belongs to the Local Zone Group
     * <code>us-west-2-den-1</code>.</p>
     */
    private String localZoneGroup;

    /**
     * Creates an instance of GeoProximityLocation class.
     */
    public GeoProximityLocation() {
    }

    /**
     * Get the awsRegion property: &lt;p&gt; The Amazon Web Services Region the resource you are directing DNS traffic
     * to, is in. &lt;/p&gt;.
     * 
     * @return the awsRegion value.
     */
    public String awsRegion() {
        return this.awsRegion;
    }

    /**
     * Set the awsRegion property: &lt;p&gt; The Amazon Web Services Region the resource you are directing DNS traffic
     * to, is in. &lt;/p&gt;.
     * 
     * @param awsRegion the awsRegion value to set.
     * @return the GeoProximityLocation object itself.
     */
    public GeoProximityLocation withAwsRegion(String awsRegion) {
        this.awsRegion = awsRegion;
        return this;
    }

    /**
     * Get the bias property: &lt;p&gt; The bias increases or decreases the size of the geographic region from which
     * Route 53 routes traffic to a resource. &lt;/p&gt; &lt;p&gt;To use &lt;code&gt;Bias&lt;/code&gt; to change the
     * size of the geographic region, specify the applicable value for the bias:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a
     * positive integer from 1 to 99 for the bias. Route 53 shrinks the size of adjacent regions. &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;To shrink the size of the geographic region from which Route 53 routes traffic to a resource,
     * specify a negative bias of -1 to -99. Route 53 expands the size of adjacent regions. &lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @return the bias value.
     */
    public Integer bias() {
        return this.bias;
    }

    /**
     * Set the bias property: &lt;p&gt; The bias increases or decreases the size of the geographic region from which
     * Route 53 routes traffic to a resource. &lt;/p&gt; &lt;p&gt;To use &lt;code&gt;Bias&lt;/code&gt; to change the
     * size of the geographic region, specify the applicable value for the bias:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a
     * positive integer from 1 to 99 for the bias. Route 53 shrinks the size of adjacent regions. &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;To shrink the size of the geographic region from which Route 53 routes traffic to a resource,
     * specify a negative bias of -1 to -99. Route 53 expands the size of adjacent regions. &lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @param bias the bias value to set.
     * @return the GeoProximityLocation object itself.
     */
    public GeoProximityLocation withBias(Integer bias) {
        this.bias = bias;
        return this;
    }

    /**
     * Get the coordinates property: &lt;p&gt; Contains the longitude and latitude for a geographic region. &lt;/p&gt;.
     * 
     * @return the coordinates value.
     */
    public Coordinates coordinates() {
        return this.coordinates;
    }

    /**
     * Set the coordinates property: &lt;p&gt; Contains the longitude and latitude for a geographic region. &lt;/p&gt;.
     * 
     * @param coordinates the coordinates value to set.
     * @return the GeoProximityLocation object itself.
     */
    public GeoProximityLocation withCoordinates(Coordinates coordinates) {
        this.coordinates = coordinates;
        return this;
    }

    /**
     * Get the localZoneGroup property: &lt;p&gt; Specifies an Amazon Web Services Local Zone Group. &lt;/p&gt;
     * &lt;p&gt;A local Zone Group is usually the Local Zone code without the ending character. For example, if the
     * Local Zone is &lt;code&gt;us-east-1-bue-1a&lt;/code&gt; the Local Zone Group is
     * &lt;code&gt;us-east-1-bue-1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can identify the Local Zones Group for a
     * specific Local Zone by using the &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html'&gt;describe-availability-zones&lt;/a&gt;
     * CLI command:&lt;/p&gt; &lt;p&gt;This command returns: &lt;code&gt;'GroupName': 'us-west-2-den-1'&lt;/code&gt;,
     * specifying that the Local Zone &lt;code&gt;us-west-2-den-1a&lt;/code&gt; belongs to the Local Zone Group
     * &lt;code&gt;us-west-2-den-1&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the localZoneGroup value.
     */
    public String localZoneGroup() {
        return this.localZoneGroup;
    }

    /**
     * Set the localZoneGroup property: &lt;p&gt; Specifies an Amazon Web Services Local Zone Group. &lt;/p&gt;
     * &lt;p&gt;A local Zone Group is usually the Local Zone code without the ending character. For example, if the
     * Local Zone is &lt;code&gt;us-east-1-bue-1a&lt;/code&gt; the Local Zone Group is
     * &lt;code&gt;us-east-1-bue-1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can identify the Local Zones Group for a
     * specific Local Zone by using the &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html'&gt;describe-availability-zones&lt;/a&gt;
     * CLI command:&lt;/p&gt; &lt;p&gt;This command returns: &lt;code&gt;'GroupName': 'us-west-2-den-1'&lt;/code&gt;,
     * specifying that the Local Zone &lt;code&gt;us-west-2-den-1a&lt;/code&gt; belongs to the Local Zone Group
     * &lt;code&gt;us-west-2-den-1&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param localZoneGroup the localZoneGroup value to set.
     * @return the GeoProximityLocation object itself.
     */
    public GeoProximityLocation withLocalZoneGroup(String localZoneGroup) {
        this.localZoneGroup = localZoneGroup;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (coordinates() != null) {
            coordinates().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("awsRegion", this.awsRegion);
        jsonWriter.writeNumberField("bias", this.bias);
        jsonWriter.writeJsonField("coordinates", this.coordinates);
        jsonWriter.writeStringField("localZoneGroup", this.localZoneGroup);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeoProximityLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeoProximityLocation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeoProximityLocation.
     */
    public static GeoProximityLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoProximityLocation deserializedGeoProximityLocation = new GeoProximityLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("awsRegion".equals(fieldName)) {
                    deserializedGeoProximityLocation.awsRegion = reader.getString();
                } else if ("bias".equals(fieldName)) {
                    deserializedGeoProximityLocation.bias = reader.getNullable(JsonReader::getInt);
                } else if ("coordinates".equals(fieldName)) {
                    deserializedGeoProximityLocation.coordinates = Coordinates.fromJson(reader);
                } else if ("localZoneGroup".equals(fieldName)) {
                    deserializedGeoProximityLocation.localZoneGroup = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeoProximityLocation;
        });
    }
}
