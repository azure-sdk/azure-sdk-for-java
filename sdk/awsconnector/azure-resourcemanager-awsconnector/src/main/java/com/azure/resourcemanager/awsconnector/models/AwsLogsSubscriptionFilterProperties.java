// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsLogsSubscriptionFilter.
 */
@Fluent
public final class AwsLogsSubscriptionFilterProperties
    implements JsonSerializable<AwsLogsSubscriptionFilterProperties> {
    /*
     * The Amazon Resource Name (ARN) of the destination.
     */
    private String destinationArn;

    /*
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     */
    private Distribution distribution;

    /*
     * The name of the subscription filter.
     */
    private String filterName;

    /*
     * The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information
     * about the filter pattern syntax, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    private String filterPattern;

    /*
     * The log group to associate with the subscription filter. All log events that are uploaded to this log group are
     * filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
     */
    private String logGroupName;

    /*
     * The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You
     * don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    private String roleArn;

    /**
     * Creates an instance of AwsLogsSubscriptionFilterProperties class.
     */
    public AwsLogsSubscriptionFilterProperties() {
    }

    /**
     * Get the destinationArn property: The Amazon Resource Name (ARN) of the destination.
     * 
     * @return the destinationArn value.
     */
    public String destinationArn() {
        return this.destinationArn;
    }

    /**
     * Set the destinationArn property: The Amazon Resource Name (ARN) of the destination.
     * 
     * @param destinationArn the destinationArn value to set.
     * @return the AwsLogsSubscriptionFilterProperties object itself.
     */
    public AwsLogsSubscriptionFilterProperties withDestinationArn(String destinationArn) {
        this.destinationArn = destinationArn;
        return this;
    }

    /**
     * Get the distribution property: The method used to distribute log data to the destination, which can be either
     * random or grouped by log stream.
     * 
     * @return the distribution value.
     */
    public Distribution distribution() {
        return this.distribution;
    }

    /**
     * Set the distribution property: The method used to distribute log data to the destination, which can be either
     * random or grouped by log stream.
     * 
     * @param distribution the distribution value to set.
     * @return the AwsLogsSubscriptionFilterProperties object itself.
     */
    public AwsLogsSubscriptionFilterProperties withDistribution(Distribution distribution) {
        this.distribution = distribution;
        return this;
    }

    /**
     * Get the filterName property: The name of the subscription filter.
     * 
     * @return the filterName value.
     */
    public String filterName() {
        return this.filterName;
    }

    /**
     * Set the filterName property: The name of the subscription filter.
     * 
     * @param filterName the filterName value to set.
     * @return the AwsLogsSubscriptionFilterProperties object itself.
     */
    public AwsLogsSubscriptionFilterProperties withFilterName(String filterName) {
        this.filterName = filterName;
        return this;
    }

    /**
     * Get the filterPattern property: The filtering expressions that restrict what gets delivered to the destination
     * AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     * 
     * @return the filterPattern value.
     */
    public String filterPattern() {
        return this.filterPattern;
    }

    /**
     * Set the filterPattern property: The filtering expressions that restrict what gets delivered to the destination
     * AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     * 
     * @param filterPattern the filterPattern value to set.
     * @return the AwsLogsSubscriptionFilterProperties object itself.
     */
    public AwsLogsSubscriptionFilterProperties withFilterPattern(String filterPattern) {
        this.filterPattern = filterPattern;
        return this;
    }

    /**
     * Get the logGroupName property: The log group to associate with the subscription filter. All log events that are
     * uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches
     * the log events.
     * 
     * @return the logGroupName value.
     */
    public String logGroupName() {
        return this.logGroupName;
    }

    /**
     * Set the logGroupName property: The log group to associate with the subscription filter. All log events that are
     * uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches
     * the log events.
     * 
     * @param logGroupName the logGroupName value to set.
     * @return the AwsLogsSubscriptionFilterProperties object itself.
     */
    public AwsLogsSubscriptionFilterProperties withLogGroupName(String logGroupName) {
        this.logGroupName = logGroupName;
        return this;
    }

    /**
     * Get the roleArn property: The ARN of an IAM role that grants CWL permissions to deliver ingested log events to
     * the destination stream. You don't need to provide the ARN when you are working with a logical destination for
     * cross-account delivery.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: The ARN of an IAM role that grants CWL permissions to deliver ingested log events to
     * the destination stream. You don't need to provide the ARN when you are working with a logical destination for
     * cross-account delivery.
     * 
     * @param roleArn the roleArn value to set.
     * @return the AwsLogsSubscriptionFilterProperties object itself.
     */
    public AwsLogsSubscriptionFilterProperties withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destinationArn", this.destinationArn);
        jsonWriter.writeStringField("distribution", this.distribution == null ? null : this.distribution.toString());
        jsonWriter.writeStringField("filterName", this.filterName);
        jsonWriter.writeStringField("filterPattern", this.filterPattern);
        jsonWriter.writeStringField("logGroupName", this.logGroupName);
        jsonWriter.writeStringField("roleArn", this.roleArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsLogsSubscriptionFilterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsLogsSubscriptionFilterProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsLogsSubscriptionFilterProperties.
     */
    public static AwsLogsSubscriptionFilterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsLogsSubscriptionFilterProperties deserializedAwsLogsSubscriptionFilterProperties
                = new AwsLogsSubscriptionFilterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destinationArn".equals(fieldName)) {
                    deserializedAwsLogsSubscriptionFilterProperties.destinationArn = reader.getString();
                } else if ("distribution".equals(fieldName)) {
                    deserializedAwsLogsSubscriptionFilterProperties.distribution
                        = Distribution.fromString(reader.getString());
                } else if ("filterName".equals(fieldName)) {
                    deserializedAwsLogsSubscriptionFilterProperties.filterName = reader.getString();
                } else if ("filterPattern".equals(fieldName)) {
                    deserializedAwsLogsSubscriptionFilterProperties.filterPattern = reader.getString();
                } else if ("logGroupName".equals(fieldName)) {
                    deserializedAwsLogsSubscriptionFilterProperties.logGroupName = reader.getString();
                } else if ("roleArn".equals(fieldName)) {
                    deserializedAwsLogsSubscriptionFilterProperties.roleArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsLogsSubscriptionFilterProperties;
        });
    }
}
