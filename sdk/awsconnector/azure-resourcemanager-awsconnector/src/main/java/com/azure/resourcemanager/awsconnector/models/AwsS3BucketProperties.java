// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsS3Bucket.
 */
@Fluent
public final class AwsS3BucketProperties implements JsonSerializable<AwsS3BucketProperties> {
    /*
     * Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer
     * Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User
     * Guide*. Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3
     * Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon
     * S3 User Guide*.
     */
    private AccelerateConfiguration accelerateConfiguration;

    /*
     * This is a legacy property, and it is not recommended for most use cases. A majority of modern use cases in Amazon
     * S3 no longer require the use of ACLs, and we recommend that you keep ACLs disabled. For more information, see
     * [Controlling object
     * ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3
     * User Guide*. A canned access control list (ACL) that grants predefined permissions to the bucket. For more
     * information about canned ACLs, see [Canned
     * ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.
     * S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the
     * [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-
     * bucket-ownershipcontrols.html) property to enable ACLs, your resource will fail to deploy with any value other
     * than Private. Use cases requiring ACLs are uncommon. The majority of access control configurations can be
     * successfully and more easily achieved with bucket policies. For more information, see
     * [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.
     * html). For examples of common policy configurations, including S3 Server Access Logs buckets and more, see
     * [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in
     * the *Amazon S3 User Guide*.
     */
    private AccessControl accessControl;

    /*
     * Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
     */
    private List<AnalyticsConfiguration> analyticsConfigurations;

    /*
     * the Amazon Resource Name (ARN) of the specified bucket.
     */
    private String arn;

    /*
     * Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS
     * KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For
     * information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3
     * Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
     * Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS
     * KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For
     * information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3
     * Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
     */
    private BucketEncryption bucketEncryption;

    /*
     * A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for
     * the bucket name. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-) and
     * must follow [Amazon S3 bucket restrictions and
     * limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see
     * [Rules for naming Amazon S3
     * buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the
     * *Amazon S3 User Guide*. If you specify a name, you can't perform updates that require replacement of this
     * resource. You can perform updates that require no or some interruption. If you need to replace the resource,
     * specify a new name.
     */
    private String bucketName;

    /*
     * Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see
     * [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the
     * *Amazon S3 User Guide*. Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For
     * more information, see [Enabling Cross-Origin Resource
     * Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.
     */
    private CorsConfiguration corsConfiguration;

    /*
     * Property domainName
     */
    private String domainName;

    /*
     * Property dualStackDomainName
     */
    private String dualStackDomainName;

    /*
     * Defines how Amazon S3 handles Intelligent-Tiering storage.
     */
    private List<IntelligentTieringConfiguration> intelligentTieringConfigurations;

    /*
     * Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket
     * inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3
     * API Reference*.
     */
    private List<InventoryConfiguration> inventoryConfigurations;

    /*
     * Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object
     * Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon
     * S3 User Guide*. Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information,
     * see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in
     * the *Amazon S3 User Guide*.
     */
    private LifecycleConfiguration lifecycleConfiguration;

    /*
     * Settings that define where logs are stored. Describes where logs are stored and the prefix that Amazon S3 assigns
     * to all log object keys for a bucket. For examples and more information, see [PUT Bucket
     * logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the *Amazon S3 API
     * Reference*. To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request, you must have
     * ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
     */
    private LoggingConfiguration loggingConfiguration;

    /*
     * Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID)
     * from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full
     * replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are
     * erased. For more information, see
     * [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.
     * html).
     */
    private List<MetricsConfiguration> metricsConfigurations;

    /*
     * Configuration that defines how Amazon S3 handles bucket notifications. Describes the notification configuration
     * for an Amazon S3 bucket. If you create the target resource and related permissions in the same template, you
     * might have a circular dependency. For example, you might use the ``AWS::Lambda::Permission`` resource to grant
     * the bucket permission to invoke an AWS Lambda function. However, AWS CloudFormation can't create the bucket until
     * the bucket has permission to invoke the function (AWS CloudFormation checks whether the bucket can invoke the
     * function). If you're using Refs to pass the bucket name, this leads to a circular dependency. To avoid this
     * dependency, you can create all resources without specifying the notification configuration. Then, update the
     * stack with a notification configuration. For more information on permissions, see
     * [AWS::Lambda::Permission](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-
     * permission.html) and [Granting Permissions to Publish Event Notification Messages to a
     * Destination](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#grant-destinations-
     * permissions-to-s3).
     */
    private NotificationConfigurationAutoGenerated2 notificationConfiguration;

    /*
     * This operation is not supported by directory buckets. Places an Object Lock configuration on the specified
     * bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed
     * in the specified bucket. For more information, see [Locking
     * Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). + The ``DefaultRetention`` settings
     * require both a mode and a period. + The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you
     * must select one. You cannot specify ``Days`` and ``Years`` at the same time. + You can enable Object Lock for new
     * or existing buckets. For more information, see [Configuring Object
     * Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html). Places an Object Lock
     * configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by
     * default to every new object placed in the specified bucket. For more information, see [Locking
     * Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html).
     */
    private ObjectLockConfiguration objectLockConfiguration;

    /*
     * Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you
     * apply ``ObjectLockConfiguration`` to a bucket.
     */
    private Boolean objectLockEnabled;

    /*
     * Configuration that defines how Amazon S3 handles Object Ownership rules. Specifies the container element for
     * Object Ownership rules. S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable
     * access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for
     * data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling
     * ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User
     * Guide*.
     */
    private OwnershipControls ownershipControls;

    /*
     * Configuration that defines how Amazon S3 handles public access. The PublicAccessBlock configuration that you want
     * to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more
     * information about when Amazon S3 considers a bucket or object public, see [The Meaning of
     * 'Public'](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-
     * block-public-access-policy-status) in the *Amazon S3 User Guide*.
     */
    private PublicAccessBlockConfigurationAutoGenerated publicAccessBlockConfiguration;

    /*
     * Property regionalDomainName
     */
    private String regionalDomainName;

    /*
     * Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by
     * using the ``VersioningConfiguration`` property. Amazon S3 can store replicated objects in a single destination
     * bucket or multiple destination buckets. The destination bucket or buckets must already exist. A container for
     * replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB. The
     * latest version of the replication configuration XML is V2. For more information about XML V2 replication
     * configurations, see [Replication
     * configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-add-config.html) in the *Amazon
     * S3 User Guide*.
     */
    private ReplicationConfigurationAutoGenerated replicationConfiguration;

    /*
     * An arbitrary set of tags (key-value pairs) for this S3 bucket.
     */
    private List<TagAutoGenerated50> tags;

    /*
     * Enables multiple versions of all objects in this bucket. You might enable versioning to prevent objects from
     * being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.
     * Describes the versioning state of an Amazon S3 bucket. For more information, see [PUT Bucket
     * versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the *Amazon S3
     * API Reference*.
     */
    private VersioningConfiguration versioningConfiguration;

    /*
     * Information used to configure the bucket as a static website. For more information, see [Hosting Websites on
     * Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html). Specifies website configuration
     * parameters for an Amazon S3 bucket.
     */
    private WebsiteConfiguration websiteConfiguration;

    /*
     * Property websiteURL
     */
    private String websiteUrl;

    /**
     * Creates an instance of AwsS3BucketProperties class.
     */
    public AwsS3BucketProperties() {
    }

    /**
     * Get the accelerateConfiguration property: Configures the transfer acceleration state for an Amazon S3 bucket. For
     * more information, see [Amazon S3 Transfer
     * Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User
     * Guide*. Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3
     * Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon
     * S3 User Guide*.
     * 
     * @return the accelerateConfiguration value.
     */
    public AccelerateConfiguration accelerateConfiguration() {
        return this.accelerateConfiguration;
    }

    /**
     * Set the accelerateConfiguration property: Configures the transfer acceleration state for an Amazon S3 bucket. For
     * more information, see [Amazon S3 Transfer
     * Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User
     * Guide*. Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3
     * Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon
     * S3 User Guide*.
     * 
     * @param accelerateConfiguration the accelerateConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withAccelerateConfiguration(AccelerateConfiguration accelerateConfiguration) {
        this.accelerateConfiguration = accelerateConfiguration;
        return this;
    }

    /**
     * Get the accessControl property: This is a legacy property, and it is not recommended for most use cases. A
     * majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs
     * disabled. For more information, see [Controlling object
     * ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3
     * User Guide*. A canned access control list (ACL) that grants predefined permissions to the bucket. For more
     * information about canned ACLs, see [Canned
     * ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.
     * S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the
     * [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html)
     * property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring
     * ACLs are uncommon. The majority of access control configurations can be successfully and more easily achieved
     * with bucket policies. For more information, see
     * [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html).
     * For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket
     * policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @return the accessControl value.
     */
    public AccessControl accessControl() {
        return this.accessControl;
    }

    /**
     * Set the accessControl property: This is a legacy property, and it is not recommended for most use cases. A
     * majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs
     * disabled. For more information, see [Controlling object
     * ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3
     * User Guide*. A canned access control list (ACL) that grants predefined permissions to the bucket. For more
     * information about canned ACLs, see [Canned
     * ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.
     * S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the
     * [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html)
     * property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring
     * ACLs are uncommon. The majority of access control configurations can be successfully and more easily achieved
     * with bucket policies. For more information, see
     * [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html).
     * For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket
     * policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @param accessControl the accessControl value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withAccessControl(AccessControl accessControl) {
        this.accessControl = accessControl;
        return this;
    }

    /**
     * Get the analyticsConfigurations property: Specifies the configuration and any analyses for the analytics filter
     * of an Amazon S3 bucket.
     * 
     * @return the analyticsConfigurations value.
     */
    public List<AnalyticsConfiguration> analyticsConfigurations() {
        return this.analyticsConfigurations;
    }

    /**
     * Set the analyticsConfigurations property: Specifies the configuration and any analyses for the analytics filter
     * of an Amazon S3 bucket.
     * 
     * @param analyticsConfigurations the analyticsConfigurations value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withAnalyticsConfigurations(List<AnalyticsConfiguration> analyticsConfigurations) {
        this.analyticsConfigurations = analyticsConfigurations;
        return this;
    }

    /**
     * Get the arn property: the Amazon Resource Name (ARN) of the specified bucket.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: the Amazon Resource Name (ARN) of the specified bucket.
     * 
     * @param arn the arn value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the bucketEncryption property: Specifies default encryption for a bucket using server-side encryption with
     * Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with
     * KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3
     * Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the
     * *Amazon S3 User Guide*. Specifies default encryption for a bucket using server-side encryption with Amazon
     * S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed
     * keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default
     * Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon
     * S3 User Guide*.
     * 
     * @return the bucketEncryption value.
     */
    public BucketEncryption bucketEncryption() {
        return this.bucketEncryption;
    }

    /**
     * Set the bucketEncryption property: Specifies default encryption for a bucket using server-side encryption with
     * Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with
     * KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3
     * Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the
     * *Amazon S3 User Guide*. Specifies default encryption for a bucket using server-side encryption with Amazon
     * S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed
     * keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default
     * Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon
     * S3 User Guide*.
     * 
     * @param bucketEncryption the bucketEncryption value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withBucketEncryption(BucketEncryption bucketEncryption) {
        this.bucketEncryption = bucketEncryption;
        return this;
    }

    /**
     * Get the bucketName property: A name for the bucket. If you don't specify a name, AWS CloudFormation generates a
     * unique ID and uses that ID for the bucket name. The bucket name must contain only lowercase letters, numbers,
     * periods (.), and dashes (-) and must follow [Amazon S3 bucket restrictions and
     * limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see
     * [Rules for naming Amazon S3
     * buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the
     * *Amazon S3 User Guide*. If you specify a name, you can't perform updates that require replacement of this
     * resource. You can perform updates that require no or some interruption. If you need to replace the resource,
     * specify a new name.
     * 
     * @return the bucketName value.
     */
    public String bucketName() {
        return this.bucketName;
    }

    /**
     * Set the bucketName property: A name for the bucket. If you don't specify a name, AWS CloudFormation generates a
     * unique ID and uses that ID for the bucket name. The bucket name must contain only lowercase letters, numbers,
     * periods (.), and dashes (-) and must follow [Amazon S3 bucket restrictions and
     * limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see
     * [Rules for naming Amazon S3
     * buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the
     * *Amazon S3 User Guide*. If you specify a name, you can't perform updates that require replacement of this
     * resource. You can perform updates that require no or some interruption. If you need to replace the resource,
     * specify a new name.
     * 
     * @param bucketName the bucketName value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withBucketName(String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    /**
     * Get the corsConfiguration property: Describes the cross-origin access configuration for objects in an Amazon S3
     * bucket. For more information, see [Enabling Cross-Origin Resource
     * Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*. Describes the
     * cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling
     * Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @return the corsConfiguration value.
     */
    public CorsConfiguration corsConfiguration() {
        return this.corsConfiguration;
    }

    /**
     * Set the corsConfiguration property: Describes the cross-origin access configuration for objects in an Amazon S3
     * bucket. For more information, see [Enabling Cross-Origin Resource
     * Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*. Describes the
     * cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling
     * Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @param corsConfiguration the corsConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withCorsConfiguration(CorsConfiguration corsConfiguration) {
        this.corsConfiguration = corsConfiguration;
        return this;
    }

    /**
     * Get the domainName property: Property domainName.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: Property domainName.
     * 
     * @param domainName the domainName value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the dualStackDomainName property: Property dualStackDomainName.
     * 
     * @return the dualStackDomainName value.
     */
    public String dualStackDomainName() {
        return this.dualStackDomainName;
    }

    /**
     * Set the dualStackDomainName property: Property dualStackDomainName.
     * 
     * @param dualStackDomainName the dualStackDomainName value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withDualStackDomainName(String dualStackDomainName) {
        this.dualStackDomainName = dualStackDomainName;
        return this;
    }

    /**
     * Get the intelligentTieringConfigurations property: Defines how Amazon S3 handles Intelligent-Tiering storage.
     * 
     * @return the intelligentTieringConfigurations value.
     */
    public List<IntelligentTieringConfiguration> intelligentTieringConfigurations() {
        return this.intelligentTieringConfigurations;
    }

    /**
     * Set the intelligentTieringConfigurations property: Defines how Amazon S3 handles Intelligent-Tiering storage.
     * 
     * @param intelligentTieringConfigurations the intelligentTieringConfigurations value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties
        withIntelligentTieringConfigurations(List<IntelligentTieringConfiguration> intelligentTieringConfigurations) {
        this.intelligentTieringConfigurations = intelligentTieringConfigurations;
        return this;
    }

    /**
     * Get the inventoryConfigurations property: Specifies the inventory configuration for an Amazon S3 bucket. For more
     * information, see [GET Bucket
     * inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3
     * API Reference*.
     * 
     * @return the inventoryConfigurations value.
     */
    public List<InventoryConfiguration> inventoryConfigurations() {
        return this.inventoryConfigurations;
    }

    /**
     * Set the inventoryConfigurations property: Specifies the inventory configuration for an Amazon S3 bucket. For more
     * information, see [GET Bucket
     * inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3
     * API Reference*.
     * 
     * @param inventoryConfigurations the inventoryConfigurations value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withInventoryConfigurations(List<InventoryConfiguration> inventoryConfigurations) {
        this.inventoryConfigurations = inventoryConfigurations;
        return this;
    }

    /**
     * Get the lifecycleConfiguration property: Specifies the lifecycle configuration for objects in an Amazon S3
     * bucket. For more information, see [Object Lifecycle
     * Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User
     * Guide*. Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see
     * [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @return the lifecycleConfiguration value.
     */
    public LifecycleConfiguration lifecycleConfiguration() {
        return this.lifecycleConfiguration;
    }

    /**
     * Set the lifecycleConfiguration property: Specifies the lifecycle configuration for objects in an Amazon S3
     * bucket. For more information, see [Object Lifecycle
     * Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User
     * Guide*. Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see
     * [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @param lifecycleConfiguration the lifecycleConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withLifecycleConfiguration(LifecycleConfiguration lifecycleConfiguration) {
        this.lifecycleConfiguration = lifecycleConfiguration;
        return this;
    }

    /**
     * Get the loggingConfiguration property: Settings that define where logs are stored. Describes where logs are
     * stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For examples and more
     * information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html)
     * in the *Amazon S3 API Reference*. To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request,
     * you must have ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
     * 
     * @return the loggingConfiguration value.
     */
    public LoggingConfiguration loggingConfiguration() {
        return this.loggingConfiguration;
    }

    /**
     * Set the loggingConfiguration property: Settings that define where logs are stored. Describes where logs are
     * stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For examples and more
     * information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html)
     * in the *Amazon S3 API Reference*. To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request,
     * you must have ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
     * 
     * @param loggingConfiguration the loggingConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withLoggingConfiguration(LoggingConfiguration loggingConfiguration) {
        this.loggingConfiguration = loggingConfiguration;
        return this;
    }

    /**
     * Get the metricsConfigurations property: Specifies a metrics configuration for the CloudWatch request metrics
     * (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics
     * configuration, note that this is a full replacement of the existing metrics configuration. If you don't include
     * the elements you want to keep, they are erased. For more information, see
     * [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
     * 
     * @return the metricsConfigurations value.
     */
    public List<MetricsConfiguration> metricsConfigurations() {
        return this.metricsConfigurations;
    }

    /**
     * Set the metricsConfigurations property: Specifies a metrics configuration for the CloudWatch request metrics
     * (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics
     * configuration, note that this is a full replacement of the existing metrics configuration. If you don't include
     * the elements you want to keep, they are erased. For more information, see
     * [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
     * 
     * @param metricsConfigurations the metricsConfigurations value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withMetricsConfigurations(List<MetricsConfiguration> metricsConfigurations) {
        this.metricsConfigurations = metricsConfigurations;
        return this;
    }

    /**
     * Get the notificationConfiguration property: Configuration that defines how Amazon S3 handles bucket
     * notifications. Describes the notification configuration for an Amazon S3 bucket. If you create the target
     * resource and related permissions in the same template, you might have a circular dependency. For example, you
     * might use the ``AWS::Lambda::Permission`` resource to grant the bucket permission to invoke an AWS Lambda
     * function. However, AWS CloudFormation can't create the bucket until the bucket has permission to invoke the
     * function (AWS CloudFormation checks whether the bucket can invoke the function). If you're using Refs to pass the
     * bucket name, this leads to a circular dependency. To avoid this dependency, you can create all resources without
     * specifying the notification configuration. Then, update the stack with a notification configuration. For more
     * information on permissions, see
     * [AWS::Lambda::Permission](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)
     * and [Granting Permissions to Publish Event Notification Messages to a
     * Destination](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#grant-destinations-permissions-to-s3).
     * 
     * @return the notificationConfiguration value.
     */
    public NotificationConfigurationAutoGenerated2 notificationConfiguration() {
        return this.notificationConfiguration;
    }

    /**
     * Set the notificationConfiguration property: Configuration that defines how Amazon S3 handles bucket
     * notifications. Describes the notification configuration for an Amazon S3 bucket. If you create the target
     * resource and related permissions in the same template, you might have a circular dependency. For example, you
     * might use the ``AWS::Lambda::Permission`` resource to grant the bucket permission to invoke an AWS Lambda
     * function. However, AWS CloudFormation can't create the bucket until the bucket has permission to invoke the
     * function (AWS CloudFormation checks whether the bucket can invoke the function). If you're using Refs to pass the
     * bucket name, this leads to a circular dependency. To avoid this dependency, you can create all resources without
     * specifying the notification configuration. Then, update the stack with a notification configuration. For more
     * information on permissions, see
     * [AWS::Lambda::Permission](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)
     * and [Granting Permissions to Publish Event Notification Messages to a
     * Destination](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#grant-destinations-permissions-to-s3).
     * 
     * @param notificationConfiguration the notificationConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties
        withNotificationConfiguration(NotificationConfigurationAutoGenerated2 notificationConfiguration) {
        this.notificationConfiguration = notificationConfiguration;
        return this;
    }

    /**
     * Get the objectLockConfiguration property: This operation is not supported by directory buckets. Places an Object
     * Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied
     * by default to every new object placed in the specified bucket. For more information, see [Locking
     * Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). + The ``DefaultRetention`` settings
     * require both a mode and a period. + The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you
     * must select one. You cannot specify ``Days`` and ``Years`` at the same time. + You can enable Object Lock for new
     * or existing buckets. For more information, see [Configuring Object
     * Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html). Places an Object Lock
     * configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by
     * default to every new object placed in the specified bucket. For more information, see [Locking
     * Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html).
     * 
     * @return the objectLockConfiguration value.
     */
    public ObjectLockConfiguration objectLockConfiguration() {
        return this.objectLockConfiguration;
    }

    /**
     * Set the objectLockConfiguration property: This operation is not supported by directory buckets. Places an Object
     * Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied
     * by default to every new object placed in the specified bucket. For more information, see [Locking
     * Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). + The ``DefaultRetention`` settings
     * require both a mode and a period. + The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you
     * must select one. You cannot specify ``Days`` and ``Years`` at the same time. + You can enable Object Lock for new
     * or existing buckets. For more information, see [Configuring Object
     * Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html). Places an Object Lock
     * configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by
     * default to every new object placed in the specified bucket. For more information, see [Locking
     * Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html).
     * 
     * @param objectLockConfiguration the objectLockConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withObjectLockConfiguration(ObjectLockConfiguration objectLockConfiguration) {
        this.objectLockConfiguration = objectLockConfiguration;
        return this;
    }

    /**
     * Get the objectLockEnabled property: Indicates whether this bucket has an Object Lock configuration enabled.
     * Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
     * 
     * @return the objectLockEnabled value.
     */
    public Boolean objectLockEnabled() {
        return this.objectLockEnabled;
    }

    /**
     * Set the objectLockEnabled property: Indicates whether this bucket has an Object Lock configuration enabled.
     * Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
     * 
     * @param objectLockEnabled the objectLockEnabled value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withObjectLockEnabled(Boolean objectLockEnabled) {
        this.objectLockEnabled = objectLockEnabled;
        return this;
    }

    /**
     * Get the ownershipControls property: Configuration that defines how Amazon S3 handles Object Ownership rules.
     * Specifies the container element for Object Ownership rules. S3 Object Ownership is an Amazon S3 bucket-level
     * setting that you can use to disable access control lists (ACLs) and take ownership of every object in your
     * bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling
     * ownership of objects and disabling
     * ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @return the ownershipControls value.
     */
    public OwnershipControls ownershipControls() {
        return this.ownershipControls;
    }

    /**
     * Set the ownershipControls property: Configuration that defines how Amazon S3 handles Object Ownership rules.
     * Specifies the container element for Object Ownership rules. S3 Object Ownership is an Amazon S3 bucket-level
     * setting that you can use to disable access control lists (ACLs) and take ownership of every object in your
     * bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling
     * ownership of objects and disabling
     * ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @param ownershipControls the ownershipControls value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withOwnershipControls(OwnershipControls ownershipControls) {
        this.ownershipControls = ownershipControls;
        return this;
    }

    /**
     * Get the publicAccessBlockConfiguration property: Configuration that defines how Amazon S3 handles public access.
     * The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the
     * configuration options in any combination. For more information about when Amazon S3 considers a bucket or object
     * public, see [The Meaning of
     * 'Public'](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
     * in the *Amazon S3 User Guide*.
     * 
     * @return the publicAccessBlockConfiguration value.
     */
    public PublicAccessBlockConfigurationAutoGenerated publicAccessBlockConfiguration() {
        return this.publicAccessBlockConfiguration;
    }

    /**
     * Set the publicAccessBlockConfiguration property: Configuration that defines how Amazon S3 handles public access.
     * The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the
     * configuration options in any combination. For more information about when Amazon S3 considers a bucket or object
     * public, see [The Meaning of
     * 'Public'](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
     * in the *Amazon S3 User Guide*.
     * 
     * @param publicAccessBlockConfiguration the publicAccessBlockConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties
        withPublicAccessBlockConfiguration(PublicAccessBlockConfigurationAutoGenerated publicAccessBlockConfiguration) {
        this.publicAccessBlockConfiguration = publicAccessBlockConfiguration;
        return this;
    }

    /**
     * Get the regionalDomainName property: Property regionalDomainName.
     * 
     * @return the regionalDomainName value.
     */
    public String regionalDomainName() {
        return this.regionalDomainName;
    }

    /**
     * Set the regionalDomainName property: Property regionalDomainName.
     * 
     * @param regionalDomainName the regionalDomainName value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withRegionalDomainName(String regionalDomainName) {
        this.regionalDomainName = regionalDomainName;
        return this;
    }

    /**
     * Get the replicationConfiguration property: Configuration for replicating objects in an S3 bucket. To enable
     * replication, you must also enable versioning by using the ``VersioningConfiguration`` property. Amazon S3 can
     * store replicated objects in a single destination bucket or multiple destination buckets. The destination bucket
     * or buckets must already exist. A container for replication rules. You can add up to 1,000 rules. The maximum size
     * of a replication configuration is 2 MB. The latest version of the replication configuration XML is V2. For more
     * information about XML V2 replication configurations, see [Replication
     * configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-add-config.html) in the *Amazon
     * S3 User Guide*.
     * 
     * @return the replicationConfiguration value.
     */
    public ReplicationConfigurationAutoGenerated replicationConfiguration() {
        return this.replicationConfiguration;
    }

    /**
     * Set the replicationConfiguration property: Configuration for replicating objects in an S3 bucket. To enable
     * replication, you must also enable versioning by using the ``VersioningConfiguration`` property. Amazon S3 can
     * store replicated objects in a single destination bucket or multiple destination buckets. The destination bucket
     * or buckets must already exist. A container for replication rules. You can add up to 1,000 rules. The maximum size
     * of a replication configuration is 2 MB. The latest version of the replication configuration XML is V2. For more
     * information about XML V2 replication configurations, see [Replication
     * configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-add-config.html) in the *Amazon
     * S3 User Guide*.
     * 
     * @param replicationConfiguration the replicationConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties
        withReplicationConfiguration(ReplicationConfigurationAutoGenerated replicationConfiguration) {
        this.replicationConfiguration = replicationConfiguration;
        return this;
    }

    /**
     * Get the tags property: An arbitrary set of tags (key-value pairs) for this S3 bucket.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated50> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An arbitrary set of tags (key-value pairs) for this S3 bucket.
     * 
     * @param tags the tags value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withTags(List<TagAutoGenerated50> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the versioningConfiguration property: Enables multiple versions of all objects in this bucket. You might
     * enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that
     * you can retrieve previous versions of them. Describes the versioning state of an Amazon S3 bucket. For more
     * information, see [PUT Bucket
     * versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the *Amazon S3
     * API Reference*.
     * 
     * @return the versioningConfiguration value.
     */
    public VersioningConfiguration versioningConfiguration() {
        return this.versioningConfiguration;
    }

    /**
     * Set the versioningConfiguration property: Enables multiple versions of all objects in this bucket. You might
     * enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that
     * you can retrieve previous versions of them. Describes the versioning state of an Amazon S3 bucket. For more
     * information, see [PUT Bucket
     * versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the *Amazon S3
     * API Reference*.
     * 
     * @param versioningConfiguration the versioningConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withVersioningConfiguration(VersioningConfiguration versioningConfiguration) {
        this.versioningConfiguration = versioningConfiguration;
        return this;
    }

    /**
     * Get the websiteConfiguration property: Information used to configure the bucket as a static website. For more
     * information, see [Hosting Websites on Amazon
     * S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html). Specifies website configuration
     * parameters for an Amazon S3 bucket.
     * 
     * @return the websiteConfiguration value.
     */
    public WebsiteConfiguration websiteConfiguration() {
        return this.websiteConfiguration;
    }

    /**
     * Set the websiteConfiguration property: Information used to configure the bucket as a static website. For more
     * information, see [Hosting Websites on Amazon
     * S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html). Specifies website configuration
     * parameters for an Amazon S3 bucket.
     * 
     * @param websiteConfiguration the websiteConfiguration value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withWebsiteConfiguration(WebsiteConfiguration websiteConfiguration) {
        this.websiteConfiguration = websiteConfiguration;
        return this;
    }

    /**
     * Get the websiteUrl property: Property websiteURL.
     * 
     * @return the websiteUrl value.
     */
    public String websiteUrl() {
        return this.websiteUrl;
    }

    /**
     * Set the websiteUrl property: Property websiteURL.
     * 
     * @param websiteUrl the websiteUrl value to set.
     * @return the AwsS3BucketProperties object itself.
     */
    public AwsS3BucketProperties withWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accelerateConfiguration() != null) {
            accelerateConfiguration().validate();
        }
        if (analyticsConfigurations() != null) {
            analyticsConfigurations().forEach(e -> e.validate());
        }
        if (bucketEncryption() != null) {
            bucketEncryption().validate();
        }
        if (corsConfiguration() != null) {
            corsConfiguration().validate();
        }
        if (intelligentTieringConfigurations() != null) {
            intelligentTieringConfigurations().forEach(e -> e.validate());
        }
        if (inventoryConfigurations() != null) {
            inventoryConfigurations().forEach(e -> e.validate());
        }
        if (lifecycleConfiguration() != null) {
            lifecycleConfiguration().validate();
        }
        if (loggingConfiguration() != null) {
            loggingConfiguration().validate();
        }
        if (metricsConfigurations() != null) {
            metricsConfigurations().forEach(e -> e.validate());
        }
        if (notificationConfiguration() != null) {
            notificationConfiguration().validate();
        }
        if (objectLockConfiguration() != null) {
            objectLockConfiguration().validate();
        }
        if (ownershipControls() != null) {
            ownershipControls().validate();
        }
        if (publicAccessBlockConfiguration() != null) {
            publicAccessBlockConfiguration().validate();
        }
        if (replicationConfiguration() != null) {
            replicationConfiguration().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (versioningConfiguration() != null) {
            versioningConfiguration().validate();
        }
        if (websiteConfiguration() != null) {
            websiteConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("accelerateConfiguration", this.accelerateConfiguration);
        jsonWriter.writeStringField("accessControl", this.accessControl == null ? null : this.accessControl.toString());
        jsonWriter.writeArrayField("analyticsConfigurations", this.analyticsConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeJsonField("bucketEncryption", this.bucketEncryption);
        jsonWriter.writeStringField("bucketName", this.bucketName);
        jsonWriter.writeJsonField("corsConfiguration", this.corsConfiguration);
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeStringField("dualStackDomainName", this.dualStackDomainName);
        jsonWriter.writeArrayField("intelligentTieringConfigurations", this.intelligentTieringConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("inventoryConfigurations", this.inventoryConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("lifecycleConfiguration", this.lifecycleConfiguration);
        jsonWriter.writeJsonField("loggingConfiguration", this.loggingConfiguration);
        jsonWriter.writeArrayField("metricsConfigurations", this.metricsConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("notificationConfiguration", this.notificationConfiguration);
        jsonWriter.writeJsonField("objectLockConfiguration", this.objectLockConfiguration);
        jsonWriter.writeBooleanField("objectLockEnabled", this.objectLockEnabled);
        jsonWriter.writeJsonField("ownershipControls", this.ownershipControls);
        jsonWriter.writeJsonField("publicAccessBlockConfiguration", this.publicAccessBlockConfiguration);
        jsonWriter.writeStringField("regionalDomainName", this.regionalDomainName);
        jsonWriter.writeJsonField("replicationConfiguration", this.replicationConfiguration);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("versioningConfiguration", this.versioningConfiguration);
        jsonWriter.writeJsonField("websiteConfiguration", this.websiteConfiguration);
        jsonWriter.writeStringField("websiteURL", this.websiteUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsS3BucketProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsS3BucketProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsS3BucketProperties.
     */
    public static AwsS3BucketProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsS3BucketProperties deserializedAwsS3BucketProperties = new AwsS3BucketProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accelerateConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.accelerateConfiguration
                        = AccelerateConfiguration.fromJson(reader);
                } else if ("accessControl".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.accessControl = AccessControl.fromString(reader.getString());
                } else if ("analyticsConfigurations".equals(fieldName)) {
                    List<AnalyticsConfiguration> analyticsConfigurations
                        = reader.readArray(reader1 -> AnalyticsConfiguration.fromJson(reader1));
                    deserializedAwsS3BucketProperties.analyticsConfigurations = analyticsConfigurations;
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.arn = reader.getString();
                } else if ("bucketEncryption".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.bucketEncryption = BucketEncryption.fromJson(reader);
                } else if ("bucketName".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.bucketName = reader.getString();
                } else if ("corsConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.corsConfiguration = CorsConfiguration.fromJson(reader);
                } else if ("domainName".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.domainName = reader.getString();
                } else if ("dualStackDomainName".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.dualStackDomainName = reader.getString();
                } else if ("intelligentTieringConfigurations".equals(fieldName)) {
                    List<IntelligentTieringConfiguration> intelligentTieringConfigurations
                        = reader.readArray(reader1 -> IntelligentTieringConfiguration.fromJson(reader1));
                    deserializedAwsS3BucketProperties.intelligentTieringConfigurations
                        = intelligentTieringConfigurations;
                } else if ("inventoryConfigurations".equals(fieldName)) {
                    List<InventoryConfiguration> inventoryConfigurations
                        = reader.readArray(reader1 -> InventoryConfiguration.fromJson(reader1));
                    deserializedAwsS3BucketProperties.inventoryConfigurations = inventoryConfigurations;
                } else if ("lifecycleConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.lifecycleConfiguration = LifecycleConfiguration.fromJson(reader);
                } else if ("loggingConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.loggingConfiguration = LoggingConfiguration.fromJson(reader);
                } else if ("metricsConfigurations".equals(fieldName)) {
                    List<MetricsConfiguration> metricsConfigurations
                        = reader.readArray(reader1 -> MetricsConfiguration.fromJson(reader1));
                    deserializedAwsS3BucketProperties.metricsConfigurations = metricsConfigurations;
                } else if ("notificationConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.notificationConfiguration
                        = NotificationConfigurationAutoGenerated2.fromJson(reader);
                } else if ("objectLockConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.objectLockConfiguration
                        = ObjectLockConfiguration.fromJson(reader);
                } else if ("objectLockEnabled".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.objectLockEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("ownershipControls".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.ownershipControls = OwnershipControls.fromJson(reader);
                } else if ("publicAccessBlockConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.publicAccessBlockConfiguration
                        = PublicAccessBlockConfigurationAutoGenerated.fromJson(reader);
                } else if ("regionalDomainName".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.regionalDomainName = reader.getString();
                } else if ("replicationConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.replicationConfiguration
                        = ReplicationConfigurationAutoGenerated.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated50> tags = reader.readArray(reader1 -> TagAutoGenerated50.fromJson(reader1));
                    deserializedAwsS3BucketProperties.tags = tags;
                } else if ("versioningConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.versioningConfiguration
                        = VersioningConfiguration.fromJson(reader);
                } else if ("websiteConfiguration".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.websiteConfiguration = WebsiteConfiguration.fromJson(reader);
                } else if ("websiteURL".equals(fieldName)) {
                    deserializedAwsS3BucketProperties.websiteUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsS3BucketProperties;
        });
    }
}
