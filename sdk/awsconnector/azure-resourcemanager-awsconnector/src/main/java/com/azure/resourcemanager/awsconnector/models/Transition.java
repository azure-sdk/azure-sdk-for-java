// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Transition.
 */
@Fluent
public final class Transition implements JsonSerializable<Transition> {
    /*
     * The storage class to which you want the object to transition.
     */
    private TransitionStorageClass storageClass;

    /*
     * Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601
     * format. The time is always midnight UTC. The date value in ISO 8601 format. The timezone is always UTC.
     * (YYYY-MM-DDThh:mm:ssZ)
     */
    private String transitionDate;

    /*
     * Indicates the number of days after creation when objects are transitioned to the specified storage class. The
     * value must be a positive integer.
     */
    private Integer transitionInDays;

    /**
     * Creates an instance of Transition class.
     */
    public Transition() {
    }

    /**
     * Get the storageClass property: The storage class to which you want the object to transition.
     * 
     * @return the storageClass value.
     */
    public TransitionStorageClass storageClass() {
        return this.storageClass;
    }

    /**
     * Set the storageClass property: The storage class to which you want the object to transition.
     * 
     * @param storageClass the storageClass value to set.
     * @return the Transition object itself.
     */
    public Transition withStorageClass(TransitionStorageClass storageClass) {
        this.storageClass = storageClass;
        return this;
    }

    /**
     * Get the transitionDate property: Indicates when objects are transitioned to the specified storage class. The date
     * value must be in ISO 8601 format. The time is always midnight UTC. The date value in ISO 8601 format. The
     * timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ).
     * 
     * @return the transitionDate value.
     */
    public String transitionDate() {
        return this.transitionDate;
    }

    /**
     * Set the transitionDate property: Indicates when objects are transitioned to the specified storage class. The date
     * value must be in ISO 8601 format. The time is always midnight UTC. The date value in ISO 8601 format. The
     * timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ).
     * 
     * @param transitionDate the transitionDate value to set.
     * @return the Transition object itself.
     */
    public Transition withTransitionDate(String transitionDate) {
        this.transitionDate = transitionDate;
        return this;
    }

    /**
     * Get the transitionInDays property: Indicates the number of days after creation when objects are transitioned to
     * the specified storage class. The value must be a positive integer.
     * 
     * @return the transitionInDays value.
     */
    public Integer transitionInDays() {
        return this.transitionInDays;
    }

    /**
     * Set the transitionInDays property: Indicates the number of days after creation when objects are transitioned to
     * the specified storage class. The value must be a positive integer.
     * 
     * @param transitionInDays the transitionInDays value to set.
     * @return the Transition object itself.
     */
    public Transition withTransitionInDays(Integer transitionInDays) {
        this.transitionInDays = transitionInDays;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageClass", this.storageClass == null ? null : this.storageClass.toString());
        jsonWriter.writeStringField("transitionDate", this.transitionDate);
        jsonWriter.writeNumberField("transitionInDays", this.transitionInDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Transition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Transition if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Transition.
     */
    public static Transition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Transition deserializedTransition = new Transition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageClass".equals(fieldName)) {
                    deserializedTransition.storageClass = TransitionStorageClass.fromString(reader.getString());
                } else if ("transitionDate".equals(fieldName)) {
                    deserializedTransition.transitionDate = reader.getString();
                } else if ("transitionInDays".equals(fieldName)) {
                    deserializedTransition.transitionInDays = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransition;
        });
    }
}
