// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RuntimePlatform.
 */
@Fluent
public final class RuntimePlatform implements JsonSerializable<RuntimePlatform> {
    /*
     * The CPU architecture. You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``.
     * This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
     */
    private String cpuArchitecture;

    /*
     * The operating system.
     */
    private String operatingSystemFamily;

    /**
     * Creates an instance of RuntimePlatform class.
     */
    public RuntimePlatform() {
    }

    /**
     * Get the cpuArchitecture property: The CPU architecture. You can run your Linux tasks on an ARM-based platform by
     * setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux
     * containers on Fargate.
     * 
     * @return the cpuArchitecture value.
     */
    public String cpuArchitecture() {
        return this.cpuArchitecture;
    }

    /**
     * Set the cpuArchitecture property: The CPU architecture. You can run your Linux tasks on an ARM-based platform by
     * setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux
     * containers on Fargate.
     * 
     * @param cpuArchitecture the cpuArchitecture value to set.
     * @return the RuntimePlatform object itself.
     */
    public RuntimePlatform withCpuArchitecture(String cpuArchitecture) {
        this.cpuArchitecture = cpuArchitecture;
        return this;
    }

    /**
     * Get the operatingSystemFamily property: The operating system.
     * 
     * @return the operatingSystemFamily value.
     */
    public String operatingSystemFamily() {
        return this.operatingSystemFamily;
    }

    /**
     * Set the operatingSystemFamily property: The operating system.
     * 
     * @param operatingSystemFamily the operatingSystemFamily value to set.
     * @return the RuntimePlatform object itself.
     */
    public RuntimePlatform withOperatingSystemFamily(String operatingSystemFamily) {
        this.operatingSystemFamily = operatingSystemFamily;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cpuArchitecture", this.cpuArchitecture);
        jsonWriter.writeStringField("operatingSystemFamily", this.operatingSystemFamily);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuntimePlatform from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuntimePlatform if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuntimePlatform.
     */
    public static RuntimePlatform fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuntimePlatform deserializedRuntimePlatform = new RuntimePlatform();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cpuArchitecture".equals(fieldName)) {
                    deserializedRuntimePlatform.cpuArchitecture = reader.getString();
                } else if ("operatingSystemFamily".equals(fieldName)) {
                    deserializedRuntimePlatform.operatingSystemFamily = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuntimePlatform;
        });
    }
}
