// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of GenerateSecretString.
 */
@Fluent
public final class GenerateSecretString implements JsonSerializable<GenerateSecretString> {
    /*
     * A string of the characters that you don't want in the password.
     */
    private String excludeCharacters;

    /*
     * Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password
     * can contain lowercase letters.
     */
    private Boolean excludeLowercase;

    /*
     * Specifies whether to exclude numbers from the password. If you don't include this switch, the password can
     * contain numbers.
     */
    private Boolean excludeNumbers;

    /*
     * Specifies whether to exclude the following punctuation characters from the password: ``! ' # $ % & ' ( ) * + , -
     * . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~``. If you don't include this switch, the password can contain punctuation.
     */
    private Boolean excludePunctuation;

    /*
     * Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password
     * can contain uppercase letters.
     */
    private Boolean excludeUppercase;

    /*
     * The JSON key name for the key/value pair, where the value is the generated password. This pair is added to the
     * JSON structure specified by the ``SecretStringTemplate`` parameter. If you specify this parameter, then you must
     * also specify ``SecretStringTemplate``.
     */
    private String generateStringKey;

    /*
     * Specifies whether to include the space character. If you include this switch, the password can contain space
     * characters.
     */
    private Boolean includeSpace;

    /*
     * The length of the password. If you don't include this parameter, the default length is 32 characters.
     */
    private Integer passwordLength;

    /*
     * Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you
     * don't include this switch, the password contains at least one of every character type.
     */
    private Boolean requireEachIncludedType;

    /*
     * A template that the generated string must match. When you make a change to this property, a new secret version is
     * created.
     */
    private String secretStringTemplate;

    /**
     * Creates an instance of GenerateSecretString class.
     */
    public GenerateSecretString() {
    }

    /**
     * Get the excludeCharacters property: A string of the characters that you don't want in the password.
     * 
     * @return the excludeCharacters value.
     */
    public String excludeCharacters() {
        return this.excludeCharacters;
    }

    /**
     * Set the excludeCharacters property: A string of the characters that you don't want in the password.
     * 
     * @param excludeCharacters the excludeCharacters value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withExcludeCharacters(String excludeCharacters) {
        this.excludeCharacters = excludeCharacters;
        return this;
    }

    /**
     * Get the excludeLowercase property: Specifies whether to exclude lowercase letters from the password. If you don't
     * include this switch, the password can contain lowercase letters.
     * 
     * @return the excludeLowercase value.
     */
    public Boolean excludeLowercase() {
        return this.excludeLowercase;
    }

    /**
     * Set the excludeLowercase property: Specifies whether to exclude lowercase letters from the password. If you don't
     * include this switch, the password can contain lowercase letters.
     * 
     * @param excludeLowercase the excludeLowercase value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withExcludeLowercase(Boolean excludeLowercase) {
        this.excludeLowercase = excludeLowercase;
        return this;
    }

    /**
     * Get the excludeNumbers property: Specifies whether to exclude numbers from the password. If you don't include
     * this switch, the password can contain numbers.
     * 
     * @return the excludeNumbers value.
     */
    public Boolean excludeNumbers() {
        return this.excludeNumbers;
    }

    /**
     * Set the excludeNumbers property: Specifies whether to exclude numbers from the password. If you don't include
     * this switch, the password can contain numbers.
     * 
     * @param excludeNumbers the excludeNumbers value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withExcludeNumbers(Boolean excludeNumbers) {
        this.excludeNumbers = excludeNumbers;
        return this;
    }

    /**
     * Get the excludePunctuation property: Specifies whether to exclude the following punctuation characters from the
     * password: ``! ' # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? &#064; [ \ ] ^ _ ` { | } ~``. If you don't
     * include this switch, the password can contain punctuation.
     * 
     * @return the excludePunctuation value.
     */
    public Boolean excludePunctuation() {
        return this.excludePunctuation;
    }

    /**
     * Set the excludePunctuation property: Specifies whether to exclude the following punctuation characters from the
     * password: ``! ' # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? &#064; [ \ ] ^ _ ` { | } ~``. If you don't
     * include this switch, the password can contain punctuation.
     * 
     * @param excludePunctuation the excludePunctuation value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withExcludePunctuation(Boolean excludePunctuation) {
        this.excludePunctuation = excludePunctuation;
        return this;
    }

    /**
     * Get the excludeUppercase property: Specifies whether to exclude uppercase letters from the password. If you don't
     * include this switch, the password can contain uppercase letters.
     * 
     * @return the excludeUppercase value.
     */
    public Boolean excludeUppercase() {
        return this.excludeUppercase;
    }

    /**
     * Set the excludeUppercase property: Specifies whether to exclude uppercase letters from the password. If you don't
     * include this switch, the password can contain uppercase letters.
     * 
     * @param excludeUppercase the excludeUppercase value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withExcludeUppercase(Boolean excludeUppercase) {
        this.excludeUppercase = excludeUppercase;
        return this;
    }

    /**
     * Get the generateStringKey property: The JSON key name for the key/value pair, where the value is the generated
     * password. This pair is added to the JSON structure specified by the ``SecretStringTemplate`` parameter. If you
     * specify this parameter, then you must also specify ``SecretStringTemplate``.
     * 
     * @return the generateStringKey value.
     */
    public String generateStringKey() {
        return this.generateStringKey;
    }

    /**
     * Set the generateStringKey property: The JSON key name for the key/value pair, where the value is the generated
     * password. This pair is added to the JSON structure specified by the ``SecretStringTemplate`` parameter. If you
     * specify this parameter, then you must also specify ``SecretStringTemplate``.
     * 
     * @param generateStringKey the generateStringKey value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withGenerateStringKey(String generateStringKey) {
        this.generateStringKey = generateStringKey;
        return this;
    }

    /**
     * Get the includeSpace property: Specifies whether to include the space character. If you include this switch, the
     * password can contain space characters.
     * 
     * @return the includeSpace value.
     */
    public Boolean includeSpace() {
        return this.includeSpace;
    }

    /**
     * Set the includeSpace property: Specifies whether to include the space character. If you include this switch, the
     * password can contain space characters.
     * 
     * @param includeSpace the includeSpace value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withIncludeSpace(Boolean includeSpace) {
        this.includeSpace = includeSpace;
        return this;
    }

    /**
     * Get the passwordLength property: The length of the password. If you don't include this parameter, the default
     * length is 32 characters.
     * 
     * @return the passwordLength value.
     */
    public Integer passwordLength() {
        return this.passwordLength;
    }

    /**
     * Set the passwordLength property: The length of the password. If you don't include this parameter, the default
     * length is 32 characters.
     * 
     * @param passwordLength the passwordLength value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withPasswordLength(Integer passwordLength) {
        this.passwordLength = passwordLength;
        return this;
    }

    /**
     * Get the requireEachIncludedType property: Specifies whether to include at least one upper and lowercase letter,
     * one number, and one punctuation. If you don't include this switch, the password contains at least one of every
     * character type.
     * 
     * @return the requireEachIncludedType value.
     */
    public Boolean requireEachIncludedType() {
        return this.requireEachIncludedType;
    }

    /**
     * Set the requireEachIncludedType property: Specifies whether to include at least one upper and lowercase letter,
     * one number, and one punctuation. If you don't include this switch, the password contains at least one of every
     * character type.
     * 
     * @param requireEachIncludedType the requireEachIncludedType value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withRequireEachIncludedType(Boolean requireEachIncludedType) {
        this.requireEachIncludedType = requireEachIncludedType;
        return this;
    }

    /**
     * Get the secretStringTemplate property: A template that the generated string must match. When you make a change to
     * this property, a new secret version is created.
     * 
     * @return the secretStringTemplate value.
     */
    public String secretStringTemplate() {
        return this.secretStringTemplate;
    }

    /**
     * Set the secretStringTemplate property: A template that the generated string must match. When you make a change to
     * this property, a new secret version is created.
     * 
     * @param secretStringTemplate the secretStringTemplate value to set.
     * @return the GenerateSecretString object itself.
     */
    public GenerateSecretString withSecretStringTemplate(String secretStringTemplate) {
        this.secretStringTemplate = secretStringTemplate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("excludeCharacters", this.excludeCharacters);
        jsonWriter.writeBooleanField("excludeLowercase", this.excludeLowercase);
        jsonWriter.writeBooleanField("excludeNumbers", this.excludeNumbers);
        jsonWriter.writeBooleanField("excludePunctuation", this.excludePunctuation);
        jsonWriter.writeBooleanField("excludeUppercase", this.excludeUppercase);
        jsonWriter.writeStringField("generateStringKey", this.generateStringKey);
        jsonWriter.writeBooleanField("includeSpace", this.includeSpace);
        jsonWriter.writeNumberField("passwordLength", this.passwordLength);
        jsonWriter.writeBooleanField("requireEachIncludedType", this.requireEachIncludedType);
        jsonWriter.writeStringField("secretStringTemplate", this.secretStringTemplate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenerateSecretString from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenerateSecretString if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GenerateSecretString.
     */
    public static GenerateSecretString fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenerateSecretString deserializedGenerateSecretString = new GenerateSecretString();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("excludeCharacters".equals(fieldName)) {
                    deserializedGenerateSecretString.excludeCharacters = reader.getString();
                } else if ("excludeLowercase".equals(fieldName)) {
                    deserializedGenerateSecretString.excludeLowercase = reader.getNullable(JsonReader::getBoolean);
                } else if ("excludeNumbers".equals(fieldName)) {
                    deserializedGenerateSecretString.excludeNumbers = reader.getNullable(JsonReader::getBoolean);
                } else if ("excludePunctuation".equals(fieldName)) {
                    deserializedGenerateSecretString.excludePunctuation = reader.getNullable(JsonReader::getBoolean);
                } else if ("excludeUppercase".equals(fieldName)) {
                    deserializedGenerateSecretString.excludeUppercase = reader.getNullable(JsonReader::getBoolean);
                } else if ("generateStringKey".equals(fieldName)) {
                    deserializedGenerateSecretString.generateStringKey = reader.getString();
                } else if ("includeSpace".equals(fieldName)) {
                    deserializedGenerateSecretString.includeSpace = reader.getNullable(JsonReader::getBoolean);
                } else if ("passwordLength".equals(fieldName)) {
                    deserializedGenerateSecretString.passwordLength = reader.getNullable(JsonReader::getInt);
                } else if ("requireEachIncludedType".equals(fieldName)) {
                    deserializedGenerateSecretString.requireEachIncludedType
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("secretStringTemplate".equals(fieldName)) {
                    deserializedGenerateSecretString.secretStringTemplate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenerateSecretString;
        });
    }
}
