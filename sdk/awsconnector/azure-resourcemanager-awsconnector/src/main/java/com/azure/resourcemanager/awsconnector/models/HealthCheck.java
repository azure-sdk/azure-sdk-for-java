// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of HealthCheck.
 */
@Fluent
public final class HealthCheck implements JsonSerializable<HealthCheck> {
    /*
     * A string array representing the command that the container runs to determine if it is healthy. The string array
     * must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the
     * container's default shell. When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose
     * the list of commands in double quotes and brackets. ``[ 'CMD-SHELL', 'curl -f http://localhost/ || exit 1' ]``
     * You don't include the double quotes and brackets when you use the AWS Management Console. ``CMD-SHELL, curl -f
     * http://localhost/ || exit 1`` An exit code of 0 indicates success, and non-zero exit code indicates failure. For
     * more information, see ``HealthCheck`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
     */
    private List<String> command;

    /*
     * The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The
     * default value is 30 seconds.
     */
    private Integer interval;

    /*
     * The number of times to retry a failed health check before the container is considered unhealthy. You may specify
     * between 1 and 10 retries. The default value is 3.
     */
    private Integer retries;

    /*
     * The optional grace period to provide containers time to bootstrap before failed health checks count towards the
     * maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off. If
     * a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent
     * failures count toward the maximum number of retries.
     */
    private Integer startPeriod;

    /*
     * The time period in seconds to wait for a health check to succeed before it is considered a failure. You may
     * specify between 2 and 60 seconds. The default value is 5.
     */
    private Integer timeout;

    /**
     * Creates an instance of HealthCheck class.
     */
    public HealthCheck() {
    }

    /**
     * Get the command property: A string array representing the command that the container runs to determine if it is
     * healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run
     * the command with the container's default shell. When you use the AWS Management Console JSON panel, the CLIlong,
     * or the APIs, enclose the list of commands in double quotes and brackets. ``[ 'CMD-SHELL', 'curl -f
     * http://localhost/ || exit 1' ]`` You don't include the double quotes and brackets when you use the AWS Management
     * Console. ``CMD-SHELL, curl -f http://localhost/ || exit 1`` An exit code of 0 indicates success, and non-zero
     * exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
     * 
     * @return the command value.
     */
    public List<String> command() {
        return this.command;
    }

    /**
     * Set the command property: A string array representing the command that the container runs to determine if it is
     * healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run
     * the command with the container's default shell. When you use the AWS Management Console JSON panel, the CLIlong,
     * or the APIs, enclose the list of commands in double quotes and brackets. ``[ 'CMD-SHELL', 'curl -f
     * http://localhost/ || exit 1' ]`` You don't include the double quotes and brackets when you use the AWS Management
     * Console. ``CMD-SHELL, curl -f http://localhost/ || exit 1`` An exit code of 0 indicates success, and non-zero
     * exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
     * 
     * @param command the command value to set.
     * @return the HealthCheck object itself.
     */
    public HealthCheck withCommand(List<String> command) {
        this.command = command;
        return this;
    }

    /**
     * Get the interval property: The time period in seconds between each health check execution. You may specify
     * between 5 and 300 seconds. The default value is 30 seconds.
     * 
     * @return the interval value.
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * Set the interval property: The time period in seconds between each health check execution. You may specify
     * between 5 and 300 seconds. The default value is 30 seconds.
     * 
     * @param interval the interval value to set.
     * @return the HealthCheck object itself.
     */
    public HealthCheck withInterval(Integer interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the retries property: The number of times to retry a failed health check before the container is considered
     * unhealthy. You may specify between 1 and 10 retries. The default value is 3.
     * 
     * @return the retries value.
     */
    public Integer retries() {
        return this.retries;
    }

    /**
     * Set the retries property: The number of times to retry a failed health check before the container is considered
     * unhealthy. You may specify between 1 and 10 retries. The default value is 3.
     * 
     * @param retries the retries value to set.
     * @return the HealthCheck object itself.
     */
    public HealthCheck withRetries(Integer retries) {
        this.retries = retries;
        return this;
    }

    /**
     * Get the startPeriod property: The optional grace period to provide containers time to bootstrap before failed
     * health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default,
     * the ``startPeriod`` is off. If a health check succeeds within the ``startPeriod``, then the container is
     * considered healthy and any subsequent failures count toward the maximum number of retries.
     * 
     * @return the startPeriod value.
     */
    public Integer startPeriod() {
        return this.startPeriod;
    }

    /**
     * Set the startPeriod property: The optional grace period to provide containers time to bootstrap before failed
     * health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default,
     * the ``startPeriod`` is off. If a health check succeeds within the ``startPeriod``, then the container is
     * considered healthy and any subsequent failures count toward the maximum number of retries.
     * 
     * @param startPeriod the startPeriod value to set.
     * @return the HealthCheck object itself.
     */
    public HealthCheck withStartPeriod(Integer startPeriod) {
        this.startPeriod = startPeriod;
        return this;
    }

    /**
     * Get the timeout property: The time period in seconds to wait for a health check to succeed before it is
     * considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The time period in seconds to wait for a health check to succeed before it is
     * considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
     * 
     * @param timeout the timeout value to set.
     * @return the HealthCheck object itself.
     */
    public HealthCheck withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("command", this.command, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("interval", this.interval);
        jsonWriter.writeNumberField("retries", this.retries);
        jsonWriter.writeNumberField("startPeriod", this.startPeriod);
        jsonWriter.writeNumberField("timeout", this.timeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthCheck from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthCheck if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HealthCheck.
     */
    public static HealthCheck fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthCheck deserializedHealthCheck = new HealthCheck();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("command".equals(fieldName)) {
                    List<String> command = reader.readArray(reader1 -> reader1.getString());
                    deserializedHealthCheck.command = command;
                } else if ("interval".equals(fieldName)) {
                    deserializedHealthCheck.interval = reader.getNullable(JsonReader::getInt);
                } else if ("retries".equals(fieldName)) {
                    deserializedHealthCheck.retries = reader.getNullable(JsonReader::getInt);
                } else if ("startPeriod".equals(fieldName)) {
                    deserializedHealthCheck.startPeriod = reader.getNullable(JsonReader::getInt);
                } else if ("timeout".equals(fieldName)) {
                    deserializedHealthCheck.timeout = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthCheck;
        });
    }
}
