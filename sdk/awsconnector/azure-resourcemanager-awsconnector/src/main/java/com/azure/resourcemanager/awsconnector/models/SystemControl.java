// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SystemControl.
 */
@Fluent
public final class SystemControl implements JsonSerializable<SystemControl> {
    /*
     * The namespaced kernel parameter to set a ``value`` for.
     */
    private String namespace;

    /*
     * The namespaced kernel parameter to set a ``value`` for. Valid IPC namespace values: ``'kernel.msgmax' |
     * 'kernel.msgmnb' | 'kernel.msgmni' | 'kernel.sem' | 'kernel.shmall' | 'kernel.shmmax' | 'kernel.shmmni' |
     * 'kernel.shm_rmid_forced'``, and ``Sysctls`` that start with ``'fs.mqueue.*'`` Valid network namespace values:
     * ``Sysctls`` that start with ``'net.*'`` All of these values are supported by Fargate.
     */
    private String value;

    /**
     * Creates an instance of SystemControl class.
     */
    public SystemControl() {
    }

    /**
     * Get the namespace property: The namespaced kernel parameter to set a ``value`` for.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespaced kernel parameter to set a ``value`` for.
     * 
     * @param namespace the namespace value to set.
     * @return the SystemControl object itself.
     */
    public SystemControl withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the value property: The namespaced kernel parameter to set a ``value`` for. Valid IPC namespace values:
     * ``'kernel.msgmax' | 'kernel.msgmnb' | 'kernel.msgmni' | 'kernel.sem' | 'kernel.shmall' | 'kernel.shmmax' |
     * 'kernel.shmmni' | 'kernel.shm_rmid_forced'``, and ``Sysctls`` that start with ``'fs.mqueue.*'`` Valid network
     * namespace values: ``Sysctls`` that start with ``'net.*'`` All of these values are supported by Fargate.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The namespaced kernel parameter to set a ``value`` for. Valid IPC namespace values:
     * ``'kernel.msgmax' | 'kernel.msgmnb' | 'kernel.msgmni' | 'kernel.sem' | 'kernel.shmall' | 'kernel.shmmax' |
     * 'kernel.shmmni' | 'kernel.shm_rmid_forced'``, and ``Sysctls`` that start with ``'fs.mqueue.*'`` Valid network
     * namespace values: ``Sysctls`` that start with ``'net.*'`` All of these values are supported by Fargate.
     * 
     * @param value the value value to set.
     * @return the SystemControl object itself.
     */
    public SystemControl withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SystemControl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SystemControl if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SystemControl.
     */
    public static SystemControl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SystemControl deserializedSystemControl = new SystemControl();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespace".equals(fieldName)) {
                    deserializedSystemControl.namespace = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedSystemControl.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSystemControl;
        });
    }
}
