// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of awsConfigServiceConfigurationRecorderStatus.
 */
@Fluent
public final class AwsConfigServiceConfigurationRecorderStatusProperties
    implements JsonSerializable<AwsConfigServiceConfigurationRecorderStatusProperties> {
    /*
     * <p>The latest error code from when the recorder last failed.</p>
     */
    private String lastErrorCode;

    /*
     * <p>The latest error message from when the recorder last failed.</p>
     */
    private String lastErrorMessage;

    /*
     * <p>The time the recorder was last started.</p>
     */
    private OffsetDateTime lastStartTime;

    /*
     * <p>The status of the latest recording event processed by the recorder.</p>
     */
    private RecorderStatusEnumValue lastStatus;

    /*
     * <p>The time of the latest change in status of an recording event processed by the recorder.</p>
     */
    private OffsetDateTime lastStatusChangeTime;

    /*
     * <p>The time the recorder was last stopped.</p>
     */
    private OffsetDateTime lastStopTime;

    /*
     * <p>The name of the configuration recorder.</p>
     */
    private String name;

    /*
     * <p>Specifies whether or not the recorder is currently recording.</p>
     */
    private Boolean recording;

    /**
     * Creates an instance of AwsConfigServiceConfigurationRecorderStatusProperties class.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties() {
    }

    /**
     * Get the lastErrorCode property: &lt;p&gt;The latest error code from when the recorder last failed.&lt;/p&gt;.
     * 
     * @return the lastErrorCode value.
     */
    public String lastErrorCode() {
        return this.lastErrorCode;
    }

    /**
     * Set the lastErrorCode property: &lt;p&gt;The latest error code from when the recorder last failed.&lt;/p&gt;.
     * 
     * @param lastErrorCode the lastErrorCode value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withLastErrorCode(String lastErrorCode) {
        this.lastErrorCode = lastErrorCode;
        return this;
    }

    /**
     * Get the lastErrorMessage property: &lt;p&gt;The latest error message from when the recorder last
     * failed.&lt;/p&gt;.
     * 
     * @return the lastErrorMessage value.
     */
    public String lastErrorMessage() {
        return this.lastErrorMessage;
    }

    /**
     * Set the lastErrorMessage property: &lt;p&gt;The latest error message from when the recorder last
     * failed.&lt;/p&gt;.
     * 
     * @param lastErrorMessage the lastErrorMessage value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withLastErrorMessage(String lastErrorMessage) {
        this.lastErrorMessage = lastErrorMessage;
        return this;
    }

    /**
     * Get the lastStartTime property: &lt;p&gt;The time the recorder was last started.&lt;/p&gt;.
     * 
     * @return the lastStartTime value.
     */
    public OffsetDateTime lastStartTime() {
        return this.lastStartTime;
    }

    /**
     * Set the lastStartTime property: &lt;p&gt;The time the recorder was last started.&lt;/p&gt;.
     * 
     * @param lastStartTime the lastStartTime value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withLastStartTime(OffsetDateTime lastStartTime) {
        this.lastStartTime = lastStartTime;
        return this;
    }

    /**
     * Get the lastStatus property: &lt;p&gt;The status of the latest recording event processed by the
     * recorder.&lt;/p&gt;.
     * 
     * @return the lastStatus value.
     */
    public RecorderStatusEnumValue lastStatus() {
        return this.lastStatus;
    }

    /**
     * Set the lastStatus property: &lt;p&gt;The status of the latest recording event processed by the
     * recorder.&lt;/p&gt;.
     * 
     * @param lastStatus the lastStatus value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withLastStatus(RecorderStatusEnumValue lastStatus) {
        this.lastStatus = lastStatus;
        return this;
    }

    /**
     * Get the lastStatusChangeTime property: &lt;p&gt;The time of the latest change in status of an recording event
     * processed by the recorder.&lt;/p&gt;.
     * 
     * @return the lastStatusChangeTime value.
     */
    public OffsetDateTime lastStatusChangeTime() {
        return this.lastStatusChangeTime;
    }

    /**
     * Set the lastStatusChangeTime property: &lt;p&gt;The time of the latest change in status of an recording event
     * processed by the recorder.&lt;/p&gt;.
     * 
     * @param lastStatusChangeTime the lastStatusChangeTime value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties
        withLastStatusChangeTime(OffsetDateTime lastStatusChangeTime) {
        this.lastStatusChangeTime = lastStatusChangeTime;
        return this;
    }

    /**
     * Get the lastStopTime property: &lt;p&gt;The time the recorder was last stopped.&lt;/p&gt;.
     * 
     * @return the lastStopTime value.
     */
    public OffsetDateTime lastStopTime() {
        return this.lastStopTime;
    }

    /**
     * Set the lastStopTime property: &lt;p&gt;The time the recorder was last stopped.&lt;/p&gt;.
     * 
     * @param lastStopTime the lastStopTime value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withLastStopTime(OffsetDateTime lastStopTime) {
        this.lastStopTime = lastStopTime;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name of the configuration recorder.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name of the configuration recorder.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the recording property: &lt;p&gt;Specifies whether or not the recorder is currently recording.&lt;/p&gt;.
     * 
     * @return the recording value.
     */
    public Boolean recording() {
        return this.recording;
    }

    /**
     * Set the recording property: &lt;p&gt;Specifies whether or not the recorder is currently recording.&lt;/p&gt;.
     * 
     * @param recording the recording value to set.
     * @return the AwsConfigServiceConfigurationRecorderStatusProperties object itself.
     */
    public AwsConfigServiceConfigurationRecorderStatusProperties withRecording(Boolean recording) {
        this.recording = recording;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lastStatus() != null) {
            lastStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lastErrorCode", this.lastErrorCode);
        jsonWriter.writeStringField("lastErrorMessage", this.lastErrorMessage);
        jsonWriter.writeStringField("lastStartTime",
            this.lastStartTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastStartTime));
        jsonWriter.writeJsonField("lastStatus", this.lastStatus);
        jsonWriter.writeStringField("lastStatusChangeTime",
            this.lastStatusChangeTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastStatusChangeTime));
        jsonWriter.writeStringField("lastStopTime",
            this.lastStopTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastStopTime));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("recording", this.recording);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsConfigServiceConfigurationRecorderStatusProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsConfigServiceConfigurationRecorderStatusProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsConfigServiceConfigurationRecorderStatusProperties.
     */
    public static AwsConfigServiceConfigurationRecorderStatusProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AwsConfigServiceConfigurationRecorderStatusProperties deserializedAwsConfigServiceConfigurationRecorderStatusProperties
                = new AwsConfigServiceConfigurationRecorderStatusProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lastErrorCode".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.lastErrorCode
                        = reader.getString();
                } else if ("lastErrorMessage".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.lastErrorMessage
                        = reader.getString();
                } else if ("lastStartTime".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.lastStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastStatus".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.lastStatus
                        = RecorderStatusEnumValue.fromJson(reader);
                } else if ("lastStatusChangeTime".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.lastStatusChangeTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastStopTime".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.lastStopTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("name".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.name = reader.getString();
                } else if ("recording".equals(fieldName)) {
                    deserializedAwsConfigServiceConfigurationRecorderStatusProperties.recording
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsConfigServiceConfigurationRecorderStatusProperties;
        });
    }
}
