// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of S3BucketSource.
 */
@Fluent
public final class S3BucketSource implements JsonSerializable<S3BucketSource> {
    /*
     * The S3 bucket that is being imported from.
     */
    private String s3Bucket;

    /*
     * The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is
     * optional.
     */
    private String s3BucketOwner;

    /*
     * The key prefix shared by all S3 Objects that are being imported.
     */
    private String s3KeyPrefix;

    /**
     * Creates an instance of S3BucketSource class.
     */
    public S3BucketSource() {
    }

    /**
     * Get the s3Bucket property: The S3 bucket that is being imported from.
     * 
     * @return the s3Bucket value.
     */
    public String s3Bucket() {
        return this.s3Bucket;
    }

    /**
     * Set the s3Bucket property: The S3 bucket that is being imported from.
     * 
     * @param s3Bucket the s3Bucket value to set.
     * @return the S3BucketSource object itself.
     */
    public S3BucketSource withS3Bucket(String s3Bucket) {
        this.s3Bucket = s3Bucket;
        return this;
    }

    /**
     * Get the s3BucketOwner property: The account number of the S3 bucket that is being imported from. If the bucket is
     * owned by the requester this is optional.
     * 
     * @return the s3BucketOwner value.
     */
    public String s3BucketOwner() {
        return this.s3BucketOwner;
    }

    /**
     * Set the s3BucketOwner property: The account number of the S3 bucket that is being imported from. If the bucket is
     * owned by the requester this is optional.
     * 
     * @param s3BucketOwner the s3BucketOwner value to set.
     * @return the S3BucketSource object itself.
     */
    public S3BucketSource withS3BucketOwner(String s3BucketOwner) {
        this.s3BucketOwner = s3BucketOwner;
        return this;
    }

    /**
     * Get the s3KeyPrefix property: The key prefix shared by all S3 Objects that are being imported.
     * 
     * @return the s3KeyPrefix value.
     */
    public String s3KeyPrefix() {
        return this.s3KeyPrefix;
    }

    /**
     * Set the s3KeyPrefix property: The key prefix shared by all S3 Objects that are being imported.
     * 
     * @param s3KeyPrefix the s3KeyPrefix value to set.
     * @return the S3BucketSource object itself.
     */
    public S3BucketSource withS3KeyPrefix(String s3KeyPrefix) {
        this.s3KeyPrefix = s3KeyPrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("s3Bucket", this.s3Bucket);
        jsonWriter.writeStringField("s3BucketOwner", this.s3BucketOwner);
        jsonWriter.writeStringField("s3KeyPrefix", this.s3KeyPrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of S3BucketSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of S3BucketSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the S3BucketSource.
     */
    public static S3BucketSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            S3BucketSource deserializedS3BucketSource = new S3BucketSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("s3Bucket".equals(fieldName)) {
                    deserializedS3BucketSource.s3Bucket = reader.getString();
                } else if ("s3BucketOwner".equals(fieldName)) {
                    deserializedS3BucketSource.s3BucketOwner = reader.getString();
                } else if ("s3KeyPrefix".equals(fieldName)) {
                    deserializedS3BucketSource.s3KeyPrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedS3BucketSource;
        });
    }
}
