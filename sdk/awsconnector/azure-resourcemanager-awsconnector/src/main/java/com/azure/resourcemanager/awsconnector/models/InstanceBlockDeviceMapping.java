// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InstanceBlockDeviceMapping.
 */
@Fluent
public final class InstanceBlockDeviceMapping implements JsonSerializable<InstanceBlockDeviceMapping> {
    /*
     * <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
     */
    private String deviceName;

    /*
     * <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
     */
    private EbsInstanceBlockDevice ebs;

    /**
     * Creates an instance of InstanceBlockDeviceMapping class.
     */
    public InstanceBlockDeviceMapping() {
    }

    /**
     * Get the deviceName property: &lt;p&gt;The device name (for example, &lt;code&gt;/dev/sdh&lt;/code&gt; or
     * &lt;code&gt;xvdh&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @return the deviceName value.
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Set the deviceName property: &lt;p&gt;The device name (for example, &lt;code&gt;/dev/sdh&lt;/code&gt; or
     * &lt;code&gt;xvdh&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @param deviceName the deviceName value to set.
     * @return the InstanceBlockDeviceMapping object itself.
     */
    public InstanceBlockDeviceMapping withDeviceName(String deviceName) {
        this.deviceName = deviceName;
        return this;
    }

    /**
     * Get the ebs property: &lt;p&gt;Parameters used to automatically set up EBS volumes when the instance is
     * launched.&lt;/p&gt;.
     * 
     * @return the ebs value.
     */
    public EbsInstanceBlockDevice ebs() {
        return this.ebs;
    }

    /**
     * Set the ebs property: &lt;p&gt;Parameters used to automatically set up EBS volumes when the instance is
     * launched.&lt;/p&gt;.
     * 
     * @param ebs the ebs value to set.
     * @return the InstanceBlockDeviceMapping object itself.
     */
    public InstanceBlockDeviceMapping withEbs(EbsInstanceBlockDevice ebs) {
        this.ebs = ebs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ebs() != null) {
            ebs().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceName", this.deviceName);
        jsonWriter.writeJsonField("ebs", this.ebs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceBlockDeviceMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceBlockDeviceMapping if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceBlockDeviceMapping.
     */
    public static InstanceBlockDeviceMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceBlockDeviceMapping deserializedInstanceBlockDeviceMapping = new InstanceBlockDeviceMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceName".equals(fieldName)) {
                    deserializedInstanceBlockDeviceMapping.deviceName = reader.getString();
                } else if ("ebs".equals(fieldName)) {
                    deserializedInstanceBlockDeviceMapping.ebs = EbsInstanceBlockDevice.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceBlockDeviceMapping;
        });
    }
}
