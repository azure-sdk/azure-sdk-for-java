// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of PlacementGroupConfig.
 */
@Fluent
public final class PlacementGroupConfig implements JsonSerializable<PlacementGroupConfig> {
    /*
     * <p>Role of the instance in the cluster.</p> <p>Starting with Amazon EMR release 5.23.0, the only supported
     * instance role is <code>MASTER</code>.</p>
     */
    private InstanceRoleTypeEnumValue instanceRole;

    /*
     * <p>Amazon EC2 Placement Group strategy associated with instance role.</p> <p>Starting with Amazon EMR release
     * 5.23.0, the only supported placement strategy is <code>SPREAD</code> for the <code>MASTER</code> instance
     * role.</p>
     */
    private PlacementGroupStrategyEnumValue placementStrategy;

    /**
     * Creates an instance of PlacementGroupConfig class.
     */
    public PlacementGroupConfig() {
    }

    /**
     * Get the instanceRole property: &lt;p&gt;Role of the instance in the cluster.&lt;/p&gt; &lt;p&gt;Starting with
     * Amazon EMR release 5.23.0, the only supported instance role is &lt;code&gt;MASTER&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the instanceRole value.
     */
    public InstanceRoleTypeEnumValue instanceRole() {
        return this.instanceRole;
    }

    /**
     * Set the instanceRole property: &lt;p&gt;Role of the instance in the cluster.&lt;/p&gt; &lt;p&gt;Starting with
     * Amazon EMR release 5.23.0, the only supported instance role is &lt;code&gt;MASTER&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param instanceRole the instanceRole value to set.
     * @return the PlacementGroupConfig object itself.
     */
    public PlacementGroupConfig withInstanceRole(InstanceRoleTypeEnumValue instanceRole) {
        this.instanceRole = instanceRole;
        return this;
    }

    /**
     * Get the placementStrategy property: &lt;p&gt;Amazon EC2 Placement Group strategy associated with instance
     * role.&lt;/p&gt; &lt;p&gt;Starting with Amazon EMR release 5.23.0, the only supported placement strategy is
     * &lt;code&gt;SPREAD&lt;/code&gt; for the &lt;code&gt;MASTER&lt;/code&gt; instance role.&lt;/p&gt;.
     * 
     * @return the placementStrategy value.
     */
    public PlacementGroupStrategyEnumValue placementStrategy() {
        return this.placementStrategy;
    }

    /**
     * Set the placementStrategy property: &lt;p&gt;Amazon EC2 Placement Group strategy associated with instance
     * role.&lt;/p&gt; &lt;p&gt;Starting with Amazon EMR release 5.23.0, the only supported placement strategy is
     * &lt;code&gt;SPREAD&lt;/code&gt; for the &lt;code&gt;MASTER&lt;/code&gt; instance role.&lt;/p&gt;.
     * 
     * @param placementStrategy the placementStrategy value to set.
     * @return the PlacementGroupConfig object itself.
     */
    public PlacementGroupConfig withPlacementStrategy(PlacementGroupStrategyEnumValue placementStrategy) {
        this.placementStrategy = placementStrategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceRole() != null) {
            instanceRole().validate();
        }
        if (placementStrategy() != null) {
            placementStrategy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("instanceRole", this.instanceRole);
        jsonWriter.writeJsonField("placementStrategy", this.placementStrategy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementGroupConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementGroupConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementGroupConfig.
     */
    public static PlacementGroupConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementGroupConfig deserializedPlacementGroupConfig = new PlacementGroupConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceRole".equals(fieldName)) {
                    deserializedPlacementGroupConfig.instanceRole = InstanceRoleTypeEnumValue.fromJson(reader);
                } else if ("placementStrategy".equals(fieldName)) {
                    deserializedPlacementGroupConfig.placementStrategy
                        = PlacementGroupStrategyEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementGroupConfig;
        });
    }
}
