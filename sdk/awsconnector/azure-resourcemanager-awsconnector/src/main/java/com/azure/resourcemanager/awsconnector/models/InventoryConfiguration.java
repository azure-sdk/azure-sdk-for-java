// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of InventoryConfiguration.
 */
@Fluent
public final class InventoryConfiguration implements JsonSerializable<InventoryConfiguration> {
    /*
     * Contains information about where to publish the inventory results. Specifies information about where to publish
     * analysis or configuration results for an Amazon S3 bucket.
     */
    private Destination destination;

    /*
     * Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If
     * set to ``False``, no inventory list is generated.
     */
    private Boolean enabled;

    /*
     * The ID used to identify the inventory configuration.
     */
    private String id;

    /*
     * Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions,
     * which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to
     * ``Current``, the list does not contain these version-related fields.
     */
    private InventoryConfigurationIncludedObjectVersions includedObjectVersions;

    /*
     * Contains the optional fields that are included in the inventory results.
     */
    private List<InventoryConfigurationOptionalFields> optionalFields;

    /*
     * Specifies the inventory filter prefix.
     */
    private String prefix;

    /*
     * Specifies the schedule for generating inventory results.
     */
    private InventoryConfigurationScheduleFrequency scheduleFrequency;

    /**
     * Creates an instance of InventoryConfiguration class.
     */
    public InventoryConfiguration() {
    }

    /**
     * Get the destination property: Contains information about where to publish the inventory results. Specifies
     * information about where to publish analysis or configuration results for an Amazon S3 bucket.
     * 
     * @return the destination value.
     */
    public Destination destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Contains information about where to publish the inventory results. Specifies
     * information about where to publish analysis or configuration results for an Amazon S3 bucket.
     * 
     * @param destination the destination value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration withDestination(Destination destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the enabled property: Specifies whether the inventory is enabled or disabled. If set to ``True``, an
     * inventory list is generated. If set to ``False``, no inventory list is generated.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Specifies whether the inventory is enabled or disabled. If set to ``True``, an
     * inventory list is generated. If set to ``False``, no inventory list is generated.
     * 
     * @param enabled the enabled value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the id property: The ID used to identify the inventory configuration.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID used to identify the inventory configuration.
     * 
     * @param id the id value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the includedObjectVersions property: Object versions to include in the inventory list. If set to ``All``, the
     * list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and
     * ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
     * 
     * @return the includedObjectVersions value.
     */
    public InventoryConfigurationIncludedObjectVersions includedObjectVersions() {
        return this.includedObjectVersions;
    }

    /**
     * Set the includedObjectVersions property: Object versions to include in the inventory list. If set to ``All``, the
     * list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and
     * ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
     * 
     * @param includedObjectVersions the includedObjectVersions value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration
        withIncludedObjectVersions(InventoryConfigurationIncludedObjectVersions includedObjectVersions) {
        this.includedObjectVersions = includedObjectVersions;
        return this;
    }

    /**
     * Get the optionalFields property: Contains the optional fields that are included in the inventory results.
     * 
     * @return the optionalFields value.
     */
    public List<InventoryConfigurationOptionalFields> optionalFields() {
        return this.optionalFields;
    }

    /**
     * Set the optionalFields property: Contains the optional fields that are included in the inventory results.
     * 
     * @param optionalFields the optionalFields value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration withOptionalFields(List<InventoryConfigurationOptionalFields> optionalFields) {
        this.optionalFields = optionalFields;
        return this;
    }

    /**
     * Get the prefix property: Specifies the inventory filter prefix.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: Specifies the inventory filter prefix.
     * 
     * @param prefix the prefix value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the scheduleFrequency property: Specifies the schedule for generating inventory results.
     * 
     * @return the scheduleFrequency value.
     */
    public InventoryConfigurationScheduleFrequency scheduleFrequency() {
        return this.scheduleFrequency;
    }

    /**
     * Set the scheduleFrequency property: Specifies the schedule for generating inventory results.
     * 
     * @param scheduleFrequency the scheduleFrequency value to set.
     * @return the InventoryConfiguration object itself.
     */
    public InventoryConfiguration withScheduleFrequency(InventoryConfigurationScheduleFrequency scheduleFrequency) {
        this.scheduleFrequency = scheduleFrequency;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destination() != null) {
            destination().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("destination", this.destination);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("includedObjectVersions",
            this.includedObjectVersions == null ? null : this.includedObjectVersions.toString());
        jsonWriter.writeArrayField("optionalFields", this.optionalFields,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("scheduleFrequency",
            this.scheduleFrequency == null ? null : this.scheduleFrequency.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InventoryConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InventoryConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InventoryConfiguration.
     */
    public static InventoryConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InventoryConfiguration deserializedInventoryConfiguration = new InventoryConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destination".equals(fieldName)) {
                    deserializedInventoryConfiguration.destination = Destination.fromJson(reader);
                } else if ("enabled".equals(fieldName)) {
                    deserializedInventoryConfiguration.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("id".equals(fieldName)) {
                    deserializedInventoryConfiguration.id = reader.getString();
                } else if ("includedObjectVersions".equals(fieldName)) {
                    deserializedInventoryConfiguration.includedObjectVersions
                        = InventoryConfigurationIncludedObjectVersions.fromString(reader.getString());
                } else if ("optionalFields".equals(fieldName)) {
                    List<InventoryConfigurationOptionalFields> optionalFields = reader
                        .readArray(reader1 -> InventoryConfigurationOptionalFields.fromString(reader1.getString()));
                    deserializedInventoryConfiguration.optionalFields = optionalFields;
                } else if ("prefix".equals(fieldName)) {
                    deserializedInventoryConfiguration.prefix = reader.getString();
                } else if ("scheduleFrequency".equals(fieldName)) {
                    deserializedInventoryConfiguration.scheduleFrequency
                        = InventoryConfigurationScheduleFrequency.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInventoryConfiguration;
        });
    }
}
