// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CertificateDetails.
 */
@Fluent
public final class CertificateDetails implements JsonSerializable<CertificateDetails> {
    /*
     * The CA identifier of the CA certificate used for the DB instance's server certificate.
     */
    private String caIdentifier;

    /*
     * The expiration date of the DB instance’s server certificate.
     */
    private String validTill;

    /**
     * Creates an instance of CertificateDetails class.
     */
    public CertificateDetails() {
    }

    /**
     * Get the caIdentifier property: The CA identifier of the CA certificate used for the DB instance's server
     * certificate.
     * 
     * @return the caIdentifier value.
     */
    public String caIdentifier() {
        return this.caIdentifier;
    }

    /**
     * Set the caIdentifier property: The CA identifier of the CA certificate used for the DB instance's server
     * certificate.
     * 
     * @param caIdentifier the caIdentifier value to set.
     * @return the CertificateDetails object itself.
     */
    public CertificateDetails withCaIdentifier(String caIdentifier) {
        this.caIdentifier = caIdentifier;
        return this;
    }

    /**
     * Get the validTill property: The expiration date of the DB instance’s server certificate.
     * 
     * @return the validTill value.
     */
    public String validTill() {
        return this.validTill;
    }

    /**
     * Set the validTill property: The expiration date of the DB instance’s server certificate.
     * 
     * @param validTill the validTill value to set.
     * @return the CertificateDetails object itself.
     */
    public CertificateDetails withValidTill(String validTill) {
        this.validTill = validTill;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("caIdentifier", this.caIdentifier);
        jsonWriter.writeStringField("validTill", this.validTill);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CertificateDetails.
     */
    public static CertificateDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateDetails deserializedCertificateDetails = new CertificateDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("caIdentifier".equals(fieldName)) {
                    deserializedCertificateDetails.caIdentifier = reader.getString();
                } else if ("validTill".equals(fieldName)) {
                    deserializedCertificateDetails.validTill = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateDetails;
        });
    }
}
