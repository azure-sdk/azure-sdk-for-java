// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Output.
 */
@Fluent
public final class Output implements JsonSerializable<Output> {
    /*
     * Property description
     */
    private String description;

    /*
     * Property exportName
     */
    private String exportName;

    /*
     * Property outputKey
     */
    private String outputKey;

    /*
     * Property outputValue
     */
    private String outputValue;

    /**
     * Creates an instance of Output class.
     */
    public Output() {
    }

    /**
     * Get the description property: Property description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Property description.
     * 
     * @param description the description value to set.
     * @return the Output object itself.
     */
    public Output withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the exportName property: Property exportName.
     * 
     * @return the exportName value.
     */
    public String exportName() {
        return this.exportName;
    }

    /**
     * Set the exportName property: Property exportName.
     * 
     * @param exportName the exportName value to set.
     * @return the Output object itself.
     */
    public Output withExportName(String exportName) {
        this.exportName = exportName;
        return this;
    }

    /**
     * Get the outputKey property: Property outputKey.
     * 
     * @return the outputKey value.
     */
    public String outputKey() {
        return this.outputKey;
    }

    /**
     * Set the outputKey property: Property outputKey.
     * 
     * @param outputKey the outputKey value to set.
     * @return the Output object itself.
     */
    public Output withOutputKey(String outputKey) {
        this.outputKey = outputKey;
        return this;
    }

    /**
     * Get the outputValue property: Property outputValue.
     * 
     * @return the outputValue value.
     */
    public String outputValue() {
        return this.outputValue;
    }

    /**
     * Set the outputValue property: Property outputValue.
     * 
     * @param outputValue the outputValue value to set.
     * @return the Output object itself.
     */
    public Output withOutputValue(String outputValue) {
        this.outputValue = outputValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("exportName", this.exportName);
        jsonWriter.writeStringField("outputKey", this.outputKey);
        jsonWriter.writeStringField("outputValue", this.outputValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Output from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Output if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Output.
     */
    public static Output fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Output deserializedOutput = new Output();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedOutput.description = reader.getString();
                } else if ("exportName".equals(fieldName)) {
                    deserializedOutput.exportName = reader.getString();
                } else if ("outputKey".equals(fieldName)) {
                    deserializedOutput.outputKey = reader.getString();
                } else if ("outputValue".equals(fieldName)) {
                    deserializedOutput.outputValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOutput;
        });
    }
}
