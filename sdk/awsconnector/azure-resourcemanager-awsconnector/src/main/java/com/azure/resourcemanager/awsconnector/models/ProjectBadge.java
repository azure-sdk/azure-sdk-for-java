// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ProjectBadge.
 */
@Fluent
public final class ProjectBadge implements JsonSerializable<ProjectBadge> {
    /*
     * <p>Set this to true to generate a publicly accessible URL for your project's build badge.</p>
     */
    private Boolean badgeEnabled;

    /*
     * <p>The publicly-accessible URL through which you can access the build badge for your project. </p>
     */
    private String badgeRequestUrl;

    /**
     * Creates an instance of ProjectBadge class.
     */
    public ProjectBadge() {
    }

    /**
     * Get the badgeEnabled property: &lt;p&gt;Set this to true to generate a publicly accessible URL for your project's
     * build badge.&lt;/p&gt;.
     * 
     * @return the badgeEnabled value.
     */
    public Boolean badgeEnabled() {
        return this.badgeEnabled;
    }

    /**
     * Set the badgeEnabled property: &lt;p&gt;Set this to true to generate a publicly accessible URL for your project's
     * build badge.&lt;/p&gt;.
     * 
     * @param badgeEnabled the badgeEnabled value to set.
     * @return the ProjectBadge object itself.
     */
    public ProjectBadge withBadgeEnabled(Boolean badgeEnabled) {
        this.badgeEnabled = badgeEnabled;
        return this;
    }

    /**
     * Get the badgeRequestUrl property: &lt;p&gt;The publicly-accessible URL through which you can access the build
     * badge for your project. &lt;/p&gt;.
     * 
     * @return the badgeRequestUrl value.
     */
    public String badgeRequestUrl() {
        return this.badgeRequestUrl;
    }

    /**
     * Set the badgeRequestUrl property: &lt;p&gt;The publicly-accessible URL through which you can access the build
     * badge for your project. &lt;/p&gt;.
     * 
     * @param badgeRequestUrl the badgeRequestUrl value to set.
     * @return the ProjectBadge object itself.
     */
    public ProjectBadge withBadgeRequestUrl(String badgeRequestUrl) {
        this.badgeRequestUrl = badgeRequestUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("badgeEnabled", this.badgeEnabled);
        jsonWriter.writeStringField("badgeRequestUrl", this.badgeRequestUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectBadge from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectBadge if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectBadge.
     */
    public static ProjectBadge fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectBadge deserializedProjectBadge = new ProjectBadge();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("badgeEnabled".equals(fieldName)) {
                    deserializedProjectBadge.badgeEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("badgeRequestUrl".equals(fieldName)) {
                    deserializedProjectBadge.badgeRequestUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectBadge;
        });
    }
}
