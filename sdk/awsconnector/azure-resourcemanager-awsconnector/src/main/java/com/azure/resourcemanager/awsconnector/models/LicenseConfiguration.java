// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LicenseConfiguration.
 */
@Fluent
public final class LicenseConfiguration implements JsonSerializable<LicenseConfiguration> {
    /*
     * <p>The Amazon Resource Name (ARN) of the license configuration.</p>
     */
    private String licenseConfigurationArn;

    /**
     * Creates an instance of LicenseConfiguration class.
     */
    public LicenseConfiguration() {
    }

    /**
     * Get the licenseConfigurationArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the license
     * configuration.&lt;/p&gt;.
     * 
     * @return the licenseConfigurationArn value.
     */
    public String licenseConfigurationArn() {
        return this.licenseConfigurationArn;
    }

    /**
     * Set the licenseConfigurationArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the license
     * configuration.&lt;/p&gt;.
     * 
     * @param licenseConfigurationArn the licenseConfigurationArn value to set.
     * @return the LicenseConfiguration object itself.
     */
    public LicenseConfiguration withLicenseConfigurationArn(String licenseConfigurationArn) {
        this.licenseConfigurationArn = licenseConfigurationArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("licenseConfigurationArn", this.licenseConfigurationArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LicenseConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LicenseConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LicenseConfiguration.
     */
    public static LicenseConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LicenseConfiguration deserializedLicenseConfiguration = new LicenseConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("licenseConfigurationArn".equals(fieldName)) {
                    deserializedLicenseConfiguration.licenseConfigurationArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLicenseConfiguration;
        });
    }
}
