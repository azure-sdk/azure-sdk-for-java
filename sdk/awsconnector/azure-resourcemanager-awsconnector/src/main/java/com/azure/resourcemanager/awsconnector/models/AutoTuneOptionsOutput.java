// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AutoTuneOptionsOutput.
 */
@Fluent
public final class AutoTuneOptionsOutput implements JsonSerializable<AutoTuneOptionsOutput> {
    /*
     * <p>Any errors that occurred while enabling or disabling Auto-Tune.</p>
     */
    private String errorMessage;

    /*
     * <p>The current state of Auto-Tune on the domain.</p>
     */
    private AutoTuneStateEnumValue state;

    /*
     * <p>Whether the domain's off-peak window will be used to deploy Auto-Tune changes rather than a maintenance
     * schedule.</p>
     */
    private Boolean useOffPeakWindow;

    /**
     * Creates an instance of AutoTuneOptionsOutput class.
     */
    public AutoTuneOptionsOutput() {
    }

    /**
     * Get the errorMessage property: &lt;p&gt;Any errors that occurred while enabling or disabling
     * Auto-Tune.&lt;/p&gt;.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: &lt;p&gt;Any errors that occurred while enabling or disabling
     * Auto-Tune.&lt;/p&gt;.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the AutoTuneOptionsOutput object itself.
     */
    public AutoTuneOptionsOutput withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the state property: &lt;p&gt;The current state of Auto-Tune on the domain.&lt;/p&gt;.
     * 
     * @return the state value.
     */
    public AutoTuneStateEnumValue state() {
        return this.state;
    }

    /**
     * Set the state property: &lt;p&gt;The current state of Auto-Tune on the domain.&lt;/p&gt;.
     * 
     * @param state the state value to set.
     * @return the AutoTuneOptionsOutput object itself.
     */
    public AutoTuneOptionsOutput withState(AutoTuneStateEnumValue state) {
        this.state = state;
        return this;
    }

    /**
     * Get the useOffPeakWindow property: &lt;p&gt;Whether the domain's off-peak window will be used to deploy Auto-Tune
     * changes rather than a maintenance schedule.&lt;/p&gt;.
     * 
     * @return the useOffPeakWindow value.
     */
    public Boolean useOffPeakWindow() {
        return this.useOffPeakWindow;
    }

    /**
     * Set the useOffPeakWindow property: &lt;p&gt;Whether the domain's off-peak window will be used to deploy Auto-Tune
     * changes rather than a maintenance schedule.&lt;/p&gt;.
     * 
     * @param useOffPeakWindow the useOffPeakWindow value to set.
     * @return the AutoTuneOptionsOutput object itself.
     */
    public AutoTuneOptionsOutput withUseOffPeakWindow(Boolean useOffPeakWindow) {
        this.useOffPeakWindow = useOffPeakWindow;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() != null) {
            state().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeJsonField("state", this.state);
        jsonWriter.writeBooleanField("useOffPeakWindow", this.useOffPeakWindow);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AutoTuneOptionsOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AutoTuneOptionsOutput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AutoTuneOptionsOutput.
     */
    public static AutoTuneOptionsOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AutoTuneOptionsOutput deserializedAutoTuneOptionsOutput = new AutoTuneOptionsOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorMessage".equals(fieldName)) {
                    deserializedAutoTuneOptionsOutput.errorMessage = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAutoTuneOptionsOutput.state = AutoTuneStateEnumValue.fromJson(reader);
                } else if ("useOffPeakWindow".equals(fieldName)) {
                    deserializedAutoTuneOptionsOutput.useOffPeakWindow = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAutoTuneOptionsOutput;
        });
    }
}
