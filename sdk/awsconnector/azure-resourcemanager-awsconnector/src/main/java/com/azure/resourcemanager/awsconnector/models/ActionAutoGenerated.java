// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Action.
 */
@Fluent
public final class ActionAutoGenerated implements JsonSerializable<ActionAutoGenerated> {
    /*
     * [HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is
     * ``authenticate-cognito``. Specifies information required when integrating with Amazon Cognito to authenticate
     * users.
     */
    private AuthenticateCognitoConfig authenticateCognitoConfig;

    /*
     * [HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify
     * only when ``Type`` is ``authenticate-oidc``. Specifies information required using an identity provide (IdP) that
     * is compliant with OpenID Connect (OIDC) to authenticate users.
     */
    private AuthenticateOidcConfig authenticateOidcConfig;

    /*
     * [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only
     * when ``Type`` is ``fixed-response``. Specifies information required when returning a custom HTTP response.
     */
    private FixedResponseConfig fixedResponseConfig;

    /*
     * Information for creating an action that distributes requests among one or more target groups. For Network Load
     * Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both
     * ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it
     * must be the same target group specified in ``TargetGroupArn``. Information for creating an action that
     * distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target
     * group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``,
     * you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in
     * ``TargetGroupArn``.
     */
    private ForwardConfig forwardConfig;

    /*
     * The order for the action. This value is required for rules with multiple actions. The action with the lowest
     * value for order is performed first.
     */
    private Integer order;

    /*
     * [Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is
     * ``redirect``. Information about a redirect action. A URI consists of the following components:
     * protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect
     * loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values. You
     * can reuse URI components using the following reserved keywords: + #{protocol} + #{host} + #{port} + #{path} (the
     * leading '/' is removed) + #{query} For example, you can change the path to '/new/#{path}', the hostname to
     * 'example.#{host}', or the query to '#{query}&value=xyz'.
     */
    private RedirectConfig redirectConfig;

    /*
     * The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to
     * route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.
     */
    private String targetGroupArn;

    /*
     * The type of action.
     */
    private String type;

    /**
     * Creates an instance of ActionAutoGenerated class.
     */
    public ActionAutoGenerated() {
    }

    /**
     * Get the authenticateCognitoConfig property: [HTTPS listeners] Information for using Amazon Cognito to
     * authenticate users. Specify only when ``Type`` is ``authenticate-cognito``. Specifies information required when
     * integrating with Amazon Cognito to authenticate users.
     * 
     * @return the authenticateCognitoConfig value.
     */
    public AuthenticateCognitoConfig authenticateCognitoConfig() {
        return this.authenticateCognitoConfig;
    }

    /**
     * Set the authenticateCognitoConfig property: [HTTPS listeners] Information for using Amazon Cognito to
     * authenticate users. Specify only when ``Type`` is ``authenticate-cognito``. Specifies information required when
     * integrating with Amazon Cognito to authenticate users.
     * 
     * @param authenticateCognitoConfig the authenticateCognitoConfig value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withAuthenticateCognitoConfig(AuthenticateCognitoConfig authenticateCognitoConfig) {
        this.authenticateCognitoConfig = authenticateCognitoConfig;
        return this;
    }

    /**
     * Get the authenticateOidcConfig property: [HTTPS listeners] Information about an identity provider that is
     * compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``. Specifies information
     * required using an identity provide (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
     * 
     * @return the authenticateOidcConfig value.
     */
    public AuthenticateOidcConfig authenticateOidcConfig() {
        return this.authenticateOidcConfig;
    }

    /**
     * Set the authenticateOidcConfig property: [HTTPS listeners] Information about an identity provider that is
     * compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``. Specifies information
     * required using an identity provide (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
     * 
     * @param authenticateOidcConfig the authenticateOidcConfig value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withAuthenticateOidcConfig(AuthenticateOidcConfig authenticateOidcConfig) {
        this.authenticateOidcConfig = authenticateOidcConfig;
        return this;
    }

    /**
     * Get the fixedResponseConfig property: [Application Load Balancer] Information for creating an action that returns
     * a custom HTTP response. Specify only when ``Type`` is ``fixed-response``. Specifies information required when
     * returning a custom HTTP response.
     * 
     * @return the fixedResponseConfig value.
     */
    public FixedResponseConfig fixedResponseConfig() {
        return this.fixedResponseConfig;
    }

    /**
     * Set the fixedResponseConfig property: [Application Load Balancer] Information for creating an action that returns
     * a custom HTTP response. Specify only when ``Type`` is ``fixed-response``. Specifies information required when
     * returning a custom HTTP response.
     * 
     * @param fixedResponseConfig the fixedResponseConfig value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withFixedResponseConfig(FixedResponseConfig fixedResponseConfig) {
        this.fixedResponseConfig = fixedResponseConfig;
        return this;
    }

    /**
     * Get the forwardConfig property: Information for creating an action that distributes requests among one or more
     * target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is
     * ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group
     * using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``. Information for
     * creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can
     * specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig``
     * and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same
     * target group specified in ``TargetGroupArn``.
     * 
     * @return the forwardConfig value.
     */
    public ForwardConfig forwardConfig() {
        return this.forwardConfig;
    }

    /**
     * Set the forwardConfig property: Information for creating an action that distributes requests among one or more
     * target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is
     * ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group
     * using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``. Information for
     * creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can
     * specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig``
     * and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same
     * target group specified in ``TargetGroupArn``.
     * 
     * @param forwardConfig the forwardConfig value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withForwardConfig(ForwardConfig forwardConfig) {
        this.forwardConfig = forwardConfig;
        return this;
    }

    /**
     * Get the order property: The order for the action. This value is required for rules with multiple actions. The
     * action with the lowest value for order is performed first.
     * 
     * @return the order value.
     */
    public Integer order() {
        return this.order;
    }

    /**
     * Set the order property: The order for the action. This value is required for rules with multiple actions. The
     * action with the lowest value for order is performed first.
     * 
     * @param order the order value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withOrder(Integer order) {
        this.order = order;
        return this;
    }

    /**
     * Get the redirectConfig property: [Application Load Balancer] Information for creating a redirect action. Specify
     * only when ``Type`` is ``redirect``. Information about a redirect action. A URI consists of the following
     * components: protocol://hostname:port/path?query. You must modify at least one of the following components to
     * avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their
     * original values. You can reuse URI components using the following reserved keywords: + #{protocol} + #{host} +
     * #{port} + #{path} (the leading '/' is removed) + #{query} For example, you can change the path to '/new/#{path}',
     * the hostname to 'example.#{host}', or the query to '#{query}&amp;value=xyz'.
     * 
     * @return the redirectConfig value.
     */
    public RedirectConfig redirectConfig() {
        return this.redirectConfig;
    }

    /**
     * Set the redirectConfig property: [Application Load Balancer] Information for creating a redirect action. Specify
     * only when ``Type`` is ``redirect``. Information about a redirect action. A URI consists of the following
     * components: protocol://hostname:port/path?query. You must modify at least one of the following components to
     * avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their
     * original values. You can reuse URI components using the following reserved keywords: + #{protocol} + #{host} +
     * #{port} + #{path} (the leading '/' is removed) + #{query} For example, you can change the path to '/new/#{path}',
     * the hostname to 'example.#{host}', or the query to '#{query}&amp;value=xyz'.
     * 
     * @param redirectConfig the redirectConfig value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withRedirectConfig(RedirectConfig redirectConfig) {
        this.redirectConfig = redirectConfig;
        return this;
    }

    /**
     * Get the targetGroupArn property: The Amazon Resource Name (ARN) of the target group. Specify only when ``Type``
     * is ``forward`` and you want to route to a single target group. To route to one or more target groups, use
     * ``ForwardConfig`` instead.
     * 
     * @return the targetGroupArn value.
     */
    public String targetGroupArn() {
        return this.targetGroupArn;
    }

    /**
     * Set the targetGroupArn property: The Amazon Resource Name (ARN) of the target group. Specify only when ``Type``
     * is ``forward`` and you want to route to a single target group. To route to one or more target groups, use
     * ``ForwardConfig`` instead.
     * 
     * @param targetGroupArn the targetGroupArn value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withTargetGroupArn(String targetGroupArn) {
        this.targetGroupArn = targetGroupArn;
        return this;
    }

    /**
     * Get the type property: The type of action.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of action.
     * 
     * @param type the type value to set.
     * @return the ActionAutoGenerated object itself.
     */
    public ActionAutoGenerated withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authenticateCognitoConfig() != null) {
            authenticateCognitoConfig().validate();
        }
        if (authenticateOidcConfig() != null) {
            authenticateOidcConfig().validate();
        }
        if (fixedResponseConfig() != null) {
            fixedResponseConfig().validate();
        }
        if (forwardConfig() != null) {
            forwardConfig().validate();
        }
        if (redirectConfig() != null) {
            redirectConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authenticateCognitoConfig", this.authenticateCognitoConfig);
        jsonWriter.writeJsonField("authenticateOidcConfig", this.authenticateOidcConfig);
        jsonWriter.writeJsonField("fixedResponseConfig", this.fixedResponseConfig);
        jsonWriter.writeJsonField("forwardConfig", this.forwardConfig);
        jsonWriter.writeNumberField("order", this.order);
        jsonWriter.writeJsonField("redirectConfig", this.redirectConfig);
        jsonWriter.writeStringField("targetGroupArn", this.targetGroupArn);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionAutoGenerated if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActionAutoGenerated.
     */
    public static ActionAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActionAutoGenerated deserializedActionAutoGenerated = new ActionAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticateCognitoConfig".equals(fieldName)) {
                    deserializedActionAutoGenerated.authenticateCognitoConfig
                        = AuthenticateCognitoConfig.fromJson(reader);
                } else if ("authenticateOidcConfig".equals(fieldName)) {
                    deserializedActionAutoGenerated.authenticateOidcConfig = AuthenticateOidcConfig.fromJson(reader);
                } else if ("fixedResponseConfig".equals(fieldName)) {
                    deserializedActionAutoGenerated.fixedResponseConfig = FixedResponseConfig.fromJson(reader);
                } else if ("forwardConfig".equals(fieldName)) {
                    deserializedActionAutoGenerated.forwardConfig = ForwardConfig.fromJson(reader);
                } else if ("order".equals(fieldName)) {
                    deserializedActionAutoGenerated.order = reader.getNullable(JsonReader::getInt);
                } else if ("redirectConfig".equals(fieldName)) {
                    deserializedActionAutoGenerated.redirectConfig = RedirectConfig.fromJson(reader);
                } else if ("targetGroupArn".equals(fieldName)) {
                    deserializedActionAutoGenerated.targetGroupArn = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedActionAutoGenerated.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActionAutoGenerated;
        });
    }
}
