// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InstanceMaintenancePolicy.
 */
@Fluent
public final class InstanceMaintenancePolicy implements JsonSerializable<InstanceMaintenancePolicy> {
    /*
     * Specifies the upper threshold as a percentage of the desired capacity of the Auto Scaling group. It represents
     * the maximum percentage of the group that can be in service and healthy, or pending, to support your workload when
     * replacing instances. Value range is 100 to 200. To clear a previously set value, specify a value of ``-1``. Both
     * ``MinHealthyPercentage`` and ``MaxHealthyPercentage`` must be specified, and the difference between them cannot
     * be greater than 100. A large range increases the number of instances that can be replaced at the same time.
     */
    private Integer maxHealthyPercentage;

    /*
     * Specifies the lower threshold as a percentage of the desired capacity of the Auto Scaling group. It represents
     * the minimum percentage of the group to keep in service, healthy, and ready to use to support your workload when
     * replacing instances. Value range is 0 to 100. To clear a previously set value, specify a value of ``-1``.
     */
    private Integer minHealthyPercentage;

    /**
     * Creates an instance of InstanceMaintenancePolicy class.
     */
    public InstanceMaintenancePolicy() {
    }

    /**
     * Get the maxHealthyPercentage property: Specifies the upper threshold as a percentage of the desired capacity of
     * the Auto Scaling group. It represents the maximum percentage of the group that can be in service and healthy, or
     * pending, to support your workload when replacing instances. Value range is 100 to 200. To clear a previously set
     * value, specify a value of ``-1``. Both ``MinHealthyPercentage`` and ``MaxHealthyPercentage`` must be specified,
     * and the difference between them cannot be greater than 100. A large range increases the number of instances that
     * can be replaced at the same time.
     * 
     * @return the maxHealthyPercentage value.
     */
    public Integer maxHealthyPercentage() {
        return this.maxHealthyPercentage;
    }

    /**
     * Set the maxHealthyPercentage property: Specifies the upper threshold as a percentage of the desired capacity of
     * the Auto Scaling group. It represents the maximum percentage of the group that can be in service and healthy, or
     * pending, to support your workload when replacing instances. Value range is 100 to 200. To clear a previously set
     * value, specify a value of ``-1``. Both ``MinHealthyPercentage`` and ``MaxHealthyPercentage`` must be specified,
     * and the difference between them cannot be greater than 100. A large range increases the number of instances that
     * can be replaced at the same time.
     * 
     * @param maxHealthyPercentage the maxHealthyPercentage value to set.
     * @return the InstanceMaintenancePolicy object itself.
     */
    public InstanceMaintenancePolicy withMaxHealthyPercentage(Integer maxHealthyPercentage) {
        this.maxHealthyPercentage = maxHealthyPercentage;
        return this;
    }

    /**
     * Get the minHealthyPercentage property: Specifies the lower threshold as a percentage of the desired capacity of
     * the Auto Scaling group. It represents the minimum percentage of the group to keep in service, healthy, and ready
     * to use to support your workload when replacing instances. Value range is 0 to 100. To clear a previously set
     * value, specify a value of ``-1``.
     * 
     * @return the minHealthyPercentage value.
     */
    public Integer minHealthyPercentage() {
        return this.minHealthyPercentage;
    }

    /**
     * Set the minHealthyPercentage property: Specifies the lower threshold as a percentage of the desired capacity of
     * the Auto Scaling group. It represents the minimum percentage of the group to keep in service, healthy, and ready
     * to use to support your workload when replacing instances. Value range is 0 to 100. To clear a previously set
     * value, specify a value of ``-1``.
     * 
     * @param minHealthyPercentage the minHealthyPercentage value to set.
     * @return the InstanceMaintenancePolicy object itself.
     */
    public InstanceMaintenancePolicy withMinHealthyPercentage(Integer minHealthyPercentage) {
        this.minHealthyPercentage = minHealthyPercentage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxHealthyPercentage", this.maxHealthyPercentage);
        jsonWriter.writeNumberField("minHealthyPercentage", this.minHealthyPercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceMaintenancePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceMaintenancePolicy if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceMaintenancePolicy.
     */
    public static InstanceMaintenancePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceMaintenancePolicy deserializedInstanceMaintenancePolicy = new InstanceMaintenancePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxHealthyPercentage".equals(fieldName)) {
                    deserializedInstanceMaintenancePolicy.maxHealthyPercentage = reader.getNullable(JsonReader::getInt);
                } else if ("minHealthyPercentage".equals(fieldName)) {
                    deserializedInstanceMaintenancePolicy.minHealthyPercentage = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceMaintenancePolicy;
        });
    }
}
