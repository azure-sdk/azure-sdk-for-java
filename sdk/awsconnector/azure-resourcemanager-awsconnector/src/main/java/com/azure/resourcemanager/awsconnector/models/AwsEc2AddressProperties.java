// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2Address.
 */
@Fluent
public final class AwsEc2AddressProperties implements JsonSerializable<AwsEc2AddressProperties> {
    /*
     * <p>The ID representing the allocation of the address.</p>
     */
    private String allocationId;

    /*
     * <p>The ID representing the association of the address with an instance.</p>
     */
    private String associationId;

    /*
     * <p>The carrier IP address associated. This option is only available for network interfaces which reside in a
     * subnet in a Wavelength Zone (for example an EC2 instance). </p>
     */
    private String carrierIp;

    /*
     * <p>The customer-owned IP address.</p>
     */
    private String customerOwnedIp;

    /*
     * <p>The ID of the customer-owned address pool.</p>
     */
    private String customerOwnedIpv4Pool;

    /*
     * <p>The network (<code>vpc</code>).</p>
     */
    private DomainTypeEnumValue domain;

    /*
     * <p>The ID of the instance that the address is associated with (if any).</p>
     */
    private String instanceId;

    /*
     * <p>The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web
     * Services advertises IP addresses.</p>
     */
    private String networkBorderGroup;

    /*
     * <p>The ID of the network interface.</p>
     */
    private String networkInterfaceId;

    /*
     * <p>The ID of the Amazon Web Services account that owns the network interface.</p>
     */
    private String networkInterfaceOwnerId;

    /*
     * <p>The private IP address associated with the Elastic IP address.</p>
     */
    private String privateIpAddress;

    /*
     * <p>The Elastic IP address.</p>
     */
    private String publicIp;

    /*
     * <p>The ID of an address pool.</p>
     */
    private String publicIpv4Pool;

    /*
     * <p>Any tags assigned to the Elastic IP address.</p>
     */
    private List<TagAutoGenerated9> tags;

    /**
     * Creates an instance of AwsEc2AddressProperties class.
     */
    public AwsEc2AddressProperties() {
    }

    /**
     * Get the allocationId property: &lt;p&gt;The ID representing the allocation of the address.&lt;/p&gt;.
     * 
     * @return the allocationId value.
     */
    public String allocationId() {
        return this.allocationId;
    }

    /**
     * Set the allocationId property: &lt;p&gt;The ID representing the allocation of the address.&lt;/p&gt;.
     * 
     * @param allocationId the allocationId value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withAllocationId(String allocationId) {
        this.allocationId = allocationId;
        return this;
    }

    /**
     * Get the associationId property: &lt;p&gt;The ID representing the association of the address with an
     * instance.&lt;/p&gt;.
     * 
     * @return the associationId value.
     */
    public String associationId() {
        return this.associationId;
    }

    /**
     * Set the associationId property: &lt;p&gt;The ID representing the association of the address with an
     * instance.&lt;/p&gt;.
     * 
     * @param associationId the associationId value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withAssociationId(String associationId) {
        this.associationId = associationId;
        return this;
    }

    /**
     * Get the carrierIp property: &lt;p&gt;The carrier IP address associated. This option is only available for network
     * interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). &lt;/p&gt;.
     * 
     * @return the carrierIp value.
     */
    public String carrierIp() {
        return this.carrierIp;
    }

    /**
     * Set the carrierIp property: &lt;p&gt;The carrier IP address associated. This option is only available for network
     * interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). &lt;/p&gt;.
     * 
     * @param carrierIp the carrierIp value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withCarrierIp(String carrierIp) {
        this.carrierIp = carrierIp;
        return this;
    }

    /**
     * Get the customerOwnedIp property: &lt;p&gt;The customer-owned IP address.&lt;/p&gt;.
     * 
     * @return the customerOwnedIp value.
     */
    public String customerOwnedIp() {
        return this.customerOwnedIp;
    }

    /**
     * Set the customerOwnedIp property: &lt;p&gt;The customer-owned IP address.&lt;/p&gt;.
     * 
     * @param customerOwnedIp the customerOwnedIp value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withCustomerOwnedIp(String customerOwnedIp) {
        this.customerOwnedIp = customerOwnedIp;
        return this;
    }

    /**
     * Get the customerOwnedIpv4Pool property: &lt;p&gt;The ID of the customer-owned address pool.&lt;/p&gt;.
     * 
     * @return the customerOwnedIpv4Pool value.
     */
    public String customerOwnedIpv4Pool() {
        return this.customerOwnedIpv4Pool;
    }

    /**
     * Set the customerOwnedIpv4Pool property: &lt;p&gt;The ID of the customer-owned address pool.&lt;/p&gt;.
     * 
     * @param customerOwnedIpv4Pool the customerOwnedIpv4Pool value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withCustomerOwnedIpv4Pool(String customerOwnedIpv4Pool) {
        this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
        return this;
    }

    /**
     * Get the domain property: &lt;p&gt;The network (&lt;code&gt;vpc&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @return the domain value.
     */
    public DomainTypeEnumValue domain() {
        return this.domain;
    }

    /**
     * Set the domain property: &lt;p&gt;The network (&lt;code&gt;vpc&lt;/code&gt;).&lt;/p&gt;.
     * 
     * @param domain the domain value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withDomain(DomainTypeEnumValue domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the instanceId property: &lt;p&gt;The ID of the instance that the address is associated with (if
     * any).&lt;/p&gt;.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instanceId property: &lt;p&gt;The ID of the instance that the address is associated with (if
     * any).&lt;/p&gt;.
     * 
     * @param instanceId the instanceId value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Get the networkBorderGroup property: &lt;p&gt;The name of the unique set of Availability Zones, Local Zones, or
     * Wavelength Zones from which Amazon Web Services advertises IP addresses.&lt;/p&gt;.
     * 
     * @return the networkBorderGroup value.
     */
    public String networkBorderGroup() {
        return this.networkBorderGroup;
    }

    /**
     * Set the networkBorderGroup property: &lt;p&gt;The name of the unique set of Availability Zones, Local Zones, or
     * Wavelength Zones from which Amazon Web Services advertises IP addresses.&lt;/p&gt;.
     * 
     * @param networkBorderGroup the networkBorderGroup value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withNetworkBorderGroup(String networkBorderGroup) {
        this.networkBorderGroup = networkBorderGroup;
        return this;
    }

    /**
     * Get the networkInterfaceId property: &lt;p&gt;The ID of the network interface.&lt;/p&gt;.
     * 
     * @return the networkInterfaceId value.
     */
    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     * Set the networkInterfaceId property: &lt;p&gt;The ID of the network interface.&lt;/p&gt;.
     * 
     * @param networkInterfaceId the networkInterfaceId value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withNetworkInterfaceId(String networkInterfaceId) {
        this.networkInterfaceId = networkInterfaceId;
        return this;
    }

    /**
     * Get the networkInterfaceOwnerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the
     * network interface.&lt;/p&gt;.
     * 
     * @return the networkInterfaceOwnerId value.
     */
    public String networkInterfaceOwnerId() {
        return this.networkInterfaceOwnerId;
    }

    /**
     * Set the networkInterfaceOwnerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the
     * network interface.&lt;/p&gt;.
     * 
     * @param networkInterfaceOwnerId the networkInterfaceOwnerId value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withNetworkInterfaceOwnerId(String networkInterfaceOwnerId) {
        this.networkInterfaceOwnerId = networkInterfaceOwnerId;
        return this;
    }

    /**
     * Get the privateIpAddress property: &lt;p&gt;The private IP address associated with the Elastic IP
     * address.&lt;/p&gt;.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: &lt;p&gt;The private IP address associated with the Elastic IP
     * address.&lt;/p&gt;.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the publicIp property: &lt;p&gt;The Elastic IP address.&lt;/p&gt;.
     * 
     * @return the publicIp value.
     */
    public String publicIp() {
        return this.publicIp;
    }

    /**
     * Set the publicIp property: &lt;p&gt;The Elastic IP address.&lt;/p&gt;.
     * 
     * @param publicIp the publicIp value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withPublicIp(String publicIp) {
        this.publicIp = publicIp;
        return this;
    }

    /**
     * Get the publicIpv4Pool property: &lt;p&gt;The ID of an address pool.&lt;/p&gt;.
     * 
     * @return the publicIpv4Pool value.
     */
    public String publicIpv4Pool() {
        return this.publicIpv4Pool;
    }

    /**
     * Set the publicIpv4Pool property: &lt;p&gt;The ID of an address pool.&lt;/p&gt;.
     * 
     * @param publicIpv4Pool the publicIpv4Pool value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withPublicIpv4Pool(String publicIpv4Pool) {
        this.publicIpv4Pool = publicIpv4Pool;
        return this;
    }

    /**
     * Get the tags property: &lt;p&gt;Any tags assigned to the Elastic IP address.&lt;/p&gt;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated9> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: &lt;p&gt;Any tags assigned to the Elastic IP address.&lt;/p&gt;.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2AddressProperties object itself.
     */
    public AwsEc2AddressProperties withTags(List<TagAutoGenerated9> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (domain() != null) {
            domain().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("allocationId", this.allocationId);
        jsonWriter.writeStringField("associationId", this.associationId);
        jsonWriter.writeStringField("carrierIp", this.carrierIp);
        jsonWriter.writeStringField("customerOwnedIp", this.customerOwnedIp);
        jsonWriter.writeStringField("customerOwnedIpv4Pool", this.customerOwnedIpv4Pool);
        jsonWriter.writeJsonField("domain", this.domain);
        jsonWriter.writeStringField("instanceId", this.instanceId);
        jsonWriter.writeStringField("networkBorderGroup", this.networkBorderGroup);
        jsonWriter.writeStringField("networkInterfaceId", this.networkInterfaceId);
        jsonWriter.writeStringField("networkInterfaceOwnerId", this.networkInterfaceOwnerId);
        jsonWriter.writeStringField("privateIpAddress", this.privateIpAddress);
        jsonWriter.writeStringField("publicIp", this.publicIp);
        jsonWriter.writeStringField("publicIpv4Pool", this.publicIpv4Pool);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2AddressProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2AddressProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2AddressProperties.
     */
    public static AwsEc2AddressProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2AddressProperties deserializedAwsEc2AddressProperties = new AwsEc2AddressProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocationId".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.allocationId = reader.getString();
                } else if ("associationId".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.associationId = reader.getString();
                } else if ("carrierIp".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.carrierIp = reader.getString();
                } else if ("customerOwnedIp".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.customerOwnedIp = reader.getString();
                } else if ("customerOwnedIpv4Pool".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.customerOwnedIpv4Pool = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.domain = DomainTypeEnumValue.fromJson(reader);
                } else if ("instanceId".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.instanceId = reader.getString();
                } else if ("networkBorderGroup".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.networkBorderGroup = reader.getString();
                } else if ("networkInterfaceId".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.networkInterfaceId = reader.getString();
                } else if ("networkInterfaceOwnerId".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.networkInterfaceOwnerId = reader.getString();
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.privateIpAddress = reader.getString();
                } else if ("publicIp".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.publicIp = reader.getString();
                } else if ("publicIpv4Pool".equals(fieldName)) {
                    deserializedAwsEc2AddressProperties.publicIpv4Pool = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated9> tags = reader.readArray(reader1 -> TagAutoGenerated9.fromJson(reader1));
                    deserializedAwsEc2AddressProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2AddressProperties;
        });
    }
}
