// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TargetDescription.
 */
@Fluent
public final class TargetDescription implements JsonSerializable<TargetDescription> {
    /*
     * An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in
     * the specified Availability Zone or from all enabled Availability Zones for the load balancer.
     */
    private String availabilityZone;

    /*
     * The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target
     * type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the
     * target type is alb, specify the ARN of the Application Load Balancer target.
     */
    private String id;

    /*
     * The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If
     * the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches
     * the target group port. Not used if the target is a Lambda function.
     */
    private Integer port;

    /**
     * Creates an instance of TargetDescription class.
     */
    public TargetDescription() {
    }

    /**
     * Get the availabilityZone property: An Availability Zone or all. This determines whether the target receives
     * traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones
     * for the load balancer.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: An Availability Zone or all. This determines whether the target receives
     * traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones
     * for the load balancer.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the id property: The ID of the target. If the target type of the target group is instance, specify an
     * instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of
     * the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the target. If the target type of the target group is instance, specify an
     * instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of
     * the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target.
     * 
     * @param id the id value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the port property: The port on which the target is listening. If the target group protocol is GENEVE, the
     * supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one
     * listener whose port matches the target group port. Not used if the target is a Lambda function.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port on which the target is listening. If the target group protocol is GENEVE, the
     * supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one
     * listener whose port matches the target group port. Not used if the target is a Lambda function.
     * 
     * @param port the port value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetDescription if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetDescription.
     */
    public static TargetDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetDescription deserializedTargetDescription = new TargetDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedTargetDescription.availabilityZone = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedTargetDescription.id = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedTargetDescription.port = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetDescription;
        });
    }
}
