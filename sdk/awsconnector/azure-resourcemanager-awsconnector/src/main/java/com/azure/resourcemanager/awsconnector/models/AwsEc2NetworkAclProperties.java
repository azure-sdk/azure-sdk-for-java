// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2NetworkAcl.
 */
@Fluent
public final class AwsEc2NetworkAclProperties implements JsonSerializable<AwsEc2NetworkAclProperties> {
    /*
     * Property id
     */
    private String id;

    /*
     * The tags for the network ACL.
     */
    private List<TagAutoGenerated15> tags;

    /*
     * The ID of the VPC for the network ACL.
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2NetworkAclProperties class.
     */
    public AwsEc2NetworkAclProperties() {
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsEc2NetworkAclProperties object itself.
     */
    public AwsEc2NetworkAclProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the tags property: The tags for the network ACL.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated15> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags for the network ACL.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2NetworkAclProperties object itself.
     */
    public AwsEc2NetworkAclProperties withTags(List<TagAutoGenerated15> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcId property: The ID of the VPC for the network ACL.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: The ID of the VPC for the network ACL.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2NetworkAclProperties object itself.
     */
    public AwsEc2NetworkAclProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2NetworkAclProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2NetworkAclProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2NetworkAclProperties.
     */
    public static AwsEc2NetworkAclProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2NetworkAclProperties deserializedAwsEc2NetworkAclProperties = new AwsEc2NetworkAclProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAwsEc2NetworkAclProperties.id = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated15> tags = reader.readArray(reader1 -> TagAutoGenerated15.fromJson(reader1));
                    deserializedAwsEc2NetworkAclProperties.tags = tags;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2NetworkAclProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2NetworkAclProperties;
        });
    }
}
