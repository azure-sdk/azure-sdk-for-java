// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Grant.
 */
@Fluent
public final class Grant implements JsonSerializable<Grant> {
    /*
     * <p>The person being granted permissions.</p>
     */
    private Grantee grantee;

    /*
     * <p>Specifies the permission given to the grantee.</p>
     */
    private PermissionEnumValue permission;

    /**
     * Creates an instance of Grant class.
     */
    public Grant() {
    }

    /**
     * Get the grantee property: &lt;p&gt;The person being granted permissions.&lt;/p&gt;.
     * 
     * @return the grantee value.
     */
    public Grantee grantee() {
        return this.grantee;
    }

    /**
     * Set the grantee property: &lt;p&gt;The person being granted permissions.&lt;/p&gt;.
     * 
     * @param grantee the grantee value to set.
     * @return the Grant object itself.
     */
    public Grant withGrantee(Grantee grantee) {
        this.grantee = grantee;
        return this;
    }

    /**
     * Get the permission property: &lt;p&gt;Specifies the permission given to the grantee.&lt;/p&gt;.
     * 
     * @return the permission value.
     */
    public PermissionEnumValue permission() {
        return this.permission;
    }

    /**
     * Set the permission property: &lt;p&gt;Specifies the permission given to the grantee.&lt;/p&gt;.
     * 
     * @param permission the permission value to set.
     * @return the Grant object itself.
     */
    public Grant withPermission(PermissionEnumValue permission) {
        this.permission = permission;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (grantee() != null) {
            grantee().validate();
        }
        if (permission() != null) {
            permission().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("grantee", this.grantee);
        jsonWriter.writeJsonField("permission", this.permission);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Grant from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Grant if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Grant.
     */
    public static Grant fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Grant deserializedGrant = new Grant();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("grantee".equals(fieldName)) {
                    deserializedGrant.grantee = Grantee.fromJson(reader);
                } else if ("permission".equals(fieldName)) {
                    deserializedGrant.permission = PermissionEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGrant;
        });
    }
}
