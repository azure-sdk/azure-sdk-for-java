// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of RecordingModeOverride.
 */
@Fluent
public final class RecordingModeOverride implements JsonSerializable<RecordingModeOverride> {
    /*
     * <p>A description that you provide for the override.</p>
     */
    private String description;

    /*
     * <p>The recording frequency that will be applied to all the resource types specified in the override.</p> <ul>
     * <li> <p>Continuous recording allows you to record configuration changes continuously whenever a change
     * occurs.</p> </li> <li> <p>Daily recording allows you to receive a configuration item (CI) representing the most
     * recent state of your resources over the last 24-hour period, only if it’s different from the previous CI
     * recorded. </p> </li> </ul> <note> <p>Firewall Manager depends on continuous recording to monitor your resources.
     * If you are using Firewall Manager, it is recommended that you set the recording frequency to Continuous.</p>
     * </note>
     */
    private RecordingFrequencyEnumValue recordingFrequency;

    /*
     * <p>A comma-separated list that specifies which resource types Config includes in the override.</p> <important>
     * <p>Daily recording is not supported for the following resource types:</p> <ul> <li> <p>
     * <code>AWS::Config::ResourceCompliance</code> </p> </li> <li> <p>
     * <code>AWS::Config::ConformancePackCompliance</code> </p> </li> <li> <p>
     * <code>AWS::Config::ConfigurationRecorder</code> </p> </li> </ul> </important>
     */
    private List<ResourceType> resourceTypes;

    /**
     * Creates an instance of RecordingModeOverride class.
     */
    public RecordingModeOverride() {
    }

    /**
     * Get the description property: &lt;p&gt;A description that you provide for the override.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description that you provide for the override.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the RecordingModeOverride object itself.
     */
    public RecordingModeOverride withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the recordingFrequency property: &lt;p&gt;The recording frequency that will be applied to all the resource
     * types specified in the override.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Continuous recording allows you to
     * record configuration changes continuously whenever a change occurs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;Daily recording allows you to receive a configuration item (CI) representing the most recent state of
     * your resources over the last 24-hour period, only if it’s different from the previous CI recorded. &lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Firewall Manager depends on continuous recording to monitor your
     * resources. If you are using Firewall Manager, it is recommended that you set the recording frequency to
     * Continuous.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the recordingFrequency value.
     */
    public RecordingFrequencyEnumValue recordingFrequency() {
        return this.recordingFrequency;
    }

    /**
     * Set the recordingFrequency property: &lt;p&gt;The recording frequency that will be applied to all the resource
     * types specified in the override.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Continuous recording allows you to
     * record configuration changes continuously whenever a change occurs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;Daily recording allows you to receive a configuration item (CI) representing the most recent state of
     * your resources over the last 24-hour period, only if it’s different from the previous CI recorded. &lt;/p&gt;
     * &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Firewall Manager depends on continuous recording to monitor your
     * resources. If you are using Firewall Manager, it is recommended that you set the recording frequency to
     * Continuous.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param recordingFrequency the recordingFrequency value to set.
     * @return the RecordingModeOverride object itself.
     */
    public RecordingModeOverride withRecordingFrequency(RecordingFrequencyEnumValue recordingFrequency) {
        this.recordingFrequency = recordingFrequency;
        return this;
    }

    /**
     * Get the resourceTypes property: &lt;p&gt;A comma-separated list that specifies which resource types Config
     * includes in the override.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Daily recording is not supported for the following
     * resource types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ResourceCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConformancePackCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConfigurationRecorder&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;/important&gt;.
     * 
     * @return the resourceTypes value.
     */
    public List<ResourceType> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: &lt;p&gt;A comma-separated list that specifies which resource types Config
     * includes in the override.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Daily recording is not supported for the following
     * resource types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ResourceCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConformancePackCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConfigurationRecorder&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;/important&gt;.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the RecordingModeOverride object itself.
     */
    public RecordingModeOverride withResourceTypes(List<ResourceType> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recordingFrequency() != null) {
            recordingFrequency().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("recordingFrequency", this.recordingFrequency);
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecordingModeOverride from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecordingModeOverride if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecordingModeOverride.
     */
    public static RecordingModeOverride fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecordingModeOverride deserializedRecordingModeOverride = new RecordingModeOverride();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedRecordingModeOverride.description = reader.getString();
                } else if ("recordingFrequency".equals(fieldName)) {
                    deserializedRecordingModeOverride.recordingFrequency = RecordingFrequencyEnumValue.fromJson(reader);
                } else if ("resourceTypes".equals(fieldName)) {
                    List<ResourceType> resourceTypes
                        = reader.readArray(reader1 -> ResourceType.fromString(reader1.getString()));
                    deserializedRecordingModeOverride.resourceTypes = resourceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecordingModeOverride;
        });
    }
}
