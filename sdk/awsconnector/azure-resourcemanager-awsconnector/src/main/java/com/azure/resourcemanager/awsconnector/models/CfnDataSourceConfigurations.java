// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CFNDataSourceConfigurations.
 */
@Fluent
public final class CfnDataSourceConfigurations implements JsonSerializable<CfnDataSourceConfigurations> {
    /*
     * Property kubernetes
     */
    private CfnKubernetesConfiguration kubernetes;

    /*
     * Property malwareProtection
     */
    private CfnMalwareProtectionConfiguration malwareProtection;

    /*
     * Property s3Logs
     */
    private Cfns3LogsConfiguration s3Logs;

    /**
     * Creates an instance of CfnDataSourceConfigurations class.
     */
    public CfnDataSourceConfigurations() {
    }

    /**
     * Get the kubernetes property: Property kubernetes.
     * 
     * @return the kubernetes value.
     */
    public CfnKubernetesConfiguration kubernetes() {
        return this.kubernetes;
    }

    /**
     * Set the kubernetes property: Property kubernetes.
     * 
     * @param kubernetes the kubernetes value to set.
     * @return the CfnDataSourceConfigurations object itself.
     */
    public CfnDataSourceConfigurations withKubernetes(CfnKubernetesConfiguration kubernetes) {
        this.kubernetes = kubernetes;
        return this;
    }

    /**
     * Get the malwareProtection property: Property malwareProtection.
     * 
     * @return the malwareProtection value.
     */
    public CfnMalwareProtectionConfiguration malwareProtection() {
        return this.malwareProtection;
    }

    /**
     * Set the malwareProtection property: Property malwareProtection.
     * 
     * @param malwareProtection the malwareProtection value to set.
     * @return the CfnDataSourceConfigurations object itself.
     */
    public CfnDataSourceConfigurations withMalwareProtection(CfnMalwareProtectionConfiguration malwareProtection) {
        this.malwareProtection = malwareProtection;
        return this;
    }

    /**
     * Get the s3Logs property: Property s3Logs.
     * 
     * @return the s3Logs value.
     */
    public Cfns3LogsConfiguration s3Logs() {
        return this.s3Logs;
    }

    /**
     * Set the s3Logs property: Property s3Logs.
     * 
     * @param s3Logs the s3Logs value to set.
     * @return the CfnDataSourceConfigurations object itself.
     */
    public CfnDataSourceConfigurations withS3Logs(Cfns3LogsConfiguration s3Logs) {
        this.s3Logs = s3Logs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kubernetes() != null) {
            kubernetes().validate();
        }
        if (malwareProtection() != null) {
            malwareProtection().validate();
        }
        if (s3Logs() != null) {
            s3Logs().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("kubernetes", this.kubernetes);
        jsonWriter.writeJsonField("malwareProtection", this.malwareProtection);
        jsonWriter.writeJsonField("s3Logs", this.s3Logs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CfnDataSourceConfigurations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CfnDataSourceConfigurations if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CfnDataSourceConfigurations.
     */
    public static CfnDataSourceConfigurations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CfnDataSourceConfigurations deserializedCfnDataSourceConfigurations = new CfnDataSourceConfigurations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kubernetes".equals(fieldName)) {
                    deserializedCfnDataSourceConfigurations.kubernetes = CfnKubernetesConfiguration.fromJson(reader);
                } else if ("malwareProtection".equals(fieldName)) {
                    deserializedCfnDataSourceConfigurations.malwareProtection
                        = CfnMalwareProtectionConfiguration.fromJson(reader);
                } else if ("s3Logs".equals(fieldName)) {
                    deserializedCfnDataSourceConfigurations.s3Logs = Cfns3LogsConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCfnDataSourceConfigurations;
        });
    }
}
