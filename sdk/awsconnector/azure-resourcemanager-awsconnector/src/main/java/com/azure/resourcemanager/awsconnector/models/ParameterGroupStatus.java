// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ParameterGroupStatus.
 */
@Fluent
public final class ParameterGroupStatus implements JsonSerializable<ParameterGroupStatus> {
    /*
     * <p>The node IDs of one or more nodes to be rebooted.</p>
     */
    private List<String> nodeIdsToReboot;

    /*
     * <p>The status of parameter updates. </p>
     */
    private String parameterApplyStatus;

    /*
     * <p>The name of the parameter group.</p>
     */
    private String parameterGroupName;

    /**
     * Creates an instance of ParameterGroupStatus class.
     */
    public ParameterGroupStatus() {
    }

    /**
     * Get the nodeIdsToReboot property: &lt;p&gt;The node IDs of one or more nodes to be rebooted.&lt;/p&gt;.
     * 
     * @return the nodeIdsToReboot value.
     */
    public List<String> nodeIdsToReboot() {
        return this.nodeIdsToReboot;
    }

    /**
     * Set the nodeIdsToReboot property: &lt;p&gt;The node IDs of one or more nodes to be rebooted.&lt;/p&gt;.
     * 
     * @param nodeIdsToReboot the nodeIdsToReboot value to set.
     * @return the ParameterGroupStatus object itself.
     */
    public ParameterGroupStatus withNodeIdsToReboot(List<String> nodeIdsToReboot) {
        this.nodeIdsToReboot = nodeIdsToReboot;
        return this;
    }

    /**
     * Get the parameterApplyStatus property: &lt;p&gt;The status of parameter updates. &lt;/p&gt;.
     * 
     * @return the parameterApplyStatus value.
     */
    public String parameterApplyStatus() {
        return this.parameterApplyStatus;
    }

    /**
     * Set the parameterApplyStatus property: &lt;p&gt;The status of parameter updates. &lt;/p&gt;.
     * 
     * @param parameterApplyStatus the parameterApplyStatus value to set.
     * @return the ParameterGroupStatus object itself.
     */
    public ParameterGroupStatus withParameterApplyStatus(String parameterApplyStatus) {
        this.parameterApplyStatus = parameterApplyStatus;
        return this;
    }

    /**
     * Get the parameterGroupName property: &lt;p&gt;The name of the parameter group.&lt;/p&gt;.
     * 
     * @return the parameterGroupName value.
     */
    public String parameterGroupName() {
        return this.parameterGroupName;
    }

    /**
     * Set the parameterGroupName property: &lt;p&gt;The name of the parameter group.&lt;/p&gt;.
     * 
     * @param parameterGroupName the parameterGroupName value to set.
     * @return the ParameterGroupStatus object itself.
     */
    public ParameterGroupStatus withParameterGroupName(String parameterGroupName) {
        this.parameterGroupName = parameterGroupName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("nodeIdsToReboot", this.nodeIdsToReboot,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("parameterApplyStatus", this.parameterApplyStatus);
        jsonWriter.writeStringField("parameterGroupName", this.parameterGroupName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParameterGroupStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParameterGroupStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ParameterGroupStatus.
     */
    public static ParameterGroupStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParameterGroupStatus deserializedParameterGroupStatus = new ParameterGroupStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeIdsToReboot".equals(fieldName)) {
                    List<String> nodeIdsToReboot = reader.readArray(reader1 -> reader1.getString());
                    deserializedParameterGroupStatus.nodeIdsToReboot = nodeIdsToReboot;
                } else if ("parameterApplyStatus".equals(fieldName)) {
                    deserializedParameterGroupStatus.parameterApplyStatus = reader.getString();
                } else if ("parameterGroupName".equals(fieldName)) {
                    deserializedParameterGroupStatus.parameterGroupName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParameterGroupStatus;
        });
    }
}
