// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Monitoring.
 */
@Fluent
public final class Monitoring implements JsonSerializable<Monitoring> {
    /*
     * <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
     */
    private MonitoringStateEnumValue state;

    /**
     * Creates an instance of Monitoring class.
     */
    public Monitoring() {
    }

    /**
     * Get the state property: &lt;p&gt;Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
     * enabled.&lt;/p&gt;.
     * 
     * @return the state value.
     */
    public MonitoringStateEnumValue state() {
        return this.state;
    }

    /**
     * Set the state property: &lt;p&gt;Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
     * enabled.&lt;/p&gt;.
     * 
     * @param state the state value to set.
     * @return the Monitoring object itself.
     */
    public Monitoring withState(MonitoringStateEnumValue state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() != null) {
            state().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("state", this.state);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Monitoring from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Monitoring if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Monitoring.
     */
    public static Monitoring fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Monitoring deserializedMonitoring = new Monitoring();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedMonitoring.state = MonitoringStateEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitoring;
        });
    }
}
