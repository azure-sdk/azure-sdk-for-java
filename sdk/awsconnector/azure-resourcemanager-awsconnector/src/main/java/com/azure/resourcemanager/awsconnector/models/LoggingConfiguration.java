// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LoggingConfiguration.
 */
@Fluent
public final class LoggingConfiguration implements JsonSerializable<LoggingConfiguration> {
    /*
     * The name of the bucket where Amazon S3 should store server access log files. You can store log files in any
     * bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is
     * defined.
     */
    private String destinationBucketName;

    /*
     * A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you
     * can use a prefix to distinguish which log files came from which bucket.
     */
    private String logFilePrefix;

    /*
     * Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.
     * Describes the key format for server access log file in the target bucket. You can choose between SimplePrefix and
     * PartitionedPrefix.
     */
    private TargetObjectKeyFormat targetObjectKeyFormat;

    /**
     * Creates an instance of LoggingConfiguration class.
     */
    public LoggingConfiguration() {
    }

    /**
     * Get the destinationBucketName property: The name of the bucket where Amazon S3 should store server access log
     * files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the
     * ``LoggingConfiguration`` property is defined.
     * 
     * @return the destinationBucketName value.
     */
    public String destinationBucketName() {
        return this.destinationBucketName;
    }

    /**
     * Set the destinationBucketName property: The name of the bucket where Amazon S3 should store server access log
     * files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the
     * ``LoggingConfiguration`` property is defined.
     * 
     * @param destinationBucketName the destinationBucketName value to set.
     * @return the LoggingConfiguration object itself.
     */
    public LoggingConfiguration withDestinationBucketName(String destinationBucketName) {
        this.destinationBucketName = destinationBucketName;
        return this;
    }

    /**
     * Get the logFilePrefix property: A prefix for all log object keys. If you store log files from multiple Amazon S3
     * buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
     * 
     * @return the logFilePrefix value.
     */
    public String logFilePrefix() {
        return this.logFilePrefix;
    }

    /**
     * Set the logFilePrefix property: A prefix for all log object keys. If you store log files from multiple Amazon S3
     * buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
     * 
     * @param logFilePrefix the logFilePrefix value to set.
     * @return the LoggingConfiguration object itself.
     */
    public LoggingConfiguration withLogFilePrefix(String logFilePrefix) {
        this.logFilePrefix = logFilePrefix;
        return this;
    }

    /**
     * Get the targetObjectKeyFormat property: Amazon S3 key format for log objects. Only one format, either
     * PartitionedPrefix or SimplePrefix, is allowed. Describes the key format for server access log file in the target
     * bucket. You can choose between SimplePrefix and PartitionedPrefix.
     * 
     * @return the targetObjectKeyFormat value.
     */
    public TargetObjectKeyFormat targetObjectKeyFormat() {
        return this.targetObjectKeyFormat;
    }

    /**
     * Set the targetObjectKeyFormat property: Amazon S3 key format for log objects. Only one format, either
     * PartitionedPrefix or SimplePrefix, is allowed. Describes the key format for server access log file in the target
     * bucket. You can choose between SimplePrefix and PartitionedPrefix.
     * 
     * @param targetObjectKeyFormat the targetObjectKeyFormat value to set.
     * @return the LoggingConfiguration object itself.
     */
    public LoggingConfiguration withTargetObjectKeyFormat(TargetObjectKeyFormat targetObjectKeyFormat) {
        this.targetObjectKeyFormat = targetObjectKeyFormat;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetObjectKeyFormat() != null) {
            targetObjectKeyFormat().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destinationBucketName", this.destinationBucketName);
        jsonWriter.writeStringField("logFilePrefix", this.logFilePrefix);
        jsonWriter.writeJsonField("targetObjectKeyFormat", this.targetObjectKeyFormat);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoggingConfiguration.
     */
    public static LoggingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingConfiguration deserializedLoggingConfiguration = new LoggingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destinationBucketName".equals(fieldName)) {
                    deserializedLoggingConfiguration.destinationBucketName = reader.getString();
                } else if ("logFilePrefix".equals(fieldName)) {
                    deserializedLoggingConfiguration.logFilePrefix = reader.getString();
                } else if ("targetObjectKeyFormat".equals(fieldName)) {
                    deserializedLoggingConfiguration.targetObjectKeyFormat = TargetObjectKeyFormat.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingConfiguration;
        });
    }
}
