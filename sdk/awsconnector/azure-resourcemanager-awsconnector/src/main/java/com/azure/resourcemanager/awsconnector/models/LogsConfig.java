// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LogsConfig.
 */
@Fluent
public final class LogsConfig implements JsonSerializable<LogsConfig> {
    /*
     * <p> Information about CloudWatch Logs for a build project. CloudWatch Logs are enabled by default. </p>
     */
    private CloudWatchLogsConfig cloudWatchLogs;

    /*
     * <p> Information about logs built to an S3 bucket for a build project. S3 logs are not enabled by default. </p>
     */
    private S3LogsConfig s3Logs;

    /**
     * Creates an instance of LogsConfig class.
     */
    public LogsConfig() {
    }

    /**
     * Get the cloudWatchLogs property: &lt;p&gt; Information about CloudWatch Logs for a build project. CloudWatch Logs
     * are enabled by default. &lt;/p&gt;.
     * 
     * @return the cloudWatchLogs value.
     */
    public CloudWatchLogsConfig cloudWatchLogs() {
        return this.cloudWatchLogs;
    }

    /**
     * Set the cloudWatchLogs property: &lt;p&gt; Information about CloudWatch Logs for a build project. CloudWatch Logs
     * are enabled by default. &lt;/p&gt;.
     * 
     * @param cloudWatchLogs the cloudWatchLogs value to set.
     * @return the LogsConfig object itself.
     */
    public LogsConfig withCloudWatchLogs(CloudWatchLogsConfig cloudWatchLogs) {
        this.cloudWatchLogs = cloudWatchLogs;
        return this;
    }

    /**
     * Get the s3Logs property: &lt;p&gt; Information about logs built to an S3 bucket for a build project. S3 logs are
     * not enabled by default. &lt;/p&gt;.
     * 
     * @return the s3Logs value.
     */
    public S3LogsConfig s3Logs() {
        return this.s3Logs;
    }

    /**
     * Set the s3Logs property: &lt;p&gt; Information about logs built to an S3 bucket for a build project. S3 logs are
     * not enabled by default. &lt;/p&gt;.
     * 
     * @param s3Logs the s3Logs value to set.
     * @return the LogsConfig object itself.
     */
    public LogsConfig withS3Logs(S3LogsConfig s3Logs) {
        this.s3Logs = s3Logs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cloudWatchLogs() != null) {
            cloudWatchLogs().validate();
        }
        if (s3Logs() != null) {
            s3Logs().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("cloudWatchLogs", this.cloudWatchLogs);
        jsonWriter.writeJsonField("s3Logs", this.s3Logs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogsConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogsConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the LogsConfig.
     */
    public static LogsConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogsConfig deserializedLogsConfig = new LogsConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cloudWatchLogs".equals(fieldName)) {
                    deserializedLogsConfig.cloudWatchLogs = CloudWatchLogsConfig.fromJson(reader);
                } else if ("s3Logs".equals(fieldName)) {
                    deserializedLogsConfig.s3Logs = S3LogsConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogsConfig;
        });
    }
}
