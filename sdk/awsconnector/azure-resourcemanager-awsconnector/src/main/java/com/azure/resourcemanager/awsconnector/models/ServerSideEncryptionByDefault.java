// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ServerSideEncryptionByDefault.
 */
@Fluent
public final class ServerSideEncryptionByDefault implements JsonSerializable<ServerSideEncryptionByDefault> {
    /*
     * AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default encryption. This parameter is
     * allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``. You can specify the key ID,
     * key alias, or the Amazon Resource Name (ARN) of the KMS key. + Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` +
     * Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` + Key Alias:
     * ``alias/alias-name`` If you use a key ID, you can run into a LogDestination undeliverable error when creating a
     * VPC flow log. If you are using encryption with cross-account or AWS service operations you must use a fully
     * qualified KMS key ARN. For more information, see [Using encryption for cross-account
     * operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-
     * bucket-policy). Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys
     * in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management
     * Service Developer Guide*.
     */
    private String kmsMasterKeyId;

    /*
     * Server-side encryption algorithm to use for the default encryption.
     */
    private ServerSideEncryptionByDefaultSseAlgorithm sseAlgorithm;

    /**
     * Creates an instance of ServerSideEncryptionByDefault class.
     */
    public ServerSideEncryptionByDefault() {
    }

    /**
     * Get the kmsMasterKeyId property: AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default
     * encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.
     * You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key. + Key ID:
     * ``1234abcd-12ab-34cd-56ef-1234567890ab`` + Key ARN:
     * ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` + Key Alias: ``alias/alias-name``
     * If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. If you
     * are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For
     * more information, see [Using encryption for cross-account
     * operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
     * Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in
     * KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management
     * Service Developer Guide*.
     * 
     * @return the kmsMasterKeyId value.
     */
    public String kmsMasterKeyId() {
        return this.kmsMasterKeyId;
    }

    /**
     * Set the kmsMasterKeyId property: AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default
     * encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.
     * You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key. + Key ID:
     * ``1234abcd-12ab-34cd-56ef-1234567890ab`` + Key ARN:
     * ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` + Key Alias: ``alias/alias-name``
     * If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. If you
     * are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For
     * more information, see [Using encryption for cross-account
     * operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
     * Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in
     * KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management
     * Service Developer Guide*.
     * 
     * @param kmsMasterKeyId the kmsMasterKeyId value to set.
     * @return the ServerSideEncryptionByDefault object itself.
     */
    public ServerSideEncryptionByDefault withKmsMasterKeyId(String kmsMasterKeyId) {
        this.kmsMasterKeyId = kmsMasterKeyId;
        return this;
    }

    /**
     * Get the sseAlgorithm property: Server-side encryption algorithm to use for the default encryption.
     * 
     * @return the sseAlgorithm value.
     */
    public ServerSideEncryptionByDefaultSseAlgorithm sseAlgorithm() {
        return this.sseAlgorithm;
    }

    /**
     * Set the sseAlgorithm property: Server-side encryption algorithm to use for the default encryption.
     * 
     * @param sseAlgorithm the sseAlgorithm value to set.
     * @return the ServerSideEncryptionByDefault object itself.
     */
    public ServerSideEncryptionByDefault withSseAlgorithm(ServerSideEncryptionByDefaultSseAlgorithm sseAlgorithm) {
        this.sseAlgorithm = sseAlgorithm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kmsMasterKeyID", this.kmsMasterKeyId);
        jsonWriter.writeStringField("sseAlgorithm", this.sseAlgorithm == null ? null : this.sseAlgorithm.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerSideEncryptionByDefault from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerSideEncryptionByDefault if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerSideEncryptionByDefault.
     */
    public static ServerSideEncryptionByDefault fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerSideEncryptionByDefault deserializedServerSideEncryptionByDefault
                = new ServerSideEncryptionByDefault();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kmsMasterKeyID".equals(fieldName)) {
                    deserializedServerSideEncryptionByDefault.kmsMasterKeyId = reader.getString();
                } else if ("sseAlgorithm".equals(fieldName)) {
                    deserializedServerSideEncryptionByDefault.sseAlgorithm
                        = ServerSideEncryptionByDefaultSseAlgorithm.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerSideEncryptionByDefault;
        });
    }
}
