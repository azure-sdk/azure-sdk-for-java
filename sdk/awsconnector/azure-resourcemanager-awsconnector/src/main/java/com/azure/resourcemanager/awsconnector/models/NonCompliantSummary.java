// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of NonCompliantSummary.
 */
@Fluent
public final class NonCompliantSummary implements JsonSerializable<NonCompliantSummary> {
    /*
     * <p>The total number of compliance items that aren't compliant.</p>
     */
    private Integer nonCompliantCount;

    /*
     * <p>A summary of the non-compliance severity by compliance type</p>
     */
    private SeveritySummary severitySummary;

    /**
     * Creates an instance of NonCompliantSummary class.
     */
    public NonCompliantSummary() {
    }

    /**
     * Get the nonCompliantCount property: &lt;p&gt;The total number of compliance items that aren't
     * compliant.&lt;/p&gt;.
     * 
     * @return the nonCompliantCount value.
     */
    public Integer nonCompliantCount() {
        return this.nonCompliantCount;
    }

    /**
     * Set the nonCompliantCount property: &lt;p&gt;The total number of compliance items that aren't
     * compliant.&lt;/p&gt;.
     * 
     * @param nonCompliantCount the nonCompliantCount value to set.
     * @return the NonCompliantSummary object itself.
     */
    public NonCompliantSummary withNonCompliantCount(Integer nonCompliantCount) {
        this.nonCompliantCount = nonCompliantCount;
        return this;
    }

    /**
     * Get the severitySummary property: &lt;p&gt;A summary of the non-compliance severity by compliance type&lt;/p&gt;.
     * 
     * @return the severitySummary value.
     */
    public SeveritySummary severitySummary() {
        return this.severitySummary;
    }

    /**
     * Set the severitySummary property: &lt;p&gt;A summary of the non-compliance severity by compliance type&lt;/p&gt;.
     * 
     * @param severitySummary the severitySummary value to set.
     * @return the NonCompliantSummary object itself.
     */
    public NonCompliantSummary withSeveritySummary(SeveritySummary severitySummary) {
        this.severitySummary = severitySummary;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (severitySummary() != null) {
            severitySummary().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("nonCompliantCount", this.nonCompliantCount);
        jsonWriter.writeJsonField("severitySummary", this.severitySummary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NonCompliantSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NonCompliantSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NonCompliantSummary.
     */
    public static NonCompliantSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NonCompliantSummary deserializedNonCompliantSummary = new NonCompliantSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nonCompliantCount".equals(fieldName)) {
                    deserializedNonCompliantSummary.nonCompliantCount = reader.getNullable(JsonReader::getInt);
                } else if ("severitySummary".equals(fieldName)) {
                    deserializedNonCompliantSummary.severitySummary = SeveritySummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNonCompliantSummary;
        });
    }
}
