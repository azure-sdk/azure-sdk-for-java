// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of OIDC.
 */
@Fluent
public final class Oidc implements JsonSerializable<Oidc> {
    /*
     * <p>The issuer URL for the OIDC identity provider.</p>
     */
    private String issuer;

    /**
     * Creates an instance of Oidc class.
     */
    public Oidc() {
    }

    /**
     * Get the issuer property: &lt;p&gt;The issuer URL for the OIDC identity provider.&lt;/p&gt;.
     * 
     * @return the issuer value.
     */
    public String issuer() {
        return this.issuer;
    }

    /**
     * Set the issuer property: &lt;p&gt;The issuer URL for the OIDC identity provider.&lt;/p&gt;.
     * 
     * @param issuer the issuer value to set.
     * @return the Oidc object itself.
     */
    public Oidc withIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issuer", this.issuer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Oidc from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Oidc if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Oidc.
     */
    public static Oidc fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Oidc deserializedOidc = new Oidc();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issuer".equals(fieldName)) {
                    deserializedOidc.issuer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOidc;
        });
    }
}
