// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the stop action properties.
 */
@Fluent
public final class StopEc2InstanceOptions implements JsonSerializable<StopEc2InstanceOptions> {
    /*
     * Forces the instance to stop. The instance does not have an opportunity to flush file system caches or file system
     * metadata. If you use this option, you must perform file system check and repair procedures. This option is not
     * recommended for Windows instances. Defaults to false.
     */
    private Boolean force;

    /*
     * Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate
     * successfully, a normal shutdown occurs. Defaults to false.
     */
    private Boolean hibernate;

    /**
     * Creates an instance of StopEc2InstanceOptions class.
     */
    public StopEc2InstanceOptions() {
    }

    /**
     * Get the force property: Forces the instance to stop. The instance does not have an opportunity to flush file
     * system caches or file system metadata. If you use this option, you must perform file system check and repair
     * procedures. This option is not recommended for Windows instances. Defaults to false.
     * 
     * @return the force value.
     */
    public Boolean force() {
        return this.force;
    }

    /**
     * Set the force property: Forces the instance to stop. The instance does not have an opportunity to flush file
     * system caches or file system metadata. If you use this option, you must perform file system check and repair
     * procedures. This option is not recommended for Windows instances. Defaults to false.
     * 
     * @param force the force value to set.
     * @return the StopEc2InstanceOptions object itself.
     */
    public StopEc2InstanceOptions withForce(Boolean force) {
        this.force = force;
        return this;
    }

    /**
     * Get the hibernate property: Hibernates the instance if the instance was enabled for hibernation at launch. If the
     * instance cannot hibernate successfully, a normal shutdown occurs. Defaults to false.
     * 
     * @return the hibernate value.
     */
    public Boolean hibernate() {
        return this.hibernate;
    }

    /**
     * Set the hibernate property: Hibernates the instance if the instance was enabled for hibernation at launch. If the
     * instance cannot hibernate successfully, a normal shutdown occurs. Defaults to false.
     * 
     * @param hibernate the hibernate value to set.
     * @return the StopEc2InstanceOptions object itself.
     */
    public StopEc2InstanceOptions withHibernate(Boolean hibernate) {
        this.hibernate = hibernate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("force", this.force);
        jsonWriter.writeBooleanField("hibernate", this.hibernate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StopEc2InstanceOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StopEc2InstanceOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StopEc2InstanceOptions.
     */
    public static StopEc2InstanceOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StopEc2InstanceOptions deserializedStopEc2InstanceOptions = new StopEc2InstanceOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("force".equals(fieldName)) {
                    deserializedStopEc2InstanceOptions.force = reader.getNullable(JsonReader::getBoolean);
                } else if ("hibernate".equals(fieldName)) {
                    deserializedStopEc2InstanceOptions.hibernate = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStopEc2InstanceOptions;
        });
    }
}
