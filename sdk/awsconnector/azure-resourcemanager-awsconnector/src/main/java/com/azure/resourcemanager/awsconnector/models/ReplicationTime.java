// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ReplicationTime.
 */
@Fluent
public final class ReplicationTime implements JsonSerializable<ReplicationTime> {
    /*
     * Specifies whether the replication time is enabled.
     */
    private ReplicationTimeStatus status;

    /*
     * A container specifying the time by which replication should be complete for all objects and operations on
     * objects. A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics
     * ``EventThreshold``.
     */
    private ReplicationTimeValue time;

    /**
     * Creates an instance of ReplicationTime class.
     */
    public ReplicationTime() {
    }

    /**
     * Get the status property: Specifies whether the replication time is enabled.
     * 
     * @return the status value.
     */
    public ReplicationTimeStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Specifies whether the replication time is enabled.
     * 
     * @param status the status value to set.
     * @return the ReplicationTime object itself.
     */
    public ReplicationTime withStatus(ReplicationTimeStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the time property: A container specifying the time by which replication should be complete for all objects
     * and operations on objects. A container specifying the time value for S3 Replication Time Control (S3 RTC) and
     * replication metrics ``EventThreshold``.
     * 
     * @return the time value.
     */
    public ReplicationTimeValue time() {
        return this.time;
    }

    /**
     * Set the time property: A container specifying the time by which replication should be complete for all objects
     * and operations on objects. A container specifying the time value for S3 Replication Time Control (S3 RTC) and
     * replication metrics ``EventThreshold``.
     * 
     * @param time the time value to set.
     * @return the ReplicationTime object itself.
     */
    public ReplicationTime withTime(ReplicationTimeValue time) {
        this.time = time;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (time() != null) {
            time().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("time", this.time);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationTime from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationTime if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationTime.
     */
    public static ReplicationTime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationTime deserializedReplicationTime = new ReplicationTime();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedReplicationTime.status = ReplicationTimeStatus.fromString(reader.getString());
                } else if ("time".equals(fieldName)) {
                    deserializedReplicationTime.time = ReplicationTimeValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationTime;
        });
    }
}
