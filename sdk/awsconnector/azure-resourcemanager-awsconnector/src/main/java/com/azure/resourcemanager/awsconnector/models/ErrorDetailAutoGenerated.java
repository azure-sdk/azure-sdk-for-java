// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ErrorDetail.
 */
@Fluent
public final class ErrorDetailAutoGenerated implements JsonSerializable<ErrorDetailAutoGenerated> {
    /*
     * <p>The name or code associated with the error.</p>
     */
    private String errorCode;

    /*
     * <p>A list of key value pairs that provides contextual information about why an error occured.</p>
     */
    private List<Object> errorData;

    /*
     * <p>A message that describes the error.</p>
     */
    private String errorMessage;

    /**
     * Creates an instance of ErrorDetailAutoGenerated class.
     */
    public ErrorDetailAutoGenerated() {
    }

    /**
     * Get the errorCode property: &lt;p&gt;The name or code associated with the error.&lt;/p&gt;.
     * 
     * @return the errorCode value.
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: &lt;p&gt;The name or code associated with the error.&lt;/p&gt;.
     * 
     * @param errorCode the errorCode value to set.
     * @return the ErrorDetailAutoGenerated object itself.
     */
    public ErrorDetailAutoGenerated withErrorCode(String errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the errorData property: &lt;p&gt;A list of key value pairs that provides contextual information about why an
     * error occured.&lt;/p&gt;.
     * 
     * @return the errorData value.
     */
    public List<Object> errorData() {
        return this.errorData;
    }

    /**
     * Set the errorData property: &lt;p&gt;A list of key value pairs that provides contextual information about why an
     * error occured.&lt;/p&gt;.
     * 
     * @param errorData the errorData value to set.
     * @return the ErrorDetailAutoGenerated object itself.
     */
    public ErrorDetailAutoGenerated withErrorData(List<Object> errorData) {
        this.errorData = errorData;
        return this;
    }

    /**
     * Get the errorMessage property: &lt;p&gt;A message that describes the error.&lt;/p&gt;.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: &lt;p&gt;A message that describes the error.&lt;/p&gt;.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the ErrorDetailAutoGenerated object itself.
     */
    public ErrorDetailAutoGenerated withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeArrayField("errorData", this.errorData, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorDetailAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorDetailAutoGenerated if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ErrorDetailAutoGenerated.
     */
    public static ErrorDetailAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ErrorDetailAutoGenerated deserializedErrorDetailAutoGenerated = new ErrorDetailAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedErrorDetailAutoGenerated.errorCode = reader.getString();
                } else if ("errorData".equals(fieldName)) {
                    List<Object> errorData = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedErrorDetailAutoGenerated.errorData = errorData;
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedErrorDetailAutoGenerated.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedErrorDetailAutoGenerated;
        });
    }
}
