// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of BatchRestrictions.
 */
@Fluent
public final class BatchRestrictions implements JsonSerializable<BatchRestrictions> {
    /*
     * <p>An array of strings that specify the compute types that are allowed for the batch build. See <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'>Build environment
     * compute types</a> in the <i>CodeBuild User Guide</i> for these values. </p>
     */
    private List<String> computeTypesAllowed;

    /*
     * <p>Specifies the maximum number of builds allowed.</p>
     */
    private Integer maximumBuildsAllowed;

    /**
     * Creates an instance of BatchRestrictions class.
     */
    public BatchRestrictions() {
    }

    /**
     * Get the computeTypesAllowed property: &lt;p&gt;An array of strings that specify the compute types that are
     * allowed for the batch build. See &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'&gt;Build
     * environment compute types&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt; for these values. &lt;/p&gt;.
     * 
     * @return the computeTypesAllowed value.
     */
    public List<String> computeTypesAllowed() {
        return this.computeTypesAllowed;
    }

    /**
     * Set the computeTypesAllowed property: &lt;p&gt;An array of strings that specify the compute types that are
     * allowed for the batch build. See &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html'&gt;Build
     * environment compute types&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt; for these values. &lt;/p&gt;.
     * 
     * @param computeTypesAllowed the computeTypesAllowed value to set.
     * @return the BatchRestrictions object itself.
     */
    public BatchRestrictions withComputeTypesAllowed(List<String> computeTypesAllowed) {
        this.computeTypesAllowed = computeTypesAllowed;
        return this;
    }

    /**
     * Get the maximumBuildsAllowed property: &lt;p&gt;Specifies the maximum number of builds allowed.&lt;/p&gt;.
     * 
     * @return the maximumBuildsAllowed value.
     */
    public Integer maximumBuildsAllowed() {
        return this.maximumBuildsAllowed;
    }

    /**
     * Set the maximumBuildsAllowed property: &lt;p&gt;Specifies the maximum number of builds allowed.&lt;/p&gt;.
     * 
     * @param maximumBuildsAllowed the maximumBuildsAllowed value to set.
     * @return the BatchRestrictions object itself.
     */
    public BatchRestrictions withMaximumBuildsAllowed(Integer maximumBuildsAllowed) {
        this.maximumBuildsAllowed = maximumBuildsAllowed;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("computeTypesAllowed", this.computeTypesAllowed,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("maximumBuildsAllowed", this.maximumBuildsAllowed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchRestrictions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchRestrictions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchRestrictions.
     */
    public static BatchRestrictions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchRestrictions deserializedBatchRestrictions = new BatchRestrictions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeTypesAllowed".equals(fieldName)) {
                    List<String> computeTypesAllowed = reader.readArray(reader1 -> reader1.getString());
                    deserializedBatchRestrictions.computeTypesAllowed = computeTypesAllowed;
                } else if ("maximumBuildsAllowed".equals(fieldName)) {
                    deserializedBatchRestrictions.maximumBuildsAllowed = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchRestrictions;
        });
    }
}
