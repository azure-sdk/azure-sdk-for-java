// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of AuthenticateCognitoConfig.
 */
@Fluent
public final class AuthenticateCognitoConfig implements JsonSerializable<AuthenticateCognitoConfig> {
    /*
     * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
     */
    private Map<String, String> authenticationRequestExtraParams;

    /*
     * The behavior if the user is not authenticated. The following are possible values: + deny```` - Return an HTTP 401
     * Unauthorized error. + allow```` - Allow the request to be forwarded to the target. + authenticate```` - Redirect
     * the request to the IdP authorization endpoint. This is the default value.
     */
    private String onUnauthenticatedRequest;

    /*
     * The set of user claims to be requested from the IdP. The default is ``openid``. To verify which scope values your
     * IdP supports and how to separate multiple values, see the documentation for your IdP.
     */
    private String scope;

    /*
     * The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
     */
    private String sessionCookieName;

    /*
     * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
     */
    private String sessionTimeout;

    /*
     * The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
     */
    private String userPoolArn;

    /*
     * The ID of the Amazon Cognito user pool client.
     */
    private String userPoolClientId;

    /*
     * The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
     */
    private String userPoolDomain;

    /**
     * Creates an instance of AuthenticateCognitoConfig class.
     */
    public AuthenticateCognitoConfig() {
    }

    /**
     * Get the authenticationRequestExtraParams property: The query parameters (up to 10) to include in the redirect
     * request to the authorization endpoint.
     * 
     * @return the authenticationRequestExtraParams value.
     */
    public Map<String, String> authenticationRequestExtraParams() {
        return this.authenticationRequestExtraParams;
    }

    /**
     * Set the authenticationRequestExtraParams property: The query parameters (up to 10) to include in the redirect
     * request to the authorization endpoint.
     * 
     * @param authenticationRequestExtraParams the authenticationRequestExtraParams value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig
        withAuthenticationRequestExtraParams(Map<String, String> authenticationRequestExtraParams) {
        this.authenticationRequestExtraParams = authenticationRequestExtraParams;
        return this;
    }

    /**
     * Get the onUnauthenticatedRequest property: The behavior if the user is not authenticated. The following are
     * possible values: + deny```` - Return an HTTP 401 Unauthorized error. + allow```` - Allow the request to be
     * forwarded to the target. + authenticate```` - Redirect the request to the IdP authorization endpoint. This is the
     * default value.
     * 
     * @return the onUnauthenticatedRequest value.
     */
    public String onUnauthenticatedRequest() {
        return this.onUnauthenticatedRequest;
    }

    /**
     * Set the onUnauthenticatedRequest property: The behavior if the user is not authenticated. The following are
     * possible values: + deny```` - Return an HTTP 401 Unauthorized error. + allow```` - Allow the request to be
     * forwarded to the target. + authenticate```` - Redirect the request to the IdP authorization endpoint. This is the
     * default value.
     * 
     * @param onUnauthenticatedRequest the onUnauthenticatedRequest value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withOnUnauthenticatedRequest(String onUnauthenticatedRequest) {
        this.onUnauthenticatedRequest = onUnauthenticatedRequest;
        return this;
    }

    /**
     * Get the scope property: The set of user claims to be requested from the IdP. The default is ``openid``. To verify
     * which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The set of user claims to be requested from the IdP. The default is ``openid``. To verify
     * which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
     * 
     * @param scope the scope value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the sessionCookieName property: The name of the cookie used to maintain session information. The default is
     * AWSELBAuthSessionCookie.
     * 
     * @return the sessionCookieName value.
     */
    public String sessionCookieName() {
        return this.sessionCookieName;
    }

    /**
     * Set the sessionCookieName property: The name of the cookie used to maintain session information. The default is
     * AWSELBAuthSessionCookie.
     * 
     * @param sessionCookieName the sessionCookieName value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withSessionCookieName(String sessionCookieName) {
        this.sessionCookieName = sessionCookieName;
        return this;
    }

    /**
     * Get the sessionTimeout property: The maximum duration of the authentication session, in seconds. The default is
     * 604800 seconds (7 days).
     * 
     * @return the sessionTimeout value.
     */
    public String sessionTimeout() {
        return this.sessionTimeout;
    }

    /**
     * Set the sessionTimeout property: The maximum duration of the authentication session, in seconds. The default is
     * 604800 seconds (7 days).
     * 
     * @param sessionTimeout the sessionTimeout value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withSessionTimeout(String sessionTimeout) {
        this.sessionTimeout = sessionTimeout;
        return this;
    }

    /**
     * Get the userPoolArn property: The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
     * 
     * @return the userPoolArn value.
     */
    public String userPoolArn() {
        return this.userPoolArn;
    }

    /**
     * Set the userPoolArn property: The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
     * 
     * @param userPoolArn the userPoolArn value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withUserPoolArn(String userPoolArn) {
        this.userPoolArn = userPoolArn;
        return this;
    }

    /**
     * Get the userPoolClientId property: The ID of the Amazon Cognito user pool client.
     * 
     * @return the userPoolClientId value.
     */
    public String userPoolClientId() {
        return this.userPoolClientId;
    }

    /**
     * Set the userPoolClientId property: The ID of the Amazon Cognito user pool client.
     * 
     * @param userPoolClientId the userPoolClientId value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withUserPoolClientId(String userPoolClientId) {
        this.userPoolClientId = userPoolClientId;
        return this;
    }

    /**
     * Get the userPoolDomain property: The domain prefix or fully-qualified domain name of the Amazon Cognito user
     * pool.
     * 
     * @return the userPoolDomain value.
     */
    public String userPoolDomain() {
        return this.userPoolDomain;
    }

    /**
     * Set the userPoolDomain property: The domain prefix or fully-qualified domain name of the Amazon Cognito user
     * pool.
     * 
     * @param userPoolDomain the userPoolDomain value to set.
     * @return the AuthenticateCognitoConfig object itself.
     */
    public AuthenticateCognitoConfig withUserPoolDomain(String userPoolDomain) {
        this.userPoolDomain = userPoolDomain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("authenticationRequestExtraParams", this.authenticationRequestExtraParams,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("onUnauthenticatedRequest", this.onUnauthenticatedRequest);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("sessionCookieName", this.sessionCookieName);
        jsonWriter.writeStringField("sessionTimeout", this.sessionTimeout);
        jsonWriter.writeStringField("userPoolArn", this.userPoolArn);
        jsonWriter.writeStringField("userPoolClientId", this.userPoolClientId);
        jsonWriter.writeStringField("userPoolDomain", this.userPoolDomain);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthenticateCognitoConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthenticateCognitoConfig if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthenticateCognitoConfig.
     */
    public static AuthenticateCognitoConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthenticateCognitoConfig deserializedAuthenticateCognitoConfig = new AuthenticateCognitoConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationRequestExtraParams".equals(fieldName)) {
                    Map<String, String> authenticationRequestExtraParams
                        = reader.readMap(reader1 -> reader1.getString());
                    deserializedAuthenticateCognitoConfig.authenticationRequestExtraParams
                        = authenticationRequestExtraParams;
                } else if ("onUnauthenticatedRequest".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.onUnauthenticatedRequest = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.scope = reader.getString();
                } else if ("sessionCookieName".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.sessionCookieName = reader.getString();
                } else if ("sessionTimeout".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.sessionTimeout = reader.getString();
                } else if ("userPoolArn".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.userPoolArn = reader.getString();
                } else if ("userPoolClientId".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.userPoolClientId = reader.getString();
                } else if ("userPoolDomain".equals(fieldName)) {
                    deserializedAuthenticateCognitoConfig.userPoolDomain = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthenticateCognitoConfig;
        });
    }
}
