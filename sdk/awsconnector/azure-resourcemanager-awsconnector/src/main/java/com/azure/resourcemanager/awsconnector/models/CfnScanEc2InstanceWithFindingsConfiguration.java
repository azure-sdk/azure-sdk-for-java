// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CFNScanEc2InstanceWithFindingsConfiguration.
 */
@Fluent
public final class CfnScanEc2InstanceWithFindingsConfiguration
    implements JsonSerializable<CfnScanEc2InstanceWithFindingsConfiguration> {
    /*
     * Property ebsVolumes
     */
    private Boolean ebsVolumes;

    /**
     * Creates an instance of CfnScanEc2InstanceWithFindingsConfiguration class.
     */
    public CfnScanEc2InstanceWithFindingsConfiguration() {
    }

    /**
     * Get the ebsVolumes property: Property ebsVolumes.
     * 
     * @return the ebsVolumes value.
     */
    public Boolean ebsVolumes() {
        return this.ebsVolumes;
    }

    /**
     * Set the ebsVolumes property: Property ebsVolumes.
     * 
     * @param ebsVolumes the ebsVolumes value to set.
     * @return the CfnScanEc2InstanceWithFindingsConfiguration object itself.
     */
    public CfnScanEc2InstanceWithFindingsConfiguration withEbsVolumes(Boolean ebsVolumes) {
        this.ebsVolumes = ebsVolumes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("ebsVolumes", this.ebsVolumes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CfnScanEc2InstanceWithFindingsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CfnScanEc2InstanceWithFindingsConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CfnScanEc2InstanceWithFindingsConfiguration.
     */
    public static CfnScanEc2InstanceWithFindingsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CfnScanEc2InstanceWithFindingsConfiguration deserializedCfnScanEc2InstanceWithFindingsConfiguration
                = new CfnScanEc2InstanceWithFindingsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ebsVolumes".equals(fieldName)) {
                    deserializedCfnScanEc2InstanceWithFindingsConfiguration.ebsVolumes
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCfnScanEc2InstanceWithFindingsConfiguration;
        });
    }
}
