// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RedirectRule.
 */
@Fluent
public final class RedirectRule implements JsonSerializable<RedirectRule> {
    /*
     * The host name to use in the redirect request.
     */
    private String hostname;

    /*
     * The HTTP redirect code to use on the response. Not required if one of the siblings is present.
     */
    private String httpRedirectCode;

    /*
     * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
     */
    private RedirectRuleProtocol protocol;

    /*
     * The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix
     * ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with
     * ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not
     * required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using XML
     * requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-
     * constraints).
     */
    private String replaceKeyPrefixWith;

    /*
     * The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not
     * required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using XML
     * requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-
     * constraints).
     */
    private String replaceKeyWith;

    /**
     * Creates an instance of RedirectRule class.
     */
    public RedirectRule() {
    }

    /**
     * Get the hostname property: The host name to use in the redirect request.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The host name to use in the redirect request.
     * 
     * @param hostname the hostname value to set.
     * @return the RedirectRule object itself.
     */
    public RedirectRule withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the httpRedirectCode property: The HTTP redirect code to use on the response. Not required if one of the
     * siblings is present.
     * 
     * @return the httpRedirectCode value.
     */
    public String httpRedirectCode() {
        return this.httpRedirectCode;
    }

    /**
     * Set the httpRedirectCode property: The HTTP redirect code to use on the response. Not required if one of the
     * siblings is present.
     * 
     * @param httpRedirectCode the httpRedirectCode value to set.
     * @return the RedirectRule object itself.
     */
    public RedirectRule withHttpRedirectCode(String httpRedirectCode) {
        this.httpRedirectCode = httpRedirectCode;
        return this;
    }

    /**
     * Get the protocol property: Protocol to use when redirecting requests. The default is the protocol that is used in
     * the original request.
     * 
     * @return the protocol value.
     */
    public RedirectRuleProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol to use when redirecting requests. The default is the protocol that is used in
     * the original request.
     * 
     * @param protocol the protocol value to set.
     * @return the RedirectRule object itself.
     */
    public RedirectRule withProtocol(RedirectRuleProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the replaceKeyPrefixWith property: The object key prefix to use in the redirect request. For example, to
     * redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you
     * can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set
     * ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only
     * if ``ReplaceKeyWith`` is not provided. Replacement must be made for object keys containing special characters
     * (such as carriage returns) when using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @return the replaceKeyPrefixWith value.
     */
    public String replaceKeyPrefixWith() {
        return this.replaceKeyPrefixWith;
    }

    /**
     * Set the replaceKeyPrefixWith property: The object key prefix to use in the redirect request. For example, to
     * redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you
     * can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set
     * ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only
     * if ``ReplaceKeyWith`` is not provided. Replacement must be made for object keys containing special characters
     * (such as carriage returns) when using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @param replaceKeyPrefixWith the replaceKeyPrefixWith value to set.
     * @return the RedirectRule object itself.
     */
    public RedirectRule withReplaceKeyPrefixWith(String replaceKeyPrefixWith) {
        this.replaceKeyPrefixWith = replaceKeyPrefixWith;
        return this;
    }

    /**
     * Get the replaceKeyWith property: The specific object key to use in the redirect request. For example, redirect
     * request to ``error.html``. Not required if one of the siblings is present. Can be present only if
     * ``ReplaceKeyPrefixWith`` is not provided. Replacement must be made for object keys containing special characters
     * (such as carriage returns) when using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @return the replaceKeyWith value.
     */
    public String replaceKeyWith() {
        return this.replaceKeyWith;
    }

    /**
     * Set the replaceKeyWith property: The specific object key to use in the redirect request. For example, redirect
     * request to ``error.html``. Not required if one of the siblings is present. Can be present only if
     * ``ReplaceKeyPrefixWith`` is not provided. Replacement must be made for object keys containing special characters
     * (such as carriage returns) when using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @param replaceKeyWith the replaceKeyWith value to set.
     * @return the RedirectRule object itself.
     */
    public RedirectRule withReplaceKeyWith(String replaceKeyWith) {
        this.replaceKeyWith = replaceKeyWith;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("httpRedirectCode", this.httpRedirectCode);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("replaceKeyPrefixWith", this.replaceKeyPrefixWith);
        jsonWriter.writeStringField("replaceKeyWith", this.replaceKeyWith);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedirectRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedirectRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedirectRule.
     */
    public static RedirectRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedirectRule deserializedRedirectRule = new RedirectRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostName".equals(fieldName)) {
                    deserializedRedirectRule.hostname = reader.getString();
                } else if ("httpRedirectCode".equals(fieldName)) {
                    deserializedRedirectRule.httpRedirectCode = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedRedirectRule.protocol = RedirectRuleProtocol.fromString(reader.getString());
                } else if ("replaceKeyPrefixWith".equals(fieldName)) {
                    deserializedRedirectRule.replaceKeyPrefixWith = reader.getString();
                } else if ("replaceKeyWith".equals(fieldName)) {
                    deserializedRedirectRule.replaceKeyWith = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedirectRule;
        });
    }
}
