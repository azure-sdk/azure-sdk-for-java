// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of awsEksNodegroup.
 */
@Fluent
public final class AwsEksNodegroupProperties implements JsonSerializable<AwsEksNodegroupProperties> {
    /*
     * The AMI type for your node group.
     */
    private String amiType;

    /*
     * Property arn
     */
    private String arn;

    /*
     * The capacity type of your managed node group.
     */
    private String capacityType;

    /*
     * Name of the cluster to create the node group in.
     */
    private String clusterName;

    /*
     * The root device disk size (in GiB) for your node group instances.
     */
    private Integer diskSize;

    /*
     * Force the update if the existing node group's pods are unable to be drained due to a pod disruption budget issue.
     */
    private Boolean forceUpdateEnabled;

    /*
     * Property id
     */
    private String id;

    /*
     * Specify the instance types for a node group.
     */
    private List<String> instanceTypes;

    /*
     * The Kubernetes labels to be applied to the nodes in the node group when they are created.
     */
    private Map<String, String> labels;

    /*
     * An object representing a node group's launch template specification. An object representing a launch template
     * specification for AWS EKS Nodegroup.
     */
    private LaunchTemplateSpecificationAutoGenerated launchTemplate;

    /*
     * The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
     */
    private String nodeRole;

    /*
     * The unique name to give your node group.
     */
    private String nodegroupName;

    /*
     * The AMI version of the Amazon EKS-optimized AMI to use with your node group.
     */
    private String releaseVersion;

    /*
     * The remote access (SSH) configuration to use with your node group. An object representing a remote access
     * configuration specification for AWS EKS Nodegroup.
     */
    private RemoteAccess remoteAccess;

    /*
     * The scaling configuration details for the Auto Scaling group that is created for your node group. An object
     * representing a auto scaling group specification for AWS EKS Nodegroup.
     */
    private ScalingConfig scalingConfig;

    /*
     * The subnets to use for the Auto Scaling group that is created for your node group.
     */
    private List<String> subnets;

    /*
     * The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization.
     * Follows same schema as Labels for consistency.
     */
    private Map<String, String> tags;

    /*
     * The Kubernetes taints to be applied to the nodes in the node group when they are created.
     */
    private List<Taint> taints;

    /*
     * The node group update configuration. The node group update configuration.
     */
    private UpdateConfig updateConfig;

    /*
     * The Kubernetes version to use for your managed nodes.
     */
    private String version;

    /**
     * Creates an instance of AwsEksNodegroupProperties class.
     */
    public AwsEksNodegroupProperties() {
    }

    /**
     * Get the amiType property: The AMI type for your node group.
     * 
     * @return the amiType value.
     */
    public String amiType() {
        return this.amiType;
    }

    /**
     * Set the amiType property: The AMI type for your node group.
     * 
     * @param amiType the amiType value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withAmiType(String amiType) {
        this.amiType = amiType;
        return this;
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the capacityType property: The capacity type of your managed node group.
     * 
     * @return the capacityType value.
     */
    public String capacityType() {
        return this.capacityType;
    }

    /**
     * Set the capacityType property: The capacity type of your managed node group.
     * 
     * @param capacityType the capacityType value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withCapacityType(String capacityType) {
        this.capacityType = capacityType;
        return this;
    }

    /**
     * Get the clusterName property: Name of the cluster to create the node group in.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: Name of the cluster to create the node group in.
     * 
     * @param clusterName the clusterName value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the diskSize property: The root device disk size (in GiB) for your node group instances.
     * 
     * @return the diskSize value.
     */
    public Integer diskSize() {
        return this.diskSize;
    }

    /**
     * Set the diskSize property: The root device disk size (in GiB) for your node group instances.
     * 
     * @param diskSize the diskSize value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withDiskSize(Integer diskSize) {
        this.diskSize = diskSize;
        return this;
    }

    /**
     * Get the forceUpdateEnabled property: Force the update if the existing node group's pods are unable to be drained
     * due to a pod disruption budget issue.
     * 
     * @return the forceUpdateEnabled value.
     */
    public Boolean forceUpdateEnabled() {
        return this.forceUpdateEnabled;
    }

    /**
     * Set the forceUpdateEnabled property: Force the update if the existing node group's pods are unable to be drained
     * due to a pod disruption budget issue.
     * 
     * @param forceUpdateEnabled the forceUpdateEnabled value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withForceUpdateEnabled(Boolean forceUpdateEnabled) {
        this.forceUpdateEnabled = forceUpdateEnabled;
        return this;
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the instanceTypes property: Specify the instance types for a node group.
     * 
     * @return the instanceTypes value.
     */
    public List<String> instanceTypes() {
        return this.instanceTypes;
    }

    /**
     * Set the instanceTypes property: Specify the instance types for a node group.
     * 
     * @param instanceTypes the instanceTypes value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withInstanceTypes(List<String> instanceTypes) {
        this.instanceTypes = instanceTypes;
        return this;
    }

    /**
     * Get the labels property: The Kubernetes labels to be applied to the nodes in the node group when they are
     * created.
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: The Kubernetes labels to be applied to the nodes in the node group when they are
     * created.
     * 
     * @param labels the labels value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the launchTemplate property: An object representing a node group's launch template specification. An object
     * representing a launch template specification for AWS EKS Nodegroup.
     * 
     * @return the launchTemplate value.
     */
    public LaunchTemplateSpecificationAutoGenerated launchTemplate() {
        return this.launchTemplate;
    }

    /**
     * Set the launchTemplate property: An object representing a node group's launch template specification. An object
     * representing a launch template specification for AWS EKS Nodegroup.
     * 
     * @param launchTemplate the launchTemplate value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withLaunchTemplate(LaunchTemplateSpecificationAutoGenerated launchTemplate) {
        this.launchTemplate = launchTemplate;
        return this;
    }

    /**
     * Get the nodeRole property: The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
     * 
     * @return the nodeRole value.
     */
    public String nodeRole() {
        return this.nodeRole;
    }

    /**
     * Set the nodeRole property: The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
     * 
     * @param nodeRole the nodeRole value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withNodeRole(String nodeRole) {
        this.nodeRole = nodeRole;
        return this;
    }

    /**
     * Get the nodegroupName property: The unique name to give your node group.
     * 
     * @return the nodegroupName value.
     */
    public String nodegroupName() {
        return this.nodegroupName;
    }

    /**
     * Set the nodegroupName property: The unique name to give your node group.
     * 
     * @param nodegroupName the nodegroupName value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withNodegroupName(String nodegroupName) {
        this.nodegroupName = nodegroupName;
        return this;
    }

    /**
     * Get the releaseVersion property: The AMI version of the Amazon EKS-optimized AMI to use with your node group.
     * 
     * @return the releaseVersion value.
     */
    public String releaseVersion() {
        return this.releaseVersion;
    }

    /**
     * Set the releaseVersion property: The AMI version of the Amazon EKS-optimized AMI to use with your node group.
     * 
     * @param releaseVersion the releaseVersion value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withReleaseVersion(String releaseVersion) {
        this.releaseVersion = releaseVersion;
        return this;
    }

    /**
     * Get the remoteAccess property: The remote access (SSH) configuration to use with your node group. An object
     * representing a remote access configuration specification for AWS EKS Nodegroup.
     * 
     * @return the remoteAccess value.
     */
    public RemoteAccess remoteAccess() {
        return this.remoteAccess;
    }

    /**
     * Set the remoteAccess property: The remote access (SSH) configuration to use with your node group. An object
     * representing a remote access configuration specification for AWS EKS Nodegroup.
     * 
     * @param remoteAccess the remoteAccess value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withRemoteAccess(RemoteAccess remoteAccess) {
        this.remoteAccess = remoteAccess;
        return this;
    }

    /**
     * Get the scalingConfig property: The scaling configuration details for the Auto Scaling group that is created for
     * your node group. An object representing a auto scaling group specification for AWS EKS Nodegroup.
     * 
     * @return the scalingConfig value.
     */
    public ScalingConfig scalingConfig() {
        return this.scalingConfig;
    }

    /**
     * Set the scalingConfig property: The scaling configuration details for the Auto Scaling group that is created for
     * your node group. An object representing a auto scaling group specification for AWS EKS Nodegroup.
     * 
     * @param scalingConfig the scalingConfig value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withScalingConfig(ScalingConfig scalingConfig) {
        this.scalingConfig = scalingConfig;
        return this;
    }

    /**
     * Get the subnets property: The subnets to use for the Auto Scaling group that is created for your node group.
     * 
     * @return the subnets value.
     */
    public List<String> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: The subnets to use for the Auto Scaling group that is created for your node group.
     * 
     * @param subnets the subnets value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withSubnets(List<String> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the tags property: The metadata, as key-value pairs, to apply to the node group to assist with categorization
     * and organization. Follows same schema as Labels for consistency.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The metadata, as key-value pairs, to apply to the node group to assist with categorization
     * and organization. Follows same schema as Labels for consistency.
     * 
     * @param tags the tags value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the taints property: The Kubernetes taints to be applied to the nodes in the node group when they are
     * created.
     * 
     * @return the taints value.
     */
    public List<Taint> taints() {
        return this.taints;
    }

    /**
     * Set the taints property: The Kubernetes taints to be applied to the nodes in the node group when they are
     * created.
     * 
     * @param taints the taints value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withTaints(List<Taint> taints) {
        this.taints = taints;
        return this;
    }

    /**
     * Get the updateConfig property: The node group update configuration. The node group update configuration.
     * 
     * @return the updateConfig value.
     */
    public UpdateConfig updateConfig() {
        return this.updateConfig;
    }

    /**
     * Set the updateConfig property: The node group update configuration. The node group update configuration.
     * 
     * @param updateConfig the updateConfig value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withUpdateConfig(UpdateConfig updateConfig) {
        this.updateConfig = updateConfig;
        return this;
    }

    /**
     * Get the version property: The Kubernetes version to use for your managed nodes.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The Kubernetes version to use for your managed nodes.
     * 
     * @param version the version value to set.
     * @return the AwsEksNodegroupProperties object itself.
     */
    public AwsEksNodegroupProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (launchTemplate() != null) {
            launchTemplate().validate();
        }
        if (remoteAccess() != null) {
            remoteAccess().validate();
        }
        if (scalingConfig() != null) {
            scalingConfig().validate();
        }
        if (taints() != null) {
            taints().forEach(e -> e.validate());
        }
        if (updateConfig() != null) {
            updateConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("amiType", this.amiType);
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("capacityType", this.capacityType);
        jsonWriter.writeStringField("clusterName", this.clusterName);
        jsonWriter.writeNumberField("diskSize", this.diskSize);
        jsonWriter.writeBooleanField("forceUpdateEnabled", this.forceUpdateEnabled);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("instanceTypes", this.instanceTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("launchTemplate", this.launchTemplate);
        jsonWriter.writeStringField("nodeRole", this.nodeRole);
        jsonWriter.writeStringField("nodegroupName", this.nodegroupName);
        jsonWriter.writeStringField("releaseVersion", this.releaseVersion);
        jsonWriter.writeJsonField("remoteAccess", this.remoteAccess);
        jsonWriter.writeJsonField("scalingConfig", this.scalingConfig);
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("taints", this.taints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("updateConfig", this.updateConfig);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEksNodegroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEksNodegroupProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEksNodegroupProperties.
     */
    public static AwsEksNodegroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEksNodegroupProperties deserializedAwsEksNodegroupProperties = new AwsEksNodegroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amiType".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.amiType = reader.getString();
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.arn = reader.getString();
                } else if ("capacityType".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.capacityType = reader.getString();
                } else if ("clusterName".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.clusterName = reader.getString();
                } else if ("diskSize".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.diskSize = reader.getNullable(JsonReader::getInt);
                } else if ("forceUpdateEnabled".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.forceUpdateEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("id".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.id = reader.getString();
                } else if ("instanceTypes".equals(fieldName)) {
                    List<String> instanceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEksNodegroupProperties.instanceTypes = instanceTypes;
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedAwsEksNodegroupProperties.labels = labels;
                } else if ("launchTemplate".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.launchTemplate
                        = LaunchTemplateSpecificationAutoGenerated.fromJson(reader);
                } else if ("nodeRole".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.nodeRole = reader.getString();
                } else if ("nodegroupName".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.nodegroupName = reader.getString();
                } else if ("releaseVersion".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.releaseVersion = reader.getString();
                } else if ("remoteAccess".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.remoteAccess = RemoteAccess.fromJson(reader);
                } else if ("scalingConfig".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.scalingConfig = ScalingConfig.fromJson(reader);
                } else if ("subnets".equals(fieldName)) {
                    List<String> subnets = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEksNodegroupProperties.subnets = subnets;
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAwsEksNodegroupProperties.tags = tags;
                } else if ("taints".equals(fieldName)) {
                    List<Taint> taints = reader.readArray(reader1 -> Taint.fromJson(reader1));
                    deserializedAwsEksNodegroupProperties.taints = taints;
                } else if ("updateConfig".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.updateConfig = UpdateConfig.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedAwsEksNodegroupProperties.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEksNodegroupProperties;
        });
    }
}
