// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FSxWindowsFileServerVolumeConfiguration.
 */
@Fluent
public final class FSxWindowsFileServerVolumeConfiguration
    implements JsonSerializable<FSxWindowsFileServerVolumeConfiguration> {
    /*
     * The authorization configuration details for the Amazon FSx for Windows File Server file system.
     */
    private FSxAuthorizationConfig authorizationConfig;

    /*
     * The Amazon FSx for Windows File Server file system ID to use.
     */
    private String fileSystemId;

    /*
     * The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the
     * host.
     */
    private String rootDirectory;

    /**
     * Creates an instance of FSxWindowsFileServerVolumeConfiguration class.
     */
    public FSxWindowsFileServerVolumeConfiguration() {
    }

    /**
     * Get the authorizationConfig property: The authorization configuration details for the Amazon FSx for Windows File
     * Server file system.
     * 
     * @return the authorizationConfig value.
     */
    public FSxAuthorizationConfig authorizationConfig() {
        return this.authorizationConfig;
    }

    /**
     * Set the authorizationConfig property: The authorization configuration details for the Amazon FSx for Windows File
     * Server file system.
     * 
     * @param authorizationConfig the authorizationConfig value to set.
     * @return the FSxWindowsFileServerVolumeConfiguration object itself.
     */
    public FSxWindowsFileServerVolumeConfiguration withAuthorizationConfig(FSxAuthorizationConfig authorizationConfig) {
        this.authorizationConfig = authorizationConfig;
        return this;
    }

    /**
     * Get the fileSystemId property: The Amazon FSx for Windows File Server file system ID to use.
     * 
     * @return the fileSystemId value.
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * Set the fileSystemId property: The Amazon FSx for Windows File Server file system ID to use.
     * 
     * @param fileSystemId the fileSystemId value to set.
     * @return the FSxWindowsFileServerVolumeConfiguration object itself.
     */
    public FSxWindowsFileServerVolumeConfiguration withFileSystemId(String fileSystemId) {
        this.fileSystemId = fileSystemId;
        return this;
    }

    /**
     * Get the rootDirectory property: The directory within the Amazon FSx for Windows File Server file system to mount
     * as the root directory inside the host.
     * 
     * @return the rootDirectory value.
     */
    public String rootDirectory() {
        return this.rootDirectory;
    }

    /**
     * Set the rootDirectory property: The directory within the Amazon FSx for Windows File Server file system to mount
     * as the root directory inside the host.
     * 
     * @param rootDirectory the rootDirectory value to set.
     * @return the FSxWindowsFileServerVolumeConfiguration object itself.
     */
    public FSxWindowsFileServerVolumeConfiguration withRootDirectory(String rootDirectory) {
        this.rootDirectory = rootDirectory;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizationConfig() != null) {
            authorizationConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authorizationConfig", this.authorizationConfig);
        jsonWriter.writeStringField("fileSystemId", this.fileSystemId);
        jsonWriter.writeStringField("rootDirectory", this.rootDirectory);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FSxWindowsFileServerVolumeConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FSxWindowsFileServerVolumeConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FSxWindowsFileServerVolumeConfiguration.
     */
    public static FSxWindowsFileServerVolumeConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FSxWindowsFileServerVolumeConfiguration deserializedFSxWindowsFileServerVolumeConfiguration
                = new FSxWindowsFileServerVolumeConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizationConfig".equals(fieldName)) {
                    deserializedFSxWindowsFileServerVolumeConfiguration.authorizationConfig
                        = FSxAuthorizationConfig.fromJson(reader);
                } else if ("fileSystemId".equals(fieldName)) {
                    deserializedFSxWindowsFileServerVolumeConfiguration.fileSystemId = reader.getString();
                } else if ("rootDirectory".equals(fieldName)) {
                    deserializedFSxWindowsFileServerVolumeConfiguration.rootDirectory = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFSxWindowsFileServerVolumeConfiguration;
        });
    }
}
