// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ServiceConnectService.
 */
@Fluent
public final class ServiceConnectService implements JsonSerializable<ServiceConnectService> {
    /*
     * The list of client aliases for this Service Connect service. You use these to assign names that can be used by
     * client applications. The maximum number of client aliases that you can have in this list is 1. Each alias
     * ('endpoint') is a fully-qualified name and port number that other Amazon ECS tasks ('clients') can use to connect
     * to this service. Each name and port mapping must be unique within the namespace. For each
     * ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
     */
    private List<ServiceConnectClientAlias> clientAliases;

    /*
     * The ``discoveryName`` is the name of the new CMAP service that Amazon ECS creates for this Amazon ECS service.
     * This must be unique within the CMAP namespace. The name can contain up to 64 characters. The name can include
     * lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen. If the
     * ``discoveryName`` isn't specified, the port mapping name from the task definition is used in
     * ``portName.namespace``.
     */
    private String discoveryName;

    /*
     * The port number for the Service Connect proxy to listen on. Use the value of this field to bypass the proxy for
     * traffic on the port number specified in the named ``portMapping`` in the task definition of this application, and
     * then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service. In
     * ``awsvpc`` mode and Fargate, the default value is the container port number. The container port number is in the
     * ``portMapping`` in the task definition. In bridge mode, the default value is the ephemeral port of the Service
     * Connect proxy.
     */
    private Integer ingressPortOverride;

    /*
     * The ``portName`` must match the name of one of the ``portMappings`` from all the containers in the task
     * definition of this Amazon ECS service.
     */
    private String portName;

    /*
     * A reference to an object that represents the configured timeouts for Service Connect. An object that represents
     * the timeout configurations for Service Connect. If ``idleTimeout`` is set to a time that is less than
     * ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not the
     * ``perRequestTimeout``.
     */
    private TimeoutConfiguration timeout;

    /*
     * A reference to an object that represents a Transport Layer Security (TLS) configuration. An object that
     * represents the configuration for Service Connect TLS.
     */
    private ServiceConnectTlsConfiguration tls;

    /**
     * Creates an instance of ServiceConnectService class.
     */
    public ServiceConnectService() {
    }

    /**
     * Get the clientAliases property: The list of client aliases for this Service Connect service. You use these to
     * assign names that can be used by client applications. The maximum number of client aliases that you can have in
     * this list is 1. Each alias ('endpoint') is a fully-qualified name and port number that other Amazon ECS tasks
     * ('clients') can use to connect to this service. Each name and port mapping must be unique within the namespace.
     * For each ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
     * 
     * @return the clientAliases value.
     */
    public List<ServiceConnectClientAlias> clientAliases() {
        return this.clientAliases;
    }

    /**
     * Set the clientAliases property: The list of client aliases for this Service Connect service. You use these to
     * assign names that can be used by client applications. The maximum number of client aliases that you can have in
     * this list is 1. Each alias ('endpoint') is a fully-qualified name and port number that other Amazon ECS tasks
     * ('clients') can use to connect to this service. Each name and port mapping must be unique within the namespace.
     * For each ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
     * 
     * @param clientAliases the clientAliases value to set.
     * @return the ServiceConnectService object itself.
     */
    public ServiceConnectService withClientAliases(List<ServiceConnectClientAlias> clientAliases) {
        this.clientAliases = clientAliases;
        return this;
    }

    /**
     * Get the discoveryName property: The ``discoveryName`` is the name of the new CMAP service that Amazon ECS creates
     * for this Amazon ECS service. This must be unique within the CMAP namespace. The name can contain up to 64
     * characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't
     * start with a hyphen. If the ``discoveryName`` isn't specified, the port mapping name from the task definition is
     * used in ``portName.namespace``.
     * 
     * @return the discoveryName value.
     */
    public String discoveryName() {
        return this.discoveryName;
    }

    /**
     * Set the discoveryName property: The ``discoveryName`` is the name of the new CMAP service that Amazon ECS creates
     * for this Amazon ECS service. This must be unique within the CMAP namespace. The name can contain up to 64
     * characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't
     * start with a hyphen. If the ``discoveryName`` isn't specified, the port mapping name from the task definition is
     * used in ``portName.namespace``.
     * 
     * @param discoveryName the discoveryName value to set.
     * @return the ServiceConnectService object itself.
     */
    public ServiceConnectService withDiscoveryName(String discoveryName) {
        this.discoveryName = discoveryName;
        return this;
    }

    /**
     * Get the ingressPortOverride property: The port number for the Service Connect proxy to listen on. Use the value
     * of this field to bypass the proxy for traffic on the port number specified in the named ``portMapping`` in the
     * task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy
     * for this Amazon ECS service. In ``awsvpc`` mode and Fargate, the default value is the container port number. The
     * container port number is in the ``portMapping`` in the task definition. In bridge mode, the default value is the
     * ephemeral port of the Service Connect proxy.
     * 
     * @return the ingressPortOverride value.
     */
    public Integer ingressPortOverride() {
        return this.ingressPortOverride;
    }

    /**
     * Set the ingressPortOverride property: The port number for the Service Connect proxy to listen on. Use the value
     * of this field to bypass the proxy for traffic on the port number specified in the named ``portMapping`` in the
     * task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy
     * for this Amazon ECS service. In ``awsvpc`` mode and Fargate, the default value is the container port number. The
     * container port number is in the ``portMapping`` in the task definition. In bridge mode, the default value is the
     * ephemeral port of the Service Connect proxy.
     * 
     * @param ingressPortOverride the ingressPortOverride value to set.
     * @return the ServiceConnectService object itself.
     */
    public ServiceConnectService withIngressPortOverride(Integer ingressPortOverride) {
        this.ingressPortOverride = ingressPortOverride;
        return this;
    }

    /**
     * Get the portName property: The ``portName`` must match the name of one of the ``portMappings`` from all the
     * containers in the task definition of this Amazon ECS service.
     * 
     * @return the portName value.
     */
    public String portName() {
        return this.portName;
    }

    /**
     * Set the portName property: The ``portName`` must match the name of one of the ``portMappings`` from all the
     * containers in the task definition of this Amazon ECS service.
     * 
     * @param portName the portName value to set.
     * @return the ServiceConnectService object itself.
     */
    public ServiceConnectService withPortName(String portName) {
        this.portName = portName;
        return this;
    }

    /**
     * Get the timeout property: A reference to an object that represents the configured timeouts for Service Connect.
     * An object that represents the timeout configurations for Service Connect. If ``idleTimeout`` is set to a time
     * that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not
     * the ``perRequestTimeout``.
     * 
     * @return the timeout value.
     */
    public TimeoutConfiguration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: A reference to an object that represents the configured timeouts for Service Connect.
     * An object that represents the timeout configurations for Service Connect. If ``idleTimeout`` is set to a time
     * that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not
     * the ``perRequestTimeout``.
     * 
     * @param timeout the timeout value to set.
     * @return the ServiceConnectService object itself.
     */
    public ServiceConnectService withTimeout(TimeoutConfiguration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the tls property: A reference to an object that represents a Transport Layer Security (TLS) configuration. An
     * object that represents the configuration for Service Connect TLS.
     * 
     * @return the tls value.
     */
    public ServiceConnectTlsConfiguration tls() {
        return this.tls;
    }

    /**
     * Set the tls property: A reference to an object that represents a Transport Layer Security (TLS) configuration. An
     * object that represents the configuration for Service Connect TLS.
     * 
     * @param tls the tls value to set.
     * @return the ServiceConnectService object itself.
     */
    public ServiceConnectService withTls(ServiceConnectTlsConfiguration tls) {
        this.tls = tls;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clientAliases() != null) {
            clientAliases().forEach(e -> e.validate());
        }
        if (timeout() != null) {
            timeout().validate();
        }
        if (tls() != null) {
            tls().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("clientAliases", this.clientAliases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("discoveryName", this.discoveryName);
        jsonWriter.writeNumberField("ingressPortOverride", this.ingressPortOverride);
        jsonWriter.writeStringField("portName", this.portName);
        jsonWriter.writeJsonField("timeout", this.timeout);
        jsonWriter.writeJsonField("tls", this.tls);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConnectService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConnectService if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceConnectService.
     */
    public static ServiceConnectService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConnectService deserializedServiceConnectService = new ServiceConnectService();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientAliases".equals(fieldName)) {
                    List<ServiceConnectClientAlias> clientAliases
                        = reader.readArray(reader1 -> ServiceConnectClientAlias.fromJson(reader1));
                    deserializedServiceConnectService.clientAliases = clientAliases;
                } else if ("discoveryName".equals(fieldName)) {
                    deserializedServiceConnectService.discoveryName = reader.getString();
                } else if ("ingressPortOverride".equals(fieldName)) {
                    deserializedServiceConnectService.ingressPortOverride = reader.getNullable(JsonReader::getInt);
                } else if ("portName".equals(fieldName)) {
                    deserializedServiceConnectService.portName = reader.getString();
                } else if ("timeout".equals(fieldName)) {
                    deserializedServiceConnectService.timeout = TimeoutConfiguration.fromJson(reader);
                } else if ("tls".equals(fieldName)) {
                    deserializedServiceConnectService.tls = ServiceConnectTlsConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConnectService;
        });
    }
}
