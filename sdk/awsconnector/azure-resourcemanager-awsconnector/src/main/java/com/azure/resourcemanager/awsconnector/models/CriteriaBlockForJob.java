// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of CriteriaBlockForJob.
 */
@Fluent
public final class CriteriaBlockForJob implements JsonSerializable<CriteriaBlockForJob> {
    /*
     * <p>An array of conditions, one for each condition that determines which buckets to include or exclude from the
     * job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.</p>
     */
    private List<CriteriaForJob> and;

    /**
     * Creates an instance of CriteriaBlockForJob class.
     */
    public CriteriaBlockForJob() {
    }

    /**
     * Get the and property: &lt;p&gt;An array of conditions, one for each condition that determines which buckets to
     * include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the
     * conditions.&lt;/p&gt;.
     * 
     * @return the and value.
     */
    public List<CriteriaForJob> and() {
        return this.and;
    }

    /**
     * Set the and property: &lt;p&gt;An array of conditions, one for each condition that determines which buckets to
     * include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the
     * conditions.&lt;/p&gt;.
     * 
     * @param and the and value to set.
     * @return the CriteriaBlockForJob object itself.
     */
    public CriteriaBlockForJob withAnd(List<CriteriaForJob> and) {
        this.and = and;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (and() != null) {
            and().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("and", this.and, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CriteriaBlockForJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CriteriaBlockForJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CriteriaBlockForJob.
     */
    public static CriteriaBlockForJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CriteriaBlockForJob deserializedCriteriaBlockForJob = new CriteriaBlockForJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("and".equals(fieldName)) {
                    List<CriteriaForJob> and = reader.readArray(reader1 -> CriteriaForJob.fromJson(reader1));
                    deserializedCriteriaBlockForJob.and = and;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCriteriaBlockForJob;
        });
    }
}
