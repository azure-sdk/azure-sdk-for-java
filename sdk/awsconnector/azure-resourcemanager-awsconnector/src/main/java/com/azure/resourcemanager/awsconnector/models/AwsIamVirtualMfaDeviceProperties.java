// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsIamVirtualMFADevice.
 */
@Fluent
public final class AwsIamVirtualMfaDeviceProperties implements JsonSerializable<AwsIamVirtualMfaDeviceProperties> {
    /*
     * Property path
     */
    private String path;

    /*
     * Property serialNumber
     */
    private String serialNumber;

    /*
     * Property tags
     */
    private List<TagAutoGenerated34> tags;

    /*
     * Property users
     */
    private List<String> users;

    /*
     * Property virtualMfaDeviceName
     */
    private String virtualMfaDeviceName;

    /**
     * Creates an instance of AwsIamVirtualMfaDeviceProperties class.
     */
    public AwsIamVirtualMfaDeviceProperties() {
    }

    /**
     * Get the path property: Property path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Property path.
     * 
     * @param path the path value to set.
     * @return the AwsIamVirtualMfaDeviceProperties object itself.
     */
    public AwsIamVirtualMfaDeviceProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the serialNumber property: Property serialNumber.
     * 
     * @return the serialNumber value.
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Set the serialNumber property: Property serialNumber.
     * 
     * @param serialNumber the serialNumber value to set.
     * @return the AwsIamVirtualMfaDeviceProperties object itself.
     */
    public AwsIamVirtualMfaDeviceProperties withSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }

    /**
     * Get the tags property: Property tags.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated34> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Property tags.
     * 
     * @param tags the tags value to set.
     * @return the AwsIamVirtualMfaDeviceProperties object itself.
     */
    public AwsIamVirtualMfaDeviceProperties withTags(List<TagAutoGenerated34> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the users property: Property users.
     * 
     * @return the users value.
     */
    public List<String> users() {
        return this.users;
    }

    /**
     * Set the users property: Property users.
     * 
     * @param users the users value to set.
     * @return the AwsIamVirtualMfaDeviceProperties object itself.
     */
    public AwsIamVirtualMfaDeviceProperties withUsers(List<String> users) {
        this.users = users;
        return this;
    }

    /**
     * Get the virtualMfaDeviceName property: Property virtualMfaDeviceName.
     * 
     * @return the virtualMfaDeviceName value.
     */
    public String virtualMfaDeviceName() {
        return this.virtualMfaDeviceName;
    }

    /**
     * Set the virtualMfaDeviceName property: Property virtualMfaDeviceName.
     * 
     * @param virtualMfaDeviceName the virtualMfaDeviceName value to set.
     * @return the AwsIamVirtualMfaDeviceProperties object itself.
     */
    public AwsIamVirtualMfaDeviceProperties withVirtualMfaDeviceName(String virtualMfaDeviceName) {
        this.virtualMfaDeviceName = virtualMfaDeviceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("users", this.users, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("virtualMfaDeviceName", this.virtualMfaDeviceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamVirtualMfaDeviceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamVirtualMfaDeviceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamVirtualMfaDeviceProperties.
     */
    public static AwsIamVirtualMfaDeviceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamVirtualMfaDeviceProperties deserializedAwsIamVirtualMfaDeviceProperties
                = new AwsIamVirtualMfaDeviceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedAwsIamVirtualMfaDeviceProperties.path = reader.getString();
                } else if ("serialNumber".equals(fieldName)) {
                    deserializedAwsIamVirtualMfaDeviceProperties.serialNumber = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated34> tags = reader.readArray(reader1 -> TagAutoGenerated34.fromJson(reader1));
                    deserializedAwsIamVirtualMfaDeviceProperties.tags = tags;
                } else if ("users".equals(fieldName)) {
                    List<String> users = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsIamVirtualMfaDeviceProperties.users = users;
                } else if ("virtualMfaDeviceName".equals(fieldName)) {
                    deserializedAwsIamVirtualMfaDeviceProperties.virtualMfaDeviceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamVirtualMfaDeviceProperties;
        });
    }
}
