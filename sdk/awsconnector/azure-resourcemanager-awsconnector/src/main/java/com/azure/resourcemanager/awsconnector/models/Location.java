// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Location.
 */
@Fluent
public final class Location implements JsonSerializable<Location> {
    /*
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be
     * sure to add the include Availability Zones parameter to your request.
     */
    private String availabilityZone;

    /*
     * The Region Name in which to create your instance.
     */
    private String regionName;

    /**
     * Creates an instance of Location class.
     */
    public Location() {
    }

    /**
     * Get the availabilityZone property: The Availability Zone in which to create your instance. Use the following
     * format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The Availability Zone in which to create your instance. Use the following
     * format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the Location object itself.
     */
    public Location withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the regionName property: The Region Name in which to create your instance.
     * 
     * @return the regionName value.
     */
    public String regionName() {
        return this.regionName;
    }

    /**
     * Set the regionName property: The Region Name in which to create your instance.
     * 
     * @param regionName the regionName value to set.
     * @return the Location object itself.
     */
    public Location withRegionName(String regionName) {
        this.regionName = regionName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("regionName", this.regionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Location from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Location if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Location.
     */
    public static Location fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Location deserializedLocation = new Location();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedLocation.availabilityZone = reader.getString();
                } else if ("regionName".equals(fieldName)) {
                    deserializedLocation.regionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocation;
        });
    }
}
