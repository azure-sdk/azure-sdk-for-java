// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of StackInstances.
 */
@Fluent
public final class StackInstances implements JsonSerializable<StackInstances> {
    /*
     * The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
     */
    private DeploymentTargets deploymentTargets;

    /*
     * A list of stack set parameters whose values you want to override in the selected stack instances.
     */
    private List<Parameter> parameterOverrides;

    /*
     * The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
     */
    private List<String> regions;

    /**
     * Creates an instance of StackInstances class.
     */
    public StackInstances() {
    }

    /**
     * Get the deploymentTargets property: The AWS OrganizationalUnitIds or Accounts for which to create stack instances
     * in the specified Regions.
     * 
     * @return the deploymentTargets value.
     */
    public DeploymentTargets deploymentTargets() {
        return this.deploymentTargets;
    }

    /**
     * Set the deploymentTargets property: The AWS OrganizationalUnitIds or Accounts for which to create stack instances
     * in the specified Regions.
     * 
     * @param deploymentTargets the deploymentTargets value to set.
     * @return the StackInstances object itself.
     */
    public StackInstances withDeploymentTargets(DeploymentTargets deploymentTargets) {
        this.deploymentTargets = deploymentTargets;
        return this;
    }

    /**
     * Get the parameterOverrides property: A list of stack set parameters whose values you want to override in the
     * selected stack instances.
     * 
     * @return the parameterOverrides value.
     */
    public List<Parameter> parameterOverrides() {
        return this.parameterOverrides;
    }

    /**
     * Set the parameterOverrides property: A list of stack set parameters whose values you want to override in the
     * selected stack instances.
     * 
     * @param parameterOverrides the parameterOverrides value to set.
     * @return the StackInstances object itself.
     */
    public StackInstances withParameterOverrides(List<Parameter> parameterOverrides) {
        this.parameterOverrides = parameterOverrides;
        return this;
    }

    /**
     * Get the regions property: The names of one or more Regions where you want to create stack instances using the
     * specified AWS account(s).
     * 
     * @return the regions value.
     */
    public List<String> regions() {
        return this.regions;
    }

    /**
     * Set the regions property: The names of one or more Regions where you want to create stack instances using the
     * specified AWS account(s).
     * 
     * @param regions the regions value to set.
     * @return the StackInstances object itself.
     */
    public StackInstances withRegions(List<String> regions) {
        this.regions = regions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deploymentTargets() != null) {
            deploymentTargets().validate();
        }
        if (parameterOverrides() != null) {
            parameterOverrides().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("deploymentTargets", this.deploymentTargets);
        jsonWriter.writeArrayField("parameterOverrides", this.parameterOverrides,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("regions", this.regions, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StackInstances from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StackInstances if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StackInstances.
     */
    public static StackInstances fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StackInstances deserializedStackInstances = new StackInstances();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentTargets".equals(fieldName)) {
                    deserializedStackInstances.deploymentTargets = DeploymentTargets.fromJson(reader);
                } else if ("parameterOverrides".equals(fieldName)) {
                    List<Parameter> parameterOverrides = reader.readArray(reader1 -> Parameter.fromJson(reader1));
                    deserializedStackInstances.parameterOverrides = parameterOverrides;
                } else if ("regions".equals(fieldName)) {
                    List<String> regions = reader.readArray(reader1 -> reader1.getString());
                    deserializedStackInstances.regions = regions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStackInstances;
        });
    }
}
