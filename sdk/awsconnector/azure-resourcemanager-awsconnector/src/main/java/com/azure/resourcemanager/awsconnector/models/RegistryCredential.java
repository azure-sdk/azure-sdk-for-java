// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RegistryCredential.
 */
@Fluent
public final class RegistryCredential implements JsonSerializable<RegistryCredential> {
    /*
     * <p> The Amazon Resource Name (ARN) or name of credentials created using Secrets Manager. </p> <note> <p> The
     * <code>credential</code> can use the name of the credentials only if they exist in your current Amazon Web
     * Services Region. </p> </note>
     */
    private String credential;

    /*
     * <p> The service that created the credentials to access a private Docker registry. The valid value,
     * SECRETS_MANAGER, is for Secrets Manager. </p>
     */
    private CredentialProviderTypeEnumValue credentialProvider;

    /**
     * Creates an instance of RegistryCredential class.
     */
    public RegistryCredential() {
    }

    /**
     * Get the credential property: &lt;p&gt; The Amazon Resource Name (ARN) or name of credentials created using
     * Secrets Manager. &lt;/p&gt; &lt;note&gt; &lt;p&gt; The &lt;code&gt;credential&lt;/code&gt; can use the name of
     * the credentials only if they exist in your current Amazon Web Services Region. &lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the credential value.
     */
    public String credential() {
        return this.credential;
    }

    /**
     * Set the credential property: &lt;p&gt; The Amazon Resource Name (ARN) or name of credentials created using
     * Secrets Manager. &lt;/p&gt; &lt;note&gt; &lt;p&gt; The &lt;code&gt;credential&lt;/code&gt; can use the name of
     * the credentials only if they exist in your current Amazon Web Services Region. &lt;/p&gt; &lt;/note&gt;.
     * 
     * @param credential the credential value to set.
     * @return the RegistryCredential object itself.
     */
    public RegistryCredential withCredential(String credential) {
        this.credential = credential;
        return this;
    }

    /**
     * Get the credentialProvider property: &lt;p&gt; The service that created the credentials to access a private
     * Docker registry. The valid value, SECRETS_MANAGER, is for Secrets Manager. &lt;/p&gt;.
     * 
     * @return the credentialProvider value.
     */
    public CredentialProviderTypeEnumValue credentialProvider() {
        return this.credentialProvider;
    }

    /**
     * Set the credentialProvider property: &lt;p&gt; The service that created the credentials to access a private
     * Docker registry. The valid value, SECRETS_MANAGER, is for Secrets Manager. &lt;/p&gt;.
     * 
     * @param credentialProvider the credentialProvider value to set.
     * @return the RegistryCredential object itself.
     */
    public RegistryCredential withCredentialProvider(CredentialProviderTypeEnumValue credentialProvider) {
        this.credentialProvider = credentialProvider;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (credentialProvider() != null) {
            credentialProvider().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("credential", this.credential);
        jsonWriter.writeJsonField("credentialProvider", this.credentialProvider);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryCredential from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryCredential if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegistryCredential.
     */
    public static RegistryCredential fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryCredential deserializedRegistryCredential = new RegistryCredential();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("credential".equals(fieldName)) {
                    deserializedRegistryCredential.credential = reader.getString();
                } else if ("credentialProvider".equals(fieldName)) {
                    deserializedRegistryCredential.credentialProvider
                        = CredentialProviderTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryCredential;
        });
    }
}
