// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2InstanceStatus.
 */
@Fluent
public final class AwsEc2InstanceStatusProperties implements JsonSerializable<AwsEc2InstanceStatusProperties> {
    /*
     * <p>The Availability Zone of the instance.</p>
     */
    private String availabilityZone;

    /*
     * <p>Any scheduled events associated with the instance.</p>
     */
    private List<InstanceStatusEvent> events;

    /*
     * <p>The ID of the instance.</p>
     */
    private String instanceId;

    /*
     * <p>The intended state of the instance. <a>DescribeInstanceStatus</a> requires that an instance be in the
     * <code>running</code> state.</p>
     */
    private InstanceState instanceState;

    /*
     * <p>Reports impaired functionality that stems from issues internal to the instance, such as impaired
     * reachability.</p>
     */
    private InstanceStatusSummary instanceStatus;

    /*
     * <p>The Amazon Resource Name (ARN) of the Outpost.</p>
     */
    private String outpostArn;

    /*
     * <p>Reports impaired functionality that stems from issues related to the systems that support an instance, such as
     * hardware failures and network connectivity problems.</p>
     */
    private InstanceStatusSummary systemStatus;

    /**
     * Creates an instance of AwsEc2InstanceStatusProperties class.
     */
    public AwsEc2InstanceStatusProperties() {
    }

    /**
     * Get the availabilityZone property: &lt;p&gt;The Availability Zone of the instance.&lt;/p&gt;.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: &lt;p&gt;The Availability Zone of the instance.&lt;/p&gt;.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the events property: &lt;p&gt;Any scheduled events associated with the instance.&lt;/p&gt;.
     * 
     * @return the events value.
     */
    public List<InstanceStatusEvent> events() {
        return this.events;
    }

    /**
     * Set the events property: &lt;p&gt;Any scheduled events associated with the instance.&lt;/p&gt;.
     * 
     * @param events the events value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withEvents(List<InstanceStatusEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * Get the instanceId property: &lt;p&gt;The ID of the instance.&lt;/p&gt;.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instanceId property: &lt;p&gt;The ID of the instance.&lt;/p&gt;.
     * 
     * @param instanceId the instanceId value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Get the instanceState property: &lt;p&gt;The intended state of the instance.
     * &lt;a&gt;DescribeInstanceStatus&lt;/a&gt; requires that an instance be in the &lt;code&gt;running&lt;/code&gt;
     * state.&lt;/p&gt;.
     * 
     * @return the instanceState value.
     */
    public InstanceState instanceState() {
        return this.instanceState;
    }

    /**
     * Set the instanceState property: &lt;p&gt;The intended state of the instance.
     * &lt;a&gt;DescribeInstanceStatus&lt;/a&gt; requires that an instance be in the &lt;code&gt;running&lt;/code&gt;
     * state.&lt;/p&gt;.
     * 
     * @param instanceState the instanceState value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withInstanceState(InstanceState instanceState) {
        this.instanceState = instanceState;
        return this;
    }

    /**
     * Get the instanceStatus property: &lt;p&gt;Reports impaired functionality that stems from issues internal to the
     * instance, such as impaired reachability.&lt;/p&gt;.
     * 
     * @return the instanceStatus value.
     */
    public InstanceStatusSummary instanceStatus() {
        return this.instanceStatus;
    }

    /**
     * Set the instanceStatus property: &lt;p&gt;Reports impaired functionality that stems from issues internal to the
     * instance, such as impaired reachability.&lt;/p&gt;.
     * 
     * @param instanceStatus the instanceStatus value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withInstanceStatus(InstanceStatusSummary instanceStatus) {
        this.instanceStatus = instanceStatus;
        return this;
    }

    /**
     * Get the outpostArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the Outpost.&lt;/p&gt;.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the Outpost.&lt;/p&gt;.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the systemStatus property: &lt;p&gt;Reports impaired functionality that stems from issues related to the
     * systems that support an instance, such as hardware failures and network connectivity problems.&lt;/p&gt;.
     * 
     * @return the systemStatus value.
     */
    public InstanceStatusSummary systemStatus() {
        return this.systemStatus;
    }

    /**
     * Set the systemStatus property: &lt;p&gt;Reports impaired functionality that stems from issues related to the
     * systems that support an instance, such as hardware failures and network connectivity problems.&lt;/p&gt;.
     * 
     * @param systemStatus the systemStatus value to set.
     * @return the AwsEc2InstanceStatusProperties object itself.
     */
    public AwsEc2InstanceStatusProperties withSystemStatus(InstanceStatusSummary systemStatus) {
        this.systemStatus = systemStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (events() != null) {
            events().forEach(e -> e.validate());
        }
        if (instanceState() != null) {
            instanceState().validate();
        }
        if (instanceStatus() != null) {
            instanceStatus().validate();
        }
        if (systemStatus() != null) {
            systemStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("instanceId", this.instanceId);
        jsonWriter.writeJsonField("instanceState", this.instanceState);
        jsonWriter.writeJsonField("instanceStatus", this.instanceStatus);
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeJsonField("systemStatus", this.systemStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2InstanceStatusProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2InstanceStatusProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2InstanceStatusProperties.
     */
    public static AwsEc2InstanceStatusProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2InstanceStatusProperties deserializedAwsEc2InstanceStatusProperties
                = new AwsEc2InstanceStatusProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedAwsEc2InstanceStatusProperties.availabilityZone = reader.getString();
                } else if ("events".equals(fieldName)) {
                    List<InstanceStatusEvent> events
                        = reader.readArray(reader1 -> InstanceStatusEvent.fromJson(reader1));
                    deserializedAwsEc2InstanceStatusProperties.events = events;
                } else if ("instanceId".equals(fieldName)) {
                    deserializedAwsEc2InstanceStatusProperties.instanceId = reader.getString();
                } else if ("instanceState".equals(fieldName)) {
                    deserializedAwsEc2InstanceStatusProperties.instanceState = InstanceState.fromJson(reader);
                } else if ("instanceStatus".equals(fieldName)) {
                    deserializedAwsEc2InstanceStatusProperties.instanceStatus = InstanceStatusSummary.fromJson(reader);
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedAwsEc2InstanceStatusProperties.outpostArn = reader.getString();
                } else if ("systemStatus".equals(fieldName)) {
                    deserializedAwsEc2InstanceStatusProperties.systemStatus = InstanceStatusSummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2InstanceStatusProperties;
        });
    }
}
