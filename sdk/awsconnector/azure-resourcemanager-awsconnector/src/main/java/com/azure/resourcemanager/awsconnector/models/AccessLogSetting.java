// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AccessLogSetting.
 */
@Fluent
public final class AccessLogSetting implements JsonSerializable<AccessLogSetting> {
    /*
     * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to
     * receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with
     * ``amazon-apigateway-``. This parameter is required to enable access logging.
     */
    private String destinationArn;

    /*
     * A single line format of the access logs of data, as specified by selected [$context
     * variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.
     * html#context-variable-reference). The format must include at least ``$context.requestId``. This parameter is
     * required to enable access logging.
     */
    private String format;

    /**
     * Creates an instance of AccessLogSetting class.
     */
    public AccessLogSetting() {
    }

    /**
     * Get the destinationArn property: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data
     * Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the
     * stream name must begin with ``amazon-apigateway-``. This parameter is required to enable access logging.
     * 
     * @return the destinationArn value.
     */
    public String destinationArn() {
        return this.destinationArn;
    }

    /**
     * Set the destinationArn property: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data
     * Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the
     * stream name must begin with ``amazon-apigateway-``. This parameter is required to enable access logging.
     * 
     * @param destinationArn the destinationArn value to set.
     * @return the AccessLogSetting object itself.
     */
    public AccessLogSetting withDestinationArn(String destinationArn) {
        this.destinationArn = destinationArn;
        return this;
    }

    /**
     * Get the format property: A single line format of the access logs of data, as specified by selected [$context
     * variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference).
     * The format must include at least ``$context.requestId``. This parameter is required to enable access logging.
     * 
     * @return the format value.
     */
    public String format() {
        return this.format;
    }

    /**
     * Set the format property: A single line format of the access logs of data, as specified by selected [$context
     * variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference).
     * The format must include at least ``$context.requestId``. This parameter is required to enable access logging.
     * 
     * @param format the format value to set.
     * @return the AccessLogSetting object itself.
     */
    public AccessLogSetting withFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destinationArn", this.destinationArn);
        jsonWriter.writeStringField("format", this.format);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessLogSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessLogSetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessLogSetting.
     */
    public static AccessLogSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessLogSetting deserializedAccessLogSetting = new AccessLogSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destinationArn".equals(fieldName)) {
                    deserializedAccessLogSetting.destinationArn = reader.getString();
                } else if ("format".equals(fieldName)) {
                    deserializedAccessLogSetting.format = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessLogSetting;
        });
    }
}
