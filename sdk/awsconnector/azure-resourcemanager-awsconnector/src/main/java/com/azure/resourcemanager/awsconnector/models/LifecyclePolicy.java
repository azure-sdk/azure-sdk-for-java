// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LifecyclePolicy.
 */
@Fluent
public final class LifecyclePolicy implements JsonSerializable<LifecyclePolicy> {
    /*
     * The JSON repository policy text to apply to the repository. The JSON repository policy text to apply to the
     * repository.
     */
    private String lifecyclePolicyText;

    /*
     * The AWS account ID associated with the registry that contains the repository. If you do not specify a registry,
     * the default registry is assumed. The AWS account ID associated with the registry that contains the repository. If
     * you do not specify a registry, the default registry is assumed.
     */
    private String registryId;

    /**
     * Creates an instance of LifecyclePolicy class.
     */
    public LifecyclePolicy() {
    }

    /**
     * Get the lifecyclePolicyText property: The JSON repository policy text to apply to the repository. The JSON
     * repository policy text to apply to the repository.
     * 
     * @return the lifecyclePolicyText value.
     */
    public String lifecyclePolicyText() {
        return this.lifecyclePolicyText;
    }

    /**
     * Set the lifecyclePolicyText property: The JSON repository policy text to apply to the repository. The JSON
     * repository policy text to apply to the repository.
     * 
     * @param lifecyclePolicyText the lifecyclePolicyText value to set.
     * @return the LifecyclePolicy object itself.
     */
    public LifecyclePolicy withLifecyclePolicyText(String lifecyclePolicyText) {
        this.lifecyclePolicyText = lifecyclePolicyText;
        return this;
    }

    /**
     * Get the registryId property: The AWS account ID associated with the registry that contains the repository. If you
     * do not specify a registry, the default registry is assumed. The AWS account ID associated with the registry that
     * contains the repository. If you do not specify a registry, the default registry is assumed.
     * 
     * @return the registryId value.
     */
    public String registryId() {
        return this.registryId;
    }

    /**
     * Set the registryId property: The AWS account ID associated with the registry that contains the repository. If you
     * do not specify a registry, the default registry is assumed. The AWS account ID associated with the registry that
     * contains the repository. If you do not specify a registry, the default registry is assumed.
     * 
     * @param registryId the registryId value to set.
     * @return the LifecyclePolicy object itself.
     */
    public LifecyclePolicy withRegistryId(String registryId) {
        this.registryId = registryId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lifecyclePolicyText", this.lifecyclePolicyText);
        jsonWriter.writeStringField("registryId", this.registryId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifecyclePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifecyclePolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifecyclePolicy.
     */
    public static LifecyclePolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifecyclePolicy deserializedLifecyclePolicy = new LifecyclePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lifecyclePolicyText".equals(fieldName)) {
                    deserializedLifecyclePolicy.lifecyclePolicyText = reader.getString();
                } else if ("registryId".equals(fieldName)) {
                    deserializedLifecyclePolicy.registryId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifecyclePolicy;
        });
    }
}
