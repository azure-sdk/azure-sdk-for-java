// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SSESpecification.
 */
@Fluent
public final class SseSpecification implements JsonSerializable<SseSpecification> {
    /*
     * The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name
     * (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from
     * the default DynamoDB key ``alias/aws/dynamodb``.
     */
    private String kmsMasterKeyId;

    /*
     * Indicates whether server-side encryption is done using an AWS managed key or an AWS owned key. If enabled (true),
     * server-side encryption type is set to ``KMS`` and an AWS managed key is used (KMS charges apply). If disabled
     * (false) or not specified, server-side encryption is set to AWS owned key.
     */
    private Boolean sseEnabled;

    /*
     * Server-side encryption type. The only supported value is: + ``KMS`` - Server-side encryption that uses KMSlong.
     * The key is stored in your account and is managed by KMS (KMS charges apply).
     */
    private String sseType;

    /**
     * Creates an instance of SseSpecification class.
     */
    public SseSpecification() {
    }

    /**
     * Get the kmsMasterKeyId property: The KMS key that should be used for the KMS encryption. To specify a key, use
     * its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this
     * parameter if the key is different from the default DynamoDB key ``alias/aws/dynamodb``.
     * 
     * @return the kmsMasterKeyId value.
     */
    public String kmsMasterKeyId() {
        return this.kmsMasterKeyId;
    }

    /**
     * Set the kmsMasterKeyId property: The KMS key that should be used for the KMS encryption. To specify a key, use
     * its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this
     * parameter if the key is different from the default DynamoDB key ``alias/aws/dynamodb``.
     * 
     * @param kmsMasterKeyId the kmsMasterKeyId value to set.
     * @return the SseSpecification object itself.
     */
    public SseSpecification withKmsMasterKeyId(String kmsMasterKeyId) {
        this.kmsMasterKeyId = kmsMasterKeyId;
        return this;
    }

    /**
     * Get the sseEnabled property: Indicates whether server-side encryption is done using an AWS managed key or an AWS
     * owned key. If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed key is used (KMS
     * charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned key.
     * 
     * @return the sseEnabled value.
     */
    public Boolean sseEnabled() {
        return this.sseEnabled;
    }

    /**
     * Set the sseEnabled property: Indicates whether server-side encryption is done using an AWS managed key or an AWS
     * owned key. If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed key is used (KMS
     * charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned key.
     * 
     * @param sseEnabled the sseEnabled value to set.
     * @return the SseSpecification object itself.
     */
    public SseSpecification withSseEnabled(Boolean sseEnabled) {
        this.sseEnabled = sseEnabled;
        return this;
    }

    /**
     * Get the sseType property: Server-side encryption type. The only supported value is: + ``KMS`` - Server-side
     * encryption that uses KMSlong. The key is stored in your account and is managed by KMS (KMS charges apply).
     * 
     * @return the sseType value.
     */
    public String sseType() {
        return this.sseType;
    }

    /**
     * Set the sseType property: Server-side encryption type. The only supported value is: + ``KMS`` - Server-side
     * encryption that uses KMSlong. The key is stored in your account and is managed by KMS (KMS charges apply).
     * 
     * @param sseType the sseType value to set.
     * @return the SseSpecification object itself.
     */
    public SseSpecification withSseType(String sseType) {
        this.sseType = sseType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kmsMasterKeyId", this.kmsMasterKeyId);
        jsonWriter.writeBooleanField("sseEnabled", this.sseEnabled);
        jsonWriter.writeStringField("sseType", this.sseType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SseSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SseSpecification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SseSpecification.
     */
    public static SseSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SseSpecification deserializedSseSpecification = new SseSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kmsMasterKeyId".equals(fieldName)) {
                    deserializedSseSpecification.kmsMasterKeyId = reader.getString();
                } else if ("sseEnabled".equals(fieldName)) {
                    deserializedSseSpecification.sseEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("sseType".equals(fieldName)) {
                    deserializedSseSpecification.sseType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSseSpecification;
        });
    }
}
