// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ReplicaRegion.
 */
@Fluent
public final class ReplicaRegion implements JsonSerializable<ReplicaRegion> {
    /*
     * The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager
     * uses ``aws/secretsmanager``.
     */
    private String kmsKeyId;

    /*
     * A string that represents a ``Region``, for example 'us-east-1'.
     */
    private String region;

    /**
     * Creates an instance of ReplicaRegion class.
     */
    public ReplicaRegion() {
    }

    /**
     * Get the kmsKeyId property: The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include
     * this field, Secrets Manager uses ``aws/secretsmanager``.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include
     * this field, Secrets Manager uses ``aws/secretsmanager``.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the ReplicaRegion object itself.
     */
    public ReplicaRegion withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the region property: A string that represents a ``Region``, for example 'us-east-1'.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: A string that represents a ``Region``, for example 'us-east-1'.
     * 
     * @param region the region value to set.
     * @return the ReplicaRegion object itself.
     */
    public ReplicaRegion withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("region", this.region);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicaRegion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicaRegion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicaRegion.
     */
    public static ReplicaRegion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicaRegion deserializedReplicaRegion = new ReplicaRegion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kmsKeyId".equals(fieldName)) {
                    deserializedReplicaRegion.kmsKeyId = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedReplicaRegion.region = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicaRegion;
        });
    }
}
