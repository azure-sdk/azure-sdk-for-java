// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of IpPermission.
 */
@Fluent
public final class IpPermission implements JsonSerializable<IpPermission> {
    /*
     * <p>If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is
     * the ICMP type or -1 (all ICMP types).</p>
     */
    private Integer fromPort;

    /*
     * <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number
     * (see <a href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'>Protocol Numbers</a>).</p>
     * <p>Use <code>-1</code> to specify all protocols. When authorizing security group rules, specifying
     * <code>-1</code> or a protocol number other than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or
     * <code>icmpv6</code> allows traffic on all ports, regardless of any port range you specify. For <code>tcp</code>,
     * <code>udp</code>, and <code>icmp</code>, you must specify a port range. For <code>icmpv6</code>, the port range
     * is optional; if you omit the port range, traffic for all types and codes is allowed.</p>
     */
    private String ipProtocol;

    /*
     * <p>The IPv4 address ranges.</p>
     */
    private List<IpRange> ipRanges;

    /*
     * <p>The IPv6 address ranges.</p>
     */
    private List<Ipv6Range> ipv6Ranges;

    /*
     * <p>The prefix list IDs.</p>
     */
    private List<PrefixListId> prefixListIds;

    /*
     * <p>If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is
     * the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all
     * ICMP codes).</p>
     */
    private Integer toPort;

    /*
     * <p>The security group and Amazon Web Services account ID pairs.</p>
     */
    private List<UserIdGroupPair> userIdGroupPairs;

    /**
     * Creates an instance of IpPermission class.
     */
    public IpPermission() {
    }

    /**
     * Get the fromPort property: &lt;p&gt;If the protocol is TCP or UDP, this is the start of the port range. If the
     * protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).&lt;/p&gt;.
     * 
     * @return the fromPort value.
     */
    public Integer fromPort() {
        return this.fromPort;
    }

    /**
     * Set the fromPort property: &lt;p&gt;If the protocol is TCP or UDP, this is the start of the port range. If the
     * protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).&lt;/p&gt;.
     * 
     * @param fromPort the fromPort value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withFromPort(Integer fromPort) {
        this.fromPort = fromPort;
        return this;
    }

    /**
     * Get the ipProtocol property: &lt;p&gt;The IP protocol name (&lt;code&gt;tcp&lt;/code&gt;,
     * &lt;code&gt;udp&lt;/code&gt;, &lt;code&gt;icmp&lt;/code&gt;, &lt;code&gt;icmpv6&lt;/code&gt;) or number (see
     * &lt;a href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'&gt;Protocol
     * Numbers&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;-1&lt;/code&gt; to specify all protocols. When authorizing
     * security group rules, specifying &lt;code&gt;-1&lt;/code&gt; or a protocol number other than
     * &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, &lt;code&gt;icmp&lt;/code&gt;, or
     * &lt;code&gt;icmpv6&lt;/code&gt; allows traffic on all ports, regardless of any port range you specify. For
     * &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, and &lt;code&gt;icmp&lt;/code&gt;, you must specify a
     * port range. For &lt;code&gt;icmpv6&lt;/code&gt;, the port range is optional; if you omit the port range, traffic
     * for all types and codes is allowed.&lt;/p&gt;.
     * 
     * @return the ipProtocol value.
     */
    public String ipProtocol() {
        return this.ipProtocol;
    }

    /**
     * Set the ipProtocol property: &lt;p&gt;The IP protocol name (&lt;code&gt;tcp&lt;/code&gt;,
     * &lt;code&gt;udp&lt;/code&gt;, &lt;code&gt;icmp&lt;/code&gt;, &lt;code&gt;icmpv6&lt;/code&gt;) or number (see
     * &lt;a href='http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml'&gt;Protocol
     * Numbers&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;-1&lt;/code&gt; to specify all protocols. When authorizing
     * security group rules, specifying &lt;code&gt;-1&lt;/code&gt; or a protocol number other than
     * &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, &lt;code&gt;icmp&lt;/code&gt;, or
     * &lt;code&gt;icmpv6&lt;/code&gt; allows traffic on all ports, regardless of any port range you specify. For
     * &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, and &lt;code&gt;icmp&lt;/code&gt;, you must specify a
     * port range. For &lt;code&gt;icmpv6&lt;/code&gt;, the port range is optional; if you omit the port range, traffic
     * for all types and codes is allowed.&lt;/p&gt;.
     * 
     * @param ipProtocol the ipProtocol value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withIpProtocol(String ipProtocol) {
        this.ipProtocol = ipProtocol;
        return this;
    }

    /**
     * Get the ipRanges property: &lt;p&gt;The IPv4 address ranges.&lt;/p&gt;.
     * 
     * @return the ipRanges value.
     */
    public List<IpRange> ipRanges() {
        return this.ipRanges;
    }

    /**
     * Set the ipRanges property: &lt;p&gt;The IPv4 address ranges.&lt;/p&gt;.
     * 
     * @param ipRanges the ipRanges value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withIpRanges(List<IpRange> ipRanges) {
        this.ipRanges = ipRanges;
        return this;
    }

    /**
     * Get the ipv6Ranges property: &lt;p&gt;The IPv6 address ranges.&lt;/p&gt;.
     * 
     * @return the ipv6Ranges value.
     */
    public List<Ipv6Range> ipv6Ranges() {
        return this.ipv6Ranges;
    }

    /**
     * Set the ipv6Ranges property: &lt;p&gt;The IPv6 address ranges.&lt;/p&gt;.
     * 
     * @param ipv6Ranges the ipv6Ranges value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withIpv6Ranges(List<Ipv6Range> ipv6Ranges) {
        this.ipv6Ranges = ipv6Ranges;
        return this;
    }

    /**
     * Get the prefixListIds property: &lt;p&gt;The prefix list IDs.&lt;/p&gt;.
     * 
     * @return the prefixListIds value.
     */
    public List<PrefixListId> prefixListIds() {
        return this.prefixListIds;
    }

    /**
     * Set the prefixListIds property: &lt;p&gt;The prefix list IDs.&lt;/p&gt;.
     * 
     * @param prefixListIds the prefixListIds value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withPrefixListIds(List<PrefixListId> prefixListIds) {
        this.prefixListIds = prefixListIds;
        return this;
    }

    /**
     * Get the toPort property: &lt;p&gt;If the protocol is TCP or UDP, this is the end of the port range. If the
     * protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP
     * types), then the end port must be -1 (all ICMP codes).&lt;/p&gt;.
     * 
     * @return the toPort value.
     */
    public Integer toPort() {
        return this.toPort;
    }

    /**
     * Set the toPort property: &lt;p&gt;If the protocol is TCP or UDP, this is the end of the port range. If the
     * protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP
     * types), then the end port must be -1 (all ICMP codes).&lt;/p&gt;.
     * 
     * @param toPort the toPort value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withToPort(Integer toPort) {
        this.toPort = toPort;
        return this;
    }

    /**
     * Get the userIdGroupPairs property: &lt;p&gt;The security group and Amazon Web Services account ID
     * pairs.&lt;/p&gt;.
     * 
     * @return the userIdGroupPairs value.
     */
    public List<UserIdGroupPair> userIdGroupPairs() {
        return this.userIdGroupPairs;
    }

    /**
     * Set the userIdGroupPairs property: &lt;p&gt;The security group and Amazon Web Services account ID
     * pairs.&lt;/p&gt;.
     * 
     * @param userIdGroupPairs the userIdGroupPairs value to set.
     * @return the IpPermission object itself.
     */
    public IpPermission withUserIdGroupPairs(List<UserIdGroupPair> userIdGroupPairs) {
        this.userIdGroupPairs = userIdGroupPairs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipRanges() != null) {
            ipRanges().forEach(e -> e.validate());
        }
        if (ipv6Ranges() != null) {
            ipv6Ranges().forEach(e -> e.validate());
        }
        if (prefixListIds() != null) {
            prefixListIds().forEach(e -> e.validate());
        }
        if (userIdGroupPairs() != null) {
            userIdGroupPairs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("fromPort", this.fromPort);
        jsonWriter.writeStringField("ipProtocol", this.ipProtocol);
        jsonWriter.writeArrayField("ipRanges", this.ipRanges, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6Ranges", this.ipv6Ranges, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("prefixListIds", this.prefixListIds, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("toPort", this.toPort);
        jsonWriter.writeArrayField("userIdGroupPairs", this.userIdGroupPairs,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpPermission from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpPermission if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpPermission.
     */
    public static IpPermission fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpPermission deserializedIpPermission = new IpPermission();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fromPort".equals(fieldName)) {
                    deserializedIpPermission.fromPort = reader.getNullable(JsonReader::getInt);
                } else if ("ipProtocol".equals(fieldName)) {
                    deserializedIpPermission.ipProtocol = reader.getString();
                } else if ("ipRanges".equals(fieldName)) {
                    List<IpRange> ipRanges = reader.readArray(reader1 -> IpRange.fromJson(reader1));
                    deserializedIpPermission.ipRanges = ipRanges;
                } else if ("ipv6Ranges".equals(fieldName)) {
                    List<Ipv6Range> ipv6Ranges = reader.readArray(reader1 -> Ipv6Range.fromJson(reader1));
                    deserializedIpPermission.ipv6Ranges = ipv6Ranges;
                } else if ("prefixListIds".equals(fieldName)) {
                    List<PrefixListId> prefixListIds = reader.readArray(reader1 -> PrefixListId.fromJson(reader1));
                    deserializedIpPermission.prefixListIds = prefixListIds;
                } else if ("toPort".equals(fieldName)) {
                    deserializedIpPermission.toPort = reader.getNullable(JsonReader::getInt);
                } else if ("userIdGroupPairs".equals(fieldName)) {
                    List<UserIdGroupPair> userIdGroupPairs
                        = reader.readArray(reader1 -> UserIdGroupPair.fromJson(reader1));
                    deserializedIpPermission.userIdGroupPairs = userIdGroupPairs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpPermission;
        });
    }
}
