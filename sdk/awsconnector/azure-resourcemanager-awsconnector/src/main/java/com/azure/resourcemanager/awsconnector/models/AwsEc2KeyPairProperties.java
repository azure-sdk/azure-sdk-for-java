// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2KeyPair.
 */
@Fluent
public final class AwsEc2KeyPairProperties implements JsonSerializable<AwsEc2KeyPairProperties> {
    /*
     * Property keyFingerprint
     */
    private String keyFingerprint;

    /*
     * The format of the key pair. Default: ``pem``
     */
    private KeyFormat keyFormat;

    /*
     * A unique name for the key pair. Constraints: Up to 255 ASCII characters
     */
    private String keyName;

    /*
     * Property keyPairId
     */
    private String keyPairId;

    /*
     * The type of key pair. Note that ED25519 keys are not supported for Windows instances. If the
     * ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred
     * from the ``PublicKeyMaterial`` value. Default: ``rsa``
     */
    private KeyType keyType;

    /*
     * The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not
     * specified, then a new key pair will be created.
     */
    private String publicKeyMaterial;

    /*
     * The tags to apply to the key pair.
     */
    private List<TagAutoGenerated14> tags;

    /**
     * Creates an instance of AwsEc2KeyPairProperties class.
     */
    public AwsEc2KeyPairProperties() {
    }

    /**
     * Get the keyFingerprint property: Property keyFingerprint.
     * 
     * @return the keyFingerprint value.
     */
    public String keyFingerprint() {
        return this.keyFingerprint;
    }

    /**
     * Set the keyFingerprint property: Property keyFingerprint.
     * 
     * @param keyFingerprint the keyFingerprint value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withKeyFingerprint(String keyFingerprint) {
        this.keyFingerprint = keyFingerprint;
        return this;
    }

    /**
     * Get the keyFormat property: The format of the key pair. Default: ``pem``.
     * 
     * @return the keyFormat value.
     */
    public KeyFormat keyFormat() {
        return this.keyFormat;
    }

    /**
     * Set the keyFormat property: The format of the key pair. Default: ``pem``.
     * 
     * @param keyFormat the keyFormat value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withKeyFormat(KeyFormat keyFormat) {
        this.keyFormat = keyFormat;
        return this;
    }

    /**
     * Get the keyName property: A unique name for the key pair. Constraints: Up to 255 ASCII characters.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: A unique name for the key pair. Constraints: Up to 255 ASCII characters.
     * 
     * @param keyName the keyName value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyPairId property: Property keyPairId.
     * 
     * @return the keyPairId value.
     */
    public String keyPairId() {
        return this.keyPairId;
    }

    /**
     * Set the keyPairId property: Property keyPairId.
     * 
     * @param keyPairId the keyPairId value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withKeyPairId(String keyPairId) {
        this.keyPairId = keyPairId;
        return this;
    }

    /**
     * Get the keyType property: The type of key pair. Note that ED25519 keys are not supported for Windows instances.
     * If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is
     * inferred from the ``PublicKeyMaterial`` value. Default: ``rsa``.
     * 
     * @return the keyType value.
     */
    public KeyType keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: The type of key pair. Note that ED25519 keys are not supported for Windows instances.
     * If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is
     * inferred from the ``PublicKeyMaterial`` value. Default: ``rsa``.
     * 
     * @param keyType the keyType value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withKeyType(KeyType keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the publicKeyMaterial property: The public key material. The ``PublicKeyMaterial`` property is used to import
     * a key pair. If this property is not specified, then a new key pair will be created.
     * 
     * @return the publicKeyMaterial value.
     */
    public String publicKeyMaterial() {
        return this.publicKeyMaterial;
    }

    /**
     * Set the publicKeyMaterial property: The public key material. The ``PublicKeyMaterial`` property is used to import
     * a key pair. If this property is not specified, then a new key pair will be created.
     * 
     * @param publicKeyMaterial the publicKeyMaterial value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withPublicKeyMaterial(String publicKeyMaterial) {
        this.publicKeyMaterial = publicKeyMaterial;
        return this;
    }

    /**
     * Get the tags property: The tags to apply to the key pair.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated14> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags to apply to the key pair.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2KeyPairProperties object itself.
     */
    public AwsEc2KeyPairProperties withTags(List<TagAutoGenerated14> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyFingerprint", this.keyFingerprint);
        jsonWriter.writeStringField("keyFormat", this.keyFormat == null ? null : this.keyFormat.toString());
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("keyPairId", this.keyPairId);
        jsonWriter.writeStringField("keyType", this.keyType == null ? null : this.keyType.toString());
        jsonWriter.writeStringField("publicKeyMaterial", this.publicKeyMaterial);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2KeyPairProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2KeyPairProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2KeyPairProperties.
     */
    public static AwsEc2KeyPairProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2KeyPairProperties deserializedAwsEc2KeyPairProperties = new AwsEc2KeyPairProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyFingerprint".equals(fieldName)) {
                    deserializedAwsEc2KeyPairProperties.keyFingerprint = reader.getString();
                } else if ("keyFormat".equals(fieldName)) {
                    deserializedAwsEc2KeyPairProperties.keyFormat = KeyFormat.fromString(reader.getString());
                } else if ("keyName".equals(fieldName)) {
                    deserializedAwsEc2KeyPairProperties.keyName = reader.getString();
                } else if ("keyPairId".equals(fieldName)) {
                    deserializedAwsEc2KeyPairProperties.keyPairId = reader.getString();
                } else if ("keyType".equals(fieldName)) {
                    deserializedAwsEc2KeyPairProperties.keyType = KeyType.fromString(reader.getString());
                } else if ("publicKeyMaterial".equals(fieldName)) {
                    deserializedAwsEc2KeyPairProperties.publicKeyMaterial = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated14> tags = reader.readArray(reader1 -> TagAutoGenerated14.fromJson(reader1));
                    deserializedAwsEc2KeyPairProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2KeyPairProperties;
        });
    }
}
