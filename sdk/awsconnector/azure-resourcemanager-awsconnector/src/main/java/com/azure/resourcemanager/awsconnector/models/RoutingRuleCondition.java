// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RoutingRuleCondition.
 */
@Fluent
public final class RoutingRuleCondition implements JsonSerializable<RoutingRuleCondition> {
    /*
     * The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value,
     * then the specified redirect is applied. Required when parent element ``Condition`` is specified and sibling
     * ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be
     * applied.
     */
    private String httpErrorCodeReturnedEquals;

    /*
     * The object key name prefix when the redirect is applied. For example, to redirect requests for
     * ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the
     * prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder. Required
     * when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified.
     * If both conditions are specified, both must be true for the redirect to be applied.
     */
    private String keyPrefixEquals;

    /**
     * Creates an instance of RoutingRuleCondition class.
     */
    public RoutingRuleCondition() {
    }

    /**
     * Get the httpErrorCodeReturnedEquals property: The HTTP error code when the redirect is applied. In the event of
     * an error, if the error code equals this value, then the specified redirect is applied. Required when parent
     * element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then
     * both must be true for the redirect to be applied.
     * 
     * @return the httpErrorCodeReturnedEquals value.
     */
    public String httpErrorCodeReturnedEquals() {
        return this.httpErrorCodeReturnedEquals;
    }

    /**
     * Set the httpErrorCodeReturnedEquals property: The HTTP error code when the redirect is applied. In the event of
     * an error, if the error code equals this value, then the specified redirect is applied. Required when parent
     * element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then
     * both must be true for the redirect to be applied.
     * 
     * @param httpErrorCodeReturnedEquals the httpErrorCodeReturnedEquals value to set.
     * @return the RoutingRuleCondition object itself.
     */
    public RoutingRuleCondition withHttpErrorCodeReturnedEquals(String httpErrorCodeReturnedEquals) {
        this.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals;
        return this;
    }

    /**
     * Get the keyPrefixEquals property: The object key name prefix when the redirect is applied. For example, to
     * redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for
     * all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/
     * folder. Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals``
     * is not specified. If both conditions are specified, both must be true for the redirect to be applied.
     * 
     * @return the keyPrefixEquals value.
     */
    public String keyPrefixEquals() {
        return this.keyPrefixEquals;
    }

    /**
     * Set the keyPrefixEquals property: The object key name prefix when the redirect is applied. For example, to
     * redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for
     * all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/
     * folder. Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals``
     * is not specified. If both conditions are specified, both must be true for the redirect to be applied.
     * 
     * @param keyPrefixEquals the keyPrefixEquals value to set.
     * @return the RoutingRuleCondition object itself.
     */
    public RoutingRuleCondition withKeyPrefixEquals(String keyPrefixEquals) {
        this.keyPrefixEquals = keyPrefixEquals;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("httpErrorCodeReturnedEquals", this.httpErrorCodeReturnedEquals);
        jsonWriter.writeStringField("keyPrefixEquals", this.keyPrefixEquals);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutingRuleCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutingRuleCondition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutingRuleCondition.
     */
    public static RoutingRuleCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutingRuleCondition deserializedRoutingRuleCondition = new RoutingRuleCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("httpErrorCodeReturnedEquals".equals(fieldName)) {
                    deserializedRoutingRuleCondition.httpErrorCodeReturnedEquals = reader.getString();
                } else if ("keyPrefixEquals".equals(fieldName)) {
                    deserializedRoutingRuleCondition.keyPrefixEquals = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutingRuleCondition;
        });
    }
}
