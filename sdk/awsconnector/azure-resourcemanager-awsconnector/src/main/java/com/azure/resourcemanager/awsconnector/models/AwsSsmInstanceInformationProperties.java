// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of awsSsmInstanceInformation.
 */
@Fluent
public final class AwsSsmInstanceInformationProperties
    implements JsonSerializable<AwsSsmInstanceInformationProperties> {
    /*
     * <p>The activation ID created by Amazon Web Services Systems Manager when the server or virtual machine (VM) was
     * registered.</p>
     */
    private String activationId;

    /*
     * <p>The version of SSM Agent running on your Linux managed node. </p>
     */
    private String agentVersion;

    /*
     * <p>Information about the association.</p>
     */
    private InstanceAggregatedAssociationOverview associationOverview;

    /*
     * <p>The status of the association.</p>
     */
    private String associationStatus;

    /*
     * <p>The fully qualified host name of the managed node.</p>
     */
    private String computerName;

    /*
     * <p>The IP address of the managed node.</p>
     */
    private String ipAddress;

    /*
     * <p>The Identity and Access Management (IAM) role assigned to the on-premises Systems Manager managed node. This
     * call doesn't return the IAM role for Amazon Elastic Compute Cloud (Amazon EC2) instances. To retrieve the IAM
     * role for an EC2 instance, use the Amazon EC2 <code>DescribeInstances</code> operation. For information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html'>DescribeInstances</a> in
     * the <i>Amazon EC2 API Reference</i> or <a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html'>describe-instances</a> in the
     * <i>Amazon Web Services CLI Command Reference</i>.</p>
     */
    private String iamRole;

    /*
     * <p>The managed node ID. </p>
     */
    private String instanceId;

    /*
     * <p>Indicates whether the latest version of SSM Agent is running on your Linux managed node. This field doesn't
     * indicate whether or not the latest version is installed on Windows managed nodes, because some older versions of
     * Windows Server use the EC2Config service to process Systems Manager requests.</p>
     */
    private Boolean isLatestVersion;

    /*
     * <p>The date the association was last run.</p>
     */
    private OffsetDateTime lastAssociationExecutionDate;

    /*
     * <p>The date and time when the agent last pinged the Systems Manager service. </p>
     */
    private OffsetDateTime lastPingDateTime;

    /*
     * <p>The last date the association was successfully run.</p>
     */
    private OffsetDateTime lastSuccessfulAssociationExecutionDate;

    /*
     * <p>The name assigned to an on-premises server, edge device, or virtual machine (VM) when it is activated as a
     * Systems Manager managed node. The name is specified as the <code>DefaultInstanceName</code> property using the
     * <a>CreateActivation</a> command. It is applied to the managed node by specifying the Activation Code and
     * Activation ID when you install SSM Agent on the node, as explained in <a
     * href='https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-linux.html'>Install SSM
     * Agent for a hybrid and multicloud environment (Linux)</a> and <a
     * href='https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-win.html'>Install SSM
     * Agent for a hybrid and multicloud environment (Windows)</a>. To retrieve the <code>Name</code> tag of an EC2
     * instance, use the Amazon EC2 <code>DescribeInstances</code> operation. For information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html'>DescribeInstances</a> in
     * the <i>Amazon EC2 API Reference</i> or <a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html'>describe-instances</a> in the
     * <i>Amazon Web Services CLI Command Reference</i>.</p>
     */
    private String name;

    /*
     * <p>Connection status of SSM Agent. </p> <note> <p>The status <code>Inactive</code> has been deprecated and is no
     * longer in use.</p> </note>
     */
    private PingStatusEnumValue pingStatus;

    /*
     * <p>The name of the operating system platform running on your managed node. </p>
     */
    private String platformName;

    /*
     * <p>The operating system platform type. </p>
     */
    private PlatformTypeEnumValue platformType;

    /*
     * <p>The version of the OS platform running on your managed node. </p>
     */
    private String platformVersion;

    /*
     * <p>The date the server or VM was registered with Amazon Web Services as a managed node.</p>
     */
    private OffsetDateTime registrationDate;

    /*
     * <p>The type of instance. Instances are either EC2 instances or managed instances. </p>
     */
    private ResourceTypeEnumValue resourceType;

    /*
     * <p>The ID of the source resource. For IoT Greengrass devices, <code>SourceId</code> is the Thing name. </p>
     */
    private String sourceId;

    /*
     * <p>The type of the source resource. For IoT Greengrass devices, <code>SourceType</code> is
     * <code>AWS::IoT::Thing</code>. </p>
     */
    private SourceTypeEnumValue sourceType;

    /**
     * Creates an instance of AwsSsmInstanceInformationProperties class.
     */
    public AwsSsmInstanceInformationProperties() {
    }

    /**
     * Get the activationId property: &lt;p&gt;The activation ID created by Amazon Web Services Systems Manager when the
     * server or virtual machine (VM) was registered.&lt;/p&gt;.
     * 
     * @return the activationId value.
     */
    public String activationId() {
        return this.activationId;
    }

    /**
     * Set the activationId property: &lt;p&gt;The activation ID created by Amazon Web Services Systems Manager when the
     * server or virtual machine (VM) was registered.&lt;/p&gt;.
     * 
     * @param activationId the activationId value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withActivationId(String activationId) {
        this.activationId = activationId;
        return this;
    }

    /**
     * Get the agentVersion property: &lt;p&gt;The version of SSM Agent running on your Linux managed node. &lt;/p&gt;.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Set the agentVersion property: &lt;p&gt;The version of SSM Agent running on your Linux managed node. &lt;/p&gt;.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }

    /**
     * Get the associationOverview property: &lt;p&gt;Information about the association.&lt;/p&gt;.
     * 
     * @return the associationOverview value.
     */
    public InstanceAggregatedAssociationOverview associationOverview() {
        return this.associationOverview;
    }

    /**
     * Set the associationOverview property: &lt;p&gt;Information about the association.&lt;/p&gt;.
     * 
     * @param associationOverview the associationOverview value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties
        withAssociationOverview(InstanceAggregatedAssociationOverview associationOverview) {
        this.associationOverview = associationOverview;
        return this;
    }

    /**
     * Get the associationStatus property: &lt;p&gt;The status of the association.&lt;/p&gt;.
     * 
     * @return the associationStatus value.
     */
    public String associationStatus() {
        return this.associationStatus;
    }

    /**
     * Set the associationStatus property: &lt;p&gt;The status of the association.&lt;/p&gt;.
     * 
     * @param associationStatus the associationStatus value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withAssociationStatus(String associationStatus) {
        this.associationStatus = associationStatus;
        return this;
    }

    /**
     * Get the computerName property: &lt;p&gt;The fully qualified host name of the managed node.&lt;/p&gt;.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: &lt;p&gt;The fully qualified host name of the managed node.&lt;/p&gt;.
     * 
     * @param computerName the computerName value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the ipAddress property: &lt;p&gt;The IP address of the managed node.&lt;/p&gt;.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: &lt;p&gt;The IP address of the managed node.&lt;/p&gt;.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the iamRole property: &lt;p&gt;The Identity and Access Management (IAM) role assigned to the on-premises
     * Systems Manager managed node. This call doesn't return the IAM role for Amazon Elastic Compute Cloud (Amazon EC2)
     * instances. To retrieve the IAM role for an EC2 instance, use the Amazon EC2
     * &lt;code&gt;DescribeInstances&lt;/code&gt; operation. For information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html'&gt;DescribeInstances&lt;/a&gt;
     * in the &lt;i&gt;Amazon EC2 API Reference&lt;/i&gt; or &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html'&gt;describe-instances&lt;/a&gt;
     * in the &lt;i&gt;Amazon Web Services CLI Command Reference&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the iamRole value.
     */
    public String iamRole() {
        return this.iamRole;
    }

    /**
     * Set the iamRole property: &lt;p&gt;The Identity and Access Management (IAM) role assigned to the on-premises
     * Systems Manager managed node. This call doesn't return the IAM role for Amazon Elastic Compute Cloud (Amazon EC2)
     * instances. To retrieve the IAM role for an EC2 instance, use the Amazon EC2
     * &lt;code&gt;DescribeInstances&lt;/code&gt; operation. For information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html'&gt;DescribeInstances&lt;/a&gt;
     * in the &lt;i&gt;Amazon EC2 API Reference&lt;/i&gt; or &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html'&gt;describe-instances&lt;/a&gt;
     * in the &lt;i&gt;Amazon Web Services CLI Command Reference&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param iamRole the iamRole value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withIamRole(String iamRole) {
        this.iamRole = iamRole;
        return this;
    }

    /**
     * Get the instanceId property: &lt;p&gt;The managed node ID. &lt;/p&gt;.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instanceId property: &lt;p&gt;The managed node ID. &lt;/p&gt;.
     * 
     * @param instanceId the instanceId value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Get the isLatestVersion property: &lt;p&gt;Indicates whether the latest version of SSM Agent is running on your
     * Linux managed node. This field doesn't indicate whether or not the latest version is installed on Windows managed
     * nodes, because some older versions of Windows Server use the EC2Config service to process Systems Manager
     * requests.&lt;/p&gt;.
     * 
     * @return the isLatestVersion value.
     */
    public Boolean isLatestVersion() {
        return this.isLatestVersion;
    }

    /**
     * Set the isLatestVersion property: &lt;p&gt;Indicates whether the latest version of SSM Agent is running on your
     * Linux managed node. This field doesn't indicate whether or not the latest version is installed on Windows managed
     * nodes, because some older versions of Windows Server use the EC2Config service to process Systems Manager
     * requests.&lt;/p&gt;.
     * 
     * @param isLatestVersion the isLatestVersion value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withIsLatestVersion(Boolean isLatestVersion) {
        this.isLatestVersion = isLatestVersion;
        return this;
    }

    /**
     * Get the lastAssociationExecutionDate property: &lt;p&gt;The date the association was last run.&lt;/p&gt;.
     * 
     * @return the lastAssociationExecutionDate value.
     */
    public OffsetDateTime lastAssociationExecutionDate() {
        return this.lastAssociationExecutionDate;
    }

    /**
     * Set the lastAssociationExecutionDate property: &lt;p&gt;The date the association was last run.&lt;/p&gt;.
     * 
     * @param lastAssociationExecutionDate the lastAssociationExecutionDate value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties
        withLastAssociationExecutionDate(OffsetDateTime lastAssociationExecutionDate) {
        this.lastAssociationExecutionDate = lastAssociationExecutionDate;
        return this;
    }

    /**
     * Get the lastPingDateTime property: &lt;p&gt;The date and time when the agent last pinged the Systems Manager
     * service. &lt;/p&gt;.
     * 
     * @return the lastPingDateTime value.
     */
    public OffsetDateTime lastPingDateTime() {
        return this.lastPingDateTime;
    }

    /**
     * Set the lastPingDateTime property: &lt;p&gt;The date and time when the agent last pinged the Systems Manager
     * service. &lt;/p&gt;.
     * 
     * @param lastPingDateTime the lastPingDateTime value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withLastPingDateTime(OffsetDateTime lastPingDateTime) {
        this.lastPingDateTime = lastPingDateTime;
        return this;
    }

    /**
     * Get the lastSuccessfulAssociationExecutionDate property: &lt;p&gt;The last date the association was successfully
     * run.&lt;/p&gt;.
     * 
     * @return the lastSuccessfulAssociationExecutionDate value.
     */
    public OffsetDateTime lastSuccessfulAssociationExecutionDate() {
        return this.lastSuccessfulAssociationExecutionDate;
    }

    /**
     * Set the lastSuccessfulAssociationExecutionDate property: &lt;p&gt;The last date the association was successfully
     * run.&lt;/p&gt;.
     * 
     * @param lastSuccessfulAssociationExecutionDate the lastSuccessfulAssociationExecutionDate value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties
        withLastSuccessfulAssociationExecutionDate(OffsetDateTime lastSuccessfulAssociationExecutionDate) {
        this.lastSuccessfulAssociationExecutionDate = lastSuccessfulAssociationExecutionDate;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name assigned to an on-premises server, edge device, or virtual machine (VM)
     * when it is activated as a Systems Manager managed node. The name is specified as the
     * &lt;code&gt;DefaultInstanceName&lt;/code&gt; property using the &lt;a&gt;CreateActivation&lt;/a&gt; command. It
     * is applied to the managed node by specifying the Activation Code and Activation ID when you install SSM Agent on
     * the node, as explained in &lt;a
     * href='https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-linux.html'&gt;Install
     * SSM Agent for a hybrid and multicloud environment (Linux)&lt;/a&gt; and &lt;a
     * href='https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-win.html'&gt;Install
     * SSM Agent for a hybrid and multicloud environment (Windows)&lt;/a&gt;. To retrieve the
     * &lt;code&gt;Name&lt;/code&gt; tag of an EC2 instance, use the Amazon EC2
     * &lt;code&gt;DescribeInstances&lt;/code&gt; operation. For information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html'&gt;DescribeInstances&lt;/a&gt;
     * in the &lt;i&gt;Amazon EC2 API Reference&lt;/i&gt; or &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html'&gt;describe-instances&lt;/a&gt;
     * in the &lt;i&gt;Amazon Web Services CLI Command Reference&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name assigned to an on-premises server, edge device, or virtual machine (VM)
     * when it is activated as a Systems Manager managed node. The name is specified as the
     * &lt;code&gt;DefaultInstanceName&lt;/code&gt; property using the &lt;a&gt;CreateActivation&lt;/a&gt; command. It
     * is applied to the managed node by specifying the Activation Code and Activation ID when you install SSM Agent on
     * the node, as explained in &lt;a
     * href='https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-linux.html'&gt;Install
     * SSM Agent for a hybrid and multicloud environment (Linux)&lt;/a&gt; and &lt;a
     * href='https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-win.html'&gt;Install
     * SSM Agent for a hybrid and multicloud environment (Windows)&lt;/a&gt;. To retrieve the
     * &lt;code&gt;Name&lt;/code&gt; tag of an EC2 instance, use the Amazon EC2
     * &lt;code&gt;DescribeInstances&lt;/code&gt; operation. For information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html'&gt;DescribeInstances&lt;/a&gt;
     * in the &lt;i&gt;Amazon EC2 API Reference&lt;/i&gt; or &lt;a
     * href='https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html'&gt;describe-instances&lt;/a&gt;
     * in the &lt;i&gt;Amazon Web Services CLI Command Reference&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the pingStatus property: &lt;p&gt;Connection status of SSM Agent. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The status
     * &lt;code&gt;Inactive&lt;/code&gt; has been deprecated and is no longer in use.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the pingStatus value.
     */
    public PingStatusEnumValue pingStatus() {
        return this.pingStatus;
    }

    /**
     * Set the pingStatus property: &lt;p&gt;Connection status of SSM Agent. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The status
     * &lt;code&gt;Inactive&lt;/code&gt; has been deprecated and is no longer in use.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param pingStatus the pingStatus value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withPingStatus(PingStatusEnumValue pingStatus) {
        this.pingStatus = pingStatus;
        return this;
    }

    /**
     * Get the platformName property: &lt;p&gt;The name of the operating system platform running on your managed node.
     * &lt;/p&gt;.
     * 
     * @return the platformName value.
     */
    public String platformName() {
        return this.platformName;
    }

    /**
     * Set the platformName property: &lt;p&gt;The name of the operating system platform running on your managed node.
     * &lt;/p&gt;.
     * 
     * @param platformName the platformName value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withPlatformName(String platformName) {
        this.platformName = platformName;
        return this;
    }

    /**
     * Get the platformType property: &lt;p&gt;The operating system platform type. &lt;/p&gt;.
     * 
     * @return the platformType value.
     */
    public PlatformTypeEnumValue platformType() {
        return this.platformType;
    }

    /**
     * Set the platformType property: &lt;p&gt;The operating system platform type. &lt;/p&gt;.
     * 
     * @param platformType the platformType value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withPlatformType(PlatformTypeEnumValue platformType) {
        this.platformType = platformType;
        return this;
    }

    /**
     * Get the platformVersion property: &lt;p&gt;The version of the OS platform running on your managed node.
     * &lt;/p&gt;.
     * 
     * @return the platformVersion value.
     */
    public String platformVersion() {
        return this.platformVersion;
    }

    /**
     * Set the platformVersion property: &lt;p&gt;The version of the OS platform running on your managed node.
     * &lt;/p&gt;.
     * 
     * @param platformVersion the platformVersion value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withPlatformVersion(String platformVersion) {
        this.platformVersion = platformVersion;
        return this;
    }

    /**
     * Get the registrationDate property: &lt;p&gt;The date the server or VM was registered with Amazon Web Services as
     * a managed node.&lt;/p&gt;.
     * 
     * @return the registrationDate value.
     */
    public OffsetDateTime registrationDate() {
        return this.registrationDate;
    }

    /**
     * Set the registrationDate property: &lt;p&gt;The date the server or VM was registered with Amazon Web Services as
     * a managed node.&lt;/p&gt;.
     * 
     * @param registrationDate the registrationDate value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withRegistrationDate(OffsetDateTime registrationDate) {
        this.registrationDate = registrationDate;
        return this;
    }

    /**
     * Get the resourceType property: &lt;p&gt;The type of instance. Instances are either EC2 instances or managed
     * instances. &lt;/p&gt;.
     * 
     * @return the resourceType value.
     */
    public ResourceTypeEnumValue resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: &lt;p&gt;The type of instance. Instances are either EC2 instances or managed
     * instances. &lt;/p&gt;.
     * 
     * @param resourceType the resourceType value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withResourceType(ResourceTypeEnumValue resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the sourceId property: &lt;p&gt;The ID of the source resource. For IoT Greengrass devices,
     * &lt;code&gt;SourceId&lt;/code&gt; is the Thing name. &lt;/p&gt;.
     * 
     * @return the sourceId value.
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Set the sourceId property: &lt;p&gt;The ID of the source resource. For IoT Greengrass devices,
     * &lt;code&gt;SourceId&lt;/code&gt; is the Thing name. &lt;/p&gt;.
     * 
     * @param sourceId the sourceId value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withSourceId(String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Get the sourceType property: &lt;p&gt;The type of the source resource. For IoT Greengrass devices,
     * &lt;code&gt;SourceType&lt;/code&gt; is &lt;code&gt;AWS::IoT::Thing&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the sourceType value.
     */
    public SourceTypeEnumValue sourceType() {
        return this.sourceType;
    }

    /**
     * Set the sourceType property: &lt;p&gt;The type of the source resource. For IoT Greengrass devices,
     * &lt;code&gt;SourceType&lt;/code&gt; is &lt;code&gt;AWS::IoT::Thing&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param sourceType the sourceType value to set.
     * @return the AwsSsmInstanceInformationProperties object itself.
     */
    public AwsSsmInstanceInformationProperties withSourceType(SourceTypeEnumValue sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (associationOverview() != null) {
            associationOverview().validate();
        }
        if (pingStatus() != null) {
            pingStatus().validate();
        }
        if (platformType() != null) {
            platformType().validate();
        }
        if (resourceType() != null) {
            resourceType().validate();
        }
        if (sourceType() != null) {
            sourceType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activationId", this.activationId);
        jsonWriter.writeStringField("agentVersion", this.agentVersion);
        jsonWriter.writeJsonField("associationOverview", this.associationOverview);
        jsonWriter.writeStringField("associationStatus", this.associationStatus);
        jsonWriter.writeStringField("computerName", this.computerName);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("iamRole", this.iamRole);
        jsonWriter.writeStringField("instanceId", this.instanceId);
        jsonWriter.writeBooleanField("isLatestVersion", this.isLatestVersion);
        jsonWriter.writeStringField("lastAssociationExecutionDate",
            this.lastAssociationExecutionDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastAssociationExecutionDate));
        jsonWriter.writeStringField("lastPingDateTime",
            this.lastPingDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastPingDateTime));
        jsonWriter.writeStringField("lastSuccessfulAssociationExecutionDate",
            this.lastSuccessfulAssociationExecutionDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSuccessfulAssociationExecutionDate));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("pingStatus", this.pingStatus);
        jsonWriter.writeStringField("platformName", this.platformName);
        jsonWriter.writeJsonField("platformType", this.platformType);
        jsonWriter.writeStringField("platformVersion", this.platformVersion);
        jsonWriter.writeStringField("registrationDate",
            this.registrationDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.registrationDate));
        jsonWriter.writeJsonField("resourceType", this.resourceType);
        jsonWriter.writeStringField("sourceId", this.sourceId);
        jsonWriter.writeJsonField("sourceType", this.sourceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsSsmInstanceInformationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsSsmInstanceInformationProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsSsmInstanceInformationProperties.
     */
    public static AwsSsmInstanceInformationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsSsmInstanceInformationProperties deserializedAwsSsmInstanceInformationProperties
                = new AwsSsmInstanceInformationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activationId".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.activationId = reader.getString();
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.agentVersion = reader.getString();
                } else if ("associationOverview".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.associationOverview
                        = InstanceAggregatedAssociationOverview.fromJson(reader);
                } else if ("associationStatus".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.associationStatus = reader.getString();
                } else if ("computerName".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.computerName = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.ipAddress = reader.getString();
                } else if ("iamRole".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.iamRole = reader.getString();
                } else if ("instanceId".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.instanceId = reader.getString();
                } else if ("isLatestVersion".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.isLatestVersion
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("lastAssociationExecutionDate".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.lastAssociationExecutionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastPingDateTime".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.lastPingDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSuccessfulAssociationExecutionDate".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.lastSuccessfulAssociationExecutionDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("name".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.name = reader.getString();
                } else if ("pingStatus".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.pingStatus = PingStatusEnumValue.fromJson(reader);
                } else if ("platformName".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.platformName = reader.getString();
                } else if ("platformType".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.platformType
                        = PlatformTypeEnumValue.fromJson(reader);
                } else if ("platformVersion".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.platformVersion = reader.getString();
                } else if ("registrationDate".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.registrationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resourceType".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.resourceType
                        = ResourceTypeEnumValue.fromJson(reader);
                } else if ("sourceId".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.sourceId = reader.getString();
                } else if ("sourceType".equals(fieldName)) {
                    deserializedAwsSsmInstanceInformationProperties.sourceType = SourceTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsSsmInstanceInformationProperties;
        });
    }
}
