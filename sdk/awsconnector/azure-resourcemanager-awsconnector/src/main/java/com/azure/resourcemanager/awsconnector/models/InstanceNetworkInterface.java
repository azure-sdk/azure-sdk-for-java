// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of InstanceNetworkInterface.
 */
@Fluent
public final class InstanceNetworkInterface implements JsonSerializable<InstanceNetworkInterface> {
    /*
     * <p>The association information for an Elastic IPv4 associated with the network interface.</p>
     */
    private InstanceNetworkInterfaceAssociation association;

    /*
     * <p>The network interface attachment.</p>
     */
    private InstanceNetworkInterfaceAttachment attachment;

    /*
     * <p>A security group connection tracking configuration that enables you to set the timeout for connection tracking
     * on an Elastic network interface. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-
     * tracking-timeouts'>Connection tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
     */
    private ConnectionTrackingSpecificationResponse connectionTrackingConfiguration;

    /*
     * <p>The description.</p>
     */
    private String description;

    /*
     * <p>The security groups.</p>
     */
    private List<GroupIdentifier> groups;

    /*
     * <p>The type of network interface.</p> <p>Valid values: <code>interface</code> | <code>efa</code> |
     * <code>trunk</code> </p>
     */
    private String interfaceType;

    /*
     * <p>The IPv4 delegated prefixes that are assigned to the network interface.</p>
     */
    private List<InstanceIpv4Prefix> ipv4Prefixes;

    /*
     * <p>The IPv6 addresses associated with the network interface.</p>
     */
    private List<InstanceIpv6Address> ipv6Addresses;

    /*
     * <p>The IPv6 delegated prefixes that are assigned to the network interface.</p>
     */
    private List<InstanceIpv6Prefix> ipv6Prefixes;

    /*
     * <p>The MAC address.</p>
     */
    private String macAddress;

    /*
     * <p>The ID of the network interface.</p>
     */
    private String networkInterfaceId;

    /*
     * <p>The ID of the Amazon Web Services account that created the network interface.</p>
     */
    private String ownerId;

    /*
     * <p>The private DNS name.</p>
     */
    private String privateDnsName;

    /*
     * <p>The IPv4 address of the network interface within the subnet.</p>
     */
    private String privateIpAddress;

    /*
     * <p>The private IPv4 addresses associated with the network interface.</p>
     */
    private List<InstancePrivateIpAddress> privateIpAddresses;

    /*
     * <p>Indicates whether source/destination checking is enabled.</p>
     */
    private Boolean sourceDestCheck;

    /*
     * <p>The status of the network interface.</p>
     */
    private NetworkInterfaceStatusEnumValue status;

    /*
     * <p>The ID of the subnet.</p>
     */
    private String subnetId;

    /*
     * <p>The ID of the VPC.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of InstanceNetworkInterface class.
     */
    public InstanceNetworkInterface() {
    }

    /**
     * Get the association property: &lt;p&gt;The association information for an Elastic IPv4 associated with the
     * network interface.&lt;/p&gt;.
     * 
     * @return the association value.
     */
    public InstanceNetworkInterfaceAssociation association() {
        return this.association;
    }

    /**
     * Set the association property: &lt;p&gt;The association information for an Elastic IPv4 associated with the
     * network interface.&lt;/p&gt;.
     * 
     * @param association the association value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withAssociation(InstanceNetworkInterfaceAssociation association) {
        this.association = association;
        return this;
    }

    /**
     * Get the attachment property: &lt;p&gt;The network interface attachment.&lt;/p&gt;.
     * 
     * @return the attachment value.
     */
    public InstanceNetworkInterfaceAttachment attachment() {
        return this.attachment;
    }

    /**
     * Set the attachment property: &lt;p&gt;The network interface attachment.&lt;/p&gt;.
     * 
     * @param attachment the attachment value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withAttachment(InstanceNetworkInterfaceAttachment attachment) {
        this.attachment = attachment;
        return this;
    }

    /**
     * Get the connectionTrackingConfiguration property: &lt;p&gt;A security group connection tracking configuration
     * that enables you to set the timeout for connection tracking on an Elastic network interface. For more
     * information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts'&gt;Connection
     * tracking timeouts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the connectionTrackingConfiguration value.
     */
    public ConnectionTrackingSpecificationResponse connectionTrackingConfiguration() {
        return this.connectionTrackingConfiguration;
    }

    /**
     * Set the connectionTrackingConfiguration property: &lt;p&gt;A security group connection tracking configuration
     * that enables you to set the timeout for connection tracking on an Elastic network interface. For more
     * information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts'&gt;Connection
     * tracking timeouts&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param connectionTrackingConfiguration the connectionTrackingConfiguration value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface
        withConnectionTrackingConfiguration(ConnectionTrackingSpecificationResponse connectionTrackingConfiguration) {
        this.connectionTrackingConfiguration = connectionTrackingConfiguration;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;The description.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;The description.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the groups property: &lt;p&gt;The security groups.&lt;/p&gt;.
     * 
     * @return the groups value.
     */
    public List<GroupIdentifier> groups() {
        return this.groups;
    }

    /**
     * Set the groups property: &lt;p&gt;The security groups.&lt;/p&gt;.
     * 
     * @param groups the groups value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withGroups(List<GroupIdentifier> groups) {
        this.groups = groups;
        return this;
    }

    /**
     * Get the interfaceType property: &lt;p&gt;The type of network interface.&lt;/p&gt; &lt;p&gt;Valid values:
     * &lt;code&gt;interface&lt;/code&gt; | &lt;code&gt;efa&lt;/code&gt; | &lt;code&gt;trunk&lt;/code&gt; &lt;/p&gt;.
     * 
     * @return the interfaceType value.
     */
    public String interfaceType() {
        return this.interfaceType;
    }

    /**
     * Set the interfaceType property: &lt;p&gt;The type of network interface.&lt;/p&gt; &lt;p&gt;Valid values:
     * &lt;code&gt;interface&lt;/code&gt; | &lt;code&gt;efa&lt;/code&gt; | &lt;code&gt;trunk&lt;/code&gt; &lt;/p&gt;.
     * 
     * @param interfaceType the interfaceType value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withInterfaceType(String interfaceType) {
        this.interfaceType = interfaceType;
        return this;
    }

    /**
     * Get the ipv4Prefixes property: &lt;p&gt;The IPv4 delegated prefixes that are assigned to the network
     * interface.&lt;/p&gt;.
     * 
     * @return the ipv4Prefixes value.
     */
    public List<InstanceIpv4Prefix> ipv4Prefixes() {
        return this.ipv4Prefixes;
    }

    /**
     * Set the ipv4Prefixes property: &lt;p&gt;The IPv4 delegated prefixes that are assigned to the network
     * interface.&lt;/p&gt;.
     * 
     * @param ipv4Prefixes the ipv4Prefixes value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withIpv4Prefixes(List<InstanceIpv4Prefix> ipv4Prefixes) {
        this.ipv4Prefixes = ipv4Prefixes;
        return this;
    }

    /**
     * Get the ipv6Addresses property: &lt;p&gt;The IPv6 addresses associated with the network interface.&lt;/p&gt;.
     * 
     * @return the ipv6Addresses value.
     */
    public List<InstanceIpv6Address> ipv6Addresses() {
        return this.ipv6Addresses;
    }

    /**
     * Set the ipv6Addresses property: &lt;p&gt;The IPv6 addresses associated with the network interface.&lt;/p&gt;.
     * 
     * @param ipv6Addresses the ipv6Addresses value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withIpv6Addresses(List<InstanceIpv6Address> ipv6Addresses) {
        this.ipv6Addresses = ipv6Addresses;
        return this;
    }

    /**
     * Get the ipv6Prefixes property: &lt;p&gt;The IPv6 delegated prefixes that are assigned to the network
     * interface.&lt;/p&gt;.
     * 
     * @return the ipv6Prefixes value.
     */
    public List<InstanceIpv6Prefix> ipv6Prefixes() {
        return this.ipv6Prefixes;
    }

    /**
     * Set the ipv6Prefixes property: &lt;p&gt;The IPv6 delegated prefixes that are assigned to the network
     * interface.&lt;/p&gt;.
     * 
     * @param ipv6Prefixes the ipv6Prefixes value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withIpv6Prefixes(List<InstanceIpv6Prefix> ipv6Prefixes) {
        this.ipv6Prefixes = ipv6Prefixes;
        return this;
    }

    /**
     * Get the macAddress property: &lt;p&gt;The MAC address.&lt;/p&gt;.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Set the macAddress property: &lt;p&gt;The MAC address.&lt;/p&gt;.
     * 
     * @param macAddress the macAddress value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }

    /**
     * Get the networkInterfaceId property: &lt;p&gt;The ID of the network interface.&lt;/p&gt;.
     * 
     * @return the networkInterfaceId value.
     */
    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     * Set the networkInterfaceId property: &lt;p&gt;The ID of the network interface.&lt;/p&gt;.
     * 
     * @param networkInterfaceId the networkInterfaceId value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withNetworkInterfaceId(String networkInterfaceId) {
        this.networkInterfaceId = networkInterfaceId;
        return this;
    }

    /**
     * Get the ownerId property: &lt;p&gt;The ID of the Amazon Web Services account that created the network
     * interface.&lt;/p&gt;.
     * 
     * @return the ownerId value.
     */
    public String ownerId() {
        return this.ownerId;
    }

    /**
     * Set the ownerId property: &lt;p&gt;The ID of the Amazon Web Services account that created the network
     * interface.&lt;/p&gt;.
     * 
     * @param ownerId the ownerId value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Get the privateDnsName property: &lt;p&gt;The private DNS name.&lt;/p&gt;.
     * 
     * @return the privateDnsName value.
     */
    public String privateDnsName() {
        return this.privateDnsName;
    }

    /**
     * Set the privateDnsName property: &lt;p&gt;The private DNS name.&lt;/p&gt;.
     * 
     * @param privateDnsName the privateDnsName value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withPrivateDnsName(String privateDnsName) {
        this.privateDnsName = privateDnsName;
        return this;
    }

    /**
     * Get the privateIpAddress property: &lt;p&gt;The IPv4 address of the network interface within the
     * subnet.&lt;/p&gt;.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: &lt;p&gt;The IPv4 address of the network interface within the
     * subnet.&lt;/p&gt;.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the privateIpAddresses property: &lt;p&gt;The private IPv4 addresses associated with the network
     * interface.&lt;/p&gt;.
     * 
     * @return the privateIpAddresses value.
     */
    public List<InstancePrivateIpAddress> privateIpAddresses() {
        return this.privateIpAddresses;
    }

    /**
     * Set the privateIpAddresses property: &lt;p&gt;The private IPv4 addresses associated with the network
     * interface.&lt;/p&gt;.
     * 
     * @param privateIpAddresses the privateIpAddresses value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withPrivateIpAddresses(List<InstancePrivateIpAddress> privateIpAddresses) {
        this.privateIpAddresses = privateIpAddresses;
        return this;
    }

    /**
     * Get the sourceDestCheck property: &lt;p&gt;Indicates whether source/destination checking is enabled.&lt;/p&gt;.
     * 
     * @return the sourceDestCheck value.
     */
    public Boolean sourceDestCheck() {
        return this.sourceDestCheck;
    }

    /**
     * Set the sourceDestCheck property: &lt;p&gt;Indicates whether source/destination checking is enabled.&lt;/p&gt;.
     * 
     * @param sourceDestCheck the sourceDestCheck value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withSourceDestCheck(Boolean sourceDestCheck) {
        this.sourceDestCheck = sourceDestCheck;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The status of the network interface.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public NetworkInterfaceStatusEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The status of the network interface.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withStatus(NetworkInterfaceStatusEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Get the subnetId property: &lt;p&gt;The ID of the subnet.&lt;/p&gt;.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: &lt;p&gt;The ID of the subnet.&lt;/p&gt;.
     * 
     * @param subnetId the subnetId value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID of the VPC.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID of the VPC.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the InstanceNetworkInterface object itself.
     */
    public InstanceNetworkInterface withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (association() != null) {
            association().validate();
        }
        if (attachment() != null) {
            attachment().validate();
        }
        if (connectionTrackingConfiguration() != null) {
            connectionTrackingConfiguration().validate();
        }
        if (groups() != null) {
            groups().forEach(e -> e.validate());
        }
        if (ipv4Prefixes() != null) {
            ipv4Prefixes().forEach(e -> e.validate());
        }
        if (ipv6Addresses() != null) {
            ipv6Addresses().forEach(e -> e.validate());
        }
        if (ipv6Prefixes() != null) {
            ipv6Prefixes().forEach(e -> e.validate());
        }
        if (privateIpAddresses() != null) {
            privateIpAddresses().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("association", this.association);
        jsonWriter.writeJsonField("attachment", this.attachment);
        jsonWriter.writeJsonField("connectionTrackingConfiguration", this.connectionTrackingConfiguration);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("groups", this.groups, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("interfaceType", this.interfaceType);
        jsonWriter.writeArrayField("ipv4Prefixes", this.ipv4Prefixes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6Addresses", this.ipv6Addresses, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("ipv6Prefixes", this.ipv6Prefixes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("macAddress", this.macAddress);
        jsonWriter.writeStringField("networkInterfaceId", this.networkInterfaceId);
        jsonWriter.writeStringField("ownerId", this.ownerId);
        jsonWriter.writeStringField("privateDnsName", this.privateDnsName);
        jsonWriter.writeStringField("privateIpAddress", this.privateIpAddress);
        jsonWriter.writeArrayField("privateIpAddresses", this.privateIpAddresses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("sourceDestCheck", this.sourceDestCheck);
        jsonWriter.writeJsonField("status", this.status);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceNetworkInterface from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceNetworkInterface if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceNetworkInterface.
     */
    public static InstanceNetworkInterface fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceNetworkInterface deserializedInstanceNetworkInterface = new InstanceNetworkInterface();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("association".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.association
                        = InstanceNetworkInterfaceAssociation.fromJson(reader);
                } else if ("attachment".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.attachment
                        = InstanceNetworkInterfaceAttachment.fromJson(reader);
                } else if ("connectionTrackingConfiguration".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.connectionTrackingConfiguration
                        = ConnectionTrackingSpecificationResponse.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.description = reader.getString();
                } else if ("groups".equals(fieldName)) {
                    List<GroupIdentifier> groups = reader.readArray(reader1 -> GroupIdentifier.fromJson(reader1));
                    deserializedInstanceNetworkInterface.groups = groups;
                } else if ("interfaceType".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.interfaceType = reader.getString();
                } else if ("ipv4Prefixes".equals(fieldName)) {
                    List<InstanceIpv4Prefix> ipv4Prefixes
                        = reader.readArray(reader1 -> InstanceIpv4Prefix.fromJson(reader1));
                    deserializedInstanceNetworkInterface.ipv4Prefixes = ipv4Prefixes;
                } else if ("ipv6Addresses".equals(fieldName)) {
                    List<InstanceIpv6Address> ipv6Addresses
                        = reader.readArray(reader1 -> InstanceIpv6Address.fromJson(reader1));
                    deserializedInstanceNetworkInterface.ipv6Addresses = ipv6Addresses;
                } else if ("ipv6Prefixes".equals(fieldName)) {
                    List<InstanceIpv6Prefix> ipv6Prefixes
                        = reader.readArray(reader1 -> InstanceIpv6Prefix.fromJson(reader1));
                    deserializedInstanceNetworkInterface.ipv6Prefixes = ipv6Prefixes;
                } else if ("macAddress".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.macAddress = reader.getString();
                } else if ("networkInterfaceId".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.networkInterfaceId = reader.getString();
                } else if ("ownerId".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.ownerId = reader.getString();
                } else if ("privateDnsName".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.privateDnsName = reader.getString();
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.privateIpAddress = reader.getString();
                } else if ("privateIpAddresses".equals(fieldName)) {
                    List<InstancePrivateIpAddress> privateIpAddresses
                        = reader.readArray(reader1 -> InstancePrivateIpAddress.fromJson(reader1));
                    deserializedInstanceNetworkInterface.privateIpAddresses = privateIpAddresses;
                } else if ("sourceDestCheck".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.sourceDestCheck = reader.getNullable(JsonReader::getBoolean);
                } else if ("status".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.status = NetworkInterfaceStatusEnumValue.fromJson(reader);
                } else if ("subnetId".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.subnetId = reader.getString();
                } else if ("vpcId".equals(fieldName)) {
                    deserializedInstanceNetworkInterface.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceNetworkInterface;
        });
    }
}
