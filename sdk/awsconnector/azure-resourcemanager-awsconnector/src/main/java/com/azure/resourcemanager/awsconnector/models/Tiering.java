// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Tiering.
 */
@Fluent
public final class Tiering implements JsonSerializable<Tiering> {
    /*
     * S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently
     * accessed
     * objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a
     * list of access tiers in the S3 Intelligent-Tiering storage class.
     */
    private TieringAccessTier accessTier;

    /*
     * The number of consecutive days of no access after which an object will be eligible to be transitioned to the
     * corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and
     * Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
     */
    private Integer days;

    /**
     * Creates an instance of Tiering class.
     */
    public Tiering() {
    }

    /**
     * Get the accessTier property: S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing
     * frequently and infrequently accessed
     * objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a
     * list of access tiers in the S3 Intelligent-Tiering storage class.
     * 
     * @return the accessTier value.
     */
    public TieringAccessTier accessTier() {
        return this.accessTier;
    }

    /**
     * Set the accessTier property: S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing
     * frequently and infrequently accessed
     * objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a
     * list of access tiers in the S3 Intelligent-Tiering storage class.
     * 
     * @param accessTier the accessTier value to set.
     * @return the Tiering object itself.
     */
    public Tiering withAccessTier(TieringAccessTier accessTier) {
        this.accessTier = accessTier;
        return this;
    }

    /**
     * Get the days property: The number of consecutive days of no access after which an object will be eligible to be
     * transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at
     * least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730
     * days).
     * 
     * @return the days value.
     */
    public Integer days() {
        return this.days;
    }

    /**
     * Set the days property: The number of consecutive days of no access after which an object will be eligible to be
     * transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at
     * least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730
     * days).
     * 
     * @param days the days value to set.
     * @return the Tiering object itself.
     */
    public Tiering withDays(Integer days) {
        this.days = days;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessTier", this.accessTier == null ? null : this.accessTier.toString());
        jsonWriter.writeNumberField("days", this.days);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Tiering from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Tiering if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Tiering.
     */
    public static Tiering fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Tiering deserializedTiering = new Tiering();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessTier".equals(fieldName)) {
                    deserializedTiering.accessTier = TieringAccessTier.fromString(reader.getString());
                } else if ("days".equals(fieldName)) {
                    deserializedTiering.days = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTiering;
        });
    }
}
