// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of DomainEndpointOptions.
 */
@Fluent
public final class DomainEndpointOptions implements JsonSerializable<DomainEndpointOptions> {
    /*
     * <p>The fully qualified URL for the custom endpoint.</p>
     */
    private String customEndpoint;

    /*
     * <p>The ARN for your security certificate, managed in Amazon Web Services Certificate Manager (ACM).</p>
     */
    private String customEndpointCertificateArn;

    /*
     * <p>Whether to enable a custom endpoint for the domain.</p>
     */
    private Boolean customEndpointEnabled;

    /*
     * <p>True to require that all traffic to the domain arrive over HTTPS.</p>
     */
    private Boolean enforceHttps;

    /*
     * <p>Specify the TLS security policy to apply to the HTTPS endpoint of the domain. The policy can be one of the
     * following values:</p> <ul> <li> <p> <b>Policy-Min-TLS-1-0-2019-07:</b> TLS security policy that supports TLS
     * version 1.0 to TLS version 1.2</p> </li> <li> <p> <b>Policy-Min-TLS-1-2-2019-07:</b> TLS security policy that
     * supports only TLS version 1.2</p> </li> <li> <p> <b>Policy-Min-TLS-1-2-PFS-2023-10:</b> TLS security policy that
     * supports TLS version 1.2 to TLS version 1.3 with perfect forward secrecy cipher suites</p> </li> </ul>
     */
    private TlsSecurityPolicyEnumValue tlsSecurityPolicy;

    /**
     * Creates an instance of DomainEndpointOptions class.
     */
    public DomainEndpointOptions() {
    }

    /**
     * Get the customEndpoint property: &lt;p&gt;The fully qualified URL for the custom endpoint.&lt;/p&gt;.
     * 
     * @return the customEndpoint value.
     */
    public String customEndpoint() {
        return this.customEndpoint;
    }

    /**
     * Set the customEndpoint property: &lt;p&gt;The fully qualified URL for the custom endpoint.&lt;/p&gt;.
     * 
     * @param customEndpoint the customEndpoint value to set.
     * @return the DomainEndpointOptions object itself.
     */
    public DomainEndpointOptions withCustomEndpoint(String customEndpoint) {
        this.customEndpoint = customEndpoint;
        return this;
    }

    /**
     * Get the customEndpointCertificateArn property: &lt;p&gt;The ARN for your security certificate, managed in Amazon
     * Web Services Certificate Manager (ACM).&lt;/p&gt;.
     * 
     * @return the customEndpointCertificateArn value.
     */
    public String customEndpointCertificateArn() {
        return this.customEndpointCertificateArn;
    }

    /**
     * Set the customEndpointCertificateArn property: &lt;p&gt;The ARN for your security certificate, managed in Amazon
     * Web Services Certificate Manager (ACM).&lt;/p&gt;.
     * 
     * @param customEndpointCertificateArn the customEndpointCertificateArn value to set.
     * @return the DomainEndpointOptions object itself.
     */
    public DomainEndpointOptions withCustomEndpointCertificateArn(String customEndpointCertificateArn) {
        this.customEndpointCertificateArn = customEndpointCertificateArn;
        return this;
    }

    /**
     * Get the customEndpointEnabled property: &lt;p&gt;Whether to enable a custom endpoint for the domain.&lt;/p&gt;.
     * 
     * @return the customEndpointEnabled value.
     */
    public Boolean customEndpointEnabled() {
        return this.customEndpointEnabled;
    }

    /**
     * Set the customEndpointEnabled property: &lt;p&gt;Whether to enable a custom endpoint for the domain.&lt;/p&gt;.
     * 
     * @param customEndpointEnabled the customEndpointEnabled value to set.
     * @return the DomainEndpointOptions object itself.
     */
    public DomainEndpointOptions withCustomEndpointEnabled(Boolean customEndpointEnabled) {
        this.customEndpointEnabled = customEndpointEnabled;
        return this;
    }

    /**
     * Get the enforceHttps property: &lt;p&gt;True to require that all traffic to the domain arrive over
     * HTTPS.&lt;/p&gt;.
     * 
     * @return the enforceHttps value.
     */
    public Boolean enforceHttps() {
        return this.enforceHttps;
    }

    /**
     * Set the enforceHttps property: &lt;p&gt;True to require that all traffic to the domain arrive over
     * HTTPS.&lt;/p&gt;.
     * 
     * @param enforceHttps the enforceHttps value to set.
     * @return the DomainEndpointOptions object itself.
     */
    public DomainEndpointOptions withEnforceHttps(Boolean enforceHttps) {
        this.enforceHttps = enforceHttps;
        return this;
    }

    /**
     * Get the tlsSecurityPolicy property: &lt;p&gt;Specify the TLS security policy to apply to the HTTPS endpoint of
     * the domain. The policy can be one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Policy-Min-TLS-1-0-2019-07:&lt;/b&gt; TLS security policy that supports TLS version 1.0 to TLS version
     * 1.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Policy-Min-TLS-1-2-2019-07:&lt;/b&gt; TLS security policy
     * that supports only TLS version 1.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Policy-Min-TLS-1-2-PFS-2023-10:&lt;/b&gt; TLS security policy that supports TLS version 1.2 to TLS
     * version 1.3 with perfect forward secrecy cipher suites&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the tlsSecurityPolicy value.
     */
    public TlsSecurityPolicyEnumValue tlsSecurityPolicy() {
        return this.tlsSecurityPolicy;
    }

    /**
     * Set the tlsSecurityPolicy property: &lt;p&gt;Specify the TLS security policy to apply to the HTTPS endpoint of
     * the domain. The policy can be one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Policy-Min-TLS-1-0-2019-07:&lt;/b&gt; TLS security policy that supports TLS version 1.0 to TLS version
     * 1.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Policy-Min-TLS-1-2-2019-07:&lt;/b&gt; TLS security policy
     * that supports only TLS version 1.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;Policy-Min-TLS-1-2-PFS-2023-10:&lt;/b&gt; TLS security policy that supports TLS version 1.2 to TLS
     * version 1.3 with perfect forward secrecy cipher suites&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param tlsSecurityPolicy the tlsSecurityPolicy value to set.
     * @return the DomainEndpointOptions object itself.
     */
    public DomainEndpointOptions withTlsSecurityPolicy(TlsSecurityPolicyEnumValue tlsSecurityPolicy) {
        this.tlsSecurityPolicy = tlsSecurityPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tlsSecurityPolicy() != null) {
            tlsSecurityPolicy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("customEndpoint", this.customEndpoint);
        jsonWriter.writeStringField("customEndpointCertificateArn", this.customEndpointCertificateArn);
        jsonWriter.writeBooleanField("customEndpointEnabled", this.customEndpointEnabled);
        jsonWriter.writeBooleanField("enforceHTTPS", this.enforceHttps);
        jsonWriter.writeJsonField("tlsSecurityPolicy", this.tlsSecurityPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DomainEndpointOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DomainEndpointOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DomainEndpointOptions.
     */
    public static DomainEndpointOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DomainEndpointOptions deserializedDomainEndpointOptions = new DomainEndpointOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("customEndpoint".equals(fieldName)) {
                    deserializedDomainEndpointOptions.customEndpoint = reader.getString();
                } else if ("customEndpointCertificateArn".equals(fieldName)) {
                    deserializedDomainEndpointOptions.customEndpointCertificateArn = reader.getString();
                } else if ("customEndpointEnabled".equals(fieldName)) {
                    deserializedDomainEndpointOptions.customEndpointEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enforceHTTPS".equals(fieldName)) {
                    deserializedDomainEndpointOptions.enforceHttps = reader.getNullable(JsonReader::getBoolean);
                } else if ("tlsSecurityPolicy".equals(fieldName)) {
                    deserializedDomainEndpointOptions.tlsSecurityPolicy = TlsSecurityPolicyEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDomainEndpointOptions;
        });
    }
}
