// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Address.
 */
@Fluent
public final class Address implements JsonSerializable<Address> {
    /*
     * Property addressDefinition
     */
    private String addressDefinition;

    /**
     * Creates an instance of Address class.
     */
    public Address() {
    }

    /**
     * Get the addressDefinition property: Property addressDefinition.
     * 
     * @return the addressDefinition value.
     */
    public String addressDefinition() {
        return this.addressDefinition;
    }

    /**
     * Set the addressDefinition property: Property addressDefinition.
     * 
     * @param addressDefinition the addressDefinition value to set.
     * @return the Address object itself.
     */
    public Address withAddressDefinition(String addressDefinition) {
        this.addressDefinition = addressDefinition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("addressDefinition", this.addressDefinition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Address from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Address if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Address.
     */
    public static Address fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Address deserializedAddress = new Address();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addressDefinition".equals(fieldName)) {
                    deserializedAddress.addressDefinition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddress;
        });
    }
}
