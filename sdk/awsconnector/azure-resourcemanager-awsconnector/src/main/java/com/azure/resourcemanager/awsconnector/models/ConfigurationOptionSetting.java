// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ConfigurationOptionSetting.
 */
@Fluent
public final class ConfigurationOptionSetting implements JsonSerializable<ConfigurationOptionSetting> {
    /*
     * A unique namespace that identifies the option's associated AWS resource.
     */
    private String namespace;

    /*
     * The name of the configuration option.
     */
    private String optionName;

    /*
     * A unique resource name for the option setting. Use it for a time–based scaling configuration option.
     */
    private String resourceName;

    /*
     * The current value for the configuration option.
     */
    private String value;

    /**
     * Creates an instance of ConfigurationOptionSetting class.
     */
    public ConfigurationOptionSetting() {
    }

    /**
     * Get the namespace property: A unique namespace that identifies the option's associated AWS resource.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: A unique namespace that identifies the option's associated AWS resource.
     * 
     * @param namespace the namespace value to set.
     * @return the ConfigurationOptionSetting object itself.
     */
    public ConfigurationOptionSetting withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the optionName property: The name of the configuration option.
     * 
     * @return the optionName value.
     */
    public String optionName() {
        return this.optionName;
    }

    /**
     * Set the optionName property: The name of the configuration option.
     * 
     * @param optionName the optionName value to set.
     * @return the ConfigurationOptionSetting object itself.
     */
    public ConfigurationOptionSetting withOptionName(String optionName) {
        this.optionName = optionName;
        return this;
    }

    /**
     * Get the resourceName property: A unique resource name for the option setting. Use it for a time–based scaling
     * configuration option.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: A unique resource name for the option setting. Use it for a time–based scaling
     * configuration option.
     * 
     * @param resourceName the resourceName value to set.
     * @return the ConfigurationOptionSetting object itself.
     */
    public ConfigurationOptionSetting withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the value property: The current value for the configuration option.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The current value for the configuration option.
     * 
     * @param value the value value to set.
     * @return the ConfigurationOptionSetting object itself.
     */
    public ConfigurationOptionSetting withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("optionName", this.optionName);
        jsonWriter.writeStringField("resourceName", this.resourceName);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConfigurationOptionSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConfigurationOptionSetting if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConfigurationOptionSetting.
     */
    public static ConfigurationOptionSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConfigurationOptionSetting deserializedConfigurationOptionSetting = new ConfigurationOptionSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespace".equals(fieldName)) {
                    deserializedConfigurationOptionSetting.namespace = reader.getString();
                } else if ("optionName".equals(fieldName)) {
                    deserializedConfigurationOptionSetting.optionName = reader.getString();
                } else if ("resourceName".equals(fieldName)) {
                    deserializedConfigurationOptionSetting.resourceName = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedConfigurationOptionSetting.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfigurationOptionSetting;
        });
    }
}
