// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of UserPausedDetails.
 */
@Fluent
public final class UserPausedDetails implements JsonSerializable<UserPausedDetails> {
    /*
     * <p>The date and time, in UTC and extended ISO 8601 format, when the job or job run will expire and be cancelled
     * if you don't resume it first.</p>
     */
    private OffsetDateTime jobExpiresAt;

    /*
     * <p>The Amazon Resource Name (ARN) of the Health event that Amazon Macie sent to notify you of the job or job
     * run's pending expiration and cancellation. This value is null if a job has been paused for less than 23 days.</p>
     */
    private String jobImminentExpirationHealthEventArn;

    /*
     * <p>The date and time, in UTC and extended ISO 8601 format, when you paused the job.</p>
     */
    private OffsetDateTime jobPausedAt;

    /**
     * Creates an instance of UserPausedDetails class.
     */
    public UserPausedDetails() {
    }

    /**
     * Get the jobExpiresAt property: &lt;p&gt;The date and time, in UTC and extended ISO 8601 format, when the job or
     * job run will expire and be cancelled if you don't resume it first.&lt;/p&gt;.
     * 
     * @return the jobExpiresAt value.
     */
    public OffsetDateTime jobExpiresAt() {
        return this.jobExpiresAt;
    }

    /**
     * Set the jobExpiresAt property: &lt;p&gt;The date and time, in UTC and extended ISO 8601 format, when the job or
     * job run will expire and be cancelled if you don't resume it first.&lt;/p&gt;.
     * 
     * @param jobExpiresAt the jobExpiresAt value to set.
     * @return the UserPausedDetails object itself.
     */
    public UserPausedDetails withJobExpiresAt(OffsetDateTime jobExpiresAt) {
        this.jobExpiresAt = jobExpiresAt;
        return this;
    }

    /**
     * Get the jobImminentExpirationHealthEventArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the Health event
     * that Amazon Macie sent to notify you of the job or job run's pending expiration and cancellation. This value is
     * null if a job has been paused for less than 23 days.&lt;/p&gt;.
     * 
     * @return the jobImminentExpirationHealthEventArn value.
     */
    public String jobImminentExpirationHealthEventArn() {
        return this.jobImminentExpirationHealthEventArn;
    }

    /**
     * Set the jobImminentExpirationHealthEventArn property: &lt;p&gt;The Amazon Resource Name (ARN) of the Health event
     * that Amazon Macie sent to notify you of the job or job run's pending expiration and cancellation. This value is
     * null if a job has been paused for less than 23 days.&lt;/p&gt;.
     * 
     * @param jobImminentExpirationHealthEventArn the jobImminentExpirationHealthEventArn value to set.
     * @return the UserPausedDetails object itself.
     */
    public UserPausedDetails withJobImminentExpirationHealthEventArn(String jobImminentExpirationHealthEventArn) {
        this.jobImminentExpirationHealthEventArn = jobImminentExpirationHealthEventArn;
        return this;
    }

    /**
     * Get the jobPausedAt property: &lt;p&gt;The date and time, in UTC and extended ISO 8601 format, when you paused
     * the job.&lt;/p&gt;.
     * 
     * @return the jobPausedAt value.
     */
    public OffsetDateTime jobPausedAt() {
        return this.jobPausedAt;
    }

    /**
     * Set the jobPausedAt property: &lt;p&gt;The date and time, in UTC and extended ISO 8601 format, when you paused
     * the job.&lt;/p&gt;.
     * 
     * @param jobPausedAt the jobPausedAt value to set.
     * @return the UserPausedDetails object itself.
     */
    public UserPausedDetails withJobPausedAt(OffsetDateTime jobPausedAt) {
        this.jobPausedAt = jobPausedAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobExpiresAt",
            this.jobExpiresAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.jobExpiresAt));
        jsonWriter.writeStringField("jobImminentExpirationHealthEventArn", this.jobImminentExpirationHealthEventArn);
        jsonWriter.writeStringField("jobPausedAt",
            this.jobPausedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.jobPausedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserPausedDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserPausedDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserPausedDetails.
     */
    public static UserPausedDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserPausedDetails deserializedUserPausedDetails = new UserPausedDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobExpiresAt".equals(fieldName)) {
                    deserializedUserPausedDetails.jobExpiresAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("jobImminentExpirationHealthEventArn".equals(fieldName)) {
                    deserializedUserPausedDetails.jobImminentExpirationHealthEventArn = reader.getString();
                } else if ("jobPausedAt".equals(fieldName)) {
                    deserializedUserPausedDetails.jobPausedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserPausedDetails;
        });
    }
}
