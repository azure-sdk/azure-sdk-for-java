// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Active.
 */
@Fluent
public final class ActiveModel implements JsonSerializable<ActiveModel> {
    /*
     * When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After
     * conflicting operations finish, StackSets starts queued operations in request order.
     */
    private Boolean active;

    /**
     * Creates an instance of ActiveModel class.
     */
    public ActiveModel() {
    }

    /**
     * Get the active property: When true, StackSets performs non-conflicting operations concurrently and queues
     * conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.
     * 
     * @return the active value.
     */
    public Boolean active() {
        return this.active;
    }

    /**
     * Set the active property: When true, StackSets performs non-conflicting operations concurrently and queues
     * conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.
     * 
     * @param active the active value to set.
     * @return the ActiveModel object itself.
     */
    public ActiveModel withActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("active", this.active);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActiveModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActiveModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ActiveModel.
     */
    public static ActiveModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActiveModel deserializedActiveModel = new ActiveModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("active".equals(fieldName)) {
                    deserializedActiveModel.active = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActiveModel;
        });
    }
}
