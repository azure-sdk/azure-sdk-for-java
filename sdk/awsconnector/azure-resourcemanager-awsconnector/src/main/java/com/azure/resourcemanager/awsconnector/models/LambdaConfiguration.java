// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LambdaConfiguration.
 */
@Fluent
public final class LambdaConfiguration implements JsonSerializable<LambdaConfiguration> {
    /*
     * The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event
     * Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
     */
    private String event;

    /*
     * The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a
     * filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon
     * S3 bucket. Specifies object key name filtering rules. For information about key name filtering, see [Configuring
     * event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     */
    private NotificationFilter filter;

    /*
     * The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type
     * occurs.
     */
    private String function;

    /**
     * Creates an instance of LambdaConfiguration class.
     */
    public LambdaConfiguration() {
    }

    /**
     * Get the event property: The Amazon S3 bucket event for which to invoke the LAMlong function. For more
     * information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
     * in the *Amazon S3 User Guide*.
     * 
     * @return the event value.
     */
    public String event() {
        return this.event;
    }

    /**
     * Set the event property: The Amazon S3 bucket event for which to invoke the LAMlong function. For more
     * information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html)
     * in the *Amazon S3 User Guide*.
     * 
     * @param event the event value to set.
     * @return the LambdaConfiguration object itself.
     */
    public LambdaConfiguration withEvent(String event) {
        this.event = event;
        return this;
    }

    /**
     * Get the filter property: The filtering rules that determine which objects invoke the AWS Lambda function. For
     * example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they
     * are added to the Amazon S3 bucket. Specifies object key name filtering rules. For information about key name
     * filtering, see [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @return the filter value.
     */
    public NotificationFilter filter() {
        return this.filter;
    }

    /**
     * Set the filter property: The filtering rules that determine which objects invoke the AWS Lambda function. For
     * example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they
     * are added to the Amazon S3 bucket. Specifies object key name filtering rules. For information about key name
     * filtering, see [Configuring event notifications using object key name
     * filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the
     * *Amazon S3 User Guide*.
     * 
     * @param filter the filter value to set.
     * @return the LambdaConfiguration object itself.
     */
    public LambdaConfiguration withFilter(NotificationFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the function property: The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the
     * specified event type occurs.
     * 
     * @return the function value.
     */
    public String function() {
        return this.function;
    }

    /**
     * Set the function property: The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the
     * specified event type occurs.
     * 
     * @param function the function value to set.
     * @return the LambdaConfiguration object itself.
     */
    public LambdaConfiguration withFunction(String function) {
        this.function = function;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filter() != null) {
            filter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("event", this.event);
        jsonWriter.writeJsonField("filter", this.filter);
        jsonWriter.writeStringField("function", this.function);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LambdaConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LambdaConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LambdaConfiguration.
     */
    public static LambdaConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LambdaConfiguration deserializedLambdaConfiguration = new LambdaConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("event".equals(fieldName)) {
                    deserializedLambdaConfiguration.event = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    deserializedLambdaConfiguration.filter = NotificationFilter.fromJson(reader);
                } else if ("function".equals(fieldName)) {
                    deserializedLambdaConfiguration.function = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLambdaConfiguration;
        });
    }
}
