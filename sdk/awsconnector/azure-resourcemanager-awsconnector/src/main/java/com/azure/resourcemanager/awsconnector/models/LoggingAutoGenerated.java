// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Logging.
 */
@Fluent
public final class LoggingAutoGenerated implements JsonSerializable<LoggingAutoGenerated> {
    /*
     * <p>The cluster control plane logging configuration for your cluster.</p>
     */
    private List<LogSetup> clusterLogging;

    /**
     * Creates an instance of LoggingAutoGenerated class.
     */
    public LoggingAutoGenerated() {
    }

    /**
     * Get the clusterLogging property: &lt;p&gt;The cluster control plane logging configuration for your
     * cluster.&lt;/p&gt;.
     * 
     * @return the clusterLogging value.
     */
    public List<LogSetup> clusterLogging() {
        return this.clusterLogging;
    }

    /**
     * Set the clusterLogging property: &lt;p&gt;The cluster control plane logging configuration for your
     * cluster.&lt;/p&gt;.
     * 
     * @param clusterLogging the clusterLogging value to set.
     * @return the LoggingAutoGenerated object itself.
     */
    public LoggingAutoGenerated withClusterLogging(List<LogSetup> clusterLogging) {
        this.clusterLogging = clusterLogging;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterLogging() != null) {
            clusterLogging().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("clusterLogging", this.clusterLogging,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingAutoGenerated if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoggingAutoGenerated.
     */
    public static LoggingAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingAutoGenerated deserializedLoggingAutoGenerated = new LoggingAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterLogging".equals(fieldName)) {
                    List<LogSetup> clusterLogging = reader.readArray(reader1 -> LogSetup.fromJson(reader1));
                    deserializedLoggingAutoGenerated.clusterLogging = clusterLogging;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingAutoGenerated;
        });
    }
}
