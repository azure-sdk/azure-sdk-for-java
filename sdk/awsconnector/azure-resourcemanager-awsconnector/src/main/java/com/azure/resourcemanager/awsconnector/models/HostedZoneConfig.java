// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of HostedZoneConfig.
 */
@Fluent
public final class HostedZoneConfig implements JsonSerializable<HostedZoneConfig> {
    /*
     * Any comments that you want to include about the hosted zone.
     */
    private String comment;

    /**
     * Creates an instance of HostedZoneConfig class.
     */
    public HostedZoneConfig() {
    }

    /**
     * Get the comment property: Any comments that you want to include about the hosted zone.
     * 
     * @return the comment value.
     */
    public String comment() {
        return this.comment;
    }

    /**
     * Set the comment property: Any comments that you want to include about the hosted zone.
     * 
     * @param comment the comment value to set.
     * @return the HostedZoneConfig object itself.
     */
    public HostedZoneConfig withComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("comment", this.comment);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostedZoneConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostedZoneConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostedZoneConfig.
     */
    public static HostedZoneConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostedZoneConfig deserializedHostedZoneConfig = new HostedZoneConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("comment".equals(fieldName)) {
                    deserializedHostedZoneConfig.comment = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostedZoneConfig;
        });
    }
}
