// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Parameter.
 */
@Fluent
public final class Parameter implements JsonSerializable<Parameter> {
    /*
     * The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS
     * CloudFormation uses the default value that is specified in your template.
     */
    private String parameterKey;

    /*
     * The input value associated with the parameter.
     */
    private String parameterValue;

    /**
     * Creates an instance of Parameter class.
     */
    public Parameter() {
    }

    /**
     * Get the parameterKey property: The key associated with the parameter. If you don't specify a key and value for a
     * particular parameter, AWS CloudFormation uses the default value that is specified in your template.
     * 
     * @return the parameterKey value.
     */
    public String parameterKey() {
        return this.parameterKey;
    }

    /**
     * Set the parameterKey property: The key associated with the parameter. If you don't specify a key and value for a
     * particular parameter, AWS CloudFormation uses the default value that is specified in your template.
     * 
     * @param parameterKey the parameterKey value to set.
     * @return the Parameter object itself.
     */
    public Parameter withParameterKey(String parameterKey) {
        this.parameterKey = parameterKey;
        return this;
    }

    /**
     * Get the parameterValue property: The input value associated with the parameter.
     * 
     * @return the parameterValue value.
     */
    public String parameterValue() {
        return this.parameterValue;
    }

    /**
     * Set the parameterValue property: The input value associated with the parameter.
     * 
     * @param parameterValue the parameterValue value to set.
     * @return the Parameter object itself.
     */
    public Parameter withParameterValue(String parameterValue) {
        this.parameterValue = parameterValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("parameterKey", this.parameterKey);
        jsonWriter.writeStringField("parameterValue", this.parameterValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Parameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Parameter if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Parameter.
     */
    public static Parameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Parameter deserializedParameter = new Parameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parameterKey".equals(fieldName)) {
                    deserializedParameter.parameterKey = reader.getString();
                } else if ("parameterValue".equals(fieldName)) {
                    deserializedParameter.parameterValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParameter;
        });
    }
}
