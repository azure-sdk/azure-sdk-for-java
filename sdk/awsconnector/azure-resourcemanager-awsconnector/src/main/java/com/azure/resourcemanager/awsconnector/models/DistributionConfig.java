// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of DistributionConfig.
 */
@Fluent
public final class DistributionConfig implements JsonSerializable<DistributionConfig> {
    /*
     * A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
     */
    private List<String> aliases;

    /*
     * Property cnamEs
     */
    private List<String> cnamEs;

    /*
     * A complex type that contains zero or more ``CacheBehavior`` elements.
     */
    private List<CacheBehavior> cacheBehaviors;

    /*
     * A comment to describe the distribution. The comment cannot be longer than 128 characters.
     */
    private String comment;

    /*
     * The identifier of a continuous deployment policy. For more information, see ``CreateContinuousDeploymentPolicy``.
     */
    private String continuousDeploymentPolicyId;

    /*
     * A complex type that controls the following: + Whether CloudFront replaces HTTP status codes in the 4xx and 5xx
     * range with custom error messages before returning the response to the viewer. + How long CloudFront caches HTTP
     * status codes in the 4xx and 5xx range. For more information about custom error pages, see [Customizing Error
     * Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the
     * *Amazon CloudFront Developer Guide*.
     */
    private List<CustomErrorResponse> customErrorResponses;

    /*
     * Property customOrigin
     */
    private LegacyCustomOrigin customOrigin;

    /*
     * A complex type that describes the default cache behavior if you don't specify a ``CacheBehavior`` element or if
     * files don't match any of the values of ``PathPattern`` in ``CacheBehavior`` elements. You must create exactly one
     * default cache behavior. A complex type that describes the default cache behavior if you don't specify a
     * ``CacheBehavior`` element or if request URLs don't match any of the values of ``PathPattern`` in
     * ``CacheBehavior`` elements. You must create exactly one default cache behavior.
     */
    private DefaultCacheBehavior defaultCacheBehavior;

    /*
     * The object that you want CloudFront to request from your origin (for example, ``index.html``) when a viewer
     * requests the root URL for your distribution (``https://www.example.com``) instead of an object in your
     * distribution (``https://www.example.com/product-description.html``). Specifying a default root object avoids
     * exposing the contents of your distribution. Specify only the object name, for example, ``index.html``. Don't add
     * a ``/`` before the object name. If you don't want to specify a default root object when you create a
     * distribution, include an empty ``DefaultRootObject`` element. To delete the default root object from an existing
     * distribution, update the distribution configuration and include an empty ``DefaultRootObject`` element. To
     * replace the default root object, update the distribution configuration and specify the new object. For more
     * information about the default root object, see [Creating a Default Root
     * Object](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html) in the *Amazon
     * CloudFront Developer Guide*.
     */
    private String defaultRootObject;

    /*
     * From this field, you can enable or disable the selected distribution.
     */
    private Boolean enabled;

    /*
     * (Optional) Specify the maximum HTTP version(s) that you want viewers to use to communicate with CF. The default
     * value for new distributions is ``http1.1``. For viewers and CF to use HTTP/2, viewers must support TLSv1.2 or
     * later, and must support Server Name Indication (SNI). For viewers and CF to use HTTP/3, viewers must support
     * TLSv1.3 and Server Name Indication (SNI). CF supports HTTP/3 connection migration to allow the viewer to switch
     * networks without losing connection. For more information about connection migration, see [Connection
     * Migration](https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration) at
     * RFC 9000. For more information about supported TLSv1.3 ciphers, see [Supported protocols and ciphers between
     * viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-
     * viewer-protocols-ciphers.html).
     */
    private String httpVersion;

    /*
     * If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify
     * ``true``. If you specify ``false``, CloudFront responds to IPv6 DNS requests with the DNS response code
     * ``NOERROR`` and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for
     * your distribution. In general, you should enable IPv6 if you have users on IPv6 networks who want to access your
     * content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're
     * using a custom policy that includes the ``IpAddress`` parameter to restrict the IP addresses that can access your
     * content, don't enable IPv6. If you want to restrict access to some content by IP address and not restrict access
     * to other content (or restrict access but not by IP address), you can create two distributions. For more
     * information, see [Creating a Signed URL Using a Custom
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-
     * custom-policy.html) in the *Amazon CloudFront Developer Guide*. If you're using an R53AWSIntlong alias resource
     * record set to route traffic to your CloudFront distribution, you need to create a second alias resource record
     * set when both of the following are true: + You enable IPv6 for the distribution + You're using alternate domain
     * names in the URLs for your objects For more information, see [Routing Traffic to an Amazon CloudFront Web
     * Distribution by Using Your Domain
     * Name](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html) in the
     * *Developer Guide*. If you created a CNAME resource record set, either with R53AWSIntlong or with another DNS
     * service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of
     * the IP address format of the viewer request.
     */
    private Boolean ipV6Enabled;

    /*
     * A complex type that controls whether access logs are written for the distribution. For more information about
     * logging, see [Access Logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html) in
     * the *Amazon CloudFront Developer Guide*. A complex type that controls whether access logs are written for the
     * distribution.
     */
    private Logging logging;

    /*
     * A complex type that contains information about origin groups for this distribution. A complex data type for the
     * origin groups specified for a distribution.
     */
    private OriginGroups originGroups;

    /*
     * A complex type that contains information about origins for this distribution.
     */
    private List<OriginAutoGenerated> origins;

    /*
     * The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you
     * specify ``PriceClass_All``, CloudFront responds to requests for your objects from all CloudFront edge locations.
     * If you specify a price class other than ``PriceClass_All``, CloudFront serves your objects from the CloudFront
     * edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or
     * near regions that are excluded from your specified price class may encounter slower performance. For more
     * information about price classes, see [Choosing the Price Class for a CloudFront
     * Distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html) in the *Amazon
     * CloudFront Developer Guide*. For information about CloudFront pricing, including how price classes (such as Price
     * Class 100) map to CloudFront regions, see [Amazon CloudFront
     * Pricing](https://docs.aws.amazon.com/cloudfront/pricing/).
     */
    private String priceClass;

    /*
     * A complex type that identifies ways in which you want to restrict distribution of your content. A complex type
     * that identifies ways in which you want to restrict distribution of your content.
     */
    private Restrictions restrictions;

    /*
     * Property s3Origin
     */
    private LegacyS3Origin s3Origin;

    /*
     * A Boolean that indicates whether this is a staging distribution. When this value is ``true``, this is a staging
     * distribution. When this value is ``false``, this is not a staging distribution.
     */
    private Boolean staging;

    /*
     * A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers. A complex
     * type that determines the distribution's SSL/TLS configuration for communicating with viewers. If the distribution
     * doesn't use ``Aliases`` (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the
     * CloudFront domain name such as ``d111111abcdef8.cloudfront.net``—set ``CloudFrontDefaultCertificate`` to ``true``
     * and leave all other fields empty. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), use
     * the fields in this type to specify the following settings: + Which viewers the distribution accepts HTTPS
     * connections from: only viewers that support [server name indication
     * (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all
     * viewers including those that don't support SNI. + To accept HTTPS connections from only viewers that support SNI,
     * set ``SSLSupportMethod`` to ``sni-only``. This is recommended. Most browsers and clients support SNI. (In
     * CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.) + To accept HTTPS
     * connections from all viewers, including those that don't support SNI, set ``SSLSupportMethod`` to ``vip``. This
     * is not recommended, and results in additional monthly charges from CloudFront. (In CloudFormation, the field name
     * is ``SslSupportMethod``. Note the different capitalization.) + The minimum SSL/TLS protocol version that the
     * distribution can use to communicate with viewers. To specify a minimum version, choose a value for
     * ``MinimumProtocolVersion``. For more information, see [Security
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#
     * DownloadDistValues-security-policy) in the *Amazon CloudFront Developer Guide*. + The location of the SSL/TLS
     * certificate, [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or
     * [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the
     * location by setting a value in one of the following fields (not both): + ``ACMCertificateArn`` (In
     * CloudFormation, this field name is ``AcmCertificateArn``. Note the different capitalization.) +
     * ``IAMCertificateId`` (In CloudFormation, this field name is ``IamCertificateId``. Note the different
     * capitalization.) All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only,
     * or to redirect them from HTTP to HTTPS, use ``ViewerProtocolPolicy`` in the ``CacheBehavior`` or
     * ``DefaultCacheBehavior``. To specify how CloudFront should use SSL/TLS to communicate with your custom origin,
     * use ``CustomOriginConfig``. For more information, see [Using HTTPS with
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and [Using
     * Alternate Domain Names and
     * HTTPS](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.
     * html) in the *Amazon CloudFront Developer Guide*.
     */
    private ViewerCertificate viewerCertificate;

    /*
     * A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution. To specify a web
     * ACL created using the latest version of WAF, use the ACL ARN, for example
     * ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To
     * specify a web ACL created using WAF Classic, use the ACL ID, for example
     * ``473e64fd-f30b-4765-81a0-62ad96dd167a``. WAF is a web application firewall that lets you monitor the HTTP and
     * HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions
     * that you specify, such as the IP addresses that requests originate from or the values of query strings,
     * CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden).
     * You can also configure CloudFront to return a custom error page when a request is blocked. For more information
     * about WAF, see the [Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html).
     */
    private String webAclId;

    /**
     * Creates an instance of DistributionConfig class.
     */
    public DistributionConfig() {
    }

    /**
     * Get the aliases property: A complex type that contains information about CNAMEs (alternate domain names), if any,
     * for this distribution.
     * 
     * @return the aliases value.
     */
    public List<String> aliases() {
        return this.aliases;
    }

    /**
     * Set the aliases property: A complex type that contains information about CNAMEs (alternate domain names), if any,
     * for this distribution.
     * 
     * @param aliases the aliases value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withAliases(List<String> aliases) {
        this.aliases = aliases;
        return this;
    }

    /**
     * Get the cnamEs property: Property cnamEs.
     * 
     * @return the cnamEs value.
     */
    public List<String> cnamEs() {
        return this.cnamEs;
    }

    /**
     * Set the cnamEs property: Property cnamEs.
     * 
     * @param cnamEs the cnamEs value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withCnamEs(List<String> cnamEs) {
        this.cnamEs = cnamEs;
        return this;
    }

    /**
     * Get the cacheBehaviors property: A complex type that contains zero or more ``CacheBehavior`` elements.
     * 
     * @return the cacheBehaviors value.
     */
    public List<CacheBehavior> cacheBehaviors() {
        return this.cacheBehaviors;
    }

    /**
     * Set the cacheBehaviors property: A complex type that contains zero or more ``CacheBehavior`` elements.
     * 
     * @param cacheBehaviors the cacheBehaviors value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withCacheBehaviors(List<CacheBehavior> cacheBehaviors) {
        this.cacheBehaviors = cacheBehaviors;
        return this;
    }

    /**
     * Get the comment property: A comment to describe the distribution. The comment cannot be longer than 128
     * characters.
     * 
     * @return the comment value.
     */
    public String comment() {
        return this.comment;
    }

    /**
     * Set the comment property: A comment to describe the distribution. The comment cannot be longer than 128
     * characters.
     * 
     * @param comment the comment value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Get the continuousDeploymentPolicyId property: The identifier of a continuous deployment policy. For more
     * information, see ``CreateContinuousDeploymentPolicy``.
     * 
     * @return the continuousDeploymentPolicyId value.
     */
    public String continuousDeploymentPolicyId() {
        return this.continuousDeploymentPolicyId;
    }

    /**
     * Set the continuousDeploymentPolicyId property: The identifier of a continuous deployment policy. For more
     * information, see ``CreateContinuousDeploymentPolicy``.
     * 
     * @param continuousDeploymentPolicyId the continuousDeploymentPolicyId value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withContinuousDeploymentPolicyId(String continuousDeploymentPolicyId) {
        this.continuousDeploymentPolicyId = continuousDeploymentPolicyId;
        return this;
    }

    /**
     * Get the customErrorResponses property: A complex type that controls the following: + Whether CloudFront replaces
     * HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the
     * viewer. + How long CloudFront caches HTTP status codes in the 4xx and 5xx range. For more information about
     * custom error pages, see [Customizing Error
     * Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @return the customErrorResponses value.
     */
    public List<CustomErrorResponse> customErrorResponses() {
        return this.customErrorResponses;
    }

    /**
     * Set the customErrorResponses property: A complex type that controls the following: + Whether CloudFront replaces
     * HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the
     * viewer. + How long CloudFront caches HTTP status codes in the 4xx and 5xx range. For more information about
     * custom error pages, see [Customizing Error
     * Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @param customErrorResponses the customErrorResponses value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withCustomErrorResponses(List<CustomErrorResponse> customErrorResponses) {
        this.customErrorResponses = customErrorResponses;
        return this;
    }

    /**
     * Get the customOrigin property: Property customOrigin.
     * 
     * @return the customOrigin value.
     */
    public LegacyCustomOrigin customOrigin() {
        return this.customOrigin;
    }

    /**
     * Set the customOrigin property: Property customOrigin.
     * 
     * @param customOrigin the customOrigin value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withCustomOrigin(LegacyCustomOrigin customOrigin) {
        this.customOrigin = customOrigin;
        return this;
    }

    /**
     * Get the defaultCacheBehavior property: A complex type that describes the default cache behavior if you don't
     * specify a ``CacheBehavior`` element or if files don't match any of the values of ``PathPattern`` in
     * ``CacheBehavior`` elements. You must create exactly one default cache behavior. A complex type that describes the
     * default cache behavior if you don't specify a ``CacheBehavior`` element or if request URLs don't match any of the
     * values of ``PathPattern`` in ``CacheBehavior`` elements. You must create exactly one default cache behavior.
     * 
     * @return the defaultCacheBehavior value.
     */
    public DefaultCacheBehavior defaultCacheBehavior() {
        return this.defaultCacheBehavior;
    }

    /**
     * Set the defaultCacheBehavior property: A complex type that describes the default cache behavior if you don't
     * specify a ``CacheBehavior`` element or if files don't match any of the values of ``PathPattern`` in
     * ``CacheBehavior`` elements. You must create exactly one default cache behavior. A complex type that describes the
     * default cache behavior if you don't specify a ``CacheBehavior`` element or if request URLs don't match any of the
     * values of ``PathPattern`` in ``CacheBehavior`` elements. You must create exactly one default cache behavior.
     * 
     * @param defaultCacheBehavior the defaultCacheBehavior value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withDefaultCacheBehavior(DefaultCacheBehavior defaultCacheBehavior) {
        this.defaultCacheBehavior = defaultCacheBehavior;
        return this;
    }

    /**
     * Get the defaultRootObject property: The object that you want CloudFront to request from your origin (for example,
     * ``index.html``) when a viewer requests the root URL for your distribution (``https://www.example.com``) instead
     * of an object in your distribution (``https://www.example.com/product-description.html``). Specifying a default
     * root object avoids exposing the contents of your distribution. Specify only the object name, for example,
     * ``index.html``. Don't add a ``/`` before the object name. If you don't want to specify a default root object when
     * you create a distribution, include an empty ``DefaultRootObject`` element. To delete the default root object from
     * an existing distribution, update the distribution configuration and include an empty ``DefaultRootObject``
     * element. To replace the default root object, update the distribution configuration and specify the new object.
     * For more information about the default root object, see [Creating a Default Root
     * Object](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @return the defaultRootObject value.
     */
    public String defaultRootObject() {
        return this.defaultRootObject;
    }

    /**
     * Set the defaultRootObject property: The object that you want CloudFront to request from your origin (for example,
     * ``index.html``) when a viewer requests the root URL for your distribution (``https://www.example.com``) instead
     * of an object in your distribution (``https://www.example.com/product-description.html``). Specifying a default
     * root object avoids exposing the contents of your distribution. Specify only the object name, for example,
     * ``index.html``. Don't add a ``/`` before the object name. If you don't want to specify a default root object when
     * you create a distribution, include an empty ``DefaultRootObject`` element. To delete the default root object from
     * an existing distribution, update the distribution configuration and include an empty ``DefaultRootObject``
     * element. To replace the default root object, update the distribution configuration and specify the new object.
     * For more information about the default root object, see [Creating a Default Root
     * Object](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html) in the *Amazon
     * CloudFront Developer Guide*.
     * 
     * @param defaultRootObject the defaultRootObject value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withDefaultRootObject(String defaultRootObject) {
        this.defaultRootObject = defaultRootObject;
        return this;
    }

    /**
     * Get the enabled property: From this field, you can enable or disable the selected distribution.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: From this field, you can enable or disable the selected distribution.
     * 
     * @param enabled the enabled value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the httpVersion property: (Optional) Specify the maximum HTTP version(s) that you want viewers to use to
     * communicate with CF. The default value for new distributions is ``http1.1``. For viewers and CF to use HTTP/2,
     * viewers must support TLSv1.2 or later, and must support Server Name Indication (SNI). For viewers and CF to use
     * HTTP/3, viewers must support TLSv1.3 and Server Name Indication (SNI). CF supports HTTP/3 connection migration to
     * allow the viewer to switch networks without losing connection. For more information about connection migration,
     * see [Connection
     * Migration](https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration) at
     * RFC 9000. For more information about supported TLSv1.3 ciphers, see [Supported protocols and ciphers between
     * viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html).
     * 
     * @return the httpVersion value.
     */
    public String httpVersion() {
        return this.httpVersion;
    }

    /**
     * Set the httpVersion property: (Optional) Specify the maximum HTTP version(s) that you want viewers to use to
     * communicate with CF. The default value for new distributions is ``http1.1``. For viewers and CF to use HTTP/2,
     * viewers must support TLSv1.2 or later, and must support Server Name Indication (SNI). For viewers and CF to use
     * HTTP/3, viewers must support TLSv1.3 and Server Name Indication (SNI). CF supports HTTP/3 connection migration to
     * allow the viewer to switch networks without losing connection. For more information about connection migration,
     * see [Connection
     * Migration](https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration) at
     * RFC 9000. For more information about supported TLSv1.3 ciphers, see [Supported protocols and ciphers between
     * viewers and
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html).
     * 
     * @param httpVersion the httpVersion value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withHttpVersion(String httpVersion) {
        this.httpVersion = httpVersion;
        return this;
    }

    /**
     * Get the ipV6Enabled property: If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for
     * your distribution, specify ``true``. If you specify ``false``, CloudFront responds to IPv6 DNS requests with the
     * DNS response code ``NOERROR`` and with no IP addresses. This allows viewers to submit a second request, for an
     * IPv4 address for your distribution. In general, you should enable IPv6 if you have users on IPv6 networks who
     * want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your
     * content, and if you're using a custom policy that includes the ``IpAddress`` parameter to restrict the IP
     * addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP
     * address and not restrict access to other content (or restrict access but not by IP address), you can create two
     * distributions. For more information, see [Creating a Signed URL Using a Custom
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html)
     * in the *Amazon CloudFront Developer Guide*. If you're using an R53AWSIntlong alias resource record set to route
     * traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the
     * following are true: + You enable IPv6 for the distribution + You're using alternate domain names in the URLs for
     * your objects For more information, see [Routing Traffic to an Amazon CloudFront Web Distribution by Using Your
     * Domain Name](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html)
     * in the *Developer Guide*. If you created a CNAME resource record set, either with R53AWSIntlong or with another
     * DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution
     * regardless of the IP address format of the viewer request.
     * 
     * @return the ipV6Enabled value.
     */
    public Boolean ipV6Enabled() {
        return this.ipV6Enabled;
    }

    /**
     * Set the ipV6Enabled property: If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for
     * your distribution, specify ``true``. If you specify ``false``, CloudFront responds to IPv6 DNS requests with the
     * DNS response code ``NOERROR`` and with no IP addresses. This allows viewers to submit a second request, for an
     * IPv4 address for your distribution. In general, you should enable IPv6 if you have users on IPv6 networks who
     * want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your
     * content, and if you're using a custom policy that includes the ``IpAddress`` parameter to restrict the IP
     * addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP
     * address and not restrict access to other content (or restrict access but not by IP address), you can create two
     * distributions. For more information, see [Creating a Signed URL Using a Custom
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html)
     * in the *Amazon CloudFront Developer Guide*. If you're using an R53AWSIntlong alias resource record set to route
     * traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the
     * following are true: + You enable IPv6 for the distribution + You're using alternate domain names in the URLs for
     * your objects For more information, see [Routing Traffic to an Amazon CloudFront Web Distribution by Using Your
     * Domain Name](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html)
     * in the *Developer Guide*. If you created a CNAME resource record set, either with R53AWSIntlong or with another
     * DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution
     * regardless of the IP address format of the viewer request.
     * 
     * @param ipV6Enabled the ipV6Enabled value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withIpV6Enabled(Boolean ipV6Enabled) {
        this.ipV6Enabled = ipV6Enabled;
        return this;
    }

    /**
     * Get the logging property: A complex type that controls whether access logs are written for the distribution. For
     * more information about logging, see [Access
     * Logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html) in the *Amazon
     * CloudFront Developer Guide*. A complex type that controls whether access logs are written for the distribution.
     * 
     * @return the logging value.
     */
    public Logging logging() {
        return this.logging;
    }

    /**
     * Set the logging property: A complex type that controls whether access logs are written for the distribution. For
     * more information about logging, see [Access
     * Logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html) in the *Amazon
     * CloudFront Developer Guide*. A complex type that controls whether access logs are written for the distribution.
     * 
     * @param logging the logging value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withLogging(Logging logging) {
        this.logging = logging;
        return this;
    }

    /**
     * Get the originGroups property: A complex type that contains information about origin groups for this
     * distribution. A complex data type for the origin groups specified for a distribution.
     * 
     * @return the originGroups value.
     */
    public OriginGroups originGroups() {
        return this.originGroups;
    }

    /**
     * Set the originGroups property: A complex type that contains information about origin groups for this
     * distribution. A complex data type for the origin groups specified for a distribution.
     * 
     * @param originGroups the originGroups value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withOriginGroups(OriginGroups originGroups) {
        this.originGroups = originGroups;
        return this;
    }

    /**
     * Get the origins property: A complex type that contains information about origins for this distribution.
     * 
     * @return the origins value.
     */
    public List<OriginAutoGenerated> origins() {
        return this.origins;
    }

    /**
     * Set the origins property: A complex type that contains information about origins for this distribution.
     * 
     * @param origins the origins value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withOrigins(List<OriginAutoGenerated> origins) {
        this.origins = origins;
        return this;
    }

    /**
     * Get the priceClass property: The price class that corresponds with the maximum price that you want to pay for
     * CloudFront service. If you specify ``PriceClass_All``, CloudFront responds to requests for your objects from all
     * CloudFront edge locations. If you specify a price class other than ``PriceClass_All``, CloudFront serves your
     * objects from the CloudFront edge location that has the lowest latency among the edge locations in your price
     * class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower
     * performance. For more information about price classes, see [Choosing the Price Class for a CloudFront
     * Distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html) in the *Amazon
     * CloudFront Developer Guide*. For information about CloudFront pricing, including how price classes (such as Price
     * Class 100) map to CloudFront regions, see [Amazon CloudFront
     * Pricing](https://docs.aws.amazon.com/cloudfront/pricing/).
     * 
     * @return the priceClass value.
     */
    public String priceClass() {
        return this.priceClass;
    }

    /**
     * Set the priceClass property: The price class that corresponds with the maximum price that you want to pay for
     * CloudFront service. If you specify ``PriceClass_All``, CloudFront responds to requests for your objects from all
     * CloudFront edge locations. If you specify a price class other than ``PriceClass_All``, CloudFront serves your
     * objects from the CloudFront edge location that has the lowest latency among the edge locations in your price
     * class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower
     * performance. For more information about price classes, see [Choosing the Price Class for a CloudFront
     * Distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html) in the *Amazon
     * CloudFront Developer Guide*. For information about CloudFront pricing, including how price classes (such as Price
     * Class 100) map to CloudFront regions, see [Amazon CloudFront
     * Pricing](https://docs.aws.amazon.com/cloudfront/pricing/).
     * 
     * @param priceClass the priceClass value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withPriceClass(String priceClass) {
        this.priceClass = priceClass;
        return this;
    }

    /**
     * Get the restrictions property: A complex type that identifies ways in which you want to restrict distribution of
     * your content. A complex type that identifies ways in which you want to restrict distribution of your content.
     * 
     * @return the restrictions value.
     */
    public Restrictions restrictions() {
        return this.restrictions;
    }

    /**
     * Set the restrictions property: A complex type that identifies ways in which you want to restrict distribution of
     * your content. A complex type that identifies ways in which you want to restrict distribution of your content.
     * 
     * @param restrictions the restrictions value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withRestrictions(Restrictions restrictions) {
        this.restrictions = restrictions;
        return this;
    }

    /**
     * Get the s3Origin property: Property s3Origin.
     * 
     * @return the s3Origin value.
     */
    public LegacyS3Origin s3Origin() {
        return this.s3Origin;
    }

    /**
     * Set the s3Origin property: Property s3Origin.
     * 
     * @param s3Origin the s3Origin value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withS3Origin(LegacyS3Origin s3Origin) {
        this.s3Origin = s3Origin;
        return this;
    }

    /**
     * Get the staging property: A Boolean that indicates whether this is a staging distribution. When this value is
     * ``true``, this is a staging distribution. When this value is ``false``, this is not a staging distribution.
     * 
     * @return the staging value.
     */
    public Boolean staging() {
        return this.staging;
    }

    /**
     * Set the staging property: A Boolean that indicates whether this is a staging distribution. When this value is
     * ``true``, this is a staging distribution. When this value is ``false``, this is not a staging distribution.
     * 
     * @param staging the staging value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withStaging(Boolean staging) {
        this.staging = staging;
        return this;
    }

    /**
     * Get the viewerCertificate property: A complex type that determines the distribution's SSL/TLS configuration for
     * communicating with viewers. A complex type that determines the distribution's SSL/TLS configuration for
     * communicating with viewers. If the distribution doesn't use ``Aliases`` (also known as alternate domain names or
     * CNAMEs)—that is, if the distribution uses the CloudFront domain name such as
     * ``d111111abcdef8.cloudfront.net``—set ``CloudFrontDefaultCertificate`` to ``true`` and leave all other fields
     * empty. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), use the fields in this type to
     * specify the following settings: + Which viewers the distribution accepts HTTPS connections from: only viewers
     * that support [server name indication
     * (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all
     * viewers including those that don't support SNI. + To accept HTTPS connections from only viewers that support SNI,
     * set ``SSLSupportMethod`` to ``sni-only``. This is recommended. Most browsers and clients support SNI. (In
     * CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.) + To accept HTTPS
     * connections from all viewers, including those that don't support SNI, set ``SSLSupportMethod`` to ``vip``. This
     * is not recommended, and results in additional monthly charges from CloudFront. (In CloudFormation, the field name
     * is ``SslSupportMethod``. Note the different capitalization.) + The minimum SSL/TLS protocol version that the
     * distribution can use to communicate with viewers. To specify a minimum version, choose a value for
     * ``MinimumProtocolVersion``. For more information, see [Security
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
     * in the *Amazon CloudFront Developer Guide*. + The location of the SSL/TLS certificate,
     * [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or
     * [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the
     * location by setting a value in one of the following fields (not both): + ``ACMCertificateArn`` (In
     * CloudFormation, this field name is ``AcmCertificateArn``. Note the different capitalization.) +
     * ``IAMCertificateId`` (In CloudFormation, this field name is ``IamCertificateId``. Note the different
     * capitalization.) All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only,
     * or to redirect them from HTTP to HTTPS, use ``ViewerProtocolPolicy`` in the ``CacheBehavior`` or
     * ``DefaultCacheBehavior``. To specify how CloudFront should use SSL/TLS to communicate with your custom origin,
     * use ``CustomOriginConfig``. For more information, see [Using HTTPS with
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and [Using
     * Alternate Domain Names and
     * HTTPS](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @return the viewerCertificate value.
     */
    public ViewerCertificate viewerCertificate() {
        return this.viewerCertificate;
    }

    /**
     * Set the viewerCertificate property: A complex type that determines the distribution's SSL/TLS configuration for
     * communicating with viewers. A complex type that determines the distribution's SSL/TLS configuration for
     * communicating with viewers. If the distribution doesn't use ``Aliases`` (also known as alternate domain names or
     * CNAMEs)—that is, if the distribution uses the CloudFront domain name such as
     * ``d111111abcdef8.cloudfront.net``—set ``CloudFrontDefaultCertificate`` to ``true`` and leave all other fields
     * empty. If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), use the fields in this type to
     * specify the following settings: + Which viewers the distribution accepts HTTPS connections from: only viewers
     * that support [server name indication
     * (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all
     * viewers including those that don't support SNI. + To accept HTTPS connections from only viewers that support SNI,
     * set ``SSLSupportMethod`` to ``sni-only``. This is recommended. Most browsers and clients support SNI. (In
     * CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.) + To accept HTTPS
     * connections from all viewers, including those that don't support SNI, set ``SSLSupportMethod`` to ``vip``. This
     * is not recommended, and results in additional monthly charges from CloudFront. (In CloudFormation, the field name
     * is ``SslSupportMethod``. Note the different capitalization.) + The minimum SSL/TLS protocol version that the
     * distribution can use to communicate with viewers. To specify a minimum version, choose a value for
     * ``MinimumProtocolVersion``. For more information, see [Security
     * Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy)
     * in the *Amazon CloudFront Developer Guide*. + The location of the SSL/TLS certificate,
     * [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or
     * [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the
     * location by setting a value in one of the following fields (not both): + ``ACMCertificateArn`` (In
     * CloudFormation, this field name is ``AcmCertificateArn``. Note the different capitalization.) +
     * ``IAMCertificateId`` (In CloudFormation, this field name is ``IamCertificateId``. Note the different
     * capitalization.) All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only,
     * or to redirect them from HTTP to HTTPS, use ``ViewerProtocolPolicy`` in the ``CacheBehavior`` or
     * ``DefaultCacheBehavior``. To specify how CloudFront should use SSL/TLS to communicate with your custom origin,
     * use ``CustomOriginConfig``. For more information, see [Using HTTPS with
     * CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and [Using
     * Alternate Domain Names and
     * HTTPS](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @param viewerCertificate the viewerCertificate value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withViewerCertificate(ViewerCertificate viewerCertificate) {
        this.viewerCertificate = viewerCertificate;
        return this;
    }

    /**
     * Get the webAclId property: A unique identifier that specifies the WAF web ACL, if any, to associate with this
     * distribution. To specify a web ACL created using the latest version of WAF, use the ACL ARN, for example
     * ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To
     * specify a web ACL created using WAF Classic, use the ACL ID, for example
     * ``473e64fd-f30b-4765-81a0-62ad96dd167a``. WAF is a web application firewall that lets you monitor the HTTP and
     * HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions
     * that you specify, such as the IP addresses that requests originate from or the values of query strings,
     * CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden).
     * You can also configure CloudFront to return a custom error page when a request is blocked. For more information
     * about WAF, see the [Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html).
     * 
     * @return the webAclId value.
     */
    public String webAclId() {
        return this.webAclId;
    }

    /**
     * Set the webAclId property: A unique identifier that specifies the WAF web ACL, if any, to associate with this
     * distribution. To specify a web ACL created using the latest version of WAF, use the ACL ARN, for example
     * ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To
     * specify a web ACL created using WAF Classic, use the ACL ID, for example
     * ``473e64fd-f30b-4765-81a0-62ad96dd167a``. WAF is a web application firewall that lets you monitor the HTTP and
     * HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions
     * that you specify, such as the IP addresses that requests originate from or the values of query strings,
     * CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden).
     * You can also configure CloudFront to return a custom error page when a request is blocked. For more information
     * about WAF, see the [Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html).
     * 
     * @param webAclId the webAclId value to set.
     * @return the DistributionConfig object itself.
     */
    public DistributionConfig withWebAclId(String webAclId) {
        this.webAclId = webAclId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cacheBehaviors() != null) {
            cacheBehaviors().forEach(e -> e.validate());
        }
        if (customErrorResponses() != null) {
            customErrorResponses().forEach(e -> e.validate());
        }
        if (customOrigin() != null) {
            customOrigin().validate();
        }
        if (defaultCacheBehavior() != null) {
            defaultCacheBehavior().validate();
        }
        if (logging() != null) {
            logging().validate();
        }
        if (originGroups() != null) {
            originGroups().validate();
        }
        if (origins() != null) {
            origins().forEach(e -> e.validate());
        }
        if (restrictions() != null) {
            restrictions().validate();
        }
        if (s3Origin() != null) {
            s3Origin().validate();
        }
        if (viewerCertificate() != null) {
            viewerCertificate().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("aliases", this.aliases, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("cnamEs", this.cnamEs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("cacheBehaviors", this.cacheBehaviors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("comment", this.comment);
        jsonWriter.writeStringField("continuousDeploymentPolicyId", this.continuousDeploymentPolicyId);
        jsonWriter.writeArrayField("customErrorResponses", this.customErrorResponses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("customOrigin", this.customOrigin);
        jsonWriter.writeJsonField("defaultCacheBehavior", this.defaultCacheBehavior);
        jsonWriter.writeStringField("defaultRootObject", this.defaultRootObject);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("httpVersion", this.httpVersion);
        jsonWriter.writeBooleanField("ipV6Enabled", this.ipV6Enabled);
        jsonWriter.writeJsonField("logging", this.logging);
        jsonWriter.writeJsonField("originGroups", this.originGroups);
        jsonWriter.writeArrayField("origins", this.origins, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("priceClass", this.priceClass);
        jsonWriter.writeJsonField("restrictions", this.restrictions);
        jsonWriter.writeJsonField("s3Origin", this.s3Origin);
        jsonWriter.writeBooleanField("staging", this.staging);
        jsonWriter.writeJsonField("viewerCertificate", this.viewerCertificate);
        jsonWriter.writeStringField("webACLId", this.webAclId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DistributionConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DistributionConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DistributionConfig.
     */
    public static DistributionConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DistributionConfig deserializedDistributionConfig = new DistributionConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aliases".equals(fieldName)) {
                    List<String> aliases = reader.readArray(reader1 -> reader1.getString());
                    deserializedDistributionConfig.aliases = aliases;
                } else if ("cnamEs".equals(fieldName)) {
                    List<String> cnamEs = reader.readArray(reader1 -> reader1.getString());
                    deserializedDistributionConfig.cnamEs = cnamEs;
                } else if ("cacheBehaviors".equals(fieldName)) {
                    List<CacheBehavior> cacheBehaviors = reader.readArray(reader1 -> CacheBehavior.fromJson(reader1));
                    deserializedDistributionConfig.cacheBehaviors = cacheBehaviors;
                } else if ("comment".equals(fieldName)) {
                    deserializedDistributionConfig.comment = reader.getString();
                } else if ("continuousDeploymentPolicyId".equals(fieldName)) {
                    deserializedDistributionConfig.continuousDeploymentPolicyId = reader.getString();
                } else if ("customErrorResponses".equals(fieldName)) {
                    List<CustomErrorResponse> customErrorResponses
                        = reader.readArray(reader1 -> CustomErrorResponse.fromJson(reader1));
                    deserializedDistributionConfig.customErrorResponses = customErrorResponses;
                } else if ("customOrigin".equals(fieldName)) {
                    deserializedDistributionConfig.customOrigin = LegacyCustomOrigin.fromJson(reader);
                } else if ("defaultCacheBehavior".equals(fieldName)) {
                    deserializedDistributionConfig.defaultCacheBehavior = DefaultCacheBehavior.fromJson(reader);
                } else if ("defaultRootObject".equals(fieldName)) {
                    deserializedDistributionConfig.defaultRootObject = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedDistributionConfig.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("httpVersion".equals(fieldName)) {
                    deserializedDistributionConfig.httpVersion = reader.getString();
                } else if ("ipV6Enabled".equals(fieldName)) {
                    deserializedDistributionConfig.ipV6Enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("logging".equals(fieldName)) {
                    deserializedDistributionConfig.logging = Logging.fromJson(reader);
                } else if ("originGroups".equals(fieldName)) {
                    deserializedDistributionConfig.originGroups = OriginGroups.fromJson(reader);
                } else if ("origins".equals(fieldName)) {
                    List<OriginAutoGenerated> origins
                        = reader.readArray(reader1 -> OriginAutoGenerated.fromJson(reader1));
                    deserializedDistributionConfig.origins = origins;
                } else if ("priceClass".equals(fieldName)) {
                    deserializedDistributionConfig.priceClass = reader.getString();
                } else if ("restrictions".equals(fieldName)) {
                    deserializedDistributionConfig.restrictions = Restrictions.fromJson(reader);
                } else if ("s3Origin".equals(fieldName)) {
                    deserializedDistributionConfig.s3Origin = LegacyS3Origin.fromJson(reader);
                } else if ("staging".equals(fieldName)) {
                    deserializedDistributionConfig.staging = reader.getNullable(JsonReader::getBoolean);
                } else if ("viewerCertificate".equals(fieldName)) {
                    deserializedDistributionConfig.viewerCertificate = ViewerCertificate.fromJson(reader);
                } else if ("webACLId".equals(fieldName)) {
                    deserializedDistributionConfig.webAclId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDistributionConfig;
        });
    }
}
