// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of awsIamAccessKeyMetadata.
 */
@Fluent
public final class AwsIamAccessKeyMetadataProperties implements JsonSerializable<AwsIamAccessKeyMetadataProperties> {
    /*
     * <p>The ID for this access key.</p>
     */
    private String accessKeyId;

    /*
     * <p>The date when the access key was created.</p>
     */
    private OffsetDateTime createDate;

    /*
     * <p>The status of the access key. <code>Active</code> means that the key is valid for API calls;
     * <code>Inactive</code> means it is not.</p>
     */
    private StatusTypeEnumValueAutoGenerated status;

    /*
     * <p>The name of the IAM user that the key is associated with.</p>
     */
    private String username;

    /**
     * Creates an instance of AwsIamAccessKeyMetadataProperties class.
     */
    public AwsIamAccessKeyMetadataProperties() {
    }

    /**
     * Get the accessKeyId property: &lt;p&gt;The ID for this access key.&lt;/p&gt;.
     * 
     * @return the accessKeyId value.
     */
    public String accessKeyId() {
        return this.accessKeyId;
    }

    /**
     * Set the accessKeyId property: &lt;p&gt;The ID for this access key.&lt;/p&gt;.
     * 
     * @param accessKeyId the accessKeyId value to set.
     * @return the AwsIamAccessKeyMetadataProperties object itself.
     */
    public AwsIamAccessKeyMetadataProperties withAccessKeyId(String accessKeyId) {
        this.accessKeyId = accessKeyId;
        return this;
    }

    /**
     * Get the createDate property: &lt;p&gt;The date when the access key was created.&lt;/p&gt;.
     * 
     * @return the createDate value.
     */
    public OffsetDateTime createDate() {
        return this.createDate;
    }

    /**
     * Set the createDate property: &lt;p&gt;The date when the access key was created.&lt;/p&gt;.
     * 
     * @param createDate the createDate value to set.
     * @return the AwsIamAccessKeyMetadataProperties object itself.
     */
    public AwsIamAccessKeyMetadataProperties withCreateDate(OffsetDateTime createDate) {
        this.createDate = createDate;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The status of the access key. &lt;code&gt;Active&lt;/code&gt; means that the
     * key is valid for API calls; &lt;code&gt;Inactive&lt;/code&gt; means it is not.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public StatusTypeEnumValueAutoGenerated status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The status of the access key. &lt;code&gt;Active&lt;/code&gt; means that the
     * key is valid for API calls; &lt;code&gt;Inactive&lt;/code&gt; means it is not.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the AwsIamAccessKeyMetadataProperties object itself.
     */
    public AwsIamAccessKeyMetadataProperties withStatus(StatusTypeEnumValueAutoGenerated status) {
        this.status = status;
        return this;
    }

    /**
     * Get the username property: &lt;p&gt;The name of the IAM user that the key is associated with.&lt;/p&gt;.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: &lt;p&gt;The name of the IAM user that the key is associated with.&lt;/p&gt;.
     * 
     * @param username the username value to set.
     * @return the AwsIamAccessKeyMetadataProperties object itself.
     */
    public AwsIamAccessKeyMetadataProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessKeyId", this.accessKeyId);
        jsonWriter.writeStringField("createDate",
            this.createDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createDate));
        jsonWriter.writeJsonField("status", this.status);
        jsonWriter.writeStringField("userName", this.username);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamAccessKeyMetadataProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamAccessKeyMetadataProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamAccessKeyMetadataProperties.
     */
    public static AwsIamAccessKeyMetadataProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamAccessKeyMetadataProperties deserializedAwsIamAccessKeyMetadataProperties
                = new AwsIamAccessKeyMetadataProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessKeyId".equals(fieldName)) {
                    deserializedAwsIamAccessKeyMetadataProperties.accessKeyId = reader.getString();
                } else if ("createDate".equals(fieldName)) {
                    deserializedAwsIamAccessKeyMetadataProperties.createDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedAwsIamAccessKeyMetadataProperties.status
                        = StatusTypeEnumValueAutoGenerated.fromJson(reader);
                } else if ("userName".equals(fieldName)) {
                    deserializedAwsIamAccessKeyMetadataProperties.username = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamAccessKeyMetadataProperties;
        });
    }
}
