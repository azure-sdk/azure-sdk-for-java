// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Definition of awsAcmCertificateSummary.
 */
@Fluent
public final class AwsAcmCertificateSummaryProperties implements JsonSerializable<AwsAcmCertificateSummaryProperties> {
    /*
     * <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p> <p>
     * <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code> </p> <p>For more
     * information about ARNs, see <a
     * href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'>Amazon Resource Names
     * (ARNs)</a>.</p>
     */
    private String certificateArn;

    /*
     * <p>The time at which the certificate was requested.</p>
     */
    private OffsetDateTime createdAt;

    /*
     * <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.</p>
     */
    private String domainName;

    /*
     * <p>Indicates whether the certificate has been exported. This value exists only when the certificate type is
     * <code>PRIVATE</code>.</p>
     */
    private Boolean exported;

    /*
     * <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which
     * the certificate public key can be used and consists of a name and an object identifier (OID). </p>
     */
    private List<ExtendedKeyUsageName> extendedKeyUsages;

    /*
     * <p>When called by <a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>,
     * indicates whether the full list of subject alternative names has been included in the response. If false, the
     * response includes all of the subject alternative names included in the certificate. If true, the response only
     * includes the first 100 subject alternative names included in the certificate. To display the full list of subject
     * alternative names, use <a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</
     * p>
     */
    private Boolean hasAdditionalSubjectAlternativeNames;

    /*
     * <p>The date and time when the certificate was imported. This value exists only when the certificate type is
     * <code>IMPORTED</code>. </p>
     */
    private OffsetDateTime importedAt;

    /*
     * <p>Indicates whether the certificate is currently in use by any Amazon Web Services resources.</p>
     */
    private Boolean inUse;

    /*
     * <p>The time at which the certificate was issued. This value exists only when the certificate type is
     * <code>AMAZON_ISSUED</code>. </p>
     */
    private OffsetDateTime issuedAt;

    /*
     * <p>The algorithm that was used to generate the public-private key pair.</p>
     */
    private KeyAlgorithmEnumValue keyAlgorithm;

    /*
     * <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of
     * the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE,
     * KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
     */
    private List<KeyUsageName> keyUsages;

    /*
     * <p>The time after which the certificate is not valid.</p>
     */
    private OffsetDateTime notAfter;

    /*
     * <p>The time before which the certificate is not valid.</p>
     */
    private OffsetDateTime notBefore;

    /*
     * <p>Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates
     * can be renewed with the <a>RenewCertificate</a> command.</p>
     */
    private RenewalEligibilityEnumValue renewalEligibility;

    /*
     * <p>The time at which the certificate was revoked. This value exists only when the certificate status is
     * <code>REVOKED</code>. </p>
     */
    private OffsetDateTime revokedAt;

    /*
     * <p>The status of the certificate.</p> <p>A certificate enters status PENDING_VALIDATION upon being requested,
     * unless it fails for any of the reasons given in the troubleshooting topic <a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html'>Certificate request
     * fails</a>. ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a
     * certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with <a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html'>DNS validation</a> or <a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html'>Email validation</a>, and try
     * again. If validation succeeds, the certificate enters status ISSUED. </p>
     */
    private CertificateStatusEnumValue status;

    /*
     * <p>One or more domain names (subject alternative names) included in the certificate. This list contains the
     * domain names that are bound to the public key that is contained in the certificate. The subject alternative names
     * include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect
     * to the website. </p> <p>When called by <a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'>ListCertificates</a>, this
     * parameter will only return the first 100 subject alternative names included in the certificate. To display the
     * full list of subject alternative names, use <a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'>DescribeCertificate</a>.</
     * p>
     */
    private List<String> subjectAlternativeNameSummaries;

    /*
     * <p>The source of the certificate. For certificates provided by ACM, this value is <code>AMAZON_ISSUED</code>. For
     * certificates that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>. ACM does not
     * provide <a href='https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html'>managed renewal</a> for
     * imported certificates. For more information about the differences between certificates that you import and those
     * that ACM provides, see <a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html'>Importing Certificates</a> in the
     * <i>Certificate Manager User Guide</i>. </p>
     */
    private CertificateTypeEnumValue type;

    /**
     * Creates an instance of AwsAcmCertificateSummaryProperties class.
     */
    public AwsAcmCertificateSummaryProperties() {
    }

    /**
     * Get the certificateArn property: &lt;p&gt;Amazon Resource Name (ARN) of the certificate. This is of the
     * form:&lt;/p&gt; &lt;p&gt;
     * &lt;code&gt;arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012&lt;/code&gt;
     * &lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a
     * href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'&gt;Amazon Resource Names
     * (ARNs)&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the certificateArn value.
     */
    public String certificateArn() {
        return this.certificateArn;
    }

    /**
     * Set the certificateArn property: &lt;p&gt;Amazon Resource Name (ARN) of the certificate. This is of the
     * form:&lt;/p&gt; &lt;p&gt;
     * &lt;code&gt;arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012&lt;/code&gt;
     * &lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a
     * href='https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html'&gt;Amazon Resource Names
     * (ARNs)&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param certificateArn the certificateArn value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withCertificateArn(String certificateArn) {
        this.certificateArn = certificateArn;
        return this;
    }

    /**
     * Get the createdAt property: &lt;p&gt;The time at which the certificate was requested.&lt;/p&gt;.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: &lt;p&gt;The time at which the certificate was requested.&lt;/p&gt;.
     * 
     * @param createdAt the createdAt value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the domainName property: &lt;p&gt;Fully qualified domain name (FQDN), such as www.example.com or example.com,
     * for the certificate.&lt;/p&gt;.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: &lt;p&gt;Fully qualified domain name (FQDN), such as www.example.com or example.com,
     * for the certificate.&lt;/p&gt;.
     * 
     * @param domainName the domainName value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the exported property: &lt;p&gt;Indicates whether the certificate has been exported. This value exists only
     * when the certificate type is &lt;code&gt;PRIVATE&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the exported value.
     */
    public Boolean exported() {
        return this.exported;
    }

    /**
     * Set the exported property: &lt;p&gt;Indicates whether the certificate has been exported. This value exists only
     * when the certificate type is &lt;code&gt;PRIVATE&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param exported the exported value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withExported(Boolean exported) {
        this.exported = exported;
        return this;
    }

    /**
     * Get the extendedKeyUsages property: &lt;p&gt;Contains a list of Extended Key Usage X.509 v3 extension objects.
     * Each object specifies a purpose for which the certificate public key can be used and consists of a name and an
     * object identifier (OID). &lt;/p&gt;.
     * 
     * @return the extendedKeyUsages value.
     */
    public List<ExtendedKeyUsageName> extendedKeyUsages() {
        return this.extendedKeyUsages;
    }

    /**
     * Set the extendedKeyUsages property: &lt;p&gt;Contains a list of Extended Key Usage X.509 v3 extension objects.
     * Each object specifies a purpose for which the certificate public key can be used and consists of a name and an
     * object identifier (OID). &lt;/p&gt;.
     * 
     * @param extendedKeyUsages the extendedKeyUsages value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withExtendedKeyUsages(List<ExtendedKeyUsageName> extendedKeyUsages) {
        this.extendedKeyUsages = extendedKeyUsages;
        return this;
    }

    /**
     * Get the hasAdditionalSubjectAlternativeNames property: &lt;p&gt;When called by &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'&gt;ListCertificates&lt;/a&gt;,
     * indicates whether the full list of subject alternative names has been included in the response. If false, the
     * response includes all of the subject alternative names included in the certificate. If true, the response only
     * includes the first 100 subject alternative names included in the certificate. To display the full list of subject
     * alternative names, use &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'&gt;DescribeCertificate&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the hasAdditionalSubjectAlternativeNames value.
     */
    public Boolean hasAdditionalSubjectAlternativeNames() {
        return this.hasAdditionalSubjectAlternativeNames;
    }

    /**
     * Set the hasAdditionalSubjectAlternativeNames property: &lt;p&gt;When called by &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'&gt;ListCertificates&lt;/a&gt;,
     * indicates whether the full list of subject alternative names has been included in the response. If false, the
     * response includes all of the subject alternative names included in the certificate. If true, the response only
     * includes the first 100 subject alternative names included in the certificate. To display the full list of subject
     * alternative names, use &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'&gt;DescribeCertificate&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param hasAdditionalSubjectAlternativeNames the hasAdditionalSubjectAlternativeNames value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties
        withHasAdditionalSubjectAlternativeNames(Boolean hasAdditionalSubjectAlternativeNames) {
        this.hasAdditionalSubjectAlternativeNames = hasAdditionalSubjectAlternativeNames;
        return this;
    }

    /**
     * Get the importedAt property: &lt;p&gt;The date and time when the certificate was imported. This value exists only
     * when the certificate type is &lt;code&gt;IMPORTED&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the importedAt value.
     */
    public OffsetDateTime importedAt() {
        return this.importedAt;
    }

    /**
     * Set the importedAt property: &lt;p&gt;The date and time when the certificate was imported. This value exists only
     * when the certificate type is &lt;code&gt;IMPORTED&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param importedAt the importedAt value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withImportedAt(OffsetDateTime importedAt) {
        this.importedAt = importedAt;
        return this;
    }

    /**
     * Get the inUse property: &lt;p&gt;Indicates whether the certificate is currently in use by any Amazon Web Services
     * resources.&lt;/p&gt;.
     * 
     * @return the inUse value.
     */
    public Boolean inUse() {
        return this.inUse;
    }

    /**
     * Set the inUse property: &lt;p&gt;Indicates whether the certificate is currently in use by any Amazon Web Services
     * resources.&lt;/p&gt;.
     * 
     * @param inUse the inUse value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withInUse(Boolean inUse) {
        this.inUse = inUse;
        return this;
    }

    /**
     * Get the issuedAt property: &lt;p&gt;The time at which the certificate was issued. This value exists only when the
     * certificate type is &lt;code&gt;AMAZON_ISSUED&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the issuedAt value.
     */
    public OffsetDateTime issuedAt() {
        return this.issuedAt;
    }

    /**
     * Set the issuedAt property: &lt;p&gt;The time at which the certificate was issued. This value exists only when the
     * certificate type is &lt;code&gt;AMAZON_ISSUED&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param issuedAt the issuedAt value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withIssuedAt(OffsetDateTime issuedAt) {
        this.issuedAt = issuedAt;
        return this;
    }

    /**
     * Get the keyAlgorithm property: &lt;p&gt;The algorithm that was used to generate the public-private key
     * pair.&lt;/p&gt;.
     * 
     * @return the keyAlgorithm value.
     */
    public KeyAlgorithmEnumValue keyAlgorithm() {
        return this.keyAlgorithm;
    }

    /**
     * Set the keyAlgorithm property: &lt;p&gt;The algorithm that was used to generate the public-private key
     * pair.&lt;/p&gt;.
     * 
     * @param keyAlgorithm the keyAlgorithm value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withKeyAlgorithm(KeyAlgorithmEnumValue keyAlgorithm) {
        this.keyAlgorithm = keyAlgorithm;
        return this;
    }

    /**
     * Get the keyUsages property: &lt;p&gt;A list of Key Usage X.509 v3 extension objects. Each object is a string
     * value that identifies the purpose of the public key contained in the certificate. Possible extension values
     * include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.&lt;/p&gt;.
     * 
     * @return the keyUsages value.
     */
    public List<KeyUsageName> keyUsages() {
        return this.keyUsages;
    }

    /**
     * Set the keyUsages property: &lt;p&gt;A list of Key Usage X.509 v3 extension objects. Each object is a string
     * value that identifies the purpose of the public key contained in the certificate. Possible extension values
     * include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.&lt;/p&gt;.
     * 
     * @param keyUsages the keyUsages value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withKeyUsages(List<KeyUsageName> keyUsages) {
        this.keyUsages = keyUsages;
        return this;
    }

    /**
     * Get the notAfter property: &lt;p&gt;The time after which the certificate is not valid.&lt;/p&gt;.
     * 
     * @return the notAfter value.
     */
    public OffsetDateTime notAfter() {
        return this.notAfter;
    }

    /**
     * Set the notAfter property: &lt;p&gt;The time after which the certificate is not valid.&lt;/p&gt;.
     * 
     * @param notAfter the notAfter value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withNotAfter(OffsetDateTime notAfter) {
        this.notAfter = notAfter;
        return this;
    }

    /**
     * Get the notBefore property: &lt;p&gt;The time before which the certificate is not valid.&lt;/p&gt;.
     * 
     * @return the notBefore value.
     */
    public OffsetDateTime notBefore() {
        return this.notBefore;
    }

    /**
     * Set the notBefore property: &lt;p&gt;The time before which the certificate is not valid.&lt;/p&gt;.
     * 
     * @param notBefore the notBefore value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withNotBefore(OffsetDateTime notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Get the renewalEligibility property: &lt;p&gt;Specifies whether the certificate is eligible for renewal. At this
     * time, only exported private certificates can be renewed with the &lt;a&gt;RenewCertificate&lt;/a&gt;
     * command.&lt;/p&gt;.
     * 
     * @return the renewalEligibility value.
     */
    public RenewalEligibilityEnumValue renewalEligibility() {
        return this.renewalEligibility;
    }

    /**
     * Set the renewalEligibility property: &lt;p&gt;Specifies whether the certificate is eligible for renewal. At this
     * time, only exported private certificates can be renewed with the &lt;a&gt;RenewCertificate&lt;/a&gt;
     * command.&lt;/p&gt;.
     * 
     * @param renewalEligibility the renewalEligibility value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withRenewalEligibility(RenewalEligibilityEnumValue renewalEligibility) {
        this.renewalEligibility = renewalEligibility;
        return this;
    }

    /**
     * Get the revokedAt property: &lt;p&gt;The time at which the certificate was revoked. This value exists only when
     * the certificate status is &lt;code&gt;REVOKED&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the revokedAt value.
     */
    public OffsetDateTime revokedAt() {
        return this.revokedAt;
    }

    /**
     * Set the revokedAt property: &lt;p&gt;The time at which the certificate was revoked. This value exists only when
     * the certificate status is &lt;code&gt;REVOKED&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param revokedAt the revokedAt value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withRevokedAt(OffsetDateTime revokedAt) {
        this.revokedAt = revokedAt;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The status of the certificate.&lt;/p&gt; &lt;p&gt;A certificate enters status
     * PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting
     * topic &lt;a href='https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html'&gt;Certificate
     * request fails&lt;/a&gt;. ACM makes repeated attempts to validate a certificate for 72 hours and then times out.
     * If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html'&gt;DNS validation&lt;/a&gt; or &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html'&gt;Email validation&lt;/a&gt;, and
     * try again. If validation succeeds, the certificate enters status ISSUED. &lt;/p&gt;.
     * 
     * @return the status value.
     */
    public CertificateStatusEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The status of the certificate.&lt;/p&gt; &lt;p&gt;A certificate enters status
     * PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting
     * topic &lt;a href='https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html'&gt;Certificate
     * request fails&lt;/a&gt;. ACM makes repeated attempts to validate a certificate for 72 hours and then times out.
     * If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html'&gt;DNS validation&lt;/a&gt; or &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html'&gt;Email validation&lt;/a&gt;, and
     * try again. If validation succeeds, the certificate enters status ISSUED. &lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withStatus(CertificateStatusEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Get the subjectAlternativeNameSummaries property: &lt;p&gt;One or more domain names (subject alternative names)
     * included in the certificate. This list contains the domain names that are bound to the public key that is
     * contained in the certificate. The subject alternative names include the canonical domain name (CN) of the
     * certificate and additional domain names that can be used to connect to the website. &lt;/p&gt; &lt;p&gt;When
     * called by &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'&gt;ListCertificates&lt;/a&gt;,
     * this parameter will only return the first 100 subject alternative names included in the certificate. To display
     * the full list of subject alternative names, use &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'&gt;DescribeCertificate&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the subjectAlternativeNameSummaries value.
     */
    public List<String> subjectAlternativeNameSummaries() {
        return this.subjectAlternativeNameSummaries;
    }

    /**
     * Set the subjectAlternativeNameSummaries property: &lt;p&gt;One or more domain names (subject alternative names)
     * included in the certificate. This list contains the domain names that are bound to the public key that is
     * contained in the certificate. The subject alternative names include the canonical domain name (CN) of the
     * certificate and additional domain names that can be used to connect to the website. &lt;/p&gt; &lt;p&gt;When
     * called by &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html'&gt;ListCertificates&lt;/a&gt;,
     * this parameter will only return the first 100 subject alternative names included in the certificate. To display
     * the full list of subject alternative names, use &lt;a
     * href='https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html'&gt;DescribeCertificate&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param subjectAlternativeNameSummaries the subjectAlternativeNameSummaries value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties
        withSubjectAlternativeNameSummaries(List<String> subjectAlternativeNameSummaries) {
        this.subjectAlternativeNameSummaries = subjectAlternativeNameSummaries;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt;The source of the certificate. For certificates provided by ACM, this value is
     * &lt;code&gt;AMAZON_ISSUED&lt;/code&gt;. For certificates that you imported with
     * &lt;a&gt;ImportCertificate&lt;/a&gt;, this value is &lt;code&gt;IMPORTED&lt;/code&gt;. ACM does not provide &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html'&gt;managed renewal&lt;/a&gt; for
     * imported certificates. For more information about the differences between certificates that you import and those
     * that ACM provides, see &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html'&gt;Importing
     * Certificates&lt;/a&gt; in the &lt;i&gt;Certificate Manager User Guide&lt;/i&gt;. &lt;/p&gt;.
     * 
     * @return the type value.
     */
    public CertificateTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt;The source of the certificate. For certificates provided by ACM, this value is
     * &lt;code&gt;AMAZON_ISSUED&lt;/code&gt;. For certificates that you imported with
     * &lt;a&gt;ImportCertificate&lt;/a&gt;, this value is &lt;code&gt;IMPORTED&lt;/code&gt;. ACM does not provide &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html'&gt;managed renewal&lt;/a&gt; for
     * imported certificates. For more information about the differences between certificates that you import and those
     * that ACM provides, see &lt;a
     * href='https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html'&gt;Importing
     * Certificates&lt;/a&gt; in the &lt;i&gt;Certificate Manager User Guide&lt;/i&gt;. &lt;/p&gt;.
     * 
     * @param type the type value to set.
     * @return the AwsAcmCertificateSummaryProperties object itself.
     */
    public AwsAcmCertificateSummaryProperties withType(CertificateTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyAlgorithm() != null) {
            keyAlgorithm().validate();
        }
        if (renewalEligibility() != null) {
            renewalEligibility().validate();
        }
        if (status() != null) {
            status().validate();
        }
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificateArn", this.certificateArn);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeBooleanField("exported", this.exported);
        jsonWriter.writeArrayField("extendedKeyUsages", this.extendedKeyUsages,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeBooleanField("hasAdditionalSubjectAlternativeNames", this.hasAdditionalSubjectAlternativeNames);
        jsonWriter.writeStringField("importedAt",
            this.importedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.importedAt));
        jsonWriter.writeBooleanField("inUse", this.inUse);
        jsonWriter.writeStringField("issuedAt",
            this.issuedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.issuedAt));
        jsonWriter.writeJsonField("keyAlgorithm", this.keyAlgorithm);
        jsonWriter.writeArrayField("keyUsages", this.keyUsages,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("notAfter",
            this.notAfter == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.notAfter));
        jsonWriter.writeStringField("notBefore",
            this.notBefore == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.notBefore));
        jsonWriter.writeJsonField("renewalEligibility", this.renewalEligibility);
        jsonWriter.writeStringField("revokedAt",
            this.revokedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.revokedAt));
        jsonWriter.writeJsonField("status", this.status);
        jsonWriter.writeArrayField("subjectAlternativeNameSummaries", this.subjectAlternativeNameSummaries,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsAcmCertificateSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsAcmCertificateSummaryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsAcmCertificateSummaryProperties.
     */
    public static AwsAcmCertificateSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsAcmCertificateSummaryProperties deserializedAwsAcmCertificateSummaryProperties
                = new AwsAcmCertificateSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificateArn".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.certificateArn = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("domainName".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.domainName = reader.getString();
                } else if ("exported".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.exported
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("extendedKeyUsages".equals(fieldName)) {
                    List<ExtendedKeyUsageName> extendedKeyUsages
                        = reader.readArray(reader1 -> ExtendedKeyUsageName.fromString(reader1.getString()));
                    deserializedAwsAcmCertificateSummaryProperties.extendedKeyUsages = extendedKeyUsages;
                } else if ("hasAdditionalSubjectAlternativeNames".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.hasAdditionalSubjectAlternativeNames
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("importedAt".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.importedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("inUse".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.inUse = reader.getNullable(JsonReader::getBoolean);
                } else if ("issuedAt".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.issuedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("keyAlgorithm".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.keyAlgorithm
                        = KeyAlgorithmEnumValue.fromJson(reader);
                } else if ("keyUsages".equals(fieldName)) {
                    List<KeyUsageName> keyUsages
                        = reader.readArray(reader1 -> KeyUsageName.fromString(reader1.getString()));
                    deserializedAwsAcmCertificateSummaryProperties.keyUsages = keyUsages;
                } else if ("notAfter".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.notAfter = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("notBefore".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.notBefore = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("renewalEligibility".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.renewalEligibility
                        = RenewalEligibilityEnumValue.fromJson(reader);
                } else if ("revokedAt".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.revokedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.status = CertificateStatusEnumValue.fromJson(reader);
                } else if ("subjectAlternativeNameSummaries".equals(fieldName)) {
                    List<String> subjectAlternativeNameSummaries = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsAcmCertificateSummaryProperties.subjectAlternativeNameSummaries
                        = subjectAlternativeNameSummaries;
                } else if ("type".equals(fieldName)) {
                    deserializedAwsAcmCertificateSummaryProperties.type = CertificateTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsAcmCertificateSummaryProperties;
        });
    }
}
