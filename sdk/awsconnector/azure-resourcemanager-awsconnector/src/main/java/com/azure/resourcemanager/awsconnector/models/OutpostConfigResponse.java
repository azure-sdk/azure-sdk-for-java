// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of OutpostConfigResponse.
 */
@Fluent
public final class OutpostConfigResponse implements JsonSerializable<OutpostConfigResponse> {
    /*
     * <p>The Amazon EC2 instance type used for the control plane. The instance type is the same for all control plane
     * instances.</p>
     */
    private String controlPlaneInstanceType;

    /*
     * <p>An object representing the placement configuration for all the control plane instances of your local Amazon
     * EKS cluster on an Amazon Web Services Outpost. For more information, see <a
     * href='https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html'>Capacity
     * considerations</a> in the <i>Amazon EKS User Guide</i>.</p>
     */
    private ControlPlanePlacementResponse controlPlanePlacement;

    /*
     * <p>The ARN of the Outpost that you specified for use with your local Amazon EKS cluster on Outposts.</p>
     */
    private List<String> outpostArns;

    /**
     * Creates an instance of OutpostConfigResponse class.
     */
    public OutpostConfigResponse() {
    }

    /**
     * Get the controlPlaneInstanceType property: &lt;p&gt;The Amazon EC2 instance type used for the control plane. The
     * instance type is the same for all control plane instances.&lt;/p&gt;.
     * 
     * @return the controlPlaneInstanceType value.
     */
    public String controlPlaneInstanceType() {
        return this.controlPlaneInstanceType;
    }

    /**
     * Set the controlPlaneInstanceType property: &lt;p&gt;The Amazon EC2 instance type used for the control plane. The
     * instance type is the same for all control plane instances.&lt;/p&gt;.
     * 
     * @param controlPlaneInstanceType the controlPlaneInstanceType value to set.
     * @return the OutpostConfigResponse object itself.
     */
    public OutpostConfigResponse withControlPlaneInstanceType(String controlPlaneInstanceType) {
        this.controlPlaneInstanceType = controlPlaneInstanceType;
        return this;
    }

    /**
     * Get the controlPlanePlacement property: &lt;p&gt;An object representing the placement configuration for all the
     * control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information,
     * see &lt;a
     * href='https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html'&gt;Capacity
     * considerations&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the controlPlanePlacement value.
     */
    public ControlPlanePlacementResponse controlPlanePlacement() {
        return this.controlPlanePlacement;
    }

    /**
     * Set the controlPlanePlacement property: &lt;p&gt;An object representing the placement configuration for all the
     * control plane instances of your local Amazon EKS cluster on an Amazon Web Services Outpost. For more information,
     * see &lt;a
     * href='https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-capacity-considerations.html'&gt;Capacity
     * considerations&lt;/a&gt; in the &lt;i&gt;Amazon EKS User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param controlPlanePlacement the controlPlanePlacement value to set.
     * @return the OutpostConfigResponse object itself.
     */
    public OutpostConfigResponse withControlPlanePlacement(ControlPlanePlacementResponse controlPlanePlacement) {
        this.controlPlanePlacement = controlPlanePlacement;
        return this;
    }

    /**
     * Get the outpostArns property: &lt;p&gt;The ARN of the Outpost that you specified for use with your local Amazon
     * EKS cluster on Outposts.&lt;/p&gt;.
     * 
     * @return the outpostArns value.
     */
    public List<String> outpostArns() {
        return this.outpostArns;
    }

    /**
     * Set the outpostArns property: &lt;p&gt;The ARN of the Outpost that you specified for use with your local Amazon
     * EKS cluster on Outposts.&lt;/p&gt;.
     * 
     * @param outpostArns the outpostArns value to set.
     * @return the OutpostConfigResponse object itself.
     */
    public OutpostConfigResponse withOutpostArns(List<String> outpostArns) {
        this.outpostArns = outpostArns;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controlPlanePlacement() != null) {
            controlPlanePlacement().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("controlPlaneInstanceType", this.controlPlaneInstanceType);
        jsonWriter.writeJsonField("controlPlanePlacement", this.controlPlanePlacement);
        jsonWriter.writeArrayField("outpostArns", this.outpostArns, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OutpostConfigResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OutpostConfigResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OutpostConfigResponse.
     */
    public static OutpostConfigResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OutpostConfigResponse deserializedOutpostConfigResponse = new OutpostConfigResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controlPlaneInstanceType".equals(fieldName)) {
                    deserializedOutpostConfigResponse.controlPlaneInstanceType = reader.getString();
                } else if ("controlPlanePlacement".equals(fieldName)) {
                    deserializedOutpostConfigResponse.controlPlanePlacement
                        = ControlPlanePlacementResponse.fromJson(reader);
                } else if ("outpostArns".equals(fieldName)) {
                    List<String> outpostArns = reader.readArray(reader1 -> reader1.getString());
                    deserializedOutpostConfigResponse.outpostArns = outpostArns;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOutpostConfigResponse;
        });
    }
}
