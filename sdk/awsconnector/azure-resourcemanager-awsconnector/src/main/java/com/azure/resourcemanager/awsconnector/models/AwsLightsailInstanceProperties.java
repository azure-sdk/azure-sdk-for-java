// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsLightsailInstance.
 */
@Fluent
public final class AwsLightsailInstanceProperties implements JsonSerializable<AwsLightsailInstanceProperties> {
    /*
     * An array of objects representing the add-ons to enable for the new instance.
     */
    private List<AddOn> addOns;

    /*
     * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be
     * sure to add the include Availability Zones parameter to your request.
     */
    private String availabilityZone;

    /*
     * The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0 ). Use the get blueprints
     * operation to return a list of available images (or blueprints ).
     */
    private String blueprintId;

    /*
     * The bundle of specification information for your virtual private server (or instance ), including the pricing
     * plan (e.g., micro_1_0 ).
     */
    private String bundleId;

    /*
     * Hardware of the Instance.
     */
    private Hardware hardware;

    /*
     * Property instanceArn
     */
    private String instanceArn;

    /*
     * The names to use for your new Lightsail instance.
     */
    private String instanceName;

    /*
     * Is the IP Address of the Instance is the static IP
     */
    private Boolean isStaticIp;

    /*
     * The name of your key pair.
     */
    private String keyPairName;

    /*
     * Location of a resource.
     */
    private Location location;

    /*
     * Networking of the Instance.
     */
    private Networking networking;

    /*
     * Private IP Address of the Instance
     */
    private String privateIpAddress;

    /*
     * Public IP Address of the Instance
     */
    private String publicIpAddress;

    /*
     * Resource type of Lightsail instance.
     */
    private String resourceType;

    /*
     * SSH Key Name of the Lightsail instance.
     */
    private String sshKeyName;

    /*
     * Current State of the Instance.
     */
    private State state;

    /*
     * Support code to help identify any issues
     */
    private String supportCode;

    /*
     * An array of key-value pairs to apply to this resource.
     */
    private List<TagAutoGenerated38> tags;

    /*
     * A launch script you can create that configures a server with additional user data. For example, you might want to
     * run apt-get -y update.
     */
    private String userData;

    /*
     * Username of the Lightsail instance.
     */
    private String username;

    /**
     * Creates an instance of AwsLightsailInstanceProperties class.
     */
    public AwsLightsailInstanceProperties() {
    }

    /**
     * Get the addOns property: An array of objects representing the add-ons to enable for the new instance.
     * 
     * @return the addOns value.
     */
    public List<AddOn> addOns() {
        return this.addOns;
    }

    /**
     * Set the addOns property: An array of objects representing the add-ons to enable for the new instance.
     * 
     * @param addOns the addOns value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withAddOns(List<AddOn> addOns) {
        this.addOns = addOns;
        return this;
    }

    /**
     * Get the availabilityZone property: The Availability Zone in which to create your instance. Use the following
     * format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The Availability Zone in which to create your instance. Use the following
     * format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the blueprintId property: The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0
     * ). Use the get blueprints operation to return a list of available images (or blueprints ).
     * 
     * @return the blueprintId value.
     */
    public String blueprintId() {
        return this.blueprintId;
    }

    /**
     * Set the blueprintId property: The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0
     * ). Use the get blueprints operation to return a list of available images (or blueprints ).
     * 
     * @param blueprintId the blueprintId value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withBlueprintId(String blueprintId) {
        this.blueprintId = blueprintId;
        return this;
    }

    /**
     * Get the bundleId property: The bundle of specification information for your virtual private server (or instance
     * ), including the pricing plan (e.g., micro_1_0 ).
     * 
     * @return the bundleId value.
     */
    public String bundleId() {
        return this.bundleId;
    }

    /**
     * Set the bundleId property: The bundle of specification information for your virtual private server (or instance
     * ), including the pricing plan (e.g., micro_1_0 ).
     * 
     * @param bundleId the bundleId value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withBundleId(String bundleId) {
        this.bundleId = bundleId;
        return this;
    }

    /**
     * Get the hardware property: Hardware of the Instance.
     * 
     * @return the hardware value.
     */
    public Hardware hardware() {
        return this.hardware;
    }

    /**
     * Set the hardware property: Hardware of the Instance.
     * 
     * @param hardware the hardware value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withHardware(Hardware hardware) {
        this.hardware = hardware;
        return this;
    }

    /**
     * Get the instanceArn property: Property instanceArn.
     * 
     * @return the instanceArn value.
     */
    public String instanceArn() {
        return this.instanceArn;
    }

    /**
     * Set the instanceArn property: Property instanceArn.
     * 
     * @param instanceArn the instanceArn value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withInstanceArn(String instanceArn) {
        this.instanceArn = instanceArn;
        return this;
    }

    /**
     * Get the instanceName property: The names to use for your new Lightsail instance.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: The names to use for your new Lightsail instance.
     * 
     * @param instanceName the instanceName value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the isStaticIp property: Is the IP Address of the Instance is the static IP.
     * 
     * @return the isStaticIp value.
     */
    public Boolean isStaticIp() {
        return this.isStaticIp;
    }

    /**
     * Set the isStaticIp property: Is the IP Address of the Instance is the static IP.
     * 
     * @param isStaticIp the isStaticIp value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withIsStaticIp(Boolean isStaticIp) {
        this.isStaticIp = isStaticIp;
        return this;
    }

    /**
     * Get the keyPairName property: The name of your key pair.
     * 
     * @return the keyPairName value.
     */
    public String keyPairName() {
        return this.keyPairName;
    }

    /**
     * Set the keyPairName property: The name of your key pair.
     * 
     * @param keyPairName the keyPairName value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withKeyPairName(String keyPairName) {
        this.keyPairName = keyPairName;
        return this;
    }

    /**
     * Get the location property: Location of a resource.
     * 
     * @return the location value.
     */
    public Location location() {
        return this.location;
    }

    /**
     * Set the location property: Location of a resource.
     * 
     * @param location the location value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withLocation(Location location) {
        this.location = location;
        return this;
    }

    /**
     * Get the networking property: Networking of the Instance.
     * 
     * @return the networking value.
     */
    public Networking networking() {
        return this.networking;
    }

    /**
     * Set the networking property: Networking of the Instance.
     * 
     * @param networking the networking value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withNetworking(Networking networking) {
        this.networking = networking;
        return this;
    }

    /**
     * Get the privateIpAddress property: Private IP Address of the Instance.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: Private IP Address of the Instance.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the publicIpAddress property: Public IP Address of the Instance.
     * 
     * @return the publicIpAddress value.
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * Set the publicIpAddress property: Public IP Address of the Instance.
     * 
     * @param publicIpAddress the publicIpAddress value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withPublicIpAddress(String publicIpAddress) {
        this.publicIpAddress = publicIpAddress;
        return this;
    }

    /**
     * Get the resourceType property: Resource type of Lightsail instance.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: Resource type of Lightsail instance.
     * 
     * @param resourceType the resourceType value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the sshKeyName property: SSH Key Name of the Lightsail instance.
     * 
     * @return the sshKeyName value.
     */
    public String sshKeyName() {
        return this.sshKeyName;
    }

    /**
     * Set the sshKeyName property: SSH Key Name of the Lightsail instance.
     * 
     * @param sshKeyName the sshKeyName value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withSshKeyName(String sshKeyName) {
        this.sshKeyName = sshKeyName;
        return this;
    }

    /**
     * Get the state property: Current State of the Instance.
     * 
     * @return the state value.
     */
    public State state() {
        return this.state;
    }

    /**
     * Set the state property: Current State of the Instance.
     * 
     * @param state the state value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withState(State state) {
        this.state = state;
        return this;
    }

    /**
     * Get the supportCode property: Support code to help identify any issues.
     * 
     * @return the supportCode value.
     */
    public String supportCode() {
        return this.supportCode;
    }

    /**
     * Set the supportCode property: Support code to help identify any issues.
     * 
     * @param supportCode the supportCode value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withSupportCode(String supportCode) {
        this.supportCode = supportCode;
        return this;
    }

    /**
     * Get the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated38> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @param tags the tags value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withTags(List<TagAutoGenerated38> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the userData property: A launch script you can create that configures a server with additional user data. For
     * example, you might want to run apt-get -y update.
     * 
     * @return the userData value.
     */
    public String userData() {
        return this.userData;
    }

    /**
     * Set the userData property: A launch script you can create that configures a server with additional user data. For
     * example, you might want to run apt-get -y update.
     * 
     * @param userData the userData value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withUserData(String userData) {
        this.userData = userData;
        return this;
    }

    /**
     * Get the username property: Username of the Lightsail instance.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username of the Lightsail instance.
     * 
     * @param username the username value to set.
     * @return the AwsLightsailInstanceProperties object itself.
     */
    public AwsLightsailInstanceProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (addOns() != null) {
            addOns().forEach(e -> e.validate());
        }
        if (hardware() != null) {
            hardware().validate();
        }
        if (location() != null) {
            location().validate();
        }
        if (networking() != null) {
            networking().validate();
        }
        if (state() != null) {
            state().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("addOns", this.addOns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("blueprintId", this.blueprintId);
        jsonWriter.writeStringField("bundleId", this.bundleId);
        jsonWriter.writeJsonField("hardware", this.hardware);
        jsonWriter.writeStringField("instanceArn", this.instanceArn);
        jsonWriter.writeStringField("instanceName", this.instanceName);
        jsonWriter.writeBooleanField("isStaticIp", this.isStaticIp);
        jsonWriter.writeStringField("keyPairName", this.keyPairName);
        jsonWriter.writeJsonField("location", this.location);
        jsonWriter.writeJsonField("networking", this.networking);
        jsonWriter.writeStringField("privateIpAddress", this.privateIpAddress);
        jsonWriter.writeStringField("publicIpAddress", this.publicIpAddress);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("sshKeyName", this.sshKeyName);
        jsonWriter.writeJsonField("state", this.state);
        jsonWriter.writeStringField("supportCode", this.supportCode);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("userData", this.userData);
        jsonWriter.writeStringField("userName", this.username);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsLightsailInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsLightsailInstanceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsLightsailInstanceProperties.
     */
    public static AwsLightsailInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsLightsailInstanceProperties deserializedAwsLightsailInstanceProperties
                = new AwsLightsailInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addOns".equals(fieldName)) {
                    List<AddOn> addOns = reader.readArray(reader1 -> AddOn.fromJson(reader1));
                    deserializedAwsLightsailInstanceProperties.addOns = addOns;
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.availabilityZone = reader.getString();
                } else if ("blueprintId".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.blueprintId = reader.getString();
                } else if ("bundleId".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.bundleId = reader.getString();
                } else if ("hardware".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.hardware = Hardware.fromJson(reader);
                } else if ("instanceArn".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.instanceArn = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.instanceName = reader.getString();
                } else if ("isStaticIp".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.isStaticIp = reader.getNullable(JsonReader::getBoolean);
                } else if ("keyPairName".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.keyPairName = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.location = Location.fromJson(reader);
                } else if ("networking".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.networking = Networking.fromJson(reader);
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.privateIpAddress = reader.getString();
                } else if ("publicIpAddress".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.publicIpAddress = reader.getString();
                } else if ("resourceType".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.resourceType = reader.getString();
                } else if ("sshKeyName".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.sshKeyName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.state = State.fromJson(reader);
                } else if ("supportCode".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.supportCode = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated38> tags = reader.readArray(reader1 -> TagAutoGenerated38.fromJson(reader1));
                    deserializedAwsLightsailInstanceProperties.tags = tags;
                } else if ("userData".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.userData = reader.getString();
                } else if ("userName".equals(fieldName)) {
                    deserializedAwsLightsailInstanceProperties.username = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsLightsailInstanceProperties;
        });
    }
}
