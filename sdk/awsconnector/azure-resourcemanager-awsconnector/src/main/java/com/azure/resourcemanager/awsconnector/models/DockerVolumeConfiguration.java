// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of DockerVolumeConfiguration.
 */
@Fluent
public final class DockerVolumeConfiguration implements JsonSerializable<DockerVolumeConfiguration> {
    /*
     * If this value is ``true``, the Docker volume is created if it doesn't already exist. This field is only used if
     * the ``scope`` is ``shared``.
     */
    private Boolean autoprovision;

    /*
     * The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is
     * used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to
     * retrieve the driver name from your container instance. If the driver was installed using another method, use
     * Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin
     * discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This
     * parameter maps to ``Driver`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``xxdriver`` option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     */
    private String driver;

    /*
     * A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt``
     * option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     */
    private Object driverOpts;

    /*
     * Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``xxlabel`` option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     */
    private Object labels;

    /*
     * The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are
     * automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped
     * as ``shared`` persist after the task stops.
     */
    private String scope;

    /**
     * Creates an instance of DockerVolumeConfiguration class.
     */
    public DockerVolumeConfiguration() {
    }

    /**
     * Get the autoprovision property: If this value is ``true``, the Docker volume is created if it doesn't already
     * exist. This field is only used if the ``scope`` is ``shared``.
     * 
     * @return the autoprovision value.
     */
    public Boolean autoprovision() {
        return this.autoprovision;
    }

    /**
     * Set the autoprovision property: If this value is ``true``, the Docker volume is created if it doesn't already
     * exist. This field is only used if the ``scope`` is ``shared``.
     * 
     * @param autoprovision the autoprovision value to set.
     * @return the DockerVolumeConfiguration object itself.
     */
    public DockerVolumeConfiguration withAutoprovision(Boolean autoprovision) {
        this.autoprovision = autoprovision;
        return this;
    }

    /**
     * Get the driver property: The Docker volume driver to use. The driver value must match the driver name provided by
     * Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use
     * ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using
     * another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin
     * discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This
     * parameter maps to ``Driver`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``xxdriver`` option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     * 
     * @return the driver value.
     */
    public String driver() {
        return this.driver;
    }

    /**
     * Set the driver property: The Docker volume driver to use. The driver value must match the driver name provided by
     * Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use
     * ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using
     * another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin
     * discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This
     * parameter maps to ``Driver`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``xxdriver`` option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     * 
     * @param driver the driver value to set.
     * @return the DockerVolumeConfiguration object itself.
     */
    public DockerVolumeConfiguration withDriver(String driver) {
        this.driver = driver;
        return this;
    }

    /**
     * Get the driverOpts property: A map of Docker driver-specific options passed through. This parameter maps to
     * ``DriverOpts`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt``
     * option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     * 
     * @return the driverOpts value.
     */
    public Object driverOpts() {
        return this.driverOpts;
    }

    /**
     * Set the driverOpts property: A map of Docker driver-specific options passed through. This parameter maps to
     * ``DriverOpts`` in the [Create a
     * volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of
     * the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt``
     * option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     * 
     * @param driverOpts the driverOpts value to set.
     * @return the DockerVolumeConfiguration object itself.
     */
    public DockerVolumeConfiguration withDriverOpts(Object driverOpts) {
        this.driverOpts = driverOpts;
        return this;
    }

    /**
     * Get the labels property: Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the
     * [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``xxlabel`` option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     * 
     * @return the labels value.
     */
    public Object labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the
     * [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``xxlabel`` option to [docker volume
     * create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
     * 
     * @param labels the labels value to set.
     * @return the DockerVolumeConfiguration object itself.
     */
    public DockerVolumeConfiguration withLabels(Object labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the scope property: The scope for the Docker volume that determines its lifecycle. Docker volumes that are
     * scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker
     * volumes that are scoped as ``shared`` persist after the task stops.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope for the Docker volume that determines its lifecycle. Docker volumes that are
     * scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker
     * volumes that are scoped as ``shared`` persist after the task stops.
     * 
     * @param scope the scope value to set.
     * @return the DockerVolumeConfiguration object itself.
     */
    public DockerVolumeConfiguration withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("autoprovision", this.autoprovision);
        jsonWriter.writeStringField("driver", this.driver);
        jsonWriter.writeUntypedField("driverOpts", this.driverOpts);
        jsonWriter.writeUntypedField("labels", this.labels);
        jsonWriter.writeStringField("scope", this.scope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DockerVolumeConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DockerVolumeConfiguration if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DockerVolumeConfiguration.
     */
    public static DockerVolumeConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DockerVolumeConfiguration deserializedDockerVolumeConfiguration = new DockerVolumeConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoprovision".equals(fieldName)) {
                    deserializedDockerVolumeConfiguration.autoprovision = reader.getNullable(JsonReader::getBoolean);
                } else if ("driver".equals(fieldName)) {
                    deserializedDockerVolumeConfiguration.driver = reader.getString();
                } else if ("driverOpts".equals(fieldName)) {
                    deserializedDockerVolumeConfiguration.driverOpts = reader.readUntyped();
                } else if ("labels".equals(fieldName)) {
                    deserializedDockerVolumeConfiguration.labels = reader.readUntyped();
                } else if ("scope".equals(fieldName)) {
                    deserializedDockerVolumeConfiguration.scope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDockerVolumeConfiguration;
        });
    }
}
