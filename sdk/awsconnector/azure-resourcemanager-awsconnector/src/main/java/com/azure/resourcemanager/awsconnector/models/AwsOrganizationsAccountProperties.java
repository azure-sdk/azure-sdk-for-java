// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsOrganizationsAccount.
 */
@Fluent
public final class AwsOrganizationsAccountProperties implements JsonSerializable<AwsOrganizationsAccountProperties> {
    /*
     * If the account was created successfully, the unique identifier (ID) of the new account.
     */
    private String accountId;

    /*
     * The friendly name of the member account.
     */
    private String accountName;

    /*
     * The Amazon Resource Name (ARN) of the account.
     */
    private String arn;

    /*
     * The email address of the owner to assign to the new member account.
     */
    private String email;

    /*
     * The method by which the account joined the organization.
     */
    private JoinedMethod joinedMethod;

    /*
     * The date the account became a part of the organization.
     */
    private String joinedTimestamp;

    /*
     * List of parent nodes for the member account. Currently only one parent at a time is supported. Default is root.
     */
    private List<String> parentIds;

    /*
     * The name of an IAM role that AWS Organizations automatically preconfigures in the new member account. Default
     * name is OrganizationAccountAccessRole if not specified.
     */
    private String roleName;

    /*
     * The status of the account in the organization.
     */
    private Status status;

    /*
     * A list of tags that you want to attach to the newly created account. For each tag in the list, you must specify
     * both a tag key and a value.
     */
    private List<TagAutoGenerated44> tags;

    /**
     * Creates an instance of AwsOrganizationsAccountProperties class.
     */
    public AwsOrganizationsAccountProperties() {
    }

    /**
     * Get the accountId property: If the account was created successfully, the unique identifier (ID) of the new
     * account.
     * 
     * @return the accountId value.
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Set the accountId property: If the account was created successfully, the unique identifier (ID) of the new
     * account.
     * 
     * @param accountId the accountId value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * Get the accountName property: The friendly name of the member account.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: The friendly name of the member account.
     * 
     * @param accountName the accountName value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Get the arn property: The Amazon Resource Name (ARN) of the account.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: The Amazon Resource Name (ARN) of the account.
     * 
     * @param arn the arn value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the email property: The email address of the owner to assign to the new member account.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: The email address of the owner to assign to the new member account.
     * 
     * @param email the email value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the joinedMethod property: The method by which the account joined the organization.
     * 
     * @return the joinedMethod value.
     */
    public JoinedMethod joinedMethod() {
        return this.joinedMethod;
    }

    /**
     * Set the joinedMethod property: The method by which the account joined the organization.
     * 
     * @param joinedMethod the joinedMethod value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withJoinedMethod(JoinedMethod joinedMethod) {
        this.joinedMethod = joinedMethod;
        return this;
    }

    /**
     * Get the joinedTimestamp property: The date the account became a part of the organization.
     * 
     * @return the joinedTimestamp value.
     */
    public String joinedTimestamp() {
        return this.joinedTimestamp;
    }

    /**
     * Set the joinedTimestamp property: The date the account became a part of the organization.
     * 
     * @param joinedTimestamp the joinedTimestamp value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withJoinedTimestamp(String joinedTimestamp) {
        this.joinedTimestamp = joinedTimestamp;
        return this;
    }

    /**
     * Get the parentIds property: List of parent nodes for the member account. Currently only one parent at a time is
     * supported. Default is root.
     * 
     * @return the parentIds value.
     */
    public List<String> parentIds() {
        return this.parentIds;
    }

    /**
     * Set the parentIds property: List of parent nodes for the member account. Currently only one parent at a time is
     * supported. Default is root.
     * 
     * @param parentIds the parentIds value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withParentIds(List<String> parentIds) {
        this.parentIds = parentIds;
        return this;
    }

    /**
     * Get the roleName property: The name of an IAM role that AWS Organizations automatically preconfigures in the new
     * member account. Default name is OrganizationAccountAccessRole if not specified.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: The name of an IAM role that AWS Organizations automatically preconfigures in the new
     * member account. Default name is OrganizationAccountAccessRole if not specified.
     * 
     * @param roleName the roleName value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Get the status property: The status of the account in the organization.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the account in the organization.
     * 
     * @param status the status value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tags property: A list of tags that you want to attach to the newly created account. For each tag in the
     * list, you must specify both a tag key and a value.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated44> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A list of tags that you want to attach to the newly created account. For each tag in the
     * list, you must specify both a tag key and a value.
     * 
     * @param tags the tags value to set.
     * @return the AwsOrganizationsAccountProperties object itself.
     */
    public AwsOrganizationsAccountProperties withTags(List<TagAutoGenerated44> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accountId", this.accountId);
        jsonWriter.writeStringField("accountName", this.accountName);
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("joinedMethod", this.joinedMethod == null ? null : this.joinedMethod.toString());
        jsonWriter.writeStringField("joinedTimestamp", this.joinedTimestamp);
        jsonWriter.writeArrayField("parentIds", this.parentIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("roleName", this.roleName);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsOrganizationsAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsOrganizationsAccountProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsOrganizationsAccountProperties.
     */
    public static AwsOrganizationsAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsOrganizationsAccountProperties deserializedAwsOrganizationsAccountProperties
                = new AwsOrganizationsAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accountId".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.accountId = reader.getString();
                } else if ("accountName".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.accountName = reader.getString();
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.arn = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.email = reader.getString();
                } else if ("joinedMethod".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.joinedMethod
                        = JoinedMethod.fromString(reader.getString());
                } else if ("joinedTimestamp".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.joinedTimestamp = reader.getString();
                } else if ("parentIds".equals(fieldName)) {
                    List<String> parentIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsOrganizationsAccountProperties.parentIds = parentIds;
                } else if ("roleName".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.roleName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAwsOrganizationsAccountProperties.status = Status.fromString(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated44> tags = reader.readArray(reader1 -> TagAutoGenerated44.fromJson(reader1));
                    deserializedAwsOrganizationsAccountProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsOrganizationsAccountProperties;
        });
    }
}
