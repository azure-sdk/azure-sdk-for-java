// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.awsconnector.fluent.IamAccessKeyLastUsedsClient;
import com.azure.resourcemanager.awsconnector.fluent.models.IamAccessKeyLastUsedInner;
import com.azure.resourcemanager.awsconnector.models.IamAccessKeyLastUsed;
import com.azure.resourcemanager.awsconnector.models.IamAccessKeyLastUseds;

public final class IamAccessKeyLastUsedsImpl implements IamAccessKeyLastUseds {
    private static final ClientLogger LOGGER = new ClientLogger(IamAccessKeyLastUsedsImpl.class);

    private final IamAccessKeyLastUsedsClient innerClient;

    private final com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager;

    public IamAccessKeyLastUsedsImpl(IamAccessKeyLastUsedsClient innerClient,
        com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<IamAccessKeyLastUsed> list() {
        PagedIterable<IamAccessKeyLastUsedInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IamAccessKeyLastUsedImpl(inner1, this.manager()));
    }

    public PagedIterable<IamAccessKeyLastUsed> list(Context context) {
        PagedIterable<IamAccessKeyLastUsedInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IamAccessKeyLastUsedImpl(inner1, this.manager()));
    }

    public PagedIterable<IamAccessKeyLastUsed> listByResourceGroup(String resourceGroupName) {
        PagedIterable<IamAccessKeyLastUsedInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IamAccessKeyLastUsedImpl(inner1, this.manager()));
    }

    public PagedIterable<IamAccessKeyLastUsed> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<IamAccessKeyLastUsedInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new IamAccessKeyLastUsedImpl(inner1, this.manager()));
    }

    public Response<IamAccessKeyLastUsed> getByResourceGroupWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<IamAccessKeyLastUsedInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new IamAccessKeyLastUsedImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public IamAccessKeyLastUsed getByResourceGroup(String resourceGroupName, String name) {
        IamAccessKeyLastUsedInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new IamAccessKeyLastUsedImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public void delete(String resourceGroupName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, name, context);
    }

    public IamAccessKeyLastUsed getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "iamAccessKeyLastUseds");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iamAccessKeyLastUseds'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<IamAccessKeyLastUsed> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "iamAccessKeyLastUseds");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iamAccessKeyLastUseds'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "iamAccessKeyLastUseds");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iamAccessKeyLastUseds'.", id)));
        }
        this.delete(resourceGroupName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "iamAccessKeyLastUseds");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'iamAccessKeyLastUseds'.", id)));
        }
        this.delete(resourceGroupName, name, context);
    }

    private IamAccessKeyLastUsedsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.awsconnector.AwsconnectorManager manager() {
        return this.serviceManager;
    }

    public IamAccessKeyLastUsedImpl define(String name) {
        return new IamAccessKeyLastUsedImpl(name, this.manager());
    }
}
