// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InstanceState.
 */
@Fluent
public final class InstanceState implements JsonSerializable<InstanceState> {
    /*
     * <p>The state of the instance as a 16-bit unsigned integer. </p> <p>The high byte is all of the bits between 2^8
     * and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal
     * purposes and should be ignored.</p> <p>The low byte is all of the bits between 2^0 and (2^8)-1, which equals
     * decimal values between 0 and 255. </p> <p>The valid values for instance-state-code will all be in the range of
     * the low byte and they are:</p> <ul> <li> <p> <code>0</code> : <code>pending</code> </p> </li> <li> <p>
     * <code>16</code> : <code>running</code> </p> </li> <li> <p> <code>32</code> : <code>shutting-down</code> </p>
     * </li> <li> <p> <code>48</code> : <code>terminated</code> </p> </li> <li> <p> <code>64</code> :
     * <code>stopping</code> </p> </li> <li> <p> <code>80</code> : <code>stopped</code> </p> </li> </ul> <p>You can
     * ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.</p>
     */
    private Integer code;

    /*
     * <p>The current state of the instance.</p>
     */
    private InstanceStateNameEnumValue name;

    /**
     * Creates an instance of InstanceState class.
     */
    public InstanceState() {
    }

    /**
     * Get the code property: &lt;p&gt;The state of the instance as a 16-bit unsigned integer. &lt;/p&gt; &lt;p&gt;The
     * high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These
     * numerical values are used for internal purposes and should be ignored.&lt;/p&gt; &lt;p&gt;The low byte is all of
     * the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255. &lt;/p&gt; &lt;p&gt;The valid
     * values for instance-state-code will all be in the range of the low byte and they are:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;0&lt;/code&gt; : &lt;code&gt;pending&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;16&lt;/code&gt; : &lt;code&gt;running&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;32&lt;/code&gt; : &lt;code&gt;shutting-down&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;48&lt;/code&gt; : &lt;code&gt;terminated&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;64&lt;/code&gt; : &lt;code&gt;stopping&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;80&lt;/code&gt; : &lt;code&gt;stopped&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt; &lt;p&gt;You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in
     * decimal.&lt;/p&gt;.
     * 
     * @return the code value.
     */
    public Integer code() {
        return this.code;
    }

    /**
     * Set the code property: &lt;p&gt;The state of the instance as a 16-bit unsigned integer. &lt;/p&gt; &lt;p&gt;The
     * high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These
     * numerical values are used for internal purposes and should be ignored.&lt;/p&gt; &lt;p&gt;The low byte is all of
     * the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255. &lt;/p&gt; &lt;p&gt;The valid
     * values for instance-state-code will all be in the range of the low byte and they are:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;0&lt;/code&gt; : &lt;code&gt;pending&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;16&lt;/code&gt; : &lt;code&gt;running&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;32&lt;/code&gt; : &lt;code&gt;shutting-down&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;48&lt;/code&gt; : &lt;code&gt;terminated&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;64&lt;/code&gt; : &lt;code&gt;stopping&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;80&lt;/code&gt; : &lt;code&gt;stopped&lt;/code&gt; &lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt; &lt;p&gt;You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in
     * decimal.&lt;/p&gt;.
     * 
     * @param code the code value to set.
     * @return the InstanceState object itself.
     */
    public InstanceState withCode(Integer code) {
        this.code = code;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The current state of the instance.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public InstanceStateNameEnumValue name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The current state of the instance.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the InstanceState object itself.
     */
    public InstanceState withName(InstanceStateNameEnumValue name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("code", this.code);
        jsonWriter.writeJsonField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceState if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceState.
     */
    public static InstanceState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceState deserializedInstanceState = new InstanceState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedInstanceState.code = reader.getNullable(JsonReader::getInt);
                } else if ("name".equals(fieldName)) {
                    deserializedInstanceState.name = InstanceStateNameEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceState;
        });
    }
}
