// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Volume.
 */
@Fluent
public final class Volume implements JsonSerializable<Volume> {
    /*
     * Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for
     * standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume
     * configured at launch in the volume configuration. To configure a volume at launch time, use this task definition
     * revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``,
     * ``RunTask`` or ``StartTask`` APIs.
     */
    private Boolean configuredAtLaunch;

    /*
     * This parameter is specified when you use Docker volumes. Windows containers only support the use of the ``local``
     * driver. To use bind mounts, specify the ``host`` parameter instead. Docker volumes aren't supported by tasks run
     * on FARGATElong. The ``DockerVolumeConfiguration`` property specifies a Docker volume configuration and is used
     * when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows
     * containers only support the use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.
     */
    private DockerVolumeConfiguration dockerVolumeConfiguration;

    /*
     * This parameter is specified when you use an Amazon Elastic File System file system for task storage. This
     * parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more
     * information, see [Amazon EFS
     * volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    private EfsVolumeConfiguration efsVolumeConfiguration;

    /*
     * This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage. This
     * parameter is specified when you're using [Amazon FSx for Windows File
     * Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage. For more
     * information and the input format, see [Amazon FSx for Windows File Server
     * volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    private FSxWindowsFileServerVolumeConfiguration fSxWindowsFileServerVolumeConfiguration;

    /*
     * This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter
     * determine whether your bind mount host volume persists on the host container instance and where it's stored. If
     * the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the
     * data isn't guaranteed to persist after the containers that are associated with it stop running. Windows
     * containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount
     * directories on a different drive, and mount point can't be across drives. For example, you can mount
     * ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``. The
     * ``HostVolumeProperties`` property specifies details on a container instance bind mount host volume.
     */
    private HostVolumeProperties host;

    /*
     * The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are
     * allowed. When using a volume configured at launch, the ``name`` is required and must also be specified as the
     * volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your
     * service or standalone task. For all other types of volumes, this name is referenced in the ``sourceVolume``
     * parameter of the ``mountPoints`` object in the container definition. When a volume is using the
     * ``efsVolumeConfiguration``, the name is required.
     */
    private String name;

    /**
     * Creates an instance of Volume class.
     */
    public Volume() {
    }

    /**
     * Get the configuredAtLaunch property: Indicates whether the volume should be configured at launch time. This is
     * used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task
     * definition revision may only have one volume configured at launch in the volume configuration. To configure a
     * volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when
     * calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
     * 
     * @return the configuredAtLaunch value.
     */
    public Boolean configuredAtLaunch() {
        return this.configuredAtLaunch;
    }

    /**
     * Set the configuredAtLaunch property: Indicates whether the volume should be configured at launch time. This is
     * used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task
     * definition revision may only have one volume configured at launch in the volume configuration. To configure a
     * volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when
     * calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
     * 
     * @param configuredAtLaunch the configuredAtLaunch value to set.
     * @return the Volume object itself.
     */
    public Volume withConfiguredAtLaunch(Boolean configuredAtLaunch) {
        this.configuredAtLaunch = configuredAtLaunch;
        return this;
    }

    /**
     * Get the dockerVolumeConfiguration property: This parameter is specified when you use Docker volumes. Windows
     * containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter
     * instead. Docker volumes aren't supported by tasks run on FARGATElong. The ``DockerVolumeConfiguration`` property
     * specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only
     * supported when you are using the EC2 launch type. Windows containers only support the use of the ``local``
     * driver. To use bind mounts, specify a ``host`` instead.
     * 
     * @return the dockerVolumeConfiguration value.
     */
    public DockerVolumeConfiguration dockerVolumeConfiguration() {
        return this.dockerVolumeConfiguration;
    }

    /**
     * Set the dockerVolumeConfiguration property: This parameter is specified when you use Docker volumes. Windows
     * containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter
     * instead. Docker volumes aren't supported by tasks run on FARGATElong. The ``DockerVolumeConfiguration`` property
     * specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only
     * supported when you are using the EC2 launch type. Windows containers only support the use of the ``local``
     * driver. To use bind mounts, specify a ``host`` instead.
     * 
     * @param dockerVolumeConfiguration the dockerVolumeConfiguration value to set.
     * @return the Volume object itself.
     */
    public Volume withDockerVolumeConfiguration(DockerVolumeConfiguration dockerVolumeConfiguration) {
        this.dockerVolumeConfiguration = dockerVolumeConfiguration;
        return this;
    }

    /**
     * Get the efsVolumeConfiguration property: This parameter is specified when you use an Amazon Elastic File System
     * file system for task storage. This parameter is specified when you're using an Amazon Elastic File System file
     * system for task storage. For more information, see [Amazon EFS
     * volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @return the efsVolumeConfiguration value.
     */
    public EfsVolumeConfiguration efsVolumeConfiguration() {
        return this.efsVolumeConfiguration;
    }

    /**
     * Set the efsVolumeConfiguration property: This parameter is specified when you use an Amazon Elastic File System
     * file system for task storage. This parameter is specified when you're using an Amazon Elastic File System file
     * system for task storage. For more information, see [Amazon EFS
     * volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @param efsVolumeConfiguration the efsVolumeConfiguration value to set.
     * @return the Volume object itself.
     */
    public Volume withEfsVolumeConfiguration(EfsVolumeConfiguration efsVolumeConfiguration) {
        this.efsVolumeConfiguration = efsVolumeConfiguration;
        return this;
    }

    /**
     * Get the fSxWindowsFileServerVolumeConfiguration property: This parameter is specified when you use Amazon FSx for
     * Windows File Server file system for task storage. This parameter is specified when you're using [Amazon FSx for
     * Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task
     * storage. For more information and the input format, see [Amazon FSx for Windows File Server
     * volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @return the fSxWindowsFileServerVolumeConfiguration value.
     */
    public FSxWindowsFileServerVolumeConfiguration fSxWindowsFileServerVolumeConfiguration() {
        return this.fSxWindowsFileServerVolumeConfiguration;
    }

    /**
     * Set the fSxWindowsFileServerVolumeConfiguration property: This parameter is specified when you use Amazon FSx for
     * Windows File Server file system for task storage. This parameter is specified when you're using [Amazon FSx for
     * Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task
     * storage. For more information and the input format, see [Amazon FSx for Windows File Server
     * volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @param fSxWindowsFileServerVolumeConfiguration the fSxWindowsFileServerVolumeConfiguration value to set.
     * @return the Volume object itself.
     */
    public Volume withFSxWindowsFileServerVolumeConfiguration(
        FSxWindowsFileServerVolumeConfiguration fSxWindowsFileServerVolumeConfiguration) {
        this.fSxWindowsFileServerVolumeConfiguration = fSxWindowsFileServerVolumeConfiguration;
        return this;
    }

    /**
     * Get the host property: This parameter is specified when you use bind mount host volumes. The contents of the
     * ``host`` parameter determine whether your bind mount host volume persists on the host container instance and
     * where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data
     * volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop
     * running. Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows
     * containers can't mount directories on a different drive, and mount point can't be across drives. For example, you
     * can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``. The
     * ``HostVolumeProperties`` property specifies details on a container instance bind mount host volume.
     * 
     * @return the host value.
     */
    public HostVolumeProperties host() {
        return this.host;
    }

    /**
     * Set the host property: This parameter is specified when you use bind mount host volumes. The contents of the
     * ``host`` parameter determine whether your bind mount host volume persists on the host container instance and
     * where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data
     * volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop
     * running. Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows
     * containers can't mount directories on a different drive, and mount point can't be across drives. For example, you
     * can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``. The
     * ``HostVolumeProperties`` property specifies details on a container instance bind mount host volume.
     * 
     * @param host the host value to set.
     * @return the Volume object itself.
     */
    public Volume withHost(HostVolumeProperties host) {
        this.host = host;
        return this;
    }

    /**
     * Get the name property: The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores,
     * and hyphens are allowed. When using a volume configured at launch, the ``name`` is required and must also be
     * specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when
     * creating your service or standalone task. For all other types of volumes, this name is referenced in the
     * ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition. When a volume is using the
     * ``efsVolumeConfiguration``, the name is required.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores,
     * and hyphens are allowed. When using a volume configured at launch, the ``name`` is required and must also be
     * specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when
     * creating your service or standalone task. For all other types of volumes, this name is referenced in the
     * ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition. When a volume is using the
     * ``efsVolumeConfiguration``, the name is required.
     * 
     * @param name the name value to set.
     * @return the Volume object itself.
     */
    public Volume withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dockerVolumeConfiguration() != null) {
            dockerVolumeConfiguration().validate();
        }
        if (efsVolumeConfiguration() != null) {
            efsVolumeConfiguration().validate();
        }
        if (fSxWindowsFileServerVolumeConfiguration() != null) {
            fSxWindowsFileServerVolumeConfiguration().validate();
        }
        if (host() != null) {
            host().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("configuredAtLaunch", this.configuredAtLaunch);
        jsonWriter.writeJsonField("dockerVolumeConfiguration", this.dockerVolumeConfiguration);
        jsonWriter.writeJsonField("efsVolumeConfiguration", this.efsVolumeConfiguration);
        jsonWriter.writeJsonField("fSxWindowsFileServerVolumeConfiguration",
            this.fSxWindowsFileServerVolumeConfiguration);
        jsonWriter.writeJsonField("host", this.host);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Volume from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Volume if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Volume.
     */
    public static Volume fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Volume deserializedVolume = new Volume();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuredAtLaunch".equals(fieldName)) {
                    deserializedVolume.configuredAtLaunch = reader.getNullable(JsonReader::getBoolean);
                } else if ("dockerVolumeConfiguration".equals(fieldName)) {
                    deserializedVolume.dockerVolumeConfiguration = DockerVolumeConfiguration.fromJson(reader);
                } else if ("efsVolumeConfiguration".equals(fieldName)) {
                    deserializedVolume.efsVolumeConfiguration = EfsVolumeConfiguration.fromJson(reader);
                } else if ("fSxWindowsFileServerVolumeConfiguration".equals(fieldName)) {
                    deserializedVolume.fSxWindowsFileServerVolumeConfiguration
                        = FSxWindowsFileServerVolumeConfiguration.fromJson(reader);
                } else if ("host".equals(fieldName)) {
                    deserializedVolume.host = HostVolumeProperties.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedVolume.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolume;
        });
    }
}
