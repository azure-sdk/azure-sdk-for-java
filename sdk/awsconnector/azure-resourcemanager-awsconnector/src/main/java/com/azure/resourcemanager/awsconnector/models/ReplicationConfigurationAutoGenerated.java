// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ReplicationConfiguration.
 */
@Fluent
public final class ReplicationConfigurationAutoGenerated
    implements JsonSerializable<ReplicationConfigurationAutoGenerated> {
    /*
     * The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For
     * more information, see [How to Set Up
     * Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User
     * Guide*.
     */
    private String role;

    /*
     * A container for one or more replication rules. A replication configuration must have at least one rule and can
     * contain a maximum of 1,000 rules.
     */
    private List<ReplicationRule> rules;

    /**
     * Creates an instance of ReplicationConfigurationAutoGenerated class.
     */
    public ReplicationConfigurationAutoGenerated() {
    }

    /**
     * Get the role property: The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when
     * replicating objects. For more information, see [How to Set Up
     * Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when
     * replicating objects. For more information, see [How to Set Up
     * Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User
     * Guide*.
     * 
     * @param role the role value to set.
     * @return the ReplicationConfigurationAutoGenerated object itself.
     */
    public ReplicationConfigurationAutoGenerated withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Get the rules property: A container for one or more replication rules. A replication configuration must have at
     * least one rule and can contain a maximum of 1,000 rules.
     * 
     * @return the rules value.
     */
    public List<ReplicationRule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: A container for one or more replication rules. A replication configuration must have at
     * least one rule and can contain a maximum of 1,000 rules.
     * 
     * @param rules the rules value to set.
     * @return the ReplicationConfigurationAutoGenerated object itself.
     */
    public ReplicationConfigurationAutoGenerated withRules(List<ReplicationRule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role);
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationConfigurationAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationConfigurationAutoGenerated if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationConfigurationAutoGenerated.
     */
    public static ReplicationConfigurationAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationConfigurationAutoGenerated deserializedReplicationConfigurationAutoGenerated
                = new ReplicationConfigurationAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedReplicationConfigurationAutoGenerated.role = reader.getString();
                } else if ("rules".equals(fieldName)) {
                    List<ReplicationRule> rules = reader.readArray(reader1 -> ReplicationRule.fromJson(reader1));
                    deserializedReplicationConfigurationAutoGenerated.rules = rules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationConfigurationAutoGenerated;
        });
    }
}
