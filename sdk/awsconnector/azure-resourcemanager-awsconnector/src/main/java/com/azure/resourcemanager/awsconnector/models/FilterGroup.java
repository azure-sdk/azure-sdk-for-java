// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of FilterGroup.
 */
@Fluent
public final class FilterGroup implements JsonSerializable<FilterGroup> {
    /*
     * Property webhookFilter
     */
    private WebhookFilter webhookFilter;

    /**
     * Creates an instance of FilterGroup class.
     */
    public FilterGroup() {
    }

    /**
     * Get the webhookFilter property: Property webhookFilter.
     * 
     * @return the webhookFilter value.
     */
    public WebhookFilter webhookFilter() {
        return this.webhookFilter;
    }

    /**
     * Set the webhookFilter property: Property webhookFilter.
     * 
     * @param webhookFilter the webhookFilter value to set.
     * @return the FilterGroup object itself.
     */
    public FilterGroup withWebhookFilter(WebhookFilter webhookFilter) {
        this.webhookFilter = webhookFilter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (webhookFilter() != null) {
            webhookFilter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("webhookFilter", this.webhookFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterGroup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FilterGroup.
     */
    public static FilterGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterGroup deserializedFilterGroup = new FilterGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webhookFilter".equals(fieldName)) {
                    deserializedFilterGroup.webhookFilter = WebhookFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterGroup;
        });
    }
}
