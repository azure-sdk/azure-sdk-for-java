// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsElasticBeanstalkEnvironment.
 */
@Fluent
public final class AwsElasticBeanstalkEnvironmentProperties
    implements JsonSerializable<AwsElasticBeanstalkEnvironmentProperties> {
    /*
     * The name of the application that is associated with this environment.
     */
    private String applicationName;

    /*
     * If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk
     * environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string
     * to the environment name.
     */
    private String cnamePrefix;

    /*
     * Your description for this environment.
     */
    private String description;

    /*
     * Property endpointURL
     */
    private String endpointUrl;

    /*
     * A unique name for the environment.
     */
    private String environmentName;

    /*
     * The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
     */
    private String operationsRole;

    /*
     * Key-value pairs defining configuration options for this environment, such as the instance type.
     */
    private List<OptionSetting> optionSettings;

    /*
     * The Amazon Resource Name (ARN) of the custom platform to use with the environment.
     */
    private String platformArn;

    /*
     * The name of an Elastic Beanstalk solution stack (platform version) to use with the environment.
     */
    private String solutionStackName;

    /*
     * Specifies the tags applied to resources in the environment.
     */
    private List<TagAutoGenerated28> tags;

    /*
     * The name of the Elastic Beanstalk configuration template to use with the environment.
     */
    private String templateName;

    /*
     * Specifies the tier to use in creating this environment. The environment tier that you choose determines whether
     * Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web
     * application that handles background-processing tasks.
     */
    private TierAutoGenerated tier;

    /*
     * The name of the application version to deploy.
     */
    private String versionLabel;

    /**
     * Creates an instance of AwsElasticBeanstalkEnvironmentProperties class.
     */
    public AwsElasticBeanstalkEnvironmentProperties() {
    }

    /**
     * Get the applicationName property: The name of the application that is associated with this environment.
     * 
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: The name of the application that is associated with this environment.
     * 
     * @param applicationName the applicationName value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the cnamePrefix property: If specified, the environment attempts to use this value as the prefix for the
     * CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by
     * appending a random alphanumeric string to the environment name.
     * 
     * @return the cnamePrefix value.
     */
    public String cnamePrefix() {
        return this.cnamePrefix;
    }

    /**
     * Set the cnamePrefix property: If specified, the environment attempts to use this value as the prefix for the
     * CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by
     * appending a random alphanumeric string to the environment name.
     * 
     * @param cnamePrefix the cnamePrefix value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withCnamePrefix(String cnamePrefix) {
        this.cnamePrefix = cnamePrefix;
        return this;
    }

    /**
     * Get the description property: Your description for this environment.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Your description for this environment.
     * 
     * @param description the description value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the endpointUrl property: Property endpointURL.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: Property endpointURL.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Get the environmentName property: A unique name for the environment.
     * 
     * @return the environmentName value.
     */
    public String environmentName() {
        return this.environmentName;
    }

    /**
     * Set the environmentName property: A unique name for the environment.
     * 
     * @param environmentName the environmentName value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withEnvironmentName(String environmentName) {
        this.environmentName = environmentName;
        return this;
    }

    /**
     * Get the operationsRole property: The Amazon Resource Name (ARN) of an existing IAM role to be used as the
     * environment's operations role.
     * 
     * @return the operationsRole value.
     */
    public String operationsRole() {
        return this.operationsRole;
    }

    /**
     * Set the operationsRole property: The Amazon Resource Name (ARN) of an existing IAM role to be used as the
     * environment's operations role.
     * 
     * @param operationsRole the operationsRole value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withOperationsRole(String operationsRole) {
        this.operationsRole = operationsRole;
        return this;
    }

    /**
     * Get the optionSettings property: Key-value pairs defining configuration options for this environment, such as the
     * instance type.
     * 
     * @return the optionSettings value.
     */
    public List<OptionSetting> optionSettings() {
        return this.optionSettings;
    }

    /**
     * Set the optionSettings property: Key-value pairs defining configuration options for this environment, such as the
     * instance type.
     * 
     * @param optionSettings the optionSettings value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withOptionSettings(List<OptionSetting> optionSettings) {
        this.optionSettings = optionSettings;
        return this;
    }

    /**
     * Get the platformArn property: The Amazon Resource Name (ARN) of the custom platform to use with the environment.
     * 
     * @return the platformArn value.
     */
    public String platformArn() {
        return this.platformArn;
    }

    /**
     * Set the platformArn property: The Amazon Resource Name (ARN) of the custom platform to use with the environment.
     * 
     * @param platformArn the platformArn value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withPlatformArn(String platformArn) {
        this.platformArn = platformArn;
        return this;
    }

    /**
     * Get the solutionStackName property: The name of an Elastic Beanstalk solution stack (platform version) to use
     * with the environment.
     * 
     * @return the solutionStackName value.
     */
    public String solutionStackName() {
        return this.solutionStackName;
    }

    /**
     * Set the solutionStackName property: The name of an Elastic Beanstalk solution stack (platform version) to use
     * with the environment.
     * 
     * @param solutionStackName the solutionStackName value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withSolutionStackName(String solutionStackName) {
        this.solutionStackName = solutionStackName;
        return this;
    }

    /**
     * Get the tags property: Specifies the tags applied to resources in the environment.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated28> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Specifies the tags applied to resources in the environment.
     * 
     * @param tags the tags value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withTags(List<TagAutoGenerated28> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the templateName property: The name of the Elastic Beanstalk configuration template to use with the
     * environment.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: The name of the Elastic Beanstalk configuration template to use with the
     * environment.
     * 
     * @param templateName the templateName value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Get the tier property: Specifies the tier to use in creating this environment. The environment tier that you
     * choose determines whether Elastic Beanstalk provisions resources to support a web application that handles
     * HTTP(S) requests or a web application that handles background-processing tasks.
     * 
     * @return the tier value.
     */
    public TierAutoGenerated tier() {
        return this.tier;
    }

    /**
     * Set the tier property: Specifies the tier to use in creating this environment. The environment tier that you
     * choose determines whether Elastic Beanstalk provisions resources to support a web application that handles
     * HTTP(S) requests or a web application that handles background-processing tasks.
     * 
     * @param tier the tier value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withTier(TierAutoGenerated tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the versionLabel property: The name of the application version to deploy.
     * 
     * @return the versionLabel value.
     */
    public String versionLabel() {
        return this.versionLabel;
    }

    /**
     * Set the versionLabel property: The name of the application version to deploy.
     * 
     * @param versionLabel the versionLabel value to set.
     * @return the AwsElasticBeanstalkEnvironmentProperties object itself.
     */
    public AwsElasticBeanstalkEnvironmentProperties withVersionLabel(String versionLabel) {
        this.versionLabel = versionLabel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (optionSettings() != null) {
            optionSettings().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (tier() != null) {
            tier().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationName", this.applicationName);
        jsonWriter.writeStringField("cnamePrefix", this.cnamePrefix);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("endpointURL", this.endpointUrl);
        jsonWriter.writeStringField("environmentName", this.environmentName);
        jsonWriter.writeStringField("operationsRole", this.operationsRole);
        jsonWriter.writeArrayField("optionSettings", this.optionSettings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("platformArn", this.platformArn);
        jsonWriter.writeStringField("solutionStackName", this.solutionStackName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("templateName", this.templateName);
        jsonWriter.writeJsonField("tier", this.tier);
        jsonWriter.writeStringField("versionLabel", this.versionLabel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsElasticBeanstalkEnvironmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsElasticBeanstalkEnvironmentProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsElasticBeanstalkEnvironmentProperties.
     */
    public static AwsElasticBeanstalkEnvironmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsElasticBeanstalkEnvironmentProperties deserializedAwsElasticBeanstalkEnvironmentProperties
                = new AwsElasticBeanstalkEnvironmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.applicationName = reader.getString();
                } else if ("cnamePrefix".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.cnamePrefix = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.description = reader.getString();
                } else if ("endpointURL".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.endpointUrl = reader.getString();
                } else if ("environmentName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.environmentName = reader.getString();
                } else if ("operationsRole".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.operationsRole = reader.getString();
                } else if ("optionSettings".equals(fieldName)) {
                    List<OptionSetting> optionSettings = reader.readArray(reader1 -> OptionSetting.fromJson(reader1));
                    deserializedAwsElasticBeanstalkEnvironmentProperties.optionSettings = optionSettings;
                } else if ("platformArn".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.platformArn = reader.getString();
                } else if ("solutionStackName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.solutionStackName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated28> tags = reader.readArray(reader1 -> TagAutoGenerated28.fromJson(reader1));
                    deserializedAwsElasticBeanstalkEnvironmentProperties.tags = tags;
                } else if ("templateName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.templateName = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.tier = TierAutoGenerated.fromJson(reader);
                } else if ("versionLabel".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkEnvironmentProperties.versionLabel = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsElasticBeanstalkEnvironmentProperties;
        });
    }
}
