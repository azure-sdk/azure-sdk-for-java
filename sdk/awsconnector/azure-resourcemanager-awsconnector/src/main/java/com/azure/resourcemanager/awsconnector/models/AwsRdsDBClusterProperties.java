// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsRdsDBCluster.
 */
@Fluent
public final class AwsRdsDBClusterProperties implements JsonSerializable<AwsRdsDBClusterProperties> {
    /*
     * The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.
     */
    private Integer allocatedStorage;

    /*
     * Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster.
     * IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services
     * on your behalf.
     */
    private List<DBClusterRole> associatedRoles;

    /*
     * A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the
     * maintenance window. By default, minor engine upgrades are applied automatically.
     */
    private Boolean autoMinorVersionUpgrade;

    /*
     * A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS
     * Regions and Availability Zones, see Choosing the Regions and Availability Zones in the Amazon Aurora User Guide.
     */
    private List<String> availabilityZones;

    /*
     * The target backtrack window, in seconds. To disable backtracking, set this value to 0.
     */
    private Integer backtrackWindow;

    /*
     * The number of days for which automated backups are retained.
     */
    private Integer backupRetentionPeriod;

    /*
     * A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default
     * is not to copy them.
     */
    private Boolean copyTagsToSnapshot;

    /*
     * The Amazon Resource Name (ARN) for the DB cluster.
     */
    private String dbClusterArn;

    /*
     * The DB cluster identifier. This parameter is stored as a lowercase string.
     */
    private String dbClusterIdentifier;

    /*
     * The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
     */
    private String dbClusterInstanceClass;

    /*
     * The name of the DB cluster parameter group to associate with this DB cluster.
     */
    private String dbClusterParameterGroupName;

    /*
     * The AWS Region-unique, immutable identifier for the DB cluster.
     */
    private String dbClusterResourceId;

    /*
     * The name of the DB parameter group to apply to all instances of the DB cluster.
     */
    private String dbInstanceParameterGroupName;

    /*
     * A DB subnet group that you want to associate with this DB cluster.
     */
    private String dbSubnetGroupName;

    /*
     * Reserved for future use.
     */
    private String dbSystemId;

    /*
     * The name of your database. If you don't provide a name, then Amazon RDS won't create a database in this DB
     * cluster. For naming constraints, see Naming Constraints in the Amazon RDS User Guide.
     */
    private String databaseName;

    /*
     * A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when
     * deletion protection is enabled. By default, deletion protection is disabled.
     */
    private Boolean deletionProtection;

    /*
     * The Active Directory directory ID to create the DB cluster in.
     */
    private String domain;

    /*
     * Specify the name of the IAM role to be used when making API calls to the Directory Service.
     */
    private String domainIamRoleName;

    /*
     * The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on
     * the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the
     * Amazon Aurora User Guide.
     */
    private List<String> enableCloudwatchLogsExports;

    /*
     * Specifies whether to enable this DB cluster to forward write operations to the primary cluster of a global
     * cluster (Aurora global database). By default, write operations are not allowed on Aurora DB clusters that are
     * secondary clusters in an Aurora global database.
     */
    private Boolean enableGlobalWriteForwarding;

    /*
     * A value that indicates whether to enable the HTTP endpoint for DB cluster. By default, the HTTP endpoint is
     * disabled.
     */
    private Boolean enableHttpEndpoint;

    /*
     * A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database
     * accounts. By default, mapping is disabled.
     */
    private Boolean enableIamDatabaseAuthentication;

    /*
     * Property endpoint
     */
    private EndpointAutoGenerated endpoint;

    /*
     * The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible
     * Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql
     */
    private String engine;

    /*
     * The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster.
     */
    private String engineMode;

    /*
     * The version number of the database engine to use.
     */
    private String engineVersion;

    /*
     * If you are configuring an Aurora global database cluster and want your Aurora DB cluster to be a secondary member
     * in the global database cluster, specify the global cluster ID of the global database cluster. To define the
     * primary database cluster of the global cluster, use the AWS::RDS::GlobalCluster resource.If you aren't
     * configuring a global database cluster, don't specify this property.
     */
    private String globalClusterIdentifier;

    /*
     * The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB
     * instance in the Multi-AZ DB cluster.
     */
    private Integer iops;

    /*
     * The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database
     * instances in the DB cluster, such as arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
     * If you enable the StorageEncrypted property but don't specify this property, the default master key is used. If
     * you specify this property, you must set the StorageEncrypted property to true.
     */
    private String kmsKeyId;

    /*
     * A value that indicates whether to manage the master user password with AWS Secrets Manager.
     */
    private Boolean manageMasterUserPassword;

    /*
     * The master password for the DB instance.
     */
    private String masterUserPassword;

    /*
     * Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
     */
    private MasterUserSecret masterUserSecret;

    /*
     * The name of the master user for the DB cluster. You must specify MasterUsername, unless you specify
     * SnapshotIdentifier. In that case, don't specify MasterUsername.
     */
    private String masterUsername;

    /*
     * The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To
     * turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0.
     */
    private Integer monitoringInterval;

    /*
     * The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon
     * CloudWatch Logs.
     */
    private String monitoringRoleArn;

    /*
     * The network type of the DB cluster.
     */
    private String networkType;

    /*
     * A value that indicates whether to turn on Performance Insights for the DB cluster.
     */
    private Boolean performanceInsightsEnabled;

    /*
     * The Amazon Web Services KMS key identifier for encryption of Performance Insights data.
     */
    private String performanceInsightsKmsKeyId;

    /*
     * The amount of time, in days, to retain Performance Insights data.
     */
    private Integer performanceInsightsRetentionPeriod;

    /*
     * The port number on which the instances in the DB cluster accept connections. Default: 3306 if engine is set as
     * aurora or 5432 if set to aurora-postgresql.
     */
    private Integer port;

    /*
     * The daily time range during which automated backups are created if automated backups are enabled using the
     * BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of
     * time for each AWS Region. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance
     * Window in the Amazon Aurora User Guide.
     */
    private String preferredBackupWindow;

    /*
     * The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). The default
     * is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random
     * day of the week. To see the time blocks available, see Adjusting the Preferred DB Cluster Maintenance Window in
     * the Amazon Aurora User Guide.
     */
    private String preferredMaintenanceWindow;

    /*
     * A value that indicates whether the DB cluster is publicly accessible.
     */
    private Boolean publiclyAccessible;

    /*
     * Property readEndpoint
     */
    private ReadEndpoint readEndpoint;

    /*
     * The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read
     * Replica.
     */
    private String replicationSourceIdentifier;

    /*
     * The date and time to restore the DB cluster to. Value must be a time in Universal Coordinated Time (UTC) format.
     * An example: 2015-03-07T23:45:00Z
     */
    private String restoreToTime;

    /*
     * The type of restore to be performed. You can specify one of the following values:full-copy - The new DB cluster
     * is restored as a full copy of the source DB cluster.copy-on-write - The new DB cluster is restored as a clone of
     * the source DB cluster.
     */
    private String restoreType;

    /*
     * The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
     * The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
     */
    private ScalingConfiguration scalingConfiguration;

    /*
     * Contains the scaling configuration of an Aurora Serverless v2 DB cluster. Contains the scaling configuration of
     * an Aurora Serverless v2 DB cluster.
     */
    private ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration;

    /*
     * The identifier for the DB snapshot or DB cluster snapshot to restore from.You can use either the name or the
     * Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB
     * snapshot.After you restore a DB cluster with a SnapshotIdentifier property, you must specify the same
     * SnapshotIdentifier property for any future updates to the DB cluster. When you specify this property for an
     * update, the DB cluster is not restored from the snapshot again, and the data in the database is not changed.
     * However, if you don't specify the SnapshotIdentifier property, an empty DB cluster is created, and the original
     * DB cluster is deleted. If you specify a property that is different from the previous snapshot restore property,
     * the DB cluster is restored from the specified SnapshotIdentifier property, and the original DB cluster is
     * deleted.
     */
    private String snapshotIdentifier;

    /*
     * The identifier of the source DB cluster from which to restore.
     */
    private String sourceDBClusterIdentifier;

    /*
     * The AWS Region which contains the source DB cluster when replicating a DB cluster. For example, us-east-1.
     */
    private String sourceRegion;

    /*
     * Indicates whether the DB instance is encrypted.If you specify the DBClusterIdentifier, SnapshotIdentifier, or
     * SourceDBInstanceIdentifier property, don't specify this property. The value is inherited from the cluster,
     * snapshot, or source DB instance.
     */
    private Boolean storageEncrypted;

    /*
     * Specifies the storage throughput value for the DB cluster. This setting applies only to the gp3 storage type.
     */
    private Integer storageThroughput;

    /*
     * Specifies the storage type to be associated with the DB cluster.
     */
    private String storageType;

    /*
     * An array of key-value pairs to apply to this resource.
     */
    private List<TagAutoGenerated45> tags;

    /*
     * A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB
     * cluster is not restored to the latest restorable backup time.
     */
    private Boolean useLatestRestorableTime;

    /*
     * A list of EC2 VPC security groups to associate with this DB cluster.
     */
    private List<String> vpcSecurityGroupIds;

    /**
     * Creates an instance of AwsRdsDBClusterProperties class.
     */
    public AwsRdsDBClusterProperties() {
    }

    /**
     * Get the allocatedStorage property: The amount of storage in gibibytes (GiB) to allocate to each DB instance in
     * the Multi-AZ DB cluster.
     * 
     * @return the allocatedStorage value.
     */
    public Integer allocatedStorage() {
        return this.allocatedStorage;
    }

    /**
     * Set the allocatedStorage property: The amount of storage in gibibytes (GiB) to allocate to each DB instance in
     * the Multi-AZ DB cluster.
     * 
     * @param allocatedStorage the allocatedStorage value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withAllocatedStorage(Integer allocatedStorage) {
        this.allocatedStorage = allocatedStorage;
        return this;
    }

    /**
     * Get the associatedRoles property: Provides a list of the AWS Identity and Access Management (IAM) roles that are
     * associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB
     * cluster to access other AWS services on your behalf.
     * 
     * @return the associatedRoles value.
     */
    public List<DBClusterRole> associatedRoles() {
        return this.associatedRoles;
    }

    /**
     * Set the associatedRoles property: Provides a list of the AWS Identity and Access Management (IAM) roles that are
     * associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB
     * cluster to access other AWS services on your behalf.
     * 
     * @param associatedRoles the associatedRoles value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withAssociatedRoles(List<DBClusterRole> associatedRoles) {
        this.associatedRoles = associatedRoles;
        return this;
    }

    /**
     * Get the autoMinorVersionUpgrade property: A value that indicates whether minor engine upgrades are applied
     * automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied
     * automatically.
     * 
     * @return the autoMinorVersionUpgrade value.
     */
    public Boolean autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade;
    }

    /**
     * Set the autoMinorVersionUpgrade property: A value that indicates whether minor engine upgrades are applied
     * automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied
     * automatically.
     * 
     * @param autoMinorVersionUpgrade the autoMinorVersionUpgrade value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        return this;
    }

    /**
     * Get the availabilityZones property: A list of Availability Zones (AZs) where instances in the DB cluster can be
     * created. For information on AWS Regions and Availability Zones, see Choosing the Regions and Availability Zones
     * in the Amazon Aurora User Guide.
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: A list of Availability Zones (AZs) where instances in the DB cluster can be
     * created. For information on AWS Regions and Availability Zones, see Choosing the Regions and Availability Zones
     * in the Amazon Aurora User Guide.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the backtrackWindow property: The target backtrack window, in seconds. To disable backtracking, set this
     * value to 0.
     * 
     * @return the backtrackWindow value.
     */
    public Integer backtrackWindow() {
        return this.backtrackWindow;
    }

    /**
     * Set the backtrackWindow property: The target backtrack window, in seconds. To disable backtracking, set this
     * value to 0.
     * 
     * @param backtrackWindow the backtrackWindow value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withBacktrackWindow(Integer backtrackWindow) {
        this.backtrackWindow = backtrackWindow;
        return this;
    }

    /**
     * Get the backupRetentionPeriod property: The number of days for which automated backups are retained.
     * 
     * @return the backupRetentionPeriod value.
     */
    public Integer backupRetentionPeriod() {
        return this.backupRetentionPeriod;
    }

    /**
     * Set the backupRetentionPeriod property: The number of days for which automated backups are retained.
     * 
     * @param backupRetentionPeriod the backupRetentionPeriod value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withBackupRetentionPeriod(Integer backupRetentionPeriod) {
        this.backupRetentionPeriod = backupRetentionPeriod;
        return this;
    }

    /**
     * Get the copyTagsToSnapshot property: A value that indicates whether to copy all tags from the DB cluster to
     * snapshots of the DB cluster. The default is not to copy them.
     * 
     * @return the copyTagsToSnapshot value.
     */
    public Boolean copyTagsToSnapshot() {
        return this.copyTagsToSnapshot;
    }

    /**
     * Set the copyTagsToSnapshot property: A value that indicates whether to copy all tags from the DB cluster to
     * snapshots of the DB cluster. The default is not to copy them.
     * 
     * @param copyTagsToSnapshot the copyTagsToSnapshot value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withCopyTagsToSnapshot(Boolean copyTagsToSnapshot) {
        this.copyTagsToSnapshot = copyTagsToSnapshot;
        return this;
    }

    /**
     * Get the dbClusterArn property: The Amazon Resource Name (ARN) for the DB cluster.
     * 
     * @return the dbClusterArn value.
     */
    public String dbClusterArn() {
        return this.dbClusterArn;
    }

    /**
     * Set the dbClusterArn property: The Amazon Resource Name (ARN) for the DB cluster.
     * 
     * @param dbClusterArn the dbClusterArn value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbClusterArn(String dbClusterArn) {
        this.dbClusterArn = dbClusterArn;
        return this;
    }

    /**
     * Get the dbClusterIdentifier property: The DB cluster identifier. This parameter is stored as a lowercase string.
     * 
     * @return the dbClusterIdentifier value.
     */
    public String dbClusterIdentifier() {
        return this.dbClusterIdentifier;
    }

    /**
     * Set the dbClusterIdentifier property: The DB cluster identifier. This parameter is stored as a lowercase string.
     * 
     * @param dbClusterIdentifier the dbClusterIdentifier value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbClusterIdentifier(String dbClusterIdentifier) {
        this.dbClusterIdentifier = dbClusterIdentifier;
        return this;
    }

    /**
     * Get the dbClusterInstanceClass property: The compute and memory capacity of each DB instance in the Multi-AZ DB
     * cluster, for example db.m6g.xlarge.
     * 
     * @return the dbClusterInstanceClass value.
     */
    public String dbClusterInstanceClass() {
        return this.dbClusterInstanceClass;
    }

    /**
     * Set the dbClusterInstanceClass property: The compute and memory capacity of each DB instance in the Multi-AZ DB
     * cluster, for example db.m6g.xlarge.
     * 
     * @param dbClusterInstanceClass the dbClusterInstanceClass value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbClusterInstanceClass(String dbClusterInstanceClass) {
        this.dbClusterInstanceClass = dbClusterInstanceClass;
        return this;
    }

    /**
     * Get the dbClusterParameterGroupName property: The name of the DB cluster parameter group to associate with this
     * DB cluster.
     * 
     * @return the dbClusterParameterGroupName value.
     */
    public String dbClusterParameterGroupName() {
        return this.dbClusterParameterGroupName;
    }

    /**
     * Set the dbClusterParameterGroupName property: The name of the DB cluster parameter group to associate with this
     * DB cluster.
     * 
     * @param dbClusterParameterGroupName the dbClusterParameterGroupName value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbClusterParameterGroupName(String dbClusterParameterGroupName) {
        this.dbClusterParameterGroupName = dbClusterParameterGroupName;
        return this;
    }

    /**
     * Get the dbClusterResourceId property: The AWS Region-unique, immutable identifier for the DB cluster.
     * 
     * @return the dbClusterResourceId value.
     */
    public String dbClusterResourceId() {
        return this.dbClusterResourceId;
    }

    /**
     * Set the dbClusterResourceId property: The AWS Region-unique, immutable identifier for the DB cluster.
     * 
     * @param dbClusterResourceId the dbClusterResourceId value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbClusterResourceId(String dbClusterResourceId) {
        this.dbClusterResourceId = dbClusterResourceId;
        return this;
    }

    /**
     * Get the dbInstanceParameterGroupName property: The name of the DB parameter group to apply to all instances of
     * the DB cluster.
     * 
     * @return the dbInstanceParameterGroupName value.
     */
    public String dbInstanceParameterGroupName() {
        return this.dbInstanceParameterGroupName;
    }

    /**
     * Set the dbInstanceParameterGroupName property: The name of the DB parameter group to apply to all instances of
     * the DB cluster.
     * 
     * @param dbInstanceParameterGroupName the dbInstanceParameterGroupName value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbInstanceParameterGroupName(String dbInstanceParameterGroupName) {
        this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
        return this;
    }

    /**
     * Get the dbSubnetGroupName property: A DB subnet group that you want to associate with this DB cluster.
     * 
     * @return the dbSubnetGroupName value.
     */
    public String dbSubnetGroupName() {
        return this.dbSubnetGroupName;
    }

    /**
     * Set the dbSubnetGroupName property: A DB subnet group that you want to associate with this DB cluster.
     * 
     * @param dbSubnetGroupName the dbSubnetGroupName value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbSubnetGroupName(String dbSubnetGroupName) {
        this.dbSubnetGroupName = dbSubnetGroupName;
        return this;
    }

    /**
     * Get the dbSystemId property: Reserved for future use.
     * 
     * @return the dbSystemId value.
     */
    public String dbSystemId() {
        return this.dbSystemId;
    }

    /**
     * Set the dbSystemId property: Reserved for future use.
     * 
     * @param dbSystemId the dbSystemId value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDbSystemId(String dbSystemId) {
        this.dbSystemId = dbSystemId;
        return this;
    }

    /**
     * Get the databaseName property: The name of your database. If you don't provide a name, then Amazon RDS won't
     * create a database in this DB cluster. For naming constraints, see Naming Constraints in the Amazon RDS User
     * Guide.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: The name of your database. If you don't provide a name, then Amazon RDS won't
     * create a database in this DB cluster. For naming constraints, see Naming Constraints in the Amazon RDS User
     * Guide.
     * 
     * @param databaseName the databaseName value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the deletionProtection property: A value that indicates whether the DB cluster has deletion protection
     * enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is
     * disabled.
     * 
     * @return the deletionProtection value.
     */
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }

    /**
     * Set the deletionProtection property: A value that indicates whether the DB cluster has deletion protection
     * enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is
     * disabled.
     * 
     * @param deletionProtection the deletionProtection value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDeletionProtection(Boolean deletionProtection) {
        this.deletionProtection = deletionProtection;
        return this;
    }

    /**
     * Get the domain property: The Active Directory directory ID to create the DB cluster in.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: The Active Directory directory ID to create the DB cluster in.
     * 
     * @param domain the domain value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the domainIamRoleName property: Specify the name of the IAM role to be used when making API calls to the
     * Directory Service.
     * 
     * @return the domainIamRoleName value.
     */
    public String domainIamRoleName() {
        return this.domainIamRoleName;
    }

    /**
     * Set the domainIamRoleName property: Specify the name of the IAM role to be used when making API calls to the
     * Directory Service.
     * 
     * @param domainIamRoleName the domainIamRoleName value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withDomainIamRoleName(String domainIamRoleName) {
        this.domainIamRoleName = domainIamRoleName;
        return this;
    }

    /**
     * Get the enableCloudwatchLogsExports property: The list of log types that need to be enabled for exporting to
     * CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing
     * Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
     * 
     * @return the enableCloudwatchLogsExports value.
     */
    public List<String> enableCloudwatchLogsExports() {
        return this.enableCloudwatchLogsExports;
    }

    /**
     * Set the enableCloudwatchLogsExports property: The list of log types that need to be enabled for exporting to
     * CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing
     * Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
     * 
     * @param enableCloudwatchLogsExports the enableCloudwatchLogsExports value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEnableCloudwatchLogsExports(List<String> enableCloudwatchLogsExports) {
        this.enableCloudwatchLogsExports = enableCloudwatchLogsExports;
        return this;
    }

    /**
     * Get the enableGlobalWriteForwarding property: Specifies whether to enable this DB cluster to forward write
     * operations to the primary cluster of a global cluster (Aurora global database). By default, write operations are
     * not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.
     * 
     * @return the enableGlobalWriteForwarding value.
     */
    public Boolean enableGlobalWriteForwarding() {
        return this.enableGlobalWriteForwarding;
    }

    /**
     * Set the enableGlobalWriteForwarding property: Specifies whether to enable this DB cluster to forward write
     * operations to the primary cluster of a global cluster (Aurora global database). By default, write operations are
     * not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.
     * 
     * @param enableGlobalWriteForwarding the enableGlobalWriteForwarding value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEnableGlobalWriteForwarding(Boolean enableGlobalWriteForwarding) {
        this.enableGlobalWriteForwarding = enableGlobalWriteForwarding;
        return this;
    }

    /**
     * Get the enableHttpEndpoint property: A value that indicates whether to enable the HTTP endpoint for DB cluster.
     * By default, the HTTP endpoint is disabled.
     * 
     * @return the enableHttpEndpoint value.
     */
    public Boolean enableHttpEndpoint() {
        return this.enableHttpEndpoint;
    }

    /**
     * Set the enableHttpEndpoint property: A value that indicates whether to enable the HTTP endpoint for DB cluster.
     * By default, the HTTP endpoint is disabled.
     * 
     * @param enableHttpEndpoint the enableHttpEndpoint value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEnableHttpEndpoint(Boolean enableHttpEndpoint) {
        this.enableHttpEndpoint = enableHttpEndpoint;
        return this;
    }

    /**
     * Get the enableIamDatabaseAuthentication property: A value that indicates whether to enable mapping of AWS
     * Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
     * 
     * @return the enableIamDatabaseAuthentication value.
     */
    public Boolean enableIamDatabaseAuthentication() {
        return this.enableIamDatabaseAuthentication;
    }

    /**
     * Set the enableIamDatabaseAuthentication property: A value that indicates whether to enable mapping of AWS
     * Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
     * 
     * @param enableIamDatabaseAuthentication the enableIamDatabaseAuthentication value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEnableIamDatabaseAuthentication(Boolean enableIamDatabaseAuthentication) {
        this.enableIamDatabaseAuthentication = enableIamDatabaseAuthentication;
        return this;
    }

    /**
     * Get the endpoint property: Property endpoint.
     * 
     * @return the endpoint value.
     */
    public EndpointAutoGenerated endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: Property endpoint.
     * 
     * @param endpoint the endpoint value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEndpoint(EndpointAutoGenerated endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the engine property: The name of the database engine to be used for this DB cluster. Valid Values: aurora
     * (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql.
     * 
     * @return the engine value.
     */
    public String engine() {
        return this.engine;
    }

    /**
     * Set the engine property: The name of the database engine to be used for this DB cluster. Valid Values: aurora
     * (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql.
     * 
     * @param engine the engine value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEngine(String engine) {
        this.engine = engine;
        return this;
    }

    /**
     * Get the engineMode property: The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery,
     * global, or multimaster.
     * 
     * @return the engineMode value.
     */
    public String engineMode() {
        return this.engineMode;
    }

    /**
     * Set the engineMode property: The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery,
     * global, or multimaster.
     * 
     * @param engineMode the engineMode value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEngineMode(String engineMode) {
        this.engineMode = engineMode;
        return this;
    }

    /**
     * Get the engineVersion property: The version number of the database engine to use.
     * 
     * @return the engineVersion value.
     */
    public String engineVersion() {
        return this.engineVersion;
    }

    /**
     * Set the engineVersion property: The version number of the database engine to use.
     * 
     * @param engineVersion the engineVersion value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withEngineVersion(String engineVersion) {
        this.engineVersion = engineVersion;
        return this;
    }

    /**
     * Get the globalClusterIdentifier property: If you are configuring an Aurora global database cluster and want your
     * Aurora DB cluster to be a secondary member in the global database cluster, specify the global cluster ID of the
     * global database cluster. To define the primary database cluster of the global cluster, use the
     * AWS::RDS::GlobalCluster resource.If you aren't configuring a global database cluster, don't specify this
     * property.
     * 
     * @return the globalClusterIdentifier value.
     */
    public String globalClusterIdentifier() {
        return this.globalClusterIdentifier;
    }

    /**
     * Set the globalClusterIdentifier property: If you are configuring an Aurora global database cluster and want your
     * Aurora DB cluster to be a secondary member in the global database cluster, specify the global cluster ID of the
     * global database cluster. To define the primary database cluster of the global cluster, use the
     * AWS::RDS::GlobalCluster resource.If you aren't configuring a global database cluster, don't specify this
     * property.
     * 
     * @param globalClusterIdentifier the globalClusterIdentifier value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withGlobalClusterIdentifier(String globalClusterIdentifier) {
        this.globalClusterIdentifier = globalClusterIdentifier;
        return this;
    }

    /**
     * Get the iops property: The amount of Provisioned IOPS (input/output operations per second) to be initially
     * allocated for each DB instance in the Multi-AZ DB cluster.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: The amount of Provisioned IOPS (input/output operations per second) to be initially
     * allocated for each DB instance in the Multi-AZ DB cluster.
     * 
     * @param iops the iops value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the kmsKeyId property: The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is
     * used to encrypt the database instances in the DB cluster, such as
     * arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. If you enable the StorageEncrypted
     * property but don't specify this property, the default master key is used. If you specify this property, you must
     * set the StorageEncrypted property to true.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is
     * used to encrypt the database instances in the DB cluster, such as
     * arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. If you enable the StorageEncrypted
     * property but don't specify this property, the default master key is used. If you specify this property, you must
     * set the StorageEncrypted property to true.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the manageMasterUserPassword property: A value that indicates whether to manage the master user password with
     * AWS Secrets Manager.
     * 
     * @return the manageMasterUserPassword value.
     */
    public Boolean manageMasterUserPassword() {
        return this.manageMasterUserPassword;
    }

    /**
     * Set the manageMasterUserPassword property: A value that indicates whether to manage the master user password with
     * AWS Secrets Manager.
     * 
     * @param manageMasterUserPassword the manageMasterUserPassword value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withManageMasterUserPassword(Boolean manageMasterUserPassword) {
        this.manageMasterUserPassword = manageMasterUserPassword;
        return this;
    }

    /**
     * Get the masterUserPassword property: The master password for the DB instance.
     * 
     * @return the masterUserPassword value.
     */
    public String masterUserPassword() {
        return this.masterUserPassword;
    }

    /**
     * Set the masterUserPassword property: The master password for the DB instance.
     * 
     * @param masterUserPassword the masterUserPassword value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withMasterUserPassword(String masterUserPassword) {
        this.masterUserPassword = masterUserPassword;
        return this;
    }

    /**
     * Get the masterUserSecret property: Contains the secret managed by RDS in AWS Secrets Manager for the master user
     * password.
     * 
     * @return the masterUserSecret value.
     */
    public MasterUserSecret masterUserSecret() {
        return this.masterUserSecret;
    }

    /**
     * Set the masterUserSecret property: Contains the secret managed by RDS in AWS Secrets Manager for the master user
     * password.
     * 
     * @param masterUserSecret the masterUserSecret value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withMasterUserSecret(MasterUserSecret masterUserSecret) {
        this.masterUserSecret = masterUserSecret;
        return this;
    }

    /**
     * Get the masterUsername property: The name of the master user for the DB cluster. You must specify MasterUsername,
     * unless you specify SnapshotIdentifier. In that case, don't specify MasterUsername.
     * 
     * @return the masterUsername value.
     */
    public String masterUsername() {
        return this.masterUsername;
    }

    /**
     * Set the masterUsername property: The name of the master user for the DB cluster. You must specify MasterUsername,
     * unless you specify SnapshotIdentifier. In that case, don't specify MasterUsername.
     * 
     * @param masterUsername the masterUsername value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withMasterUsername(String masterUsername) {
        this.masterUsername = masterUsername;
        return this;
    }

    /**
     * Get the monitoringInterval property: The interval, in seconds, between points when Enhanced Monitoring metrics
     * are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is
     * 0.
     * 
     * @return the monitoringInterval value.
     */
    public Integer monitoringInterval() {
        return this.monitoringInterval;
    }

    /**
     * Set the monitoringInterval property: The interval, in seconds, between points when Enhanced Monitoring metrics
     * are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is
     * 0.
     * 
     * @param monitoringInterval the monitoringInterval value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withMonitoringInterval(Integer monitoringInterval) {
        this.monitoringInterval = monitoringInterval;
        return this;
    }

    /**
     * Get the monitoringRoleArn property: The Amazon Resource Name (ARN) for the IAM role that permits RDS to send
     * Enhanced Monitoring metrics to Amazon CloudWatch Logs.
     * 
     * @return the monitoringRoleArn value.
     */
    public String monitoringRoleArn() {
        return this.monitoringRoleArn;
    }

    /**
     * Set the monitoringRoleArn property: The Amazon Resource Name (ARN) for the IAM role that permits RDS to send
     * Enhanced Monitoring metrics to Amazon CloudWatch Logs.
     * 
     * @param monitoringRoleArn the monitoringRoleArn value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withMonitoringRoleArn(String monitoringRoleArn) {
        this.monitoringRoleArn = monitoringRoleArn;
        return this;
    }

    /**
     * Get the networkType property: The network type of the DB cluster.
     * 
     * @return the networkType value.
     */
    public String networkType() {
        return this.networkType;
    }

    /**
     * Set the networkType property: The network type of the DB cluster.
     * 
     * @param networkType the networkType value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withNetworkType(String networkType) {
        this.networkType = networkType;
        return this;
    }

    /**
     * Get the performanceInsightsEnabled property: A value that indicates whether to turn on Performance Insights for
     * the DB cluster.
     * 
     * @return the performanceInsightsEnabled value.
     */
    public Boolean performanceInsightsEnabled() {
        return this.performanceInsightsEnabled;
    }

    /**
     * Set the performanceInsightsEnabled property: A value that indicates whether to turn on Performance Insights for
     * the DB cluster.
     * 
     * @param performanceInsightsEnabled the performanceInsightsEnabled value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withPerformanceInsightsEnabled(Boolean performanceInsightsEnabled) {
        this.performanceInsightsEnabled = performanceInsightsEnabled;
        return this;
    }

    /**
     * Get the performanceInsightsKmsKeyId property: The Amazon Web Services KMS key identifier for encryption of
     * Performance Insights data.
     * 
     * @return the performanceInsightsKmsKeyId value.
     */
    public String performanceInsightsKmsKeyId() {
        return this.performanceInsightsKmsKeyId;
    }

    /**
     * Set the performanceInsightsKmsKeyId property: The Amazon Web Services KMS key identifier for encryption of
     * Performance Insights data.
     * 
     * @param performanceInsightsKmsKeyId the performanceInsightsKmsKeyId value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withPerformanceInsightsKmsKeyId(String performanceInsightsKmsKeyId) {
        this.performanceInsightsKmsKeyId = performanceInsightsKmsKeyId;
        return this;
    }

    /**
     * Get the performanceInsightsRetentionPeriod property: The amount of time, in days, to retain Performance Insights
     * data.
     * 
     * @return the performanceInsightsRetentionPeriod value.
     */
    public Integer performanceInsightsRetentionPeriod() {
        return this.performanceInsightsRetentionPeriod;
    }

    /**
     * Set the performanceInsightsRetentionPeriod property: The amount of time, in days, to retain Performance Insights
     * data.
     * 
     * @param performanceInsightsRetentionPeriod the performanceInsightsRetentionPeriod value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties
        withPerformanceInsightsRetentionPeriod(Integer performanceInsightsRetentionPeriod) {
        this.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod;
        return this;
    }

    /**
     * Get the port property: The port number on which the instances in the DB cluster accept connections. Default: 3306
     * if engine is set as aurora or 5432 if set to aurora-postgresql.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port number on which the instances in the DB cluster accept connections. Default: 3306
     * if engine is set as aurora or 5432 if set to aurora-postgresql.
     * 
     * @param port the port value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the preferredBackupWindow property: The daily time range during which automated backups are created if
     * automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window
     * selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see
     * Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
     * 
     * @return the preferredBackupWindow value.
     */
    public String preferredBackupWindow() {
        return this.preferredBackupWindow;
    }

    /**
     * Set the preferredBackupWindow property: The daily time range during which automated backups are created if
     * automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window
     * selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see
     * Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
     * 
     * @param preferredBackupWindow the preferredBackupWindow value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withPreferredBackupWindow(String preferredBackupWindow) {
        this.preferredBackupWindow = preferredBackupWindow;
        return this;
    }

    /**
     * Get the preferredMaintenanceWindow property: The weekly time range during which system maintenance can occur, in
     * Universal Coordinated Time (UTC). The default is a 30-minute window selected at random from an 8-hour block of
     * time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see Adjusting
     * the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
     * 
     * @return the preferredMaintenanceWindow value.
     */
    public String preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }

    /**
     * Set the preferredMaintenanceWindow property: The weekly time range during which system maintenance can occur, in
     * Universal Coordinated Time (UTC). The default is a 30-minute window selected at random from an 8-hour block of
     * time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see Adjusting
     * the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
     * 
     * @param preferredMaintenanceWindow the preferredMaintenanceWindow value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        return this;
    }

    /**
     * Get the publiclyAccessible property: A value that indicates whether the DB cluster is publicly accessible.
     * 
     * @return the publiclyAccessible value.
     */
    public Boolean publiclyAccessible() {
        return this.publiclyAccessible;
    }

    /**
     * Set the publiclyAccessible property: A value that indicates whether the DB cluster is publicly accessible.
     * 
     * @param publiclyAccessible the publiclyAccessible value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withPubliclyAccessible(Boolean publiclyAccessible) {
        this.publiclyAccessible = publiclyAccessible;
        return this;
    }

    /**
     * Get the readEndpoint property: Property readEndpoint.
     * 
     * @return the readEndpoint value.
     */
    public ReadEndpoint readEndpoint() {
        return this.readEndpoint;
    }

    /**
     * Set the readEndpoint property: Property readEndpoint.
     * 
     * @param readEndpoint the readEndpoint value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withReadEndpoint(ReadEndpoint readEndpoint) {
        this.readEndpoint = readEndpoint;
        return this;
    }

    /**
     * Get the replicationSourceIdentifier property: The Amazon Resource Name (ARN) of the source DB instance or DB
     * cluster if this DB cluster is created as a Read Replica.
     * 
     * @return the replicationSourceIdentifier value.
     */
    public String replicationSourceIdentifier() {
        return this.replicationSourceIdentifier;
    }

    /**
     * Set the replicationSourceIdentifier property: The Amazon Resource Name (ARN) of the source DB instance or DB
     * cluster if this DB cluster is created as a Read Replica.
     * 
     * @param replicationSourceIdentifier the replicationSourceIdentifier value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withReplicationSourceIdentifier(String replicationSourceIdentifier) {
        this.replicationSourceIdentifier = replicationSourceIdentifier;
        return this;
    }

    /**
     * Get the restoreToTime property: The date and time to restore the DB cluster to. Value must be a time in Universal
     * Coordinated Time (UTC) format. An example: 2015-03-07T23:45:00Z.
     * 
     * @return the restoreToTime value.
     */
    public String restoreToTime() {
        return this.restoreToTime;
    }

    /**
     * Set the restoreToTime property: The date and time to restore the DB cluster to. Value must be a time in Universal
     * Coordinated Time (UTC) format. An example: 2015-03-07T23:45:00Z.
     * 
     * @param restoreToTime the restoreToTime value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withRestoreToTime(String restoreToTime) {
        this.restoreToTime = restoreToTime;
        return this;
    }

    /**
     * Get the restoreType property: The type of restore to be performed. You can specify one of the following
     * values:full-copy - The new DB cluster is restored as a full copy of the source DB cluster.copy-on-write - The new
     * DB cluster is restored as a clone of the source DB cluster.
     * 
     * @return the restoreType value.
     */
    public String restoreType() {
        return this.restoreType;
    }

    /**
     * Set the restoreType property: The type of restore to be performed. You can specify one of the following
     * values:full-copy - The new DB cluster is restored as a full copy of the source DB cluster.copy-on-write - The new
     * DB cluster is restored as a clone of the source DB cluster.
     * 
     * @param restoreType the restoreType value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withRestoreType(String restoreType) {
        this.restoreType = restoreType;
        return this;
    }

    /**
     * Get the scalingConfiguration property: The ScalingConfiguration property type specifies the scaling configuration
     * of an Aurora Serverless DB cluster. The ScalingConfiguration property type specifies the scaling configuration of
     * an Aurora Serverless DB cluster.
     * 
     * @return the scalingConfiguration value.
     */
    public ScalingConfiguration scalingConfiguration() {
        return this.scalingConfiguration;
    }

    /**
     * Set the scalingConfiguration property: The ScalingConfiguration property type specifies the scaling configuration
     * of an Aurora Serverless DB cluster. The ScalingConfiguration property type specifies the scaling configuration of
     * an Aurora Serverless DB cluster.
     * 
     * @param scalingConfiguration the scalingConfiguration value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withScalingConfiguration(ScalingConfiguration scalingConfiguration) {
        this.scalingConfiguration = scalingConfiguration;
        return this;
    }

    /**
     * Get the serverlessV2ScalingConfiguration property: Contains the scaling configuration of an Aurora Serverless v2
     * DB cluster. Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
     * 
     * @return the serverlessV2ScalingConfiguration value.
     */
    public ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration() {
        return this.serverlessV2ScalingConfiguration;
    }

    /**
     * Set the serverlessV2ScalingConfiguration property: Contains the scaling configuration of an Aurora Serverless v2
     * DB cluster. Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
     * 
     * @param serverlessV2ScalingConfiguration the serverlessV2ScalingConfiguration value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties
        withServerlessV2ScalingConfiguration(ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration) {
        this.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration;
        return this;
    }

    /**
     * Get the snapshotIdentifier property: The identifier for the DB snapshot or DB cluster snapshot to restore
     * from.You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you
     * can use only the ARN to specify a DB snapshot.After you restore a DB cluster with a SnapshotIdentifier property,
     * you must specify the same SnapshotIdentifier property for any future updates to the DB cluster. When you specify
     * this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database
     * is not changed. However, if you don't specify the SnapshotIdentifier property, an empty DB cluster is created,
     * and the original DB cluster is deleted. If you specify a property that is different from the previous snapshot
     * restore property, the DB cluster is restored from the specified SnapshotIdentifier property, and the original DB
     * cluster is deleted.
     * 
     * @return the snapshotIdentifier value.
     */
    public String snapshotIdentifier() {
        return this.snapshotIdentifier;
    }

    /**
     * Set the snapshotIdentifier property: The identifier for the DB snapshot or DB cluster snapshot to restore
     * from.You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you
     * can use only the ARN to specify a DB snapshot.After you restore a DB cluster with a SnapshotIdentifier property,
     * you must specify the same SnapshotIdentifier property for any future updates to the DB cluster. When you specify
     * this property for an update, the DB cluster is not restored from the snapshot again, and the data in the database
     * is not changed. However, if you don't specify the SnapshotIdentifier property, an empty DB cluster is created,
     * and the original DB cluster is deleted. If you specify a property that is different from the previous snapshot
     * restore property, the DB cluster is restored from the specified SnapshotIdentifier property, and the original DB
     * cluster is deleted.
     * 
     * @param snapshotIdentifier the snapshotIdentifier value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withSnapshotIdentifier(String snapshotIdentifier) {
        this.snapshotIdentifier = snapshotIdentifier;
        return this;
    }

    /**
     * Get the sourceDBClusterIdentifier property: The identifier of the source DB cluster from which to restore.
     * 
     * @return the sourceDBClusterIdentifier value.
     */
    public String sourceDBClusterIdentifier() {
        return this.sourceDBClusterIdentifier;
    }

    /**
     * Set the sourceDBClusterIdentifier property: The identifier of the source DB cluster from which to restore.
     * 
     * @param sourceDBClusterIdentifier the sourceDBClusterIdentifier value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withSourceDBClusterIdentifier(String sourceDBClusterIdentifier) {
        this.sourceDBClusterIdentifier = sourceDBClusterIdentifier;
        return this;
    }

    /**
     * Get the sourceRegion property: The AWS Region which contains the source DB cluster when replicating a DB cluster.
     * For example, us-east-1.
     * 
     * @return the sourceRegion value.
     */
    public String sourceRegion() {
        return this.sourceRegion;
    }

    /**
     * Set the sourceRegion property: The AWS Region which contains the source DB cluster when replicating a DB cluster.
     * For example, us-east-1.
     * 
     * @param sourceRegion the sourceRegion value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withSourceRegion(String sourceRegion) {
        this.sourceRegion = sourceRegion;
        return this;
    }

    /**
     * Get the storageEncrypted property: Indicates whether the DB instance is encrypted.If you specify the
     * DBClusterIdentifier, SnapshotIdentifier, or SourceDBInstanceIdentifier property, don't specify this property. The
     * value is inherited from the cluster, snapshot, or source DB instance.
     * 
     * @return the storageEncrypted value.
     */
    public Boolean storageEncrypted() {
        return this.storageEncrypted;
    }

    /**
     * Set the storageEncrypted property: Indicates whether the DB instance is encrypted.If you specify the
     * DBClusterIdentifier, SnapshotIdentifier, or SourceDBInstanceIdentifier property, don't specify this property. The
     * value is inherited from the cluster, snapshot, or source DB instance.
     * 
     * @param storageEncrypted the storageEncrypted value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withStorageEncrypted(Boolean storageEncrypted) {
        this.storageEncrypted = storageEncrypted;
        return this;
    }

    /**
     * Get the storageThroughput property: Specifies the storage throughput value for the DB cluster. This setting
     * applies only to the gp3 storage type.
     * 
     * @return the storageThroughput value.
     */
    public Integer storageThroughput() {
        return this.storageThroughput;
    }

    /**
     * Set the storageThroughput property: Specifies the storage throughput value for the DB cluster. This setting
     * applies only to the gp3 storage type.
     * 
     * @param storageThroughput the storageThroughput value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withStorageThroughput(Integer storageThroughput) {
        this.storageThroughput = storageThroughput;
        return this;
    }

    /**
     * Get the storageType property: Specifies the storage type to be associated with the DB cluster.
     * 
     * @return the storageType value.
     */
    public String storageType() {
        return this.storageType;
    }

    /**
     * Set the storageType property: Specifies the storage type to be associated with the DB cluster.
     * 
     * @param storageType the storageType value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withStorageType(String storageType) {
        this.storageType = storageType;
        return this;
    }

    /**
     * Get the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated45> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: An array of key-value pairs to apply to this resource.
     * 
     * @param tags the tags value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withTags(List<TagAutoGenerated45> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the useLatestRestorableTime property: A value that indicates whether to restore the DB cluster to the latest
     * restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time.
     * 
     * @return the useLatestRestorableTime value.
     */
    public Boolean useLatestRestorableTime() {
        return this.useLatestRestorableTime;
    }

    /**
     * Set the useLatestRestorableTime property: A value that indicates whether to restore the DB cluster to the latest
     * restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time.
     * 
     * @param useLatestRestorableTime the useLatestRestorableTime value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withUseLatestRestorableTime(Boolean useLatestRestorableTime) {
        this.useLatestRestorableTime = useLatestRestorableTime;
        return this;
    }

    /**
     * Get the vpcSecurityGroupIds property: A list of EC2 VPC security groups to associate with this DB cluster.
     * 
     * @return the vpcSecurityGroupIds value.
     */
    public List<String> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds;
    }

    /**
     * Set the vpcSecurityGroupIds property: A list of EC2 VPC security groups to associate with this DB cluster.
     * 
     * @param vpcSecurityGroupIds the vpcSecurityGroupIds value to set.
     * @return the AwsRdsDBClusterProperties object itself.
     */
    public AwsRdsDBClusterProperties withVpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (associatedRoles() != null) {
            associatedRoles().forEach(e -> e.validate());
        }
        if (endpoint() != null) {
            endpoint().validate();
        }
        if (masterUserSecret() != null) {
            masterUserSecret().validate();
        }
        if (readEndpoint() != null) {
            readEndpoint().validate();
        }
        if (scalingConfiguration() != null) {
            scalingConfiguration().validate();
        }
        if (serverlessV2ScalingConfiguration() != null) {
            serverlessV2ScalingConfiguration().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("allocatedStorage", this.allocatedStorage);
        jsonWriter.writeArrayField("associatedRoles", this.associatedRoles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("autoMinorVersionUpgrade", this.autoMinorVersionUpgrade);
        jsonWriter.writeArrayField("availabilityZones", this.availabilityZones,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("backtrackWindow", this.backtrackWindow);
        jsonWriter.writeNumberField("backupRetentionPeriod", this.backupRetentionPeriod);
        jsonWriter.writeBooleanField("copyTagsToSnapshot", this.copyTagsToSnapshot);
        jsonWriter.writeStringField("dbClusterArn", this.dbClusterArn);
        jsonWriter.writeStringField("dbClusterIdentifier", this.dbClusterIdentifier);
        jsonWriter.writeStringField("dbClusterInstanceClass", this.dbClusterInstanceClass);
        jsonWriter.writeStringField("dbClusterParameterGroupName", this.dbClusterParameterGroupName);
        jsonWriter.writeStringField("dbClusterResourceId", this.dbClusterResourceId);
        jsonWriter.writeStringField("dbInstanceParameterGroupName", this.dbInstanceParameterGroupName);
        jsonWriter.writeStringField("dbSubnetGroupName", this.dbSubnetGroupName);
        jsonWriter.writeStringField("dbSystemId", this.dbSystemId);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeBooleanField("deletionProtection", this.deletionProtection);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("domainIAMRoleName", this.domainIamRoleName);
        jsonWriter.writeArrayField("enableCloudwatchLogsExports", this.enableCloudwatchLogsExports,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("enableGlobalWriteForwarding", this.enableGlobalWriteForwarding);
        jsonWriter.writeBooleanField("enableHttpEndpoint", this.enableHttpEndpoint);
        jsonWriter.writeBooleanField("enableIAMDatabaseAuthentication", this.enableIamDatabaseAuthentication);
        jsonWriter.writeJsonField("endpoint", this.endpoint);
        jsonWriter.writeStringField("engine", this.engine);
        jsonWriter.writeStringField("engineMode", this.engineMode);
        jsonWriter.writeStringField("engineVersion", this.engineVersion);
        jsonWriter.writeStringField("globalClusterIdentifier", this.globalClusterIdentifier);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeBooleanField("manageMasterUserPassword", this.manageMasterUserPassword);
        jsonWriter.writeStringField("masterUserPassword", this.masterUserPassword);
        jsonWriter.writeJsonField("masterUserSecret", this.masterUserSecret);
        jsonWriter.writeStringField("masterUsername", this.masterUsername);
        jsonWriter.writeNumberField("monitoringInterval", this.monitoringInterval);
        jsonWriter.writeStringField("monitoringRoleArn", this.monitoringRoleArn);
        jsonWriter.writeStringField("networkType", this.networkType);
        jsonWriter.writeBooleanField("performanceInsightsEnabled", this.performanceInsightsEnabled);
        jsonWriter.writeStringField("performanceInsightsKmsKeyId", this.performanceInsightsKmsKeyId);
        jsonWriter.writeNumberField("performanceInsightsRetentionPeriod", this.performanceInsightsRetentionPeriod);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("preferredBackupWindow", this.preferredBackupWindow);
        jsonWriter.writeStringField("preferredMaintenanceWindow", this.preferredMaintenanceWindow);
        jsonWriter.writeBooleanField("publiclyAccessible", this.publiclyAccessible);
        jsonWriter.writeJsonField("readEndpoint", this.readEndpoint);
        jsonWriter.writeStringField("replicationSourceIdentifier", this.replicationSourceIdentifier);
        jsonWriter.writeStringField("restoreToTime", this.restoreToTime);
        jsonWriter.writeStringField("restoreType", this.restoreType);
        jsonWriter.writeJsonField("scalingConfiguration", this.scalingConfiguration);
        jsonWriter.writeJsonField("serverlessV2ScalingConfiguration", this.serverlessV2ScalingConfiguration);
        jsonWriter.writeStringField("snapshotIdentifier", this.snapshotIdentifier);
        jsonWriter.writeStringField("sourceDBClusterIdentifier", this.sourceDBClusterIdentifier);
        jsonWriter.writeStringField("sourceRegion", this.sourceRegion);
        jsonWriter.writeBooleanField("storageEncrypted", this.storageEncrypted);
        jsonWriter.writeNumberField("storageThroughput", this.storageThroughput);
        jsonWriter.writeStringField("storageType", this.storageType);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("useLatestRestorableTime", this.useLatestRestorableTime);
        jsonWriter.writeArrayField("vpcSecurityGroupIds", this.vpcSecurityGroupIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRdsDBClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRdsDBClusterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRdsDBClusterProperties.
     */
    public static AwsRdsDBClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRdsDBClusterProperties deserializedAwsRdsDBClusterProperties = new AwsRdsDBClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocatedStorage".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.allocatedStorage = reader.getNullable(JsonReader::getInt);
                } else if ("associatedRoles".equals(fieldName)) {
                    List<DBClusterRole> associatedRoles = reader.readArray(reader1 -> DBClusterRole.fromJson(reader1));
                    deserializedAwsRdsDBClusterProperties.associatedRoles = associatedRoles;
                } else if ("autoMinorVersionUpgrade".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.autoMinorVersionUpgrade
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("availabilityZones".equals(fieldName)) {
                    List<String> availabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRdsDBClusterProperties.availabilityZones = availabilityZones;
                } else if ("backtrackWindow".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.backtrackWindow = reader.getNullable(JsonReader::getInt);
                } else if ("backupRetentionPeriod".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.backupRetentionPeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("copyTagsToSnapshot".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.copyTagsToSnapshot
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("dbClusterArn".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbClusterArn = reader.getString();
                } else if ("dbClusterIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbClusterIdentifier = reader.getString();
                } else if ("dbClusterInstanceClass".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbClusterInstanceClass = reader.getString();
                } else if ("dbClusterParameterGroupName".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbClusterParameterGroupName = reader.getString();
                } else if ("dbClusterResourceId".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbClusterResourceId = reader.getString();
                } else if ("dbInstanceParameterGroupName".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbInstanceParameterGroupName = reader.getString();
                } else if ("dbSubnetGroupName".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbSubnetGroupName = reader.getString();
                } else if ("dbSystemId".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.dbSystemId = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.databaseName = reader.getString();
                } else if ("deletionProtection".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.deletionProtection
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("domain".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.domain = reader.getString();
                } else if ("domainIAMRoleName".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.domainIamRoleName = reader.getString();
                } else if ("enableCloudwatchLogsExports".equals(fieldName)) {
                    List<String> enableCloudwatchLogsExports = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRdsDBClusterProperties.enableCloudwatchLogsExports = enableCloudwatchLogsExports;
                } else if ("enableGlobalWriteForwarding".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.enableGlobalWriteForwarding
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableHttpEndpoint".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.enableHttpEndpoint
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableIAMDatabaseAuthentication".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.enableIamDatabaseAuthentication
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("endpoint".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.endpoint = EndpointAutoGenerated.fromJson(reader);
                } else if ("engine".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.engine = reader.getString();
                } else if ("engineMode".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.engineMode = reader.getString();
                } else if ("engineVersion".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.engineVersion = reader.getString();
                } else if ("globalClusterIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.globalClusterIdentifier = reader.getString();
                } else if ("iops".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.iops = reader.getNullable(JsonReader::getInt);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.kmsKeyId = reader.getString();
                } else if ("manageMasterUserPassword".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.manageMasterUserPassword
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("masterUserPassword".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.masterUserPassword = reader.getString();
                } else if ("masterUserSecret".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.masterUserSecret = MasterUserSecret.fromJson(reader);
                } else if ("masterUsername".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.masterUsername = reader.getString();
                } else if ("monitoringInterval".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.monitoringInterval = reader.getNullable(JsonReader::getInt);
                } else if ("monitoringRoleArn".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.monitoringRoleArn = reader.getString();
                } else if ("networkType".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.networkType = reader.getString();
                } else if ("performanceInsightsEnabled".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.performanceInsightsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("performanceInsightsKmsKeyId".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.performanceInsightsKmsKeyId = reader.getString();
                } else if ("performanceInsightsRetentionPeriod".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.performanceInsightsRetentionPeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("port".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.port = reader.getNullable(JsonReader::getInt);
                } else if ("preferredBackupWindow".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.preferredBackupWindow = reader.getString();
                } else if ("preferredMaintenanceWindow".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.preferredMaintenanceWindow = reader.getString();
                } else if ("publiclyAccessible".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.publiclyAccessible
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("readEndpoint".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.readEndpoint = ReadEndpoint.fromJson(reader);
                } else if ("replicationSourceIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.replicationSourceIdentifier = reader.getString();
                } else if ("restoreToTime".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.restoreToTime = reader.getString();
                } else if ("restoreType".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.restoreType = reader.getString();
                } else if ("scalingConfiguration".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.scalingConfiguration = ScalingConfiguration.fromJson(reader);
                } else if ("serverlessV2ScalingConfiguration".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.serverlessV2ScalingConfiguration
                        = ServerlessV2ScalingConfiguration.fromJson(reader);
                } else if ("snapshotIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.snapshotIdentifier = reader.getString();
                } else if ("sourceDBClusterIdentifier".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.sourceDBClusterIdentifier = reader.getString();
                } else if ("sourceRegion".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.sourceRegion = reader.getString();
                } else if ("storageEncrypted".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.storageEncrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("storageThroughput".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.storageThroughput = reader.getNullable(JsonReader::getInt);
                } else if ("storageType".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.storageType = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated45> tags = reader.readArray(reader1 -> TagAutoGenerated45.fromJson(reader1));
                    deserializedAwsRdsDBClusterProperties.tags = tags;
                } else if ("useLatestRestorableTime".equals(fieldName)) {
                    deserializedAwsRdsDBClusterProperties.useLatestRestorableTime
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("vpcSecurityGroupIds".equals(fieldName)) {
                    List<String> vpcSecurityGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRdsDBClusterProperties.vpcSecurityGroupIds = vpcSecurityGroupIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRdsDBClusterProperties;
        });
    }
}
