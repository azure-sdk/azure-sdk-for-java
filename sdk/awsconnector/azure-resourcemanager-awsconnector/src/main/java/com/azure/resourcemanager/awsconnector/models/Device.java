// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Device.
 */
@Fluent
public final class Device implements JsonSerializable<Device> {
    /*
     * The path inside the container at which to expose the host device.
     */
    private String containerPath;

    /*
     * The path for the device on the host container instance.
     */
    private String hostPath;

    /*
     * The explicit permissions to provide to the container for the device. By default, the container has permissions
     * for ``read``, ``write``, and ``mknod`` for the device.
     */
    private List<String> permissions;

    /**
     * Creates an instance of Device class.
     */
    public Device() {
    }

    /**
     * Get the containerPath property: The path inside the container at which to expose the host device.
     * 
     * @return the containerPath value.
     */
    public String containerPath() {
        return this.containerPath;
    }

    /**
     * Set the containerPath property: The path inside the container at which to expose the host device.
     * 
     * @param containerPath the containerPath value to set.
     * @return the Device object itself.
     */
    public Device withContainerPath(String containerPath) {
        this.containerPath = containerPath;
        return this;
    }

    /**
     * Get the hostPath property: The path for the device on the host container instance.
     * 
     * @return the hostPath value.
     */
    public String hostPath() {
        return this.hostPath;
    }

    /**
     * Set the hostPath property: The path for the device on the host container instance.
     * 
     * @param hostPath the hostPath value to set.
     * @return the Device object itself.
     */
    public Device withHostPath(String hostPath) {
        this.hostPath = hostPath;
        return this;
    }

    /**
     * Get the permissions property: The explicit permissions to provide to the container for the device. By default,
     * the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
     * 
     * @return the permissions value.
     */
    public List<String> permissions() {
        return this.permissions;
    }

    /**
     * Set the permissions property: The explicit permissions to provide to the container for the device. By default,
     * the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
     * 
     * @param permissions the permissions value to set.
     * @return the Device object itself.
     */
    public Device withPermissions(List<String> permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerPath", this.containerPath);
        jsonWriter.writeStringField("hostPath", this.hostPath);
        jsonWriter.writeArrayField("permissions", this.permissions, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Device from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Device if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Device.
     */
    public static Device fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Device deserializedDevice = new Device();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerPath".equals(fieldName)) {
                    deserializedDevice.containerPath = reader.getString();
                } else if ("hostPath".equals(fieldName)) {
                    deserializedDevice.hostPath = reader.getString();
                } else if ("permissions".equals(fieldName)) {
                    List<String> permissions = reader.readArray(reader1 -> reader1.getString());
                    deserializedDevice.permissions = permissions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDevice;
        });
    }
}
