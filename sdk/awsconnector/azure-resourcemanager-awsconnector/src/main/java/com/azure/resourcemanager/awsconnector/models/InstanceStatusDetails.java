// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of InstanceStatusDetails.
 */
@Fluent
public final class InstanceStatusDetails implements JsonSerializable<InstanceStatusDetails> {
    /*
     * <p>The time when a status check failed. For an instance that was launched and impaired, this is the time when the
     * instance was launched.</p>
     */
    private OffsetDateTime impairedSince;

    /*
     * <p>The type of instance status.</p>
     */
    private StatusNameEnumValue name;

    /*
     * <p>The status.</p>
     */
    private StatusTypeEnumValue status;

    /**
     * Creates an instance of InstanceStatusDetails class.
     */
    public InstanceStatusDetails() {
    }

    /**
     * Get the impairedSince property: &lt;p&gt;The time when a status check failed. For an instance that was launched
     * and impaired, this is the time when the instance was launched.&lt;/p&gt;.
     * 
     * @return the impairedSince value.
     */
    public OffsetDateTime impairedSince() {
        return this.impairedSince;
    }

    /**
     * Set the impairedSince property: &lt;p&gt;The time when a status check failed. For an instance that was launched
     * and impaired, this is the time when the instance was launched.&lt;/p&gt;.
     * 
     * @param impairedSince the impairedSince value to set.
     * @return the InstanceStatusDetails object itself.
     */
    public InstanceStatusDetails withImpairedSince(OffsetDateTime impairedSince) {
        this.impairedSince = impairedSince;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The type of instance status.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public StatusNameEnumValue name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The type of instance status.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the InstanceStatusDetails object itself.
     */
    public InstanceStatusDetails withName(StatusNameEnumValue name) {
        this.name = name;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The status.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public StatusTypeEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The status.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the InstanceStatusDetails object itself.
     */
    public InstanceStatusDetails withStatus(StatusTypeEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("impairedSince",
            this.impairedSince == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.impairedSince));
        jsonWriter.writeJsonField("name", this.name);
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceStatusDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceStatusDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceStatusDetails.
     */
    public static InstanceStatusDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceStatusDetails deserializedInstanceStatusDetails = new InstanceStatusDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("impairedSince".equals(fieldName)) {
                    deserializedInstanceStatusDetails.impairedSince = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("name".equals(fieldName)) {
                    deserializedInstanceStatusDetails.name = StatusNameEnumValue.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedInstanceStatusDetails.status = StatusTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceStatusDetails;
        });
    }
}
