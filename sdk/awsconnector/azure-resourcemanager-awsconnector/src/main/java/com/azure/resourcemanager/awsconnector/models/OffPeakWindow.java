// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of OffPeakWindow.
 */
@Fluent
public final class OffPeakWindow implements JsonSerializable<OffPeakWindow> {
    /*
     * <p>A custom start time for the off-peak window, in Coordinated Universal Time (UTC). The window length will
     * always be 10 hours, so you can't specify an end time. For example, if you specify 11:00 P.M. UTC as a start time,
     * the end time will automatically be set to 9:00 A.M.</p>
     */
    private WindowStartTime windowStartTime;

    /**
     * Creates an instance of OffPeakWindow class.
     */
    public OffPeakWindow() {
    }

    /**
     * Get the windowStartTime property: &lt;p&gt;A custom start time for the off-peak window, in Coordinated Universal
     * Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you
     * specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.&lt;/p&gt;.
     * 
     * @return the windowStartTime value.
     */
    public WindowStartTime windowStartTime() {
        return this.windowStartTime;
    }

    /**
     * Set the windowStartTime property: &lt;p&gt;A custom start time for the off-peak window, in Coordinated Universal
     * Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you
     * specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.&lt;/p&gt;.
     * 
     * @param windowStartTime the windowStartTime value to set.
     * @return the OffPeakWindow object itself.
     */
    public OffPeakWindow withWindowStartTime(WindowStartTime windowStartTime) {
        this.windowStartTime = windowStartTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (windowStartTime() != null) {
            windowStartTime().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("windowStartTime", this.windowStartTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OffPeakWindow from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OffPeakWindow if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OffPeakWindow.
     */
    public static OffPeakWindow fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffPeakWindow deserializedOffPeakWindow = new OffPeakWindow();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("windowStartTime".equals(fieldName)) {
                    deserializedOffPeakWindow.windowStartTime = WindowStartTime.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOffPeakWindow;
        });
    }
}
