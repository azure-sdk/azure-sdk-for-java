// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of AuthenticateOidcConfig.
 */
@Fluent
public final class AuthenticateOidcConfig implements JsonSerializable<AuthenticateOidcConfig> {
    /*
     * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
     */
    private Map<String, String> authenticationRequestExtraParams;

    /*
     * The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the
     * path.
     */
    private String authorizationEndpoint;

    /*
     * The OAuth 2.0 client identifier.
     */
    private String clientId;

    /*
     * The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule,
     * you can omit this parameter if you set ``UseExistingClientSecret`` to true.
     */
    private String clientSecret;

    /*
     * The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the
     * path.
     */
    private String issuer;

    /*
     * The behavior if the user is not authenticated. The following are possible values: + deny```` - Return an HTTP 401
     * Unauthorized error. + allow```` - Allow the request to be forwarded to the target. + authenticate```` - Redirect
     * the request to the IdP authorization endpoint. This is the default value.
     */
    private String onUnauthenticatedRequest;

    /*
     * The set of user claims to be requested from the IdP. The default is ``openid``. To verify which scope values your
     * IdP supports and how to separate multiple values, see the documentation for your IdP.
     */
    private String scope;

    /*
     * The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
     */
    private String sessionCookieName;

    /*
     * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
     */
    private String sessionTimeout;

    /*
     * The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
     */
    private String tokenEndpoint;

    /*
     * Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can
     * omit this parameter or set it to false.
     */
    private Boolean useExistingClientSecret;

    /*
     * The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the
     * path.
     */
    private String userInfoEndpoint;

    /**
     * Creates an instance of AuthenticateOidcConfig class.
     */
    public AuthenticateOidcConfig() {
    }

    /**
     * Get the authenticationRequestExtraParams property: The query parameters (up to 10) to include in the redirect
     * request to the authorization endpoint.
     * 
     * @return the authenticationRequestExtraParams value.
     */
    public Map<String, String> authenticationRequestExtraParams() {
        return this.authenticationRequestExtraParams;
    }

    /**
     * Set the authenticationRequestExtraParams property: The query parameters (up to 10) to include in the redirect
     * request to the authorization endpoint.
     * 
     * @param authenticationRequestExtraParams the authenticationRequestExtraParams value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig
        withAuthenticationRequestExtraParams(Map<String, String> authenticationRequestExtraParams) {
        this.authenticationRequestExtraParams = authenticationRequestExtraParams;
        return this;
    }

    /**
     * Get the authorizationEndpoint property: The authorization endpoint of the IdP. This must be a full URL, including
     * the HTTPS protocol, the domain, and the path.
     * 
     * @return the authorizationEndpoint value.
     */
    public String authorizationEndpoint() {
        return this.authorizationEndpoint;
    }

    /**
     * Set the authorizationEndpoint property: The authorization endpoint of the IdP. This must be a full URL, including
     * the HTTPS protocol, the domain, and the path.
     * 
     * @param authorizationEndpoint the authorizationEndpoint value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withAuthorizationEndpoint(String authorizationEndpoint) {
        this.authorizationEndpoint = authorizationEndpoint;
        return this;
    }

    /**
     * Get the clientId property: The OAuth 2.0 client identifier.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: The OAuth 2.0 client identifier.
     * 
     * @param clientId the clientId value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the clientSecret property: The OAuth 2.0 client secret. This parameter is required if you are creating a
     * rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
     * 
     * @return the clientSecret value.
     */
    public String clientSecret() {
        return this.clientSecret;
    }

    /**
     * Set the clientSecret property: The OAuth 2.0 client secret. This parameter is required if you are creating a
     * rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
     * 
     * @param clientSecret the clientSecret value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Get the issuer property: The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS
     * protocol, the domain, and the path.
     * 
     * @return the issuer value.
     */
    public String issuer() {
        return this.issuer;
    }

    /**
     * Set the issuer property: The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS
     * protocol, the domain, and the path.
     * 
     * @param issuer the issuer value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Get the onUnauthenticatedRequest property: The behavior if the user is not authenticated. The following are
     * possible values: + deny```` - Return an HTTP 401 Unauthorized error. + allow```` - Allow the request to be
     * forwarded to the target. + authenticate```` - Redirect the request to the IdP authorization endpoint. This is the
     * default value.
     * 
     * @return the onUnauthenticatedRequest value.
     */
    public String onUnauthenticatedRequest() {
        return this.onUnauthenticatedRequest;
    }

    /**
     * Set the onUnauthenticatedRequest property: The behavior if the user is not authenticated. The following are
     * possible values: + deny```` - Return an HTTP 401 Unauthorized error. + allow```` - Allow the request to be
     * forwarded to the target. + authenticate```` - Redirect the request to the IdP authorization endpoint. This is the
     * default value.
     * 
     * @param onUnauthenticatedRequest the onUnauthenticatedRequest value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withOnUnauthenticatedRequest(String onUnauthenticatedRequest) {
        this.onUnauthenticatedRequest = onUnauthenticatedRequest;
        return this;
    }

    /**
     * Get the scope property: The set of user claims to be requested from the IdP. The default is ``openid``. To verify
     * which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The set of user claims to be requested from the IdP. The default is ``openid``. To verify
     * which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
     * 
     * @param scope the scope value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the sessionCookieName property: The name of the cookie used to maintain session information. The default is
     * AWSELBAuthSessionCookie.
     * 
     * @return the sessionCookieName value.
     */
    public String sessionCookieName() {
        return this.sessionCookieName;
    }

    /**
     * Set the sessionCookieName property: The name of the cookie used to maintain session information. The default is
     * AWSELBAuthSessionCookie.
     * 
     * @param sessionCookieName the sessionCookieName value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withSessionCookieName(String sessionCookieName) {
        this.sessionCookieName = sessionCookieName;
        return this;
    }

    /**
     * Get the sessionTimeout property: The maximum duration of the authentication session, in seconds. The default is
     * 604800 seconds (7 days).
     * 
     * @return the sessionTimeout value.
     */
    public String sessionTimeout() {
        return this.sessionTimeout;
    }

    /**
     * Set the sessionTimeout property: The maximum duration of the authentication session, in seconds. The default is
     * 604800 seconds (7 days).
     * 
     * @param sessionTimeout the sessionTimeout value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withSessionTimeout(String sessionTimeout) {
        this.sessionTimeout = sessionTimeout;
        return this;
    }

    /**
     * Get the tokenEndpoint property: The token endpoint of the IdP. This must be a full URL, including the HTTPS
     * protocol, the domain, and the path.
     * 
     * @return the tokenEndpoint value.
     */
    public String tokenEndpoint() {
        return this.tokenEndpoint;
    }

    /**
     * Set the tokenEndpoint property: The token endpoint of the IdP. This must be a full URL, including the HTTPS
     * protocol, the domain, and the path.
     * 
     * @param tokenEndpoint the tokenEndpoint value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }

    /**
     * Get the useExistingClientSecret property: Indicates whether to use the existing client secret when modifying a
     * rule. If you are creating a rule, you can omit this parameter or set it to false.
     * 
     * @return the useExistingClientSecret value.
     */
    public Boolean useExistingClientSecret() {
        return this.useExistingClientSecret;
    }

    /**
     * Set the useExistingClientSecret property: Indicates whether to use the existing client secret when modifying a
     * rule. If you are creating a rule, you can omit this parameter or set it to false.
     * 
     * @param useExistingClientSecret the useExistingClientSecret value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withUseExistingClientSecret(Boolean useExistingClientSecret) {
        this.useExistingClientSecret = useExistingClientSecret;
        return this;
    }

    /**
     * Get the userInfoEndpoint property: The user info endpoint of the IdP. This must be a full URL, including the
     * HTTPS protocol, the domain, and the path.
     * 
     * @return the userInfoEndpoint value.
     */
    public String userInfoEndpoint() {
        return this.userInfoEndpoint;
    }

    /**
     * Set the userInfoEndpoint property: The user info endpoint of the IdP. This must be a full URL, including the
     * HTTPS protocol, the domain, and the path.
     * 
     * @param userInfoEndpoint the userInfoEndpoint value to set.
     * @return the AuthenticateOidcConfig object itself.
     */
    public AuthenticateOidcConfig withUserInfoEndpoint(String userInfoEndpoint) {
        this.userInfoEndpoint = userInfoEndpoint;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("authenticationRequestExtraParams", this.authenticationRequestExtraParams,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("authorizationEndpoint", this.authorizationEndpoint);
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("clientSecret", this.clientSecret);
        jsonWriter.writeStringField("issuer", this.issuer);
        jsonWriter.writeStringField("onUnauthenticatedRequest", this.onUnauthenticatedRequest);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("sessionCookieName", this.sessionCookieName);
        jsonWriter.writeStringField("sessionTimeout", this.sessionTimeout);
        jsonWriter.writeStringField("tokenEndpoint", this.tokenEndpoint);
        jsonWriter.writeBooleanField("useExistingClientSecret", this.useExistingClientSecret);
        jsonWriter.writeStringField("userInfoEndpoint", this.userInfoEndpoint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthenticateOidcConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthenticateOidcConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthenticateOidcConfig.
     */
    public static AuthenticateOidcConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthenticateOidcConfig deserializedAuthenticateOidcConfig = new AuthenticateOidcConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authenticationRequestExtraParams".equals(fieldName)) {
                    Map<String, String> authenticationRequestExtraParams
                        = reader.readMap(reader1 -> reader1.getString());
                    deserializedAuthenticateOidcConfig.authenticationRequestExtraParams
                        = authenticationRequestExtraParams;
                } else if ("authorizationEndpoint".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.authorizationEndpoint = reader.getString();
                } else if ("clientId".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.clientId = reader.getString();
                } else if ("clientSecret".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.clientSecret = reader.getString();
                } else if ("issuer".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.issuer = reader.getString();
                } else if ("onUnauthenticatedRequest".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.onUnauthenticatedRequest = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.scope = reader.getString();
                } else if ("sessionCookieName".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.sessionCookieName = reader.getString();
                } else if ("sessionTimeout".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.sessionTimeout = reader.getString();
                } else if ("tokenEndpoint".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.tokenEndpoint = reader.getString();
                } else if ("useExistingClientSecret".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.useExistingClientSecret
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("userInfoEndpoint".equals(fieldName)) {
                    deserializedAuthenticateOidcConfig.userInfoEndpoint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthenticateOidcConfig;
        });
    }
}
