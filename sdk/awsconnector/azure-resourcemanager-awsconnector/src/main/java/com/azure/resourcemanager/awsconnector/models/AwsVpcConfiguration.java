// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of AwsVpcConfiguration.
 */
@Fluent
public final class AwsVpcConfiguration implements JsonSerializable<AwsVpcConfiguration> {
    /*
     * Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.
     */
    private AwsVpcConfigurationAssignPublicIp assignPublicIp;

    /*
     * The IDs of the security groups associated with the task or service. If you don't specify a security group, the
     * default security group for the VPC is used. There's a limit of 5 security groups that can be specified per
     * ``AwsVpcConfiguration``. All specified security groups must be from the same VPC.
     */
    private List<String> securityGroups;

    /*
     * The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified
     * per ``AwsVpcConfiguration``. All specified subnets must be from the same VPC.
     */
    private List<String> subnets;

    /**
     * Creates an instance of AwsVpcConfiguration class.
     */
    public AwsVpcConfiguration() {
    }

    /**
     * Get the assignPublicIp property: Whether the task's elastic network interface receives a public IP address. The
     * default value is ``DISABLED``.
     * 
     * @return the assignPublicIp value.
     */
    public AwsVpcConfigurationAssignPublicIp assignPublicIp() {
        return this.assignPublicIp;
    }

    /**
     * Set the assignPublicIp property: Whether the task's elastic network interface receives a public IP address. The
     * default value is ``DISABLED``.
     * 
     * @param assignPublicIp the assignPublicIp value to set.
     * @return the AwsVpcConfiguration object itself.
     */
    public AwsVpcConfiguration withAssignPublicIp(AwsVpcConfigurationAssignPublicIp assignPublicIp) {
        this.assignPublicIp = assignPublicIp;
        return this;
    }

    /**
     * Get the securityGroups property: The IDs of the security groups associated with the task or service. If you don't
     * specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups
     * that can be specified per ``AwsVpcConfiguration``. All specified security groups must be from the same VPC.
     * 
     * @return the securityGroups value.
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }

    /**
     * Set the securityGroups property: The IDs of the security groups associated with the task or service. If you don't
     * specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups
     * that can be specified per ``AwsVpcConfiguration``. All specified security groups must be from the same VPC.
     * 
     * @param securityGroups the securityGroups value to set.
     * @return the AwsVpcConfiguration object itself.
     */
    public AwsVpcConfiguration withSecurityGroups(List<String> securityGroups) {
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Get the subnets property: The IDs of the subnets associated with the task or service. There's a limit of 16
     * subnets that can be specified per ``AwsVpcConfiguration``. All specified subnets must be from the same VPC.
     * 
     * @return the subnets value.
     */
    public List<String> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: The IDs of the subnets associated with the task or service. There's a limit of 16
     * subnets that can be specified per ``AwsVpcConfiguration``. All specified subnets must be from the same VPC.
     * 
     * @param subnets the subnets value to set.
     * @return the AwsVpcConfiguration object itself.
     */
    public AwsVpcConfiguration withSubnets(List<String> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assignPublicIp",
            this.assignPublicIp == null ? null : this.assignPublicIp.toString());
        jsonWriter.writeArrayField("securityGroups", this.securityGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsVpcConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsVpcConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsVpcConfiguration.
     */
    public static AwsVpcConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsVpcConfiguration deserializedAwsVpcConfiguration = new AwsVpcConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assignPublicIp".equals(fieldName)) {
                    deserializedAwsVpcConfiguration.assignPublicIp
                        = AwsVpcConfigurationAssignPublicIp.fromString(reader.getString());
                } else if ("securityGroups".equals(fieldName)) {
                    List<String> securityGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsVpcConfiguration.securityGroups = securityGroups;
                } else if ("subnets".equals(fieldName)) {
                    List<String> subnets = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsVpcConfiguration.subnets = subnets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsVpcConfiguration;
        });
    }
}
