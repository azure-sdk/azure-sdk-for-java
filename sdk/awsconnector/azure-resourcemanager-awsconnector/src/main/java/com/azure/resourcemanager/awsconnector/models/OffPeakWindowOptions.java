// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of OffPeakWindowOptions.
 */
@Fluent
public final class OffPeakWindowOptions implements JsonSerializable<OffPeakWindowOptions> {
    /*
     * <p>Whether to enable an off-peak window.</p> <p>This option is only available when modifying a domain created
     * prior to February 16, 2023, not when creating a new domain. All domains created after this date have the off-peak
     * window enabled by default. You can't disable the off-peak window after it's enabled for a domain.</p>
     */
    private Boolean enabled;

    /*
     * <p>Off-peak window settings for the domain.</p>
     */
    private OffPeakWindow offPeakWindow;

    /**
     * Creates an instance of OffPeakWindowOptions class.
     */
    public OffPeakWindowOptions() {
    }

    /**
     * Get the enabled property: &lt;p&gt;Whether to enable an off-peak window.&lt;/p&gt; &lt;p&gt;This option is only
     * available when modifying a domain created prior to February 16, 2023, not when creating a new domain. All domains
     * created after this date have the off-peak window enabled by default. You can't disable the off-peak window after
     * it's enabled for a domain.&lt;/p&gt;.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: &lt;p&gt;Whether to enable an off-peak window.&lt;/p&gt; &lt;p&gt;This option is only
     * available when modifying a domain created prior to February 16, 2023, not when creating a new domain. All domains
     * created after this date have the off-peak window enabled by default. You can't disable the off-peak window after
     * it's enabled for a domain.&lt;/p&gt;.
     * 
     * @param enabled the enabled value to set.
     * @return the OffPeakWindowOptions object itself.
     */
    public OffPeakWindowOptions withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the offPeakWindow property: &lt;p&gt;Off-peak window settings for the domain.&lt;/p&gt;.
     * 
     * @return the offPeakWindow value.
     */
    public OffPeakWindow offPeakWindow() {
        return this.offPeakWindow;
    }

    /**
     * Set the offPeakWindow property: &lt;p&gt;Off-peak window settings for the domain.&lt;/p&gt;.
     * 
     * @param offPeakWindow the offPeakWindow value to set.
     * @return the OffPeakWindowOptions object itself.
     */
    public OffPeakWindowOptions withOffPeakWindow(OffPeakWindow offPeakWindow) {
        this.offPeakWindow = offPeakWindow;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offPeakWindow() != null) {
            offPeakWindow().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeJsonField("offPeakWindow", this.offPeakWindow);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OffPeakWindowOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OffPeakWindowOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OffPeakWindowOptions.
     */
    public static OffPeakWindowOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffPeakWindowOptions deserializedOffPeakWindowOptions = new OffPeakWindowOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedOffPeakWindowOptions.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("offPeakWindow".equals(fieldName)) {
                    deserializedOffPeakWindowOptions.offPeakWindow = OffPeakWindow.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOffPeakWindowOptions;
        });
    }
}
