// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RoutingRule.
 */
@Fluent
public final class RoutingRule implements JsonSerializable<RoutingRule> {
    /*
     * Container for redirect information. You can redirect requests to another host, to another page, or with another
     * protocol. In the event of an error, you can specify a different error code to return. Specifies how requests are
     * redirected. In the event of an error, you can specify a different error code to return.
     */
    private RedirectRule redirectRule;

    /*
     * A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If
     * request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in
     * HTTP error 4xx, redirect request to another host where you might process the error. A container for describing a
     * condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the
     * ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect
     * request to another host where you might process the error.
     */
    private RoutingRuleCondition routingRuleCondition;

    /**
     * Creates an instance of RoutingRule class.
     */
    public RoutingRule() {
    }

    /**
     * Get the redirectRule property: Container for redirect information. You can redirect requests to another host, to
     * another page, or with another protocol. In the event of an error, you can specify a different error code to
     * return. Specifies how requests are redirected. In the event of an error, you can specify a different error code
     * to return.
     * 
     * @return the redirectRule value.
     */
    public RedirectRule redirectRule() {
        return this.redirectRule;
    }

    /**
     * Set the redirectRule property: Container for redirect information. You can redirect requests to another host, to
     * another page, or with another protocol. In the event of an error, you can specify a different error code to
     * return. Specifies how requests are redirected. In the event of an error, you can specify a different error code
     * to return.
     * 
     * @param redirectRule the redirectRule value to set.
     * @return the RoutingRule object itself.
     */
    public RoutingRule withRedirectRule(RedirectRule redirectRule) {
        this.redirectRule = redirectRule;
        return this;
    }

    /**
     * Get the routingRuleCondition property: A container for describing a condition that must be met for the specified
     * redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the
     * ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might
     * process the error. A container for describing a condition that must be met for the specified redirect to apply.
     * For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If
     * request results in HTTP error 4xx, redirect request to another host where you might process the error.
     * 
     * @return the routingRuleCondition value.
     */
    public RoutingRuleCondition routingRuleCondition() {
        return this.routingRuleCondition;
    }

    /**
     * Set the routingRuleCondition property: A container for describing a condition that must be met for the specified
     * redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the
     * ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might
     * process the error. A container for describing a condition that must be met for the specified redirect to apply.
     * For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If
     * request results in HTTP error 4xx, redirect request to another host where you might process the error.
     * 
     * @param routingRuleCondition the routingRuleCondition value to set.
     * @return the RoutingRule object itself.
     */
    public RoutingRule withRoutingRuleCondition(RoutingRuleCondition routingRuleCondition) {
        this.routingRuleCondition = routingRuleCondition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (redirectRule() != null) {
            redirectRule().validate();
        }
        if (routingRuleCondition() != null) {
            routingRuleCondition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("redirectRule", this.redirectRule);
        jsonWriter.writeJsonField("routingRuleCondition", this.routingRuleCondition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoutingRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoutingRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoutingRule.
     */
    public static RoutingRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoutingRule deserializedRoutingRule = new RoutingRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("redirectRule".equals(fieldName)) {
                    deserializedRoutingRule.redirectRule = RedirectRule.fromJson(reader);
                } else if ("routingRuleCondition".equals(fieldName)) {
                    deserializedRoutingRule.routingRuleCondition = RoutingRuleCondition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoutingRule;
        });
    }
}
