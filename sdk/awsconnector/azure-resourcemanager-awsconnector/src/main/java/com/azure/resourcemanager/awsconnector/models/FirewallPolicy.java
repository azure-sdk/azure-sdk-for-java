// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of FirewallPolicy.
 */
@Fluent
public final class FirewallPolicy implements JsonSerializable<FirewallPolicy> {
    /*
     * Property policyVariables
     */
    private RuleVariablesModel policyVariables;

    /*
     * Property statefulDefaultActions
     */
    private List<String> statefulDefaultActions;

    /*
     * Property statefulEngineOptions
     */
    private StatefulEngineOptions statefulEngineOptions;

    /*
     * Property statefulRuleGroupReferences
     */
    private List<StatefulRuleGroupReference> statefulRuleGroupReferences;

    /*
     * Property statelessCustomActions
     */
    private List<CustomAction> statelessCustomActions;

    /*
     * Property statelessDefaultActions
     */
    private List<String> statelessDefaultActions;

    /*
     * Property statelessFragmentDefaultActions
     */
    private List<String> statelessFragmentDefaultActions;

    /*
     * Property statelessRuleGroupReferences
     */
    private List<StatelessRuleGroupReference> statelessRuleGroupReferences;

    /*
     * A resource ARN.
     */
    private String tlsInspectionConfigurationArn;

    /**
     * Creates an instance of FirewallPolicy class.
     */
    public FirewallPolicy() {
    }

    /**
     * Get the policyVariables property: Property policyVariables.
     * 
     * @return the policyVariables value.
     */
    public RuleVariablesModel policyVariables() {
        return this.policyVariables;
    }

    /**
     * Set the policyVariables property: Property policyVariables.
     * 
     * @param policyVariables the policyVariables value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withPolicyVariables(RuleVariablesModel policyVariables) {
        this.policyVariables = policyVariables;
        return this;
    }

    /**
     * Get the statefulDefaultActions property: Property statefulDefaultActions.
     * 
     * @return the statefulDefaultActions value.
     */
    public List<String> statefulDefaultActions() {
        return this.statefulDefaultActions;
    }

    /**
     * Set the statefulDefaultActions property: Property statefulDefaultActions.
     * 
     * @param statefulDefaultActions the statefulDefaultActions value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withStatefulDefaultActions(List<String> statefulDefaultActions) {
        this.statefulDefaultActions = statefulDefaultActions;
        return this;
    }

    /**
     * Get the statefulEngineOptions property: Property statefulEngineOptions.
     * 
     * @return the statefulEngineOptions value.
     */
    public StatefulEngineOptions statefulEngineOptions() {
        return this.statefulEngineOptions;
    }

    /**
     * Set the statefulEngineOptions property: Property statefulEngineOptions.
     * 
     * @param statefulEngineOptions the statefulEngineOptions value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withStatefulEngineOptions(StatefulEngineOptions statefulEngineOptions) {
        this.statefulEngineOptions = statefulEngineOptions;
        return this;
    }

    /**
     * Get the statefulRuleGroupReferences property: Property statefulRuleGroupReferences.
     * 
     * @return the statefulRuleGroupReferences value.
     */
    public List<StatefulRuleGroupReference> statefulRuleGroupReferences() {
        return this.statefulRuleGroupReferences;
    }

    /**
     * Set the statefulRuleGroupReferences property: Property statefulRuleGroupReferences.
     * 
     * @param statefulRuleGroupReferences the statefulRuleGroupReferences value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy
        withStatefulRuleGroupReferences(List<StatefulRuleGroupReference> statefulRuleGroupReferences) {
        this.statefulRuleGroupReferences = statefulRuleGroupReferences;
        return this;
    }

    /**
     * Get the statelessCustomActions property: Property statelessCustomActions.
     * 
     * @return the statelessCustomActions value.
     */
    public List<CustomAction> statelessCustomActions() {
        return this.statelessCustomActions;
    }

    /**
     * Set the statelessCustomActions property: Property statelessCustomActions.
     * 
     * @param statelessCustomActions the statelessCustomActions value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withStatelessCustomActions(List<CustomAction> statelessCustomActions) {
        this.statelessCustomActions = statelessCustomActions;
        return this;
    }

    /**
     * Get the statelessDefaultActions property: Property statelessDefaultActions.
     * 
     * @return the statelessDefaultActions value.
     */
    public List<String> statelessDefaultActions() {
        return this.statelessDefaultActions;
    }

    /**
     * Set the statelessDefaultActions property: Property statelessDefaultActions.
     * 
     * @param statelessDefaultActions the statelessDefaultActions value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withStatelessDefaultActions(List<String> statelessDefaultActions) {
        this.statelessDefaultActions = statelessDefaultActions;
        return this;
    }

    /**
     * Get the statelessFragmentDefaultActions property: Property statelessFragmentDefaultActions.
     * 
     * @return the statelessFragmentDefaultActions value.
     */
    public List<String> statelessFragmentDefaultActions() {
        return this.statelessFragmentDefaultActions;
    }

    /**
     * Set the statelessFragmentDefaultActions property: Property statelessFragmentDefaultActions.
     * 
     * @param statelessFragmentDefaultActions the statelessFragmentDefaultActions value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withStatelessFragmentDefaultActions(List<String> statelessFragmentDefaultActions) {
        this.statelessFragmentDefaultActions = statelessFragmentDefaultActions;
        return this;
    }

    /**
     * Get the statelessRuleGroupReferences property: Property statelessRuleGroupReferences.
     * 
     * @return the statelessRuleGroupReferences value.
     */
    public List<StatelessRuleGroupReference> statelessRuleGroupReferences() {
        return this.statelessRuleGroupReferences;
    }

    /**
     * Set the statelessRuleGroupReferences property: Property statelessRuleGroupReferences.
     * 
     * @param statelessRuleGroupReferences the statelessRuleGroupReferences value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy
        withStatelessRuleGroupReferences(List<StatelessRuleGroupReference> statelessRuleGroupReferences) {
        this.statelessRuleGroupReferences = statelessRuleGroupReferences;
        return this;
    }

    /**
     * Get the tlsInspectionConfigurationArn property: A resource ARN.
     * 
     * @return the tlsInspectionConfigurationArn value.
     */
    public String tlsInspectionConfigurationArn() {
        return this.tlsInspectionConfigurationArn;
    }

    /**
     * Set the tlsInspectionConfigurationArn property: A resource ARN.
     * 
     * @param tlsInspectionConfigurationArn the tlsInspectionConfigurationArn value to set.
     * @return the FirewallPolicy object itself.
     */
    public FirewallPolicy withTlsInspectionConfigurationArn(String tlsInspectionConfigurationArn) {
        this.tlsInspectionConfigurationArn = tlsInspectionConfigurationArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyVariables() != null) {
            policyVariables().validate();
        }
        if (statefulEngineOptions() != null) {
            statefulEngineOptions().validate();
        }
        if (statefulRuleGroupReferences() != null) {
            statefulRuleGroupReferences().forEach(e -> e.validate());
        }
        if (statelessCustomActions() != null) {
            statelessCustomActions().forEach(e -> e.validate());
        }
        if (statelessRuleGroupReferences() != null) {
            statelessRuleGroupReferences().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("policyVariables", this.policyVariables);
        jsonWriter.writeArrayField("statefulDefaultActions", this.statefulDefaultActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("statefulEngineOptions", this.statefulEngineOptions);
        jsonWriter.writeArrayField("statefulRuleGroupReferences", this.statefulRuleGroupReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("statelessCustomActions", this.statelessCustomActions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("statelessDefaultActions", this.statelessDefaultActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("statelessFragmentDefaultActions", this.statelessFragmentDefaultActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("statelessRuleGroupReferences", this.statelessRuleGroupReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("tlsInspectionConfigurationArn", this.tlsInspectionConfigurationArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FirewallPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FirewallPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FirewallPolicy.
     */
    public static FirewallPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FirewallPolicy deserializedFirewallPolicy = new FirewallPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyVariables".equals(fieldName)) {
                    deserializedFirewallPolicy.policyVariables = RuleVariablesModel.fromJson(reader);
                } else if ("statefulDefaultActions".equals(fieldName)) {
                    List<String> statefulDefaultActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedFirewallPolicy.statefulDefaultActions = statefulDefaultActions;
                } else if ("statefulEngineOptions".equals(fieldName)) {
                    deserializedFirewallPolicy.statefulEngineOptions = StatefulEngineOptions.fromJson(reader);
                } else if ("statefulRuleGroupReferences".equals(fieldName)) {
                    List<StatefulRuleGroupReference> statefulRuleGroupReferences
                        = reader.readArray(reader1 -> StatefulRuleGroupReference.fromJson(reader1));
                    deserializedFirewallPolicy.statefulRuleGroupReferences = statefulRuleGroupReferences;
                } else if ("statelessCustomActions".equals(fieldName)) {
                    List<CustomAction> statelessCustomActions
                        = reader.readArray(reader1 -> CustomAction.fromJson(reader1));
                    deserializedFirewallPolicy.statelessCustomActions = statelessCustomActions;
                } else if ("statelessDefaultActions".equals(fieldName)) {
                    List<String> statelessDefaultActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedFirewallPolicy.statelessDefaultActions = statelessDefaultActions;
                } else if ("statelessFragmentDefaultActions".equals(fieldName)) {
                    List<String> statelessFragmentDefaultActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedFirewallPolicy.statelessFragmentDefaultActions = statelessFragmentDefaultActions;
                } else if ("statelessRuleGroupReferences".equals(fieldName)) {
                    List<StatelessRuleGroupReference> statelessRuleGroupReferences
                        = reader.readArray(reader1 -> StatelessRuleGroupReference.fromJson(reader1));
                    deserializedFirewallPolicy.statelessRuleGroupReferences = statelessRuleGroupReferences;
                } else if ("tlsInspectionConfigurationArn".equals(fieldName)) {
                    deserializedFirewallPolicy.tlsInspectionConfigurationArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFirewallPolicy;
        });
    }
}
