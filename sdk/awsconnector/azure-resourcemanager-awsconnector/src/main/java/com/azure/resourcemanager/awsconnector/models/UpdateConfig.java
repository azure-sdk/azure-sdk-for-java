// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of UpdateConfig.
 */
@Fluent
public final class UpdateConfig implements JsonSerializable<UpdateConfig> {
    /*
     * The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This
     * value or maxUnavailablePercentage is required to have a value.The maximum number is 100.
     */
    private Integer maxUnavailable;

    /*
     * The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in
     * parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
     */
    private Integer maxUnavailablePercentage;

    /**
     * Creates an instance of UpdateConfig class.
     */
    public UpdateConfig() {
    }

    /**
     * Get the maxUnavailable property: The maximum number of nodes unavailable at once during a version update. Nodes
     * will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum
     * number is 100.
     * 
     * @return the maxUnavailable value.
     */
    public Integer maxUnavailable() {
        return this.maxUnavailable;
    }

    /**
     * Set the maxUnavailable property: The maximum number of nodes unavailable at once during a version update. Nodes
     * will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum
     * number is 100.
     * 
     * @param maxUnavailable the maxUnavailable value to set.
     * @return the UpdateConfig object itself.
     */
    public UpdateConfig withMaxUnavailable(Integer maxUnavailable) {
        this.maxUnavailable = maxUnavailable;
        return this;
    }

    /**
     * Get the maxUnavailablePercentage property: The maximum percentage of nodes unavailable during a version update.
     * This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is
     * required to have a value.
     * 
     * @return the maxUnavailablePercentage value.
     */
    public Integer maxUnavailablePercentage() {
        return this.maxUnavailablePercentage;
    }

    /**
     * Set the maxUnavailablePercentage property: The maximum percentage of nodes unavailable during a version update.
     * This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is
     * required to have a value.
     * 
     * @param maxUnavailablePercentage the maxUnavailablePercentage value to set.
     * @return the UpdateConfig object itself.
     */
    public UpdateConfig withMaxUnavailablePercentage(Integer maxUnavailablePercentage) {
        this.maxUnavailablePercentage = maxUnavailablePercentage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxUnavailable", this.maxUnavailable);
        jsonWriter.writeNumberField("maxUnavailablePercentage", this.maxUnavailablePercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateConfig.
     */
    public static UpdateConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateConfig deserializedUpdateConfig = new UpdateConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxUnavailable".equals(fieldName)) {
                    deserializedUpdateConfig.maxUnavailable = reader.getNullable(JsonReader::getInt);
                } else if ("maxUnavailablePercentage".equals(fieldName)) {
                    deserializedUpdateConfig.maxUnavailablePercentage = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateConfig;
        });
    }
}
