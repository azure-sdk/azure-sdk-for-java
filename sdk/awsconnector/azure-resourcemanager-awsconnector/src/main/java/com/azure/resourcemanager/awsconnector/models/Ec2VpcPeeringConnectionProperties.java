// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of Ec2VPCPeeringConnection.
 */
@Fluent
public final class Ec2VpcPeeringConnectionProperties implements JsonSerializable<Ec2VpcPeeringConnectionProperties> {
    /*
     * AWS Properties
     */
    private AwsEc2VpcPeeringConnectionProperties awsProperties;

    /*
     * Public Cloud Connectors Resource ID
     */
    private String publicCloudConnectorsResourceId;

    /*
     * AWS Account ID
     */
    private String awsAccountId;

    /*
     * Amazon Resource Name (ARN)
     */
    private String arn;

    /*
     * Public Cloud Resource Name
     */
    private String publicCloudResourceName;

    /*
     * AWS Source Schema
     */
    private String awsSourceSchema;

    /*
     * AWS Region
     */
    private String awsRegion;

    /*
     * AWS Tags
     */
    private Map<String, String> awsTags;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of Ec2VpcPeeringConnectionProperties class.
     */
    public Ec2VpcPeeringConnectionProperties() {
    }

    /**
     * Get the awsProperties property: AWS Properties.
     * 
     * @return the awsProperties value.
     */
    public AwsEc2VpcPeeringConnectionProperties awsProperties() {
        return this.awsProperties;
    }

    /**
     * Set the awsProperties property: AWS Properties.
     * 
     * @param awsProperties the awsProperties value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withAwsProperties(AwsEc2VpcPeeringConnectionProperties awsProperties) {
        this.awsProperties = awsProperties;
        return this;
    }

    /**
     * Get the publicCloudConnectorsResourceId property: Public Cloud Connectors Resource ID.
     * 
     * @return the publicCloudConnectorsResourceId value.
     */
    public String publicCloudConnectorsResourceId() {
        return this.publicCloudConnectorsResourceId;
    }

    /**
     * Set the publicCloudConnectorsResourceId property: Public Cloud Connectors Resource ID.
     * 
     * @param publicCloudConnectorsResourceId the publicCloudConnectorsResourceId value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties
        withPublicCloudConnectorsResourceId(String publicCloudConnectorsResourceId) {
        this.publicCloudConnectorsResourceId = publicCloudConnectorsResourceId;
        return this;
    }

    /**
     * Get the awsAccountId property: AWS Account ID.
     * 
     * @return the awsAccountId value.
     */
    public String awsAccountId() {
        return this.awsAccountId;
    }

    /**
     * Set the awsAccountId property: AWS Account ID.
     * 
     * @param awsAccountId the awsAccountId value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withAwsAccountId(String awsAccountId) {
        this.awsAccountId = awsAccountId;
        return this;
    }

    /**
     * Get the arn property: Amazon Resource Name (ARN).
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Amazon Resource Name (ARN).
     * 
     * @param arn the arn value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the publicCloudResourceName property: Public Cloud Resource Name.
     * 
     * @return the publicCloudResourceName value.
     */
    public String publicCloudResourceName() {
        return this.publicCloudResourceName;
    }

    /**
     * Set the publicCloudResourceName property: Public Cloud Resource Name.
     * 
     * @param publicCloudResourceName the publicCloudResourceName value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withPublicCloudResourceName(String publicCloudResourceName) {
        this.publicCloudResourceName = publicCloudResourceName;
        return this;
    }

    /**
     * Get the awsSourceSchema property: AWS Source Schema.
     * 
     * @return the awsSourceSchema value.
     */
    public String awsSourceSchema() {
        return this.awsSourceSchema;
    }

    /**
     * Set the awsSourceSchema property: AWS Source Schema.
     * 
     * @param awsSourceSchema the awsSourceSchema value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withAwsSourceSchema(String awsSourceSchema) {
        this.awsSourceSchema = awsSourceSchema;
        return this;
    }

    /**
     * Get the awsRegion property: AWS Region.
     * 
     * @return the awsRegion value.
     */
    public String awsRegion() {
        return this.awsRegion;
    }

    /**
     * Set the awsRegion property: AWS Region.
     * 
     * @param awsRegion the awsRegion value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withAwsRegion(String awsRegion) {
        this.awsRegion = awsRegion;
        return this;
    }

    /**
     * Get the awsTags property: AWS Tags.
     * 
     * @return the awsTags value.
     */
    public Map<String, String> awsTags() {
        return this.awsTags;
    }

    /**
     * Set the awsTags property: AWS Tags.
     * 
     * @param awsTags the awsTags value to set.
     * @return the Ec2VpcPeeringConnectionProperties object itself.
     */
    public Ec2VpcPeeringConnectionProperties withAwsTags(Map<String, String> awsTags) {
        this.awsTags = awsTags;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (awsProperties() != null) {
            awsProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("awsProperties", this.awsProperties);
        jsonWriter.writeStringField("publicCloudConnectorsResourceId", this.publicCloudConnectorsResourceId);
        jsonWriter.writeStringField("awsAccountId", this.awsAccountId);
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("publicCloudResourceName", this.publicCloudResourceName);
        jsonWriter.writeStringField("awsSourceSchema", this.awsSourceSchema);
        jsonWriter.writeStringField("awsRegion", this.awsRegion);
        jsonWriter.writeMapField("awsTags", this.awsTags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ec2VpcPeeringConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ec2VpcPeeringConnectionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the Ec2VpcPeeringConnectionProperties.
     */
    public static Ec2VpcPeeringConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Ec2VpcPeeringConnectionProperties deserializedEc2VpcPeeringConnectionProperties
                = new Ec2VpcPeeringConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("awsProperties".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.awsProperties
                        = AwsEc2VpcPeeringConnectionProperties.fromJson(reader);
                } else if ("publicCloudConnectorsResourceId".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.publicCloudConnectorsResourceId = reader.getString();
                } else if ("awsAccountId".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.awsAccountId = reader.getString();
                } else if ("arn".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.arn = reader.getString();
                } else if ("publicCloudResourceName".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.publicCloudResourceName = reader.getString();
                } else if ("awsSourceSchema".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.awsSourceSchema = reader.getString();
                } else if ("awsRegion".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.awsRegion = reader.getString();
                } else if ("awsTags".equals(fieldName)) {
                    Map<String, String> awsTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedEc2VpcPeeringConnectionProperties.awsTags = awsTags;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEc2VpcPeeringConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEc2VpcPeeringConnectionProperties;
        });
    }
}
