// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of UserPoolConfig.
 */
@Fluent
public final class UserPoolConfig implements JsonSerializable<UserPoolConfig> {
    /*
     * <p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't
     * set, no filtering is applied.</p>
     */
    private String appIdClientRegex;

    /*
     * <p>The Amazon Web Services Region in which the user pool was created.</p>
     */
    private String awsRegion;

    /*
     * <p>The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool
     * authentication doesn't match the Amazon Cognito user pool configuration.</p>
     */
    private DefaultActionEnumValue defaultAction;

    /*
     * <p>The user pool ID.</p>
     */
    private String userPoolId;

    /**
     * Creates an instance of UserPoolConfig class.
     */
    public UserPoolConfig() {
    }

    /**
     * Get the appIdClientRegex property: &lt;p&gt;A regular expression for validating the incoming Amazon Cognito user
     * pool app client ID. If this value isn't set, no filtering is applied.&lt;/p&gt;.
     * 
     * @return the appIdClientRegex value.
     */
    public String appIdClientRegex() {
        return this.appIdClientRegex;
    }

    /**
     * Set the appIdClientRegex property: &lt;p&gt;A regular expression for validating the incoming Amazon Cognito user
     * pool app client ID. If this value isn't set, no filtering is applied.&lt;/p&gt;.
     * 
     * @param appIdClientRegex the appIdClientRegex value to set.
     * @return the UserPoolConfig object itself.
     */
    public UserPoolConfig withAppIdClientRegex(String appIdClientRegex) {
        this.appIdClientRegex = appIdClientRegex;
        return this;
    }

    /**
     * Get the awsRegion property: &lt;p&gt;The Amazon Web Services Region in which the user pool was
     * created.&lt;/p&gt;.
     * 
     * @return the awsRegion value.
     */
    public String awsRegion() {
        return this.awsRegion;
    }

    /**
     * Set the awsRegion property: &lt;p&gt;The Amazon Web Services Region in which the user pool was
     * created.&lt;/p&gt;.
     * 
     * @param awsRegion the awsRegion value to set.
     * @return the UserPoolConfig object itself.
     */
    public UserPoolConfig withAwsRegion(String awsRegion) {
        this.awsRegion = awsRegion;
        return this;
    }

    /**
     * Get the defaultAction property: &lt;p&gt;The action that you want your GraphQL API to take when a request that
     * uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.&lt;/p&gt;.
     * 
     * @return the defaultAction value.
     */
    public DefaultActionEnumValue defaultAction() {
        return this.defaultAction;
    }

    /**
     * Set the defaultAction property: &lt;p&gt;The action that you want your GraphQL API to take when a request that
     * uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.&lt;/p&gt;.
     * 
     * @param defaultAction the defaultAction value to set.
     * @return the UserPoolConfig object itself.
     */
    public UserPoolConfig withDefaultAction(DefaultActionEnumValue defaultAction) {
        this.defaultAction = defaultAction;
        return this;
    }

    /**
     * Get the userPoolId property: &lt;p&gt;The user pool ID.&lt;/p&gt;.
     * 
     * @return the userPoolId value.
     */
    public String userPoolId() {
        return this.userPoolId;
    }

    /**
     * Set the userPoolId property: &lt;p&gt;The user pool ID.&lt;/p&gt;.
     * 
     * @param userPoolId the userPoolId value to set.
     * @return the UserPoolConfig object itself.
     */
    public UserPoolConfig withUserPoolId(String userPoolId) {
        this.userPoolId = userPoolId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultAction() != null) {
            defaultAction().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("appIdClientRegex", this.appIdClientRegex);
        jsonWriter.writeStringField("awsRegion", this.awsRegion);
        jsonWriter.writeJsonField("defaultAction", this.defaultAction);
        jsonWriter.writeStringField("userPoolId", this.userPoolId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserPoolConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserPoolConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserPoolConfig.
     */
    public static UserPoolConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserPoolConfig deserializedUserPoolConfig = new UserPoolConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appIdClientRegex".equals(fieldName)) {
                    deserializedUserPoolConfig.appIdClientRegex = reader.getString();
                } else if ("awsRegion".equals(fieldName)) {
                    deserializedUserPoolConfig.awsRegion = reader.getString();
                } else if ("defaultAction".equals(fieldName)) {
                    deserializedUserPoolConfig.defaultAction = DefaultActionEnumValue.fromJson(reader);
                } else if ("userPoolId".equals(fieldName)) {
                    deserializedUserPoolConfig.userPoolId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserPoolConfig;
        });
    }
}
