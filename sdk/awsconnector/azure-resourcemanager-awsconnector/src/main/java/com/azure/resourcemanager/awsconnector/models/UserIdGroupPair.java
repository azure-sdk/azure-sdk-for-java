// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of UserIdGroupPair.
 */
@Fluent
public final class UserIdGroupPair implements JsonSerializable<UserIdGroupPair> {
    /*
     * <p>A description for the security group rule that references this user ID group pair.</p> <p>Constraints: Up to
     * 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*</p>
     */
    private String description;

    /*
     * <p>The ID of the security group.</p>
     */
    private String groupId;

    /*
     * <p>[Default VPC] The name of the security group. For a security group in a nondefault VPC, use the security group
     * ID. </p> <p>For a referenced security group in another VPC, this value is not returned if the referenced security
     * group is deleted.</p>
     */
    private String groupName;

    /*
     * <p>The status of a VPC peering connection, if applicable.</p>
     */
    private String peeringStatus;

    /*
     * <p>The ID of an Amazon Web Services account.</p> <p>For a referenced security group in another VPC, the account
     * ID of the referenced security group is returned in the response. If the referenced security group is deleted,
     * this value is not returned.</p>
     */
    private String userId;

    /*
     * <p>The ID of the VPC for the referenced security group, if applicable.</p>
     */
    private String vpcId;

    /*
     * <p>The ID of the VPC peering connection, if applicable.</p>
     */
    private String vpcPeeringConnectionId;

    /**
     * Creates an instance of UserIdGroupPair class.
     */
    public UserIdGroupPair() {
    }

    /**
     * Get the description property: &lt;p&gt;A description for the security group rule that references this user ID
     * group pair.&lt;/p&gt; &lt;p&gt;Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9,
     * spaces, and ._-:/()#,&#064;[]+=;{}!$*&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description for the security group rule that references this user ID
     * group pair.&lt;/p&gt; &lt;p&gt;Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9,
     * spaces, and ._-:/()#,&#064;[]+=;{}!$*&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the groupId property: &lt;p&gt;The ID of the security group.&lt;/p&gt;.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: &lt;p&gt;The ID of the security group.&lt;/p&gt;.
     * 
     * @param groupId the groupId value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the groupName property: &lt;p&gt;[Default VPC] The name of the security group. For a security group in a
     * nondefault VPC, use the security group ID. &lt;/p&gt; &lt;p&gt;For a referenced security group in another VPC,
     * this value is not returned if the referenced security group is deleted.&lt;/p&gt;.
     * 
     * @return the groupName value.
     */
    public String groupName() {
        return this.groupName;
    }

    /**
     * Set the groupName property: &lt;p&gt;[Default VPC] The name of the security group. For a security group in a
     * nondefault VPC, use the security group ID. &lt;/p&gt; &lt;p&gt;For a referenced security group in another VPC,
     * this value is not returned if the referenced security group is deleted.&lt;/p&gt;.
     * 
     * @param groupName the groupName value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    /**
     * Get the peeringStatus property: &lt;p&gt;The status of a VPC peering connection, if applicable.&lt;/p&gt;.
     * 
     * @return the peeringStatus value.
     */
    public String peeringStatus() {
        return this.peeringStatus;
    }

    /**
     * Set the peeringStatus property: &lt;p&gt;The status of a VPC peering connection, if applicable.&lt;/p&gt;.
     * 
     * @param peeringStatus the peeringStatus value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withPeeringStatus(String peeringStatus) {
        this.peeringStatus = peeringStatus;
        return this;
    }

    /**
     * Get the userId property: &lt;p&gt;The ID of an Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For a referenced
     * security group in another VPC, the account ID of the referenced security group is returned in the response. If
     * the referenced security group is deleted, this value is not returned.&lt;/p&gt;.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: &lt;p&gt;The ID of an Amazon Web Services account.&lt;/p&gt; &lt;p&gt;For a referenced
     * security group in another VPC, the account ID of the referenced security group is returned in the response. If
     * the referenced security group is deleted, this value is not returned.&lt;/p&gt;.
     * 
     * @param userId the userId value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID of the VPC for the referenced security group, if applicable.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID of the VPC for the referenced security group, if applicable.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Get the vpcPeeringConnectionId property: &lt;p&gt;The ID of the VPC peering connection, if applicable.&lt;/p&gt;.
     * 
     * @return the vpcPeeringConnectionId value.
     */
    public String vpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId;
    }

    /**
     * Set the vpcPeeringConnectionId property: &lt;p&gt;The ID of the VPC peering connection, if applicable.&lt;/p&gt;.
     * 
     * @param vpcPeeringConnectionId the vpcPeeringConnectionId value to set.
     * @return the UserIdGroupPair object itself.
     */
    public UserIdGroupPair withVpcPeeringConnectionId(String vpcPeeringConnectionId) {
        this.vpcPeeringConnectionId = vpcPeeringConnectionId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("groupId", this.groupId);
        jsonWriter.writeStringField("groupName", this.groupName);
        jsonWriter.writeStringField("peeringStatus", this.peeringStatus);
        jsonWriter.writeStringField("userId", this.userId);
        jsonWriter.writeStringField("vpcId", this.vpcId);
        jsonWriter.writeStringField("vpcPeeringConnectionId", this.vpcPeeringConnectionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserIdGroupPair from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserIdGroupPair if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserIdGroupPair.
     */
    public static UserIdGroupPair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserIdGroupPair deserializedUserIdGroupPair = new UserIdGroupPair();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedUserIdGroupPair.description = reader.getString();
                } else if ("groupId".equals(fieldName)) {
                    deserializedUserIdGroupPair.groupId = reader.getString();
                } else if ("groupName".equals(fieldName)) {
                    deserializedUserIdGroupPair.groupName = reader.getString();
                } else if ("peeringStatus".equals(fieldName)) {
                    deserializedUserIdGroupPair.peeringStatus = reader.getString();
                } else if ("userId".equals(fieldName)) {
                    deserializedUserIdGroupPair.userId = reader.getString();
                } else if ("vpcId".equals(fieldName)) {
                    deserializedUserIdGroupPair.vpcId = reader.getString();
                } else if ("vpcPeeringConnectionId".equals(fieldName)) {
                    deserializedUserIdGroupPair.vpcPeeringConnectionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserIdGroupPair;
        });
    }
}
