// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of DefaultRetention.
 */
@Fluent
public final class DefaultRetention implements JsonSerializable<DefaultRetention> {
    /*
     * The number of days that you want to specify for the default retention period. If Object Lock is turned on, you
     * must specify ``Mode`` and specify either ``Days`` or ``Years``.
     */
    private Integer days;

    /*
     * The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object
     * Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
     */
    private DefaultRetentionMode mode;

    /*
     * The number of years that you want to specify for the default retention period. If Object Lock is turned on, you
     * must specify ``Mode`` and specify either ``Days`` or ``Years``.
     */
    private Integer years;

    /**
     * Creates an instance of DefaultRetention class.
     */
    public DefaultRetention() {
    }

    /**
     * Get the days property: The number of days that you want to specify for the default retention period. If Object
     * Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
     * 
     * @return the days value.
     */
    public Integer days() {
        return this.days;
    }

    /**
     * Set the days property: The number of days that you want to specify for the default retention period. If Object
     * Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
     * 
     * @param days the days value to set.
     * @return the DefaultRetention object itself.
     */
    public DefaultRetention withDays(Integer days) {
        this.days = days;
        return this;
    }

    /**
     * Get the mode property: The default Object Lock retention mode you want to apply to new objects placed in the
     * specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or
     * ``Years``.
     * 
     * @return the mode value.
     */
    public DefaultRetentionMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The default Object Lock retention mode you want to apply to new objects placed in the
     * specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or
     * ``Years``.
     * 
     * @param mode the mode value to set.
     * @return the DefaultRetention object itself.
     */
    public DefaultRetention withMode(DefaultRetentionMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the years property: The number of years that you want to specify for the default retention period. If Object
     * Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
     * 
     * @return the years value.
     */
    public Integer years() {
        return this.years;
    }

    /**
     * Set the years property: The number of years that you want to specify for the default retention period. If Object
     * Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
     * 
     * @param years the years value to set.
     * @return the DefaultRetention object itself.
     */
    public DefaultRetention withYears(Integer years) {
        this.years = years;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("days", this.days);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeNumberField("years", this.years);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultRetention from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultRetention if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefaultRetention.
     */
    public static DefaultRetention fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefaultRetention deserializedDefaultRetention = new DefaultRetention();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("days".equals(fieldName)) {
                    deserializedDefaultRetention.days = reader.getNullable(JsonReader::getInt);
                } else if ("mode".equals(fieldName)) {
                    deserializedDefaultRetention.mode = DefaultRetentionMode.fromString(reader.getString());
                } else if ("years".equals(fieldName)) {
                    deserializedDefaultRetention.years = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefaultRetention;
        });
    }
}
