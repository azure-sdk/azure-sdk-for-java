// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of InstanceStatusEvent.
 */
@Fluent
public final class InstanceStatusEvent implements JsonSerializable<InstanceStatusEvent> {
    /*
     * <p>The event code.</p>
     */
    private EventCodeEnumValue code;

    /*
     * <p>A description of the event.</p> <p>After a scheduled event is completed, it can still be described for up to a
     * week. If the event has been completed, this description starts with the following text: [Completed].</p>
     */
    private String description;

    /*
     * <p>The ID of the event.</p>
     */
    private String instanceEventId;

    /*
     * <p>The latest scheduled end time for the event.</p>
     */
    private OffsetDateTime notAfter;

    /*
     * <p>The earliest scheduled start time for the event.</p>
     */
    private OffsetDateTime notBefore;

    /*
     * <p>The deadline for starting the event.</p>
     */
    private OffsetDateTime notBeforeDeadline;

    /**
     * Creates an instance of InstanceStatusEvent class.
     */
    public InstanceStatusEvent() {
    }

    /**
     * Get the code property: &lt;p&gt;The event code.&lt;/p&gt;.
     * 
     * @return the code value.
     */
    public EventCodeEnumValue code() {
        return this.code;
    }

    /**
     * Set the code property: &lt;p&gt;The event code.&lt;/p&gt;.
     * 
     * @param code the code value to set.
     * @return the InstanceStatusEvent object itself.
     */
    public InstanceStatusEvent withCode(EventCodeEnumValue code) {
        this.code = code;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;A description of the event.&lt;/p&gt; &lt;p&gt;After a scheduled event is
     * completed, it can still be described for up to a week. If the event has been completed, this description starts
     * with the following text: [Completed].&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description of the event.&lt;/p&gt; &lt;p&gt;After a scheduled event is
     * completed, it can still be described for up to a week. If the event has been completed, this description starts
     * with the following text: [Completed].&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the InstanceStatusEvent object itself.
     */
    public InstanceStatusEvent withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the instanceEventId property: &lt;p&gt;The ID of the event.&lt;/p&gt;.
     * 
     * @return the instanceEventId value.
     */
    public String instanceEventId() {
        return this.instanceEventId;
    }

    /**
     * Set the instanceEventId property: &lt;p&gt;The ID of the event.&lt;/p&gt;.
     * 
     * @param instanceEventId the instanceEventId value to set.
     * @return the InstanceStatusEvent object itself.
     */
    public InstanceStatusEvent withInstanceEventId(String instanceEventId) {
        this.instanceEventId = instanceEventId;
        return this;
    }

    /**
     * Get the notAfter property: &lt;p&gt;The latest scheduled end time for the event.&lt;/p&gt;.
     * 
     * @return the notAfter value.
     */
    public OffsetDateTime notAfter() {
        return this.notAfter;
    }

    /**
     * Set the notAfter property: &lt;p&gt;The latest scheduled end time for the event.&lt;/p&gt;.
     * 
     * @param notAfter the notAfter value to set.
     * @return the InstanceStatusEvent object itself.
     */
    public InstanceStatusEvent withNotAfter(OffsetDateTime notAfter) {
        this.notAfter = notAfter;
        return this;
    }

    /**
     * Get the notBefore property: &lt;p&gt;The earliest scheduled start time for the event.&lt;/p&gt;.
     * 
     * @return the notBefore value.
     */
    public OffsetDateTime notBefore() {
        return this.notBefore;
    }

    /**
     * Set the notBefore property: &lt;p&gt;The earliest scheduled start time for the event.&lt;/p&gt;.
     * 
     * @param notBefore the notBefore value to set.
     * @return the InstanceStatusEvent object itself.
     */
    public InstanceStatusEvent withNotBefore(OffsetDateTime notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Get the notBeforeDeadline property: &lt;p&gt;The deadline for starting the event.&lt;/p&gt;.
     * 
     * @return the notBeforeDeadline value.
     */
    public OffsetDateTime notBeforeDeadline() {
        return this.notBeforeDeadline;
    }

    /**
     * Set the notBeforeDeadline property: &lt;p&gt;The deadline for starting the event.&lt;/p&gt;.
     * 
     * @param notBeforeDeadline the notBeforeDeadline value to set.
     * @return the InstanceStatusEvent object itself.
     */
    public InstanceStatusEvent withNotBeforeDeadline(OffsetDateTime notBeforeDeadline) {
        this.notBeforeDeadline = notBeforeDeadline;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (code() != null) {
            code().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("instanceEventId", this.instanceEventId);
        jsonWriter.writeStringField("notAfter",
            this.notAfter == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.notAfter));
        jsonWriter.writeStringField("notBefore",
            this.notBefore == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.notBefore));
        jsonWriter.writeStringField("notBeforeDeadline",
            this.notBeforeDeadline == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.notBeforeDeadline));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceStatusEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceStatusEvent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceStatusEvent.
     */
    public static InstanceStatusEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceStatusEvent deserializedInstanceStatusEvent = new InstanceStatusEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedInstanceStatusEvent.code = EventCodeEnumValue.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedInstanceStatusEvent.description = reader.getString();
                } else if ("instanceEventId".equals(fieldName)) {
                    deserializedInstanceStatusEvent.instanceEventId = reader.getString();
                } else if ("notAfter".equals(fieldName)) {
                    deserializedInstanceStatusEvent.notAfter = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("notBefore".equals(fieldName)) {
                    deserializedInstanceStatusEvent.notBefore = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("notBeforeDeadline".equals(fieldName)) {
                    deserializedInstanceStatusEvent.notBeforeDeadline = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceStatusEvent;
        });
    }
}
