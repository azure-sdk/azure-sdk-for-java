// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Certificate.
 */
@Fluent
public final class Certificate implements JsonSerializable<Certificate> {
    /*
     * <p>The Base64-encoded certificate data required to communicate with your cluster. Add this to the
     * <code>certificate-authority-data</code> section of the <code>kubeconfig</code> file for your cluster.</p>
     */
    private String data;

    /**
     * Creates an instance of Certificate class.
     */
    public Certificate() {
    }

    /**
     * Get the data property: &lt;p&gt;The Base64-encoded certificate data required to communicate with your cluster.
     * Add this to the &lt;code&gt;certificate-authority-data&lt;/code&gt; section of the
     * &lt;code&gt;kubeconfig&lt;/code&gt; file for your cluster.&lt;/p&gt;.
     * 
     * @return the data value.
     */
    public String data() {
        return this.data;
    }

    /**
     * Set the data property: &lt;p&gt;The Base64-encoded certificate data required to communicate with your cluster.
     * Add this to the &lt;code&gt;certificate-authority-data&lt;/code&gt; section of the
     * &lt;code&gt;kubeconfig&lt;/code&gt; file for your cluster.&lt;/p&gt;.
     * 
     * @param data the data value to set.
     * @return the Certificate object itself.
     */
    public Certificate withData(String data) {
        this.data = data;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("data", this.data);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Certificate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Certificate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Certificate.
     */
    public static Certificate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Certificate deserializedCertificate = new Certificate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    deserializedCertificate.data = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificate;
        });
    }
}
