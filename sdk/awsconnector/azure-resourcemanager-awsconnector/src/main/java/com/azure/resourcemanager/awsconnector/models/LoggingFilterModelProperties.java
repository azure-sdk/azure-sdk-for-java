// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of LoggingFilterModelProperties.
 */
@Fluent
public final class LoggingFilterModelProperties implements JsonSerializable<LoggingFilterModelProperties> {
    /*
     * Default handling for logs that don't match any of the specified filtering conditions.
     */
    private DefaultBehavior defaultBehavior;

    /*
     * The filters that you want to apply to the logs.
     */
    private List<FilterAutoGenerated> filters;

    /**
     * Creates an instance of LoggingFilterModelProperties class.
     */
    public LoggingFilterModelProperties() {
    }

    /**
     * Get the defaultBehavior property: Default handling for logs that don't match any of the specified filtering
     * conditions.
     * 
     * @return the defaultBehavior value.
     */
    public DefaultBehavior defaultBehavior() {
        return this.defaultBehavior;
    }

    /**
     * Set the defaultBehavior property: Default handling for logs that don't match any of the specified filtering
     * conditions.
     * 
     * @param defaultBehavior the defaultBehavior value to set.
     * @return the LoggingFilterModelProperties object itself.
     */
    public LoggingFilterModelProperties withDefaultBehavior(DefaultBehavior defaultBehavior) {
        this.defaultBehavior = defaultBehavior;
        return this;
    }

    /**
     * Get the filters property: The filters that you want to apply to the logs.
     * 
     * @return the filters value.
     */
    public List<FilterAutoGenerated> filters() {
        return this.filters;
    }

    /**
     * Set the filters property: The filters that you want to apply to the logs.
     * 
     * @param filters the filters value to set.
     * @return the LoggingFilterModelProperties object itself.
     */
    public LoggingFilterModelProperties withFilters(List<FilterAutoGenerated> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filters() != null) {
            filters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultBehavior",
            this.defaultBehavior == null ? null : this.defaultBehavior.toString());
        jsonWriter.writeArrayField("filters", this.filters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingFilterModelProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingFilterModelProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoggingFilterModelProperties.
     */
    public static LoggingFilterModelProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingFilterModelProperties deserializedLoggingFilterModelProperties = new LoggingFilterModelProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultBehavior".equals(fieldName)) {
                    deserializedLoggingFilterModelProperties.defaultBehavior
                        = DefaultBehavior.fromString(reader.getString());
                } else if ("filters".equals(fieldName)) {
                    List<FilterAutoGenerated> filters
                        = reader.readArray(reader1 -> FilterAutoGenerated.fromJson(reader1));
                    deserializedLoggingFilterModelProperties.filters = filters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingFilterModelProperties;
        });
    }
}
