// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Definition of awsEcrImageDetail.
 */
@Fluent
public final class AwsEcrImageDetailProperties implements JsonSerializable<AwsEcrImageDetailProperties> {
    /*
     * <p>The artifact media type of the image.</p>
     */
    private String artifactMediaType;

    /*
     * <p>The <code>sha256</code> digest of the image manifest.</p>
     */
    private String imageDigest;

    /*
     * <p>The media type of the image manifest.</p>
     */
    private String imageManifestMediaType;

    /*
     * <p>The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the
     * repository. </p>
     */
    private OffsetDateTime imagePushedAt;

    /*
     * <p>A summary of the last completed image scan.</p>
     */
    private ImageScanFindingsSummary imageScanFindingsSummary;

    /*
     * <p>The current state of the scan.</p>
     */
    private ImageScanStatus imageScanStatus;

    /*
     * <p>The size, in bytes, of the image in the repository.</p> <p>If the image is a manifest list, this will be the
     * max size of all manifests in the list.</p> <note> <p>Beginning with Docker version 1.9, the Docker client
     * compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code>
     * command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by
     * <a>DescribeImages</a>.</p> </note>
     */
    private Long imageSizeInBytes;

    /*
     * <p>The list of tags associated with this image.</p>
     */
    private List<String> imageTags;

    /*
     * <p>The date and time, expressed in standard JavaScript date format, when Amazon ECR recorded the last image
     * pull.</p> <note> <p>Amazon ECR refreshes the last image pull timestamp at least once every 24 hours. For example,
     * if you pull an image once a day then the <code>lastRecordedPullTime</code> timestamp will indicate the exact time
     * that the image was last pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the
     * <code>lastRecordedPullTime</code> timestamp at least once every 24 hours, the result may not be the exact time
     * that the image was last pulled.</p> </note>
     */
    private OffsetDateTime lastRecordedPullTime;

    /*
     * <p>The Amazon Web Services account ID associated with the registry to which this image belongs.</p>
     */
    private String registryId;

    /*
     * <p>The name of the repository to which this image belongs.</p>
     */
    private String repositoryName;

    /**
     * Creates an instance of AwsEcrImageDetailProperties class.
     */
    public AwsEcrImageDetailProperties() {
    }

    /**
     * Get the artifactMediaType property: &lt;p&gt;The artifact media type of the image.&lt;/p&gt;.
     * 
     * @return the artifactMediaType value.
     */
    public String artifactMediaType() {
        return this.artifactMediaType;
    }

    /**
     * Set the artifactMediaType property: &lt;p&gt;The artifact media type of the image.&lt;/p&gt;.
     * 
     * @param artifactMediaType the artifactMediaType value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withArtifactMediaType(String artifactMediaType) {
        this.artifactMediaType = artifactMediaType;
        return this;
    }

    /**
     * Get the imageDigest property: &lt;p&gt;The &lt;code&gt;sha256&lt;/code&gt; digest of the image
     * manifest.&lt;/p&gt;.
     * 
     * @return the imageDigest value.
     */
    public String imageDigest() {
        return this.imageDigest;
    }

    /**
     * Set the imageDigest property: &lt;p&gt;The &lt;code&gt;sha256&lt;/code&gt; digest of the image
     * manifest.&lt;/p&gt;.
     * 
     * @param imageDigest the imageDigest value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImageDigest(String imageDigest) {
        this.imageDigest = imageDigest;
        return this;
    }

    /**
     * Get the imageManifestMediaType property: &lt;p&gt;The media type of the image manifest.&lt;/p&gt;.
     * 
     * @return the imageManifestMediaType value.
     */
    public String imageManifestMediaType() {
        return this.imageManifestMediaType;
    }

    /**
     * Set the imageManifestMediaType property: &lt;p&gt;The media type of the image manifest.&lt;/p&gt;.
     * 
     * @param imageManifestMediaType the imageManifestMediaType value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImageManifestMediaType(String imageManifestMediaType) {
        this.imageManifestMediaType = imageManifestMediaType;
        return this;
    }

    /**
     * Get the imagePushedAt property: &lt;p&gt;The date and time, expressed in standard JavaScript date format, at
     * which the current image was pushed to the repository. &lt;/p&gt;.
     * 
     * @return the imagePushedAt value.
     */
    public OffsetDateTime imagePushedAt() {
        return this.imagePushedAt;
    }

    /**
     * Set the imagePushedAt property: &lt;p&gt;The date and time, expressed in standard JavaScript date format, at
     * which the current image was pushed to the repository. &lt;/p&gt;.
     * 
     * @param imagePushedAt the imagePushedAt value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImagePushedAt(OffsetDateTime imagePushedAt) {
        this.imagePushedAt = imagePushedAt;
        return this;
    }

    /**
     * Get the imageScanFindingsSummary property: &lt;p&gt;A summary of the last completed image scan.&lt;/p&gt;.
     * 
     * @return the imageScanFindingsSummary value.
     */
    public ImageScanFindingsSummary imageScanFindingsSummary() {
        return this.imageScanFindingsSummary;
    }

    /**
     * Set the imageScanFindingsSummary property: &lt;p&gt;A summary of the last completed image scan.&lt;/p&gt;.
     * 
     * @param imageScanFindingsSummary the imageScanFindingsSummary value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImageScanFindingsSummary(ImageScanFindingsSummary imageScanFindingsSummary) {
        this.imageScanFindingsSummary = imageScanFindingsSummary;
        return this;
    }

    /**
     * Get the imageScanStatus property: &lt;p&gt;The current state of the scan.&lt;/p&gt;.
     * 
     * @return the imageScanStatus value.
     */
    public ImageScanStatus imageScanStatus() {
        return this.imageScanStatus;
    }

    /**
     * Set the imageScanStatus property: &lt;p&gt;The current state of the scan.&lt;/p&gt;.
     * 
     * @param imageScanStatus the imageScanStatus value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImageScanStatus(ImageScanStatus imageScanStatus) {
        this.imageScanStatus = imageScanStatus;
        return this;
    }

    /**
     * Get the imageSizeInBytes property: &lt;p&gt;The size, in bytes, of the image in the repository.&lt;/p&gt;
     * &lt;p&gt;If the image is a manifest list, this will be the max size of all manifests in the list.&lt;/p&gt;
     * &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing
     * them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the
     * uncompressed image size, so it may return a larger image size than the image sizes returned by
     * &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the imageSizeInBytes value.
     */
    public Long imageSizeInBytes() {
        return this.imageSizeInBytes;
    }

    /**
     * Set the imageSizeInBytes property: &lt;p&gt;The size, in bytes, of the image in the repository.&lt;/p&gt;
     * &lt;p&gt;If the image is a manifest list, this will be the max size of all manifests in the list.&lt;/p&gt;
     * &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing
     * them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the
     * uncompressed image size, so it may return a larger image size than the image sizes returned by
     * &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param imageSizeInBytes the imageSizeInBytes value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImageSizeInBytes(Long imageSizeInBytes) {
        this.imageSizeInBytes = imageSizeInBytes;
        return this;
    }

    /**
     * Get the imageTags property: &lt;p&gt;The list of tags associated with this image.&lt;/p&gt;.
     * 
     * @return the imageTags value.
     */
    public List<String> imageTags() {
        return this.imageTags;
    }

    /**
     * Set the imageTags property: &lt;p&gt;The list of tags associated with this image.&lt;/p&gt;.
     * 
     * @param imageTags the imageTags value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withImageTags(List<String> imageTags) {
        this.imageTags = imageTags;
        return this;
    }

    /**
     * Get the lastRecordedPullTime property: &lt;p&gt;The date and time, expressed in standard JavaScript date format,
     * when Amazon ECR recorded the last image pull.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon ECR refreshes the last image
     * pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the
     * &lt;code&gt;lastRecordedPullTime&lt;/code&gt; timestamp will indicate the exact time that the image was last
     * pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the
     * &lt;code&gt;lastRecordedPullTime&lt;/code&gt; timestamp at least once every 24 hours, the result may not be the
     * exact time that the image was last pulled.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the lastRecordedPullTime value.
     */
    public OffsetDateTime lastRecordedPullTime() {
        return this.lastRecordedPullTime;
    }

    /**
     * Set the lastRecordedPullTime property: &lt;p&gt;The date and time, expressed in standard JavaScript date format,
     * when Amazon ECR recorded the last image pull.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon ECR refreshes the last image
     * pull timestamp at least once every 24 hours. For example, if you pull an image once a day then the
     * &lt;code&gt;lastRecordedPullTime&lt;/code&gt; timestamp will indicate the exact time that the image was last
     * pulled. However, if you pull an image once an hour, because Amazon ECR refreshes the
     * &lt;code&gt;lastRecordedPullTime&lt;/code&gt; timestamp at least once every 24 hours, the result may not be the
     * exact time that the image was last pulled.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param lastRecordedPullTime the lastRecordedPullTime value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withLastRecordedPullTime(OffsetDateTime lastRecordedPullTime) {
        this.lastRecordedPullTime = lastRecordedPullTime;
        return this;
    }

    /**
     * Get the registryId property: &lt;p&gt;The Amazon Web Services account ID associated with the registry to which
     * this image belongs.&lt;/p&gt;.
     * 
     * @return the registryId value.
     */
    public String registryId() {
        return this.registryId;
    }

    /**
     * Set the registryId property: &lt;p&gt;The Amazon Web Services account ID associated with the registry to which
     * this image belongs.&lt;/p&gt;.
     * 
     * @param registryId the registryId value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withRegistryId(String registryId) {
        this.registryId = registryId;
        return this;
    }

    /**
     * Get the repositoryName property: &lt;p&gt;The name of the repository to which this image belongs.&lt;/p&gt;.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Set the repositoryName property: &lt;p&gt;The name of the repository to which this image belongs.&lt;/p&gt;.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the AwsEcrImageDetailProperties object itself.
     */
    public AwsEcrImageDetailProperties withRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageScanFindingsSummary() != null) {
            imageScanFindingsSummary().validate();
        }
        if (imageScanStatus() != null) {
            imageScanStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("artifactMediaType", this.artifactMediaType);
        jsonWriter.writeStringField("imageDigest", this.imageDigest);
        jsonWriter.writeStringField("imageManifestMediaType", this.imageManifestMediaType);
        jsonWriter.writeStringField("imagePushedAt",
            this.imagePushedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.imagePushedAt));
        jsonWriter.writeJsonField("imageScanFindingsSummary", this.imageScanFindingsSummary);
        jsonWriter.writeJsonField("imageScanStatus", this.imageScanStatus);
        jsonWriter.writeNumberField("imageSizeInBytes", this.imageSizeInBytes);
        jsonWriter.writeArrayField("imageTags", this.imageTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("lastRecordedPullTime",
            this.lastRecordedPullTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastRecordedPullTime));
        jsonWriter.writeStringField("registryId", this.registryId);
        jsonWriter.writeStringField("repositoryName", this.repositoryName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEcrImageDetailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEcrImageDetailProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEcrImageDetailProperties.
     */
    public static AwsEcrImageDetailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEcrImageDetailProperties deserializedAwsEcrImageDetailProperties = new AwsEcrImageDetailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifactMediaType".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.artifactMediaType = reader.getString();
                } else if ("imageDigest".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.imageDigest = reader.getString();
                } else if ("imageManifestMediaType".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.imageManifestMediaType = reader.getString();
                } else if ("imagePushedAt".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.imagePushedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("imageScanFindingsSummary".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.imageScanFindingsSummary
                        = ImageScanFindingsSummary.fromJson(reader);
                } else if ("imageScanStatus".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.imageScanStatus = ImageScanStatus.fromJson(reader);
                } else if ("imageSizeInBytes".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.imageSizeInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("imageTags".equals(fieldName)) {
                    List<String> imageTags = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEcrImageDetailProperties.imageTags = imageTags;
                } else if ("lastRecordedPullTime".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.lastRecordedPullTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("registryId".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.registryId = reader.getString();
                } else if ("repositoryName".equals(fieldName)) {
                    deserializedAwsEcrImageDetailProperties.repositoryName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEcrImageDetailProperties;
        });
    }
}
