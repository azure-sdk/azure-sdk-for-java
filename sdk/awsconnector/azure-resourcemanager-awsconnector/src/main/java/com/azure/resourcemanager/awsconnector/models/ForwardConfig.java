// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ForwardConfig.
 */
@Fluent
public final class ForwardConfig implements JsonSerializable<ForwardConfig> {
    /*
     * Information about the target group stickiness for a rule. Information about the target group stickiness for a
     * rule.
     */
    private TargetGroupStickinessConfig targetGroupStickinessConfig;

    /*
     * Information about how traffic will be distributed between multiple target groups in a forward rule.
     */
    private List<TargetGroupTuple> targetGroups;

    /**
     * Creates an instance of ForwardConfig class.
     */
    public ForwardConfig() {
    }

    /**
     * Get the targetGroupStickinessConfig property: Information about the target group stickiness for a rule.
     * Information about the target group stickiness for a rule.
     * 
     * @return the targetGroupStickinessConfig value.
     */
    public TargetGroupStickinessConfig targetGroupStickinessConfig() {
        return this.targetGroupStickinessConfig;
    }

    /**
     * Set the targetGroupStickinessConfig property: Information about the target group stickiness for a rule.
     * Information about the target group stickiness for a rule.
     * 
     * @param targetGroupStickinessConfig the targetGroupStickinessConfig value to set.
     * @return the ForwardConfig object itself.
     */
    public ForwardConfig withTargetGroupStickinessConfig(TargetGroupStickinessConfig targetGroupStickinessConfig) {
        this.targetGroupStickinessConfig = targetGroupStickinessConfig;
        return this;
    }

    /**
     * Get the targetGroups property: Information about how traffic will be distributed between multiple target groups
     * in a forward rule.
     * 
     * @return the targetGroups value.
     */
    public List<TargetGroupTuple> targetGroups() {
        return this.targetGroups;
    }

    /**
     * Set the targetGroups property: Information about how traffic will be distributed between multiple target groups
     * in a forward rule.
     * 
     * @param targetGroups the targetGroups value to set.
     * @return the ForwardConfig object itself.
     */
    public ForwardConfig withTargetGroups(List<TargetGroupTuple> targetGroups) {
        this.targetGroups = targetGroups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetGroupStickinessConfig() != null) {
            targetGroupStickinessConfig().validate();
        }
        if (targetGroups() != null) {
            targetGroups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("targetGroupStickinessConfig", this.targetGroupStickinessConfig);
        jsonWriter.writeArrayField("targetGroups", this.targetGroups, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ForwardConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ForwardConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ForwardConfig.
     */
    public static ForwardConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ForwardConfig deserializedForwardConfig = new ForwardConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetGroupStickinessConfig".equals(fieldName)) {
                    deserializedForwardConfig.targetGroupStickinessConfig
                        = TargetGroupStickinessConfig.fromJson(reader);
                } else if ("targetGroups".equals(fieldName)) {
                    List<TargetGroupTuple> targetGroups
                        = reader.readArray(reader1 -> TargetGroupTuple.fromJson(reader1));
                    deserializedForwardConfig.targetGroups = targetGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedForwardConfig;
        });
    }
}
