// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsRoute53HostedZone.
 */
@Fluent
public final class AwsRoute53HostedZoneProperties implements JsonSerializable<AwsRoute53HostedZoneProperties> {
    /*
     * A complex type that contains an optional comment. If you don't want to specify a comment, omit the
     * ``HostedZoneConfig`` and ``Comment`` elements. A complex type that contains an optional comment about your hosted
     * zone. If you don't want to specify a comment, omit both the ``HostedZoneConfig`` and ``Comment`` elements.
     */
    private HostedZoneConfig hostedZoneConfig;

    /*
     * Adds, edits, or deletes tags for a health check or a hosted zone. For information about using tags for cost
     * allocation, see [Using Cost Allocation
     * Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *User Guide*.
     */
    private List<HostedZoneTag> hostedZoneTags;

    /*
     * Property id
     */
    private String id;

    /*
     * The name of the domain. Specify a fully qualified domain name, for example, *www.example.com*. The trailing dot
     * is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats
     * *www.example.com* (without a trailing dot) and *www.example.com.* (with a trailing dot) as identical. If you're
     * creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name
     * is registered with a registrar other than Route 53, change the name servers for your domain to the set of
     * ``NameServers`` that are returned by the ``Fn::GetAtt`` intrinsic function.
     */
    private String name;

    /*
     * Property nameServers
     */
    private List<String> nameServers;

    /*
     * Creates a configuration for DNS query logging. After you create a query logging configuration, Amazon Route 53
     * begins to publish log data to an Amazon CloudWatch Logs log group. DNS query logs contain information about the
     * queries that Route 53 receives for a specified public hosted zone, such as the following: + Route 53 edge
     * location that responded to the DNS query + Domain or subdomain that was requested + DNS record type, such as A or
     * AAAA + DNS response code, such as ``NoError`` or ``ServFail`` + Log Group and Resource Policy Before you create a
     * query logging configuration, perform the following operations. If you create a query logging configuration using
     * the Route 53 console, Route 53 performs these operations automatically. Create a CloudWatch Logs log group, and
     * make note of the ARN, which you specify when you create a query logging configuration. Note the following: You
     * must create the log group in the us-east-1 region. You must use the same to create the log group and the hosted
     * zone that you want to configure query logging for. When you create log groups for query logging, we recommend
     * that you use a consistent prefix, for example: /aws/route53/hosted zone name In the next step, you'll create a
     * resource policy, which controls access to one or more log groups and the associated resources, such as Route 53
     * hosted zones. There's a limit on the number of resource policies that you can create, so we recommend that you
     * use a consistent prefix so you can use the same resource policy for all the log groups that you create for query
     * logging. Create a CloudWatch Logs resource policy, and give it the permissions that Route 53 needs to create log
     * streams and to send query logs to log streams. For the value of Resource, specify the ARN for the log group that
     * you created in the previous step. To use the same resource policy for all the CloudWatch Logs log groups that you
     * created for query logging configurations, replace the hosted zone name with *, for example:
     * arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/* To avoid the confused deputy problem, a security
     * issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you
     * can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the
     * following values: For aws:SourceArn, supply the hosted zone ARN used in creating the query logging configuration.
     * For example, aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID. For aws:SourceAccount, supply the
     * account ID for the account that creates the query logging configuration. For example,
     * aws:SourceAccount:111111111111. For more information, see The confused deputy problem in the IAM User Guide. You
     * can't use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the
     * SDKs, or the . + Log Streams and Edge Locations When Route 53 finishes creating the configuration for DNS query
     * logging, it does the following: Creates a log stream for an edge location the first time that the edge location
     * responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53
     * responds to for that edge location. Begins to send query logs to the applicable log stream. The name of each log
     * stream is in the following format: hosted zone ID/edge location code The edge location code is a three-letter
     * code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the
     * International Air Transport Association airport code for an airport near the edge location. (These abbreviations
     * might change in the future.) For a list of edge locations, see 'The Route 53 Global Network' on the Route 53
     * Product Details page. + Queries That Are Logged Query logs contain only the queries that DNS resolvers forward to
     * Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load
     * balancer for example.com), the resolver will continue to return the cached response. It doesn't forward another
     * query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS
     * queries are submitted for a resource record set, and depending on the TTL for that resource record set, query
     * logs might contain information about only one query out of every several thousand queries that are submitted to
     * DNS. For more information about how DNS works, see Routing Internet Traffic to Your Website or Web Application in
     * the Amazon Route 53 Developer Guide. + Log File Format For a list of the values in each query log and the format
     * of each value, see Logging DNS Queries in the Amazon Route 53 Developer Guide. + Pricing For information about
     * charges for query logs, see Amazon CloudWatch Pricing. + How to Stop Logging If you want Route 53 to stop sending
     * query logs to CloudWatch Logs, delete the query logging configuration. For more information, see
     * DeleteQueryLoggingConfig. A complex type that contains information about a configuration for DNS query logging.
     */
    private QueryLoggingConfig queryLoggingConfig;

    /*
     * *Private hosted zones:* A complex type that contains information about the VPCs that are associated with the
     * specified hosted zone. For public hosted zones, omit ``VPCs``, ``VPCId``, and ``VPCRegion``.
     */
    private List<Vpc> vpCs;

    /**
     * Creates an instance of AwsRoute53HostedZoneProperties class.
     */
    public AwsRoute53HostedZoneProperties() {
    }

    /**
     * Get the hostedZoneConfig property: A complex type that contains an optional comment. If you don't want to specify
     * a comment, omit the ``HostedZoneConfig`` and ``Comment`` elements. A complex type that contains an optional
     * comment about your hosted zone. If you don't want to specify a comment, omit both the ``HostedZoneConfig`` and
     * ``Comment`` elements.
     * 
     * @return the hostedZoneConfig value.
     */
    public HostedZoneConfig hostedZoneConfig() {
        return this.hostedZoneConfig;
    }

    /**
     * Set the hostedZoneConfig property: A complex type that contains an optional comment. If you don't want to specify
     * a comment, omit the ``HostedZoneConfig`` and ``Comment`` elements. A complex type that contains an optional
     * comment about your hosted zone. If you don't want to specify a comment, omit both the ``HostedZoneConfig`` and
     * ``Comment`` elements.
     * 
     * @param hostedZoneConfig the hostedZoneConfig value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withHostedZoneConfig(HostedZoneConfig hostedZoneConfig) {
        this.hostedZoneConfig = hostedZoneConfig;
        return this;
    }

    /**
     * Get the hostedZoneTags property: Adds, edits, or deletes tags for a health check or a hosted zone. For
     * information about using tags for cost allocation, see [Using Cost Allocation
     * Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *User Guide*.
     * 
     * @return the hostedZoneTags value.
     */
    public List<HostedZoneTag> hostedZoneTags() {
        return this.hostedZoneTags;
    }

    /**
     * Set the hostedZoneTags property: Adds, edits, or deletes tags for a health check or a hosted zone. For
     * information about using tags for cost allocation, see [Using Cost Allocation
     * Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *User Guide*.
     * 
     * @param hostedZoneTags the hostedZoneTags value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withHostedZoneTags(List<HostedZoneTag> hostedZoneTags) {
        this.hostedZoneTags = hostedZoneTags;
        return this;
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The name of the domain. Specify a fully qualified domain name, for example,
     * *www.example.com*. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified.
     * This means that Route 53 treats *www.example.com* (without a trailing dot) and *www.example.com.* (with a
     * trailing dot) as identical. If you're creating a public hosted zone, this is the name you have registered with
     * your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name
     * servers for your domain to the set of ``NameServers`` that are returned by the ``Fn::GetAtt`` intrinsic function.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the domain. Specify a fully qualified domain name, for example,
     * *www.example.com*. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified.
     * This means that Route 53 treats *www.example.com* (without a trailing dot) and *www.example.com.* (with a
     * trailing dot) as identical. If you're creating a public hosted zone, this is the name you have registered with
     * your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name
     * servers for your domain to the set of ``NameServers`` that are returned by the ``Fn::GetAtt`` intrinsic function.
     * 
     * @param name the name value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the nameServers property: Property nameServers.
     * 
     * @return the nameServers value.
     */
    public List<String> nameServers() {
        return this.nameServers;
    }

    /**
     * Set the nameServers property: Property nameServers.
     * 
     * @param nameServers the nameServers value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withNameServers(List<String> nameServers) {
        this.nameServers = nameServers;
        return this;
    }

    /**
     * Get the queryLoggingConfig property: Creates a configuration for DNS query logging. After you create a query
     * logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group. DNS
     * query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such
     * as the following: + Route 53 edge location that responded to the DNS query + Domain or subdomain that was
     * requested + DNS record type, such as A or AAAA + DNS response code, such as ``NoError`` or ``ServFail`` + Log
     * Group and Resource Policy Before you create a query logging configuration, perform the following operations. If
     * you create a query logging configuration using the Route 53 console, Route 53 performs these operations
     * automatically. Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a
     * query logging configuration. Note the following: You must create the log group in the us-east-1 region. You must
     * use the same to create the log group and the hosted zone that you want to configure query logging for. When you
     * create log groups for query logging, we recommend that you use a consistent prefix, for example:
     * /aws/route53/hosted zone name In the next step, you'll create a resource policy, which controls access to one or
     * more log groups and the associated resources, such as Route 53 hosted zones. There's a limit on the number of
     * resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same
     * resource policy for all the log groups that you create for query logging. Create a CloudWatch Logs resource
     * policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log
     * streams. For the value of Resource, specify the ARN for the log group that you created in the previous step. To
     * use the same resource policy for all the CloudWatch Logs log groups that you created for query logging
     * configurations, replace the hosted zone name with *, for example:
     * arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/* To avoid the confused deputy problem, a security
     * issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you
     * can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the
     * following values: For aws:SourceArn, supply the hosted zone ARN used in creating the query logging configuration.
     * For example, aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID. For aws:SourceAccount, supply the
     * account ID for the account that creates the query logging configuration. For example,
     * aws:SourceAccount:111111111111. For more information, see The confused deputy problem in the IAM User Guide. You
     * can't use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the
     * SDKs, or the . + Log Streams and Edge Locations When Route 53 finishes creating the configuration for DNS query
     * logging, it does the following: Creates a log stream for an edge location the first time that the edge location
     * responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53
     * responds to for that edge location. Begins to send query logs to the applicable log stream. The name of each log
     * stream is in the following format: hosted zone ID/edge location code The edge location code is a three-letter
     * code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the
     * International Air Transport Association airport code for an airport near the edge location. (These abbreviations
     * might change in the future.) For a list of edge locations, see 'The Route 53 Global Network' on the Route 53
     * Product Details page. + Queries That Are Logged Query logs contain only the queries that DNS resolvers forward to
     * Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load
     * balancer for example.com), the resolver will continue to return the cached response. It doesn't forward another
     * query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS
     * queries are submitted for a resource record set, and depending on the TTL for that resource record set, query
     * logs might contain information about only one query out of every several thousand queries that are submitted to
     * DNS. For more information about how DNS works, see Routing Internet Traffic to Your Website or Web Application in
     * the Amazon Route 53 Developer Guide. + Log File Format For a list of the values in each query log and the format
     * of each value, see Logging DNS Queries in the Amazon Route 53 Developer Guide. + Pricing For information about
     * charges for query logs, see Amazon CloudWatch Pricing. + How to Stop Logging If you want Route 53 to stop sending
     * query logs to CloudWatch Logs, delete the query logging configuration. For more information, see
     * DeleteQueryLoggingConfig. A complex type that contains information about a configuration for DNS query logging.
     * 
     * @return the queryLoggingConfig value.
     */
    public QueryLoggingConfig queryLoggingConfig() {
        return this.queryLoggingConfig;
    }

    /**
     * Set the queryLoggingConfig property: Creates a configuration for DNS query logging. After you create a query
     * logging configuration, Amazon Route 53 begins to publish log data to an Amazon CloudWatch Logs log group. DNS
     * query logs contain information about the queries that Route 53 receives for a specified public hosted zone, such
     * as the following: + Route 53 edge location that responded to the DNS query + Domain or subdomain that was
     * requested + DNS record type, such as A or AAAA + DNS response code, such as ``NoError`` or ``ServFail`` + Log
     * Group and Resource Policy Before you create a query logging configuration, perform the following operations. If
     * you create a query logging configuration using the Route 53 console, Route 53 performs these operations
     * automatically. Create a CloudWatch Logs log group, and make note of the ARN, which you specify when you create a
     * query logging configuration. Note the following: You must create the log group in the us-east-1 region. You must
     * use the same to create the log group and the hosted zone that you want to configure query logging for. When you
     * create log groups for query logging, we recommend that you use a consistent prefix, for example:
     * /aws/route53/hosted zone name In the next step, you'll create a resource policy, which controls access to one or
     * more log groups and the associated resources, such as Route 53 hosted zones. There's a limit on the number of
     * resource policies that you can create, so we recommend that you use a consistent prefix so you can use the same
     * resource policy for all the log groups that you create for query logging. Create a CloudWatch Logs resource
     * policy, and give it the permissions that Route 53 needs to create log streams and to send query logs to log
     * streams. For the value of Resource, specify the ARN for the log group that you created in the previous step. To
     * use the same resource policy for all the CloudWatch Logs log groups that you created for query logging
     * configurations, replace the hosted zone name with *, for example:
     * arn:aws:logs:us-east-1:123412341234:log-group:/aws/route53/* To avoid the confused deputy problem, a security
     * issue where an entity without a permission for an action can coerce a more-privileged entity to perform it, you
     * can optionally limit the permissions that a service has to a resource in a resource-based policy by supplying the
     * following values: For aws:SourceArn, supply the hosted zone ARN used in creating the query logging configuration.
     * For example, aws:SourceArn: arn:aws:route53:::hostedzone/hosted zone ID. For aws:SourceAccount, supply the
     * account ID for the account that creates the query logging configuration. For example,
     * aws:SourceAccount:111111111111. For more information, see The confused deputy problem in the IAM User Guide. You
     * can't use the CloudWatch console to create or edit a resource policy. You must use the CloudWatch API, one of the
     * SDKs, or the . + Log Streams and Edge Locations When Route 53 finishes creating the configuration for DNS query
     * logging, it does the following: Creates a log stream for an edge location the first time that the edge location
     * responds to DNS queries for the specified hosted zone. That log stream is used to log all queries that Route 53
     * responds to for that edge location. Begins to send query logs to the applicable log stream. The name of each log
     * stream is in the following format: hosted zone ID/edge location code The edge location code is a three-letter
     * code and an arbitrarily assigned number, for example, DFW3. The three-letter code typically corresponds with the
     * International Air Transport Association airport code for an airport near the edge location. (These abbreviations
     * might change in the future.) For a list of edge locations, see 'The Route 53 Global Network' on the Route 53
     * Product Details page. + Queries That Are Logged Query logs contain only the queries that DNS resolvers forward to
     * Route 53. If a DNS resolver has already cached the response to a query (such as the IP address for a load
     * balancer for example.com), the resolver will continue to return the cached response. It doesn't forward another
     * query to Route 53 until the TTL for the corresponding resource record set expires. Depending on how many DNS
     * queries are submitted for a resource record set, and depending on the TTL for that resource record set, query
     * logs might contain information about only one query out of every several thousand queries that are submitted to
     * DNS. For more information about how DNS works, see Routing Internet Traffic to Your Website or Web Application in
     * the Amazon Route 53 Developer Guide. + Log File Format For a list of the values in each query log and the format
     * of each value, see Logging DNS Queries in the Amazon Route 53 Developer Guide. + Pricing For information about
     * charges for query logs, see Amazon CloudWatch Pricing. + How to Stop Logging If you want Route 53 to stop sending
     * query logs to CloudWatch Logs, delete the query logging configuration. For more information, see
     * DeleteQueryLoggingConfig. A complex type that contains information about a configuration for DNS query logging.
     * 
     * @param queryLoggingConfig the queryLoggingConfig value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withQueryLoggingConfig(QueryLoggingConfig queryLoggingConfig) {
        this.queryLoggingConfig = queryLoggingConfig;
        return this;
    }

    /**
     * Get the vpCs property: *Private hosted zones:* A complex type that contains information about the VPCs that are
     * associated with the specified hosted zone. For public hosted zones, omit ``VPCs``, ``VPCId``, and ``VPCRegion``.
     * 
     * @return the vpCs value.
     */
    public List<Vpc> vpCs() {
        return this.vpCs;
    }

    /**
     * Set the vpCs property: *Private hosted zones:* A complex type that contains information about the VPCs that are
     * associated with the specified hosted zone. For public hosted zones, omit ``VPCs``, ``VPCId``, and ``VPCRegion``.
     * 
     * @param vpCs the vpCs value to set.
     * @return the AwsRoute53HostedZoneProperties object itself.
     */
    public AwsRoute53HostedZoneProperties withVpCs(List<Vpc> vpCs) {
        this.vpCs = vpCs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostedZoneConfig() != null) {
            hostedZoneConfig().validate();
        }
        if (hostedZoneTags() != null) {
            hostedZoneTags().forEach(e -> e.validate());
        }
        if (queryLoggingConfig() != null) {
            queryLoggingConfig().validate();
        }
        if (vpCs() != null) {
            vpCs().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hostedZoneConfig", this.hostedZoneConfig);
        jsonWriter.writeArrayField("hostedZoneTags", this.hostedZoneTags,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("nameServers", this.nameServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("queryLoggingConfig", this.queryLoggingConfig);
        jsonWriter.writeArrayField("vpCs", this.vpCs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRoute53HostedZoneProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRoute53HostedZoneProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRoute53HostedZoneProperties.
     */
    public static AwsRoute53HostedZoneProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRoute53HostedZoneProperties deserializedAwsRoute53HostedZoneProperties
                = new AwsRoute53HostedZoneProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostedZoneConfig".equals(fieldName)) {
                    deserializedAwsRoute53HostedZoneProperties.hostedZoneConfig = HostedZoneConfig.fromJson(reader);
                } else if ("hostedZoneTags".equals(fieldName)) {
                    List<HostedZoneTag> hostedZoneTags = reader.readArray(reader1 -> HostedZoneTag.fromJson(reader1));
                    deserializedAwsRoute53HostedZoneProperties.hostedZoneTags = hostedZoneTags;
                } else if ("id".equals(fieldName)) {
                    deserializedAwsRoute53HostedZoneProperties.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsRoute53HostedZoneProperties.name = reader.getString();
                } else if ("nameServers".equals(fieldName)) {
                    List<String> nameServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRoute53HostedZoneProperties.nameServers = nameServers;
                } else if ("queryLoggingConfig".equals(fieldName)) {
                    deserializedAwsRoute53HostedZoneProperties.queryLoggingConfig = QueryLoggingConfig.fromJson(reader);
                } else if ("vpCs".equals(fieldName)) {
                    List<Vpc> vpCs = reader.readArray(reader1 -> Vpc.fromJson(reader1));
                    deserializedAwsRoute53HostedZoneProperties.vpCs = vpCs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRoute53HostedZoneProperties;
        });
    }
}
