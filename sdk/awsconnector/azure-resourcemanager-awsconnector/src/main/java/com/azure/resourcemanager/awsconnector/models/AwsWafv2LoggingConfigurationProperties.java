// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsWafv2LoggingConfiguration.
 */
@Fluent
public final class AwsWafv2LoggingConfigurationProperties
    implements JsonSerializable<AwsWafv2LoggingConfigurationProperties> {
    /*
     * The Amazon Resource Names (ARNs) of the logging destinations that you want to associate with the web ACL.
     */
    private List<String> logDestinationConfigs;

    /*
     * Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the
     * rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
     */
    private LoggingFilterModelProperties loggingFilter;

    /*
     * Indicates whether the logging configuration was created by AWS Firewall Manager, as part of an AWS WAF policy
     * configuration. If true, only Firewall Manager can modify or delete the configuration.
     */
    private Boolean managedByFirewallManager;

    /*
     * The parts of the request that you want to keep out of the logs. For example, if you redact the HEADER field, the
     * HEADER field in the firehose will be xxx.
     */
    private List<FieldToMatch> redactedFields;

    /*
     * The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
     */
    private String resourceArn;

    /**
     * Creates an instance of AwsWafv2LoggingConfigurationProperties class.
     */
    public AwsWafv2LoggingConfigurationProperties() {
    }

    /**
     * Get the logDestinationConfigs property: The Amazon Resource Names (ARNs) of the logging destinations that you
     * want to associate with the web ACL.
     * 
     * @return the logDestinationConfigs value.
     */
    public List<String> logDestinationConfigs() {
        return this.logDestinationConfigs;
    }

    /**
     * Set the logDestinationConfigs property: The Amazon Resource Names (ARNs) of the logging destinations that you
     * want to associate with the web ACL.
     * 
     * @param logDestinationConfigs the logDestinationConfigs value to set.
     * @return the AwsWafv2LoggingConfigurationProperties object itself.
     */
    public AwsWafv2LoggingConfigurationProperties withLogDestinationConfigs(List<String> logDestinationConfigs) {
        this.logDestinationConfigs = logDestinationConfigs;
        return this;
    }

    /**
     * Get the loggingFilter property: Filtering that specifies which web requests are kept in the logs and which are
     * dropped. You can filter on the rule action and on the web request labels that were applied by matching rules
     * during web ACL evaluation.
     * 
     * @return the loggingFilter value.
     */
    public LoggingFilterModelProperties loggingFilter() {
        return this.loggingFilter;
    }

    /**
     * Set the loggingFilter property: Filtering that specifies which web requests are kept in the logs and which are
     * dropped. You can filter on the rule action and on the web request labels that were applied by matching rules
     * during web ACL evaluation.
     * 
     * @param loggingFilter the loggingFilter value to set.
     * @return the AwsWafv2LoggingConfigurationProperties object itself.
     */
    public AwsWafv2LoggingConfigurationProperties withLoggingFilter(LoggingFilterModelProperties loggingFilter) {
        this.loggingFilter = loggingFilter;
        return this;
    }

    /**
     * Get the managedByFirewallManager property: Indicates whether the logging configuration was created by AWS
     * Firewall Manager, as part of an AWS WAF policy configuration. If true, only Firewall Manager can modify or delete
     * the configuration.
     * 
     * @return the managedByFirewallManager value.
     */
    public Boolean managedByFirewallManager() {
        return this.managedByFirewallManager;
    }

    /**
     * Set the managedByFirewallManager property: Indicates whether the logging configuration was created by AWS
     * Firewall Manager, as part of an AWS WAF policy configuration. If true, only Firewall Manager can modify or delete
     * the configuration.
     * 
     * @param managedByFirewallManager the managedByFirewallManager value to set.
     * @return the AwsWafv2LoggingConfigurationProperties object itself.
     */
    public AwsWafv2LoggingConfigurationProperties withManagedByFirewallManager(Boolean managedByFirewallManager) {
        this.managedByFirewallManager = managedByFirewallManager;
        return this;
    }

    /**
     * Get the redactedFields property: The parts of the request that you want to keep out of the logs. For example, if
     * you redact the HEADER field, the HEADER field in the firehose will be xxx.
     * 
     * @return the redactedFields value.
     */
    public List<FieldToMatch> redactedFields() {
        return this.redactedFields;
    }

    /**
     * Set the redactedFields property: The parts of the request that you want to keep out of the logs. For example, if
     * you redact the HEADER field, the HEADER field in the firehose will be xxx.
     * 
     * @param redactedFields the redactedFields value to set.
     * @return the AwsWafv2LoggingConfigurationProperties object itself.
     */
    public AwsWafv2LoggingConfigurationProperties withRedactedFields(List<FieldToMatch> redactedFields) {
        this.redactedFields = redactedFields;
        return this;
    }

    /**
     * Get the resourceArn property: The Amazon Resource Name (ARN) of the web ACL that you want to associate with
     * LogDestinationConfigs.
     * 
     * @return the resourceArn value.
     */
    public String resourceArn() {
        return this.resourceArn;
    }

    /**
     * Set the resourceArn property: The Amazon Resource Name (ARN) of the web ACL that you want to associate with
     * LogDestinationConfigs.
     * 
     * @param resourceArn the resourceArn value to set.
     * @return the AwsWafv2LoggingConfigurationProperties object itself.
     */
    public AwsWafv2LoggingConfigurationProperties withResourceArn(String resourceArn) {
        this.resourceArn = resourceArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loggingFilter() != null) {
            loggingFilter().validate();
        }
        if (redactedFields() != null) {
            redactedFields().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("logDestinationConfigs", this.logDestinationConfigs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("loggingFilter", this.loggingFilter);
        jsonWriter.writeBooleanField("managedByFirewallManager", this.managedByFirewallManager);
        jsonWriter.writeArrayField("redactedFields", this.redactedFields,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceArn", this.resourceArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsWafv2LoggingConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsWafv2LoggingConfigurationProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsWafv2LoggingConfigurationProperties.
     */
    public static AwsWafv2LoggingConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsWafv2LoggingConfigurationProperties deserializedAwsWafv2LoggingConfigurationProperties
                = new AwsWafv2LoggingConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logDestinationConfigs".equals(fieldName)) {
                    List<String> logDestinationConfigs = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsWafv2LoggingConfigurationProperties.logDestinationConfigs = logDestinationConfigs;
                } else if ("loggingFilter".equals(fieldName)) {
                    deserializedAwsWafv2LoggingConfigurationProperties.loggingFilter
                        = LoggingFilterModelProperties.fromJson(reader);
                } else if ("managedByFirewallManager".equals(fieldName)) {
                    deserializedAwsWafv2LoggingConfigurationProperties.managedByFirewallManager
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("redactedFields".equals(fieldName)) {
                    List<FieldToMatch> redactedFields = reader.readArray(reader1 -> FieldToMatch.fromJson(reader1));
                    deserializedAwsWafv2LoggingConfigurationProperties.redactedFields = redactedFields;
                } else if ("resourceArn".equals(fieldName)) {
                    deserializedAwsWafv2LoggingConfigurationProperties.resourceArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsWafv2LoggingConfigurationProperties;
        });
    }
}
