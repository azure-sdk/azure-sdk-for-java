// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of Application.
 */
@Fluent
public final class Application implements JsonSerializable<Application> {
    /*
     * <p>This option is for advanced users only. This is meta information about third-party applications that
     * third-party vendors use for testing purposes.</p>
     */
    private Map<String, String> additionalInfo;

    /*
     * <p>Arguments for Amazon EMR to pass to the application.</p>
     */
    private List<String> args;

    /*
     * <p>The name of the application.</p>
     */
    private String name;

    /*
     * <p>The version of the application.</p>
     */
    private String version;

    /**
     * Creates an instance of Application class.
     */
    public Application() {
    }

    /**
     * Get the additionalInfo property: &lt;p&gt;This option is for advanced users only. This is meta information about
     * third-party applications that third-party vendors use for testing purposes.&lt;/p&gt;.
     * 
     * @return the additionalInfo value.
     */
    public Map<String, String> additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Set the additionalInfo property: &lt;p&gt;This option is for advanced users only. This is meta information about
     * third-party applications that third-party vendors use for testing purposes.&lt;/p&gt;.
     * 
     * @param additionalInfo the additionalInfo value to set.
     * @return the Application object itself.
     */
    public Application withAdditionalInfo(Map<String, String> additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    /**
     * Get the args property: &lt;p&gt;Arguments for Amazon EMR to pass to the application.&lt;/p&gt;.
     * 
     * @return the args value.
     */
    public List<String> args() {
        return this.args;
    }

    /**
     * Set the args property: &lt;p&gt;Arguments for Amazon EMR to pass to the application.&lt;/p&gt;.
     * 
     * @param args the args value to set.
     * @return the Application object itself.
     */
    public Application withArgs(List<String> args) {
        this.args = args;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name of the application.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name of the application.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the Application object itself.
     */
    public Application withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the version property: &lt;p&gt;The version of the application.&lt;/p&gt;.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: &lt;p&gt;The version of the application.&lt;/p&gt;.
     * 
     * @param version the version value to set.
     * @return the Application object itself.
     */
    public Application withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("additionalInfo", this.additionalInfo,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("args", this.args, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Application from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Application if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Application.
     */
    public static Application fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Application deserializedApplication = new Application();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalInfo".equals(fieldName)) {
                    Map<String, String> additionalInfo = reader.readMap(reader1 -> reader1.getString());
                    deserializedApplication.additionalInfo = additionalInfo;
                } else if ("args".equals(fieldName)) {
                    List<String> args = reader.readArray(reader1 -> reader1.getString());
                    deserializedApplication.args = args;
                } else if ("name".equals(fieldName)) {
                    deserializedApplication.name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedApplication.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplication;
        });
    }
}
