// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsEmrClusterSummary.
 */
@Fluent
public final class AwsEmrClusterSummaryProperties implements JsonSerializable<AwsEmrClusterSummaryProperties> {
    /*
     * <p>The Amazon Resource Name of the cluster.</p>
     */
    private String clusterArn;

    /*
     * <p>The unique identifier for the cluster.</p>
     */
    private String id;

    /*
     * <p>The name of the cluster.</p>
     */
    private String name;

    /*
     * <p>An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time
     * for every hour an m1.small instance runs. Larger instances are weighted more, so an Amazon EC2 instance that is
     * roughly four times more expensive would result in the normalized instance hours being incremented by four. This
     * result is only an approximation and does not reflect the actual billing rate.</p>
     */
    private Integer normalizedInstanceHours;

    /*
     * <p> The Amazon Resource Name (ARN) of the Outpost where the cluster is launched. </p>
     */
    private String outpostArn;

    /*
     * <p>The details about the current status of the cluster.</p>
     */
    private ClusterStatusAutoGenerated status;

    /**
     * Creates an instance of AwsEmrClusterSummaryProperties class.
     */
    public AwsEmrClusterSummaryProperties() {
    }

    /**
     * Get the clusterArn property: &lt;p&gt;The Amazon Resource Name of the cluster.&lt;/p&gt;.
     * 
     * @return the clusterArn value.
     */
    public String clusterArn() {
        return this.clusterArn;
    }

    /**
     * Set the clusterArn property: &lt;p&gt;The Amazon Resource Name of the cluster.&lt;/p&gt;.
     * 
     * @param clusterArn the clusterArn value to set.
     * @return the AwsEmrClusterSummaryProperties object itself.
     */
    public AwsEmrClusterSummaryProperties withClusterArn(String clusterArn) {
        this.clusterArn = clusterArn;
        return this;
    }

    /**
     * Get the id property: &lt;p&gt;The unique identifier for the cluster.&lt;/p&gt;.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: &lt;p&gt;The unique identifier for the cluster.&lt;/p&gt;.
     * 
     * @param id the id value to set.
     * @return the AwsEmrClusterSummaryProperties object itself.
     */
    public AwsEmrClusterSummaryProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name of the cluster.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name of the cluster.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the AwsEmrClusterSummaryProperties object itself.
     */
    public AwsEmrClusterSummaryProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the normalizedInstanceHours property: &lt;p&gt;An approximation of the cost of the cluster, represented in
     * m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are
     * weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized
     * instance hours being incremented by four. This result is only an approximation and does not reflect the actual
     * billing rate.&lt;/p&gt;.
     * 
     * @return the normalizedInstanceHours value.
     */
    public Integer normalizedInstanceHours() {
        return this.normalizedInstanceHours;
    }

    /**
     * Set the normalizedInstanceHours property: &lt;p&gt;An approximation of the cost of the cluster, represented in
     * m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are
     * weighted more, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized
     * instance hours being incremented by four. This result is only an approximation and does not reflect the actual
     * billing rate.&lt;/p&gt;.
     * 
     * @param normalizedInstanceHours the normalizedInstanceHours value to set.
     * @return the AwsEmrClusterSummaryProperties object itself.
     */
    public AwsEmrClusterSummaryProperties withNormalizedInstanceHours(Integer normalizedInstanceHours) {
        this.normalizedInstanceHours = normalizedInstanceHours;
        return this;
    }

    /**
     * Get the outpostArn property: &lt;p&gt; The Amazon Resource Name (ARN) of the Outpost where the cluster is
     * launched. &lt;/p&gt;.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: &lt;p&gt; The Amazon Resource Name (ARN) of the Outpost where the cluster is
     * launched. &lt;/p&gt;.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the AwsEmrClusterSummaryProperties object itself.
     */
    public AwsEmrClusterSummaryProperties withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The details about the current status of the cluster.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public ClusterStatusAutoGenerated status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The details about the current status of the cluster.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the AwsEmrClusterSummaryProperties object itself.
     */
    public AwsEmrClusterSummaryProperties withStatus(ClusterStatusAutoGenerated status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterArn", this.clusterArn);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("normalizedInstanceHours", this.normalizedInstanceHours);
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEmrClusterSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEmrClusterSummaryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEmrClusterSummaryProperties.
     */
    public static AwsEmrClusterSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEmrClusterSummaryProperties deserializedAwsEmrClusterSummaryProperties
                = new AwsEmrClusterSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterArn".equals(fieldName)) {
                    deserializedAwsEmrClusterSummaryProperties.clusterArn = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedAwsEmrClusterSummaryProperties.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsEmrClusterSummaryProperties.name = reader.getString();
                } else if ("normalizedInstanceHours".equals(fieldName)) {
                    deserializedAwsEmrClusterSummaryProperties.normalizedInstanceHours
                        = reader.getNullable(JsonReader::getInt);
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedAwsEmrClusterSummaryProperties.outpostArn = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedAwsEmrClusterSummaryProperties.status = ClusterStatusAutoGenerated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEmrClusterSummaryProperties;
        });
    }
}
