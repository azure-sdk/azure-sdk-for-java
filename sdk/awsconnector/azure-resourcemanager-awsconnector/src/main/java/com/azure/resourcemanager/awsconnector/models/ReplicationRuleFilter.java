// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ReplicationRuleFilter.
 */
@Fluent
public final class ReplicationRuleFilter implements JsonSerializable<ReplicationRuleFilter> {
    /*
     * A container for specifying rule filters. The filters determine the subset of objects to which the rule applies.
     * This element is required only if you specify more than one filter. For example: + If you specify both a
     * ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag. + If you specify a filter based on multiple
     * tags, wrap the ``TagFilter`` elements in an ``And`` tag. A container for specifying rule filters. The filters
     * determine the subset of objects to which the rule applies. This element is required only if you specify more than
     * one filter. For example: + If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And``
     * tag. + If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag
     */
    private ReplicationRuleAndOperator and;

    /*
     * An object key name prefix that identifies the subset of objects to which the rule applies. Replacement must be
     * made for object keys containing special characters (such as carriage returns) when using XML requests. For more
     * information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-
     * constraints).
     */
    private String prefix;

    /*
     * A container for specifying a tag key and value. The rule applies only to objects that have the tag in their tag
     * set. Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.
     */
    private TagFilter tagFilter;

    /**
     * Creates an instance of ReplicationRuleFilter class.
     */
    public ReplicationRuleFilter() {
    }

    /**
     * Get the and property: A container for specifying rule filters. The filters determine the subset of objects to
     * which the rule applies. This element is required only if you specify more than one filter. For example: + If you
     * specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag. + If you specify a filter
     * based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag. A container for specifying rule
     * filters. The filters determine the subset of objects to which the rule applies. This element is required only if
     * you specify more than one filter. For example: + If you specify both a ``Prefix`` and a ``TagFilter``, wrap these
     * filters in an ``And`` tag. + If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in
     * an ``And`` tag.
     * 
     * @return the and value.
     */
    public ReplicationRuleAndOperator and() {
        return this.and;
    }

    /**
     * Set the and property: A container for specifying rule filters. The filters determine the subset of objects to
     * which the rule applies. This element is required only if you specify more than one filter. For example: + If you
     * specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag. + If you specify a filter
     * based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag. A container for specifying rule
     * filters. The filters determine the subset of objects to which the rule applies. This element is required only if
     * you specify more than one filter. For example: + If you specify both a ``Prefix`` and a ``TagFilter``, wrap these
     * filters in an ``And`` tag. + If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in
     * an ``And`` tag.
     * 
     * @param and the and value to set.
     * @return the ReplicationRuleFilter object itself.
     */
    public ReplicationRuleFilter withAnd(ReplicationRuleAndOperator and) {
        this.and = and;
        return this;
    }

    /**
     * Get the prefix property: An object key name prefix that identifies the subset of objects to which the rule
     * applies. Replacement must be made for object keys containing special characters (such as carriage returns) when
     * using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: An object key name prefix that identifies the subset of objects to which the rule
     * applies. Replacement must be made for object keys containing special characters (such as carriage returns) when
     * using XML requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @param prefix the prefix value to set.
     * @return the ReplicationRuleFilter object itself.
     */
    public ReplicationRuleFilter withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the tagFilter property: A container for specifying a tag key and value. The rule applies only to objects that
     * have the tag in their tag set. Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.
     * 
     * @return the tagFilter value.
     */
    public TagFilter tagFilter() {
        return this.tagFilter;
    }

    /**
     * Set the tagFilter property: A container for specifying a tag key and value. The rule applies only to objects that
     * have the tag in their tag set. Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.
     * 
     * @param tagFilter the tagFilter value to set.
     * @return the ReplicationRuleFilter object itself.
     */
    public ReplicationRuleFilter withTagFilter(TagFilter tagFilter) {
        this.tagFilter = tagFilter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (and() != null) {
            and().validate();
        }
        if (tagFilter() != null) {
            tagFilter().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("and", this.and);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeJsonField("tagFilter", this.tagFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationRuleFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationRuleFilter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationRuleFilter.
     */
    public static ReplicationRuleFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationRuleFilter deserializedReplicationRuleFilter = new ReplicationRuleFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("and".equals(fieldName)) {
                    deserializedReplicationRuleFilter.and = ReplicationRuleAndOperator.fromJson(reader);
                } else if ("prefix".equals(fieldName)) {
                    deserializedReplicationRuleFilter.prefix = reader.getString();
                } else if ("tagFilter".equals(fieldName)) {
                    deserializedReplicationRuleFilter.tagFilter = TagFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationRuleFilter;
        });
    }
}
