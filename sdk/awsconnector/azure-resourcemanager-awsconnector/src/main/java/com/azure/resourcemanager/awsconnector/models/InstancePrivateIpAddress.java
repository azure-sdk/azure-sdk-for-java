// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InstancePrivateIpAddress.
 */
@Fluent
public final class InstancePrivateIpAddress implements JsonSerializable<InstancePrivateIpAddress> {
    /*
     * <p>The association information for an Elastic IP address for the network interface.</p>
     */
    private InstanceNetworkInterfaceAssociation association;

    /*
     * <p>Indicates whether this IPv4 address is the primary private IP address of the network interface.</p>
     */
    private Boolean primary;

    /*
     * <p>The private IPv4 DNS name.</p>
     */
    private String privateDnsName;

    /*
     * <p>The private IPv4 address of the network interface.</p>
     */
    private String privateIpAddress;

    /**
     * Creates an instance of InstancePrivateIpAddress class.
     */
    public InstancePrivateIpAddress() {
    }

    /**
     * Get the association property: &lt;p&gt;The association information for an Elastic IP address for the network
     * interface.&lt;/p&gt;.
     * 
     * @return the association value.
     */
    public InstanceNetworkInterfaceAssociation association() {
        return this.association;
    }

    /**
     * Set the association property: &lt;p&gt;The association information for an Elastic IP address for the network
     * interface.&lt;/p&gt;.
     * 
     * @param association the association value to set.
     * @return the InstancePrivateIpAddress object itself.
     */
    public InstancePrivateIpAddress withAssociation(InstanceNetworkInterfaceAssociation association) {
        this.association = association;
        return this;
    }

    /**
     * Get the primary property: &lt;p&gt;Indicates whether this IPv4 address is the primary private IP address of the
     * network interface.&lt;/p&gt;.
     * 
     * @return the primary value.
     */
    public Boolean primary() {
        return this.primary;
    }

    /**
     * Set the primary property: &lt;p&gt;Indicates whether this IPv4 address is the primary private IP address of the
     * network interface.&lt;/p&gt;.
     * 
     * @param primary the primary value to set.
     * @return the InstancePrivateIpAddress object itself.
     */
    public InstancePrivateIpAddress withPrimary(Boolean primary) {
        this.primary = primary;
        return this;
    }

    /**
     * Get the privateDnsName property: &lt;p&gt;The private IPv4 DNS name.&lt;/p&gt;.
     * 
     * @return the privateDnsName value.
     */
    public String privateDnsName() {
        return this.privateDnsName;
    }

    /**
     * Set the privateDnsName property: &lt;p&gt;The private IPv4 DNS name.&lt;/p&gt;.
     * 
     * @param privateDnsName the privateDnsName value to set.
     * @return the InstancePrivateIpAddress object itself.
     */
    public InstancePrivateIpAddress withPrivateDnsName(String privateDnsName) {
        this.privateDnsName = privateDnsName;
        return this;
    }

    /**
     * Get the privateIpAddress property: &lt;p&gt;The private IPv4 address of the network interface.&lt;/p&gt;.
     * 
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: &lt;p&gt;The private IPv4 address of the network interface.&lt;/p&gt;.
     * 
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the InstancePrivateIpAddress object itself.
     */
    public InstancePrivateIpAddress withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (association() != null) {
            association().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("association", this.association);
        jsonWriter.writeBooleanField("primary", this.primary);
        jsonWriter.writeStringField("privateDnsName", this.privateDnsName);
        jsonWriter.writeStringField("privateIpAddress", this.privateIpAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstancePrivateIpAddress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstancePrivateIpAddress if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstancePrivateIpAddress.
     */
    public static InstancePrivateIpAddress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstancePrivateIpAddress deserializedInstancePrivateIpAddress = new InstancePrivateIpAddress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("association".equals(fieldName)) {
                    deserializedInstancePrivateIpAddress.association
                        = InstanceNetworkInterfaceAssociation.fromJson(reader);
                } else if ("primary".equals(fieldName)) {
                    deserializedInstancePrivateIpAddress.primary = reader.getNullable(JsonReader::getBoolean);
                } else if ("privateDnsName".equals(fieldName)) {
                    deserializedInstancePrivateIpAddress.privateDnsName = reader.getString();
                } else if ("privateIpAddress".equals(fieldName)) {
                    deserializedInstancePrivateIpAddress.privateIpAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstancePrivateIpAddress;
        });
    }
}
