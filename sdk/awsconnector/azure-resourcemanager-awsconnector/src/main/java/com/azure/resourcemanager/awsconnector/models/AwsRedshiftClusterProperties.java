// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsRedshiftCluster.
 */
@Fluent
public final class AwsRedshiftClusterProperties implements JsonSerializable<AwsRedshiftClusterProperties> {
    /*
     * Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running
     * on the cluster. Default value is True
     */
    private Boolean allowVersionUpgrade;

    /*
     * The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is
     * restored. Possible values include the following.enabled - Use AQUA if it is available for the current Region and
     * Amazon Redshift node type.disabled - Don't use AQUA.auto - Amazon Redshift determines whether to use AQUA.
     */
    private String aquaConfigurationStatus;

    /*
     * The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled.
     * Default value is 1
     */
    private Integer automatedSnapshotRetentionPeriod;

    /*
     * The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random,
     * system-chosen Availability Zone in the region that is specified by the endpoint
     */
    private String availabilityZone;

    /*
     * The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster
     * modification is complete.
     */
    private Boolean availabilityZoneRelocation;

    /*
     * The availability zone relocation status of the cluster
     */
    private String availabilityZoneRelocationStatus;

    /*
     * A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide
     * this parameter or set the value to false , the resize type is elastic.
     */
    private Boolean classic;

    /*
     * A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster
     * operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end,
     * no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
     */
    private String clusterIdentifier;

    /*
     * The Amazon Resource Name (ARN) of the cluster namespace.
     */
    private String clusterNamespaceArn;

    /*
     * The name of the parameter group to be associated with this cluster.
     */
    private String clusterParameterGroupName;

    /*
     * A list of security groups to be associated with this cluster.
     */
    private List<String> clusterSecurityGroups;

    /*
     * The name of a cluster subnet group to be associated with this cluster.
     */
    private String clusterSubnetGroupName;

    /*
     * The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not
     * required and if multi-node, the NumberOfNodes parameter is required
     */
    private String clusterType;

    /*
     * The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected
     * runs on all the nodes in the cluster.
     */
    private String clusterVersion;

    /*
     * The name of the first database to be created when the cluster is created. To create additional databases after
     * the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.
     */
    private String dbName;

    /*
     * A boolean indicating whether to enable the deferred maintenance window.
     */
    private Boolean deferMaintenance;

    /*
     * An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't
     * specify an end time. The duration must be 45 days or less.
     */
    private Integer deferMaintenanceDuration;

    /*
     * A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't
     * specify a duration.
     */
    private String deferMaintenanceEndTime;

    /*
     * A unique identifier for the deferred maintenance window.
     */
    private String deferMaintenanceIdentifier;

    /*
     * A timestamp indicating the start time for the deferred maintenance window.
     */
    private String deferMaintenanceStartTime;

    /*
     * The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS
     * Region. For more information, see Regions and Endpoints in the Amazon Web Services
     * [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference
     */
    private String destinationRegion;

    /*
     * The Elastic IP (EIP) address for the cluster.
     */
    private String elasticIp;

    /*
     * If true, the data in the cluster is encrypted at rest.
     */
    private Boolean encrypted;

    /*
     * Property endpoint
     */
    private EndpointAutoGenerated3 endpoint;

    /*
     * An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster
     * that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in
     * the Amazon Redshift Cluster Management Guide.If this option is true , enhanced VPC routing is enabled.Default:
     * false
     */
    private Boolean enhancedVpcRouting;

    /*
     * Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption
     * keys stored in an HSM
     */
    private String hsmClientCertificateIdentifier;

    /*
     * Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to
     * retrieve and store keys in an HSM.
     */
    private String hsmConfigurationIdentifier;

    /*
     * A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS
     * services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 50 IAM
     * roles in a single request
     */
    private List<String> iamRoles;

    /*
     * The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the
     * cluster.
     */
    private String kmsKeyId;

    /*
     * Property loggingProperties
     */
    private LoggingProperties loggingProperties;

    /*
     * The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The
     * new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the
     * maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance
     * track. At this point, the maintenance track name is applied.
     */
    private String maintenanceTrackName;

    /*
     * A boolean indicating if the redshift cluster's admin user credentials is managed by Redshift or not. You can't
     * use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon
     * Redshift uses MasterUserPassword for the admin user account's password.
     */
    private Boolean manageMasterPassword;

    /*
     * The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the
     * source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.The value must be either -1
     * or an integer between 1 and 3,653.
     */
    private Integer manualSnapshotRetentionPeriod;

    /*
     * The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.
     */
    private String masterPasswordSecretArn;

    /*
     * The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin user credentials
     * secret.
     */
    private String masterPasswordSecretKmsKeyId;

    /*
     * The password associated with the master user account for the cluster that is being created. You can't use
     * MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and 64 characters in length,
     * should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can
     * be any printable ASCII character.
     */
    private String masterUserPassword;

    /*
     * The user name associated with the master user account for the cluster that is being created. The user name can't
     * be PUBLIC and first character must be a letter.
     */
    private String masterUsername;

    /*
     * A boolean indicating if the redshift cluster is multi-az or not. If you don't provide this parameter or set the
     * value to false, the redshift cluster will be single-az.
     */
    private Boolean multiAZ;

    /*
     * The namespace resource policy document that will be attached to a Redshift cluster.
     */
    private Object namespaceResourcePolicy;

    /*
     * The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge
     * | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge
     */
    private String nodeType;

    /*
     * The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is
     * specified as multi-node.
     */
    private Integer numberOfNodes;

    /*
     * Property ownerAccount
     */
    private String ownerAccount;

    /*
     * The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC
     * and ODBC connection strings
     */
    private Integer port;

    /*
     * The weekly time range (in UTC) during which automated cluster maintenance can occur.
     */
    private String preferredMaintenanceWindow;

    /*
     * If true, the cluster can be accessed from a public network.
     */
    private Boolean publiclyAccessible;

    /*
     * The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster,
     * failover-primary-compute APIs
     */
    private String resourceAction;

    /*
     * The identifier of the database revision. You can retrieve this value from the response to the
     * DescribeClusterDbRevisions request.
     */
    private String revisionTarget;

    /*
     * A boolean indicating if we want to rotate Encryption Keys.
     */
    private Boolean rotateEncryptionKey;

    /*
     * The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a
     * policy containing a snapshot resource element that specifies anything other than * for the cluster name.
     */
    private String snapshotClusterIdentifier;

    /*
     * The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the
     * destination region.
     */
    private String snapshotCopyGrantName;

    /*
     * Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated
     * snapshots.
     */
    private Boolean snapshotCopyManual;

    /*
     * The number of days to retain automated snapshots in the destination region after they are copied from the source
     * region. Default is 7. Constraints: Must be at least 1 and no more than 35.
     */
    private Integer snapshotCopyRetentionPeriod;

    /*
     * The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.
     */
    private String snapshotIdentifier;

    /*
     * The list of tags for the cluster parameter group.
     */
    private List<Tag> tags;

    /*
     * A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
     */
    private List<String> vpcSecurityGroupIds;

    /**
     * Creates an instance of AwsRedshiftClusterProperties class.
     */
    public AwsRedshiftClusterProperties() {
    }

    /**
     * Get the allowVersionUpgrade property: Major version upgrades can be applied during the maintenance window to the
     * Amazon Redshift engine that is running on the cluster. Default value is True.
     * 
     * @return the allowVersionUpgrade value.
     */
    public Boolean allowVersionUpgrade() {
        return this.allowVersionUpgrade;
    }

    /**
     * Set the allowVersionUpgrade property: Major version upgrades can be applied during the maintenance window to the
     * Amazon Redshift engine that is running on the cluster. Default value is True.
     * 
     * @param allowVersionUpgrade the allowVersionUpgrade value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withAllowVersionUpgrade(Boolean allowVersionUpgrade) {
        this.allowVersionUpgrade = allowVersionUpgrade;
        return this;
    }

    /**
     * Get the aquaConfigurationStatus property: The value represents how the cluster is configured to use AQUA
     * (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.enabled - Use
     * AQUA if it is available for the current Region and Amazon Redshift node type.disabled - Don't use AQUA.auto -
     * Amazon Redshift determines whether to use AQUA.
     * 
     * @return the aquaConfigurationStatus value.
     */
    public String aquaConfigurationStatus() {
        return this.aquaConfigurationStatus;
    }

    /**
     * Set the aquaConfigurationStatus property: The value represents how the cluster is configured to use AQUA
     * (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.enabled - Use
     * AQUA if it is available for the current Region and Amazon Redshift node type.disabled - Don't use AQUA.auto -
     * Amazon Redshift determines whether to use AQUA.
     * 
     * @param aquaConfigurationStatus the aquaConfigurationStatus value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withAquaConfigurationStatus(String aquaConfigurationStatus) {
        this.aquaConfigurationStatus = aquaConfigurationStatus;
        return this;
    }

    /**
     * Get the automatedSnapshotRetentionPeriod property: The number of days that automated snapshots are retained. If
     * the value is 0, automated snapshots are disabled. Default value is 1.
     * 
     * @return the automatedSnapshotRetentionPeriod value.
     */
    public Integer automatedSnapshotRetentionPeriod() {
        return this.automatedSnapshotRetentionPeriod;
    }

    /**
     * Set the automatedSnapshotRetentionPeriod property: The number of days that automated snapshots are retained. If
     * the value is 0, automated snapshots are disabled. Default value is 1.
     * 
     * @param automatedSnapshotRetentionPeriod the automatedSnapshotRetentionPeriod value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withAutomatedSnapshotRetentionPeriod(Integer automatedSnapshotRetentionPeriod) {
        this.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
        return this;
    }

    /**
     * Get the availabilityZone property: The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision
     * the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision
     * the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the availabilityZoneRelocation property: The option to enable relocation for an Amazon Redshift cluster
     * between Availability Zones after the cluster modification is complete.
     * 
     * @return the availabilityZoneRelocation value.
     */
    public Boolean availabilityZoneRelocation() {
        return this.availabilityZoneRelocation;
    }

    /**
     * Set the availabilityZoneRelocation property: The option to enable relocation for an Amazon Redshift cluster
     * between Availability Zones after the cluster modification is complete.
     * 
     * @param availabilityZoneRelocation the availabilityZoneRelocation value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withAvailabilityZoneRelocation(Boolean availabilityZoneRelocation) {
        this.availabilityZoneRelocation = availabilityZoneRelocation;
        return this;
    }

    /**
     * Get the availabilityZoneRelocationStatus property: The availability zone relocation status of the cluster.
     * 
     * @return the availabilityZoneRelocationStatus value.
     */
    public String availabilityZoneRelocationStatus() {
        return this.availabilityZoneRelocationStatus;
    }

    /**
     * Set the availabilityZoneRelocationStatus property: The availability zone relocation status of the cluster.
     * 
     * @param availabilityZoneRelocationStatus the availabilityZoneRelocationStatus value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withAvailabilityZoneRelocationStatus(String availabilityZoneRelocationStatus) {
        this.availabilityZoneRelocationStatus = availabilityZoneRelocationStatus;
        return this;
    }

    /**
     * Get the classic property: A boolean value indicating whether the resize operation is using the classic resize
     * process. If you don't provide this parameter or set the value to false , the resize type is elastic.
     * 
     * @return the classic value.
     */
    public Boolean classic() {
        return this.classic;
    }

    /**
     * Set the classic property: A boolean value indicating whether the resize operation is using the classic resize
     * process. If you don't provide this parameter or set the value to false , the resize type is elastic.
     * 
     * @param classic the classic value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClassic(Boolean classic) {
        this.classic = classic;
        return this;
    }

    /**
     * Get the clusterIdentifier property: A unique identifier for the cluster. You use this identifier to refer to the
     * cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be
     * lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters
     * within an AWS account.
     * 
     * @return the clusterIdentifier value.
     */
    public String clusterIdentifier() {
        return this.clusterIdentifier;
    }

    /**
     * Set the clusterIdentifier property: A unique identifier for the cluster. You use this identifier to refer to the
     * cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be
     * lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters
     * within an AWS account.
     * 
     * @param clusterIdentifier the clusterIdentifier value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterIdentifier(String clusterIdentifier) {
        this.clusterIdentifier = clusterIdentifier;
        return this;
    }

    /**
     * Get the clusterNamespaceArn property: The Amazon Resource Name (ARN) of the cluster namespace.
     * 
     * @return the clusterNamespaceArn value.
     */
    public String clusterNamespaceArn() {
        return this.clusterNamespaceArn;
    }

    /**
     * Set the clusterNamespaceArn property: The Amazon Resource Name (ARN) of the cluster namespace.
     * 
     * @param clusterNamespaceArn the clusterNamespaceArn value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterNamespaceArn(String clusterNamespaceArn) {
        this.clusterNamespaceArn = clusterNamespaceArn;
        return this;
    }

    /**
     * Get the clusterParameterGroupName property: The name of the parameter group to be associated with this cluster.
     * 
     * @return the clusterParameterGroupName value.
     */
    public String clusterParameterGroupName() {
        return this.clusterParameterGroupName;
    }

    /**
     * Set the clusterParameterGroupName property: The name of the parameter group to be associated with this cluster.
     * 
     * @param clusterParameterGroupName the clusterParameterGroupName value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterParameterGroupName(String clusterParameterGroupName) {
        this.clusterParameterGroupName = clusterParameterGroupName;
        return this;
    }

    /**
     * Get the clusterSecurityGroups property: A list of security groups to be associated with this cluster.
     * 
     * @return the clusterSecurityGroups value.
     */
    public List<String> clusterSecurityGroups() {
        return this.clusterSecurityGroups;
    }

    /**
     * Set the clusterSecurityGroups property: A list of security groups to be associated with this cluster.
     * 
     * @param clusterSecurityGroups the clusterSecurityGroups value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterSecurityGroups(List<String> clusterSecurityGroups) {
        this.clusterSecurityGroups = clusterSecurityGroups;
        return this;
    }

    /**
     * Get the clusterSubnetGroupName property: The name of a cluster subnet group to be associated with this cluster.
     * 
     * @return the clusterSubnetGroupName value.
     */
    public String clusterSubnetGroupName() {
        return this.clusterSubnetGroupName;
    }

    /**
     * Set the clusterSubnetGroupName property: The name of a cluster subnet group to be associated with this cluster.
     * 
     * @param clusterSubnetGroupName the clusterSubnetGroupName value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterSubnetGroupName(String clusterSubnetGroupName) {
        this.clusterSubnetGroupName = clusterSubnetGroupName;
        return this;
    }

    /**
     * Get the clusterType property: The type of the cluster. When cluster type is specified as single-node, the
     * NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required.
     * 
     * @return the clusterType value.
     */
    public String clusterType() {
        return this.clusterType;
    }

    /**
     * Set the clusterType property: The type of the cluster. When cluster type is specified as single-node, the
     * NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required.
     * 
     * @param clusterType the clusterType value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterType(String clusterType) {
        this.clusterType = clusterType;
        return this;
    }

    /**
     * Get the clusterVersion property: The version of the Amazon Redshift engine software that you want to deploy on
     * the cluster.The version selected runs on all the nodes in the cluster.
     * 
     * @return the clusterVersion value.
     */
    public String clusterVersion() {
        return this.clusterVersion;
    }

    /**
     * Set the clusterVersion property: The version of the Amazon Redshift engine software that you want to deploy on
     * the cluster.The version selected runs on all the nodes in the cluster.
     * 
     * @param clusterVersion the clusterVersion value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withClusterVersion(String clusterVersion) {
        this.clusterVersion = clusterVersion;
        return this;
    }

    /**
     * Get the dbName property: The name of the first database to be created when the cluster is created. To create
     * additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands
     * to create a database.
     * 
     * @return the dbName value.
     */
    public String dbName() {
        return this.dbName;
    }

    /**
     * Set the dbName property: The name of the first database to be created when the cluster is created. To create
     * additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands
     * to create a database.
     * 
     * @param dbName the dbName value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDbName(String dbName) {
        this.dbName = dbName;
        return this;
    }

    /**
     * Get the deferMaintenance property: A boolean indicating whether to enable the deferred maintenance window.
     * 
     * @return the deferMaintenance value.
     */
    public Boolean deferMaintenance() {
        return this.deferMaintenance;
    }

    /**
     * Set the deferMaintenance property: A boolean indicating whether to enable the deferred maintenance window.
     * 
     * @param deferMaintenance the deferMaintenance value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDeferMaintenance(Boolean deferMaintenance) {
        this.deferMaintenance = deferMaintenance;
        return this;
    }

    /**
     * Get the deferMaintenanceDuration property: An integer indicating the duration of the maintenance window in days.
     * If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
     * 
     * @return the deferMaintenanceDuration value.
     */
    public Integer deferMaintenanceDuration() {
        return this.deferMaintenanceDuration;
    }

    /**
     * Set the deferMaintenanceDuration property: An integer indicating the duration of the maintenance window in days.
     * If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
     * 
     * @param deferMaintenanceDuration the deferMaintenanceDuration value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDeferMaintenanceDuration(Integer deferMaintenanceDuration) {
        this.deferMaintenanceDuration = deferMaintenanceDuration;
        return this;
    }

    /**
     * Get the deferMaintenanceEndTime property: A timestamp indicating end time for the deferred maintenance window. If
     * you specify an end time, you can't specify a duration.
     * 
     * @return the deferMaintenanceEndTime value.
     */
    public String deferMaintenanceEndTime() {
        return this.deferMaintenanceEndTime;
    }

    /**
     * Set the deferMaintenanceEndTime property: A timestamp indicating end time for the deferred maintenance window. If
     * you specify an end time, you can't specify a duration.
     * 
     * @param deferMaintenanceEndTime the deferMaintenanceEndTime value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDeferMaintenanceEndTime(String deferMaintenanceEndTime) {
        this.deferMaintenanceEndTime = deferMaintenanceEndTime;
        return this;
    }

    /**
     * Get the deferMaintenanceIdentifier property: A unique identifier for the deferred maintenance window.
     * 
     * @return the deferMaintenanceIdentifier value.
     */
    public String deferMaintenanceIdentifier() {
        return this.deferMaintenanceIdentifier;
    }

    /**
     * Set the deferMaintenanceIdentifier property: A unique identifier for the deferred maintenance window.
     * 
     * @param deferMaintenanceIdentifier the deferMaintenanceIdentifier value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDeferMaintenanceIdentifier(String deferMaintenanceIdentifier) {
        this.deferMaintenanceIdentifier = deferMaintenanceIdentifier;
        return this;
    }

    /**
     * Get the deferMaintenanceStartTime property: A timestamp indicating the start time for the deferred maintenance
     * window.
     * 
     * @return the deferMaintenanceStartTime value.
     */
    public String deferMaintenanceStartTime() {
        return this.deferMaintenanceStartTime;
    }

    /**
     * Set the deferMaintenanceStartTime property: A timestamp indicating the start time for the deferred maintenance
     * window.
     * 
     * @param deferMaintenanceStartTime the deferMaintenanceStartTime value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDeferMaintenanceStartTime(String deferMaintenanceStartTime) {
        this.deferMaintenanceStartTime = deferMaintenanceStartTime;
        return this;
    }

    /**
     * Get the destinationRegion property: The destination AWS Region that you want to copy snapshots to. Constraints:
     * Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web
     * Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference.
     * 
     * @return the destinationRegion value.
     */
    public String destinationRegion() {
        return this.destinationRegion;
    }

    /**
     * Set the destinationRegion property: The destination AWS Region that you want to copy snapshots to. Constraints:
     * Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web
     * Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference.
     * 
     * @param destinationRegion the destinationRegion value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withDestinationRegion(String destinationRegion) {
        this.destinationRegion = destinationRegion;
        return this;
    }

    /**
     * Get the elasticIp property: The Elastic IP (EIP) address for the cluster.
     * 
     * @return the elasticIp value.
     */
    public String elasticIp() {
        return this.elasticIp;
    }

    /**
     * Set the elasticIp property: The Elastic IP (EIP) address for the cluster.
     * 
     * @param elasticIp the elasticIp value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withElasticIp(String elasticIp) {
        this.elasticIp = elasticIp;
        return this;
    }

    /**
     * Get the encrypted property: If true, the data in the cluster is encrypted at rest.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: If true, the data in the cluster is encrypted at rest.
     * 
     * @param encrypted the encrypted value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the endpoint property: Property endpoint.
     * 
     * @return the endpoint value.
     */
    public EndpointAutoGenerated3 endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: Property endpoint.
     * 
     * @param endpoint the endpoint value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withEndpoint(EndpointAutoGenerated3 endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the enhancedVpcRouting property: An option that specifies whether to create the cluster with enhanced VPC
     * routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more
     * information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.If this option is true ,
     * enhanced VPC routing is enabled.Default: false.
     * 
     * @return the enhancedVpcRouting value.
     */
    public Boolean enhancedVpcRouting() {
        return this.enhancedVpcRouting;
    }

    /**
     * Set the enhancedVpcRouting property: An option that specifies whether to create the cluster with enhanced VPC
     * routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more
     * information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.If this option is true ,
     * enhanced VPC routing is enabled.Default: false.
     * 
     * @param enhancedVpcRouting the enhancedVpcRouting value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withEnhancedVpcRouting(Boolean enhancedVpcRouting) {
        this.enhancedVpcRouting = enhancedVpcRouting;
        return this;
    }

    /**
     * Get the hsmClientCertificateIdentifier property: Specifies the name of the HSM client certificate the Amazon
     * Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
     * 
     * @return the hsmClientCertificateIdentifier value.
     */
    public String hsmClientCertificateIdentifier() {
        return this.hsmClientCertificateIdentifier;
    }

    /**
     * Set the hsmClientCertificateIdentifier property: Specifies the name of the HSM client certificate the Amazon
     * Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
     * 
     * @param hsmClientCertificateIdentifier the hsmClientCertificateIdentifier value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withHsmClientCertificateIdentifier(String hsmClientCertificateIdentifier) {
        this.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier;
        return this;
    }

    /**
     * Get the hsmConfigurationIdentifier property: Specifies the name of the HSM configuration that contains the
     * information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
     * 
     * @return the hsmConfigurationIdentifier value.
     */
    public String hsmConfigurationIdentifier() {
        return this.hsmConfigurationIdentifier;
    }

    /**
     * Set the hsmConfigurationIdentifier property: Specifies the name of the HSM configuration that contains the
     * information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
     * 
     * @param hsmConfigurationIdentifier the hsmConfigurationIdentifier value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withHsmConfigurationIdentifier(String hsmConfigurationIdentifier) {
        this.hsmConfigurationIdentifier = hsmConfigurationIdentifier;
        return this;
    }

    /**
     * Get the iamRoles property: A list of AWS Identity and Access Management (IAM) roles that can be used by the
     * cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format.
     * You can supply up to 50 IAM roles in a single request.
     * 
     * @return the iamRoles value.
     */
    public List<String> iamRoles() {
        return this.iamRoles;
    }

    /**
     * Set the iamRoles property: A list of AWS Identity and Access Management (IAM) roles that can be used by the
     * cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format.
     * You can supply up to 50 IAM roles in a single request.
     * 
     * @param iamRoles the iamRoles value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withIamRoles(List<String> iamRoles) {
        this.iamRoles = iamRoles;
        return this;
    }

    /**
     * Get the kmsKeyId property: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use
     * to encrypt data in the cluster.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use
     * to encrypt data in the cluster.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the loggingProperties property: Property loggingProperties.
     * 
     * @return the loggingProperties value.
     */
    public LoggingProperties loggingProperties() {
        return this.loggingProperties;
    }

    /**
     * Set the loggingProperties property: Property loggingProperties.
     * 
     * @param loggingProperties the loggingProperties value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withLoggingProperties(LoggingProperties loggingProperties) {
        this.loggingProperties = loggingProperties;
        return this;
    }

    /**
     * Get the maintenanceTrackName property: The name for the maintenance track that you want to assign for the
     * cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster
     * until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest
     * cluster release available for the maintenance track. At this point, the maintenance track name is applied.
     * 
     * @return the maintenanceTrackName value.
     */
    public String maintenanceTrackName() {
        return this.maintenanceTrackName;
    }

    /**
     * Set the maintenanceTrackName property: The name for the maintenance track that you want to assign for the
     * cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster
     * until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest
     * cluster release available for the maintenance track. At this point, the maintenance track name is applied.
     * 
     * @param maintenanceTrackName the maintenanceTrackName value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withMaintenanceTrackName(String maintenanceTrackName) {
        this.maintenanceTrackName = maintenanceTrackName;
        return this;
    }

    /**
     * Get the manageMasterPassword property: A boolean indicating if the redshift cluster's admin user credentials is
     * managed by Redshift or not. You can't use MasterUserPassword if ManageMasterPassword is true. If
     * ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's
     * password.
     * 
     * @return the manageMasterPassword value.
     */
    public Boolean manageMasterPassword() {
        return this.manageMasterPassword;
    }

    /**
     * Set the manageMasterPassword property: A boolean indicating if the redshift cluster's admin user credentials is
     * managed by Redshift or not. You can't use MasterUserPassword if ManageMasterPassword is true. If
     * ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's
     * password.
     * 
     * @param manageMasterPassword the manageMasterPassword value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withManageMasterPassword(Boolean manageMasterPassword) {
        this.manageMasterPassword = manageMasterPassword;
        return this;
    }

    /**
     * Get the manualSnapshotRetentionPeriod property: The number of days to retain newly copied snapshots in the
     * destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot
     * is retained indefinitely.The value must be either -1 or an integer between 1 and 3,653.
     * 
     * @return the manualSnapshotRetentionPeriod value.
     */
    public Integer manualSnapshotRetentionPeriod() {
        return this.manualSnapshotRetentionPeriod;
    }

    /**
     * Set the manualSnapshotRetentionPeriod property: The number of days to retain newly copied snapshots in the
     * destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot
     * is retained indefinitely.The value must be either -1 or an integer between 1 and 3,653.
     * 
     * @param manualSnapshotRetentionPeriod the manualSnapshotRetentionPeriod value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withManualSnapshotRetentionPeriod(Integer manualSnapshotRetentionPeriod) {
        this.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
        return this;
    }

    /**
     * Get the masterPasswordSecretArn property: The Amazon Resource Name (ARN) for the cluster's admin user credentials
     * secret.
     * 
     * @return the masterPasswordSecretArn value.
     */
    public String masterPasswordSecretArn() {
        return this.masterPasswordSecretArn;
    }

    /**
     * Set the masterPasswordSecretArn property: The Amazon Resource Name (ARN) for the cluster's admin user credentials
     * secret.
     * 
     * @param masterPasswordSecretArn the masterPasswordSecretArn value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withMasterPasswordSecretArn(String masterPasswordSecretArn) {
        this.masterPasswordSecretArn = masterPasswordSecretArn;
        return this;
    }

    /**
     * Get the masterPasswordSecretKmsKeyId property: The ID of the Key Management Service (KMS) key used to encrypt and
     * store the cluster's admin user credentials secret.
     * 
     * @return the masterPasswordSecretKmsKeyId value.
     */
    public String masterPasswordSecretKmsKeyId() {
        return this.masterPasswordSecretKmsKeyId;
    }

    /**
     * Set the masterPasswordSecretKmsKeyId property: The ID of the Key Management Service (KMS) key used to encrypt and
     * store the cluster's admin user credentials secret.
     * 
     * @param masterPasswordSecretKmsKeyId the masterPasswordSecretKmsKeyId value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withMasterPasswordSecretKmsKeyId(String masterPasswordSecretKmsKeyId) {
        this.masterPasswordSecretKmsKeyId = masterPasswordSecretKmsKeyId;
        return this;
    }

    /**
     * Get the masterUserPassword property: The password associated with the master user account for the cluster that is
     * being created. You can't use MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and
     * 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase
     * letter.Must contain one number.Can be any printable ASCII character.
     * 
     * @return the masterUserPassword value.
     */
    public String masterUserPassword() {
        return this.masterUserPassword;
    }

    /**
     * Set the masterUserPassword property: The password associated with the master user account for the cluster that is
     * being created. You can't use MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and
     * 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase
     * letter.Must contain one number.Can be any printable ASCII character.
     * 
     * @param masterUserPassword the masterUserPassword value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withMasterUserPassword(String masterUserPassword) {
        this.masterUserPassword = masterUserPassword;
        return this;
    }

    /**
     * Get the masterUsername property: The user name associated with the master user account for the cluster that is
     * being created. The user name can't be PUBLIC and first character must be a letter.
     * 
     * @return the masterUsername value.
     */
    public String masterUsername() {
        return this.masterUsername;
    }

    /**
     * Set the masterUsername property: The user name associated with the master user account for the cluster that is
     * being created. The user name can't be PUBLIC and first character must be a letter.
     * 
     * @param masterUsername the masterUsername value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withMasterUsername(String masterUsername) {
        this.masterUsername = masterUsername;
        return this;
    }

    /**
     * Get the multiAZ property: A boolean indicating if the redshift cluster is multi-az or not. If you don't provide
     * this parameter or set the value to false, the redshift cluster will be single-az.
     * 
     * @return the multiAZ value.
     */
    public Boolean multiAZ() {
        return this.multiAZ;
    }

    /**
     * Set the multiAZ property: A boolean indicating if the redshift cluster is multi-az or not. If you don't provide
     * this parameter or set the value to false, the redshift cluster will be single-az.
     * 
     * @param multiAZ the multiAZ value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withMultiAZ(Boolean multiAZ) {
        this.multiAZ = multiAZ;
        return this;
    }

    /**
     * Get the namespaceResourcePolicy property: The namespace resource policy document that will be attached to a
     * Redshift cluster.
     * 
     * @return the namespaceResourcePolicy value.
     */
    public Object namespaceResourcePolicy() {
        return this.namespaceResourcePolicy;
    }

    /**
     * Set the namespaceResourcePolicy property: The namespace resource policy document that will be attached to a
     * Redshift cluster.
     * 
     * @param namespaceResourcePolicy the namespaceResourcePolicy value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withNamespaceResourcePolicy(Object namespaceResourcePolicy) {
        this.namespaceResourcePolicy = namespaceResourcePolicy;
        return this;
    }

    /**
     * Get the nodeType property: The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge
     * | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge.
     * 
     * @return the nodeType value.
     */
    public String nodeType() {
        return this.nodeType;
    }

    /**
     * Set the nodeType property: The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge
     * | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge.
     * 
     * @param nodeType the nodeType value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withNodeType(String nodeType) {
        this.nodeType = nodeType;
        return this;
    }

    /**
     * Get the numberOfNodes property: The number of compute nodes in the cluster. This parameter is required when the
     * ClusterType parameter is specified as multi-node.
     * 
     * @return the numberOfNodes value.
     */
    public Integer numberOfNodes() {
        return this.numberOfNodes;
    }

    /**
     * Set the numberOfNodes property: The number of compute nodes in the cluster. This parameter is required when the
     * ClusterType parameter is specified as multi-node.
     * 
     * @param numberOfNodes the numberOfNodes value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withNumberOfNodes(Integer numberOfNodes) {
        this.numberOfNodes = numberOfNodes;
        return this;
    }

    /**
     * Get the ownerAccount property: Property ownerAccount.
     * 
     * @return the ownerAccount value.
     */
    public String ownerAccount() {
        return this.ownerAccount;
    }

    /**
     * Set the ownerAccount property: Property ownerAccount.
     * 
     * @param ownerAccount the ownerAccount value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withOwnerAccount(String ownerAccount) {
        this.ownerAccount = ownerAccount;
        return this;
    }

    /**
     * Get the port property: The port number on which the cluster accepts incoming connections. The cluster is
     * accessible only via the JDBC and ODBC connection strings.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port number on which the cluster accepts incoming connections. The cluster is
     * accessible only via the JDBC and ODBC connection strings.
     * 
     * @param port the port value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the preferredMaintenanceWindow property: The weekly time range (in UTC) during which automated cluster
     * maintenance can occur.
     * 
     * @return the preferredMaintenanceWindow value.
     */
    public String preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }

    /**
     * Set the preferredMaintenanceWindow property: The weekly time range (in UTC) during which automated cluster
     * maintenance can occur.
     * 
     * @param preferredMaintenanceWindow the preferredMaintenanceWindow value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        return this;
    }

    /**
     * Get the publiclyAccessible property: If true, the cluster can be accessed from a public network.
     * 
     * @return the publiclyAccessible value.
     */
    public Boolean publiclyAccessible() {
        return this.publiclyAccessible;
    }

    /**
     * Set the publiclyAccessible property: If true, the cluster can be accessed from a public network.
     * 
     * @param publiclyAccessible the publiclyAccessible value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withPubliclyAccessible(Boolean publiclyAccessible) {
        this.publiclyAccessible = publiclyAccessible;
        return this;
    }

    /**
     * Get the resourceAction property: The Redshift operation to be performed. Resource Action supports pause-cluster,
     * resume-cluster, failover-primary-compute APIs.
     * 
     * @return the resourceAction value.
     */
    public String resourceAction() {
        return this.resourceAction;
    }

    /**
     * Set the resourceAction property: The Redshift operation to be performed. Resource Action supports pause-cluster,
     * resume-cluster, failover-primary-compute APIs.
     * 
     * @param resourceAction the resourceAction value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withResourceAction(String resourceAction) {
        this.resourceAction = resourceAction;
        return this;
    }

    /**
     * Get the revisionTarget property: The identifier of the database revision. You can retrieve this value from the
     * response to the DescribeClusterDbRevisions request.
     * 
     * @return the revisionTarget value.
     */
    public String revisionTarget() {
        return this.revisionTarget;
    }

    /**
     * Set the revisionTarget property: The identifier of the database revision. You can retrieve this value from the
     * response to the DescribeClusterDbRevisions request.
     * 
     * @param revisionTarget the revisionTarget value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withRevisionTarget(String revisionTarget) {
        this.revisionTarget = revisionTarget;
        return this;
    }

    /**
     * Get the rotateEncryptionKey property: A boolean indicating if we want to rotate Encryption Keys.
     * 
     * @return the rotateEncryptionKey value.
     */
    public Boolean rotateEncryptionKey() {
        return this.rotateEncryptionKey;
    }

    /**
     * Set the rotateEncryptionKey property: A boolean indicating if we want to rotate Encryption Keys.
     * 
     * @param rotateEncryptionKey the rotateEncryptionKey value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withRotateEncryptionKey(Boolean rotateEncryptionKey) {
        this.rotateEncryptionKey = rotateEncryptionKey;
        return this;
    }

    /**
     * Get the snapshotClusterIdentifier property: The name of the cluster the source snapshot was created from. This
     * parameter is required if your IAM user has a policy containing a snapshot resource element that specifies
     * anything other than * for the cluster name.
     * 
     * @return the snapshotClusterIdentifier value.
     */
    public String snapshotClusterIdentifier() {
        return this.snapshotClusterIdentifier;
    }

    /**
     * Set the snapshotClusterIdentifier property: The name of the cluster the source snapshot was created from. This
     * parameter is required if your IAM user has a policy containing a snapshot resource element that specifies
     * anything other than * for the cluster name.
     * 
     * @param snapshotClusterIdentifier the snapshotClusterIdentifier value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withSnapshotClusterIdentifier(String snapshotClusterIdentifier) {
        this.snapshotClusterIdentifier = snapshotClusterIdentifier;
        return this;
    }

    /**
     * Get the snapshotCopyGrantName property: The name of the snapshot copy grant to use when snapshots of an AWS
     * KMS-encrypted cluster are copied to the destination region.
     * 
     * @return the snapshotCopyGrantName value.
     */
    public String snapshotCopyGrantName() {
        return this.snapshotCopyGrantName;
    }

    /**
     * Set the snapshotCopyGrantName property: The name of the snapshot copy grant to use when snapshots of an AWS
     * KMS-encrypted cluster are copied to the destination region.
     * 
     * @param snapshotCopyGrantName the snapshotCopyGrantName value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withSnapshotCopyGrantName(String snapshotCopyGrantName) {
        this.snapshotCopyGrantName = snapshotCopyGrantName;
        return this;
    }

    /**
     * Get the snapshotCopyManual property: Indicates whether to apply the snapshot retention period to newly copied
     * manual snapshots instead of automated snapshots.
     * 
     * @return the snapshotCopyManual value.
     */
    public Boolean snapshotCopyManual() {
        return this.snapshotCopyManual;
    }

    /**
     * Set the snapshotCopyManual property: Indicates whether to apply the snapshot retention period to newly copied
     * manual snapshots instead of automated snapshots.
     * 
     * @param snapshotCopyManual the snapshotCopyManual value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withSnapshotCopyManual(Boolean snapshotCopyManual) {
        this.snapshotCopyManual = snapshotCopyManual;
        return this;
    }

    /**
     * Get the snapshotCopyRetentionPeriod property: The number of days to retain automated snapshots in the destination
     * region after they are copied from the source region. Default is 7. Constraints: Must be at least 1 and no more
     * than 35.
     * 
     * @return the snapshotCopyRetentionPeriod value.
     */
    public Integer snapshotCopyRetentionPeriod() {
        return this.snapshotCopyRetentionPeriod;
    }

    /**
     * Set the snapshotCopyRetentionPeriod property: The number of days to retain automated snapshots in the destination
     * region after they are copied from the source region. Default is 7. Constraints: Must be at least 1 and no more
     * than 35.
     * 
     * @param snapshotCopyRetentionPeriod the snapshotCopyRetentionPeriod value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withSnapshotCopyRetentionPeriod(Integer snapshotCopyRetentionPeriod) {
        this.snapshotCopyRetentionPeriod = snapshotCopyRetentionPeriod;
        return this;
    }

    /**
     * Get the snapshotIdentifier property: The name of the snapshot from which to create the new cluster. This
     * parameter isn't case sensitive.
     * 
     * @return the snapshotIdentifier value.
     */
    public String snapshotIdentifier() {
        return this.snapshotIdentifier;
    }

    /**
     * Set the snapshotIdentifier property: The name of the snapshot from which to create the new cluster. This
     * parameter isn't case sensitive.
     * 
     * @param snapshotIdentifier the snapshotIdentifier value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withSnapshotIdentifier(String snapshotIdentifier) {
        this.snapshotIdentifier = snapshotIdentifier;
        return this;
    }

    /**
     * Get the tags property: The list of tags for the cluster parameter group.
     * 
     * @return the tags value.
     */
    public List<Tag> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The list of tags for the cluster parameter group.
     * 
     * @param tags the tags value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withTags(List<Tag> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcSecurityGroupIds property: A list of Virtual Private Cloud (VPC) security groups to be associated with
     * the cluster.
     * 
     * @return the vpcSecurityGroupIds value.
     */
    public List<String> vpcSecurityGroupIds() {
        return this.vpcSecurityGroupIds;
    }

    /**
     * Set the vpcSecurityGroupIds property: A list of Virtual Private Cloud (VPC) security groups to be associated with
     * the cluster.
     * 
     * @param vpcSecurityGroupIds the vpcSecurityGroupIds value to set.
     * @return the AwsRedshiftClusterProperties object itself.
     */
    public AwsRedshiftClusterProperties withVpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
        this.vpcSecurityGroupIds = vpcSecurityGroupIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoint() != null) {
            endpoint().validate();
        }
        if (loggingProperties() != null) {
            loggingProperties().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allowVersionUpgrade", this.allowVersionUpgrade);
        jsonWriter.writeStringField("aquaConfigurationStatus", this.aquaConfigurationStatus);
        jsonWriter.writeNumberField("automatedSnapshotRetentionPeriod", this.automatedSnapshotRetentionPeriod);
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeBooleanField("availabilityZoneRelocation", this.availabilityZoneRelocation);
        jsonWriter.writeStringField("availabilityZoneRelocationStatus", this.availabilityZoneRelocationStatus);
        jsonWriter.writeBooleanField("classic", this.classic);
        jsonWriter.writeStringField("clusterIdentifier", this.clusterIdentifier);
        jsonWriter.writeStringField("clusterNamespaceArn", this.clusterNamespaceArn);
        jsonWriter.writeStringField("clusterParameterGroupName", this.clusterParameterGroupName);
        jsonWriter.writeArrayField("clusterSecurityGroups", this.clusterSecurityGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("clusterSubnetGroupName", this.clusterSubnetGroupName);
        jsonWriter.writeStringField("clusterType", this.clusterType);
        jsonWriter.writeStringField("clusterVersion", this.clusterVersion);
        jsonWriter.writeStringField("dbName", this.dbName);
        jsonWriter.writeBooleanField("deferMaintenance", this.deferMaintenance);
        jsonWriter.writeNumberField("deferMaintenanceDuration", this.deferMaintenanceDuration);
        jsonWriter.writeStringField("deferMaintenanceEndTime", this.deferMaintenanceEndTime);
        jsonWriter.writeStringField("deferMaintenanceIdentifier", this.deferMaintenanceIdentifier);
        jsonWriter.writeStringField("deferMaintenanceStartTime", this.deferMaintenanceStartTime);
        jsonWriter.writeStringField("destinationRegion", this.destinationRegion);
        jsonWriter.writeStringField("elasticIp", this.elasticIp);
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeJsonField("endpoint", this.endpoint);
        jsonWriter.writeBooleanField("enhancedVpcRouting", this.enhancedVpcRouting);
        jsonWriter.writeStringField("hsmClientCertificateIdentifier", this.hsmClientCertificateIdentifier);
        jsonWriter.writeStringField("hsmConfigurationIdentifier", this.hsmConfigurationIdentifier);
        jsonWriter.writeArrayField("iamRoles", this.iamRoles, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeJsonField("loggingProperties", this.loggingProperties);
        jsonWriter.writeStringField("maintenanceTrackName", this.maintenanceTrackName);
        jsonWriter.writeBooleanField("manageMasterPassword", this.manageMasterPassword);
        jsonWriter.writeNumberField("manualSnapshotRetentionPeriod", this.manualSnapshotRetentionPeriod);
        jsonWriter.writeStringField("masterPasswordSecretArn", this.masterPasswordSecretArn);
        jsonWriter.writeStringField("masterPasswordSecretKmsKeyId", this.masterPasswordSecretKmsKeyId);
        jsonWriter.writeStringField("masterUserPassword", this.masterUserPassword);
        jsonWriter.writeStringField("masterUsername", this.masterUsername);
        jsonWriter.writeBooleanField("multiAZ", this.multiAZ);
        jsonWriter.writeUntypedField("namespaceResourcePolicy", this.namespaceResourcePolicy);
        jsonWriter.writeStringField("nodeType", this.nodeType);
        jsonWriter.writeNumberField("numberOfNodes", this.numberOfNodes);
        jsonWriter.writeStringField("ownerAccount", this.ownerAccount);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("preferredMaintenanceWindow", this.preferredMaintenanceWindow);
        jsonWriter.writeBooleanField("publiclyAccessible", this.publiclyAccessible);
        jsonWriter.writeStringField("resourceAction", this.resourceAction);
        jsonWriter.writeStringField("revisionTarget", this.revisionTarget);
        jsonWriter.writeBooleanField("rotateEncryptionKey", this.rotateEncryptionKey);
        jsonWriter.writeStringField("snapshotClusterIdentifier", this.snapshotClusterIdentifier);
        jsonWriter.writeStringField("snapshotCopyGrantName", this.snapshotCopyGrantName);
        jsonWriter.writeBooleanField("snapshotCopyManual", this.snapshotCopyManual);
        jsonWriter.writeNumberField("snapshotCopyRetentionPeriod", this.snapshotCopyRetentionPeriod);
        jsonWriter.writeStringField("snapshotIdentifier", this.snapshotIdentifier);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("vpcSecurityGroupIds", this.vpcSecurityGroupIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRedshiftClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRedshiftClusterProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRedshiftClusterProperties.
     */
    public static AwsRedshiftClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRedshiftClusterProperties deserializedAwsRedshiftClusterProperties = new AwsRedshiftClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowVersionUpgrade".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.allowVersionUpgrade
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("aquaConfigurationStatus".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.aquaConfigurationStatus = reader.getString();
                } else if ("automatedSnapshotRetentionPeriod".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.automatedSnapshotRetentionPeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.availabilityZone = reader.getString();
                } else if ("availabilityZoneRelocation".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.availabilityZoneRelocation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("availabilityZoneRelocationStatus".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.availabilityZoneRelocationStatus = reader.getString();
                } else if ("classic".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.classic = reader.getNullable(JsonReader::getBoolean);
                } else if ("clusterIdentifier".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.clusterIdentifier = reader.getString();
                } else if ("clusterNamespaceArn".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.clusterNamespaceArn = reader.getString();
                } else if ("clusterParameterGroupName".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.clusterParameterGroupName = reader.getString();
                } else if ("clusterSecurityGroups".equals(fieldName)) {
                    List<String> clusterSecurityGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRedshiftClusterProperties.clusterSecurityGroups = clusterSecurityGroups;
                } else if ("clusterSubnetGroupName".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.clusterSubnetGroupName = reader.getString();
                } else if ("clusterType".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.clusterType = reader.getString();
                } else if ("clusterVersion".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.clusterVersion = reader.getString();
                } else if ("dbName".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.dbName = reader.getString();
                } else if ("deferMaintenance".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.deferMaintenance
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("deferMaintenanceDuration".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.deferMaintenanceDuration
                        = reader.getNullable(JsonReader::getInt);
                } else if ("deferMaintenanceEndTime".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.deferMaintenanceEndTime = reader.getString();
                } else if ("deferMaintenanceIdentifier".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.deferMaintenanceIdentifier = reader.getString();
                } else if ("deferMaintenanceStartTime".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.deferMaintenanceStartTime = reader.getString();
                } else if ("destinationRegion".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.destinationRegion = reader.getString();
                } else if ("elasticIp".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.elasticIp = reader.getString();
                } else if ("encrypted".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("endpoint".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.endpoint = EndpointAutoGenerated3.fromJson(reader);
                } else if ("enhancedVpcRouting".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.enhancedVpcRouting
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("hsmClientCertificateIdentifier".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.hsmClientCertificateIdentifier = reader.getString();
                } else if ("hsmConfigurationIdentifier".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.hsmConfigurationIdentifier = reader.getString();
                } else if ("iamRoles".equals(fieldName)) {
                    List<String> iamRoles = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRedshiftClusterProperties.iamRoles = iamRoles;
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.kmsKeyId = reader.getString();
                } else if ("loggingProperties".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.loggingProperties = LoggingProperties.fromJson(reader);
                } else if ("maintenanceTrackName".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.maintenanceTrackName = reader.getString();
                } else if ("manageMasterPassword".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.manageMasterPassword
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("manualSnapshotRetentionPeriod".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.manualSnapshotRetentionPeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("masterPasswordSecretArn".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.masterPasswordSecretArn = reader.getString();
                } else if ("masterPasswordSecretKmsKeyId".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.masterPasswordSecretKmsKeyId = reader.getString();
                } else if ("masterUserPassword".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.masterUserPassword = reader.getString();
                } else if ("masterUsername".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.masterUsername = reader.getString();
                } else if ("multiAZ".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.multiAZ = reader.getNullable(JsonReader::getBoolean);
                } else if ("namespaceResourcePolicy".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.namespaceResourcePolicy = reader.readUntyped();
                } else if ("nodeType".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.nodeType = reader.getString();
                } else if ("numberOfNodes".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.numberOfNodes = reader.getNullable(JsonReader::getInt);
                } else if ("ownerAccount".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.ownerAccount = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.port = reader.getNullable(JsonReader::getInt);
                } else if ("preferredMaintenanceWindow".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.preferredMaintenanceWindow = reader.getString();
                } else if ("publiclyAccessible".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.publiclyAccessible
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("resourceAction".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.resourceAction = reader.getString();
                } else if ("revisionTarget".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.revisionTarget = reader.getString();
                } else if ("rotateEncryptionKey".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.rotateEncryptionKey
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("snapshotClusterIdentifier".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.snapshotClusterIdentifier = reader.getString();
                } else if ("snapshotCopyGrantName".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.snapshotCopyGrantName = reader.getString();
                } else if ("snapshotCopyManual".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.snapshotCopyManual
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("snapshotCopyRetentionPeriod".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.snapshotCopyRetentionPeriod
                        = reader.getNullable(JsonReader::getInt);
                } else if ("snapshotIdentifier".equals(fieldName)) {
                    deserializedAwsRedshiftClusterProperties.snapshotIdentifier = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<Tag> tags = reader.readArray(reader1 -> Tag.fromJson(reader1));
                    deserializedAwsRedshiftClusterProperties.tags = tags;
                } else if ("vpcSecurityGroupIds".equals(fieldName)) {
                    List<String> vpcSecurityGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsRedshiftClusterProperties.vpcSecurityGroupIds = vpcSecurityGroupIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRedshiftClusterProperties;
        });
    }
}
