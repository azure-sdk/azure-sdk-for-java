// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Metrics.
 */
@Fluent
public final class Metrics implements JsonSerializable<Metrics> {
    /*
     * A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event. A
     * container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics
     * ``EventThreshold``.
     */
    private ReplicationTimeValue eventThreshold;

    /*
     * Specifies whether the replication metrics are enabled.
     */
    private MetricsStatus status;

    /**
     * Creates an instance of Metrics class.
     */
    public Metrics() {
    }

    /**
     * Get the eventThreshold property: A container specifying the time threshold for emitting the
     * ``s3:Replication:OperationMissedThreshold`` event. A container specifying the time value for S3 Replication Time
     * Control (S3 RTC) and replication metrics ``EventThreshold``.
     * 
     * @return the eventThreshold value.
     */
    public ReplicationTimeValue eventThreshold() {
        return this.eventThreshold;
    }

    /**
     * Set the eventThreshold property: A container specifying the time threshold for emitting the
     * ``s3:Replication:OperationMissedThreshold`` event. A container specifying the time value for S3 Replication Time
     * Control (S3 RTC) and replication metrics ``EventThreshold``.
     * 
     * @param eventThreshold the eventThreshold value to set.
     * @return the Metrics object itself.
     */
    public Metrics withEventThreshold(ReplicationTimeValue eventThreshold) {
        this.eventThreshold = eventThreshold;
        return this;
    }

    /**
     * Get the status property: Specifies whether the replication metrics are enabled.
     * 
     * @return the status value.
     */
    public MetricsStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Specifies whether the replication metrics are enabled.
     * 
     * @param status the status value to set.
     * @return the Metrics object itself.
     */
    public Metrics withStatus(MetricsStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (eventThreshold() != null) {
            eventThreshold().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("eventThreshold", this.eventThreshold);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Metrics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Metrics if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Metrics.
     */
    public static Metrics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Metrics deserializedMetrics = new Metrics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventThreshold".equals(fieldName)) {
                    deserializedMetrics.eventThreshold = ReplicationTimeValue.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedMetrics.status = MetricsStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetrics;
        });
    }
}
