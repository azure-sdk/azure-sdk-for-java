// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Criteria.
 */
@Fluent
public final class Criteria implements JsonSerializable<Criteria> {
    /*
     * The S3 object key for the AllowList.
     */
    private String regex;

    /*
     * The S3 location for the AllowList.
     */
    private S3WordsList s3WordsList;

    /**
     * Creates an instance of Criteria class.
     */
    public Criteria() {
    }

    /**
     * Get the regex property: The S3 object key for the AllowList.
     * 
     * @return the regex value.
     */
    public String regex() {
        return this.regex;
    }

    /**
     * Set the regex property: The S3 object key for the AllowList.
     * 
     * @param regex the regex value to set.
     * @return the Criteria object itself.
     */
    public Criteria withRegex(String regex) {
        this.regex = regex;
        return this;
    }

    /**
     * Get the s3WordsList property: The S3 location for the AllowList.
     * 
     * @return the s3WordsList value.
     */
    public S3WordsList s3WordsList() {
        return this.s3WordsList;
    }

    /**
     * Set the s3WordsList property: The S3 location for the AllowList.
     * 
     * @param s3WordsList the s3WordsList value to set.
     * @return the Criteria object itself.
     */
    public Criteria withS3WordsList(S3WordsList s3WordsList) {
        this.s3WordsList = s3WordsList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (s3WordsList() != null) {
            s3WordsList().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regex", this.regex);
        jsonWriter.writeJsonField("s3WordsList", this.s3WordsList);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Criteria from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Criteria if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Criteria.
     */
    public static Criteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Criteria deserializedCriteria = new Criteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("regex".equals(fieldName)) {
                    deserializedCriteria.regex = reader.getString();
                } else if ("s3WordsList".equals(fieldName)) {
                    deserializedCriteria.s3WordsList = S3WordsList.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCriteria;
        });
    }
}
