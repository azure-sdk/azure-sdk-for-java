// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of HostVolumeProperties.
 */
@Fluent
public final class HostVolumeProperties implements JsonSerializable<HostVolumeProperties> {
    /*
     * When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance
     * that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path
     * for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the
     * specified location on the host container instance until you delete it manually. If the ``sourcePath`` value
     * doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the
     * contents of the source path folder are exported. If you're using the Fargate launch type, the ``sourcePath``
     * parameter is not supported.
     */
    private String sourcePath;

    /**
     * Creates an instance of HostVolumeProperties class.
     */
    public HostVolumeProperties() {
    }

    /**
     * Get the sourcePath property: When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
     * the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon
     * has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the
     * data volume persists at the specified location on the host container instance until you delete it manually. If
     * the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the
     * location does exist, the contents of the source path folder are exported. If you're using the Fargate launch
     * type, the ``sourcePath`` parameter is not supported.
     * 
     * @return the sourcePath value.
     */
    public String sourcePath() {
        return this.sourcePath;
    }

    /**
     * Set the sourcePath property: When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on
     * the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon
     * has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the
     * data volume persists at the specified location on the host container instance until you delete it manually. If
     * the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the
     * location does exist, the contents of the source path folder are exported. If you're using the Fargate launch
     * type, the ``sourcePath`` parameter is not supported.
     * 
     * @param sourcePath the sourcePath value to set.
     * @return the HostVolumeProperties object itself.
     */
    public HostVolumeProperties withSourcePath(String sourcePath) {
        this.sourcePath = sourcePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourcePath", this.sourcePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostVolumeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostVolumeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostVolumeProperties.
     */
    public static HostVolumeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostVolumeProperties deserializedHostVolumeProperties = new HostVolumeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourcePath".equals(fieldName)) {
                    deserializedHostVolumeProperties.sourcePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostVolumeProperties;
        });
    }
}
