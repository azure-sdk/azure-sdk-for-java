// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SeveritySummary.
 */
@Fluent
public final class SeveritySummary implements JsonSerializable<SeveritySummary> {
    /*
     * <p>The total number of resources or compliance items that have a severity level of <code>Critical</code>.
     * Critical severity is determined by the organization that published the compliance items.</p>
     */
    private Integer criticalCount;

    /*
     * <p>The total number of resources or compliance items that have a severity level of high. High severity is
     * determined by the organization that published the compliance items.</p>
     */
    private Integer highCount;

    /*
     * <p>The total number of resources or compliance items that have a severity level of informational. Informational
     * severity is determined by the organization that published the compliance items.</p>
     */
    private Integer informationalCount;

    /*
     * <p>The total number of resources or compliance items that have a severity level of low. Low severity is
     * determined by the organization that published the compliance items.</p>
     */
    private Integer lowCount;

    /*
     * <p>The total number of resources or compliance items that have a severity level of medium. Medium severity is
     * determined by the organization that published the compliance items.</p>
     */
    private Integer mediumCount;

    /*
     * <p>The total number of resources or compliance items that have a severity level of unspecified. Unspecified
     * severity is determined by the organization that published the compliance items.</p>
     */
    private Integer unspecifiedCount;

    /**
     * Creates an instance of SeveritySummary class.
     */
    public SeveritySummary() {
    }

    /**
     * Get the criticalCount property: &lt;p&gt;The total number of resources or compliance items that have a severity
     * level of &lt;code&gt;Critical&lt;/code&gt;. Critical severity is determined by the organization that published
     * the compliance items.&lt;/p&gt;.
     * 
     * @return the criticalCount value.
     */
    public Integer criticalCount() {
        return this.criticalCount;
    }

    /**
     * Set the criticalCount property: &lt;p&gt;The total number of resources or compliance items that have a severity
     * level of &lt;code&gt;Critical&lt;/code&gt;. Critical severity is determined by the organization that published
     * the compliance items.&lt;/p&gt;.
     * 
     * @param criticalCount the criticalCount value to set.
     * @return the SeveritySummary object itself.
     */
    public SeveritySummary withCriticalCount(Integer criticalCount) {
        this.criticalCount = criticalCount;
        return this;
    }

    /**
     * Get the highCount property: &lt;p&gt;The total number of resources or compliance items that have a severity level
     * of high. High severity is determined by the organization that published the compliance items.&lt;/p&gt;.
     * 
     * @return the highCount value.
     */
    public Integer highCount() {
        return this.highCount;
    }

    /**
     * Set the highCount property: &lt;p&gt;The total number of resources or compliance items that have a severity level
     * of high. High severity is determined by the organization that published the compliance items.&lt;/p&gt;.
     * 
     * @param highCount the highCount value to set.
     * @return the SeveritySummary object itself.
     */
    public SeveritySummary withHighCount(Integer highCount) {
        this.highCount = highCount;
        return this;
    }

    /**
     * Get the informationalCount property: &lt;p&gt;The total number of resources or compliance items that have a
     * severity level of informational. Informational severity is determined by the organization that published the
     * compliance items.&lt;/p&gt;.
     * 
     * @return the informationalCount value.
     */
    public Integer informationalCount() {
        return this.informationalCount;
    }

    /**
     * Set the informationalCount property: &lt;p&gt;The total number of resources or compliance items that have a
     * severity level of informational. Informational severity is determined by the organization that published the
     * compliance items.&lt;/p&gt;.
     * 
     * @param informationalCount the informationalCount value to set.
     * @return the SeveritySummary object itself.
     */
    public SeveritySummary withInformationalCount(Integer informationalCount) {
        this.informationalCount = informationalCount;
        return this;
    }

    /**
     * Get the lowCount property: &lt;p&gt;The total number of resources or compliance items that have a severity level
     * of low. Low severity is determined by the organization that published the compliance items.&lt;/p&gt;.
     * 
     * @return the lowCount value.
     */
    public Integer lowCount() {
        return this.lowCount;
    }

    /**
     * Set the lowCount property: &lt;p&gt;The total number of resources or compliance items that have a severity level
     * of low. Low severity is determined by the organization that published the compliance items.&lt;/p&gt;.
     * 
     * @param lowCount the lowCount value to set.
     * @return the SeveritySummary object itself.
     */
    public SeveritySummary withLowCount(Integer lowCount) {
        this.lowCount = lowCount;
        return this;
    }

    /**
     * Get the mediumCount property: &lt;p&gt;The total number of resources or compliance items that have a severity
     * level of medium. Medium severity is determined by the organization that published the compliance
     * items.&lt;/p&gt;.
     * 
     * @return the mediumCount value.
     */
    public Integer mediumCount() {
        return this.mediumCount;
    }

    /**
     * Set the mediumCount property: &lt;p&gt;The total number of resources or compliance items that have a severity
     * level of medium. Medium severity is determined by the organization that published the compliance
     * items.&lt;/p&gt;.
     * 
     * @param mediumCount the mediumCount value to set.
     * @return the SeveritySummary object itself.
     */
    public SeveritySummary withMediumCount(Integer mediumCount) {
        this.mediumCount = mediumCount;
        return this;
    }

    /**
     * Get the unspecifiedCount property: &lt;p&gt;The total number of resources or compliance items that have a
     * severity level of unspecified. Unspecified severity is determined by the organization that published the
     * compliance items.&lt;/p&gt;.
     * 
     * @return the unspecifiedCount value.
     */
    public Integer unspecifiedCount() {
        return this.unspecifiedCount;
    }

    /**
     * Set the unspecifiedCount property: &lt;p&gt;The total number of resources or compliance items that have a
     * severity level of unspecified. Unspecified severity is determined by the organization that published the
     * compliance items.&lt;/p&gt;.
     * 
     * @param unspecifiedCount the unspecifiedCount value to set.
     * @return the SeveritySummary object itself.
     */
    public SeveritySummary withUnspecifiedCount(Integer unspecifiedCount) {
        this.unspecifiedCount = unspecifiedCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("criticalCount", this.criticalCount);
        jsonWriter.writeNumberField("highCount", this.highCount);
        jsonWriter.writeNumberField("informationalCount", this.informationalCount);
        jsonWriter.writeNumberField("lowCount", this.lowCount);
        jsonWriter.writeNumberField("mediumCount", this.mediumCount);
        jsonWriter.writeNumberField("unspecifiedCount", this.unspecifiedCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SeveritySummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SeveritySummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SeveritySummary.
     */
    public static SeveritySummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SeveritySummary deserializedSeveritySummary = new SeveritySummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("criticalCount".equals(fieldName)) {
                    deserializedSeveritySummary.criticalCount = reader.getNullable(JsonReader::getInt);
                } else if ("highCount".equals(fieldName)) {
                    deserializedSeveritySummary.highCount = reader.getNullable(JsonReader::getInt);
                } else if ("informationalCount".equals(fieldName)) {
                    deserializedSeveritySummary.informationalCount = reader.getNullable(JsonReader::getInt);
                } else if ("lowCount".equals(fieldName)) {
                    deserializedSeveritySummary.lowCount = reader.getNullable(JsonReader::getInt);
                } else if ("mediumCount".equals(fieldName)) {
                    deserializedSeveritySummary.mediumCount = reader.getNullable(JsonReader::getInt);
                } else if ("unspecifiedCount".equals(fieldName)) {
                    deserializedSeveritySummary.unspecifiedCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSeveritySummary;
        });
    }
}
