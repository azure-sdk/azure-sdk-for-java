// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of WebhookFilter.
 */
@Fluent
public final class WebhookFilter implements JsonSerializable<WebhookFilter> {
    /*
     * <p> Used to indicate that the <code>pattern</code> determines which webhook events do not trigger a build. If
     * true, then a webhook event that does not match the <code>pattern</code> triggers a build. If false, then a
     * webhook event that matches the <code>pattern</code> triggers a build. </p>
     */
    private Boolean excludeMatchedPattern;

    /*
     * <p> For a <code>WebHookFilter</code> that uses <code>EVENT</code> type, a comma-separated string that specifies
     * one or more events. For example, the webhook filter <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code>
     * allows all push, pull request created, and pull request updated events to trigger a build. </p> <p> For a
     * <code>WebHookFilter</code> that uses any of the other filter types, a regular expression pattern. For example, a
     * <code>WebHookFilter</code> that uses <code>HEAD_REF</code> for its <code>type</code> and the pattern
     * <code>^refs/heads/</code> triggers a build when the head reference is a branch with a reference name
     * <code>refs/heads/branch-name</code>. </p>
     */
    private String pattern;

    /*
     * <p> The type of webhook filter. There are nine webhook filter types: <code>EVENT</code>,
     * <code>ACTOR_ACCOUNT_ID</code>, <code>HEAD_REF</code>, <code>BASE_REF</code>, <code>FILE_PATH</code>,
     * <code>COMMIT_MESSAGE</code>, <code>TAG_NAME</code>, <code>RELEASE_NAME</code>, and <code>WORKFLOW_NAME</code>.
     * </p> <ul> <li> <p> EVENT </p> <ul> <li> <p> A webhook event triggers a build when the provided
     * <code>pattern</code> matches one of nine event types: <code>PUSH</code>, <code>PULL_REQUEST_CREATED</code>,
     * <code>PULL_REQUEST_UPDATED</code>, <code>PULL_REQUEST_CLOSED</code>, <code>PULL_REQUEST_REOPENED</code>,
     * <code>PULL_REQUEST_MERGED</code>, <code>RELEASED</code>, <code>PRERELEASED</code>, and
     * <code>WORKFLOW_JOB_QUEUED</code>. The <code>EVENT</code> patterns are specified as a comma-separated string. For
     * example, <code>PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED</code> filters all push, pull request created,
     * and pull request updated events. </p> <note> <p> The <code>PULL_REQUEST_REOPENED</code> works with GitHub and
     * GitHub Enterprise only. The <code>RELEASED</code>, <code>PRERELEASED</code>, and <code>WORKFLOW_JOB_QUEUED</code>
     * work with GitHub only.</p> </note> </li> </ul> </li> <li> <p>ACTOR_ACCOUNT_ID</p> <ul> <li> <p> A webhook event
     * triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression
     * <code>pattern</code>. </p> </li> </ul> </li> <li> <p>HEAD_REF</p> <ul> <li> <p> A webhook event triggers a build
     * when the head reference matches the regular expression <code>pattern</code>. For example,
     * <code>refs/heads/branch-name</code> and <code>refs/tags/tag-name</code>. </p> <note> <p> Works with GitHub and
     * GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request
     * events.</p> </note> </li> </ul> </li> <li> <p>BASE_REF</p> <ul> <li> <p> A webhook event triggers a build when
     * the base reference matches the regular expression <code>pattern</code>. For example,
     * <code>refs/heads/branch-name</code>. </p> <note> <p> Works with pull request events only. </p> </note> </li>
     * </ul> </li> <li> <p>FILE_PATH</p> <ul> <li> <p> A webhook triggers a build when the path of a changed file
     * matches the regular expression <code>pattern</code>. </p> <note> <p> Works with GitHub and Bitbucket events push
     * and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise
     * pull request events. </p> </note> </li> </ul> </li> <li> <p>COMMIT_MESSAGE</p> <ul> <li> <p>A webhook triggers a
     * build when the head commit message matches the regular expression <code>pattern</code>.</p> <note> <p> Works with
     * GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but
     * does not work with GitHub Enterprise pull request events. </p> </note> </li> </ul> </li> <li> <p>TAG_NAME</p>
     * <ul> <li> <p>A webhook triggers a build when the tag name of the release matches the regular expression
     * <code>pattern</code>.</p> <note> <p> Works with <code>RELEASED</code> and <code>PRERELEASED</code> events only.
     * </p> </note> </li> </ul> </li> <li> <p>RELEASE_NAME</p> <ul> <li> <p>A webhook triggers a build when the release
     * name matches the regular expression <code>pattern</code>.</p> <note> <p> Works with <code>RELEASED</code> and
     * <code>PRERELEASED</code> events only. </p> </note> </li> </ul> </li> <li> <p>WORKFLOW_NAME</p> <ul> <li> <p>A
     * webhook triggers a build when the workflow name matches the regular expression <code>pattern</code>.</p> <note>
     * <p> Works with <code>WORKFLOW_JOB_QUEUED</code> events only. </p> </note> </li> </ul> </li> </ul>
     */
    private WebhookFilterTypeEnumValue type;

    /**
     * Creates an instance of WebhookFilter class.
     */
    public WebhookFilter() {
    }

    /**
     * Get the excludeMatchedPattern property: &lt;p&gt; Used to indicate that the &lt;code&gt;pattern&lt;/code&gt;
     * determines which webhook events do not trigger a build. If true, then a webhook event that does not match the
     * &lt;code&gt;pattern&lt;/code&gt; triggers a build. If false, then a webhook event that matches the
     * &lt;code&gt;pattern&lt;/code&gt; triggers a build. &lt;/p&gt;.
     * 
     * @return the excludeMatchedPattern value.
     */
    public Boolean excludeMatchedPattern() {
        return this.excludeMatchedPattern;
    }

    /**
     * Set the excludeMatchedPattern property: &lt;p&gt; Used to indicate that the &lt;code&gt;pattern&lt;/code&gt;
     * determines which webhook events do not trigger a build. If true, then a webhook event that does not match the
     * &lt;code&gt;pattern&lt;/code&gt; triggers a build. If false, then a webhook event that matches the
     * &lt;code&gt;pattern&lt;/code&gt; triggers a build. &lt;/p&gt;.
     * 
     * @param excludeMatchedPattern the excludeMatchedPattern value to set.
     * @return the WebhookFilter object itself.
     */
    public WebhookFilter withExcludeMatchedPattern(Boolean excludeMatchedPattern) {
        this.excludeMatchedPattern = excludeMatchedPattern;
        return this;
    }

    /**
     * Get the pattern property: &lt;p&gt; For a &lt;code&gt;WebHookFilter&lt;/code&gt; that uses
     * &lt;code&gt;EVENT&lt;/code&gt; type, a comma-separated string that specifies one or more events. For example, the
     * webhook filter &lt;code&gt;PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED&lt;/code&gt; allows all push, pull
     * request created, and pull request updated events to trigger a build. &lt;/p&gt; &lt;p&gt; For a
     * &lt;code&gt;WebHookFilter&lt;/code&gt; that uses any of the other filter types, a regular expression pattern. For
     * example, a &lt;code&gt;WebHookFilter&lt;/code&gt; that uses &lt;code&gt;HEAD_REF&lt;/code&gt; for its
     * &lt;code&gt;type&lt;/code&gt; and the pattern &lt;code&gt;^refs/heads/&lt;/code&gt; triggers a build when the
     * head reference is a branch with a reference name &lt;code&gt;refs/heads/branch-name&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the pattern value.
     */
    public String pattern() {
        return this.pattern;
    }

    /**
     * Set the pattern property: &lt;p&gt; For a &lt;code&gt;WebHookFilter&lt;/code&gt; that uses
     * &lt;code&gt;EVENT&lt;/code&gt; type, a comma-separated string that specifies one or more events. For example, the
     * webhook filter &lt;code&gt;PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED&lt;/code&gt; allows all push, pull
     * request created, and pull request updated events to trigger a build. &lt;/p&gt; &lt;p&gt; For a
     * &lt;code&gt;WebHookFilter&lt;/code&gt; that uses any of the other filter types, a regular expression pattern. For
     * example, a &lt;code&gt;WebHookFilter&lt;/code&gt; that uses &lt;code&gt;HEAD_REF&lt;/code&gt; for its
     * &lt;code&gt;type&lt;/code&gt; and the pattern &lt;code&gt;^refs/heads/&lt;/code&gt; triggers a build when the
     * head reference is a branch with a reference name &lt;code&gt;refs/heads/branch-name&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param pattern the pattern value to set.
     * @return the WebhookFilter object itself.
     */
    public WebhookFilter withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt; The type of webhook filter. There are nine webhook filter types:
     * &lt;code&gt;EVENT&lt;/code&gt;, &lt;code&gt;ACTOR_ACCOUNT_ID&lt;/code&gt;, &lt;code&gt;HEAD_REF&lt;/code&gt;,
     * &lt;code&gt;BASE_REF&lt;/code&gt;, &lt;code&gt;FILE_PATH&lt;/code&gt;, &lt;code&gt;COMMIT_MESSAGE&lt;/code&gt;,
     * &lt;code&gt;TAG_NAME&lt;/code&gt;, &lt;code&gt;RELEASE_NAME&lt;/code&gt;, and
     * &lt;code&gt;WORKFLOW_NAME&lt;/code&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; EVENT &lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; A webhook event triggers a build when the provided &lt;code&gt;pattern&lt;/code&gt; matches
     * one of nine event types: &lt;code&gt;PUSH&lt;/code&gt;, &lt;code&gt;PULL_REQUEST_CREATED&lt;/code&gt;,
     * &lt;code&gt;PULL_REQUEST_UPDATED&lt;/code&gt;, &lt;code&gt;PULL_REQUEST_CLOSED&lt;/code&gt;,
     * &lt;code&gt;PULL_REQUEST_REOPENED&lt;/code&gt;, &lt;code&gt;PULL_REQUEST_MERGED&lt;/code&gt;,
     * &lt;code&gt;RELEASED&lt;/code&gt;, &lt;code&gt;PRERELEASED&lt;/code&gt;, and
     * &lt;code&gt;WORKFLOW_JOB_QUEUED&lt;/code&gt;. The &lt;code&gt;EVENT&lt;/code&gt; patterns are specified as a
     * comma-separated string. For example, &lt;code&gt;PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED&lt;/code&gt;
     * filters all push, pull request created, and pull request updated events. &lt;/p&gt; &lt;note&gt; &lt;p&gt; The
     * &lt;code&gt;PULL_REQUEST_REOPENED&lt;/code&gt; works with GitHub and GitHub Enterprise only. The
     * &lt;code&gt;RELEASED&lt;/code&gt;, &lt;code&gt;PRERELEASED&lt;/code&gt;, and
     * &lt;code&gt;WORKFLOW_JOB_QUEUED&lt;/code&gt; work with GitHub only.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt;
     * &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ACTOR_ACCOUNT_ID&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook
     * event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression
     * &lt;code&gt;pattern&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;HEAD_REF&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook event triggers a build when the head
     * reference matches the regular expression &lt;code&gt;pattern&lt;/code&gt;. For example,
     * &lt;code&gt;refs/heads/branch-name&lt;/code&gt; and &lt;code&gt;refs/tags/tag-name&lt;/code&gt;. &lt;/p&gt;
     * &lt;note&gt; &lt;p&gt; Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request,
     * Bitbucket push, and Bitbucket pull request events.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;BASE_REF&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook event triggers a build when the
     * base reference matches the regular expression &lt;code&gt;pattern&lt;/code&gt;. For example,
     * &lt;code&gt;refs/heads/branch-name&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with pull request events
     * only. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FILE_PATH&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook triggers a build when the path of a changed file matches the regular
     * expression &lt;code&gt;pattern&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with GitHub and Bitbucket
     * events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with
     * GitHub Enterprise pull request events. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;COMMIT_MESSAGE&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A webhook triggers a build when the head commit
     * message matches the regular expression &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Works
     * with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events,
     * but does not work with GitHub Enterprise pull request events. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt;TAG_NAME&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A webhook triggers a build when
     * the tag name of the release matches the regular expression &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt;
     * &lt;note&gt; &lt;p&gt; Works with &lt;code&gt;RELEASED&lt;/code&gt; and &lt;code&gt;PRERELEASED&lt;/code&gt;
     * events only. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;RELEASE_NAME&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A webhook triggers a build when the release name
     * matches the regular expression &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with
     * &lt;code&gt;RELEASED&lt;/code&gt; and &lt;code&gt;PRERELEASED&lt;/code&gt; events only. &lt;/p&gt; &lt;/note&gt;
     * &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;WORKFLOW_NAME&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A
     * webhook triggers a build when the workflow name matches the regular expression
     * &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with
     * &lt;code&gt;WORKFLOW_JOB_QUEUED&lt;/code&gt; events only. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the type value.
     */
    public WebhookFilterTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt; The type of webhook filter. There are nine webhook filter types:
     * &lt;code&gt;EVENT&lt;/code&gt;, &lt;code&gt;ACTOR_ACCOUNT_ID&lt;/code&gt;, &lt;code&gt;HEAD_REF&lt;/code&gt;,
     * &lt;code&gt;BASE_REF&lt;/code&gt;, &lt;code&gt;FILE_PATH&lt;/code&gt;, &lt;code&gt;COMMIT_MESSAGE&lt;/code&gt;,
     * &lt;code&gt;TAG_NAME&lt;/code&gt;, &lt;code&gt;RELEASE_NAME&lt;/code&gt;, and
     * &lt;code&gt;WORKFLOW_NAME&lt;/code&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; EVENT &lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; A webhook event triggers a build when the provided &lt;code&gt;pattern&lt;/code&gt; matches
     * one of nine event types: &lt;code&gt;PUSH&lt;/code&gt;, &lt;code&gt;PULL_REQUEST_CREATED&lt;/code&gt;,
     * &lt;code&gt;PULL_REQUEST_UPDATED&lt;/code&gt;, &lt;code&gt;PULL_REQUEST_CLOSED&lt;/code&gt;,
     * &lt;code&gt;PULL_REQUEST_REOPENED&lt;/code&gt;, &lt;code&gt;PULL_REQUEST_MERGED&lt;/code&gt;,
     * &lt;code&gt;RELEASED&lt;/code&gt;, &lt;code&gt;PRERELEASED&lt;/code&gt;, and
     * &lt;code&gt;WORKFLOW_JOB_QUEUED&lt;/code&gt;. The &lt;code&gt;EVENT&lt;/code&gt; patterns are specified as a
     * comma-separated string. For example, &lt;code&gt;PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED&lt;/code&gt;
     * filters all push, pull request created, and pull request updated events. &lt;/p&gt; &lt;note&gt; &lt;p&gt; The
     * &lt;code&gt;PULL_REQUEST_REOPENED&lt;/code&gt; works with GitHub and GitHub Enterprise only. The
     * &lt;code&gt;RELEASED&lt;/code&gt;, &lt;code&gt;PRERELEASED&lt;/code&gt;, and
     * &lt;code&gt;WORKFLOW_JOB_QUEUED&lt;/code&gt; work with GitHub only.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt;
     * &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ACTOR_ACCOUNT_ID&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook
     * event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression
     * &lt;code&gt;pattern&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;HEAD_REF&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook event triggers a build when the head
     * reference matches the regular expression &lt;code&gt;pattern&lt;/code&gt;. For example,
     * &lt;code&gt;refs/heads/branch-name&lt;/code&gt; and &lt;code&gt;refs/tags/tag-name&lt;/code&gt;. &lt;/p&gt;
     * &lt;note&gt; &lt;p&gt; Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request,
     * Bitbucket push, and Bitbucket pull request events.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;BASE_REF&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook event triggers a build when the
     * base reference matches the regular expression &lt;code&gt;pattern&lt;/code&gt;. For example,
     * &lt;code&gt;refs/heads/branch-name&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with pull request events
     * only. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FILE_PATH&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt; A webhook triggers a build when the path of a changed file matches the regular
     * expression &lt;code&gt;pattern&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with GitHub and Bitbucket
     * events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with
     * GitHub Enterprise pull request events. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;COMMIT_MESSAGE&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A webhook triggers a build when the head commit
     * message matches the regular expression &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Works
     * with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events,
     * but does not work with GitHub Enterprise pull request events. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt;TAG_NAME&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A webhook triggers a build when
     * the tag name of the release matches the regular expression &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt;
     * &lt;note&gt; &lt;p&gt; Works with &lt;code&gt;RELEASED&lt;/code&gt; and &lt;code&gt;PRERELEASED&lt;/code&gt;
     * events only. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;RELEASE_NAME&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A webhook triggers a build when the release name
     * matches the regular expression &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with
     * &lt;code&gt;RELEASED&lt;/code&gt; and &lt;code&gt;PRERELEASED&lt;/code&gt; events only. &lt;/p&gt; &lt;/note&gt;
     * &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;WORKFLOW_NAME&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A
     * webhook triggers a build when the workflow name matches the regular expression
     * &lt;code&gt;pattern&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Works with
     * &lt;code&gt;WORKFLOW_JOB_QUEUED&lt;/code&gt; events only. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param type the type value to set.
     * @return the WebhookFilter object itself.
     */
    public WebhookFilter withType(WebhookFilterTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("excludeMatchedPattern", this.excludeMatchedPattern);
        jsonWriter.writeStringField("pattern", this.pattern);
        jsonWriter.writeJsonField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebhookFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebhookFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebhookFilter.
     */
    public static WebhookFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebhookFilter deserializedWebhookFilter = new WebhookFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("excludeMatchedPattern".equals(fieldName)) {
                    deserializedWebhookFilter.excludeMatchedPattern = reader.getNullable(JsonReader::getBoolean);
                } else if ("pattern".equals(fieldName)) {
                    deserializedWebhookFilter.pattern = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedWebhookFilter.type = WebhookFilterTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhookFilter;
        });
    }
}
