// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ResourceRecord.
 */
@Fluent
public final class ResourceRecord implements JsonSerializable<ResourceRecord> {
    /*
     * <p>The current or new DNS record value, not to exceed 4,000 characters. In the case of a <code>DELETE</code>
     * action, if the current value does not match the actual value, an error is returned. For descriptions about how to
     * format <code>Value</code> for different record types, see <a
     * href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html'>Supported DNS Resource
     * Record Types</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>You can specify more than one value for
     * all record types except <code>CNAME</code> and <code>SOA</code>. </p> <note> <p>If you're creating an alias
     * resource record set, omit <code>Value</code>.</p> </note>
     */
    private String value;

    /**
     * Creates an instance of ResourceRecord class.
     */
    public ResourceRecord() {
    }

    /**
     * Get the value property: &lt;p&gt;The current or new DNS record value, not to exceed 4,000 characters. In the case
     * of a &lt;code&gt;DELETE&lt;/code&gt; action, if the current value does not match the actual value, an error is
     * returned. For descriptions about how to format &lt;code&gt;Value&lt;/code&gt; for different record types, see
     * &lt;a href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html'&gt;Supported DNS
     * Resource Record Types&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You
     * can specify more than one value for all record types except &lt;code&gt;CNAME&lt;/code&gt; and
     * &lt;code&gt;SOA&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you're creating an alias resource record set,
     * omit &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: &lt;p&gt;The current or new DNS record value, not to exceed 4,000 characters. In the case
     * of a &lt;code&gt;DELETE&lt;/code&gt; action, if the current value does not match the actual value, an error is
     * returned. For descriptions about how to format &lt;code&gt;Value&lt;/code&gt; for different record types, see
     * &lt;a href='https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html'&gt;Supported DNS
     * Resource Record Types&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You
     * can specify more than one value for all record types except &lt;code&gt;CNAME&lt;/code&gt; and
     * &lt;code&gt;SOA&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If you're creating an alias resource record set,
     * omit &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;.
     * 
     * @param value the value value to set.
     * @return the ResourceRecord object itself.
     */
    public ResourceRecord withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceRecord.
     */
    public static ResourceRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceRecord deserializedResourceRecord = new ResourceRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedResourceRecord.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceRecord;
        });
    }
}
