// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Filter.
 */
@Fluent
public final class FilterAutoGenerated implements JsonSerializable<FilterAutoGenerated> {
    /*
     * How to handle logs that satisfy the filter's conditions and requirement.
     */
    private FilterBehavior behavior;

    /*
     * Match conditions for the filter.
     */
    private List<Condition> conditions;

    /*
     * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must
     * match all conditions or must match at least one condition.
     */
    private FilterRequirement requirement;

    /**
     * Creates an instance of FilterAutoGenerated class.
     */
    public FilterAutoGenerated() {
    }

    /**
     * Get the behavior property: How to handle logs that satisfy the filter's conditions and requirement.
     * 
     * @return the behavior value.
     */
    public FilterBehavior behavior() {
        return this.behavior;
    }

    /**
     * Set the behavior property: How to handle logs that satisfy the filter's conditions and requirement.
     * 
     * @param behavior the behavior value to set.
     * @return the FilterAutoGenerated object itself.
     */
    public FilterAutoGenerated withBehavior(FilterBehavior behavior) {
        this.behavior = behavior;
        return this;
    }

    /**
     * Get the conditions property: Match conditions for the filter.
     * 
     * @return the conditions value.
     */
    public List<Condition> conditions() {
        return this.conditions;
    }

    /**
     * Set the conditions property: Match conditions for the filter.
     * 
     * @param conditions the conditions value to set.
     * @return the FilterAutoGenerated object itself.
     */
    public FilterAutoGenerated withConditions(List<Condition> conditions) {
        this.conditions = conditions;
        return this;
    }

    /**
     * Get the requirement property: Logic to apply to the filtering conditions. You can specify that, in order to
     * satisfy the filter, a log must match all conditions or must match at least one condition.
     * 
     * @return the requirement value.
     */
    public FilterRequirement requirement() {
        return this.requirement;
    }

    /**
     * Set the requirement property: Logic to apply to the filtering conditions. You can specify that, in order to
     * satisfy the filter, a log must match all conditions or must match at least one condition.
     * 
     * @param requirement the requirement value to set.
     * @return the FilterAutoGenerated object itself.
     */
    public FilterAutoGenerated withRequirement(FilterRequirement requirement) {
        this.requirement = requirement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (conditions() != null) {
            conditions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("behavior", this.behavior == null ? null : this.behavior.toString());
        jsonWriter.writeArrayField("conditions", this.conditions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("requirement", this.requirement == null ? null : this.requirement.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterAutoGenerated if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FilterAutoGenerated.
     */
    public static FilterAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterAutoGenerated deserializedFilterAutoGenerated = new FilterAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("behavior".equals(fieldName)) {
                    deserializedFilterAutoGenerated.behavior = FilterBehavior.fromString(reader.getString());
                } else if ("conditions".equals(fieldName)) {
                    List<Condition> conditions = reader.readArray(reader1 -> Condition.fromJson(reader1));
                    deserializedFilterAutoGenerated.conditions = conditions;
                } else if ("requirement".equals(fieldName)) {
                    deserializedFilterAutoGenerated.requirement = FilterRequirement.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterAutoGenerated;
        });
    }
}
