// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.awsconnector.fluent.Ec2InstancesClient;
import com.azure.resourcemanager.awsconnector.fluent.models.Ec2InstanceInner;
import com.azure.resourcemanager.awsconnector.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.awsconnector.models.Ec2Instance;
import com.azure.resourcemanager.awsconnector.models.Ec2Instances;
import com.azure.resourcemanager.awsconnector.models.OperationStatusResult;
import com.azure.resourcemanager.awsconnector.models.StopEc2InstanceOptions;

public final class Ec2InstancesImpl implements Ec2Instances {
    private static final ClientLogger LOGGER = new ClientLogger(Ec2InstancesImpl.class);

    private final Ec2InstancesClient innerClient;

    private final com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager;

    public Ec2InstancesImpl(Ec2InstancesClient innerClient,
        com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Ec2Instance> list(String resourceUri) {
        PagedIterable<Ec2InstanceInner> inner = this.serviceClient().list(resourceUri);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new Ec2InstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<Ec2Instance> list(String resourceUri, Context context) {
        PagedIterable<Ec2InstanceInner> inner = this.serviceClient().list(resourceUri, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new Ec2InstanceImpl(inner1, this.manager()));
    }

    public Response<Ec2Instance> getWithResponse(String resourceUri, Context context) {
        Response<Ec2InstanceInner> inner = this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new Ec2InstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Ec2Instance get(String resourceUri) {
        Ec2InstanceInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new Ec2InstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Ec2Instance createOrReplace(String resourceUri, Ec2InstanceInner resource) {
        Ec2InstanceInner inner = this.serviceClient().createOrReplace(resourceUri, resource);
        if (inner != null) {
            return new Ec2InstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Ec2Instance createOrReplace(String resourceUri, Ec2InstanceInner resource, Context context) {
        Ec2InstanceInner inner = this.serviceClient().createOrReplace(resourceUri, resource, context);
        if (inner != null) {
            return new Ec2InstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceUri) {
        this.serviceClient().delete(resourceUri);
    }

    public void delete(String resourceUri, Context context) {
        this.serviceClient().delete(resourceUri, context);
    }

    public OperationStatusResult start(String resourceUri) {
        OperationStatusResultInner inner = this.serviceClient().start(resourceUri);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult start(String resourceUri, Context context) {
        OperationStatusResultInner inner = this.serviceClient().start(resourceUri, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stop(String resourceUri, StopEc2InstanceOptions body) {
        OperationStatusResultInner inner = this.serviceClient().stop(resourceUri, body);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult stop(String resourceUri, StopEc2InstanceOptions body, Context context) {
        OperationStatusResultInner inner = this.serviceClient().stop(resourceUri, body, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private Ec2InstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.awsconnector.AwsconnectorManager manager() {
        return this.serviceManager;
    }
}
