// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of AnalyticsConfiguration.
 */
@Fluent
public final class AnalyticsConfiguration implements JsonSerializable<AnalyticsConfiguration> {
    /*
     * The ID that identifies the analytics configuration.
     */
    private String id;

    /*
     * The prefix that an object must have to be included in the analytics results.
     */
    private String prefix;

    /*
     * Contains data related to access patterns to be collected and made available to analyze the tradeoffs between
     * different storage classes. Specifies data related to access patterns to be collected and made available to
     * analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
     */
    private StorageClassAnalysis storageClassAnalysis;

    /*
     * The tags to use when evaluating an analytics filter. The analytics only includes objects that meet the filter's
     * criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.
     */
    private List<TagFilter> tagFilters;

    /**
     * Creates an instance of AnalyticsConfiguration class.
     */
    public AnalyticsConfiguration() {
    }

    /**
     * Get the id property: The ID that identifies the analytics configuration.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID that identifies the analytics configuration.
     * 
     * @param id the id value to set.
     * @return the AnalyticsConfiguration object itself.
     */
    public AnalyticsConfiguration withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the prefix property: The prefix that an object must have to be included in the analytics results.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: The prefix that an object must have to be included in the analytics results.
     * 
     * @param prefix the prefix value to set.
     * @return the AnalyticsConfiguration object itself.
     */
    public AnalyticsConfiguration withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the storageClassAnalysis property: Contains data related to access patterns to be collected and made
     * available to analyze the tradeoffs between different storage classes. Specifies data related to access patterns
     * to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3
     * bucket.
     * 
     * @return the storageClassAnalysis value.
     */
    public StorageClassAnalysis storageClassAnalysis() {
        return this.storageClassAnalysis;
    }

    /**
     * Set the storageClassAnalysis property: Contains data related to access patterns to be collected and made
     * available to analyze the tradeoffs between different storage classes. Specifies data related to access patterns
     * to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3
     * bucket.
     * 
     * @param storageClassAnalysis the storageClassAnalysis value to set.
     * @return the AnalyticsConfiguration object itself.
     */
    public AnalyticsConfiguration withStorageClassAnalysis(StorageClassAnalysis storageClassAnalysis) {
        this.storageClassAnalysis = storageClassAnalysis;
        return this;
    }

    /**
     * Get the tagFilters property: The tags to use when evaluating an analytics filter. The analytics only includes
     * objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are
     * included in the analysis.
     * 
     * @return the tagFilters value.
     */
    public List<TagFilter> tagFilters() {
        return this.tagFilters;
    }

    /**
     * Set the tagFilters property: The tags to use when evaluating an analytics filter. The analytics only includes
     * objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are
     * included in the analysis.
     * 
     * @param tagFilters the tagFilters value to set.
     * @return the AnalyticsConfiguration object itself.
     */
    public AnalyticsConfiguration withTagFilters(List<TagFilter> tagFilters) {
        this.tagFilters = tagFilters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageClassAnalysis() != null) {
            storageClassAnalysis().validate();
        }
        if (tagFilters() != null) {
            tagFilters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeJsonField("storageClassAnalysis", this.storageClassAnalysis);
        jsonWriter.writeArrayField("tagFilters", this.tagFilters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyticsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyticsConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyticsConfiguration.
     */
    public static AnalyticsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyticsConfiguration deserializedAnalyticsConfiguration = new AnalyticsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAnalyticsConfiguration.id = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    deserializedAnalyticsConfiguration.prefix = reader.getString();
                } else if ("storageClassAnalysis".equals(fieldName)) {
                    deserializedAnalyticsConfiguration.storageClassAnalysis = StorageClassAnalysis.fromJson(reader);
                } else if ("tagFilters".equals(fieldName)) {
                    List<TagFilter> tagFilters = reader.readArray(reader1 -> TagFilter.fromJson(reader1));
                    deserializedAnalyticsConfiguration.tagFilters = tagFilters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyticsConfiguration;
        });
    }
}
