// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of OperationPreferences.
 */
@Fluent
public final class OperationPreferences implements JsonSerializable<OperationPreferences> {
    /*
     * Property failureToleranceCount
     */
    private Integer failureToleranceCount;

    /*
     * Property failureTolerancePercentage
     */
    private Integer failureTolerancePercentage;

    /*
     * Property maxConcurrentCount
     */
    private Integer maxConcurrentCount;

    /*
     * Property maxConcurrentPercentage
     */
    private Integer maxConcurrentPercentage;

    /*
     * The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time
     */
    private OperationPreferencesRegionConcurrencyType regionConcurrencyType;

    /*
     * Property regionOrder
     */
    private List<String> regionOrder;

    /**
     * Creates an instance of OperationPreferences class.
     */
    public OperationPreferences() {
    }

    /**
     * Get the failureToleranceCount property: Property failureToleranceCount.
     * 
     * @return the failureToleranceCount value.
     */
    public Integer failureToleranceCount() {
        return this.failureToleranceCount;
    }

    /**
     * Set the failureToleranceCount property: Property failureToleranceCount.
     * 
     * @param failureToleranceCount the failureToleranceCount value to set.
     * @return the OperationPreferences object itself.
     */
    public OperationPreferences withFailureToleranceCount(Integer failureToleranceCount) {
        this.failureToleranceCount = failureToleranceCount;
        return this;
    }

    /**
     * Get the failureTolerancePercentage property: Property failureTolerancePercentage.
     * 
     * @return the failureTolerancePercentage value.
     */
    public Integer failureTolerancePercentage() {
        return this.failureTolerancePercentage;
    }

    /**
     * Set the failureTolerancePercentage property: Property failureTolerancePercentage.
     * 
     * @param failureTolerancePercentage the failureTolerancePercentage value to set.
     * @return the OperationPreferences object itself.
     */
    public OperationPreferences withFailureTolerancePercentage(Integer failureTolerancePercentage) {
        this.failureTolerancePercentage = failureTolerancePercentage;
        return this;
    }

    /**
     * Get the maxConcurrentCount property: Property maxConcurrentCount.
     * 
     * @return the maxConcurrentCount value.
     */
    public Integer maxConcurrentCount() {
        return this.maxConcurrentCount;
    }

    /**
     * Set the maxConcurrentCount property: Property maxConcurrentCount.
     * 
     * @param maxConcurrentCount the maxConcurrentCount value to set.
     * @return the OperationPreferences object itself.
     */
    public OperationPreferences withMaxConcurrentCount(Integer maxConcurrentCount) {
        this.maxConcurrentCount = maxConcurrentCount;
        return this;
    }

    /**
     * Get the maxConcurrentPercentage property: Property maxConcurrentPercentage.
     * 
     * @return the maxConcurrentPercentage value.
     */
    public Integer maxConcurrentPercentage() {
        return this.maxConcurrentPercentage;
    }

    /**
     * Set the maxConcurrentPercentage property: Property maxConcurrentPercentage.
     * 
     * @param maxConcurrentPercentage the maxConcurrentPercentage value to set.
     * @return the OperationPreferences object itself.
     */
    public OperationPreferences withMaxConcurrentPercentage(Integer maxConcurrentPercentage) {
        this.maxConcurrentPercentage = maxConcurrentPercentage;
        return this;
    }

    /**
     * Get the regionConcurrencyType property: The concurrency type of deploying StackSets operations in regions, could
     * be in parallel or one region at a time.
     * 
     * @return the regionConcurrencyType value.
     */
    public OperationPreferencesRegionConcurrencyType regionConcurrencyType() {
        return this.regionConcurrencyType;
    }

    /**
     * Set the regionConcurrencyType property: The concurrency type of deploying StackSets operations in regions, could
     * be in parallel or one region at a time.
     * 
     * @param regionConcurrencyType the regionConcurrencyType value to set.
     * @return the OperationPreferences object itself.
     */
    public OperationPreferences
        withRegionConcurrencyType(OperationPreferencesRegionConcurrencyType regionConcurrencyType) {
        this.regionConcurrencyType = regionConcurrencyType;
        return this;
    }

    /**
     * Get the regionOrder property: Property regionOrder.
     * 
     * @return the regionOrder value.
     */
    public List<String> regionOrder() {
        return this.regionOrder;
    }

    /**
     * Set the regionOrder property: Property regionOrder.
     * 
     * @param regionOrder the regionOrder value to set.
     * @return the OperationPreferences object itself.
     */
    public OperationPreferences withRegionOrder(List<String> regionOrder) {
        this.regionOrder = regionOrder;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("failureToleranceCount", this.failureToleranceCount);
        jsonWriter.writeNumberField("failureTolerancePercentage", this.failureTolerancePercentage);
        jsonWriter.writeNumberField("maxConcurrentCount", this.maxConcurrentCount);
        jsonWriter.writeNumberField("maxConcurrentPercentage", this.maxConcurrentPercentage);
        jsonWriter.writeStringField("regionConcurrencyType",
            this.regionConcurrencyType == null ? null : this.regionConcurrencyType.toString());
        jsonWriter.writeArrayField("regionOrder", this.regionOrder, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationPreferences from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationPreferences if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationPreferences.
     */
    public static OperationPreferences fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationPreferences deserializedOperationPreferences = new OperationPreferences();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failureToleranceCount".equals(fieldName)) {
                    deserializedOperationPreferences.failureToleranceCount = reader.getNullable(JsonReader::getInt);
                } else if ("failureTolerancePercentage".equals(fieldName)) {
                    deserializedOperationPreferences.failureTolerancePercentage
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxConcurrentCount".equals(fieldName)) {
                    deserializedOperationPreferences.maxConcurrentCount = reader.getNullable(JsonReader::getInt);
                } else if ("maxConcurrentPercentage".equals(fieldName)) {
                    deserializedOperationPreferences.maxConcurrentPercentage = reader.getNullable(JsonReader::getInt);
                } else if ("regionConcurrencyType".equals(fieldName)) {
                    deserializedOperationPreferences.regionConcurrencyType
                        = OperationPreferencesRegionConcurrencyType.fromString(reader.getString());
                } else if ("regionOrder".equals(fieldName)) {
                    List<String> regionOrder = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperationPreferences.regionOrder = regionOrder;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationPreferences;
        });
    }
}
