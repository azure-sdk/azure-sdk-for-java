// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MetricStat.
 */
@Fluent
public final class MetricStat implements JsonSerializable<MetricStat> {
    /*
     * The metric to return, including the metric name, namespace, and dimensions. The ``Metric`` property type
     * represents a specific metric. ``Metric`` is a property of the
     * [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-
     * metricstat.html) property type.
     */
    private Metric metric;

    /*
     * The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as
     * short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at
     * intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution
     * metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second.
     * If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the
     * period as follows or no data points in that time range is returned: + Start time between 3 hours and 15 days ago
     * - Use a multiple of 60 seconds (1 minute). + Start time between 15 and 63 days ago - Use a multiple of 300
     * seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
     */
    private Integer period;

    /*
     * The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see
     * the table in
     * [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic)
     * in the *User Guide*.
     */
    private String stat;

    /*
     * The unit to use for the returned data points. Valid values are: Seconds, Microseconds, Milliseconds, Bytes,
     * Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count,
     * Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second,
     * Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
     */
    private String unit;

    /**
     * Creates an instance of MetricStat class.
     */
    public MetricStat() {
    }

    /**
     * Get the metric property: The metric to return, including the metric name, namespace, and dimensions. The
     * ``Metric`` property type represents a specific metric. ``Metric`` is a property of the
     * [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html)
     * property type.
     * 
     * @return the metric value.
     */
    public Metric metric() {
        return this.metric;
    }

    /**
     * Set the metric property: The metric to return, including the metric name, namespace, and dimensions. The
     * ``Metric`` property type represents a specific metric. ``Metric`` is a property of the
     * [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html)
     * property type.
     * 
     * @param metric the metric value to set.
     * @return the MetricStat object itself.
     */
    public MetricStat withMetric(Metric metric) {
        this.metric = metric;
        return this;
    }

    /**
     * Get the period property: The granularity, in seconds, of the returned data points. For metrics with regular
     * resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution
     * metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any
     * multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a
     * ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies a time stamp that is greater than 3
     * hours ago, you must specify the period as follows or no data points in that time range is returned: + Start time
     * between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between 15 and 63 days
     * ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple of 3600
     * seconds (1 hour).
     * 
     * @return the period value.
     */
    public Integer period() {
        return this.period;
    }

    /**
     * Set the period property: The granularity, in seconds, of the returned data points. For metrics with regular
     * resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution
     * metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any
     * multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a
     * ``StorageResolution`` of 1 second. If the ``StartTime`` parameter specifies a time stamp that is greater than 3
     * hours ago, you must specify the period as follows or no data points in that time range is returned: + Start time
     * between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute). + Start time between 15 and 63 days
     * ago - Use a multiple of 300 seconds (5 minutes). + Start time greater than 63 days ago - Use a multiple of 3600
     * seconds (1 hour).
     * 
     * @param period the period value to set.
     * @return the MetricStat object itself.
     */
    public MetricStat withPeriod(Integer period) {
        this.period = period;
        return this;
    }

    /**
     * Get the stat property: The statistic to return. It can include any CW statistic or extended statistic. For a list
     * of valid values, see the table in
     * [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic)
     * in the *User Guide*.
     * 
     * @return the stat value.
     */
    public String stat() {
        return this.stat;
    }

    /**
     * Set the stat property: The statistic to return. It can include any CW statistic or extended statistic. For a list
     * of valid values, see the table in
     * [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic)
     * in the *User Guide*.
     * 
     * @param stat the stat value to set.
     * @return the MetricStat object itself.
     */
    public MetricStat withStat(String stat) {
        this.stat = stat;
        return this;
    }

    /**
     * Get the unit property: The unit to use for the returned data points. Valid values are: Seconds, Microseconds,
     * Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits,
     * Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second,
     * Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit to use for the returned data points. Valid values are: Seconds, Microseconds,
     * Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits,
     * Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second,
     * Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
     * 
     * @param unit the unit value to set.
     * @return the MetricStat object itself.
     */
    public MetricStat withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metric() != null) {
            metric().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("metric", this.metric);
        jsonWriter.writeNumberField("period", this.period);
        jsonWriter.writeStringField("stat", this.stat);
        jsonWriter.writeStringField("unit", this.unit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricStat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricStat if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the MetricStat.
     */
    public static MetricStat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricStat deserializedMetricStat = new MetricStat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metric".equals(fieldName)) {
                    deserializedMetricStat.metric = Metric.fromJson(reader);
                } else if ("period".equals(fieldName)) {
                    deserializedMetricStat.period = reader.getNullable(JsonReader::getInt);
                } else if ("stat".equals(fieldName)) {
                    deserializedMetricStat.stat = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedMetricStat.unit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricStat;
        });
    }
}
