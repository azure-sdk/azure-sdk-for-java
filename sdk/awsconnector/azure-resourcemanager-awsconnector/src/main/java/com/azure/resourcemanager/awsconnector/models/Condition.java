// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Condition.
 */
@Fluent
public final class Condition implements JsonSerializable<Condition> {
    /*
     * A single action condition.
     */
    private ActionConditionModelProperties actionCondition;

    /*
     * A single label name condition.
     */
    private LabelNameConditionModelProperties labelNameCondition;

    /**
     * Creates an instance of Condition class.
     */
    public Condition() {
    }

    /**
     * Get the actionCondition property: A single action condition.
     * 
     * @return the actionCondition value.
     */
    public ActionConditionModelProperties actionCondition() {
        return this.actionCondition;
    }

    /**
     * Set the actionCondition property: A single action condition.
     * 
     * @param actionCondition the actionCondition value to set.
     * @return the Condition object itself.
     */
    public Condition withActionCondition(ActionConditionModelProperties actionCondition) {
        this.actionCondition = actionCondition;
        return this;
    }

    /**
     * Get the labelNameCondition property: A single label name condition.
     * 
     * @return the labelNameCondition value.
     */
    public LabelNameConditionModelProperties labelNameCondition() {
        return this.labelNameCondition;
    }

    /**
     * Set the labelNameCondition property: A single label name condition.
     * 
     * @param labelNameCondition the labelNameCondition value to set.
     * @return the Condition object itself.
     */
    public Condition withLabelNameCondition(LabelNameConditionModelProperties labelNameCondition) {
        this.labelNameCondition = labelNameCondition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (actionCondition() != null) {
            actionCondition().validate();
        }
        if (labelNameCondition() != null) {
            labelNameCondition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("actionCondition", this.actionCondition);
        jsonWriter.writeJsonField("labelNameCondition", this.labelNameCondition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Condition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Condition if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Condition.
     */
    public static Condition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Condition deserializedCondition = new Condition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionCondition".equals(fieldName)) {
                    deserializedCondition.actionCondition = ActionConditionModelProperties.fromJson(reader);
                } else if ("labelNameCondition".equals(fieldName)) {
                    deserializedCondition.labelNameCondition = LabelNameConditionModelProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCondition;
        });
    }
}
