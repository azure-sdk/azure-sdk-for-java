// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SAMLIdp.
 */
@Fluent
public final class SamlIdp implements JsonSerializable<SamlIdp> {
    /*
     * <p>The unique entity ID of the application in the SAML identity provider.</p>
     */
    private String entityId;

    /*
     * <p>The metadata of the SAML application, in XML format.</p>
     */
    private String metadataContent;

    /**
     * Creates an instance of SamlIdp class.
     */
    public SamlIdp() {
    }

    /**
     * Get the entityId property: &lt;p&gt;The unique entity ID of the application in the SAML identity
     * provider.&lt;/p&gt;.
     * 
     * @return the entityId value.
     */
    public String entityId() {
        return this.entityId;
    }

    /**
     * Set the entityId property: &lt;p&gt;The unique entity ID of the application in the SAML identity
     * provider.&lt;/p&gt;.
     * 
     * @param entityId the entityId value to set.
     * @return the SamlIdp object itself.
     */
    public SamlIdp withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }

    /**
     * Get the metadataContent property: &lt;p&gt;The metadata of the SAML application, in XML format.&lt;/p&gt;.
     * 
     * @return the metadataContent value.
     */
    public String metadataContent() {
        return this.metadataContent;
    }

    /**
     * Set the metadataContent property: &lt;p&gt;The metadata of the SAML application, in XML format.&lt;/p&gt;.
     * 
     * @param metadataContent the metadataContent value to set.
     * @return the SamlIdp object itself.
     */
    public SamlIdp withMetadataContent(String metadataContent) {
        this.metadataContent = metadataContent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityId", this.entityId);
        jsonWriter.writeStringField("metadataContent", this.metadataContent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SamlIdp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SamlIdp if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the SamlIdp.
     */
    public static SamlIdp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SamlIdp deserializedSamlIdp = new SamlIdp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityId".equals(fieldName)) {
                    deserializedSamlIdp.entityId = reader.getString();
                } else if ("metadataContent".equals(fieldName)) {
                    deserializedSamlIdp.metadataContent = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSamlIdp;
        });
    }
}
