// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MountPoint.
 */
@Fluent
public final class MountPoint implements JsonSerializable<MountPoint> {
    /*
     * The path on the container to mount the host volume at.
     */
    private String containerPath;

    /*
     * If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the
     * container can write to the volume. The default value is ``false``.
     */
    private Boolean readOnly;

    /*
     * The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition
     * ``volume``.
     */
    private String sourceVolume;

    /**
     * Creates an instance of MountPoint class.
     */
    public MountPoint() {
    }

    /**
     * Get the containerPath property: The path on the container to mount the host volume at.
     * 
     * @return the containerPath value.
     */
    public String containerPath() {
        return this.containerPath;
    }

    /**
     * Set the containerPath property: The path on the container to mount the host volume at.
     * 
     * @param containerPath the containerPath value to set.
     * @return the MountPoint object itself.
     */
    public MountPoint withContainerPath(String containerPath) {
        this.containerPath = containerPath;
        return this;
    }

    /**
     * Get the readOnly property: If this value is ``true``, the container has read-only access to the volume. If this
     * value is ``false``, then the container can write to the volume. The default value is ``false``.
     * 
     * @return the readOnly value.
     */
    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * Set the readOnly property: If this value is ``true``, the container has read-only access to the volume. If this
     * value is ``false``, then the container can write to the volume. The default value is ``false``.
     * 
     * @param readOnly the readOnly value to set.
     * @return the MountPoint object itself.
     */
    public MountPoint withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * Get the sourceVolume property: The name of the volume to mount. Must be a volume name referenced in the ``name``
     * parameter of task definition ``volume``.
     * 
     * @return the sourceVolume value.
     */
    public String sourceVolume() {
        return this.sourceVolume;
    }

    /**
     * Set the sourceVolume property: The name of the volume to mount. Must be a volume name referenced in the ``name``
     * parameter of task definition ``volume``.
     * 
     * @param sourceVolume the sourceVolume value to set.
     * @return the MountPoint object itself.
     */
    public MountPoint withSourceVolume(String sourceVolume) {
        this.sourceVolume = sourceVolume;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerPath", this.containerPath);
        jsonWriter.writeBooleanField("readOnly", this.readOnly);
        jsonWriter.writeStringField("sourceVolume", this.sourceVolume);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MountPoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MountPoint if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the MountPoint.
     */
    public static MountPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MountPoint deserializedMountPoint = new MountPoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerPath".equals(fieldName)) {
                    deserializedMountPoint.containerPath = reader.getString();
                } else if ("readOnly".equals(fieldName)) {
                    deserializedMountPoint.readOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("sourceVolume".equals(fieldName)) {
                    deserializedMountPoint.sourceVolume = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMountPoint;
        });
    }
}
