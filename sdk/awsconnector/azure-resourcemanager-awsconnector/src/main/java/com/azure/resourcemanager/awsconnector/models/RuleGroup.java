// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RuleGroup.
 */
@Fluent
public final class RuleGroup implements JsonSerializable<RuleGroup> {
    /*
     * Property referenceSets
     */
    private ReferenceSets referenceSets;

    /*
     * Property ruleVariables
     */
    private RuleVariables ruleVariables;

    /*
     * Property rulesSource
     */
    private RulesSource rulesSource;

    /*
     * Property statefulRuleOptions
     */
    private StatefulRuleOptions statefulRuleOptions;

    /**
     * Creates an instance of RuleGroup class.
     */
    public RuleGroup() {
    }

    /**
     * Get the referenceSets property: Property referenceSets.
     * 
     * @return the referenceSets value.
     */
    public ReferenceSets referenceSets() {
        return this.referenceSets;
    }

    /**
     * Set the referenceSets property: Property referenceSets.
     * 
     * @param referenceSets the referenceSets value to set.
     * @return the RuleGroup object itself.
     */
    public RuleGroup withReferenceSets(ReferenceSets referenceSets) {
        this.referenceSets = referenceSets;
        return this;
    }

    /**
     * Get the ruleVariables property: Property ruleVariables.
     * 
     * @return the ruleVariables value.
     */
    public RuleVariables ruleVariables() {
        return this.ruleVariables;
    }

    /**
     * Set the ruleVariables property: Property ruleVariables.
     * 
     * @param ruleVariables the ruleVariables value to set.
     * @return the RuleGroup object itself.
     */
    public RuleGroup withRuleVariables(RuleVariables ruleVariables) {
        this.ruleVariables = ruleVariables;
        return this;
    }

    /**
     * Get the rulesSource property: Property rulesSource.
     * 
     * @return the rulesSource value.
     */
    public RulesSource rulesSource() {
        return this.rulesSource;
    }

    /**
     * Set the rulesSource property: Property rulesSource.
     * 
     * @param rulesSource the rulesSource value to set.
     * @return the RuleGroup object itself.
     */
    public RuleGroup withRulesSource(RulesSource rulesSource) {
        this.rulesSource = rulesSource;
        return this;
    }

    /**
     * Get the statefulRuleOptions property: Property statefulRuleOptions.
     * 
     * @return the statefulRuleOptions value.
     */
    public StatefulRuleOptions statefulRuleOptions() {
        return this.statefulRuleOptions;
    }

    /**
     * Set the statefulRuleOptions property: Property statefulRuleOptions.
     * 
     * @param statefulRuleOptions the statefulRuleOptions value to set.
     * @return the RuleGroup object itself.
     */
    public RuleGroup withStatefulRuleOptions(StatefulRuleOptions statefulRuleOptions) {
        this.statefulRuleOptions = statefulRuleOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (referenceSets() != null) {
            referenceSets().validate();
        }
        if (ruleVariables() != null) {
            ruleVariables().validate();
        }
        if (rulesSource() != null) {
            rulesSource().validate();
        }
        if (statefulRuleOptions() != null) {
            statefulRuleOptions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("referenceSets", this.referenceSets);
        jsonWriter.writeJsonField("ruleVariables", this.ruleVariables);
        jsonWriter.writeJsonField("rulesSource", this.rulesSource);
        jsonWriter.writeJsonField("statefulRuleOptions", this.statefulRuleOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleGroup if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the RuleGroup.
     */
    public static RuleGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleGroup deserializedRuleGroup = new RuleGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referenceSets".equals(fieldName)) {
                    deserializedRuleGroup.referenceSets = ReferenceSets.fromJson(reader);
                } else if ("ruleVariables".equals(fieldName)) {
                    deserializedRuleGroup.ruleVariables = RuleVariables.fromJson(reader);
                } else if ("rulesSource".equals(fieldName)) {
                    deserializedRuleGroup.rulesSource = RulesSource.fromJson(reader);
                } else if ("statefulRuleOptions".equals(fieldName)) {
                    deserializedRuleGroup.statefulRuleOptions = StatefulRuleOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleGroup;
        });
    }
}
