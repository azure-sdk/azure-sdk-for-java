// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of RuleVariables.
 */
@Fluent
public final class RuleVariables implements JsonSerializable<RuleVariables> {
    /*
     * Property ipSets
     */
    private Map<String, IpSet> ipSets;

    /*
     * Property portSets
     */
    private Map<String, PortSet> portSets;

    /**
     * Creates an instance of RuleVariables class.
     */
    public RuleVariables() {
    }

    /**
     * Get the ipSets property: Property ipSets.
     * 
     * @return the ipSets value.
     */
    public Map<String, IpSet> ipSets() {
        return this.ipSets;
    }

    /**
     * Set the ipSets property: Property ipSets.
     * 
     * @param ipSets the ipSets value to set.
     * @return the RuleVariables object itself.
     */
    public RuleVariables withIpSets(Map<String, IpSet> ipSets) {
        this.ipSets = ipSets;
        return this;
    }

    /**
     * Get the portSets property: Property portSets.
     * 
     * @return the portSets value.
     */
    public Map<String, PortSet> portSets() {
        return this.portSets;
    }

    /**
     * Set the portSets property: Property portSets.
     * 
     * @param portSets the portSets value to set.
     * @return the RuleVariables object itself.
     */
    public RuleVariables withPortSets(Map<String, PortSet> portSets) {
        this.portSets = portSets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipSets() != null) {
            ipSets().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (portSets() != null) {
            portSets().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("ipSets", this.ipSets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("portSets", this.portSets, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleVariables from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleVariables if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuleVariables.
     */
    public static RuleVariables fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleVariables deserializedRuleVariables = new RuleVariables();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipSets".equals(fieldName)) {
                    Map<String, IpSet> ipSets = reader.readMap(reader1 -> IpSet.fromJson(reader1));
                    deserializedRuleVariables.ipSets = ipSets;
                } else if ("portSets".equals(fieldName)) {
                    Map<String, PortSet> portSets = reader.readMap(reader1 -> PortSet.fromJson(reader1));
                    deserializedRuleVariables.portSets = portSets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleVariables;
        });
    }
}
