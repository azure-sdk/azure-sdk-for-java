// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ExecuteCommandConfiguration.
 */
@Fluent
public final class ExecuteCommandConfiguration implements JsonSerializable<ExecuteCommandConfiguration> {
    /*
     * Specify an KMSlong key ID to encrypt the data between the local client and the container.
     */
    private String kmsKeyId;

    /*
     * The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or
     * an Amazon S3 bucket. When ``logging=OVERRIDE`` is specified, a ``logConfiguration`` must be provided. The log
     * configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an
     * Amazon S3 bucket.
     */
    private ExecuteCommandLogConfiguration logConfiguration;

    /*
     * The log setting to use for redirecting logs for your execute command results. The following log settings are
     * available. + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The ``awslogs`` configuration in
     * the task definition is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs``
     * log driver is configured in the task definition, the output won't be logged. + ``OVERRIDE``: Specify the logging
     * details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option is specified, the
     * ``logConfiguration`` is required.
     */
    private String logging;

    /**
     * Creates an instance of ExecuteCommandConfiguration class.
     */
    public ExecuteCommandConfiguration() {
    }

    /**
     * Get the kmsKeyId property: Specify an KMSlong key ID to encrypt the data between the local client and the
     * container.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: Specify an KMSlong key ID to encrypt the data between the local client and the
     * container.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the ExecuteCommandConfiguration object itself.
     */
    public ExecuteCommandConfiguration withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the logConfiguration property: The log configuration for the results of the execute command actions. The logs
     * can be sent to CloudWatch Logs or an Amazon S3 bucket. When ``logging=OVERRIDE`` is specified, a
     * ``logConfiguration`` must be provided. The log configuration for the results of the execute command actions. The
     * logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
     * 
     * @return the logConfiguration value.
     */
    public ExecuteCommandLogConfiguration logConfiguration() {
        return this.logConfiguration;
    }

    /**
     * Set the logConfiguration property: The log configuration for the results of the execute command actions. The logs
     * can be sent to CloudWatch Logs or an Amazon S3 bucket. When ``logging=OVERRIDE`` is specified, a
     * ``logConfiguration`` must be provided. The log configuration for the results of the execute command actions. The
     * logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
     * 
     * @param logConfiguration the logConfiguration value to set.
     * @return the ExecuteCommandConfiguration object itself.
     */
    public ExecuteCommandConfiguration withLogConfiguration(ExecuteCommandLogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
        return this;
    }

    /**
     * Get the logging property: The log setting to use for redirecting logs for your execute command results. The
     * following log settings are available. + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The
     * ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to
     * this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged. +
     * ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option
     * is specified, the ``logConfiguration`` is required.
     * 
     * @return the logging value.
     */
    public String logging() {
        return this.logging;
    }

    /**
     * Set the logging property: The log setting to use for redirecting logs for your execute command results. The
     * following log settings are available. + ``NONE``: The execute command session is not logged. + ``DEFAULT``: The
     * ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to
     * this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged. +
     * ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option
     * is specified, the ``logConfiguration`` is required.
     * 
     * @param logging the logging value to set.
     * @return the ExecuteCommandConfiguration object itself.
     */
    public ExecuteCommandConfiguration withLogging(String logging) {
        this.logging = logging;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logConfiguration() != null) {
            logConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeJsonField("logConfiguration", this.logConfiguration);
        jsonWriter.writeStringField("logging", this.logging);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExecuteCommandConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExecuteCommandConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExecuteCommandConfiguration.
     */
    public static ExecuteCommandConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExecuteCommandConfiguration deserializedExecuteCommandConfiguration = new ExecuteCommandConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kmsKeyId".equals(fieldName)) {
                    deserializedExecuteCommandConfiguration.kmsKeyId = reader.getString();
                } else if ("logConfiguration".equals(fieldName)) {
                    deserializedExecuteCommandConfiguration.logConfiguration
                        = ExecuteCommandLogConfiguration.fromJson(reader);
                } else if ("logging".equals(fieldName)) {
                    deserializedExecuteCommandConfiguration.logging = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExecuteCommandConfiguration;
        });
    }
}
