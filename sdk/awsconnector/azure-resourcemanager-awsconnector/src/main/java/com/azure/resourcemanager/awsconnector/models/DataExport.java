// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of DataExport.
 */
@Fluent
public final class DataExport implements JsonSerializable<DataExport> {
    /*
     * The place to store the data for an analysis. Specifies information about where to publish analysis or
     * configuration results for an Amazon S3 bucket.
     */
    private Destination destination;

    /*
     * The version of the output schema to use when exporting data. Must be ``V_1``.
     */
    private String outputSchemaVersion;

    /**
     * Creates an instance of DataExport class.
     */
    public DataExport() {
    }

    /**
     * Get the destination property: The place to store the data for an analysis. Specifies information about where to
     * publish analysis or configuration results for an Amazon S3 bucket.
     * 
     * @return the destination value.
     */
    public Destination destination() {
        return this.destination;
    }

    /**
     * Set the destination property: The place to store the data for an analysis. Specifies information about where to
     * publish analysis or configuration results for an Amazon S3 bucket.
     * 
     * @param destination the destination value to set.
     * @return the DataExport object itself.
     */
    public DataExport withDestination(Destination destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the outputSchemaVersion property: The version of the output schema to use when exporting data. Must be
     * ``V_1``.
     * 
     * @return the outputSchemaVersion value.
     */
    public String outputSchemaVersion() {
        return this.outputSchemaVersion;
    }

    /**
     * Set the outputSchemaVersion property: The version of the output schema to use when exporting data. Must be
     * ``V_1``.
     * 
     * @param outputSchemaVersion the outputSchemaVersion value to set.
     * @return the DataExport object itself.
     */
    public DataExport withOutputSchemaVersion(String outputSchemaVersion) {
        this.outputSchemaVersion = outputSchemaVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destination() != null) {
            destination().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("destination", this.destination);
        jsonWriter.writeStringField("outputSchemaVersion", this.outputSchemaVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataExport from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataExport if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DataExport.
     */
    public static DataExport fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataExport deserializedDataExport = new DataExport();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destination".equals(fieldName)) {
                    deserializedDataExport.destination = Destination.fromJson(reader);
                } else if ("outputSchemaVersion".equals(fieldName)) {
                    deserializedDataExport.outputSchemaVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataExport;
        });
    }
}
