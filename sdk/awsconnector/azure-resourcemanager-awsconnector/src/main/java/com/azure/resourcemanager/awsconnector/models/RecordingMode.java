// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of RecordingMode.
 */
@Fluent
public final class RecordingMode implements JsonSerializable<RecordingMode> {
    /*
     * <p>The default recording frequency that Config uses to record configuration changes.</p> <important> <p>Daily
     * recording is not supported for the following resource types:</p> <ul> <li> <p>
     * <code>AWS::Config::ResourceCompliance</code> </p> </li> <li> <p>
     * <code>AWS::Config::ConformancePackCompliance</code> </p> </li> <li> <p>
     * <code>AWS::Config::ConfigurationRecorder</code> </p> </li> </ul> <p>For the <b>allSupported</b>
     * (<code>ALL_SUPPORTED_RESOURCE_TYPES</code>) recording strategy, these resource types will be set to Continuous
     * recording.</p> </important>
     */
    private RecordingFrequencyEnumValue recordingFrequency;

    /*
     * <p>An array of <code>recordingModeOverride</code> objects for you to specify your overrides for the recording
     * mode. The <code>recordingModeOverride</code> object in the <code>recordingModeOverrides</code> array consists of
     * three fields: a <code>description</code>, the new <code>recordingFrequency</code>, and an array of
     * <code>resourceTypes</code> to override.</p>
     */
    private List<RecordingModeOverride> recordingModeOverrides;

    /**
     * Creates an instance of RecordingMode class.
     */
    public RecordingMode() {
    }

    /**
     * Get the recordingFrequency property: &lt;p&gt;The default recording frequency that Config uses to record
     * configuration changes.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Daily recording is not supported for the following
     * resource types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ResourceCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConformancePackCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConfigurationRecorder&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the
     * &lt;b&gt;allSupported&lt;/b&gt; (&lt;code&gt;ALL_SUPPORTED_RESOURCE_TYPES&lt;/code&gt;) recording strategy, these
     * resource types will be set to Continuous recording.&lt;/p&gt; &lt;/important&gt;.
     * 
     * @return the recordingFrequency value.
     */
    public RecordingFrequencyEnumValue recordingFrequency() {
        return this.recordingFrequency;
    }

    /**
     * Set the recordingFrequency property: &lt;p&gt;The default recording frequency that Config uses to record
     * configuration changes.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Daily recording is not supported for the following
     * resource types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ResourceCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConformancePackCompliance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;AWS::Config::ConfigurationRecorder&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the
     * &lt;b&gt;allSupported&lt;/b&gt; (&lt;code&gt;ALL_SUPPORTED_RESOURCE_TYPES&lt;/code&gt;) recording strategy, these
     * resource types will be set to Continuous recording.&lt;/p&gt; &lt;/important&gt;.
     * 
     * @param recordingFrequency the recordingFrequency value to set.
     * @return the RecordingMode object itself.
     */
    public RecordingMode withRecordingFrequency(RecordingFrequencyEnumValue recordingFrequency) {
        this.recordingFrequency = recordingFrequency;
        return this;
    }

    /**
     * Get the recordingModeOverrides property: &lt;p&gt;An array of &lt;code&gt;recordingModeOverride&lt;/code&gt;
     * objects for you to specify your overrides for the recording mode. The
     * &lt;code&gt;recordingModeOverride&lt;/code&gt; object in the &lt;code&gt;recordingModeOverrides&lt;/code&gt;
     * array consists of three fields: a &lt;code&gt;description&lt;/code&gt;, the new
     * &lt;code&gt;recordingFrequency&lt;/code&gt;, and an array of &lt;code&gt;resourceTypes&lt;/code&gt; to
     * override.&lt;/p&gt;.
     * 
     * @return the recordingModeOverrides value.
     */
    public List<RecordingModeOverride> recordingModeOverrides() {
        return this.recordingModeOverrides;
    }

    /**
     * Set the recordingModeOverrides property: &lt;p&gt;An array of &lt;code&gt;recordingModeOverride&lt;/code&gt;
     * objects for you to specify your overrides for the recording mode. The
     * &lt;code&gt;recordingModeOverride&lt;/code&gt; object in the &lt;code&gt;recordingModeOverrides&lt;/code&gt;
     * array consists of three fields: a &lt;code&gt;description&lt;/code&gt;, the new
     * &lt;code&gt;recordingFrequency&lt;/code&gt;, and an array of &lt;code&gt;resourceTypes&lt;/code&gt; to
     * override.&lt;/p&gt;.
     * 
     * @param recordingModeOverrides the recordingModeOverrides value to set.
     * @return the RecordingMode object itself.
     */
    public RecordingMode withRecordingModeOverrides(List<RecordingModeOverride> recordingModeOverrides) {
        this.recordingModeOverrides = recordingModeOverrides;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recordingFrequency() != null) {
            recordingFrequency().validate();
        }
        if (recordingModeOverrides() != null) {
            recordingModeOverrides().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recordingFrequency", this.recordingFrequency);
        jsonWriter.writeArrayField("recordingModeOverrides", this.recordingModeOverrides,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecordingMode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecordingMode if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecordingMode.
     */
    public static RecordingMode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecordingMode deserializedRecordingMode = new RecordingMode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recordingFrequency".equals(fieldName)) {
                    deserializedRecordingMode.recordingFrequency = RecordingFrequencyEnumValue.fromJson(reader);
                } else if ("recordingModeOverrides".equals(fieldName)) {
                    List<RecordingModeOverride> recordingModeOverrides
                        = reader.readArray(reader1 -> RecordingModeOverride.fromJson(reader1));
                    deserializedRecordingMode.recordingModeOverrides = recordingModeOverrides;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecordingMode;
        });
    }
}
