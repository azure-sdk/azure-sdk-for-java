// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AccountAttributeValue.
 */
@Fluent
public final class AccountAttributeValue implements JsonSerializable<AccountAttributeValue> {
    /*
     * <p>The value of the attribute.</p>
     */
    private String attributeValue;

    /**
     * Creates an instance of AccountAttributeValue class.
     */
    public AccountAttributeValue() {
    }

    /**
     * Get the attributeValue property: &lt;p&gt;The value of the attribute.&lt;/p&gt;.
     * 
     * @return the attributeValue value.
     */
    public String attributeValue() {
        return this.attributeValue;
    }

    /**
     * Set the attributeValue property: &lt;p&gt;The value of the attribute.&lt;/p&gt;.
     * 
     * @param attributeValue the attributeValue value to set.
     * @return the AccountAttributeValue object itself.
     */
    public AccountAttributeValue withAttributeValue(String attributeValue) {
        this.attributeValue = attributeValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("attributeValue", this.attributeValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountAttributeValue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountAttributeValue if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountAttributeValue.
     */
    public static AccountAttributeValue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountAttributeValue deserializedAccountAttributeValue = new AccountAttributeValue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributeValue".equals(fieldName)) {
                    deserializedAccountAttributeValue.attributeValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountAttributeValue;
        });
    }
}
