// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ServiceConnectTlsConfiguration.
 */
@Fluent
public final class ServiceConnectTlsConfiguration implements JsonSerializable<ServiceConnectTlsConfiguration> {
    /*
     * The signer certificate authority. An object that represents the AWS Private Certificate Authority certificate.
     */
    private ServiceConnectTlsCertificateAuthority issuerCertificateAuthority;

    /*
     * The AWS Key Management Service key.
     */
    private String kmsKey;

    /*
     * The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
     */
    private String roleArn;

    /**
     * Creates an instance of ServiceConnectTlsConfiguration class.
     */
    public ServiceConnectTlsConfiguration() {
    }

    /**
     * Get the issuerCertificateAuthority property: The signer certificate authority. An object that represents the AWS
     * Private Certificate Authority certificate.
     * 
     * @return the issuerCertificateAuthority value.
     */
    public ServiceConnectTlsCertificateAuthority issuerCertificateAuthority() {
        return this.issuerCertificateAuthority;
    }

    /**
     * Set the issuerCertificateAuthority property: The signer certificate authority. An object that represents the AWS
     * Private Certificate Authority certificate.
     * 
     * @param issuerCertificateAuthority the issuerCertificateAuthority value to set.
     * @return the ServiceConnectTlsConfiguration object itself.
     */
    public ServiceConnectTlsConfiguration
        withIssuerCertificateAuthority(ServiceConnectTlsCertificateAuthority issuerCertificateAuthority) {
        this.issuerCertificateAuthority = issuerCertificateAuthority;
        return this;
    }

    /**
     * Get the kmsKey property: The AWS Key Management Service key.
     * 
     * @return the kmsKey value.
     */
    public String kmsKey() {
        return this.kmsKey;
    }

    /**
     * Set the kmsKey property: The AWS Key Management Service key.
     * 
     * @param kmsKey the kmsKey value to set.
     * @return the ServiceConnectTlsConfiguration object itself.
     */
    public ServiceConnectTlsConfiguration withKmsKey(String kmsKey) {
        this.kmsKey = kmsKey;
        return this;
    }

    /**
     * Get the roleArn property: The Amazon Resource Name (ARN) of the IAM role that's associated with the Service
     * Connect TLS.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: The Amazon Resource Name (ARN) of the IAM role that's associated with the Service
     * Connect TLS.
     * 
     * @param roleArn the roleArn value to set.
     * @return the ServiceConnectTlsConfiguration object itself.
     */
    public ServiceConnectTlsConfiguration withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issuerCertificateAuthority() != null) {
            issuerCertificateAuthority().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("issuerCertificateAuthority", this.issuerCertificateAuthority);
        jsonWriter.writeStringField("kmsKey", this.kmsKey);
        jsonWriter.writeStringField("roleArn", this.roleArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConnectTlsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConnectTlsConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceConnectTlsConfiguration.
     */
    public static ServiceConnectTlsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConnectTlsConfiguration deserializedServiceConnectTlsConfiguration
                = new ServiceConnectTlsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issuerCertificateAuthority".equals(fieldName)) {
                    deserializedServiceConnectTlsConfiguration.issuerCertificateAuthority
                        = ServiceConnectTlsCertificateAuthority.fromJson(reader);
                } else if ("kmsKey".equals(fieldName)) {
                    deserializedServiceConnectTlsConfiguration.kmsKey = reader.getString();
                } else if ("roleArn".equals(fieldName)) {
                    deserializedServiceConnectTlsConfiguration.roleArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConnectTlsConfiguration;
        });
    }
}
