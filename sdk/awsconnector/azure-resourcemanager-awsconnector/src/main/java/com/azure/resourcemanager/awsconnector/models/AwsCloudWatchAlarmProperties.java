// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsCloudWatchAlarm.
 */
@Fluent
public final class AwsCloudWatchAlarmProperties implements JsonSerializable<AwsCloudWatchAlarmProperties> {
    /*
     * Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
     */
    private Boolean actionsEnabled;

    /*
     * The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each
     * action as an Amazon Resource Name (ARN). For more information about creating alarms and the actions that you can
     * specify, see
     * [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the
     * *API Reference*.
     */
    private List<String> alarmActions;

    /*
     * The description of the alarm.
     */
    private String alarmDescription;

    /*
     * The name of the alarm. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the
     * alarm name. If you specify a name, you cannot perform updates that require replacement of this resource. You can
     * perform updates that require no or some interruption. If you must replace the resource, specify a new name.
     */
    private String alarmName;

    /*
     * Property arn
     */
    private String arn;

    /*
     * The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic
     * value is used as the first operand.
     */
    private String comparisonOperator;

    /*
     * The number of datapoints that must be breaching to trigger the alarm. This is used only if you are setting an 'M
     * out of N' alarm. In that case, this value is the M, and the value that you set for ``EvaluationPeriods`` is the N
     * value. For more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation)
     * in the *User Guide*. If you omit this parameter, CW uses the same value here that you set for
     * ``EvaluationPeriods``, and the alarm goes to alarm state if that many consecutive periods are breaching.
     */
    private Integer datapointsToAlarm;

    /*
     * The dimensions for the metric associated with the alarm. For an alarm based on a math expression, you can't
     * specify ``Dimensions``. Instead, you use ``Metrics``.
     */
    private List<Dimension> dimensions;

    /*
     * Used only for alarms based on percentiles. If ``ignore``, the alarm state does not change during periods with too
     * few data points to be statistically significant. If ``evaluate`` or this parameter is not used, the alarm is
     * always evaluated and possibly changes state no matter how many data points are available.
     */
    private String evaluateLowSampleCountPercentile;

    /*
     * The number of periods over which data is compared to the specified threshold. If you are setting an alarm that
     * requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that
     * number. If you are setting an 'M out of N' alarm, this value is the N, and ``DatapointsToAlarm`` is the M. For
     * more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation)
     * in the *User Guide*.
     */
    private Integer evaluationPeriods;

    /*
     * The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. For an
     * alarm based on a metric, you must specify either ``Statistic`` or ``ExtendedStatistic`` but not both. For an
     * alarm based on a math expression, you can't specify ``ExtendedStatistic``. Instead, you use ``Metrics``.
     */
    private String extendedStatistic;

    /*
     * The actions to execute when this alarm transitions to the ``INSUFFICIENT_DATA`` state from any other state. Each
     * action is specified as an Amazon Resource Name (ARN).
     */
    private List<String> insufficientDataActions;

    /*
     * The name of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm
     * based on a math expression, you use ``Metrics`` instead and you can't specify ``MetricName``.
     */
    private String metricName;

    /*
     * An array that enables you to create an alarm based on the result of a metric math expression. Each item in the
     * array either retrieves a metric or performs a math expression. If you specify the ``Metrics`` parameter, you
     * cannot specify ``MetricName``, ``Dimensions``, ``Period``, ``Namespace``, ``Statistic``, ``ExtendedStatistic``,
     * or ``Unit``.
     */
    private List<MetricDataQuery> metrics;

    /*
     * The namespace of the metric associated with the alarm. This is required for an alarm based on a metric. For an
     * alarm based on a math expression, you can't specify ``Namespace`` and you use ``Metrics`` instead. For a list of
     * namespaces for metrics from AWS services, see [Services That Publish
     * Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html)
     */
    private String namespace;

    /*
     * The actions to execute when this alarm transitions to the ``OK`` state from any other state. Each action is
     * specified as an Amazon Resource Name (ARN).
     */
    private List<String> okActions;

    /*
     * The period, in seconds, over which the statistic is applied. This is required for an alarm based on a metric.
     * Valid values are 10, 30, 60, and any multiple of 60. For an alarm based on a math expression, you can't specify
     * ``Period``, and instead you use the ``Metrics`` parameter. *Minimum:* 10
     */
    private Integer period;

    /*
     * The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use
     * ``ExtendedStatistic``. For an alarm based on a metric, you must specify either ``Statistic`` or
     * ``ExtendedStatistic`` but not both. For an alarm based on a math expression, you can't specify ``Statistic``.
     * Instead, you use ``Metrics``.
     */
    private String statistic;

    /*
     * Property tags
     */
    private List<TagAutoGenerated6> tags;

    /*
     * The value to compare with the specified statistic.
     */
    private Float threshold;

    /*
     * In an alarm based on an anomaly detection model, this is the ID of the ``ANOMALY_DETECTION_BAND`` function used
     * as the threshold for the alarm.
     */
    private String thresholdMetricId;

    /*
     * Sets how this alarm is to handle missing data points. Valid values are ``breaching``, ``notBreaching``,
     * ``ignore``, and ``missing``. For more information, see [Configuring How Alarms Treat Missing
     * Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-
     * data) in the *Amazon User Guide*. If you omit this parameter, the default behavior of ``missing`` is used.
     */
    private String treatMissingData;

    /*
     * The unit of the metric associated with the alarm. Specify this only if you are creating an alarm based on a
     * single metric. Do not specify this if you are specifying a ``Metrics`` array. You can specify the following
     * values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits,
     * Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second,
     * Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second,
     * or None.
     */
    private String unit;

    /**
     * Creates an instance of AwsCloudWatchAlarmProperties class.
     */
    public AwsCloudWatchAlarmProperties() {
    }

    /**
     * Get the actionsEnabled property: Indicates whether actions should be executed during any changes to the alarm
     * state. The default is TRUE.
     * 
     * @return the actionsEnabled value.
     */
    public Boolean actionsEnabled() {
        return this.actionsEnabled;
    }

    /**
     * Set the actionsEnabled property: Indicates whether actions should be executed during any changes to the alarm
     * state. The default is TRUE.
     * 
     * @param actionsEnabled the actionsEnabled value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withActionsEnabled(Boolean actionsEnabled) {
        this.actionsEnabled = actionsEnabled;
        return this;
    }

    /**
     * Get the alarmActions property: The list of actions to execute when this alarm transitions into an ALARM state
     * from any other state. Specify each action as an Amazon Resource Name (ARN). For more information about creating
     * alarms and the actions that you can specify, see
     * [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the
     * *API Reference*.
     * 
     * @return the alarmActions value.
     */
    public List<String> alarmActions() {
        return this.alarmActions;
    }

    /**
     * Set the alarmActions property: The list of actions to execute when this alarm transitions into an ALARM state
     * from any other state. Specify each action as an Amazon Resource Name (ARN). For more information about creating
     * alarms and the actions that you can specify, see
     * [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) in the
     * *API Reference*.
     * 
     * @param alarmActions the alarmActions value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withAlarmActions(List<String> alarmActions) {
        this.alarmActions = alarmActions;
        return this;
    }

    /**
     * Get the alarmDescription property: The description of the alarm.
     * 
     * @return the alarmDescription value.
     */
    public String alarmDescription() {
        return this.alarmDescription;
    }

    /**
     * Set the alarmDescription property: The description of the alarm.
     * 
     * @param alarmDescription the alarmDescription value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withAlarmDescription(String alarmDescription) {
        this.alarmDescription = alarmDescription;
        return this;
    }

    /**
     * Get the alarmName property: The name of the alarm. If you don't specify a name, CFN generates a unique physical
     * ID and uses that ID for the alarm name. If you specify a name, you cannot perform updates that require
     * replacement of this resource. You can perform updates that require no or some interruption. If you must replace
     * the resource, specify a new name.
     * 
     * @return the alarmName value.
     */
    public String alarmName() {
        return this.alarmName;
    }

    /**
     * Set the alarmName property: The name of the alarm. If you don't specify a name, CFN generates a unique physical
     * ID and uses that ID for the alarm name. If you specify a name, you cannot perform updates that require
     * replacement of this resource. You can perform updates that require no or some interruption. If you must replace
     * the resource, specify a new name.
     * 
     * @param alarmName the alarmName value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withAlarmName(String alarmName) {
        this.alarmName = alarmName;
        return this;
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the comparisonOperator property: The arithmetic operation to use when comparing the specified statistic and
     * threshold. The specified statistic value is used as the first operand.
     * 
     * @return the comparisonOperator value.
     */
    public String comparisonOperator() {
        return this.comparisonOperator;
    }

    /**
     * Set the comparisonOperator property: The arithmetic operation to use when comparing the specified statistic and
     * threshold. The specified statistic value is used as the first operand.
     * 
     * @param comparisonOperator the comparisonOperator value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withComparisonOperator(String comparisonOperator) {
        this.comparisonOperator = comparisonOperator;
        return this;
    }

    /**
     * Get the datapointsToAlarm property: The number of datapoints that must be breaching to trigger the alarm. This is
     * used only if you are setting an 'M out of N' alarm. In that case, this value is the M, and the value that you set
     * for ``EvaluationPeriods`` is the N value. For more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation)
     * in the *User Guide*. If you omit this parameter, CW uses the same value here that you set for
     * ``EvaluationPeriods``, and the alarm goes to alarm state if that many consecutive periods are breaching.
     * 
     * @return the datapointsToAlarm value.
     */
    public Integer datapointsToAlarm() {
        return this.datapointsToAlarm;
    }

    /**
     * Set the datapointsToAlarm property: The number of datapoints that must be breaching to trigger the alarm. This is
     * used only if you are setting an 'M out of N' alarm. In that case, this value is the M, and the value that you set
     * for ``EvaluationPeriods`` is the N value. For more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation)
     * in the *User Guide*. If you omit this parameter, CW uses the same value here that you set for
     * ``EvaluationPeriods``, and the alarm goes to alarm state if that many consecutive periods are breaching.
     * 
     * @param datapointsToAlarm the datapointsToAlarm value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withDatapointsToAlarm(Integer datapointsToAlarm) {
        this.datapointsToAlarm = datapointsToAlarm;
        return this;
    }

    /**
     * Get the dimensions property: The dimensions for the metric associated with the alarm. For an alarm based on a
     * math expression, you can't specify ``Dimensions``. Instead, you use ``Metrics``.
     * 
     * @return the dimensions value.
     */
    public List<Dimension> dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: The dimensions for the metric associated with the alarm. For an alarm based on a
     * math expression, you can't specify ``Dimensions``. Instead, you use ``Metrics``.
     * 
     * @param dimensions the dimensions value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withDimensions(List<Dimension> dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Get the evaluateLowSampleCountPercentile property: Used only for alarms based on percentiles. If ``ignore``, the
     * alarm state does not change during periods with too few data points to be statistically significant. If
     * ``evaluate`` or this parameter is not used, the alarm is always evaluated and possibly changes state no matter
     * how many data points are available.
     * 
     * @return the evaluateLowSampleCountPercentile value.
     */
    public String evaluateLowSampleCountPercentile() {
        return this.evaluateLowSampleCountPercentile;
    }

    /**
     * Set the evaluateLowSampleCountPercentile property: Used only for alarms based on percentiles. If ``ignore``, the
     * alarm state does not change during periods with too few data points to be statistically significant. If
     * ``evaluate`` or this parameter is not used, the alarm is always evaluated and possibly changes state no matter
     * how many data points are available.
     * 
     * @param evaluateLowSampleCountPercentile the evaluateLowSampleCountPercentile value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withEvaluateLowSampleCountPercentile(String evaluateLowSampleCountPercentile) {
        this.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile;
        return this;
    }

    /**
     * Get the evaluationPeriods property: The number of periods over which data is compared to the specified threshold.
     * If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the
     * alarm, this value specifies that number. If you are setting an 'M out of N' alarm, this value is the N, and
     * ``DatapointsToAlarm`` is the M. For more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation)
     * in the *User Guide*.
     * 
     * @return the evaluationPeriods value.
     */
    public Integer evaluationPeriods() {
        return this.evaluationPeriods;
    }

    /**
     * Set the evaluationPeriods property: The number of periods over which data is compared to the specified threshold.
     * If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the
     * alarm, this value specifies that number. If you are setting an 'M out of N' alarm, this value is the N, and
     * ``DatapointsToAlarm`` is the M. For more information, see [Evaluating an
     * Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation)
     * in the *User Guide*.
     * 
     * @param evaluationPeriods the evaluationPeriods value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withEvaluationPeriods(Integer evaluationPeriods) {
        this.evaluationPeriods = evaluationPeriods;
        return this;
    }

    /**
     * Get the extendedStatistic property: The percentile statistic for the metric associated with the alarm. Specify a
     * value between p0.0 and p100. For an alarm based on a metric, you must specify either ``Statistic`` or
     * ``ExtendedStatistic`` but not both. For an alarm based on a math expression, you can't specify
     * ``ExtendedStatistic``. Instead, you use ``Metrics``.
     * 
     * @return the extendedStatistic value.
     */
    public String extendedStatistic() {
        return this.extendedStatistic;
    }

    /**
     * Set the extendedStatistic property: The percentile statistic for the metric associated with the alarm. Specify a
     * value between p0.0 and p100. For an alarm based on a metric, you must specify either ``Statistic`` or
     * ``ExtendedStatistic`` but not both. For an alarm based on a math expression, you can't specify
     * ``ExtendedStatistic``. Instead, you use ``Metrics``.
     * 
     * @param extendedStatistic the extendedStatistic value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withExtendedStatistic(String extendedStatistic) {
        this.extendedStatistic = extendedStatistic;
        return this;
    }

    /**
     * Get the insufficientDataActions property: The actions to execute when this alarm transitions to the
     * ``INSUFFICIENT_DATA`` state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     * @return the insufficientDataActions value.
     */
    public List<String> insufficientDataActions() {
        return this.insufficientDataActions;
    }

    /**
     * Set the insufficientDataActions property: The actions to execute when this alarm transitions to the
     * ``INSUFFICIENT_DATA`` state from any other state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     * @param insufficientDataActions the insufficientDataActions value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withInsufficientDataActions(List<String> insufficientDataActions) {
        this.insufficientDataActions = insufficientDataActions;
        return this;
    }

    /**
     * Get the metricName property: The name of the metric associated with the alarm. This is required for an alarm
     * based on a metric. For an alarm based on a math expression, you use ``Metrics`` instead and you can't specify
     * ``MetricName``.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: The name of the metric associated with the alarm. This is required for an alarm
     * based on a metric. For an alarm based on a math expression, you use ``Metrics`` instead and you can't specify
     * ``MetricName``.
     * 
     * @param metricName the metricName value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the metrics property: An array that enables you to create an alarm based on the result of a metric math
     * expression. Each item in the array either retrieves a metric or performs a math expression. If you specify the
     * ``Metrics`` parameter, you cannot specify ``MetricName``, ``Dimensions``, ``Period``, ``Namespace``,
     * ``Statistic``, ``ExtendedStatistic``, or ``Unit``.
     * 
     * @return the metrics value.
     */
    public List<MetricDataQuery> metrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: An array that enables you to create an alarm based on the result of a metric math
     * expression. Each item in the array either retrieves a metric or performs a math expression. If you specify the
     * ``Metrics`` parameter, you cannot specify ``MetricName``, ``Dimensions``, ``Period``, ``Namespace``,
     * ``Statistic``, ``ExtendedStatistic``, or ``Unit``.
     * 
     * @param metrics the metrics value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withMetrics(List<MetricDataQuery> metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the namespace property: The namespace of the metric associated with the alarm. This is required for an alarm
     * based on a metric. For an alarm based on a math expression, you can't specify ``Namespace`` and you use
     * ``Metrics`` instead. For a list of namespaces for metrics from AWS services, see [Services That Publish
     * Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html).
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace of the metric associated with the alarm. This is required for an alarm
     * based on a metric. For an alarm based on a math expression, you can't specify ``Namespace`` and you use
     * ``Metrics`` instead. For a list of namespaces for metrics from AWS services, see [Services That Publish
     * Metrics.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html).
     * 
     * @param namespace the namespace value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the okActions property: The actions to execute when this alarm transitions to the ``OK`` state from any other
     * state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     * @return the okActions value.
     */
    public List<String> okActions() {
        return this.okActions;
    }

    /**
     * Set the okActions property: The actions to execute when this alarm transitions to the ``OK`` state from any other
     * state. Each action is specified as an Amazon Resource Name (ARN).
     * 
     * @param okActions the okActions value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withOkActions(List<String> okActions) {
        this.okActions = okActions;
        return this;
    }

    /**
     * Get the period property: The period, in seconds, over which the statistic is applied. This is required for an
     * alarm based on a metric. Valid values are 10, 30, 60, and any multiple of 60. For an alarm based on a math
     * expression, you can't specify ``Period``, and instead you use the ``Metrics`` parameter. *Minimum:* 10.
     * 
     * @return the period value.
     */
    public Integer period() {
        return this.period;
    }

    /**
     * Set the period property: The period, in seconds, over which the statistic is applied. This is required for an
     * alarm based on a metric. Valid values are 10, 30, 60, and any multiple of 60. For an alarm based on a math
     * expression, you can't specify ``Period``, and instead you use the ``Metrics`` parameter. *Minimum:* 10.
     * 
     * @param period the period value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withPeriod(Integer period) {
        this.period = period;
        return this;
    }

    /**
     * Get the statistic property: The statistic for the metric associated with the alarm, other than percentile. For
     * percentile statistics, use ``ExtendedStatistic``. For an alarm based on a metric, you must specify either
     * ``Statistic`` or ``ExtendedStatistic`` but not both. For an alarm based on a math expression, you can't specify
     * ``Statistic``. Instead, you use ``Metrics``.
     * 
     * @return the statistic value.
     */
    public String statistic() {
        return this.statistic;
    }

    /**
     * Set the statistic property: The statistic for the metric associated with the alarm, other than percentile. For
     * percentile statistics, use ``ExtendedStatistic``. For an alarm based on a metric, you must specify either
     * ``Statistic`` or ``ExtendedStatistic`` but not both. For an alarm based on a math expression, you can't specify
     * ``Statistic``. Instead, you use ``Metrics``.
     * 
     * @param statistic the statistic value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withStatistic(String statistic) {
        this.statistic = statistic;
        return this;
    }

    /**
     * Get the tags property: Property tags.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated6> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Property tags.
     * 
     * @param tags the tags value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withTags(List<TagAutoGenerated6> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the threshold property: The value to compare with the specified statistic.
     * 
     * @return the threshold value.
     */
    public Float threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The value to compare with the specified statistic.
     * 
     * @param threshold the threshold value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withThreshold(Float threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the thresholdMetricId property: In an alarm based on an anomaly detection model, this is the ID of the
     * ``ANOMALY_DETECTION_BAND`` function used as the threshold for the alarm.
     * 
     * @return the thresholdMetricId value.
     */
    public String thresholdMetricId() {
        return this.thresholdMetricId;
    }

    /**
     * Set the thresholdMetricId property: In an alarm based on an anomaly detection model, this is the ID of the
     * ``ANOMALY_DETECTION_BAND`` function used as the threshold for the alarm.
     * 
     * @param thresholdMetricId the thresholdMetricId value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withThresholdMetricId(String thresholdMetricId) {
        this.thresholdMetricId = thresholdMetricId;
        return this;
    }

    /**
     * Get the treatMissingData property: Sets how this alarm is to handle missing data points. Valid values are
     * ``breaching``, ``notBreaching``, ``ignore``, and ``missing``. For more information, see [Configuring How Alarms
     * Treat Missing
     * Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data)
     * in the *Amazon User Guide*. If you omit this parameter, the default behavior of ``missing`` is used.
     * 
     * @return the treatMissingData value.
     */
    public String treatMissingData() {
        return this.treatMissingData;
    }

    /**
     * Set the treatMissingData property: Sets how this alarm is to handle missing data points. Valid values are
     * ``breaching``, ``notBreaching``, ``ignore``, and ``missing``. For more information, see [Configuring How Alarms
     * Treat Missing
     * Data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data)
     * in the *Amazon User Guide*. If you omit this parameter, the default behavior of ``missing`` is used.
     * 
     * @param treatMissingData the treatMissingData value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withTreatMissingData(String treatMissingData) {
        this.treatMissingData = treatMissingData;
        return this;
    }

    /**
     * Get the unit property: The unit of the metric associated with the alarm. Specify this only if you are creating an
     * alarm based on a single metric. Do not specify this if you are specifying a ``Metrics`` array. You can specify
     * the following values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes,
     * Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second,
     * Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
     * Terabits/Second, Count/Second, or None.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit of the metric associated with the alarm. Specify this only if you are creating an
     * alarm based on a single metric. Do not specify this if you are specifying a ``Metrics`` array. You can specify
     * the following values: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes,
     * Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second,
     * Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second,
     * Terabits/Second, Count/Second, or None.
     * 
     * @param unit the unit value to set.
     * @return the AwsCloudWatchAlarmProperties object itself.
     */
    public AwsCloudWatchAlarmProperties withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dimensions() != null) {
            dimensions().forEach(e -> e.validate());
        }
        if (metrics() != null) {
            metrics().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("actionsEnabled", this.actionsEnabled);
        jsonWriter.writeArrayField("alarmActions", this.alarmActions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("alarmDescription", this.alarmDescription);
        jsonWriter.writeStringField("alarmName", this.alarmName);
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("comparisonOperator", this.comparisonOperator);
        jsonWriter.writeNumberField("datapointsToAlarm", this.datapointsToAlarm);
        jsonWriter.writeArrayField("dimensions", this.dimensions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("evaluateLowSampleCountPercentile", this.evaluateLowSampleCountPercentile);
        jsonWriter.writeNumberField("evaluationPeriods", this.evaluationPeriods);
        jsonWriter.writeStringField("extendedStatistic", this.extendedStatistic);
        jsonWriter.writeArrayField("insufficientDataActions", this.insufficientDataActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeArrayField("metrics", this.metrics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeArrayField("okActions", this.okActions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("period", this.period);
        jsonWriter.writeStringField("statistic", this.statistic);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("threshold", this.threshold);
        jsonWriter.writeStringField("thresholdMetricId", this.thresholdMetricId);
        jsonWriter.writeStringField("treatMissingData", this.treatMissingData);
        jsonWriter.writeStringField("unit", this.unit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsCloudWatchAlarmProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsCloudWatchAlarmProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsCloudWatchAlarmProperties.
     */
    public static AwsCloudWatchAlarmProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsCloudWatchAlarmProperties deserializedAwsCloudWatchAlarmProperties = new AwsCloudWatchAlarmProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionsEnabled".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.actionsEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("alarmActions".equals(fieldName)) {
                    List<String> alarmActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsCloudWatchAlarmProperties.alarmActions = alarmActions;
                } else if ("alarmDescription".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.alarmDescription = reader.getString();
                } else if ("alarmName".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.alarmName = reader.getString();
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.arn = reader.getString();
                } else if ("comparisonOperator".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.comparisonOperator = reader.getString();
                } else if ("datapointsToAlarm".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.datapointsToAlarm = reader.getNullable(JsonReader::getInt);
                } else if ("dimensions".equals(fieldName)) {
                    List<Dimension> dimensions = reader.readArray(reader1 -> Dimension.fromJson(reader1));
                    deserializedAwsCloudWatchAlarmProperties.dimensions = dimensions;
                } else if ("evaluateLowSampleCountPercentile".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.evaluateLowSampleCountPercentile = reader.getString();
                } else if ("evaluationPeriods".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.evaluationPeriods = reader.getNullable(JsonReader::getInt);
                } else if ("extendedStatistic".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.extendedStatistic = reader.getString();
                } else if ("insufficientDataActions".equals(fieldName)) {
                    List<String> insufficientDataActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsCloudWatchAlarmProperties.insufficientDataActions = insufficientDataActions;
                } else if ("metricName".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.metricName = reader.getString();
                } else if ("metrics".equals(fieldName)) {
                    List<MetricDataQuery> metrics = reader.readArray(reader1 -> MetricDataQuery.fromJson(reader1));
                    deserializedAwsCloudWatchAlarmProperties.metrics = metrics;
                } else if ("namespace".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.namespace = reader.getString();
                } else if ("okActions".equals(fieldName)) {
                    List<String> okActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsCloudWatchAlarmProperties.okActions = okActions;
                } else if ("period".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.period = reader.getNullable(JsonReader::getInt);
                } else if ("statistic".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.statistic = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated6> tags = reader.readArray(reader1 -> TagAutoGenerated6.fromJson(reader1));
                    deserializedAwsCloudWatchAlarmProperties.tags = tags;
                } else if ("threshold".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.threshold = reader.getNullable(JsonReader::getFloat);
                } else if ("thresholdMetricId".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.thresholdMetricId = reader.getString();
                } else if ("treatMissingData".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.treatMissingData = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedAwsCloudWatchAlarmProperties.unit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsCloudWatchAlarmProperties;
        });
    }
}
