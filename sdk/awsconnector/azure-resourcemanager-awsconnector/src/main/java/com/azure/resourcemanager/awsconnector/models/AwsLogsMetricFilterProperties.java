// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsLogsMetricFilter.
 */
@Fluent
public final class AwsLogsMetricFilterProperties implements JsonSerializable<AwsLogsMetricFilterProperties> {
    /*
     * The name of the metric filter.
     */
    private String filterName;

    /*
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and
     * Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    private String filterPattern;

    /*
     * The name of an existing log group that you want to associate with this metric filter.
     */
    private String logGroupName;

    /*
     * The metric transformations.
     */
    private List<MetricTransformation> metricTransformations;

    /**
     * Creates an instance of AwsLogsMetricFilterProperties class.
     */
    public AwsLogsMetricFilterProperties() {
    }

    /**
     * Get the filterName property: The name of the metric filter.
     * 
     * @return the filterName value.
     */
    public String filterName() {
        return this.filterName;
    }

    /**
     * Set the filterName property: The name of the metric filter.
     * 
     * @param filterName the filterName value to set.
     * @return the AwsLogsMetricFilterProperties object itself.
     */
    public AwsLogsMetricFilterProperties withFilterName(String filterName) {
        this.filterName = filterName;
        return this;
    }

    /**
     * Get the filterPattern property: A filter pattern for extracting metric data out of ingested log events. For more
     * information, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     * 
     * @return the filterPattern value.
     */
    public String filterPattern() {
        return this.filterPattern;
    }

    /**
     * Set the filterPattern property: A filter pattern for extracting metric data out of ingested log events. For more
     * information, see [Filter and Pattern
     * Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     * 
     * @param filterPattern the filterPattern value to set.
     * @return the AwsLogsMetricFilterProperties object itself.
     */
    public AwsLogsMetricFilterProperties withFilterPattern(String filterPattern) {
        this.filterPattern = filterPattern;
        return this;
    }

    /**
     * Get the logGroupName property: The name of an existing log group that you want to associate with this metric
     * filter.
     * 
     * @return the logGroupName value.
     */
    public String logGroupName() {
        return this.logGroupName;
    }

    /**
     * Set the logGroupName property: The name of an existing log group that you want to associate with this metric
     * filter.
     * 
     * @param logGroupName the logGroupName value to set.
     * @return the AwsLogsMetricFilterProperties object itself.
     */
    public AwsLogsMetricFilterProperties withLogGroupName(String logGroupName) {
        this.logGroupName = logGroupName;
        return this;
    }

    /**
     * Get the metricTransformations property: The metric transformations.
     * 
     * @return the metricTransformations value.
     */
    public List<MetricTransformation> metricTransformations() {
        return this.metricTransformations;
    }

    /**
     * Set the metricTransformations property: The metric transformations.
     * 
     * @param metricTransformations the metricTransformations value to set.
     * @return the AwsLogsMetricFilterProperties object itself.
     */
    public AwsLogsMetricFilterProperties withMetricTransformations(List<MetricTransformation> metricTransformations) {
        this.metricTransformations = metricTransformations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metricTransformations() != null) {
            metricTransformations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filterName", this.filterName);
        jsonWriter.writeStringField("filterPattern", this.filterPattern);
        jsonWriter.writeStringField("logGroupName", this.logGroupName);
        jsonWriter.writeArrayField("metricTransformations", this.metricTransformations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsLogsMetricFilterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsLogsMetricFilterProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsLogsMetricFilterProperties.
     */
    public static AwsLogsMetricFilterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsLogsMetricFilterProperties deserializedAwsLogsMetricFilterProperties
                = new AwsLogsMetricFilterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filterName".equals(fieldName)) {
                    deserializedAwsLogsMetricFilterProperties.filterName = reader.getString();
                } else if ("filterPattern".equals(fieldName)) {
                    deserializedAwsLogsMetricFilterProperties.filterPattern = reader.getString();
                } else if ("logGroupName".equals(fieldName)) {
                    deserializedAwsLogsMetricFilterProperties.logGroupName = reader.getString();
                } else if ("metricTransformations".equals(fieldName)) {
                    List<MetricTransformation> metricTransformations
                        = reader.readArray(reader1 -> MetricTransformation.fromJson(reader1));
                    deserializedAwsLogsMetricFilterProperties.metricTransformations = metricTransformations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsLogsMetricFilterProperties;
        });
    }
}
