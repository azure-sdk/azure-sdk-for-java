// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ContainerDependency.
 */
@Fluent
public final class ContainerDependency implements JsonSerializable<ContainerDependency> {
    /*
     * The dependency condition of the container. The following are the available conditions and their behavior: +
     * ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent
     * container is started before permitting other containers to start. + ``COMPLETE`` - This condition validates that
     * a dependent container runs to completion (exits) before permitting other containers to start. This can be useful
     * for nonessential containers that run a script and then exit. This condition can't be set on an essential
     * container. + ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container
     * exits with a ``zero`` status. This condition can't be set on an essential container. + ``HEALTHY`` - This
     * condition validates that the dependent container passes its Docker health check before permitting other
     * containers to start. This requires that the dependent container has health checks configured. This condition is
     * confirmed only at task startup.
     */
    private String condition;

    /*
     * The name of a container.
     */
    private String containerName;

    /**
     * Creates an instance of ContainerDependency class.
     */
    public ContainerDependency() {
    }

    /**
     * Get the condition property: The dependency condition of the container. The following are the available conditions
     * and their behavior: + ``START`` - This condition emulates the behavior of links and volumes today. It validates
     * that a dependent container is started before permitting other containers to start. + ``COMPLETE`` - This
     * condition validates that a dependent container runs to completion (exits) before permitting other containers to
     * start. This can be useful for nonessential containers that run a script and then exit. This condition can't be
     * set on an essential container. + ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires
     * that the container exits with a ``zero`` status. This condition can't be set on an essential container. +
     * ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before
     * permitting other containers to start. This requires that the dependent container has health checks configured.
     * This condition is confirmed only at task startup.
     * 
     * @return the condition value.
     */
    public String condition() {
        return this.condition;
    }

    /**
     * Set the condition property: The dependency condition of the container. The following are the available conditions
     * and their behavior: + ``START`` - This condition emulates the behavior of links and volumes today. It validates
     * that a dependent container is started before permitting other containers to start. + ``COMPLETE`` - This
     * condition validates that a dependent container runs to completion (exits) before permitting other containers to
     * start. This can be useful for nonessential containers that run a script and then exit. This condition can't be
     * set on an essential container. + ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires
     * that the container exits with a ``zero`` status. This condition can't be set on an essential container. +
     * ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before
     * permitting other containers to start. This requires that the dependent container has health checks configured.
     * This condition is confirmed only at task startup.
     * 
     * @param condition the condition value to set.
     * @return the ContainerDependency object itself.
     */
    public ContainerDependency withCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the containerName property: The name of a container.
     * 
     * @return the containerName value.
     */
    public String containerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: The name of a container.
     * 
     * @param containerName the containerName value to set.
     * @return the ContainerDependency object itself.
     */
    public ContainerDependency withContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("condition", this.condition);
        jsonWriter.writeStringField("containerName", this.containerName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerDependency if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContainerDependency.
     */
    public static ContainerDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerDependency deserializedContainerDependency = new ContainerDependency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("condition".equals(fieldName)) {
                    deserializedContainerDependency.condition = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    deserializedContainerDependency.containerName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerDependency;
        });
    }
}
