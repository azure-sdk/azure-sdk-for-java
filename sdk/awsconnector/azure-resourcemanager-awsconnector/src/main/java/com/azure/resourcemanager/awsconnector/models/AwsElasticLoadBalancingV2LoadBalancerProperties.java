// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsElasticLoadBalancingV2LoadBalancer.
 */
@Fluent
public final class AwsElasticLoadBalancingV2LoadBalancerProperties
    implements JsonSerializable<AwsElasticLoadBalancingV2LoadBalancerProperties> {
    /*
     * Property canonicalHostedZoneID
     */
    private String canonicalHostedZoneId;

    /*
     * Property dnsName
     */
    private String dnsName;

    /*
     * Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through
     * privatelink.
     */
    private String enforceSecurityGroupInboundRulesOnPrivateLinkTraffic;

    /*
     * The IP address type. The possible values are ``ipv4`` (for IPv4 addresses) and ``dualstack`` (for IPv4 and IPv6
     * addresses). You can’t specify ``dualstack`` for a load balancer with a UDP or TCP_UDP listener.
     */
    private String ipAddressType;

    /*
     * Property loadBalancerArn
     */
    private String loadBalancerArn;

    /*
     * The load balancer attributes.
     */
    private List<LoadBalancerAttribute> loadBalancerAttributes;

    /*
     * Property loadBalancerFullName
     */
    private String loadBalancerFullName;

    /*
     * Property loadBalancerName
     */
    private String loadBalancerName;

    /*
     * The name of the load balancer. This name must be unique per region per account, can have a maximum of 32
     * characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must
     * not begin with 'internal-'. If you don't specify a name, AWS CloudFormation generates a unique physical ID for
     * the load balancer. If you specify a name, you cannot perform updates that require replacement of this resource,
     * but you can perform other updates. To replace the resource, specify a new name.
     */
    private String name;

    /*
     * The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load
     * balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load
     * balancers can route requests from clients over the internet. The nodes of an internal load balancer have only
     * private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP
     * addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to
     * the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a scheme for a
     * Gateway Load Balancer.
     */
    private String scheme;

    /*
     * [Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.
     */
    private List<String> securityGroups;

    /*
     * The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or
     * subnet mappings, but not both. [Application Load Balancers] You must specify subnets from at least two
     * Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Application Load Balancers on
     * Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify
     * subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more
     * Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your
     * internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet
     * from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per
     * subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify
     * Elastic IP addresses for your subnets.
     */
    private List<SubnetMapping> subnetMappings;

    /*
     * The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or
     * subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.
     * [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load
     * Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can
     * specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more
     * Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
     */
    private List<String> subnets;

    /*
     * The tags to assign to the load balancer.
     */
    private List<TagAutoGenerated29> tags;

    /*
     * The type of load balancer. The default is ``application``.
     */
    private String type;

    /**
     * Creates an instance of AwsElasticLoadBalancingV2LoadBalancerProperties class.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties() {
    }

    /**
     * Get the canonicalHostedZoneId property: Property canonicalHostedZoneID.
     * 
     * @return the canonicalHostedZoneId value.
     */
    public String canonicalHostedZoneId() {
        return this.canonicalHostedZoneId;
    }

    /**
     * Set the canonicalHostedZoneId property: Property canonicalHostedZoneID.
     * 
     * @param canonicalHostedZoneId the canonicalHostedZoneId value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withCanonicalHostedZoneId(String canonicalHostedZoneId) {
        this.canonicalHostedZoneId = canonicalHostedZoneId;
        return this;
    }

    /**
     * Get the dnsName property: Property dnsName.
     * 
     * @return the dnsName value.
     */
    public String dnsName() {
        return this.dnsName;
    }

    /**
     * Set the dnsName property: Property dnsName.
     * 
     * @param dnsName the dnsName value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withDnsName(String dnsName) {
        this.dnsName = dnsName;
        return this;
    }

    /**
     * Get the enforceSecurityGroupInboundRulesOnPrivateLinkTraffic property: Indicates whether to evaluate inbound
     * security group rules for traffic sent to a Network Load Balancer through privatelink.
     * 
     * @return the enforceSecurityGroupInboundRulesOnPrivateLinkTraffic value.
     */
    public String enforceSecurityGroupInboundRulesOnPrivateLinkTraffic() {
        return this.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic;
    }

    /**
     * Set the enforceSecurityGroupInboundRulesOnPrivateLinkTraffic property: Indicates whether to evaluate inbound
     * security group rules for traffic sent to a Network Load Balancer through privatelink.
     * 
     * @param enforceSecurityGroupInboundRulesOnPrivateLinkTraffic the
     * enforceSecurityGroupInboundRulesOnPrivateLinkTraffic value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withEnforceSecurityGroupInboundRulesOnPrivateLinkTraffic(
        String enforceSecurityGroupInboundRulesOnPrivateLinkTraffic) {
        this.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
            = enforceSecurityGroupInboundRulesOnPrivateLinkTraffic;
        return this;
    }

    /**
     * Get the ipAddressType property: The IP address type. The possible values are ``ipv4`` (for IPv4 addresses) and
     * ``dualstack`` (for IPv4 and IPv6 addresses). You can’t specify ``dualstack`` for a load balancer with a UDP or
     * TCP_UDP listener.
     * 
     * @return the ipAddressType value.
     */
    public String ipAddressType() {
        return this.ipAddressType;
    }

    /**
     * Set the ipAddressType property: The IP address type. The possible values are ``ipv4`` (for IPv4 addresses) and
     * ``dualstack`` (for IPv4 and IPv6 addresses). You can’t specify ``dualstack`` for a load balancer with a UDP or
     * TCP_UDP listener.
     * 
     * @param ipAddressType the ipAddressType value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withIpAddressType(String ipAddressType) {
        this.ipAddressType = ipAddressType;
        return this;
    }

    /**
     * Get the loadBalancerArn property: Property loadBalancerArn.
     * 
     * @return the loadBalancerArn value.
     */
    public String loadBalancerArn() {
        return this.loadBalancerArn;
    }

    /**
     * Set the loadBalancerArn property: Property loadBalancerArn.
     * 
     * @param loadBalancerArn the loadBalancerArn value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withLoadBalancerArn(String loadBalancerArn) {
        this.loadBalancerArn = loadBalancerArn;
        return this;
    }

    /**
     * Get the loadBalancerAttributes property: The load balancer attributes.
     * 
     * @return the loadBalancerAttributes value.
     */
    public List<LoadBalancerAttribute> loadBalancerAttributes() {
        return this.loadBalancerAttributes;
    }

    /**
     * Set the loadBalancerAttributes property: The load balancer attributes.
     * 
     * @param loadBalancerAttributes the loadBalancerAttributes value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties
        withLoadBalancerAttributes(List<LoadBalancerAttribute> loadBalancerAttributes) {
        this.loadBalancerAttributes = loadBalancerAttributes;
        return this;
    }

    /**
     * Get the loadBalancerFullName property: Property loadBalancerFullName.
     * 
     * @return the loadBalancerFullName value.
     */
    public String loadBalancerFullName() {
        return this.loadBalancerFullName;
    }

    /**
     * Set the loadBalancerFullName property: Property loadBalancerFullName.
     * 
     * @param loadBalancerFullName the loadBalancerFullName value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withLoadBalancerFullName(String loadBalancerFullName) {
        this.loadBalancerFullName = loadBalancerFullName;
        return this;
    }

    /**
     * Get the loadBalancerName property: Property loadBalancerName.
     * 
     * @return the loadBalancerName value.
     */
    public String loadBalancerName() {
        return this.loadBalancerName;
    }

    /**
     * Set the loadBalancerName property: Property loadBalancerName.
     * 
     * @param loadBalancerName the loadBalancerName value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withLoadBalancerName(String loadBalancerName) {
        this.loadBalancerName = loadBalancerName;
        return this;
    }

    /**
     * Get the name property: The name of the load balancer. This name must be unique per region per account, can have a
     * maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a
     * hyphen, and must not begin with 'internal-'. If you don't specify a name, AWS CloudFormation generates a unique
     * physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of
     * this resource, but you can perform other updates. To replace the resource, specify a new name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the load balancer. This name must be unique per region per account, can have a
     * maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a
     * hyphen, and must not begin with 'internal-'. If you don't specify a name, AWS CloudFormation generates a unique
     * physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of
     * this resource, but you can perform other updates. To replace the resource, specify a new name.
     * 
     * @param name the name value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the scheme property: The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of
     * an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore,
     * Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load
     * balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the
     * private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with
     * access to the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a
     * scheme for a Gateway Load Balancer.
     * 
     * @return the scheme value.
     */
    public String scheme() {
        return this.scheme;
    }

    /**
     * Set the scheme property: The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of
     * an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore,
     * Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load
     * balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the
     * private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with
     * access to the VPC for the load balancer. The default is an Internet-facing load balancer. You cannot specify a
     * scheme for a Gateway Load Balancer.
     * 
     * @param scheme the scheme value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withScheme(String scheme) {
        this.scheme = scheme;
        return this;
    }

    /**
     * Get the securityGroups property: [Application Load Balancers and Network Load Balancers] The IDs of the security
     * groups for the load balancer.
     * 
     * @return the securityGroups value.
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }

    /**
     * Set the securityGroups property: [Application Load Balancers and Network Load Balancers] The IDs of the security
     * groups for the load balancer.
     * 
     * @param securityGroups the securityGroups value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withSecurityGroups(List<String> securityGroups) {
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Get the subnetMappings property: The IDs of the subnets. You can specify only one subnet per Availability Zone.
     * You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify
     * subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.
     * [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on
     * Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify
     * subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static
     * IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP
     * address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6
     * address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You
     * cannot specify Elastic IP addresses for your subnets.
     * 
     * @return the subnetMappings value.
     */
    public List<SubnetMapping> subnetMappings() {
        return this.subnetMappings;
    }

    /**
     * Set the subnetMappings property: The IDs of the subnets. You can specify only one subnet per Availability Zone.
     * You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify
     * subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.
     * [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on
     * Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify
     * subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static
     * IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP
     * address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6
     * address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You
     * cannot specify Elastic IP addresses for your subnets.
     * 
     * @param subnetMappings the subnetMappings value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withSubnetMappings(List<SubnetMapping> subnetMappings) {
        this.subnetMappings = subnetMappings;
        return this;
    }

    /**
     * Get the subnets property: The IDs of the subnets. You can specify only one subnet per Availability Zone. You must
     * specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet
     * mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability
     * Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers
     * on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify
     * subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more
     * Availability Zones.
     * 
     * @return the subnets value.
     */
    public List<String> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: The IDs of the subnets. You can specify only one subnet per Availability Zone. You must
     * specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet
     * mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability
     * Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers
     * on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify
     * subnets from one or more Availability Zones. [Gateway Load Balancers] You can specify subnets from one or more
     * Availability Zones.
     * 
     * @param subnets the subnets value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withSubnets(List<String> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the tags property: The tags to assign to the load balancer.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated29> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags to assign to the load balancer.
     * 
     * @param tags the tags value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withTags(List<TagAutoGenerated29> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the type property: The type of load balancer. The default is ``application``.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of load balancer. The default is ``application``.
     * 
     * @param type the type value to set.
     * @return the AwsElasticLoadBalancingV2LoadBalancerProperties object itself.
     */
    public AwsElasticLoadBalancingV2LoadBalancerProperties withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loadBalancerAttributes() != null) {
            loadBalancerAttributes().forEach(e -> e.validate());
        }
        if (subnetMappings() != null) {
            subnetMappings().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("canonicalHostedZoneID", this.canonicalHostedZoneId);
        jsonWriter.writeStringField("dnsName", this.dnsName);
        jsonWriter.writeStringField("enforceSecurityGroupInboundRulesOnPrivateLinkTraffic",
            this.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic);
        jsonWriter.writeStringField("ipAddressType", this.ipAddressType);
        jsonWriter.writeStringField("loadBalancerArn", this.loadBalancerArn);
        jsonWriter.writeArrayField("loadBalancerAttributes", this.loadBalancerAttributes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("loadBalancerFullName", this.loadBalancerFullName);
        jsonWriter.writeStringField("loadBalancerName", this.loadBalancerName);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("scheme", this.scheme);
        jsonWriter.writeArrayField("securityGroups", this.securityGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subnetMappings", this.subnetMappings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsElasticLoadBalancingV2LoadBalancerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsElasticLoadBalancingV2LoadBalancerProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsElasticLoadBalancingV2LoadBalancerProperties.
     */
    public static AwsElasticLoadBalancingV2LoadBalancerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsElasticLoadBalancingV2LoadBalancerProperties deserializedAwsElasticLoadBalancingV2LoadBalancerProperties
                = new AwsElasticLoadBalancingV2LoadBalancerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("canonicalHostedZoneID".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.canonicalHostedZoneId
                        = reader.getString();
                } else if ("dnsName".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.dnsName = reader.getString();
                } else if ("enforceSecurityGroupInboundRulesOnPrivateLinkTraffic".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic
                        = reader.getString();
                } else if ("ipAddressType".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.ipAddressType = reader.getString();
                } else if ("loadBalancerArn".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.loadBalancerArn = reader.getString();
                } else if ("loadBalancerAttributes".equals(fieldName)) {
                    List<LoadBalancerAttribute> loadBalancerAttributes
                        = reader.readArray(reader1 -> LoadBalancerAttribute.fromJson(reader1));
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.loadBalancerAttributes
                        = loadBalancerAttributes;
                } else if ("loadBalancerFullName".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.loadBalancerFullName
                        = reader.getString();
                } else if ("loadBalancerName".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.loadBalancerName = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.name = reader.getString();
                } else if ("scheme".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.scheme = reader.getString();
                } else if ("securityGroups".equals(fieldName)) {
                    List<String> securityGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.securityGroups = securityGroups;
                } else if ("subnetMappings".equals(fieldName)) {
                    List<SubnetMapping> subnetMappings = reader.readArray(reader1 -> SubnetMapping.fromJson(reader1));
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.subnetMappings = subnetMappings;
                } else if ("subnets".equals(fieldName)) {
                    List<String> subnets = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.subnets = subnets;
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated29> tags = reader.readArray(reader1 -> TagAutoGenerated29.fromJson(reader1));
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.tags = tags;
                } else if ("type".equals(fieldName)) {
                    deserializedAwsElasticLoadBalancingV2LoadBalancerProperties.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsElasticLoadBalancingV2LoadBalancerProperties;
        });
    }
}
