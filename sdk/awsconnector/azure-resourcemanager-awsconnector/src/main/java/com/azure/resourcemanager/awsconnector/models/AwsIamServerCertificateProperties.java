// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsIamServerCertificate.
 */
@Fluent
public final class AwsIamServerCertificateProperties implements JsonSerializable<AwsIamServerCertificateProperties> {
    /*
     * Amazon Resource Name (ARN) of the server certificate
     */
    private String arn;

    /*
     * Property certificateBody
     */
    private String certificateBody;

    /*
     * Property certificateChain
     */
    private String certificateChain;

    /*
     * Property path
     */
    private String path;

    /*
     * Property privateKey
     */
    private String privateKey;

    /*
     * Property serverCertificateName
     */
    private String serverCertificateName;

    /*
     * Property tags
     */
    private List<TagAutoGenerated33> tags;

    /**
     * Creates an instance of AwsIamServerCertificateProperties class.
     */
    public AwsIamServerCertificateProperties() {
    }

    /**
     * Get the arn property: Amazon Resource Name (ARN) of the server certificate.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Amazon Resource Name (ARN) of the server certificate.
     * 
     * @param arn the arn value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the certificateBody property: Property certificateBody.
     * 
     * @return the certificateBody value.
     */
    public String certificateBody() {
        return this.certificateBody;
    }

    /**
     * Set the certificateBody property: Property certificateBody.
     * 
     * @param certificateBody the certificateBody value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withCertificateBody(String certificateBody) {
        this.certificateBody = certificateBody;
        return this;
    }

    /**
     * Get the certificateChain property: Property certificateChain.
     * 
     * @return the certificateChain value.
     */
    public String certificateChain() {
        return this.certificateChain;
    }

    /**
     * Set the certificateChain property: Property certificateChain.
     * 
     * @param certificateChain the certificateChain value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withCertificateChain(String certificateChain) {
        this.certificateChain = certificateChain;
        return this;
    }

    /**
     * Get the path property: Property path.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Property path.
     * 
     * @param path the path value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the privateKey property: Property privateKey.
     * 
     * @return the privateKey value.
     */
    public String privateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: Property privateKey.
     * 
     * @param privateKey the privateKey value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withPrivateKey(String privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Get the serverCertificateName property: Property serverCertificateName.
     * 
     * @return the serverCertificateName value.
     */
    public String serverCertificateName() {
        return this.serverCertificateName;
    }

    /**
     * Set the serverCertificateName property: Property serverCertificateName.
     * 
     * @param serverCertificateName the serverCertificateName value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withServerCertificateName(String serverCertificateName) {
        this.serverCertificateName = serverCertificateName;
        return this;
    }

    /**
     * Get the tags property: Property tags.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated33> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Property tags.
     * 
     * @param tags the tags value to set.
     * @return the AwsIamServerCertificateProperties object itself.
     */
    public AwsIamServerCertificateProperties withTags(List<TagAutoGenerated33> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("certificateBody", this.certificateBody);
        jsonWriter.writeStringField("certificateChain", this.certificateChain);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("privateKey", this.privateKey);
        jsonWriter.writeStringField("serverCertificateName", this.serverCertificateName);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamServerCertificateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamServerCertificateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamServerCertificateProperties.
     */
    public static AwsIamServerCertificateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamServerCertificateProperties deserializedAwsIamServerCertificateProperties
                = new AwsIamServerCertificateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsIamServerCertificateProperties.arn = reader.getString();
                } else if ("certificateBody".equals(fieldName)) {
                    deserializedAwsIamServerCertificateProperties.certificateBody = reader.getString();
                } else if ("certificateChain".equals(fieldName)) {
                    deserializedAwsIamServerCertificateProperties.certificateChain = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedAwsIamServerCertificateProperties.path = reader.getString();
                } else if ("privateKey".equals(fieldName)) {
                    deserializedAwsIamServerCertificateProperties.privateKey = reader.getString();
                } else if ("serverCertificateName".equals(fieldName)) {
                    deserializedAwsIamServerCertificateProperties.serverCertificateName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated33> tags = reader.readArray(reader1 -> TagAutoGenerated33.fromJson(reader1));
                    deserializedAwsIamServerCertificateProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamServerCertificateProperties;
        });
    }
}
