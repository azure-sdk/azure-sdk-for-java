// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of EndpointConfiguration.
 */
@Fluent
public final class EndpointConfiguration implements JsonSerializable<EndpointConfiguration> {
    /*
     * A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API
     * and its custom domain name, the endpoint type is ``'EDGE'``. For a regional API and its custom domain name, the
     * endpoint type is ``REGIONAL``. For a private API, the endpoint type is ``PRIVATE``.
     */
    private List<String> types;

    /*
     * A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for
     * ``PRIVATE`` endpoint type.
     */
    private List<String> vpcEndpointIds;

    /**
     * Creates an instance of EndpointConfiguration class.
     */
    public EndpointConfiguration() {
    }

    /**
     * Get the types property: A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For
     * an edge-optimized API and its custom domain name, the endpoint type is ``'EDGE'``. For a regional API and its
     * custom domain name, the endpoint type is ``REGIONAL``. For a private API, the endpoint type is ``PRIVATE``.
     * 
     * @return the types value.
     */
    public List<String> types() {
        return this.types;
    }

    /**
     * Set the types property: A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For
     * an edge-optimized API and its custom domain name, the endpoint type is ``'EDGE'``. For a regional API and its
     * custom domain name, the endpoint type is ``REGIONAL``. For a private API, the endpoint type is ``PRIVATE``.
     * 
     * @param types the types value to set.
     * @return the EndpointConfiguration object itself.
     */
    public EndpointConfiguration withTypes(List<String> types) {
        this.types = types;
        return this;
    }

    /**
     * Get the vpcEndpointIds property: A list of VpcEndpointIds of an API (RestApi) against which to create Route53
     * ALIASes. It is only supported for ``PRIVATE`` endpoint type.
     * 
     * @return the vpcEndpointIds value.
     */
    public List<String> vpcEndpointIds() {
        return this.vpcEndpointIds;
    }

    /**
     * Set the vpcEndpointIds property: A list of VpcEndpointIds of an API (RestApi) against which to create Route53
     * ALIASes. It is only supported for ``PRIVATE`` endpoint type.
     * 
     * @param vpcEndpointIds the vpcEndpointIds value to set.
     * @return the EndpointConfiguration object itself.
     */
    public EndpointConfiguration withVpcEndpointIds(List<String> vpcEndpointIds) {
        this.vpcEndpointIds = vpcEndpointIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("types", this.types, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vpcEndpointIds", this.vpcEndpointIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointConfiguration.
     */
    public static EndpointConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointConfiguration deserializedEndpointConfiguration = new EndpointConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("types".equals(fieldName)) {
                    List<String> types = reader.readArray(reader1 -> reader1.getString());
                    deserializedEndpointConfiguration.types = types;
                } else if ("vpcEndpointIds".equals(fieldName)) {
                    List<String> vpcEndpointIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedEndpointConfiguration.vpcEndpointIds = vpcEndpointIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointConfiguration;
        });
    }
}
