// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of VolumeFrom.
 */
@Fluent
public final class VolumeFrom implements JsonSerializable<VolumeFrom> {
    /*
     * If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the
     * container can write to the volume. The default value is ``false``.
     */
    private Boolean readOnly;

    /*
     * The name of another container within the same task definition to mount volumes from.
     */
    private String sourceContainer;

    /**
     * Creates an instance of VolumeFrom class.
     */
    public VolumeFrom() {
    }

    /**
     * Get the readOnly property: If this value is ``true``, the container has read-only access to the volume. If this
     * value is ``false``, then the container can write to the volume. The default value is ``false``.
     * 
     * @return the readOnly value.
     */
    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * Set the readOnly property: If this value is ``true``, the container has read-only access to the volume. If this
     * value is ``false``, then the container can write to the volume. The default value is ``false``.
     * 
     * @param readOnly the readOnly value to set.
     * @return the VolumeFrom object itself.
     */
    public VolumeFrom withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * Get the sourceContainer property: The name of another container within the same task definition to mount volumes
     * from.
     * 
     * @return the sourceContainer value.
     */
    public String sourceContainer() {
        return this.sourceContainer;
    }

    /**
     * Set the sourceContainer property: The name of another container within the same task definition to mount volumes
     * from.
     * 
     * @param sourceContainer the sourceContainer value to set.
     * @return the VolumeFrom object itself.
     */
    public VolumeFrom withSourceContainer(String sourceContainer) {
        this.sourceContainer = sourceContainer;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("readOnly", this.readOnly);
        jsonWriter.writeStringField("sourceContainer", this.sourceContainer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeFrom from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeFrom if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the VolumeFrom.
     */
    public static VolumeFrom fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeFrom deserializedVolumeFrom = new VolumeFrom();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("readOnly".equals(fieldName)) {
                    deserializedVolumeFrom.readOnly = reader.getNullable(JsonReader::getBoolean);
                } else if ("sourceContainer".equals(fieldName)) {
                    deserializedVolumeFrom.sourceContainer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeFrom;
        });
    }
}
