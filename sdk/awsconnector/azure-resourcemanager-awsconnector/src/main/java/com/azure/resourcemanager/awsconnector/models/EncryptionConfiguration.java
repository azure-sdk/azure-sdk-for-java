// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EncryptionConfiguration.
 */
@Fluent
public final class EncryptionConfiguration implements JsonSerializable<EncryptionConfiguration> {
    /*
     * The encryption type to use. If you use the ``KMS`` encryption type, the contents of the repository will be
     * encrypted using server-side encryption with KMSlong key stored in KMS. When you use KMS to encrypt your data, you
     * can either use the default AWS managed KMS key for Amazon ECR, or specify your own KMS key, which you already
     * created. For more information, see [Protecting data using server-side encryption with an key stored in
     * (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon Simple Storage
     * Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR uses server-side
     * encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256
     * encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon
     * S3-managed encryption keys
     * (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama The
     * encryption type to use.
     */
    private EncryptionConfigurationEncryptionType encryptionType;

    /*
     * If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The alias, key ID, or full ARN
     * of the KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified,
     * the default AWS managed KMS key for Amazon ECR will be used. If you use the KMS encryption type, specify the CMK
     * to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same
     * Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.
     */
    private String kmsKey;

    /**
     * Creates an instance of EncryptionConfiguration class.
     */
    public EncryptionConfiguration() {
    }

    /**
     * Get the encryptionType property: The encryption type to use. If you use the ``KMS`` encryption type, the contents
     * of the repository will be encrypted using server-side encryption with KMSlong key stored in KMS. When you use KMS
     * to encrypt your data, you can either use the default AWS managed KMS key for Amazon ECR, or specify your own KMS
     * key, which you already created. For more information, see [Protecting data using server-side encryption with an
     * key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon
     * Simple Storage Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR uses
     * server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using
     * an AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with
     * Amazon S3-managed encryption keys
     * (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama The
     * encryption type to use.
     * 
     * @return the encryptionType value.
     */
    public EncryptionConfigurationEncryptionType encryptionType() {
        return this.encryptionType;
    }

    /**
     * Set the encryptionType property: The encryption type to use. If you use the ``KMS`` encryption type, the contents
     * of the repository will be encrypted using server-side encryption with KMSlong key stored in KMS. When you use KMS
     * to encrypt your data, you can either use the default AWS managed KMS key for Amazon ECR, or specify your own KMS
     * key, which you already created. For more information, see [Protecting data using server-side encryption with an
     * key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon
     * Simple Storage Service Console Developer Guide*. If you use the ``AES256`` encryption type, Amazon ECR uses
     * server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using
     * an AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with
     * Amazon S3-managed encryption keys
     * (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama The
     * encryption type to use.
     * 
     * @param encryptionType the encryptionType value to set.
     * @return the EncryptionConfiguration object itself.
     */
    public EncryptionConfiguration withEncryptionType(EncryptionConfigurationEncryptionType encryptionType) {
        this.encryptionType = encryptionType;
        return this;
    }

    /**
     * Get the kmsKey property: If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The
     * alias, key ID, or full ARN of the KMS key can be specified. The key must exist in the same Region as the
     * repository. If no key is specified, the default AWS managed KMS key for Amazon ECR will be used. If you use the
     * KMS encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be
     * specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS
     * managed CMK for Amazon ECR will be used.
     * 
     * @return the kmsKey value.
     */
    public String kmsKey() {
        return this.kmsKey;
    }

    /**
     * Set the kmsKey property: If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The
     * alias, key ID, or full ARN of the KMS key can be specified. The key must exist in the same Region as the
     * repository. If no key is specified, the default AWS managed KMS key for Amazon ECR will be used. If you use the
     * KMS encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be
     * specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS
     * managed CMK for Amazon ECR will be used.
     * 
     * @param kmsKey the kmsKey value to set.
     * @return the EncryptionConfiguration object itself.
     */
    public EncryptionConfiguration withKmsKey(String kmsKey) {
        this.kmsKey = kmsKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("encryptionType",
            this.encryptionType == null ? null : this.encryptionType.toString());
        jsonWriter.writeStringField("kmsKey", this.kmsKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionConfiguration.
     */
    public static EncryptionConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionConfiguration deserializedEncryptionConfiguration = new EncryptionConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encryptionType".equals(fieldName)) {
                    deserializedEncryptionConfiguration.encryptionType
                        = EncryptionConfigurationEncryptionType.fromString(reader.getString());
                } else if ("kmsKey".equals(fieldName)) {
                    deserializedEncryptionConfiguration.kmsKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionConfiguration;
        });
    }
}
