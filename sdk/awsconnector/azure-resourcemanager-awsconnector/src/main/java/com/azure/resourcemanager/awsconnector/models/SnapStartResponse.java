// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SnapStartResponse.
 */
@Fluent
public final class SnapStartResponse implements JsonSerializable<SnapStartResponse> {
    /*
     * When set to ``PublishedVersions``, Lambda creates a snapshot of the execution environment when you publish a
     * function version.
     */
    private SnapStartResponseApplyOn applyOn;

    /*
     * When you provide a [qualified Amazon Resource Name
     * (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this
     * response element indicates whether SnapStart is activated for the specified function version.
     */
    private SnapStartResponseOptimizationStatus optimizationStatus;

    /**
     * Creates an instance of SnapStartResponse class.
     */
    public SnapStartResponse() {
    }

    /**
     * Get the applyOn property: When set to ``PublishedVersions``, Lambda creates a snapshot of the execution
     * environment when you publish a function version.
     * 
     * @return the applyOn value.
     */
    public SnapStartResponseApplyOn applyOn() {
        return this.applyOn;
    }

    /**
     * Set the applyOn property: When set to ``PublishedVersions``, Lambda creates a snapshot of the execution
     * environment when you publish a function version.
     * 
     * @param applyOn the applyOn value to set.
     * @return the SnapStartResponse object itself.
     */
    public SnapStartResponse withApplyOn(SnapStartResponseApplyOn applyOn) {
        this.applyOn = applyOn;
        return this;
    }

    /**
     * Get the optimizationStatus property: When you provide a [qualified Amazon Resource Name
     * (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this
     * response element indicates whether SnapStart is activated for the specified function version.
     * 
     * @return the optimizationStatus value.
     */
    public SnapStartResponseOptimizationStatus optimizationStatus() {
        return this.optimizationStatus;
    }

    /**
     * Set the optimizationStatus property: When you provide a [qualified Amazon Resource Name
     * (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this
     * response element indicates whether SnapStart is activated for the specified function version.
     * 
     * @param optimizationStatus the optimizationStatus value to set.
     * @return the SnapStartResponse object itself.
     */
    public SnapStartResponse withOptimizationStatus(SnapStartResponseOptimizationStatus optimizationStatus) {
        this.optimizationStatus = optimizationStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applyOn", this.applyOn == null ? null : this.applyOn.toString());
        jsonWriter.writeStringField("optimizationStatus",
            this.optimizationStatus == null ? null : this.optimizationStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnapStartResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapStartResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SnapStartResponse.
     */
    public static SnapStartResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnapStartResponse deserializedSnapStartResponse = new SnapStartResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applyOn".equals(fieldName)) {
                    deserializedSnapStartResponse.applyOn = SnapStartResponseApplyOn.fromString(reader.getString());
                } else if ("optimizationStatus".equals(fieldName)) {
                    deserializedSnapStartResponse.optimizationStatus
                        = SnapStartResponseOptimizationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapStartResponse;
        });
    }
}
