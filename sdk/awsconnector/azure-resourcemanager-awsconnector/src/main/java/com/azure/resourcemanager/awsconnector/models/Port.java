// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Port.
 */
@Fluent
public final class Port implements JsonSerializable<Port> {
    /*
     * Access Direction for Protocol of the Instance(inbound/outbound).
     */
    private String accessDirection;

    /*
     * Access From Protocol of the Instance.
     */
    private String accessFrom;

    /*
     * Access Type Protocol of the Instance.
     */
    private String accessType;

    /*
     * cidr List Aliases
     */
    private List<String> cidrListAliases;

    /*
     * Property cidrs
     */
    private List<String> cidrs;

    /*
     * CommonName for Protocol of the Instance.
     */
    private String commonName;

    /*
     * From Port of the Instance.
     */
    private Integer fromPort;

    /*
     * IPv6 Cidrs
     */
    private List<String> ipv6Cidrs;

    /*
     * Port Protocol of the Instance.
     */
    private String protocol;

    /*
     * To Port of the Instance.
     */
    private Integer toPort;

    /**
     * Creates an instance of Port class.
     */
    public Port() {
    }

    /**
     * Get the accessDirection property: Access Direction for Protocol of the Instance(inbound/outbound).
     * 
     * @return the accessDirection value.
     */
    public String accessDirection() {
        return this.accessDirection;
    }

    /**
     * Set the accessDirection property: Access Direction for Protocol of the Instance(inbound/outbound).
     * 
     * @param accessDirection the accessDirection value to set.
     * @return the Port object itself.
     */
    public Port withAccessDirection(String accessDirection) {
        this.accessDirection = accessDirection;
        return this;
    }

    /**
     * Get the accessFrom property: Access From Protocol of the Instance.
     * 
     * @return the accessFrom value.
     */
    public String accessFrom() {
        return this.accessFrom;
    }

    /**
     * Set the accessFrom property: Access From Protocol of the Instance.
     * 
     * @param accessFrom the accessFrom value to set.
     * @return the Port object itself.
     */
    public Port withAccessFrom(String accessFrom) {
        this.accessFrom = accessFrom;
        return this;
    }

    /**
     * Get the accessType property: Access Type Protocol of the Instance.
     * 
     * @return the accessType value.
     */
    public String accessType() {
        return this.accessType;
    }

    /**
     * Set the accessType property: Access Type Protocol of the Instance.
     * 
     * @param accessType the accessType value to set.
     * @return the Port object itself.
     */
    public Port withAccessType(String accessType) {
        this.accessType = accessType;
        return this;
    }

    /**
     * Get the cidrListAliases property: cidr List Aliases.
     * 
     * @return the cidrListAliases value.
     */
    public List<String> cidrListAliases() {
        return this.cidrListAliases;
    }

    /**
     * Set the cidrListAliases property: cidr List Aliases.
     * 
     * @param cidrListAliases the cidrListAliases value to set.
     * @return the Port object itself.
     */
    public Port withCidrListAliases(List<String> cidrListAliases) {
        this.cidrListAliases = cidrListAliases;
        return this;
    }

    /**
     * Get the cidrs property: Property cidrs.
     * 
     * @return the cidrs value.
     */
    public List<String> cidrs() {
        return this.cidrs;
    }

    /**
     * Set the cidrs property: Property cidrs.
     * 
     * @param cidrs the cidrs value to set.
     * @return the Port object itself.
     */
    public Port withCidrs(List<String> cidrs) {
        this.cidrs = cidrs;
        return this;
    }

    /**
     * Get the commonName property: CommonName for Protocol of the Instance.
     * 
     * @return the commonName value.
     */
    public String commonName() {
        return this.commonName;
    }

    /**
     * Set the commonName property: CommonName for Protocol of the Instance.
     * 
     * @param commonName the commonName value to set.
     * @return the Port object itself.
     */
    public Port withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }

    /**
     * Get the fromPort property: From Port of the Instance.
     * 
     * @return the fromPort value.
     */
    public Integer fromPort() {
        return this.fromPort;
    }

    /**
     * Set the fromPort property: From Port of the Instance.
     * 
     * @param fromPort the fromPort value to set.
     * @return the Port object itself.
     */
    public Port withFromPort(Integer fromPort) {
        this.fromPort = fromPort;
        return this;
    }

    /**
     * Get the ipv6Cidrs property: IPv6 Cidrs.
     * 
     * @return the ipv6Cidrs value.
     */
    public List<String> ipv6Cidrs() {
        return this.ipv6Cidrs;
    }

    /**
     * Set the ipv6Cidrs property: IPv6 Cidrs.
     * 
     * @param ipv6Cidrs the ipv6Cidrs value to set.
     * @return the Port object itself.
     */
    public Port withIpv6Cidrs(List<String> ipv6Cidrs) {
        this.ipv6Cidrs = ipv6Cidrs;
        return this;
    }

    /**
     * Get the protocol property: Port Protocol of the Instance.
     * 
     * @return the protocol value.
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Port Protocol of the Instance.
     * 
     * @param protocol the protocol value to set.
     * @return the Port object itself.
     */
    public Port withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the toPort property: To Port of the Instance.
     * 
     * @return the toPort value.
     */
    public Integer toPort() {
        return this.toPort;
    }

    /**
     * Set the toPort property: To Port of the Instance.
     * 
     * @param toPort the toPort value to set.
     * @return the Port object itself.
     */
    public Port withToPort(Integer toPort) {
        this.toPort = toPort;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessDirection", this.accessDirection);
        jsonWriter.writeStringField("accessFrom", this.accessFrom);
        jsonWriter.writeStringField("accessType", this.accessType);
        jsonWriter.writeArrayField("cidrListAliases", this.cidrListAliases,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("cidrs", this.cidrs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("commonName", this.commonName);
        jsonWriter.writeNumberField("fromPort", this.fromPort);
        jsonWriter.writeArrayField("ipv6Cidrs", this.ipv6Cidrs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("protocol", this.protocol);
        jsonWriter.writeNumberField("toPort", this.toPort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Port from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Port if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Port.
     */
    public static Port fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Port deserializedPort = new Port();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessDirection".equals(fieldName)) {
                    deserializedPort.accessDirection = reader.getString();
                } else if ("accessFrom".equals(fieldName)) {
                    deserializedPort.accessFrom = reader.getString();
                } else if ("accessType".equals(fieldName)) {
                    deserializedPort.accessType = reader.getString();
                } else if ("cidrListAliases".equals(fieldName)) {
                    List<String> cidrListAliases = reader.readArray(reader1 -> reader1.getString());
                    deserializedPort.cidrListAliases = cidrListAliases;
                } else if ("cidrs".equals(fieldName)) {
                    List<String> cidrs = reader.readArray(reader1 -> reader1.getString());
                    deserializedPort.cidrs = cidrs;
                } else if ("commonName".equals(fieldName)) {
                    deserializedPort.commonName = reader.getString();
                } else if ("fromPort".equals(fieldName)) {
                    deserializedPort.fromPort = reader.getNullable(JsonReader::getInt);
                } else if ("ipv6Cidrs".equals(fieldName)) {
                    List<String> ipv6Cidrs = reader.readArray(reader1 -> reader1.getString());
                    deserializedPort.ipv6Cidrs = ipv6Cidrs;
                } else if ("protocol".equals(fieldName)) {
                    deserializedPort.protocol = reader.getString();
                } else if ("toPort".equals(fieldName)) {
                    deserializedPort.toPort = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPort;
        });
    }
}
