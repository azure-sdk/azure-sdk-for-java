// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEcsTaskDefinition.
 */
@Fluent
public final class AwsEcsTaskDefinitionProperties implements JsonSerializable<AwsEcsTaskDefinitionProperties> {
    /*
     * A list of container definitions in JSON format that describe the different containers that make up your task. For
     * more information about container definition parameters and defaults, see [Amazon ECS Task
     * Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private List<ContainerDefinition> containerDefinitions;

    /*
     * The number of ``cpu`` units used by the task. If you use the EC2 launch type, this field is optional. Any value
     * can be used. If you use the Fargate launch type, this field is required. You must use one of the following
     * values. The value that you choose determines your range of valid values for the ``memory`` parameter. The CPU
     * units cannot be less than 1 vCPU when you use Windows containers on Fargate. + 256 (.25 vCPU) - Available
     * ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) + 512 (.5 vCPU) - Available ``memory`` values: 1024 (1
     * GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) + 1024 (1 vCPU) - Available ``memory`` values: 2048 (2 GB), 3072 (3
     * GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) + 2048 (2 vCPU) - Available ``memory``
     * values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) + 4096 (4 vCPU) - Available ``memory`` values:
     * 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) + 8192 (8 vCPU) - Available ``memory`` values: 16 GB
     * and 60 GB in 4 GB increments This option requires Linux platform ``1.4.0`` or later. + 16384 (16vCPU) - Available
     * ``memory`` values: 32GB and 120 GB in 8 GB increments This option requires Linux platform ``1.4.0`` or later.
     */
    private String cpu;

    /*
     * The ephemeral storage settings to use for tasks run with the task definition. The amount of ephemeral storage to
     * allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond
     * the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS
     * Developer Guide;*. For tasks using the Fargate launch type, the task requires the following platforms: + Linux
     * platform version ``1.4.0`` or later. + Windows platform version ``1.0.0`` or later.
     */
    private EphemeralStorage ephemeralStorage;

    /*
     * The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission
     * to make AWS API calls on your behalf. The task execution IAM role is required depending on the requirements of
     * your task. For more information, see [Amazon ECS task execution IAM
     * role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private String executionRoleArn;

    /*
     * The name of a family that this task definition is registered to. Up to 255 letters (uppercase and lowercase),
     * numbers, hyphens, and underscores are allowed. A family groups multiple versions of a task definition. Amazon ECS
     * gives the first task definition that you registered to a family a revision number of 1. Amazon ECS gives
     * sequential revision numbers to each task definition that you add. To use revision numbers when you update a task
     * definition, specify this property. If you don't specify a value, CFNlong generates a new task definition each
     * time that you update it.
     */
    private String family;

    /*
     * The Elastic Inference accelerators to use for the containers in the task.
     */
    private List<InferenceAccelerator> inferenceAccelerators;

    /*
     * The IPC resource namespace to use for the containers in the task. The valid values are ``host``, ``task``, or
     * ``none``. If ``host`` is specified, then all containers within the tasks that specified the ``host`` IPC mode on
     * the same container instance share the same IPC resources with the host Amazon EC2 instance. If ``task`` is
     * specified, all containers within the specified task share the same IPC resources. If ``none`` is specified, then
     * IPC resources within the containers of a task are private and not shared with other containers in a task or on
     * the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker
     * daemon setting on the container instance. For more information, see [IPC
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the
     * *Docker run reference*. If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired
     * IPC namespace expose. For more information, see [Docker
     * security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/). If you are setting
     * namespaced kernel parameters using ``systemControls`` for the containers in the task, the following will apply to
     * your IPC resource namespace. For more information, see [System
     * Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the
     * *Amazon Elastic Container Service Developer Guide*. + For tasks that use the ``host`` IPC mode, IPC namespace
     * related ``systemControls`` are not supported. + For tasks that use the ``task`` IPC mode, IPC namespace related
     * ``systemControls`` will apply to all containers within a task. This parameter is not supported for Windows
     * containers or tasks run on FARGATElong.
     */
    private String ipcMode;

    /*
     * The amount (in MiB) of memory used by the task. If your tasks runs on Amazon EC2 instances, you must specify
     * either a task-level memory value or a container-level memory value. This field is optional and any value can be
     * used. If a task-level memory value is specified, the container-level memory value is optional. For more
     * information regarding container-level memory and memory reservation, see
     * [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html). If
     * your tasks runs on FARGATElong, this field is required. You must use one of the following values. The value you
     * choose determines your range of valid values for the ``cpu`` parameter. + 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
     * - Available ``cpu`` values: 256 (.25 vCPU) + 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
     * ``cpu`` values: 512 (.5 vCPU) + 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB),
     * 8192 (8 GB) - Available ``cpu`` values: 1024 (1 vCPU) + Between 4096 (4 GB) and 16384 (16 GB) in increments of
     * 1024 (1 GB) - Available ``cpu`` values: 2048 (2 vCPU) + Between 8192 (8 GB) and 30720 (30 GB) in increments of
     * 1024 (1 GB) - Available ``cpu`` values: 4096 (4 vCPU) + Between 16 GB and 60 GB in 4 GB increments - Available
     * ``cpu`` values: 8192 (8 vCPU) This option requires Linux platform ``1.4.0`` or later. + Between 32GB and 120 GB
     * in 8 GB increments - Available ``cpu`` values: 16384 (16 vCPU) This option requires Linux platform ``1.4.0`` or
     * later.
     */
    private String memory;

    /*
     * The Docker networking mode to use for the containers in the task. The valid values are ``none``, ``bridge``,
     * ``awsvpc``, and ``host``. If no network mode is specified, the default is ``bridge``. For Amazon ECS tasks on
     * Fargate, the ``awsvpc`` network mode is required. For Amazon ECS tasks on Amazon EC2 Linux instances, any network
     * mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances, ``<default>`` or ``awsvpc`` can be used.
     * If the network mode is set to ``none``, you cannot specify port mappings in your container definitions, and the
     * tasks containers do not have external connectivity. The ``host`` and ``awsvpc`` network modes offer the highest
     * networking performance for containers because they use the EC2 network stack instead of the virtualized network
     * stack provided by the ``bridge`` mode. With the ``host`` and ``awsvpc`` network modes, exposed container ports
     * are mapped directly to the corresponding host port (for the ``host`` network mode) or the attached elastic
     * network interface port (for the ``awsvpc`` network mode), so you cannot take advantage of dynamic host port
     * mappings. When using the ``host`` network mode, you should not run containers using the root user (UID 0). It is
     * considered best practice to use a non-root user. If the network mode is ``awsvpc``, the task is allocated an
     * elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a
     * task with the task definition. For more information, see [Task
     * Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon
     * Elastic Container Service Developer Guide*. If the network mode is ``host``, you cannot run multiple
     * instantiations of the same task on a single container instance when port mappings are used. For more information,
     * see [Network
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#network-settings) in the
     * *Docker run reference*.
     */
    private String networkMode;

    /*
     * The process namespace to use for the containers in the task. The valid values are ``host`` or ``task``. On
     * Fargate for Linux containers, the only valid value is ``task``. For example, monitoring sidecars might need
     * ``pidMode`` to access information about other containers running in the same task. If ``host`` is specified, all
     * containers within the tasks that specified the ``host`` PID mode on the same container instance share the same
     * process namespace with the host Amazon EC2 instance. If ``task`` is specified, all containers within the
     * specified task share the same process namespace. If no value is specified, the default is a private namespace for
     * each container. For more information, see [PID
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the
     * *Docker run reference*. If the ``host`` PID mode is used, there's a heightened risk of undesired process
     * namespace exposure. For more information, see [Docker
     * security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/). This parameter is not
     * supported for Windows containers. This parameter is only supported for tasks that are hosted on FARGATElong if
     * the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on
     * Fargate.
     */
    private String pidMode;

    /*
     * An array of placement constraint objects to use for tasks. This parameter isn't supported for tasks run on
     * FARGATElong.
     */
    private List<TaskDefinitionPlacementConstraint> placementConstraints;

    /*
     * The configuration details for the App Mesh proxy. Your Amazon ECS container instances require at least version
     * 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy
     * configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or
     * later, they contain the required versions of the container agent and ``ecs-init``. For more information, see
     * [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The configuration details for the App Mesh proxy. For tasks that use the EC2
     * launch type, the container instances require at least version 1.26.0 of the container agent and at least version
     * 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from
     * the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the
     * container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
     */
    private ProxyConfiguration proxyConfiguration;

    /*
     * The task launch types the task definition was validated against. The valid values are ``EC2``, ``FARGATE``, and
     * ``EXTERNAL``. For more information, see [Amazon ECS launch
     * types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     */
    private List<String> requiresCompatibilities;

    /*
     * The operating system that your tasks definitions run on. A platform family is specified only for tasks using the
     * Fargate launch type. When you specify a task definition in a service, this value must match the
     * ``runtimePlatform`` value of the service. Information about the platform for the Amazon ECS service or task. For
     * more information about ``RuntimePlatform``, see
     * [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#
     * runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
     */
    private RuntimePlatform runtimePlatform;

    /*
     * The metadata that you apply to the task definition to help you categorize and organize them. Each tag consists of
     * a key and an optional value. You define both of them. The following basic restrictions apply to tags: + Maximum
     * number of tags per resource - 50 + For each resource, each tag key must be unique, and each tag key can have only
     * one value. + Maximum key length - 128 Unicode characters in UTF-8 + Maximum value length - 256 Unicode characters
     * in UTF-8 + If your tagging schema is used across multiple services and resources, remember that other services
     * may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces
     * representable in UTF-8, and the following characters: + - = . _ : / @. + Tag keys and values are case-sensitive.
     * + Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or
     * values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with
     * this prefix do not count against your tags per resource limit.
     */
    private List<TagAutoGenerated27> tags;

    /*
     * Property taskDefinitionArn
     */
    private String taskDefinitionArn;

    /*
     * The short name or full Amazon Resource Name (ARN) of the IAMlong role that grants containers in the task
     * permission to call AWS APIs on your behalf. For more information, see [Amazon ECS Task
     * Role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic
     * Container Service Developer Guide*. IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option
     * is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration
     * code to use the feature. For more information, see [Windows IAM roles for
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private String taskRoleArn;

    /*
     * The list of data volume definitions for the task. For more information, see [Using data volumes in
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon
     * Elastic Container Service Developer Guide*. The ``host`` and ``sourcePath`` parameters aren't supported for tasks
     * run on FARGATElong.
     */
    private List<Volume> volumes;

    /**
     * Creates an instance of AwsEcsTaskDefinitionProperties class.
     */
    public AwsEcsTaskDefinitionProperties() {
    }

    /**
     * Get the containerDefinitions property: A list of container definitions in JSON format that describe the different
     * containers that make up your task. For more information about container definition parameters and defaults, see
     * [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html)
     * in the *Amazon Elastic Container Service Developer Guide*.
     * 
     * @return the containerDefinitions value.
     */
    public List<ContainerDefinition> containerDefinitions() {
        return this.containerDefinitions;
    }

    /**
     * Set the containerDefinitions property: A list of container definitions in JSON format that describe the different
     * containers that make up your task. For more information about container definition parameters and defaults, see
     * [Amazon ECS Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html)
     * in the *Amazon Elastic Container Service Developer Guide*.
     * 
     * @param containerDefinitions the containerDefinitions value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withContainerDefinitions(List<ContainerDefinition> containerDefinitions) {
        this.containerDefinitions = containerDefinitions;
        return this;
    }

    /**
     * Get the cpu property: The number of ``cpu`` units used by the task. If you use the EC2 launch type, this field is
     * optional. Any value can be used. If you use the Fargate launch type, this field is required. You must use one of
     * the following values. The value that you choose determines your range of valid values for the ``memory``
     * parameter. The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate. + 256 (.25 vCPU)
     * - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) + 512 (.5 vCPU) - Available ``memory``
     * values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) + 1024 (1 vCPU) - Available ``memory`` values: 2048 (2
     * GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) + 2048 (2 vCPU) - Available
     * ``memory`` values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) + 4096 (4 vCPU) - Available
     * ``memory`` values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) + 8192 (8 vCPU) - Available
     * ``memory`` values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform ``1.4.0`` or later. +
     * 16384 (16vCPU) - Available ``memory`` values: 32GB and 120 GB in 8 GB increments This option requires Linux
     * platform ``1.4.0`` or later.
     * 
     * @return the cpu value.
     */
    public String cpu() {
        return this.cpu;
    }

    /**
     * Set the cpu property: The number of ``cpu`` units used by the task. If you use the EC2 launch type, this field is
     * optional. Any value can be used. If you use the Fargate launch type, this field is required. You must use one of
     * the following values. The value that you choose determines your range of valid values for the ``memory``
     * parameter. The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate. + 256 (.25 vCPU)
     * - Available ``memory`` values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) + 512 (.5 vCPU) - Available ``memory``
     * values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) + 1024 (1 vCPU) - Available ``memory`` values: 2048 (2
     * GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) + 2048 (2 vCPU) - Available
     * ``memory`` values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) + 4096 (4 vCPU) - Available
     * ``memory`` values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) + 8192 (8 vCPU) - Available
     * ``memory`` values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform ``1.4.0`` or later. +
     * 16384 (16vCPU) - Available ``memory`` values: 32GB and 120 GB in 8 GB increments This option requires Linux
     * platform ``1.4.0`` or later.
     * 
     * @param cpu the cpu value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withCpu(String cpu) {
        this.cpu = cpu;
        return this;
    }

    /**
     * Get the ephemeralStorage property: The ephemeral storage settings to use for tasks run with the task definition.
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of
     * ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information,
     * see [Using data volumes in
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS
     * Developer Guide;*. For tasks using the Fargate launch type, the task requires the following platforms: + Linux
     * platform version ``1.4.0`` or later. + Windows platform version ``1.0.0`` or later.
     * 
     * @return the ephemeralStorage value.
     */
    public EphemeralStorage ephemeralStorage() {
        return this.ephemeralStorage;
    }

    /**
     * Set the ephemeralStorage property: The ephemeral storage settings to use for tasks run with the task definition.
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of
     * ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information,
     * see [Using data volumes in
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS
     * Developer Guide;*. For tasks using the Fargate launch type, the task requires the following platforms: + Linux
     * platform version ``1.4.0`` or later. + Windows platform version ``1.0.0`` or later.
     * 
     * @param ephemeralStorage the ephemeralStorage value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withEphemeralStorage(EphemeralStorage ephemeralStorage) {
        this.ephemeralStorage = ephemeralStorage;
        return this;
    }

    /**
     * Get the executionRoleArn property: The Amazon Resource Name (ARN) of the task execution role that grants the
     * Amazon ECS container agent permission to make AWS API calls on your behalf. The task execution IAM role is
     * required depending on the requirements of your task. For more information, see [Amazon ECS task execution IAM
     * role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @return the executionRoleArn value.
     */
    public String executionRoleArn() {
        return this.executionRoleArn;
    }

    /**
     * Set the executionRoleArn property: The Amazon Resource Name (ARN) of the task execution role that grants the
     * Amazon ECS container agent permission to make AWS API calls on your behalf. The task execution IAM role is
     * required depending on the requirements of your task. For more information, see [Amazon ECS task execution IAM
     * role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @param executionRoleArn the executionRoleArn value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withExecutionRoleArn(String executionRoleArn) {
        this.executionRoleArn = executionRoleArn;
        return this;
    }

    /**
     * Get the family property: The name of a family that this task definition is registered to. Up to 255 letters
     * (uppercase and lowercase), numbers, hyphens, and underscores are allowed. A family groups multiple versions of a
     * task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of
     * 1. Amazon ECS gives sequential revision numbers to each task definition that you add. To use revision numbers
     * when you update a task definition, specify this property. If you don't specify a value, CFNlong generates a new
     * task definition each time that you update it.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: The name of a family that this task definition is registered to. Up to 255 letters
     * (uppercase and lowercase), numbers, hyphens, and underscores are allowed. A family groups multiple versions of a
     * task definition. Amazon ECS gives the first task definition that you registered to a family a revision number of
     * 1. Amazon ECS gives sequential revision numbers to each task definition that you add. To use revision numbers
     * when you update a task definition, specify this property. If you don't specify a value, CFNlong generates a new
     * task definition each time that you update it.
     * 
     * @param family the family value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the inferenceAccelerators property: The Elastic Inference accelerators to use for the containers in the task.
     * 
     * @return the inferenceAccelerators value.
     */
    public List<InferenceAccelerator> inferenceAccelerators() {
        return this.inferenceAccelerators;
    }

    /**
     * Set the inferenceAccelerators property: The Elastic Inference accelerators to use for the containers in the task.
     * 
     * @param inferenceAccelerators the inferenceAccelerators value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withInferenceAccelerators(List<InferenceAccelerator> inferenceAccelerators) {
        this.inferenceAccelerators = inferenceAccelerators;
        return this;
    }

    /**
     * Get the ipcMode property: The IPC resource namespace to use for the containers in the task. The valid values are
     * ``host``, ``task``, or ``none``. If ``host`` is specified, then all containers within the tasks that specified
     * the ``host`` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2
     * instance. If ``task`` is specified, all containers within the specified task share the same IPC resources. If
     * ``none`` is specified, then IPC resources within the containers of a task are private and not shared with other
     * containers in a task or on the container instance. If no value is specified, then the IPC resource namespace
     * sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the
     * *Docker run reference*. If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired
     * IPC namespace expose. For more information, see [Docker
     * security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/). If you are setting
     * namespaced kernel parameters using ``systemControls`` for the containers in the task, the following will apply to
     * your IPC resource namespace. For more information, see [System
     * Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the
     * *Amazon Elastic Container Service Developer Guide*. + For tasks that use the ``host`` IPC mode, IPC namespace
     * related ``systemControls`` are not supported. + For tasks that use the ``task`` IPC mode, IPC namespace related
     * ``systemControls`` will apply to all containers within a task. This parameter is not supported for Windows
     * containers or tasks run on FARGATElong.
     * 
     * @return the ipcMode value.
     */
    public String ipcMode() {
        return this.ipcMode;
    }

    /**
     * Set the ipcMode property: The IPC resource namespace to use for the containers in the task. The valid values are
     * ``host``, ``task``, or ``none``. If ``host`` is specified, then all containers within the tasks that specified
     * the ``host`` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2
     * instance. If ``task`` is specified, all containers within the specified task share the same IPC resources. If
     * ``none`` is specified, then IPC resources within the containers of a task are private and not shared with other
     * containers in a task or on the container instance. If no value is specified, then the IPC resource namespace
     * sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the
     * *Docker run reference*. If the ``host`` IPC mode is used, be aware that there is a heightened risk of undesired
     * IPC namespace expose. For more information, see [Docker
     * security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/). If you are setting
     * namespaced kernel parameters using ``systemControls`` for the containers in the task, the following will apply to
     * your IPC resource namespace. For more information, see [System
     * Controls](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) in the
     * *Amazon Elastic Container Service Developer Guide*. + For tasks that use the ``host`` IPC mode, IPC namespace
     * related ``systemControls`` are not supported. + For tasks that use the ``task`` IPC mode, IPC namespace related
     * ``systemControls`` will apply to all containers within a task. This parameter is not supported for Windows
     * containers or tasks run on FARGATElong.
     * 
     * @param ipcMode the ipcMode value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withIpcMode(String ipcMode) {
        this.ipcMode = ipcMode;
        return this;
    }

    /**
     * Get the memory property: The amount (in MiB) of memory used by the task. If your tasks runs on Amazon EC2
     * instances, you must specify either a task-level memory value or a container-level memory value. This field is
     * optional and any value can be used. If a task-level memory value is specified, the container-level memory value
     * is optional. For more information regarding container-level memory and memory reservation, see
     * [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html). If
     * your tasks runs on FARGATElong, this field is required. You must use one of the following values. The value you
     * choose determines your range of valid values for the ``cpu`` parameter. + 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
     * - Available ``cpu`` values: 256 (.25 vCPU) + 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
     * ``cpu`` values: 512 (.5 vCPU) + 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB),
     * 8192 (8 GB) - Available ``cpu`` values: 1024 (1 vCPU) + Between 4096 (4 GB) and 16384 (16 GB) in increments of
     * 1024 (1 GB) - Available ``cpu`` values: 2048 (2 vCPU) + Between 8192 (8 GB) and 30720 (30 GB) in increments of
     * 1024 (1 GB) - Available ``cpu`` values: 4096 (4 vCPU) + Between 16 GB and 60 GB in 4 GB increments - Available
     * ``cpu`` values: 8192 (8 vCPU) This option requires Linux platform ``1.4.0`` or later. + Between 32GB and 120 GB
     * in 8 GB increments - Available ``cpu`` values: 16384 (16 vCPU) This option requires Linux platform ``1.4.0`` or
     * later.
     * 
     * @return the memory value.
     */
    public String memory() {
        return this.memory;
    }

    /**
     * Set the memory property: The amount (in MiB) of memory used by the task. If your tasks runs on Amazon EC2
     * instances, you must specify either a task-level memory value or a container-level memory value. This field is
     * optional and any value can be used. If a task-level memory value is specified, the container-level memory value
     * is optional. For more information regarding container-level memory and memory reservation, see
     * [ContainerDefinition](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html). If
     * your tasks runs on FARGATElong, this field is required. You must use one of the following values. The value you
     * choose determines your range of valid values for the ``cpu`` parameter. + 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
     * - Available ``cpu`` values: 256 (.25 vCPU) + 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
     * ``cpu`` values: 512 (.5 vCPU) + 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB),
     * 8192 (8 GB) - Available ``cpu`` values: 1024 (1 vCPU) + Between 4096 (4 GB) and 16384 (16 GB) in increments of
     * 1024 (1 GB) - Available ``cpu`` values: 2048 (2 vCPU) + Between 8192 (8 GB) and 30720 (30 GB) in increments of
     * 1024 (1 GB) - Available ``cpu`` values: 4096 (4 vCPU) + Between 16 GB and 60 GB in 4 GB increments - Available
     * ``cpu`` values: 8192 (8 vCPU) This option requires Linux platform ``1.4.0`` or later. + Between 32GB and 120 GB
     * in 8 GB increments - Available ``cpu`` values: 16384 (16 vCPU) This option requires Linux platform ``1.4.0`` or
     * later.
     * 
     * @param memory the memory value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withMemory(String memory) {
        this.memory = memory;
        return this;
    }

    /**
     * Get the networkMode property: The Docker networking mode to use for the containers in the task. The valid values
     * are ``none``, ``bridge``, ``awsvpc``, and ``host``. If no network mode is specified, the default is ``bridge``.
     * For Amazon ECS tasks on Fargate, the ``awsvpc`` network mode is required. For Amazon ECS tasks on Amazon EC2
     * Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances,
     * ``&lt;default&gt;`` or ``awsvpc`` can be used. If the network mode is set to ``none``, you cannot specify port
     * mappings in your container definitions, and the tasks containers do not have external connectivity. The ``host``
     * and ``awsvpc`` network modes offer the highest networking performance for containers because they use the EC2
     * network stack instead of the virtualized network stack provided by the ``bridge`` mode. With the ``host`` and
     * ``awsvpc`` network modes, exposed container ports are mapped directly to the corresponding host port (for the
     * ``host`` network mode) or the attached elastic network interface port (for the ``awsvpc`` network mode), so you
     * cannot take advantage of dynamic host port mappings. When using the ``host`` network mode, you should not run
     * containers using the root user (UID 0). It is considered best practice to use a non-root user. If the network
     * mode is ``awsvpc``, the task is allocated an elastic network interface, and you must specify a
     * NetworkConfiguration value when you create a service or run a task with the task definition. For more
     * information, see [Task
     * Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon
     * Elastic Container Service Developer Guide*. If the network mode is ``host``, you cannot run multiple
     * instantiations of the same task on a single container instance when port mappings are used. For more information,
     * see [Network
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#network-settings) in the
     * *Docker run reference*.
     * 
     * @return the networkMode value.
     */
    public String networkMode() {
        return this.networkMode;
    }

    /**
     * Set the networkMode property: The Docker networking mode to use for the containers in the task. The valid values
     * are ``none``, ``bridge``, ``awsvpc``, and ``host``. If no network mode is specified, the default is ``bridge``.
     * For Amazon ECS tasks on Fargate, the ``awsvpc`` network mode is required. For Amazon ECS tasks on Amazon EC2
     * Linux instances, any network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows instances,
     * ``&lt;default&gt;`` or ``awsvpc`` can be used. If the network mode is set to ``none``, you cannot specify port
     * mappings in your container definitions, and the tasks containers do not have external connectivity. The ``host``
     * and ``awsvpc`` network modes offer the highest networking performance for containers because they use the EC2
     * network stack instead of the virtualized network stack provided by the ``bridge`` mode. With the ``host`` and
     * ``awsvpc`` network modes, exposed container ports are mapped directly to the corresponding host port (for the
     * ``host`` network mode) or the attached elastic network interface port (for the ``awsvpc`` network mode), so you
     * cannot take advantage of dynamic host port mappings. When using the ``host`` network mode, you should not run
     * containers using the root user (UID 0). It is considered best practice to use a non-root user. If the network
     * mode is ``awsvpc``, the task is allocated an elastic network interface, and you must specify a
     * NetworkConfiguration value when you create a service or run a task with the task definition. For more
     * information, see [Task
     * Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon
     * Elastic Container Service Developer Guide*. If the network mode is ``host``, you cannot run multiple
     * instantiations of the same task on a single container instance when port mappings are used. For more information,
     * see [Network
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#network-settings) in the
     * *Docker run reference*.
     * 
     * @param networkMode the networkMode value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withNetworkMode(String networkMode) {
        this.networkMode = networkMode;
        return this;
    }

    /**
     * Get the pidMode property: The process namespace to use for the containers in the task. The valid values are
     * ``host`` or ``task``. On Fargate for Linux containers, the only valid value is ``task``. For example, monitoring
     * sidecars might need ``pidMode`` to access information about other containers running in the same task. If
     * ``host`` is specified, all containers within the tasks that specified the ``host`` PID mode on the same container
     * instance share the same process namespace with the host Amazon EC2 instance. If ``task`` is specified, all
     * containers within the specified task share the same process namespace. If no value is specified, the default is a
     * private namespace for each container. For more information, see [PID
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the
     * *Docker run reference*. If the ``host`` PID mode is used, there's a heightened risk of undesired process
     * namespace exposure. For more information, see [Docker
     * security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/). This parameter is not
     * supported for Windows containers. This parameter is only supported for tasks that are hosted on FARGATElong if
     * the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on
     * Fargate.
     * 
     * @return the pidMode value.
     */
    public String pidMode() {
        return this.pidMode;
    }

    /**
     * Set the pidMode property: The process namespace to use for the containers in the task. The valid values are
     * ``host`` or ``task``. On Fargate for Linux containers, the only valid value is ``task``. For example, monitoring
     * sidecars might need ``pidMode`` to access information about other containers running in the same task. If
     * ``host`` is specified, all containers within the tasks that specified the ``host`` PID mode on the same container
     * instance share the same process namespace with the host Amazon EC2 instance. If ``task`` is specified, all
     * containers within the specified task share the same process namespace. If no value is specified, the default is a
     * private namespace for each container. For more information, see [PID
     * settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the
     * *Docker run reference*. If the ``host`` PID mode is used, there's a heightened risk of undesired process
     * namespace exposure. For more information, see [Docker
     * security](https://docs.aws.amazon.com/https://docs.docker.com/engine/security/security/). This parameter is not
     * supported for Windows containers. This parameter is only supported for tasks that are hosted on FARGATElong if
     * the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on
     * Fargate.
     * 
     * @param pidMode the pidMode value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withPidMode(String pidMode) {
        this.pidMode = pidMode;
        return this;
    }

    /**
     * Get the placementConstraints property: An array of placement constraint objects to use for tasks. This parameter
     * isn't supported for tasks run on FARGATElong.
     * 
     * @return the placementConstraints value.
     */
    public List<TaskDefinitionPlacementConstraint> placementConstraints() {
        return this.placementConstraints;
    }

    /**
     * Set the placementConstraints property: An array of placement constraint objects to use for tasks. This parameter
     * isn't supported for tasks run on FARGATElong.
     * 
     * @param placementConstraints the placementConstraints value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties
        withPlacementConstraints(List<TaskDefinitionPlacementConstraint> placementConstraints) {
        this.placementConstraints = placementConstraints;
        return this;
    }

    /**
     * Get the proxyConfiguration property: The configuration details for the App Mesh proxy. Your Amazon ECS container
     * instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the
     * ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS
     * optimized AMI version ``20190301`` or later, they contain the required versions of the container agent and
     * ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The configuration details for the App Mesh proxy. For tasks that use the EC2
     * launch type, the container instances require at least version 1.26.0 of the container agent and at least version
     * 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from
     * the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the
     * container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).
     * 
     * @return the proxyConfiguration value.
     */
    public ProxyConfiguration proxyConfiguration() {
        return this.proxyConfiguration;
    }

    /**
     * Set the proxyConfiguration property: The configuration details for the App Mesh proxy. Your Amazon ECS container
     * instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the
     * ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS
     * optimized AMI version ``20190301`` or later, they contain the required versions of the container agent and
     * ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic
     * Container Service Developer Guide*. The configuration details for the App Mesh proxy. For tasks that use the EC2
     * launch type, the container instances require at least version 1.26.0 of the container agent and at least version
     * 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from
     * the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the
     * container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux
     * AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).
     * 
     * @param proxyConfiguration the proxyConfiguration value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withProxyConfiguration(ProxyConfiguration proxyConfiguration) {
        this.proxyConfiguration = proxyConfiguration;
        return this;
    }

    /**
     * Get the requiresCompatibilities property: The task launch types the task definition was validated against. The
     * valid values are ``EC2``, ``FARGATE``, and ``EXTERNAL``. For more information, see [Amazon ECS launch
     * types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @return the requiresCompatibilities value.
     */
    public List<String> requiresCompatibilities() {
        return this.requiresCompatibilities;
    }

    /**
     * Set the requiresCompatibilities property: The task launch types the task definition was validated against. The
     * valid values are ``EC2``, ``FARGATE``, and ``EXTERNAL``. For more information, see [Amazon ECS launch
     * types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic
     * Container Service Developer Guide*.
     * 
     * @param requiresCompatibilities the requiresCompatibilities value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withRequiresCompatibilities(List<String> requiresCompatibilities) {
        this.requiresCompatibilities = requiresCompatibilities;
        return this;
    }

    /**
     * Get the runtimePlatform property: The operating system that your tasks definitions run on. A platform family is
     * specified only for tasks using the Fargate launch type. When you specify a task definition in a service, this
     * value must match the ``runtimePlatform`` value of the service. Information about the platform for the Amazon ECS
     * service or task. For more information about ``RuntimePlatform``, see
     * [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
     * in the *Amazon Elastic Container Service Developer Guide*.
     * 
     * @return the runtimePlatform value.
     */
    public RuntimePlatform runtimePlatform() {
        return this.runtimePlatform;
    }

    /**
     * Set the runtimePlatform property: The operating system that your tasks definitions run on. A platform family is
     * specified only for tasks using the Fargate launch type. When you specify a task definition in a service, this
     * value must match the ``runtimePlatform`` value of the service. Information about the platform for the Amazon ECS
     * service or task. For more information about ``RuntimePlatform``, see
     * [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)
     * in the *Amazon Elastic Container Service Developer Guide*.
     * 
     * @param runtimePlatform the runtimePlatform value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withRuntimePlatform(RuntimePlatform runtimePlatform) {
        this.runtimePlatform = runtimePlatform;
        return this;
    }

    /**
     * Get the tags property: The metadata that you apply to the task definition to help you categorize and organize
     * them. Each tag consists of a key and an optional value. You define both of them. The following basic restrictions
     * apply to tags: + Maximum number of tags per resource - 50 + For each resource, each tag key must be unique, and
     * each tag key can have only one value. + Maximum key length - 128 Unicode characters in UTF-8 + Maximum value
     * length - 256 Unicode characters in UTF-8 + If your tagging schema is used across multiple services and resources,
     * remember that other services may have restrictions on allowed characters. Generally allowed characters are:
     * letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / &#064;. + Tag
     * keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of
     * such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
     * values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated27> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The metadata that you apply to the task definition to help you categorize and organize
     * them. Each tag consists of a key and an optional value. You define both of them. The following basic restrictions
     * apply to tags: + Maximum number of tags per resource - 50 + For each resource, each tag key must be unique, and
     * each tag key can have only one value. + Maximum key length - 128 Unicode characters in UTF-8 + Maximum value
     * length - 256 Unicode characters in UTF-8 + If your tagging schema is used across multiple services and resources,
     * remember that other services may have restrictions on allowed characters. Generally allowed characters are:
     * letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / &#064;. + Tag
     * keys and values are case-sensitive. + Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of
     * such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or
     * values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     * 
     * @param tags the tags value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withTags(List<TagAutoGenerated27> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the taskDefinitionArn property: Property taskDefinitionArn.
     * 
     * @return the taskDefinitionArn value.
     */
    public String taskDefinitionArn() {
        return this.taskDefinitionArn;
    }

    /**
     * Set the taskDefinitionArn property: Property taskDefinitionArn.
     * 
     * @param taskDefinitionArn the taskDefinitionArn value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withTaskDefinitionArn(String taskDefinitionArn) {
        this.taskDefinitionArn = taskDefinitionArn;
        return this;
    }

    /**
     * Get the taskRoleArn property: The short name or full Amazon Resource Name (ARN) of the IAMlong role that grants
     * containers in the task permission to call AWS APIs on your behalf. For more information, see [Amazon ECS Task
     * Role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic
     * Container Service Developer Guide*. IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option
     * is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration
     * code to use the feature. For more information, see [Windows IAM roles for
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @return the taskRoleArn value.
     */
    public String taskRoleArn() {
        return this.taskRoleArn;
    }

    /**
     * Set the taskRoleArn property: The short name or full Amazon Resource Name (ARN) of the IAMlong role that grants
     * containers in the task permission to call AWS APIs on your behalf. For more information, see [Amazon ECS Task
     * Role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic
     * Container Service Developer Guide*. IAM roles for tasks on Windows require that the ``-EnableTaskIAMRole`` option
     * is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some configuration
     * code to use the feature. For more information, see [Windows IAM roles for
     * tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @param taskRoleArn the taskRoleArn value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withTaskRoleArn(String taskRoleArn) {
        this.taskRoleArn = taskRoleArn;
        return this;
    }

    /**
     * Get the volumes property: The list of data volume definitions for the task. For more information, see [Using data
     * volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the
     * *Amazon Elastic Container Service Developer Guide*. The ``host`` and ``sourcePath`` parameters aren't supported
     * for tasks run on FARGATElong.
     * 
     * @return the volumes value.
     */
    public List<Volume> volumes() {
        return this.volumes;
    }

    /**
     * Set the volumes property: The list of data volume definitions for the task. For more information, see [Using data
     * volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the
     * *Amazon Elastic Container Service Developer Guide*. The ``host`` and ``sourcePath`` parameters aren't supported
     * for tasks run on FARGATElong.
     * 
     * @param volumes the volumes value to set.
     * @return the AwsEcsTaskDefinitionProperties object itself.
     */
    public AwsEcsTaskDefinitionProperties withVolumes(List<Volume> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerDefinitions() != null) {
            containerDefinitions().forEach(e -> e.validate());
        }
        if (ephemeralStorage() != null) {
            ephemeralStorage().validate();
        }
        if (inferenceAccelerators() != null) {
            inferenceAccelerators().forEach(e -> e.validate());
        }
        if (placementConstraints() != null) {
            placementConstraints().forEach(e -> e.validate());
        }
        if (proxyConfiguration() != null) {
            proxyConfiguration().validate();
        }
        if (runtimePlatform() != null) {
            runtimePlatform().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (volumes() != null) {
            volumes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("containerDefinitions", this.containerDefinitions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("cpu", this.cpu);
        jsonWriter.writeJsonField("ephemeralStorage", this.ephemeralStorage);
        jsonWriter.writeStringField("executionRoleArn", this.executionRoleArn);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeArrayField("inferenceAccelerators", this.inferenceAccelerators,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("ipcMode", this.ipcMode);
        jsonWriter.writeStringField("memory", this.memory);
        jsonWriter.writeStringField("networkMode", this.networkMode);
        jsonWriter.writeStringField("pidMode", this.pidMode);
        jsonWriter.writeArrayField("placementConstraints", this.placementConstraints,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("proxyConfiguration", this.proxyConfiguration);
        jsonWriter.writeArrayField("requiresCompatibilities", this.requiresCompatibilities,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("runtimePlatform", this.runtimePlatform);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("taskDefinitionArn", this.taskDefinitionArn);
        jsonWriter.writeStringField("taskRoleArn", this.taskRoleArn);
        jsonWriter.writeArrayField("volumes", this.volumes, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEcsTaskDefinitionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEcsTaskDefinitionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEcsTaskDefinitionProperties.
     */
    public static AwsEcsTaskDefinitionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEcsTaskDefinitionProperties deserializedAwsEcsTaskDefinitionProperties
                = new AwsEcsTaskDefinitionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerDefinitions".equals(fieldName)) {
                    List<ContainerDefinition> containerDefinitions
                        = reader.readArray(reader1 -> ContainerDefinition.fromJson(reader1));
                    deserializedAwsEcsTaskDefinitionProperties.containerDefinitions = containerDefinitions;
                } else if ("cpu".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.cpu = reader.getString();
                } else if ("ephemeralStorage".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.ephemeralStorage = EphemeralStorage.fromJson(reader);
                } else if ("executionRoleArn".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.executionRoleArn = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.family = reader.getString();
                } else if ("inferenceAccelerators".equals(fieldName)) {
                    List<InferenceAccelerator> inferenceAccelerators
                        = reader.readArray(reader1 -> InferenceAccelerator.fromJson(reader1));
                    deserializedAwsEcsTaskDefinitionProperties.inferenceAccelerators = inferenceAccelerators;
                } else if ("ipcMode".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.ipcMode = reader.getString();
                } else if ("memory".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.memory = reader.getString();
                } else if ("networkMode".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.networkMode = reader.getString();
                } else if ("pidMode".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.pidMode = reader.getString();
                } else if ("placementConstraints".equals(fieldName)) {
                    List<TaskDefinitionPlacementConstraint> placementConstraints
                        = reader.readArray(reader1 -> TaskDefinitionPlacementConstraint.fromJson(reader1));
                    deserializedAwsEcsTaskDefinitionProperties.placementConstraints = placementConstraints;
                } else if ("proxyConfiguration".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.proxyConfiguration = ProxyConfiguration.fromJson(reader);
                } else if ("requiresCompatibilities".equals(fieldName)) {
                    List<String> requiresCompatibilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEcsTaskDefinitionProperties.requiresCompatibilities = requiresCompatibilities;
                } else if ("runtimePlatform".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.runtimePlatform = RuntimePlatform.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated27> tags = reader.readArray(reader1 -> TagAutoGenerated27.fromJson(reader1));
                    deserializedAwsEcsTaskDefinitionProperties.tags = tags;
                } else if ("taskDefinitionArn".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.taskDefinitionArn = reader.getString();
                } else if ("taskRoleArn".equals(fieldName)) {
                    deserializedAwsEcsTaskDefinitionProperties.taskRoleArn = reader.getString();
                } else if ("volumes".equals(fieldName)) {
                    List<Volume> volumes = reader.readArray(reader1 -> Volume.fromJson(reader1));
                    deserializedAwsEcsTaskDefinitionProperties.volumes = volumes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEcsTaskDefinitionProperties;
        });
    }
}
