// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ServiceManagedEBSVolumeConfiguration.
 */
@Fluent
public final class ServiceManagedEbsVolumeConfiguration
    implements JsonSerializable<ServiceManagedEbsVolumeConfiguration> {
    /*
     * Indicates whether the volume should be encrypted. If no value is specified, encryption is turned on by default.
     * This parameter maps 1:1 with the ``Encrypted`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     */
    private Boolean encrypted;

    /*
     * The Linux filesystem type for the volume. For volumes created from a snapshot, you must specify the same
     * filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch,
     * the task will fail to start. The available filesystem types are
     * ``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
     */
    private String filesystemType;

    /*
     * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the
     * number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance
     * of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the
     * supported values for each volume type. + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000 IOPS + ``io2``: 100
     * - 256,000 IOPS This parameter is required for ``io1`` and ``io2`` volume types. The default for ``gp3`` volumes
     * is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard`` volume types. This
     * parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     */
    private Integer iops;

    /*
     * The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use for Amazon EBS encryption.
     * When encryption is turned on and no AWS Key Management Service key is specified, the default AWS managed key for
     * Amazon EBS volumes is used. This parameter maps 1:1 with the ``KmsKeyId`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*. AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if you specify an ID,
     * alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
     */
    private String kmsKeyId;

    /*
     * The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is
     * used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed
     * ``AmazonECSInfrastructureRolePolicyForVolumes`` IAM policy with this role. For more information, see [Amazon ECS
     * infrastructure IAM
     * role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon
     * ECS Developer Guide*.
     */
    private String roleArn;

    /*
     * The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot
     * ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater
     * than or equal to the snapshot size. This parameter maps 1:1 with the ``Size`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*. The following are the supported volume size values for each volume type. + ``gp2`` and ``gp3``:
     * 1-16,384 + ``io1`` and ``io2``: 4-16,384 + ``st1`` and ``sc1``: 125-16,384 + ``standard``: 1-1,024
     */
    private Integer sizeInGiB;

    /*
     * The snapshot that Amazon ECS uses to create the volume. You must specify either a snapshot ID or a volume size.
     * This parameter maps 1:1 with the ``SnapshotId`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     */
    private String snapshotId;

    /*
     * The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with
     * the ``TagSpecifications.N`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     */
    private List<EbsTagSpecification> tagSpecifications;

    /*
     * The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with
     * the ``Throughput`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*. This parameter is only supported for the ``gp3`` volume type.
     */
    private Integer throughput;

    /*
     * The volume type. This parameter maps 1:1 with the ``VolumeType`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*. For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
     * The following are the supported volume types. + General Purpose SSD: ``gp2``|``gp3`` + Provisioned IOPS SSD:
     * ``io1``|``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic: ``standard`` The magnetic
     * volume type is not supported on Fargate.
     */
    private String volumeType;

    /**
     * Creates an instance of ServiceManagedEbsVolumeConfiguration class.
     */
    public ServiceManagedEbsVolumeConfiguration() {
    }

    /**
     * Get the encrypted property: Indicates whether the volume should be encrypted. If no value is specified,
     * encryption is turned on by default. This parameter maps 1:1 with the ``Encrypted`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: Indicates whether the volume should be encrypted. If no value is specified,
     * encryption is turned on by default. This parameter maps 1:1 with the ``Encrypted`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @param encrypted the encrypted value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the filesystemType property: The Linux filesystem type for the volume. For volumes created from a snapshot,
     * you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a
     * filesystem type mismatch, the task will fail to start. The available filesystem types are
     * ``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
     * 
     * @return the filesystemType value.
     */
    public String filesystemType() {
        return this.filesystemType;
    }

    /**
     * Set the filesystemType property: The Linux filesystem type for the volume. For volumes created from a snapshot,
     * you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a
     * filesystem type mismatch, the task will fail to start. The available filesystem types are
     * ``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
     * 
     * @param filesystemType the filesystemType value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withFilesystemType(String filesystemType) {
        this.filesystemType = filesystemType;
        return this;
    }

    /**
     * Get the iops property: The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes,
     * this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the
     * baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The
     * following are the supported values for each volume type. + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000
     * IOPS + ``io2``: 100 - 256,000 IOPS This parameter is required for ``io1`` and ``io2`` volume types. The default
     * for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard``
     * volume types. This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes,
     * this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the
     * baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The
     * following are the supported values for each volume type. + ``gp3``: 3,000 - 16,000 IOPS + ``io1``: 100 - 64,000
     * IOPS + ``io2``: 100 - 256,000 IOPS This parameter is required for ``io1`` and ``io2`` volume types. The default
     * for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard``
     * volume types. This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @param iops the iops value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the kmsKeyId property: The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use
     * for Amazon EBS encryption. When encryption is turned on and no AWS Key Management Service key is specified, the
     * default AWS managed key for Amazon EBS volumes is used. This parameter maps 1:1 with the ``KmsKeyId`` parameter
     * of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the
     * *Amazon EC2 API Reference*. AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if
     * you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use
     * for Amazon EBS encryption. When encryption is turned on and no AWS Key Management Service key is specified, the
     * default AWS managed key for Amazon EBS volumes is used. This parameter maps 1:1 with the ``KmsKeyId`` parameter
     * of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the
     * *Amazon EC2 API Reference*. AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if
     * you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the roleArn property: The ARN of the IAM role to associate with this volume. This is the Amazon ECS
     * infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed
     * ``AmazonECSInfrastructureRolePolicyForVolumes`` IAM policy with this role. For more information, see [Amazon ECS
     * infrastructure IAM
     * role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon
     * ECS Developer Guide*.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: The ARN of the IAM role to associate with this volume. This is the Amazon ECS
     * infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed
     * ``AmazonECSInfrastructureRolePolicyForVolumes`` IAM policy with this role. For more information, see [Amazon ECS
     * infrastructure IAM
     * role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon
     * ECS Developer Guide*.
     * 
     * @param roleArn the roleArn value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Get the sizeInGiB property: The size of the volume in GiB. You must specify either a volume size or a snapshot
     * ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally
     * specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the ``Size``
     * parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html)
     * in the *Amazon EC2 API Reference*. The following are the supported volume size values for each volume type. +
     * ``gp2`` and ``gp3``: 1-16,384 + ``io1`` and ``io2``: 4-16,384 + ``st1`` and ``sc1``: 125-16,384 + ``standard``:
     * 1-1,024.
     * 
     * @return the sizeInGiB value.
     */
    public Integer sizeInGiB() {
        return this.sizeInGiB;
    }

    /**
     * Set the sizeInGiB property: The size of the volume in GiB. You must specify either a volume size or a snapshot
     * ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally
     * specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the ``Size``
     * parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html)
     * in the *Amazon EC2 API Reference*. The following are the supported volume size values for each volume type. +
     * ``gp2`` and ``gp3``: 1-16,384 + ``io1`` and ``io2``: 4-16,384 + ``st1`` and ``sc1``: 125-16,384 + ``standard``:
     * 1-1,024.
     * 
     * @param sizeInGiB the sizeInGiB value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withSizeInGiB(Integer sizeInGiB) {
        this.sizeInGiB = sizeInGiB;
        return this;
    }

    /**
     * Get the snapshotId property: The snapshot that Amazon ECS uses to create the volume. You must specify either a
     * snapshot ID or a volume size. This parameter maps 1:1 with the ``SnapshotId`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: The snapshot that Amazon ECS uses to create the volume. You must specify either a
     * snapshot ID or a volume size. This parameter maps 1:1 with the ``SnapshotId`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Get the tagSpecifications property: The tags to apply to the volume. Amazon ECS applies service-managed tags by
     * default. This parameter maps 1:1 with the ``TagSpecifications.N`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @return the tagSpecifications value.
     */
    public List<EbsTagSpecification> tagSpecifications() {
        return this.tagSpecifications;
    }

    /**
     * Set the tagSpecifications property: The tags to apply to the volume. Amazon ECS applies service-managed tags by
     * default. This parameter maps 1:1 with the ``TagSpecifications.N`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*.
     * 
     * @param tagSpecifications the tagSpecifications value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withTagSpecifications(List<EbsTagSpecification> tagSpecifications) {
        this.tagSpecifications = tagSpecifications;
        return this;
    }

    /**
     * Get the throughput property: The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
     * This parameter maps 1:1 with the ``Throughput`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*. This parameter is only supported for the ``gp3`` volume type.
     * 
     * @return the throughput value.
     */
    public Integer throughput() {
        return this.throughput;
    }

    /**
     * Set the throughput property: The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
     * This parameter maps 1:1 with the ``Throughput`` parameter of the [CreateVolume
     * API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API
     * Reference*. This parameter is only supported for the ``gp3`` volume type.
     * 
     * @param throughput the throughput value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withThroughput(Integer throughput) {
        this.throughput = throughput;
        return this;
    }

    /**
     * Get the volumeType property: The volume type. This parameter maps 1:1 with the ``VolumeType`` parameter of the
     * [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon
     * EC2 API Reference*. For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
     * The following are the supported volume types. + General Purpose SSD: ``gp2``|``gp3`` + Provisioned IOPS SSD:
     * ``io1``|``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic: ``standard`` The magnetic
     * volume type is not supported on Fargate.
     * 
     * @return the volumeType value.
     */
    public String volumeType() {
        return this.volumeType;
    }

    /**
     * Set the volumeType property: The volume type. This parameter maps 1:1 with the ``VolumeType`` parameter of the
     * [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon
     * EC2 API Reference*. For more information, see [Amazon EBS volume
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
     * The following are the supported volume types. + General Purpose SSD: ``gp2``|``gp3`` + Provisioned IOPS SSD:
     * ``io1``|``io2`` + Throughput Optimized HDD: ``st1`` + Cold HDD: ``sc1`` + Magnetic: ``standard`` The magnetic
     * volume type is not supported on Fargate.
     * 
     * @param volumeType the volumeType value to set.
     * @return the ServiceManagedEbsVolumeConfiguration object itself.
     */
    public ServiceManagedEbsVolumeConfiguration withVolumeType(String volumeType) {
        this.volumeType = volumeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tagSpecifications() != null) {
            tagSpecifications().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeStringField("filesystemType", this.filesystemType);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("roleArn", this.roleArn);
        jsonWriter.writeNumberField("sizeInGiB", this.sizeInGiB);
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        jsonWriter.writeArrayField("tagSpecifications", this.tagSpecifications,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("throughput", this.throughput);
        jsonWriter.writeStringField("volumeType", this.volumeType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceManagedEbsVolumeConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceManagedEbsVolumeConfiguration if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceManagedEbsVolumeConfiguration.
     */
    public static ServiceManagedEbsVolumeConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceManagedEbsVolumeConfiguration deserializedServiceManagedEbsVolumeConfiguration
                = new ServiceManagedEbsVolumeConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encrypted".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.encrypted
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("filesystemType".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.filesystemType = reader.getString();
                } else if ("iops".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.iops = reader.getNullable(JsonReader::getInt);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.kmsKeyId = reader.getString();
                } else if ("roleArn".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.roleArn = reader.getString();
                } else if ("sizeInGiB".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.sizeInGiB = reader.getNullable(JsonReader::getInt);
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.snapshotId = reader.getString();
                } else if ("tagSpecifications".equals(fieldName)) {
                    List<EbsTagSpecification> tagSpecifications
                        = reader.readArray(reader1 -> EbsTagSpecification.fromJson(reader1));
                    deserializedServiceManagedEbsVolumeConfiguration.tagSpecifications = tagSpecifications;
                } else if ("throughput".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.throughput
                        = reader.getNullable(JsonReader::getInt);
                } else if ("volumeType".equals(fieldName)) {
                    deserializedServiceManagedEbsVolumeConfiguration.volumeType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceManagedEbsVolumeConfiguration;
        });
    }
}
