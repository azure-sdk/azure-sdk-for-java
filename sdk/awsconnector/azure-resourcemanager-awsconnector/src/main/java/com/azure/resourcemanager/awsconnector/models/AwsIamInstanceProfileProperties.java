// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsIamInstanceProfile.
 */
@Fluent
public final class AwsIamInstanceProfileProperties implements JsonSerializable<AwsIamInstanceProfileProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * The name of the instance profile to create. This parameter allows (through its [regex
     * pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper
     * and lowercase alphanumeric characters with no spaces. You can also include any of the following characters:
     * _+=,.@-
     */
    private String instanceProfileName;

    /*
     * The path to the instance profile. For more information about paths, see [IAM
     * Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     */
    private String path;

    /*
     * The name of the role to associate with the instance profile. Only one role can be assigned to an EC2 instance at
     * a time, and all applications on the instance share the same role and permissions.
     */
    private List<String> roles;

    /**
     * Creates an instance of AwsIamInstanceProfileProperties class.
     */
    public AwsIamInstanceProfileProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsIamInstanceProfileProperties object itself.
     */
    public AwsIamInstanceProfileProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the instanceProfileName property: The name of the instance profile to create. This parameter allows (through
     * its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters
     * consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the
     * following characters: _+=,.&#064;-.
     * 
     * @return the instanceProfileName value.
     */
    public String instanceProfileName() {
        return this.instanceProfileName;
    }

    /**
     * Set the instanceProfileName property: The name of the instance profile to create. This parameter allows (through
     * its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters
     * consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the
     * following characters: _+=,.&#064;-.
     * 
     * @param instanceProfileName the instanceProfileName value to set.
     * @return the AwsIamInstanceProfileProperties object itself.
     */
    public AwsIamInstanceProfileProperties withInstanceProfileName(String instanceProfileName) {
        this.instanceProfileName = instanceProfileName;
        return this;
    }

    /**
     * Get the path property: The path to the instance profile. For more information about paths, see [IAM
     * Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path to the instance profile. For more information about paths, see [IAM
     * Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     * 
     * @param path the path value to set.
     * @return the AwsIamInstanceProfileProperties object itself.
     */
    public AwsIamInstanceProfileProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the roles property: The name of the role to associate with the instance profile. Only one role can be
     * assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.
     * 
     * @return the roles value.
     */
    public List<String> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: The name of the role to associate with the instance profile. Only one role can be
     * assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.
     * 
     * @param roles the roles value to set.
     * @return the AwsIamInstanceProfileProperties object itself.
     */
    public AwsIamInstanceProfileProperties withRoles(List<String> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("instanceProfileName", this.instanceProfileName);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamInstanceProfileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamInstanceProfileProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamInstanceProfileProperties.
     */
    public static AwsIamInstanceProfileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamInstanceProfileProperties deserializedAwsIamInstanceProfileProperties
                = new AwsIamInstanceProfileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsIamInstanceProfileProperties.arn = reader.getString();
                } else if ("instanceProfileName".equals(fieldName)) {
                    deserializedAwsIamInstanceProfileProperties.instanceProfileName = reader.getString();
                } else if ("path".equals(fieldName)) {
                    deserializedAwsIamInstanceProfileProperties.path = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    List<String> roles = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsIamInstanceProfileProperties.roles = roles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamInstanceProfileProperties;
        });
    }
}
