// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsSecretsManagerSecret.
 */
@Fluent
public final class AwsSecretsManagerSecretProperties implements JsonSerializable<AwsSecretsManagerSecretProperties> {
    /*
     * The description of the secret.
     */
    private String description;

    /*
     * A structure that specifies how to generate a password to encrypt and store in the secret. To include a specific
     * string in the secret, use ``SecretString`` instead. If you omit both ``GenerateSecretString`` and
     * ``SecretString``, you create an empty secret. When you make a change to this property, a new secret version is
     * created. We recommend that you specify the maximum length and include every character type that the system you
     * are generating a password for can support. Generates a random password. We recommend that you specify the maximum
     * length and include every character type that the system you are generating a password for can support. *Required
     * permissions:* ``secretsmanager:GetRandomPassword``. For more information, see [IAM policy actions for Secrets
     * Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#
     * awssecretsmanager-actions-as-permissions) and [Authentication and access control in Secrets
     * Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
     */
    private GenerateSecretString generateSecretString;

    /*
     * Property id
     */
    private String id;

    /*
     * The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the secret value in the secret. An
     * alias is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``. For more information, see
     * [About aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a
     * different account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses
     * the key ``aws/secretsmanager``. If that key doesn't yet exist, then Secrets Manager creates it for you
     * automatically the first time it encrypts the secret value. If the secret is in a different AWS account from the
     * credentials calling the API, then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create
     * and use a customer managed KMS key.
     */
    private String kmsKeyId;

    /*
     * The name of the new secret. The secret name can contain ASCII letters, numbers, and the following characters:
     * /_+=.@- Do not end your secret name with a hyphen followed by six characters. If you do so, you risk confusion
     * and unexpected results when searching for a secret by partial ARN. Secrets Manager automatically adds a hyphen
     * and six random characters after the secret name at the end of the ARN.
     */
    private String name;

    /*
     * A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
     */
    private List<ReplicaRegion> replicaRegions;

    /*
     * The text to encrypt and store in the secret. We recommend you use a JSON structure of key/value pairs for your
     * secret value. To generate a random password, use ``GenerateSecretString`` instead. If you omit both
     * ``GenerateSecretString`` and ``SecretString``, you create an empty secret. When you make a change to this
     * property, a new secret version is created.
     */
    private String secretString;

    /*
     * A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string, for
     * example: ``[{'Key':'CostCenter','Value':'12345'},{'Key':'environment','Value':'production'}]`` Secrets Manager
     * tag key names are case sensitive. A tag with the key 'ABC' is a different tag from one with key 'abc'.
     * Stack-level tags, tags you apply to the CloudFormation stack, are also attached to the secret. If you check tags
     * in permissions policies as part of your security strategy, then adding or removing a tag can change permissions.
     * If the completion of this operation would result in you losing your permissions for this secret, then Secrets
     * Manager blocks the operation and returns an ``Access Denied`` error. For more information, see [Control access to
     * secrets using
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac)
     * and [Limit access to identities with tags that match secrets'
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-
     * access_tags2). For information about how to format a JSON parameter for the various command line tool
     * environments, see [Using JSON for
     * Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json). If your
     * command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid
     * confusion with the double quotes required in the JSON text. The following restrictions apply to tags: + Maximum
     * number of tags per secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value length: 255
     * Unicode characters in UTF-8 + Tag keys and values are case sensitive. + Do not use the ``aws:`` prefix in your
     * tag names or values because AWS reserves it for AWS use. You can't edit or delete tag names or values with this
     * prefix. Tags with this prefix do not count against your tags per secret limit. + If you use your tagging schema
     * across multiple services and resources, other services might have restrictions on allowed characters. Generally
     * allowed characters: letters, spaces, and numbers representable in UTF-8, plus the following special characters: +
     * - = . _ : / @.
     */
    private List<TagAutoGenerated52> tags;

    /**
     * Creates an instance of AwsSecretsManagerSecretProperties class.
     */
    public AwsSecretsManagerSecretProperties() {
    }

    /**
     * Get the description property: The description of the secret.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the secret.
     * 
     * @param description the description value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the generateSecretString property: A structure that specifies how to generate a password to encrypt and store
     * in the secret. To include a specific string in the secret, use ``SecretString`` instead. If you omit both
     * ``GenerateSecretString`` and ``SecretString``, you create an empty secret. When you make a change to this
     * property, a new secret version is created. We recommend that you specify the maximum length and include every
     * character type that the system you are generating a password for can support. Generates a random password. We
     * recommend that you specify the maximum length and include every character type that the system you are generating
     * a password for can support. *Required permissions:* ``secretsmanager:GetRandomPassword``. For more information,
     * see [IAM policy actions for Secrets
     * Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#awssecretsmanager-actions-as-permissions)
     * and [Authentication and access control in Secrets
     * Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
     * 
     * @return the generateSecretString value.
     */
    public GenerateSecretString generateSecretString() {
        return this.generateSecretString;
    }

    /**
     * Set the generateSecretString property: A structure that specifies how to generate a password to encrypt and store
     * in the secret. To include a specific string in the secret, use ``SecretString`` instead. If you omit both
     * ``GenerateSecretString`` and ``SecretString``, you create an empty secret. When you make a change to this
     * property, a new secret version is created. We recommend that you specify the maximum length and include every
     * character type that the system you are generating a password for can support. Generates a random password. We
     * recommend that you specify the maximum length and include every character type that the system you are generating
     * a password for can support. *Required permissions:* ``secretsmanager:GetRandomPassword``. For more information,
     * see [IAM policy actions for Secrets
     * Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#awssecretsmanager-actions-as-permissions)
     * and [Authentication and access control in Secrets
     * Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
     * 
     * @param generateSecretString the generateSecretString value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withGenerateSecretString(GenerateSecretString generateSecretString) {
        this.generateSecretString = generateSecretString;
        return this;
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the kmsKeyId property: The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the
     * secret value in the secret. An alias is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``.
     * For more information, see [About
     * aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a different
     * account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses the key
     * ``aws/secretsmanager``. If that key doesn't yet exist, then Secrets Manager creates it for you automatically the
     * first time it encrypts the secret value. If the secret is in a different AWS account from the credentials calling
     * the API, then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create and use a customer
     * managed KMS key.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The ARN, key ID, or alias of the KMS key that Secrets Manager uses to encrypt the
     * secret value in the secret. An alias is always prefixed by ``alias/``, for example ``alias/aws/secretsmanager``.
     * For more information, see [About
     * aliases](https://docs.aws.amazon.com/kms/latest/developerguide/alias-about.html). To use a KMS key in a different
     * account, use the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager uses the key
     * ``aws/secretsmanager``. If that key doesn't yet exist, then Secrets Manager creates it for you automatically the
     * first time it encrypts the secret value. If the secret is in a different AWS account from the credentials calling
     * the API, then you can't use ``aws/secretsmanager`` to encrypt the secret, and you must create and use a customer
     * managed KMS key.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the name property: The name of the new secret. The secret name can contain ASCII letters, numbers, and the
     * following characters: /_+=.&#064;- Do not end your secret name with a hyphen followed by six characters. If you
     * do so, you risk confusion and unexpected results when searching for a secret by partial ARN. Secrets Manager
     * automatically adds a hyphen and six random characters after the secret name at the end of the ARN.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the new secret. The secret name can contain ASCII letters, numbers, and the
     * following characters: /_+=.&#064;- Do not end your secret name with a hyphen followed by six characters. If you
     * do so, you risk confusion and unexpected results when searching for a secret by partial ARN. Secrets Manager
     * automatically adds a hyphen and six random characters after the secret name at the end of the ARN.
     * 
     * @param name the name value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the replicaRegions property: A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica
     * secret.
     * 
     * @return the replicaRegions value.
     */
    public List<ReplicaRegion> replicaRegions() {
        return this.replicaRegions;
    }

    /**
     * Set the replicaRegions property: A custom type that specifies a ``Region`` and the ``KmsKeyId`` for a replica
     * secret.
     * 
     * @param replicaRegions the replicaRegions value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withReplicaRegions(List<ReplicaRegion> replicaRegions) {
        this.replicaRegions = replicaRegions;
        return this;
    }

    /**
     * Get the secretString property: The text to encrypt and store in the secret. We recommend you use a JSON structure
     * of key/value pairs for your secret value. To generate a random password, use ``GenerateSecretString`` instead. If
     * you omit both ``GenerateSecretString`` and ``SecretString``, you create an empty secret. When you make a change
     * to this property, a new secret version is created.
     * 
     * @return the secretString value.
     */
    public String secretString() {
        return this.secretString;
    }

    /**
     * Set the secretString property: The text to encrypt and store in the secret. We recommend you use a JSON structure
     * of key/value pairs for your secret value. To generate a random password, use ``GenerateSecretString`` instead. If
     * you omit both ``GenerateSecretString`` and ``SecretString``, you create an empty secret. When you make a change
     * to this property, a new secret version is created.
     * 
     * @param secretString the secretString value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withSecretString(String secretString) {
        this.secretString = secretString;
        return this;
    }

    /**
     * Get the tags property: A list of tags to attach to the secret. Each tag is a key and value pair of strings in a
     * JSON text string, for example:
     * ``[{'Key':'CostCenter','Value':'12345'},{'Key':'environment','Value':'production'}]`` Secrets Manager tag key
     * names are case sensitive. A tag with the key 'ABC' is a different tag from one with key 'abc'. Stack-level tags,
     * tags you apply to the CloudFormation stack, are also attached to the secret. If you check tags in permissions
     * policies as part of your security strategy, then adding or removing a tag can change permissions. If the
     * completion of this operation would result in you losing your permissions for this secret, then Secrets Manager
     * blocks the operation and returns an ``Access Denied`` error. For more information, see [Control access to secrets
     * using
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac)
     * and [Limit access to identities with tags that match secrets'
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2).
     * For information about how to format a JSON parameter for the various command line tool environments, see [Using
     * JSON for Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json).
     * If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to
     * avoid confusion with the double quotes required in the JSON text. The following restrictions apply to tags: +
     * Maximum number of tags per secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value
     * length: 255 Unicode characters in UTF-8 + Tag keys and values are case sensitive. + Do not use the ``aws:``
     * prefix in your tag names or values because AWS reserves it for AWS use. You can't edit or delete tag names or
     * values with this prefix. Tags with this prefix do not count against your tags per secret limit. + If you use your
     * tagging schema across multiple services and resources, other services might have restrictions on allowed
     * characters. Generally allowed characters: letters, spaces, and numbers representable in UTF-8, plus the following
     * special characters: + - = . _ : / &#064;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated52> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: A list of tags to attach to the secret. Each tag is a key and value pair of strings in a
     * JSON text string, for example:
     * ``[{'Key':'CostCenter','Value':'12345'},{'Key':'environment','Value':'production'}]`` Secrets Manager tag key
     * names are case sensitive. A tag with the key 'ABC' is a different tag from one with key 'abc'. Stack-level tags,
     * tags you apply to the CloudFormation stack, are also attached to the secret. If you check tags in permissions
     * policies as part of your security strategy, then adding or removing a tag can change permissions. If the
     * completion of this operation would result in you losing your permissions for this secret, then Secrets Manager
     * blocks the operation and returns an ``Access Denied`` error. For more information, see [Control access to secrets
     * using
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac)
     * and [Limit access to identities with tags that match secrets'
     * tags](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2).
     * For information about how to format a JSON parameter for the various command line tool environments, see [Using
     * JSON for Parameters](https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json).
     * If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to
     * avoid confusion with the double quotes required in the JSON text. The following restrictions apply to tags: +
     * Maximum number of tags per secret: 50 + Maximum key length: 127 Unicode characters in UTF-8 + Maximum value
     * length: 255 Unicode characters in UTF-8 + Tag keys and values are case sensitive. + Do not use the ``aws:``
     * prefix in your tag names or values because AWS reserves it for AWS use. You can't edit or delete tag names or
     * values with this prefix. Tags with this prefix do not count against your tags per secret limit. + If you use your
     * tagging schema across multiple services and resources, other services might have restrictions on allowed
     * characters. Generally allowed characters: letters, spaces, and numbers representable in UTF-8, plus the following
     * special characters: + - = . _ : / &#064;.
     * 
     * @param tags the tags value to set.
     * @return the AwsSecretsManagerSecretProperties object itself.
     */
    public AwsSecretsManagerSecretProperties withTags(List<TagAutoGenerated52> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (generateSecretString() != null) {
            generateSecretString().validate();
        }
        if (replicaRegions() != null) {
            replicaRegions().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("generateSecretString", this.generateSecretString);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("replicaRegions", this.replicaRegions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("secretString", this.secretString);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsSecretsManagerSecretProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsSecretsManagerSecretProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsSecretsManagerSecretProperties.
     */
    public static AwsSecretsManagerSecretProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsSecretsManagerSecretProperties deserializedAwsSecretsManagerSecretProperties
                = new AwsSecretsManagerSecretProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedAwsSecretsManagerSecretProperties.description = reader.getString();
                } else if ("generateSecretString".equals(fieldName)) {
                    deserializedAwsSecretsManagerSecretProperties.generateSecretString
                        = GenerateSecretString.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    deserializedAwsSecretsManagerSecretProperties.id = reader.getString();
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsSecretsManagerSecretProperties.kmsKeyId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsSecretsManagerSecretProperties.name = reader.getString();
                } else if ("replicaRegions".equals(fieldName)) {
                    List<ReplicaRegion> replicaRegions = reader.readArray(reader1 -> ReplicaRegion.fromJson(reader1));
                    deserializedAwsSecretsManagerSecretProperties.replicaRegions = replicaRegions;
                } else if ("secretString".equals(fieldName)) {
                    deserializedAwsSecretsManagerSecretProperties.secretString = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated52> tags = reader.readArray(reader1 -> TagAutoGenerated52.fromJson(reader1));
                    deserializedAwsSecretsManagerSecretProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsSecretsManagerSecretProperties;
        });
    }
}
