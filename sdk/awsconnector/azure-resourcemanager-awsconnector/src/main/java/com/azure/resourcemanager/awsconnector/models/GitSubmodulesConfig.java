// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of GitSubmodulesConfig.
 */
@Fluent
public final class GitSubmodulesConfig implements JsonSerializable<GitSubmodulesConfig> {
    /*
     * <p> Set to true to fetch Git submodules for your CodeBuild build project. </p>
     */
    private Boolean fetchSubmodules;

    /**
     * Creates an instance of GitSubmodulesConfig class.
     */
    public GitSubmodulesConfig() {
    }

    /**
     * Get the fetchSubmodules property: &lt;p&gt; Set to true to fetch Git submodules for your CodeBuild build project.
     * &lt;/p&gt;.
     * 
     * @return the fetchSubmodules value.
     */
    public Boolean fetchSubmodules() {
        return this.fetchSubmodules;
    }

    /**
     * Set the fetchSubmodules property: &lt;p&gt; Set to true to fetch Git submodules for your CodeBuild build project.
     * &lt;/p&gt;.
     * 
     * @param fetchSubmodules the fetchSubmodules value to set.
     * @return the GitSubmodulesConfig object itself.
     */
    public GitSubmodulesConfig withFetchSubmodules(Boolean fetchSubmodules) {
        this.fetchSubmodules = fetchSubmodules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("fetchSubmodules", this.fetchSubmodules);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GitSubmodulesConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GitSubmodulesConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GitSubmodulesConfig.
     */
    public static GitSubmodulesConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GitSubmodulesConfig deserializedGitSubmodulesConfig = new GitSubmodulesConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fetchSubmodules".equals(fieldName)) {
                    deserializedGitSubmodulesConfig.fetchSubmodules = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGitSubmodulesConfig;
        });
    }
}
