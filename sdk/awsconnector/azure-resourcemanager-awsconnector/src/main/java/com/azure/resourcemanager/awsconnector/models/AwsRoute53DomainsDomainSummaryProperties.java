// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of awsRoute53DomainsDomainSummary.
 */
@Fluent
public final class AwsRoute53DomainsDomainSummaryProperties
    implements JsonSerializable<AwsRoute53DomainsDomainSummaryProperties> {
    /*
     * <p>Indicates whether the domain is automatically renewed upon expiration.</p>
     */
    private Boolean autoRenew;

    /*
     * <p>The name of the domain that the summary information applies to.</p>
     */
    private String domainName;

    /*
     * <p>Expiration date of the domain in Unix time format and Coordinated Universal Time (UTC).</p>
     */
    private OffsetDateTime expiry;

    /*
     * <p>Indicates whether a domain is locked from unauthorized transfer to another party.</p>
     */
    private Boolean transferLock;

    /**
     * Creates an instance of AwsRoute53DomainsDomainSummaryProperties class.
     */
    public AwsRoute53DomainsDomainSummaryProperties() {
    }

    /**
     * Get the autoRenew property: &lt;p&gt;Indicates whether the domain is automatically renewed upon
     * expiration.&lt;/p&gt;.
     * 
     * @return the autoRenew value.
     */
    public Boolean autoRenew() {
        return this.autoRenew;
    }

    /**
     * Set the autoRenew property: &lt;p&gt;Indicates whether the domain is automatically renewed upon
     * expiration.&lt;/p&gt;.
     * 
     * @param autoRenew the autoRenew value to set.
     * @return the AwsRoute53DomainsDomainSummaryProperties object itself.
     */
    public AwsRoute53DomainsDomainSummaryProperties withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }

    /**
     * Get the domainName property: &lt;p&gt;The name of the domain that the summary information applies to.&lt;/p&gt;.
     * 
     * @return the domainName value.
     */
    public String domainName() {
        return this.domainName;
    }

    /**
     * Set the domainName property: &lt;p&gt;The name of the domain that the summary information applies to.&lt;/p&gt;.
     * 
     * @param domainName the domainName value to set.
     * @return the AwsRoute53DomainsDomainSummaryProperties object itself.
     */
    public AwsRoute53DomainsDomainSummaryProperties withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }

    /**
     * Get the expiry property: &lt;p&gt;Expiration date of the domain in Unix time format and Coordinated Universal
     * Time (UTC).&lt;/p&gt;.
     * 
     * @return the expiry value.
     */
    public OffsetDateTime expiry() {
        return this.expiry;
    }

    /**
     * Set the expiry property: &lt;p&gt;Expiration date of the domain in Unix time format and Coordinated Universal
     * Time (UTC).&lt;/p&gt;.
     * 
     * @param expiry the expiry value to set.
     * @return the AwsRoute53DomainsDomainSummaryProperties object itself.
     */
    public AwsRoute53DomainsDomainSummaryProperties withExpiry(OffsetDateTime expiry) {
        this.expiry = expiry;
        return this;
    }

    /**
     * Get the transferLock property: &lt;p&gt;Indicates whether a domain is locked from unauthorized transfer to
     * another party.&lt;/p&gt;.
     * 
     * @return the transferLock value.
     */
    public Boolean transferLock() {
        return this.transferLock;
    }

    /**
     * Set the transferLock property: &lt;p&gt;Indicates whether a domain is locked from unauthorized transfer to
     * another party.&lt;/p&gt;.
     * 
     * @param transferLock the transferLock value to set.
     * @return the AwsRoute53DomainsDomainSummaryProperties object itself.
     */
    public AwsRoute53DomainsDomainSummaryProperties withTransferLock(Boolean transferLock) {
        this.transferLock = transferLock;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("autoRenew", this.autoRenew);
        jsonWriter.writeStringField("domainName", this.domainName);
        jsonWriter.writeStringField("expiry",
            this.expiry == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiry));
        jsonWriter.writeBooleanField("transferLock", this.transferLock);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsRoute53DomainsDomainSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsRoute53DomainsDomainSummaryProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsRoute53DomainsDomainSummaryProperties.
     */
    public static AwsRoute53DomainsDomainSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsRoute53DomainsDomainSummaryProperties deserializedAwsRoute53DomainsDomainSummaryProperties
                = new AwsRoute53DomainsDomainSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoRenew".equals(fieldName)) {
                    deserializedAwsRoute53DomainsDomainSummaryProperties.autoRenew
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("domainName".equals(fieldName)) {
                    deserializedAwsRoute53DomainsDomainSummaryProperties.domainName = reader.getString();
                } else if ("expiry".equals(fieldName)) {
                    deserializedAwsRoute53DomainsDomainSummaryProperties.expiry = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("transferLock".equals(fieldName)) {
                    deserializedAwsRoute53DomainsDomainSummaryProperties.transferLock
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsRoute53DomainsDomainSummaryProperties;
        });
    }
}
