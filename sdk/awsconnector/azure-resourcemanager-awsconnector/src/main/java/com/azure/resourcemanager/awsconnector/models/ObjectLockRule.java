// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ObjectLockRule.
 */
@Fluent
public final class ObjectLockRule implements JsonSerializable<ObjectLockRule> {
    /*
     * The default Object Lock retention mode and period that you want to apply to new objects placed in the specified
     * bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or
     * ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable
     * values for mode and period, see
     * [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-
     * defaultretention.html). The container element for specifying the default Object Lock retention settings for new
     * objects placed in the specified bucket. + The ``DefaultRetention`` settings require both a mode and a period. +
     * The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify
     * ``Days`` and ``Years`` at the same time.
     */
    private DefaultRetention defaultRetention;

    /**
     * Creates an instance of ObjectLockRule class.
     */
    public ObjectLockRule() {
    }

    /**
     * Get the defaultRetention property: The default Object Lock retention mode and period that you want to apply to
     * new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode``
     * and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For
     * more information about allowable values for mode and period, see
     * [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
     * The container element for specifying the default Object Lock retention settings for new objects placed in the
     * specified bucket. + The ``DefaultRetention`` settings require both a mode and a period. + The
     * ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify
     * ``Days`` and ``Years`` at the same time.
     * 
     * @return the defaultRetention value.
     */
    public DefaultRetention defaultRetention() {
        return this.defaultRetention;
    }

    /**
     * Set the defaultRetention property: The default Object Lock retention mode and period that you want to apply to
     * new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode``
     * and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For
     * more information about allowable values for mode and period, see
     * [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
     * The container element for specifying the default Object Lock retention settings for new objects placed in the
     * specified bucket. + The ``DefaultRetention`` settings require both a mode and a period. + The
     * ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify
     * ``Days`` and ``Years`` at the same time.
     * 
     * @param defaultRetention the defaultRetention value to set.
     * @return the ObjectLockRule object itself.
     */
    public ObjectLockRule withDefaultRetention(DefaultRetention defaultRetention) {
        this.defaultRetention = defaultRetention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultRetention() != null) {
            defaultRetention().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("defaultRetention", this.defaultRetention);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ObjectLockRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ObjectLockRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ObjectLockRule.
     */
    public static ObjectLockRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ObjectLockRule deserializedObjectLockRule = new ObjectLockRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultRetention".equals(fieldName)) {
                    deserializedObjectLockRule.defaultRetention = DefaultRetention.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedObjectLockRule;
        });
    }
}
