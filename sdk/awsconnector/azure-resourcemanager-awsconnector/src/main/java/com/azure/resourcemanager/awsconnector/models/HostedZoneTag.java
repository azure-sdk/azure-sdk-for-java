// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of HostedZoneTag.
 */
@Fluent
public final class HostedZoneTag implements JsonSerializable<HostedZoneTag> {
    /*
     * The value of ``Key`` depends on the operation that you want to perform: + *Add a tag to a health check or hosted
     * zone*: ``Key`` is the name that you want to give the new tag. + *Edit a tag*: ``Key`` is the name of the tag that
     * you want to change the ``Value`` for. + *Delete a key*: ``Key`` is the name of the tag you want to remove. +
     * *Give a name to a health check*: Edit the default ``Name`` tag. In the Amazon Route 53 console, the list of your
     * health checks includes a *Name* column that lets you see the name that you've given to each health check.
     */
    private String key;

    /*
     * The value of ``Value`` depends on the operation that you want to perform: + *Add a tag to a health check or
     * hosted zone*: ``Value`` is the value that you want to give the new tag. + *Edit a tag*: ``Value`` is the new
     * value that you want to assign the tag.
     */
    private String value;

    /**
     * Creates an instance of HostedZoneTag class.
     */
    public HostedZoneTag() {
    }

    /**
     * Get the key property: The value of ``Key`` depends on the operation that you want to perform: + *Add a tag to a
     * health check or hosted zone*: ``Key`` is the name that you want to give the new tag. + *Edit a tag*: ``Key`` is
     * the name of the tag that you want to change the ``Value`` for. + *Delete a key*: ``Key`` is the name of the tag
     * you want to remove. + *Give a name to a health check*: Edit the default ``Name`` tag. In the Amazon Route 53
     * console, the list of your health checks includes a *Name* column that lets you see the name that you've given to
     * each health check.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The value of ``Key`` depends on the operation that you want to perform: + *Add a tag to a
     * health check or hosted zone*: ``Key`` is the name that you want to give the new tag. + *Edit a tag*: ``Key`` is
     * the name of the tag that you want to change the ``Value`` for. + *Delete a key*: ``Key`` is the name of the tag
     * you want to remove. + *Give a name to a health check*: Edit the default ``Name`` tag. In the Amazon Route 53
     * console, the list of your health checks includes a *Name* column that lets you see the name that you've given to
     * each health check.
     * 
     * @param key the key value to set.
     * @return the HostedZoneTag object itself.
     */
    public HostedZoneTag withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the value property: The value of ``Value`` depends on the operation that you want to perform: + *Add a tag to
     * a health check or hosted zone*: ``Value`` is the value that you want to give the new tag. + *Edit a tag*:
     * ``Value`` is the new value that you want to assign the tag.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The value of ``Value`` depends on the operation that you want to perform: + *Add a tag to
     * a health check or hosted zone*: ``Value`` is the value that you want to give the new tag. + *Edit a tag*:
     * ``Value`` is the new value that you want to assign the tag.
     * 
     * @param value the value value to set.
     * @return the HostedZoneTag object itself.
     */
    public HostedZoneTag withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostedZoneTag from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostedZoneTag if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostedZoneTag.
     */
    public static HostedZoneTag fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostedZoneTag deserializedHostedZoneTag = new HostedZoneTag();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedHostedZoneTag.key = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedHostedZoneTag.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostedZoneTag;
        });
    }
}
