// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ResourceRequirement.
 */
@Fluent
public final class ResourceRequirement implements JsonSerializable<ResourceRequirement> {
    /*
     * The type of resource to assign to a container. The supported values are ``GPU`` or ``InferenceAccelerator``.
     */
    private String type;

    /*
     * The value for the specified resource type. If the ``GPU`` type is used, the value is the number of physical
     * ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all
     * containers in a task can't exceed the number of available GPUs on the container instance that the task is
     * launched on. If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName`` for an
     * [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html)
     * specified in a task definition.
     */
    private String value;

    /**
     * Creates an instance of ResourceRequirement class.
     */
    public ResourceRequirement() {
    }

    /**
     * Get the type property: The type of resource to assign to a container. The supported values are ``GPU`` or
     * ``InferenceAccelerator``.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of resource to assign to a container. The supported values are ``GPU`` or
     * ``InferenceAccelerator``.
     * 
     * @param type the type value to set.
     * @return the ResourceRequirement object itself.
     */
    public ResourceRequirement withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: The value for the specified resource type. If the ``GPU`` type is used, the value is the
     * number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's
     * reserved for all containers in a task can't exceed the number of available GPUs on the container instance that
     * the task is launched on. If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName``
     * for an
     * [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html)
     * specified in a task definition.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The value for the specified resource type. If the ``GPU`` type is used, the value is the
     * number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's
     * reserved for all containers in a task can't exceed the number of available GPUs on the container instance that
     * the task is launched on. If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName``
     * for an
     * [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html)
     * specified in a task definition.
     * 
     * @param value the value value to set.
     * @return the ResourceRequirement object itself.
     */
    public ResourceRequirement withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceRequirement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceRequirement if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceRequirement.
     */
    public static ResourceRequirement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceRequirement deserializedResourceRequirement = new ResourceRequirement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedResourceRequirement.type = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedResourceRequirement.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceRequirement;
        });
    }
}
