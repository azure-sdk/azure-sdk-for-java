// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EBSOptions.
 */
@Fluent
public final class EbsOptions implements JsonSerializable<EbsOptions> {
    /*
     * <p>Indicates whether EBS volumes are attached to data nodes in an OpenSearch Service domain.</p>
     */
    private Boolean ebsEnabled;

    /*
     * <p>Specifies the baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only
     * for the <code>gp3</code> and provisioned IOPS EBS volume types.</p>
     */
    private Integer iops;

    /*
     * <p>Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the
     * <code>gp3</code> volume type.</p>
     */
    private Integer throughput;

    /*
     * <p>Specifies the size (in GiB) of EBS volumes attached to data nodes.</p>
     */
    private Integer volumeSize;

    /*
     * <p>Specifies the type of EBS volumes attached to data nodes.</p>
     */
    private VolumeTypeEnumValue volumeType;

    /**
     * Creates an instance of EbsOptions class.
     */
    public EbsOptions() {
    }

    /**
     * Get the ebsEnabled property: &lt;p&gt;Indicates whether EBS volumes are attached to data nodes in an OpenSearch
     * Service domain.&lt;/p&gt;.
     * 
     * @return the ebsEnabled value.
     */
    public Boolean ebsEnabled() {
        return this.ebsEnabled;
    }

    /**
     * Set the ebsEnabled property: &lt;p&gt;Indicates whether EBS volumes are attached to data nodes in an OpenSearch
     * Service domain.&lt;/p&gt;.
     * 
     * @param ebsEnabled the ebsEnabled value to set.
     * @return the EbsOptions object itself.
     */
    public EbsOptions withEbsEnabled(Boolean ebsEnabled) {
        this.ebsEnabled = ebsEnabled;
        return this;
    }

    /**
     * Get the iops property: &lt;p&gt;Specifies the baseline input/output (I/O) performance of EBS volumes attached to
     * data nodes. Applicable only for the &lt;code&gt;gp3&lt;/code&gt; and provisioned IOPS EBS volume
     * types.&lt;/p&gt;.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: &lt;p&gt;Specifies the baseline input/output (I/O) performance of EBS volumes attached to
     * data nodes. Applicable only for the &lt;code&gt;gp3&lt;/code&gt; and provisioned IOPS EBS volume
     * types.&lt;/p&gt;.
     * 
     * @param iops the iops value to set.
     * @return the EbsOptions object itself.
     */
    public EbsOptions withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the throughput property: &lt;p&gt;Specifies the throughput (in MiB/s) of the EBS volumes attached to data
     * nodes. Applicable only for the &lt;code&gt;gp3&lt;/code&gt; volume type.&lt;/p&gt;.
     * 
     * @return the throughput value.
     */
    public Integer throughput() {
        return this.throughput;
    }

    /**
     * Set the throughput property: &lt;p&gt;Specifies the throughput (in MiB/s) of the EBS volumes attached to data
     * nodes. Applicable only for the &lt;code&gt;gp3&lt;/code&gt; volume type.&lt;/p&gt;.
     * 
     * @param throughput the throughput value to set.
     * @return the EbsOptions object itself.
     */
    public EbsOptions withThroughput(Integer throughput) {
        this.throughput = throughput;
        return this;
    }

    /**
     * Get the volumeSize property: &lt;p&gt;Specifies the size (in GiB) of EBS volumes attached to data
     * nodes.&lt;/p&gt;.
     * 
     * @return the volumeSize value.
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    /**
     * Set the volumeSize property: &lt;p&gt;Specifies the size (in GiB) of EBS volumes attached to data
     * nodes.&lt;/p&gt;.
     * 
     * @param volumeSize the volumeSize value to set.
     * @return the EbsOptions object itself.
     */
    public EbsOptions withVolumeSize(Integer volumeSize) {
        this.volumeSize = volumeSize;
        return this;
    }

    /**
     * Get the volumeType property: &lt;p&gt;Specifies the type of EBS volumes attached to data nodes.&lt;/p&gt;.
     * 
     * @return the volumeType value.
     */
    public VolumeTypeEnumValue volumeType() {
        return this.volumeType;
    }

    /**
     * Set the volumeType property: &lt;p&gt;Specifies the type of EBS volumes attached to data nodes.&lt;/p&gt;.
     * 
     * @param volumeType the volumeType value to set.
     * @return the EbsOptions object itself.
     */
    public EbsOptions withVolumeType(VolumeTypeEnumValue volumeType) {
        this.volumeType = volumeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (volumeType() != null) {
            volumeType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("ebsEnabled", this.ebsEnabled);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeNumberField("throughput", this.throughput);
        jsonWriter.writeNumberField("volumeSize", this.volumeSize);
        jsonWriter.writeJsonField("volumeType", this.volumeType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EbsOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EbsOptions if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the EbsOptions.
     */
    public static EbsOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EbsOptions deserializedEbsOptions = new EbsOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ebsEnabled".equals(fieldName)) {
                    deserializedEbsOptions.ebsEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("iops".equals(fieldName)) {
                    deserializedEbsOptions.iops = reader.getNullable(JsonReader::getInt);
                } else if ("throughput".equals(fieldName)) {
                    deserializedEbsOptions.throughput = reader.getNullable(JsonReader::getInt);
                } else if ("volumeSize".equals(fieldName)) {
                    deserializedEbsOptions.volumeSize = reader.getNullable(JsonReader::getInt);
                } else if ("volumeType".equals(fieldName)) {
                    deserializedEbsOptions.volumeType = VolumeTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEbsOptions;
        });
    }
}
