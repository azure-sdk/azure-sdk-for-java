// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of VPCDerivedInfo.
 */
@Fluent
public final class VpcDerivedInfo implements JsonSerializable<VpcDerivedInfo> {
    /*
     * <p>The list of Availability Zones associated with the VPC subnets.</p>
     */
    private List<String> availabilityZones;

    /*
     * <p>The list of security group IDs associated with the VPC endpoints for the domain.</p>
     */
    private List<String> securityGroupIds;

    /*
     * <p>A list of subnet IDs associated with the VPC endpoints for the domain.</p>
     */
    private List<String> subnetIds;

    /*
     * <p>The ID for your VPC. Amazon VPC generates this value when you create a VPC.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of VpcDerivedInfo class.
     */
    public VpcDerivedInfo() {
    }

    /**
     * Get the availabilityZones property: &lt;p&gt;The list of Availability Zones associated with the VPC
     * subnets.&lt;/p&gt;.
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: &lt;p&gt;The list of Availability Zones associated with the VPC
     * subnets.&lt;/p&gt;.
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the VpcDerivedInfo object itself.
     */
    public VpcDerivedInfo withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the securityGroupIds property: &lt;p&gt;The list of security group IDs associated with the VPC endpoints for
     * the domain.&lt;/p&gt;.
     * 
     * @return the securityGroupIds value.
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }

    /**
     * Set the securityGroupIds property: &lt;p&gt;The list of security group IDs associated with the VPC endpoints for
     * the domain.&lt;/p&gt;.
     * 
     * @param securityGroupIds the securityGroupIds value to set.
     * @return the VpcDerivedInfo object itself.
     */
    public VpcDerivedInfo withSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
        return this;
    }

    /**
     * Get the subnetIds property: &lt;p&gt;A list of subnet IDs associated with the VPC endpoints for the
     * domain.&lt;/p&gt;.
     * 
     * @return the subnetIds value.
     */
    public List<String> subnetIds() {
        return this.subnetIds;
    }

    /**
     * Set the subnetIds property: &lt;p&gt;A list of subnet IDs associated with the VPC endpoints for the
     * domain.&lt;/p&gt;.
     * 
     * @param subnetIds the subnetIds value to set.
     * @return the VpcDerivedInfo object itself.
     */
    public VpcDerivedInfo withSubnetIds(List<String> subnetIds) {
        this.subnetIds = subnetIds;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID for your VPC. Amazon VPC generates this value when you create a
     * VPC.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID for your VPC. Amazon VPC generates this value when you create a
     * VPC.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the VpcDerivedInfo object itself.
     */
    public VpcDerivedInfo withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("availabilityZones", this.availabilityZones,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("securityGroupIds", this.securityGroupIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subnetIds", this.subnetIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VpcDerivedInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VpcDerivedInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VpcDerivedInfo.
     */
    public static VpcDerivedInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VpcDerivedInfo deserializedVpcDerivedInfo = new VpcDerivedInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZones".equals(fieldName)) {
                    List<String> availabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedVpcDerivedInfo.availabilityZones = availabilityZones;
                } else if ("securityGroupIds".equals(fieldName)) {
                    List<String> securityGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedVpcDerivedInfo.securityGroupIds = securityGroupIds;
                } else if ("subnetIds".equals(fieldName)) {
                    List<String> subnetIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedVpcDerivedInfo.subnetIds = subnetIds;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedVpcDerivedInfo.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVpcDerivedInfo;
        });
    }
}
