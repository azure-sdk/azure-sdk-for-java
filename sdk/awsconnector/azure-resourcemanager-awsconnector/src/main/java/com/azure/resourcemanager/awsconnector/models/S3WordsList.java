// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of S3WordsList.
 */
@Fluent
public final class S3WordsList implements JsonSerializable<S3WordsList> {
    /*
     * Property bucketName
     */
    private String bucketName;

    /*
     * Property objectKey
     */
    private String objectKey;

    /**
     * Creates an instance of S3WordsList class.
     */
    public S3WordsList() {
    }

    /**
     * Get the bucketName property: Property bucketName.
     * 
     * @return the bucketName value.
     */
    public String bucketName() {
        return this.bucketName;
    }

    /**
     * Set the bucketName property: Property bucketName.
     * 
     * @param bucketName the bucketName value to set.
     * @return the S3WordsList object itself.
     */
    public S3WordsList withBucketName(String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    /**
     * Get the objectKey property: Property objectKey.
     * 
     * @return the objectKey value.
     */
    public String objectKey() {
        return this.objectKey;
    }

    /**
     * Set the objectKey property: Property objectKey.
     * 
     * @param objectKey the objectKey value to set.
     * @return the S3WordsList object itself.
     */
    public S3WordsList withObjectKey(String objectKey) {
        this.objectKey = objectKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bucketName", this.bucketName);
        jsonWriter.writeStringField("objectKey", this.objectKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of S3WordsList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of S3WordsList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the S3WordsList.
     */
    public static S3WordsList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            S3WordsList deserializedS3WordsList = new S3WordsList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucketName".equals(fieldName)) {
                    deserializedS3WordsList.bucketName = reader.getString();
                } else if ("objectKey".equals(fieldName)) {
                    deserializedS3WordsList.objectKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedS3WordsList;
        });
    }
}
