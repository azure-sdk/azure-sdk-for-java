// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Definition of awsCodeBuildProject.
 */
@Fluent
public final class AwsCodeBuildProjectProperties implements JsonSerializable<AwsCodeBuildProjectProperties> {
    /*
     * <p>The Amazon Resource Name (ARN) of the build project.</p>
     */
    private String arn;

    /*
     * <p>Information about the build output artifacts for the build project.</p>
     */
    private ProjectArtifacts artifacts;

    /*
     * <p>Information about the build badge for the build project.</p>
     */
    private ProjectBadge badge;

    /*
     * <p>A <a>ProjectBuildBatchConfig</a> object that defines the batch build options for the project.</p>
     */
    private ProjectBuildBatchConfig buildBatchConfig;

    /*
     * <p>Information about the cache for the build project.</p>
     */
    private ProjectCache cache;

    /*
     * <p>The maximum number of concurrent builds that are allowed for this project.</p> <p>New builds are only started
     * if the current number of builds is less than or equal to this limit. If the current build count meets this limit,
     * new builds are throttled and are not run.</p>
     */
    private Integer concurrentBuildLimit;

    /*
     * <p>When the build project was created, expressed in Unix time format.</p>
     */
    private OffsetDateTime created;

    /*
     * <p>A description that makes the build project easy to identify.</p>
     */
    private String description;

    /*
     * <p>The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.</p>
     * <note> <p>You can use a cross-account KMS key to encrypt the build output artifacts if your service role has
     * permission to that key. </p> </note> <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if
     * available, the CMK's alias (using the format <code>alias/&lt;alias-name&gt;</code>). If you don't specify a
     * value, CodeBuild uses the managed CMK for Amazon Simple Storage Service (Amazon S3). </p>
     */
    private String encryptionKey;

    /*
     * <p>Information about the build environment for this build project.</p>
     */
    private ProjectEnvironment environment;

    /*
     * <p> An array of <code>ProjectFileSystemLocation</code> objects for a CodeBuild build project. A
     * <code>ProjectFileSystemLocation</code> object specifies the <code>identifier</code>, <code>location</code>,
     * <code>mountOptions</code>, <code>mountPoint</code>, and <code>type</code> of a file system created using Amazon
     * Elastic File System. </p>
     */
    private List<ProjectFileSystemLocation> fileSystemLocations;

    /*
     * <p>When the build project's settings were last modified, expressed in Unix time format.</p>
     */
    private OffsetDateTime lastModified;

    /*
     * <p>Information about logs for the build project. A project can create logs in CloudWatch Logs, an S3 bucket, or
     * both. </p>
     */
    private LogsConfig logsConfig;

    /*
     * <p>The name of the build project.</p>
     */
    private String name;

    /*
     * Property projectVisibility
     */
    private ProjectVisibilityTypeEnumValue projectVisibility;

    /*
     * <p>Contains the project identifier used with the public build APIs. </p>
     */
    private String publicProjectAlias;

    /*
     * <p>The number of minutes a build is allowed to be queued before it times out. </p>
     */
    private Integer queuedTimeoutInMinutes;

    /*
     * <p>The ARN of the IAM role that enables CodeBuild to access the CloudWatch Logs and Amazon S3 artifacts for the
     * project's builds.</p>
     */
    private String resourceAccessRole;

    /*
     * <p>An array of <code>ProjectArtifacts</code> objects. </p>
     */
    private List<ProjectArtifacts> secondaryArtifacts;

    /*
     * <p>An array of <code>ProjectSourceVersion</code> objects. If <code>secondarySourceVersions</code> is specified at
     * the build level, then they take over these <code>secondarySourceVersions</code> (at the project level). </p>
     */
    private List<ProjectSourceVersion> secondarySourceVersions;

    /*
     * <p>An array of <code>ProjectSource</code> objects. </p>
     */
    private List<ProjectSource> secondarySources;

    /*
     * <p>The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services services on
     * behalf of the Amazon Web Services account.</p>
     */
    private String serviceRole;

    /*
     * <p>Information about the build input source code for this build project.</p>
     */
    private ProjectSource source;

    /*
     * <p>A version of the build input to be built for this project. If not specified, the latest version is used. If
     * specified, it must be one of:</p> <ul> <li> <p>For CodeCommit: the commit ID, branch, or Git tag to use.</p>
     * </li> <li> <p>For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the
     * version of the source code you want to build. If a pull request ID is specified, it must use the format
     * <code>pr/pull-request-ID</code> (for example <code>pr/25</code>). If a branch name is specified, the branch's
     * HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li> <li> <p>For
     * Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to
     * build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's
     * HEAD commit ID is used.</p> </li> <li> <p>For Amazon S3: the version ID of the object that represents the build
     * input ZIP file to use.</p> </li> </ul> <p>If <code>sourceVersion</code> is specified at the build level, then
     * that version takes precedence over this <code>sourceVersion</code> (at the project level). </p> <p>For more
     * information, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html'>Source Version Sample
     * with CodeBuild</a> in the <i>CodeBuild User Guide</i>. </p>
     */
    private String sourceVersion;

    /*
     * <p>A list of tag key and value pairs associated with this build project.</p> <p>These tags are available for use
     * by Amazon Web Services services that support CodeBuild build project tags.</p>
     */
    private List<TagAutoGenerated7> tags;

    /*
     * <p>How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before timing out any related build that
     * did not get marked as completed. The default is 60 minutes.</p>
     */
    private Integer timeoutInMinutes;

    /*
     * <p>Information about the VPC configuration that CodeBuild accesses.</p>
     */
    private VpcConfig vpcConfig;

    /*
     * <p>Information about a webhook that connects repository events to a build project in CodeBuild.</p>
     */
    private Webhook webhook;

    /**
     * Creates an instance of AwsCodeBuildProjectProperties class.
     */
    public AwsCodeBuildProjectProperties() {
    }

    /**
     * Get the arn property: &lt;p&gt;The Amazon Resource Name (ARN) of the build project.&lt;/p&gt;.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: &lt;p&gt;The Amazon Resource Name (ARN) of the build project.&lt;/p&gt;.
     * 
     * @param arn the arn value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the artifacts property: &lt;p&gt;Information about the build output artifacts for the build
     * project.&lt;/p&gt;.
     * 
     * @return the artifacts value.
     */
    public ProjectArtifacts artifacts() {
        return this.artifacts;
    }

    /**
     * Set the artifacts property: &lt;p&gt;Information about the build output artifacts for the build
     * project.&lt;/p&gt;.
     * 
     * @param artifacts the artifacts value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withArtifacts(ProjectArtifacts artifacts) {
        this.artifacts = artifacts;
        return this;
    }

    /**
     * Get the badge property: &lt;p&gt;Information about the build badge for the build project.&lt;/p&gt;.
     * 
     * @return the badge value.
     */
    public ProjectBadge badge() {
        return this.badge;
    }

    /**
     * Set the badge property: &lt;p&gt;Information about the build badge for the build project.&lt;/p&gt;.
     * 
     * @param badge the badge value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withBadge(ProjectBadge badge) {
        this.badge = badge;
        return this;
    }

    /**
     * Get the buildBatchConfig property: &lt;p&gt;A &lt;a&gt;ProjectBuildBatchConfig&lt;/a&gt; object that defines the
     * batch build options for the project.&lt;/p&gt;.
     * 
     * @return the buildBatchConfig value.
     */
    public ProjectBuildBatchConfig buildBatchConfig() {
        return this.buildBatchConfig;
    }

    /**
     * Set the buildBatchConfig property: &lt;p&gt;A &lt;a&gt;ProjectBuildBatchConfig&lt;/a&gt; object that defines the
     * batch build options for the project.&lt;/p&gt;.
     * 
     * @param buildBatchConfig the buildBatchConfig value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withBuildBatchConfig(ProjectBuildBatchConfig buildBatchConfig) {
        this.buildBatchConfig = buildBatchConfig;
        return this;
    }

    /**
     * Get the cache property: &lt;p&gt;Information about the cache for the build project.&lt;/p&gt;.
     * 
     * @return the cache value.
     */
    public ProjectCache cache() {
        return this.cache;
    }

    /**
     * Set the cache property: &lt;p&gt;Information about the cache for the build project.&lt;/p&gt;.
     * 
     * @param cache the cache value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withCache(ProjectCache cache) {
        this.cache = cache;
        return this;
    }

    /**
     * Get the concurrentBuildLimit property: &lt;p&gt;The maximum number of concurrent builds that are allowed for this
     * project.&lt;/p&gt; &lt;p&gt;New builds are only started if the current number of builds is less than or equal to
     * this limit. If the current build count meets this limit, new builds are throttled and are not run.&lt;/p&gt;.
     * 
     * @return the concurrentBuildLimit value.
     */
    public Integer concurrentBuildLimit() {
        return this.concurrentBuildLimit;
    }

    /**
     * Set the concurrentBuildLimit property: &lt;p&gt;The maximum number of concurrent builds that are allowed for this
     * project.&lt;/p&gt; &lt;p&gt;New builds are only started if the current number of builds is less than or equal to
     * this limit. If the current build count meets this limit, new builds are throttled and are not run.&lt;/p&gt;.
     * 
     * @param concurrentBuildLimit the concurrentBuildLimit value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withConcurrentBuildLimit(Integer concurrentBuildLimit) {
        this.concurrentBuildLimit = concurrentBuildLimit;
        return this;
    }

    /**
     * Get the created property: &lt;p&gt;When the build project was created, expressed in Unix time format.&lt;/p&gt;.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.created;
    }

    /**
     * Set the created property: &lt;p&gt;When the build project was created, expressed in Unix time format.&lt;/p&gt;.
     * 
     * @param created the created value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;A description that makes the build project easy to identify.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description that makes the build project easy to identify.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the encryptionKey property: &lt;p&gt;The Key Management Service customer master key (CMK) to be used for
     * encrypting the build output artifacts.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use a cross-account KMS key to
     * encrypt the build output artifacts if your service role has permission to that key. &lt;/p&gt; &lt;/note&gt;
     * &lt;p&gt;You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias
     * (using the format &lt;code&gt;alias/&amp;lt;alias-name&amp;gt;&lt;/code&gt;). If you don't specify a value,
     * CodeBuild uses the managed CMK for Amazon Simple Storage Service (Amazon S3). &lt;/p&gt;.
     * 
     * @return the encryptionKey value.
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }

    /**
     * Set the encryptionKey property: &lt;p&gt;The Key Management Service customer master key (CMK) to be used for
     * encrypting the build output artifacts.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use a cross-account KMS key to
     * encrypt the build output artifacts if your service role has permission to that key. &lt;/p&gt; &lt;/note&gt;
     * &lt;p&gt;You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias
     * (using the format &lt;code&gt;alias/&amp;lt;alias-name&amp;gt;&lt;/code&gt;). If you don't specify a value,
     * CodeBuild uses the managed CMK for Amazon Simple Storage Service (Amazon S3). &lt;/p&gt;.
     * 
     * @param encryptionKey the encryptionKey value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withEncryptionKey(String encryptionKey) {
        this.encryptionKey = encryptionKey;
        return this;
    }

    /**
     * Get the environment property: &lt;p&gt;Information about the build environment for this build project.&lt;/p&gt;.
     * 
     * @return the environment value.
     */
    public ProjectEnvironment environment() {
        return this.environment;
    }

    /**
     * Set the environment property: &lt;p&gt;Information about the build environment for this build project.&lt;/p&gt;.
     * 
     * @param environment the environment value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withEnvironment(ProjectEnvironment environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the fileSystemLocations property: &lt;p&gt; An array of &lt;code&gt;ProjectFileSystemLocation&lt;/code&gt;
     * objects for a CodeBuild build project. A &lt;code&gt;ProjectFileSystemLocation&lt;/code&gt; object specifies the
     * &lt;code&gt;identifier&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;mountOptions&lt;/code&gt;,
     * &lt;code&gt;mountPoint&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; of a file system created using Amazon
     * Elastic File System. &lt;/p&gt;.
     * 
     * @return the fileSystemLocations value.
     */
    public List<ProjectFileSystemLocation> fileSystemLocations() {
        return this.fileSystemLocations;
    }

    /**
     * Set the fileSystemLocations property: &lt;p&gt; An array of &lt;code&gt;ProjectFileSystemLocation&lt;/code&gt;
     * objects for a CodeBuild build project. A &lt;code&gt;ProjectFileSystemLocation&lt;/code&gt; object specifies the
     * &lt;code&gt;identifier&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;mountOptions&lt;/code&gt;,
     * &lt;code&gt;mountPoint&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; of a file system created using Amazon
     * Elastic File System. &lt;/p&gt;.
     * 
     * @param fileSystemLocations the fileSystemLocations value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withFileSystemLocations(List<ProjectFileSystemLocation> fileSystemLocations) {
        this.fileSystemLocations = fileSystemLocations;
        return this;
    }

    /**
     * Get the lastModified property: &lt;p&gt;When the build project's settings were last modified, expressed in Unix
     * time format.&lt;/p&gt;.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Set the lastModified property: &lt;p&gt;When the build project's settings were last modified, expressed in Unix
     * time format.&lt;/p&gt;.
     * 
     * @param lastModified the lastModified value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }

    /**
     * Get the logsConfig property: &lt;p&gt;Information about logs for the build project. A project can create logs in
     * CloudWatch Logs, an S3 bucket, or both. &lt;/p&gt;.
     * 
     * @return the logsConfig value.
     */
    public LogsConfig logsConfig() {
        return this.logsConfig;
    }

    /**
     * Set the logsConfig property: &lt;p&gt;Information about logs for the build project. A project can create logs in
     * CloudWatch Logs, an S3 bucket, or both. &lt;/p&gt;.
     * 
     * @param logsConfig the logsConfig value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withLogsConfig(LogsConfig logsConfig) {
        this.logsConfig = logsConfig;
        return this;
    }

    /**
     * Get the name property: &lt;p&gt;The name of the build project.&lt;/p&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: &lt;p&gt;The name of the build project.&lt;/p&gt;.
     * 
     * @param name the name value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the projectVisibility property: Property projectVisibility.
     * 
     * @return the projectVisibility value.
     */
    public ProjectVisibilityTypeEnumValue projectVisibility() {
        return this.projectVisibility;
    }

    /**
     * Set the projectVisibility property: Property projectVisibility.
     * 
     * @param projectVisibility the projectVisibility value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withProjectVisibility(ProjectVisibilityTypeEnumValue projectVisibility) {
        this.projectVisibility = projectVisibility;
        return this;
    }

    /**
     * Get the publicProjectAlias property: &lt;p&gt;Contains the project identifier used with the public build APIs.
     * &lt;/p&gt;.
     * 
     * @return the publicProjectAlias value.
     */
    public String publicProjectAlias() {
        return this.publicProjectAlias;
    }

    /**
     * Set the publicProjectAlias property: &lt;p&gt;Contains the project identifier used with the public build APIs.
     * &lt;/p&gt;.
     * 
     * @param publicProjectAlias the publicProjectAlias value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withPublicProjectAlias(String publicProjectAlias) {
        this.publicProjectAlias = publicProjectAlias;
        return this;
    }

    /**
     * Get the queuedTimeoutInMinutes property: &lt;p&gt;The number of minutes a build is allowed to be queued before it
     * times out. &lt;/p&gt;.
     * 
     * @return the queuedTimeoutInMinutes value.
     */
    public Integer queuedTimeoutInMinutes() {
        return this.queuedTimeoutInMinutes;
    }

    /**
     * Set the queuedTimeoutInMinutes property: &lt;p&gt;The number of minutes a build is allowed to be queued before it
     * times out. &lt;/p&gt;.
     * 
     * @param queuedTimeoutInMinutes the queuedTimeoutInMinutes value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withQueuedTimeoutInMinutes(Integer queuedTimeoutInMinutes) {
        this.queuedTimeoutInMinutes = queuedTimeoutInMinutes;
        return this;
    }

    /**
     * Get the resourceAccessRole property: &lt;p&gt;The ARN of the IAM role that enables CodeBuild to access the
     * CloudWatch Logs and Amazon S3 artifacts for the project's builds.&lt;/p&gt;.
     * 
     * @return the resourceAccessRole value.
     */
    public String resourceAccessRole() {
        return this.resourceAccessRole;
    }

    /**
     * Set the resourceAccessRole property: &lt;p&gt;The ARN of the IAM role that enables CodeBuild to access the
     * CloudWatch Logs and Amazon S3 artifacts for the project's builds.&lt;/p&gt;.
     * 
     * @param resourceAccessRole the resourceAccessRole value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withResourceAccessRole(String resourceAccessRole) {
        this.resourceAccessRole = resourceAccessRole;
        return this;
    }

    /**
     * Get the secondaryArtifacts property: &lt;p&gt;An array of &lt;code&gt;ProjectArtifacts&lt;/code&gt; objects.
     * &lt;/p&gt;.
     * 
     * @return the secondaryArtifacts value.
     */
    public List<ProjectArtifacts> secondaryArtifacts() {
        return this.secondaryArtifacts;
    }

    /**
     * Set the secondaryArtifacts property: &lt;p&gt;An array of &lt;code&gt;ProjectArtifacts&lt;/code&gt; objects.
     * &lt;/p&gt;.
     * 
     * @param secondaryArtifacts the secondaryArtifacts value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withSecondaryArtifacts(List<ProjectArtifacts> secondaryArtifacts) {
        this.secondaryArtifacts = secondaryArtifacts;
        return this;
    }

    /**
     * Get the secondarySourceVersions property: &lt;p&gt;An array of &lt;code&gt;ProjectSourceVersion&lt;/code&gt;
     * objects. If &lt;code&gt;secondarySourceVersions&lt;/code&gt; is specified at the build level, then they take over
     * these &lt;code&gt;secondarySourceVersions&lt;/code&gt; (at the project level). &lt;/p&gt;.
     * 
     * @return the secondarySourceVersions value.
     */
    public List<ProjectSourceVersion> secondarySourceVersions() {
        return this.secondarySourceVersions;
    }

    /**
     * Set the secondarySourceVersions property: &lt;p&gt;An array of &lt;code&gt;ProjectSourceVersion&lt;/code&gt;
     * objects. If &lt;code&gt;secondarySourceVersions&lt;/code&gt; is specified at the build level, then they take over
     * these &lt;code&gt;secondarySourceVersions&lt;/code&gt; (at the project level). &lt;/p&gt;.
     * 
     * @param secondarySourceVersions the secondarySourceVersions value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties
        withSecondarySourceVersions(List<ProjectSourceVersion> secondarySourceVersions) {
        this.secondarySourceVersions = secondarySourceVersions;
        return this;
    }

    /**
     * Get the secondarySources property: &lt;p&gt;An array of &lt;code&gt;ProjectSource&lt;/code&gt; objects.
     * &lt;/p&gt;.
     * 
     * @return the secondarySources value.
     */
    public List<ProjectSource> secondarySources() {
        return this.secondarySources;
    }

    /**
     * Set the secondarySources property: &lt;p&gt;An array of &lt;code&gt;ProjectSource&lt;/code&gt; objects.
     * &lt;/p&gt;.
     * 
     * @param secondarySources the secondarySources value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withSecondarySources(List<ProjectSource> secondarySources) {
        this.secondarySources = secondarySources;
        return this;
    }

    /**
     * Get the serviceRole property: &lt;p&gt;The ARN of the IAM role that enables CodeBuild to interact with dependent
     * Amazon Web Services services on behalf of the Amazon Web Services account.&lt;/p&gt;.
     * 
     * @return the serviceRole value.
     */
    public String serviceRole() {
        return this.serviceRole;
    }

    /**
     * Set the serviceRole property: &lt;p&gt;The ARN of the IAM role that enables CodeBuild to interact with dependent
     * Amazon Web Services services on behalf of the Amazon Web Services account.&lt;/p&gt;.
     * 
     * @param serviceRole the serviceRole value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withServiceRole(String serviceRole) {
        this.serviceRole = serviceRole;
        return this;
    }

    /**
     * Get the source property: &lt;p&gt;Information about the build input source code for this build
     * project.&lt;/p&gt;.
     * 
     * @return the source value.
     */
    public ProjectSource source() {
        return this.source;
    }

    /**
     * Set the source property: &lt;p&gt;Information about the build input source code for this build
     * project.&lt;/p&gt;.
     * 
     * @param source the source value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withSource(ProjectSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get the sourceVersion property: &lt;p&gt;A version of the build input to be built for this project. If not
     * specified, the latest version is used. If specified, it must be one of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;For CodeCommit: the commit ID, branch, or Git tag to use.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For
     * GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source
     * code you want to build. If a pull request ID is specified, it must use the format
     * &lt;code&gt;pr/pull-request-ID&lt;/code&gt; (for example &lt;code&gt;pr/25&lt;/code&gt;). If a branch name is
     * specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
     * used.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Bitbucket: the commit ID, branch name, or tag name that
     * corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD
     * commit ID is used. If not specified, the default branch's HEAD commit ID is used.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;For Amazon S3: the version ID of the object that represents the build input ZIP file to
     * use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;sourceVersion&lt;/code&gt; is specified at the
     * build level, then that version takes precedence over this &lt;code&gt;sourceVersion&lt;/code&gt; (at the project
     * level). &lt;/p&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html'&gt;Source Version Sample
     * with CodeBuild&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;. &lt;/p&gt;.
     * 
     * @return the sourceVersion value.
     */
    public String sourceVersion() {
        return this.sourceVersion;
    }

    /**
     * Set the sourceVersion property: &lt;p&gt;A version of the build input to be built for this project. If not
     * specified, the latest version is used. If specified, it must be one of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt;For CodeCommit: the commit ID, branch, or Git tag to use.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For
     * GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source
     * code you want to build. If a pull request ID is specified, it must use the format
     * &lt;code&gt;pr/pull-request-ID&lt;/code&gt; (for example &lt;code&gt;pr/25&lt;/code&gt;). If a branch name is
     * specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is
     * used.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Bitbucket: the commit ID, branch name, or tag name that
     * corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD
     * commit ID is used. If not specified, the default branch's HEAD commit ID is used.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;For Amazon S3: the version ID of the object that represents the build input ZIP file to
     * use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;sourceVersion&lt;/code&gt; is specified at the
     * build level, then that version takes precedence over this &lt;code&gt;sourceVersion&lt;/code&gt; (at the project
     * level). &lt;/p&gt; &lt;p&gt;For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html'&gt;Source Version Sample
     * with CodeBuild&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;. &lt;/p&gt;.
     * 
     * @param sourceVersion the sourceVersion value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withSourceVersion(String sourceVersion) {
        this.sourceVersion = sourceVersion;
        return this;
    }

    /**
     * Get the tags property: &lt;p&gt;A list of tag key and value pairs associated with this build project.&lt;/p&gt;
     * &lt;p&gt;These tags are available for use by Amazon Web Services services that support CodeBuild build project
     * tags.&lt;/p&gt;.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated7> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: &lt;p&gt;A list of tag key and value pairs associated with this build project.&lt;/p&gt;
     * &lt;p&gt;These tags are available for use by Amazon Web Services services that support CodeBuild build project
     * tags.&lt;/p&gt;.
     * 
     * @param tags the tags value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withTags(List<TagAutoGenerated7> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the timeoutInMinutes property: &lt;p&gt;How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait
     * before timing out any related build that did not get marked as completed. The default is 60 minutes.&lt;/p&gt;.
     * 
     * @return the timeoutInMinutes value.
     */
    public Integer timeoutInMinutes() {
        return this.timeoutInMinutes;
    }

    /**
     * Set the timeoutInMinutes property: &lt;p&gt;How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait
     * before timing out any related build that did not get marked as completed. The default is 60 minutes.&lt;/p&gt;.
     * 
     * @param timeoutInMinutes the timeoutInMinutes value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withTimeoutInMinutes(Integer timeoutInMinutes) {
        this.timeoutInMinutes = timeoutInMinutes;
        return this;
    }

    /**
     * Get the vpcConfig property: &lt;p&gt;Information about the VPC configuration that CodeBuild accesses.&lt;/p&gt;.
     * 
     * @return the vpcConfig value.
     */
    public VpcConfig vpcConfig() {
        return this.vpcConfig;
    }

    /**
     * Set the vpcConfig property: &lt;p&gt;Information about the VPC configuration that CodeBuild accesses.&lt;/p&gt;.
     * 
     * @param vpcConfig the vpcConfig value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withVpcConfig(VpcConfig vpcConfig) {
        this.vpcConfig = vpcConfig;
        return this;
    }

    /**
     * Get the webhook property: &lt;p&gt;Information about a webhook that connects repository events to a build project
     * in CodeBuild.&lt;/p&gt;.
     * 
     * @return the webhook value.
     */
    public Webhook webhook() {
        return this.webhook;
    }

    /**
     * Set the webhook property: &lt;p&gt;Information about a webhook that connects repository events to a build project
     * in CodeBuild.&lt;/p&gt;.
     * 
     * @param webhook the webhook value to set.
     * @return the AwsCodeBuildProjectProperties object itself.
     */
    public AwsCodeBuildProjectProperties withWebhook(Webhook webhook) {
        this.webhook = webhook;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (artifacts() != null) {
            artifacts().validate();
        }
        if (badge() != null) {
            badge().validate();
        }
        if (buildBatchConfig() != null) {
            buildBatchConfig().validate();
        }
        if (cache() != null) {
            cache().validate();
        }
        if (environment() != null) {
            environment().validate();
        }
        if (fileSystemLocations() != null) {
            fileSystemLocations().forEach(e -> e.validate());
        }
        if (logsConfig() != null) {
            logsConfig().validate();
        }
        if (projectVisibility() != null) {
            projectVisibility().validate();
        }
        if (secondaryArtifacts() != null) {
            secondaryArtifacts().forEach(e -> e.validate());
        }
        if (secondarySourceVersions() != null) {
            secondarySourceVersions().forEach(e -> e.validate());
        }
        if (secondarySources() != null) {
            secondarySources().forEach(e -> e.validate());
        }
        if (source() != null) {
            source().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (vpcConfig() != null) {
            vpcConfig().validate();
        }
        if (webhook() != null) {
            webhook().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeJsonField("artifacts", this.artifacts);
        jsonWriter.writeJsonField("badge", this.badge);
        jsonWriter.writeJsonField("buildBatchConfig", this.buildBatchConfig);
        jsonWriter.writeJsonField("cache", this.cache);
        jsonWriter.writeNumberField("concurrentBuildLimit", this.concurrentBuildLimit);
        jsonWriter.writeStringField("created",
            this.created == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.created));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("encryptionKey", this.encryptionKey);
        jsonWriter.writeJsonField("environment", this.environment);
        jsonWriter.writeArrayField("fileSystemLocations", this.fileSystemLocations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("lastModified",
            this.lastModified == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModified));
        jsonWriter.writeJsonField("logsConfig", this.logsConfig);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("projectVisibility", this.projectVisibility);
        jsonWriter.writeStringField("publicProjectAlias", this.publicProjectAlias);
        jsonWriter.writeNumberField("queuedTimeoutInMinutes", this.queuedTimeoutInMinutes);
        jsonWriter.writeStringField("resourceAccessRole", this.resourceAccessRole);
        jsonWriter.writeArrayField("secondaryArtifacts", this.secondaryArtifacts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("secondarySourceVersions", this.secondarySourceVersions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("secondarySources", this.secondarySources,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("serviceRole", this.serviceRole);
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeStringField("sourceVersion", this.sourceVersion);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("timeoutInMinutes", this.timeoutInMinutes);
        jsonWriter.writeJsonField("vpcConfig", this.vpcConfig);
        jsonWriter.writeJsonField("webhook", this.webhook);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsCodeBuildProjectProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsCodeBuildProjectProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsCodeBuildProjectProperties.
     */
    public static AwsCodeBuildProjectProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsCodeBuildProjectProperties deserializedAwsCodeBuildProjectProperties
                = new AwsCodeBuildProjectProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.arn = reader.getString();
                } else if ("artifacts".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.artifacts = ProjectArtifacts.fromJson(reader);
                } else if ("badge".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.badge = ProjectBadge.fromJson(reader);
                } else if ("buildBatchConfig".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.buildBatchConfig
                        = ProjectBuildBatchConfig.fromJson(reader);
                } else if ("cache".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.cache = ProjectCache.fromJson(reader);
                } else if ("concurrentBuildLimit".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.concurrentBuildLimit
                        = reader.getNullable(JsonReader::getInt);
                } else if ("created".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("description".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.description = reader.getString();
                } else if ("encryptionKey".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.encryptionKey = reader.getString();
                } else if ("environment".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.environment = ProjectEnvironment.fromJson(reader);
                } else if ("fileSystemLocations".equals(fieldName)) {
                    List<ProjectFileSystemLocation> fileSystemLocations
                        = reader.readArray(reader1 -> ProjectFileSystemLocation.fromJson(reader1));
                    deserializedAwsCodeBuildProjectProperties.fileSystemLocations = fileSystemLocations;
                } else if ("lastModified".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.lastModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("logsConfig".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.logsConfig = LogsConfig.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.name = reader.getString();
                } else if ("projectVisibility".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.projectVisibility
                        = ProjectVisibilityTypeEnumValue.fromJson(reader);
                } else if ("publicProjectAlias".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.publicProjectAlias = reader.getString();
                } else if ("queuedTimeoutInMinutes".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.queuedTimeoutInMinutes
                        = reader.getNullable(JsonReader::getInt);
                } else if ("resourceAccessRole".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.resourceAccessRole = reader.getString();
                } else if ("secondaryArtifacts".equals(fieldName)) {
                    List<ProjectArtifacts> secondaryArtifacts
                        = reader.readArray(reader1 -> ProjectArtifacts.fromJson(reader1));
                    deserializedAwsCodeBuildProjectProperties.secondaryArtifacts = secondaryArtifacts;
                } else if ("secondarySourceVersions".equals(fieldName)) {
                    List<ProjectSourceVersion> secondarySourceVersions
                        = reader.readArray(reader1 -> ProjectSourceVersion.fromJson(reader1));
                    deserializedAwsCodeBuildProjectProperties.secondarySourceVersions = secondarySourceVersions;
                } else if ("secondarySources".equals(fieldName)) {
                    List<ProjectSource> secondarySources = reader.readArray(reader1 -> ProjectSource.fromJson(reader1));
                    deserializedAwsCodeBuildProjectProperties.secondarySources = secondarySources;
                } else if ("serviceRole".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.serviceRole = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.source = ProjectSource.fromJson(reader);
                } else if ("sourceVersion".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.sourceVersion = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated7> tags = reader.readArray(reader1 -> TagAutoGenerated7.fromJson(reader1));
                    deserializedAwsCodeBuildProjectProperties.tags = tags;
                } else if ("timeoutInMinutes".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.timeoutInMinutes = reader.getNullable(JsonReader::getInt);
                } else if ("vpcConfig".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.vpcConfig = VpcConfig.fromJson(reader);
                } else if ("webhook".equals(fieldName)) {
                    deserializedAwsCodeBuildProjectProperties.webhook = Webhook.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsCodeBuildProjectProperties;
        });
    }
}
