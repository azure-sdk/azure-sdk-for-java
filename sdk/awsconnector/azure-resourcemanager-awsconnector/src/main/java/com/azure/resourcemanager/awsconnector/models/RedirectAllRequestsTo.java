// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of RedirectAllRequestsTo.
 */
@Fluent
public final class RedirectAllRequestsTo implements JsonSerializable<RedirectAllRequestsTo> {
    /*
     * Name of the host where requests are redirected.
     */
    private String hostname;

    /*
     * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
     */
    private RedirectAllRequestsToProtocol protocol;

    /**
     * Creates an instance of RedirectAllRequestsTo class.
     */
    public RedirectAllRequestsTo() {
    }

    /**
     * Get the hostname property: Name of the host where requests are redirected.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: Name of the host where requests are redirected.
     * 
     * @param hostname the hostname value to set.
     * @return the RedirectAllRequestsTo object itself.
     */
    public RedirectAllRequestsTo withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the protocol property: Protocol to use when redirecting requests. The default is the protocol that is used in
     * the original request.
     * 
     * @return the protocol value.
     */
    public RedirectAllRequestsToProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Protocol to use when redirecting requests. The default is the protocol that is used in
     * the original request.
     * 
     * @param protocol the protocol value to set.
     * @return the RedirectAllRequestsTo object itself.
     */
    public RedirectAllRequestsTo withProtocol(RedirectAllRequestsToProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RedirectAllRequestsTo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RedirectAllRequestsTo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RedirectAllRequestsTo.
     */
    public static RedirectAllRequestsTo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RedirectAllRequestsTo deserializedRedirectAllRequestsTo = new RedirectAllRequestsTo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostName".equals(fieldName)) {
                    deserializedRedirectAllRequestsTo.hostname = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedRedirectAllRequestsTo.protocol
                        = RedirectAllRequestsToProtocol.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRedirectAllRequestsTo;
        });
    }
}
