// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.awsconnector.fluent.GuardDutyDetectorsClient;
import com.azure.resourcemanager.awsconnector.fluent.models.GuardDutyDetectorInner;
import com.azure.resourcemanager.awsconnector.models.GuardDutyDetector;
import com.azure.resourcemanager.awsconnector.models.GuardDutyDetectors;

public final class GuardDutyDetectorsImpl implements GuardDutyDetectors {
    private static final ClientLogger LOGGER = new ClientLogger(GuardDutyDetectorsImpl.class);

    private final GuardDutyDetectorsClient innerClient;

    private final com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager;

    public GuardDutyDetectorsImpl(GuardDutyDetectorsClient innerClient,
        com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<GuardDutyDetector> list() {
        PagedIterable<GuardDutyDetectorInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GuardDutyDetectorImpl(inner1, this.manager()));
    }

    public PagedIterable<GuardDutyDetector> list(Context context) {
        PagedIterable<GuardDutyDetectorInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GuardDutyDetectorImpl(inner1, this.manager()));
    }

    public PagedIterable<GuardDutyDetector> listByResourceGroup(String resourceGroupName) {
        PagedIterable<GuardDutyDetectorInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GuardDutyDetectorImpl(inner1, this.manager()));
    }

    public PagedIterable<GuardDutyDetector> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<GuardDutyDetectorInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new GuardDutyDetectorImpl(inner1, this.manager()));
    }

    public Response<GuardDutyDetector> getByResourceGroupWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<GuardDutyDetectorInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GuardDutyDetectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GuardDutyDetector getByResourceGroup(String resourceGroupName, String name) {
        GuardDutyDetectorInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new GuardDutyDetectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public void delete(String resourceGroupName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, name, context);
    }

    public GuardDutyDetector getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "guardDutyDetectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'guardDutyDetectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<GuardDutyDetector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "guardDutyDetectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'guardDutyDetectors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "guardDutyDetectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'guardDutyDetectors'.", id)));
        }
        this.delete(resourceGroupName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "guardDutyDetectors");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'guardDutyDetectors'.", id)));
        }
        this.delete(resourceGroupName, name, context);
    }

    private GuardDutyDetectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.awsconnector.AwsconnectorManager manager() {
        return this.serviceManager;
    }

    public GuardDutyDetectorImpl define(String name) {
        return new GuardDutyDetectorImpl(name, this.manager());
    }
}
