// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEfsFileSystem.
 */
@Fluent
public final class AwsEfsFileSystemProperties implements JsonSerializable<AwsEfsFileSystemProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * For One Zone file systems, specify the AWS Availability Zone in which to create the file system. Use the format
     * ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file
     * system types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the
     * *Amazon EFS User Guide*. One Zone file systems are not available in all Availability Zones in AWS-Regions where
     * Amazon EFS is available.
     */
    private String availabilityZoneName;

    /*
     * Use the ``BackupPolicy`` to turn automatic backups on or off for the file system. The backup policy turns
     * automatic backups for the file system on or off.
     */
    private BackupPolicy backupPolicy;

    /*
     * (Optional) A boolean that specifies whether or not to bypass the ``FileSystemPolicy`` lockout safety check. The
     * lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal
     * that is making the request from making future ``PutFileSystemPolicy`` requests on this file system. Set
     * ``BypassPolicyLockoutSafetyCheck`` to ``True`` only when you intend to prevent the IAM principal that is making
     * the request from making subsequent ``PutFileSystemPolicy`` requests on this file system. The default value is
     * ``False``.
     */
    private Boolean bypassPolicyLockoutSafetyCheck;

    /*
     * A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have
     * the option of specifying a KmsKeyId for an existing kms-key-long. If you don't specify a kms-key, then the
     * default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted file system.
     */
    private Boolean encrypted;

    /*
     * Property fileSystemId
     */
    private String fileSystemId;

    /*
     * The ``FileSystemPolicy`` for the EFS file system. A file system policy is an IAM resource policy used to control
     * NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon
     * EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
     */
    private Object fileSystemPolicy;

    /*
     * Describes the protection on the file system. Describes the protection on the file system.
     */
    private FileSystemProtection fileSystemProtection;

    /*
     * Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name
     * your file system on creation by including a ``'Key':'Name','Value':'{value}'`` key-value pair. Each key must be
     * unique. For more information, see [Tagging
     * resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
     */
    private List<ElasticFileSystemTag> fileSystemTags;

    /*
     * The ID of the kms-key-long to be used to protect the encrypted file system. This parameter is only required if
     * you want to use a nondefault kms-key. If this parameter is not specified, the default kms-key for EFS is used.
     * This ID can be in one of the following formats: + Key ID - A unique identifier of the key, for example
     * ``1234abcd-12ab-34cd-56ef-1234567890ab``. + ARN - An Amazon Resource Name (ARN) for the key, for example
     * ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``. + Key alias - A previously
     * created display name for a key, for example ``alias/projectKey1``. + Key alias ARN - An ARN for a key alias, for
     * example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``. If ``KmsKeyId`` is specified, the ``Encrypted``
     * parameter must be set to true.
     */
    private String kmsKeyId;

    /*
     * An array of ``LifecyclePolicy`` objects that define the file system's ``LifecycleConfiguration`` object. A
     * ``LifecycleConfiguration`` object informs Lifecycle management of the following: + When to move files in the file
     * system from primary storage to IA storage. + When to move files in the file system from primary storage or IA
     * storage to Archive storage. + When to move files that are in IA or Archive storage to primary storage. EFS
     * requires that each ``LifecyclePolicy`` object have only a single transition. This means that in a request body,
     * ``LifecyclePolicies`` needs to be structured as an array of ``LifecyclePolicy`` objects, one object for each
     * transition, ``TransitionToIA``, ``TransitionToArchive`` ``TransitionToPrimaryStorageClass``. See the example
     * requests in the following section for more information.
     */
    private List<LifecyclePolicyAutoGenerated> lifecyclePolicies;

    /*
     * The Performance mode of the file system. We recommend ``generalPurpose`` performance mode for all file systems.
     * File systems using the ``maxIO`` performance mode can scale to higher levels of aggregate throughput and
     * operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode
     * can't be changed after the file system has been created. The ``maxIO`` mode is not supported on One Zone file
     * systems. Due to the higher per-operation latencies with Max I/O, we recommend using General Purpose performance
     * mode for all file systems. Default is ``generalPurpose``.
     */
    private String performanceMode;

    /*
     * The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that
     * you're creating. Required if ``ThroughputMode`` is set to ``provisioned``. Valid values are 1-3414 MiBps, with
     * the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS
     * quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon
     * EFS User Guide*.
     */
    private Integer provisionedThroughputInMibps;

    /*
     * Describes the replication configuration for a specific file system. Describes the replication configuration for a
     * specific file system.
     */
    private ReplicationConfiguration replicationConfiguration;

    /*
     * Specifies the throughput mode for the file system. The mode can be ``bursting``, ``provisioned``, or ``elastic``.
     * If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for ``ProvisionedThroughputInMibps``.
     * After you create the file system, you can decrease your file system's Provisioned throughput or change between
     * the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with
     * provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the
     * *Amazon EFS User Guide*. Default is ``bursting``.
     */
    private String throughputMode;

    /**
     * Creates an instance of AwsEfsFileSystemProperties class.
     */
    public AwsEfsFileSystemProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the availabilityZoneName property: For One Zone file systems, specify the AWS Availability Zone in which to
     * create the file system. Use the format ``us-east-1a`` to specify the Availability Zone. For more information
     * about One Zone file systems, see [EFS file system
     * types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon
     * EFS User Guide*. One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon
     * EFS is available.
     * 
     * @return the availabilityZoneName value.
     */
    public String availabilityZoneName() {
        return this.availabilityZoneName;
    }

    /**
     * Set the availabilityZoneName property: For One Zone file systems, specify the AWS Availability Zone in which to
     * create the file system. Use the format ``us-east-1a`` to specify the Availability Zone. For more information
     * about One Zone file systems, see [EFS file system
     * types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon
     * EFS User Guide*. One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon
     * EFS is available.
     * 
     * @param availabilityZoneName the availabilityZoneName value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withAvailabilityZoneName(String availabilityZoneName) {
        this.availabilityZoneName = availabilityZoneName;
        return this;
    }

    /**
     * Get the backupPolicy property: Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
     * The backup policy turns automatic backups for the file system on or off.
     * 
     * @return the backupPolicy value.
     */
    public BackupPolicy backupPolicy() {
        return this.backupPolicy;
    }

    /**
     * Set the backupPolicy property: Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
     * The backup policy turns automatic backups for the file system on or off.
     * 
     * @param backupPolicy the backupPolicy value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withBackupPolicy(BackupPolicy backupPolicy) {
        this.backupPolicy = backupPolicy;
        return this;
    }

    /**
     * Get the bypassPolicyLockoutSafetyCheck property: (Optional) A boolean that specifies whether or not to bypass the
     * ``FileSystemPolicy`` lockout safety check. The lockout safety check determines whether the policy in the request
     * will lock out, or prevent, the IAM principal that is making the request from making future
     * ``PutFileSystemPolicy`` requests on this file system. Set ``BypassPolicyLockoutSafetyCheck`` to ``True`` only
     * when you intend to prevent the IAM principal that is making the request from making subsequent
     * ``PutFileSystemPolicy`` requests on this file system. The default value is ``False``.
     * 
     * @return the bypassPolicyLockoutSafetyCheck value.
     */
    public Boolean bypassPolicyLockoutSafetyCheck() {
        return this.bypassPolicyLockoutSafetyCheck;
    }

    /**
     * Set the bypassPolicyLockoutSafetyCheck property: (Optional) A boolean that specifies whether or not to bypass the
     * ``FileSystemPolicy`` lockout safety check. The lockout safety check determines whether the policy in the request
     * will lock out, or prevent, the IAM principal that is making the request from making future
     * ``PutFileSystemPolicy`` requests on this file system. Set ``BypassPolicyLockoutSafetyCheck`` to ``True`` only
     * when you intend to prevent the IAM principal that is making the request from making subsequent
     * ``PutFileSystemPolicy`` requests on this file system. The default value is ``False``.
     * 
     * @param bypassPolicyLockoutSafetyCheck the bypassPolicyLockoutSafetyCheck value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withBypassPolicyLockoutSafetyCheck(Boolean bypassPolicyLockoutSafetyCheck) {
        this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
        return this;
    }

    /**
     * Get the encrypted property: A Boolean value that, if true, creates an encrypted file system. When creating an
     * encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't
     * specify a kms-key, then the default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted
     * file system.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: A Boolean value that, if true, creates an encrypted file system. When creating an
     * encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't
     * specify a kms-key, then the default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted
     * file system.
     * 
     * @param encrypted the encrypted value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the fileSystemId property: Property fileSystemId.
     * 
     * @return the fileSystemId value.
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * Set the fileSystemId property: Property fileSystemId.
     * 
     * @param fileSystemId the fileSystemId value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withFileSystemId(String fileSystemId) {
        this.fileSystemId = fileSystemId;
        return this;
    }

    /**
     * Get the fileSystemPolicy property: The ``FileSystemPolicy`` for the EFS file system. A file system policy is an
     * IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control
     * NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the
     * *Amazon EFS User Guide*.
     * 
     * @return the fileSystemPolicy value.
     */
    public Object fileSystemPolicy() {
        return this.fileSystemPolicy;
    }

    /**
     * Set the fileSystemPolicy property: The ``FileSystemPolicy`` for the EFS file system. A file system policy is an
     * IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control
     * NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the
     * *Amazon EFS User Guide*.
     * 
     * @param fileSystemPolicy the fileSystemPolicy value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withFileSystemPolicy(Object fileSystemPolicy) {
        this.fileSystemPolicy = fileSystemPolicy;
        return this;
    }

    /**
     * Get the fileSystemProtection property: Describes the protection on the file system. Describes the protection on
     * the file system.
     * 
     * @return the fileSystemProtection value.
     */
    public FileSystemProtection fileSystemProtection() {
        return this.fileSystemProtection;
    }

    /**
     * Set the fileSystemProtection property: Describes the protection on the file system. Describes the protection on
     * the file system.
     * 
     * @param fileSystemProtection the fileSystemProtection value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withFileSystemProtection(FileSystemProtection fileSystemProtection) {
        this.fileSystemProtection = fileSystemProtection;
        return this;
    }

    /**
     * Get the fileSystemTags property: Use to create one or more tags associated with the file system. Each tag is a
     * user-defined key-value pair. Name your file system on creation by including a ``'Key':'Name','Value':'{value}'``
     * key-value pair. Each key must be unique. For more information, see [Tagging
     * resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
     * 
     * @return the fileSystemTags value.
     */
    public List<ElasticFileSystemTag> fileSystemTags() {
        return this.fileSystemTags;
    }

    /**
     * Set the fileSystemTags property: Use to create one or more tags associated with the file system. Each tag is a
     * user-defined key-value pair. Name your file system on creation by including a ``'Key':'Name','Value':'{value}'``
     * key-value pair. Each key must be unique. For more information, see [Tagging
     * resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
     * 
     * @param fileSystemTags the fileSystemTags value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withFileSystemTags(List<ElasticFileSystemTag> fileSystemTags) {
        this.fileSystemTags = fileSystemTags;
        return this;
    }

    /**
     * Get the kmsKeyId property: The ID of the kms-key-long to be used to protect the encrypted file system. This
     * parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the
     * default kms-key for EFS is used. This ID can be in one of the following formats: + Key ID - A unique identifier
     * of the key, for example ``1234abcd-12ab-34cd-56ef-1234567890ab``. + ARN - An Amazon Resource Name (ARN) for the
     * key, for example ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``. + Key alias - A
     * previously created display name for a key, for example ``alias/projectKey1``. + Key alias ARN - An ARN for a key
     * alias, for example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``. If ``KmsKeyId`` is specified, the
     * ``Encrypted`` parameter must be set to true.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The ID of the kms-key-long to be used to protect the encrypted file system. This
     * parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the
     * default kms-key for EFS is used. This ID can be in one of the following formats: + Key ID - A unique identifier
     * of the key, for example ``1234abcd-12ab-34cd-56ef-1234567890ab``. + ARN - An Amazon Resource Name (ARN) for the
     * key, for example ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``. + Key alias - A
     * previously created display name for a key, for example ``alias/projectKey1``. + Key alias ARN - An ARN for a key
     * alias, for example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``. If ``KmsKeyId`` is specified, the
     * ``Encrypted`` parameter must be set to true.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the lifecyclePolicies property: An array of ``LifecyclePolicy`` objects that define the file system's
     * ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the
     * following: + When to move files in the file system from primary storage to IA storage. + When to move files in
     * the file system from primary storage or IA storage to Archive storage. + When to move files that are in IA or
     * Archive storage to primary storage. EFS requires that each ``LifecyclePolicy`` object have only a single
     * transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of
     * ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive``
     * ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
     * 
     * @return the lifecyclePolicies value.
     */
    public List<LifecyclePolicyAutoGenerated> lifecyclePolicies() {
        return this.lifecyclePolicies;
    }

    /**
     * Set the lifecyclePolicies property: An array of ``LifecyclePolicy`` objects that define the file system's
     * ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the
     * following: + When to move files in the file system from primary storage to IA storage. + When to move files in
     * the file system from primary storage or IA storage to Archive storage. + When to move files that are in IA or
     * Archive storage to primary storage. EFS requires that each ``LifecyclePolicy`` object have only a single
     * transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of
     * ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive``
     * ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
     * 
     * @param lifecyclePolicies the lifecyclePolicies value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withLifecyclePolicies(List<LifecyclePolicyAutoGenerated> lifecyclePolicies) {
        this.lifecyclePolicies = lifecyclePolicies;
        return this;
    }

    /**
     * Get the performanceMode property: The Performance mode of the file system. We recommend ``generalPurpose``
     * performance mode for all file systems. File systems using the ``maxIO`` performance mode can scale to higher
     * levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most
     * file operations. The performance mode can't be changed after the file system has been created. The ``maxIO`` mode
     * is not supported on One Zone file systems. Due to the higher per-operation latencies with Max I/O, we recommend
     * using General Purpose performance mode for all file systems. Default is ``generalPurpose``.
     * 
     * @return the performanceMode value.
     */
    public String performanceMode() {
        return this.performanceMode;
    }

    /**
     * Set the performanceMode property: The Performance mode of the file system. We recommend ``generalPurpose``
     * performance mode for all file systems. File systems using the ``maxIO`` performance mode can scale to higher
     * levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most
     * file operations. The performance mode can't be changed after the file system has been created. The ``maxIO`` mode
     * is not supported on One Zone file systems. Due to the higher per-operation latencies with Max I/O, we recommend
     * using General Purpose performance mode for all file systems. Default is ``generalPurpose``.
     * 
     * @param performanceMode the performanceMode value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withPerformanceMode(String performanceMode) {
        this.performanceMode = performanceMode;
        return this;
    }

    /**
     * Get the provisionedThroughputInMibps property: The throughput, measured in mebibytes per second (MiBps), that you
     * want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to
     * ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit,
     * contact SUP. For more information, see [Amazon EFS quotas that you can
     * increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
     * 
     * @return the provisionedThroughputInMibps value.
     */
    public Integer provisionedThroughputInMibps() {
        return this.provisionedThroughputInMibps;
    }

    /**
     * Set the provisionedThroughputInMibps property: The throughput, measured in mebibytes per second (MiBps), that you
     * want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to
     * ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit,
     * contact SUP. For more information, see [Amazon EFS quotas that you can
     * increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
     * 
     * @param provisionedThroughputInMibps the provisionedThroughputInMibps value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withProvisionedThroughputInMibps(Integer provisionedThroughputInMibps) {
        this.provisionedThroughputInMibps = provisionedThroughputInMibps;
        return this;
    }

    /**
     * Get the replicationConfiguration property: Describes the replication configuration for a specific file system.
     * Describes the replication configuration for a specific file system.
     * 
     * @return the replicationConfiguration value.
     */
    public ReplicationConfiguration replicationConfiguration() {
        return this.replicationConfiguration;
    }

    /**
     * Set the replicationConfiguration property: Describes the replication configuration for a specific file system.
     * Describes the replication configuration for a specific file system.
     * 
     * @param replicationConfiguration the replicationConfiguration value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withReplicationConfiguration(ReplicationConfiguration replicationConfiguration) {
        this.replicationConfiguration = replicationConfiguration;
        return this;
    }

    /**
     * Get the throughputMode property: Specifies the throughput mode for the file system. The mode can be ``bursting``,
     * ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for
     * ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's
     * Provisioned throughput or change between the throughput modes, with certain time restrictions. For more
     * information, see [Specifying throughput with provisioned
     * mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User
     * Guide*. Default is ``bursting``.
     * 
     * @return the throughputMode value.
     */
    public String throughputMode() {
        return this.throughputMode;
    }

    /**
     * Set the throughputMode property: Specifies the throughput mode for the file system. The mode can be ``bursting``,
     * ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for
     * ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's
     * Provisioned throughput or change between the throughput modes, with certain time restrictions. For more
     * information, see [Specifying throughput with provisioned
     * mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User
     * Guide*. Default is ``bursting``.
     * 
     * @param throughputMode the throughputMode value to set.
     * @return the AwsEfsFileSystemProperties object itself.
     */
    public AwsEfsFileSystemProperties withThroughputMode(String throughputMode) {
        this.throughputMode = throughputMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backupPolicy() != null) {
            backupPolicy().validate();
        }
        if (fileSystemProtection() != null) {
            fileSystemProtection().validate();
        }
        if (fileSystemTags() != null) {
            fileSystemTags().forEach(e -> e.validate());
        }
        if (lifecyclePolicies() != null) {
            lifecyclePolicies().forEach(e -> e.validate());
        }
        if (replicationConfiguration() != null) {
            replicationConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("availabilityZoneName", this.availabilityZoneName);
        jsonWriter.writeJsonField("backupPolicy", this.backupPolicy);
        jsonWriter.writeBooleanField("bypassPolicyLockoutSafetyCheck", this.bypassPolicyLockoutSafetyCheck);
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeStringField("fileSystemId", this.fileSystemId);
        jsonWriter.writeUntypedField("fileSystemPolicy", this.fileSystemPolicy);
        jsonWriter.writeJsonField("fileSystemProtection", this.fileSystemProtection);
        jsonWriter.writeArrayField("fileSystemTags", this.fileSystemTags,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeArrayField("lifecyclePolicies", this.lifecyclePolicies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("performanceMode", this.performanceMode);
        jsonWriter.writeNumberField("provisionedThroughputInMibps", this.provisionedThroughputInMibps);
        jsonWriter.writeJsonField("replicationConfiguration", this.replicationConfiguration);
        jsonWriter.writeStringField("throughputMode", this.throughputMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEfsFileSystemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEfsFileSystemProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEfsFileSystemProperties.
     */
    public static AwsEfsFileSystemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEfsFileSystemProperties deserializedAwsEfsFileSystemProperties = new AwsEfsFileSystemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.arn = reader.getString();
                } else if ("availabilityZoneName".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.availabilityZoneName = reader.getString();
                } else if ("backupPolicy".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.backupPolicy = BackupPolicy.fromJson(reader);
                } else if ("bypassPolicyLockoutSafetyCheck".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.bypassPolicyLockoutSafetyCheck
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("encrypted".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("fileSystemId".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.fileSystemId = reader.getString();
                } else if ("fileSystemPolicy".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.fileSystemPolicy = reader.readUntyped();
                } else if ("fileSystemProtection".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.fileSystemProtection = FileSystemProtection.fromJson(reader);
                } else if ("fileSystemTags".equals(fieldName)) {
                    List<ElasticFileSystemTag> fileSystemTags
                        = reader.readArray(reader1 -> ElasticFileSystemTag.fromJson(reader1));
                    deserializedAwsEfsFileSystemProperties.fileSystemTags = fileSystemTags;
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.kmsKeyId = reader.getString();
                } else if ("lifecyclePolicies".equals(fieldName)) {
                    List<LifecyclePolicyAutoGenerated> lifecyclePolicies
                        = reader.readArray(reader1 -> LifecyclePolicyAutoGenerated.fromJson(reader1));
                    deserializedAwsEfsFileSystemProperties.lifecyclePolicies = lifecyclePolicies;
                } else if ("performanceMode".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.performanceMode = reader.getString();
                } else if ("provisionedThroughputInMibps".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.provisionedThroughputInMibps
                        = reader.getNullable(JsonReader::getInt);
                } else if ("replicationConfiguration".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.replicationConfiguration
                        = ReplicationConfiguration.fromJson(reader);
                } else if ("throughputMode".equals(fieldName)) {
                    deserializedAwsEfsFileSystemProperties.throughputMode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEfsFileSystemProperties;
        });
    }
}
