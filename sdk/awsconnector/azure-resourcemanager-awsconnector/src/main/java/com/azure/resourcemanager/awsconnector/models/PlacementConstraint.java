// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of PlacementConstraint.
 */
@Fluent
public final class PlacementConstraint implements JsonSerializable<PlacementConstraint> {
    /*
     * A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000
     * characters. You can't specify an expression if the constraint type is ``distinctInstance``. For more information,
     * see [Cluster query
     * language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private String expression;

    /*
     * The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular group is running on a
     * different container instance. Use ``memberOf`` to restrict the selection to a group of valid candidates.
     */
    private PlacementConstraintType type;

    /**
     * Creates an instance of PlacementConstraint class.
     */
    public PlacementConstraint() {
    }

    /**
     * Get the expression property: A cluster query language expression to apply to the constraint. The expression can
     * have a maximum length of 2000 characters. You can't specify an expression if the constraint type is
     * ``distinctInstance``. For more information, see [Cluster query
     * language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @return the expression value.
     */
    public String expression() {
        return this.expression;
    }

    /**
     * Set the expression property: A cluster query language expression to apply to the constraint. The expression can
     * have a maximum length of 2000 characters. You can't specify an expression if the constraint type is
     * ``distinctInstance``. For more information, see [Cluster query
     * language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @param expression the expression value to set.
     * @return the PlacementConstraint object itself.
     */
    public PlacementConstraint withExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the type property: The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular
     * group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of
     * valid candidates.
     * 
     * @return the type value.
     */
    public PlacementConstraintType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular
     * group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of
     * valid candidates.
     * 
     * @param type the type value to set.
     * @return the PlacementConstraint object itself.
     */
    public PlacementConstraint withType(PlacementConstraintType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expression", this.expression);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementConstraint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementConstraint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementConstraint.
     */
    public static PlacementConstraint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementConstraint deserializedPlacementConstraint = new PlacementConstraint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expression".equals(fieldName)) {
                    deserializedPlacementConstraint.expression = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPlacementConstraint.type = PlacementConstraintType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementConstraint;
        });
    }
}
