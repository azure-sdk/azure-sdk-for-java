// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsIamGroup.
 */
@Fluent
public final class AwsIamGroupProperties implements JsonSerializable<AwsIamGroupProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * The name of the group to create. Do not include the path in this value. The group name must be unique within the
     * account. Group names are not distinguished by case. For example, you cannot create groups named both 'ADMINS' and
     * 'admins'. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the group name. If
     * you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates
     * that require no or some interruption. If you must replace the resource, specify a new name. If you specify a
     * name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more
     * information, see [Acknowledging Resources in
     * Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-
     * capabilities). Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple
     * Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name,
     * as in the following example: ``{'Fn::Join': ['', [{'Ref': 'AWS::Region'}, {'Ref': 'MyResourceName'}]]}``.
     */
    private String groupName;

    /*
     * The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see [Amazon
     * Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the
     * *General Reference*.
     */
    private List<String> managedPolicyArns;

    /*
     * The path to the group. For more information about paths, see [IAM
     * identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     */
    private String path;

    /*
     * Adds or updates an inline policy document that is embedded in the specified IAM group. To view AWS::IAM::Group
     * snippets, see [Declaring an Group
     * Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-group).
     * The name of each inline policy for a role, user, or group must be unique. If you don't choose unique names,
     * updates to the IAM identity will fail. For information about limits on the number of inline policies that you can
     * embed in a group, see [Limitations on
     * Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
     */
    private List<Policy> policies;

    /**
     * Creates an instance of AwsIamGroupProperties class.
     */
    public AwsIamGroupProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsIamGroupProperties object itself.
     */
    public AwsIamGroupProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the groupName property: The name of the group to create. Do not include the path in this value. The group
     * name must be unique within the account. Group names are not distinguished by case. For example, you cannot create
     * groups named both 'ADMINS' and 'admins'. If you don't specify a name, CFN generates a unique physical ID and uses
     * that ID for the group name. If you specify a name, you cannot perform updates that require replacement of this
     * resource. You can perform updates that require no or some interruption. If you must replace the resource, specify
     * a new name. If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your
     * template's capabilities. For more information, see [Acknowledging Resources in
     * Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
     * Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To
     * prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the
     * following example: ``{'Fn::Join': ['', [{'Ref': 'AWS::Region'}, {'Ref': 'MyResourceName'}]]}``.
     * 
     * @return the groupName value.
     */
    public String groupName() {
        return this.groupName;
    }

    /**
     * Set the groupName property: The name of the group to create. Do not include the path in this value. The group
     * name must be unique within the account. Group names are not distinguished by case. For example, you cannot create
     * groups named both 'ADMINS' and 'admins'. If you don't specify a name, CFN generates a unique physical ID and uses
     * that ID for the group name. If you specify a name, you cannot perform updates that require replacement of this
     * resource. You can perform updates that require no or some interruption. If you must replace the resource, specify
     * a new name. If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your
     * template's capabilities. For more information, see [Acknowledging Resources in
     * Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
     * Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To
     * prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the
     * following example: ``{'Fn::Join': ['', [{'Ref': 'AWS::Region'}, {'Ref': 'MyResourceName'}]]}``.
     * 
     * @param groupName the groupName value to set.
     * @return the AwsIamGroupProperties object itself.
     */
    public AwsIamGroupProperties withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    /**
     * Get the managedPolicyArns property: The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more
     * information about ARNs, see [Amazon Resource Names
     * (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
     * 
     * @return the managedPolicyArns value.
     */
    public List<String> managedPolicyArns() {
        return this.managedPolicyArns;
    }

    /**
     * Set the managedPolicyArns property: The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more
     * information about ARNs, see [Amazon Resource Names
     * (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
     * 
     * @param managedPolicyArns the managedPolicyArns value to set.
     * @return the AwsIamGroupProperties object itself.
     */
    public AwsIamGroupProperties withManagedPolicyArns(List<String> managedPolicyArns) {
        this.managedPolicyArns = managedPolicyArns;
        return this;
    }

    /**
     * Get the path property: The path to the group. For more information about paths, see [IAM
     * identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The path to the group. For more information about paths, see [IAM
     * identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
     * This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its
     * [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting
     * of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it
     * can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most
     * punctuation characters, digits, and upper and lowercased letters.
     * 
     * @param path the path value to set.
     * @return the AwsIamGroupProperties object itself.
     */
    public AwsIamGroupProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the policies property: Adds or updates an inline policy document that is embedded in the specified IAM group.
     * To view AWS::IAM::Group snippets, see [Declaring an Group
     * Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-group).
     * The name of each inline policy for a role, user, or group must be unique. If you don't choose unique names,
     * updates to the IAM identity will fail. For information about limits on the number of inline policies that you can
     * embed in a group, see [Limitations on
     * Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
     * 
     * @return the policies value.
     */
    public List<Policy> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: Adds or updates an inline policy document that is embedded in the specified IAM group.
     * To view AWS::IAM::Group snippets, see [Declaring an Group
     * Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-group).
     * The name of each inline policy for a role, user, or group must be unique. If you don't choose unique names,
     * updates to the IAM identity will fail. For information about limits on the number of inline policies that you can
     * embed in a group, see [Limitations on
     * Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
     * 
     * @param policies the policies value to set.
     * @return the AwsIamGroupProperties object itself.
     */
    public AwsIamGroupProperties withPolicies(List<Policy> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policies() != null) {
            policies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("groupName", this.groupName);
        jsonWriter.writeArrayField("managedPolicyArns", this.managedPolicyArns,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamGroupProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamGroupProperties.
     */
    public static AwsIamGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamGroupProperties deserializedAwsIamGroupProperties = new AwsIamGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsIamGroupProperties.arn = reader.getString();
                } else if ("groupName".equals(fieldName)) {
                    deserializedAwsIamGroupProperties.groupName = reader.getString();
                } else if ("managedPolicyArns".equals(fieldName)) {
                    List<String> managedPolicyArns = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsIamGroupProperties.managedPolicyArns = managedPolicyArns;
                } else if ("path".equals(fieldName)) {
                    deserializedAwsIamGroupProperties.path = reader.getString();
                } else if ("policies".equals(fieldName)) {
                    List<Policy> policies = reader.readArray(reader1 -> Policy.fromJson(reader1));
                    deserializedAwsIamGroupProperties.policies = policies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamGroupProperties;
        });
    }
}
