// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of MatchAttributes.
 */
@Fluent
public final class MatchAttributes implements JsonSerializable<MatchAttributes> {
    /*
     * Property destinationPorts
     */
    private List<PortRange> destinationPorts;

    /*
     * Property destinations
     */
    private List<Address> destinations;

    /*
     * Property protocols
     */
    private List<Integer> protocols;

    /*
     * Property sourcePorts
     */
    private List<PortRange> sourcePorts;

    /*
     * Property sources
     */
    private List<Address> sources;

    /*
     * Property tcpFlags
     */
    private List<TcpFlagField> tcpFlags;

    /**
     * Creates an instance of MatchAttributes class.
     */
    public MatchAttributes() {
    }

    /**
     * Get the destinationPorts property: Property destinationPorts.
     * 
     * @return the destinationPorts value.
     */
    public List<PortRange> destinationPorts() {
        return this.destinationPorts;
    }

    /**
     * Set the destinationPorts property: Property destinationPorts.
     * 
     * @param destinationPorts the destinationPorts value to set.
     * @return the MatchAttributes object itself.
     */
    public MatchAttributes withDestinationPorts(List<PortRange> destinationPorts) {
        this.destinationPorts = destinationPorts;
        return this;
    }

    /**
     * Get the destinations property: Property destinations.
     * 
     * @return the destinations value.
     */
    public List<Address> destinations() {
        return this.destinations;
    }

    /**
     * Set the destinations property: Property destinations.
     * 
     * @param destinations the destinations value to set.
     * @return the MatchAttributes object itself.
     */
    public MatchAttributes withDestinations(List<Address> destinations) {
        this.destinations = destinations;
        return this;
    }

    /**
     * Get the protocols property: Property protocols.
     * 
     * @return the protocols value.
     */
    public List<Integer> protocols() {
        return this.protocols;
    }

    /**
     * Set the protocols property: Property protocols.
     * 
     * @param protocols the protocols value to set.
     * @return the MatchAttributes object itself.
     */
    public MatchAttributes withProtocols(List<Integer> protocols) {
        this.protocols = protocols;
        return this;
    }

    /**
     * Get the sourcePorts property: Property sourcePorts.
     * 
     * @return the sourcePorts value.
     */
    public List<PortRange> sourcePorts() {
        return this.sourcePorts;
    }

    /**
     * Set the sourcePorts property: Property sourcePorts.
     * 
     * @param sourcePorts the sourcePorts value to set.
     * @return the MatchAttributes object itself.
     */
    public MatchAttributes withSourcePorts(List<PortRange> sourcePorts) {
        this.sourcePorts = sourcePorts;
        return this;
    }

    /**
     * Get the sources property: Property sources.
     * 
     * @return the sources value.
     */
    public List<Address> sources() {
        return this.sources;
    }

    /**
     * Set the sources property: Property sources.
     * 
     * @param sources the sources value to set.
     * @return the MatchAttributes object itself.
     */
    public MatchAttributes withSources(List<Address> sources) {
        this.sources = sources;
        return this;
    }

    /**
     * Get the tcpFlags property: Property tcpFlags.
     * 
     * @return the tcpFlags value.
     */
    public List<TcpFlagField> tcpFlags() {
        return this.tcpFlags;
    }

    /**
     * Set the tcpFlags property: Property tcpFlags.
     * 
     * @param tcpFlags the tcpFlags value to set.
     * @return the MatchAttributes object itself.
     */
    public MatchAttributes withTcpFlags(List<TcpFlagField> tcpFlags) {
        this.tcpFlags = tcpFlags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (destinationPorts() != null) {
            destinationPorts().forEach(e -> e.validate());
        }
        if (destinations() != null) {
            destinations().forEach(e -> e.validate());
        }
        if (sourcePorts() != null) {
            sourcePorts().forEach(e -> e.validate());
        }
        if (sources() != null) {
            sources().forEach(e -> e.validate());
        }
        if (tcpFlags() != null) {
            tcpFlags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("destinationPorts", this.destinationPorts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("destinations", this.destinations, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("protocols", this.protocols, (writer, element) -> writer.writeInt(element));
        jsonWriter.writeArrayField("sourcePorts", this.sourcePorts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("sources", this.sources, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("tcpFlags", this.tcpFlags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MatchAttributes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MatchAttributes if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MatchAttributes.
     */
    public static MatchAttributes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MatchAttributes deserializedMatchAttributes = new MatchAttributes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destinationPorts".equals(fieldName)) {
                    List<PortRange> destinationPorts = reader.readArray(reader1 -> PortRange.fromJson(reader1));
                    deserializedMatchAttributes.destinationPorts = destinationPorts;
                } else if ("destinations".equals(fieldName)) {
                    List<Address> destinations = reader.readArray(reader1 -> Address.fromJson(reader1));
                    deserializedMatchAttributes.destinations = destinations;
                } else if ("protocols".equals(fieldName)) {
                    List<Integer> protocols = reader.readArray(reader1 -> reader1.getInt());
                    deserializedMatchAttributes.protocols = protocols;
                } else if ("sourcePorts".equals(fieldName)) {
                    List<PortRange> sourcePorts = reader.readArray(reader1 -> PortRange.fromJson(reader1));
                    deserializedMatchAttributes.sourcePorts = sourcePorts;
                } else if ("sources".equals(fieldName)) {
                    List<Address> sources = reader.readArray(reader1 -> Address.fromJson(reader1));
                    deserializedMatchAttributes.sources = sources;
                } else if ("tcpFlags".equals(fieldName)) {
                    List<TcpFlagField> tcpFlags = reader.readArray(reader1 -> TcpFlagField.fromJson(reader1));
                    deserializedMatchAttributes.tcpFlags = tcpFlags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMatchAttributes;
        });
    }
}
