// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsS3AccessPoint.
 */
@Fluent
public final class AwsS3AccessPointProperties implements JsonSerializable<AwsS3AccessPointProperties> {
    /*
     * The alias of this Access Point. This alias can be used for compatibility purposes with other AWS services and
     * third-party applications.
     */
    private String alias;

    /*
     * The Amazon Resource Name (ARN) of the specified accesspoint. the Amazon Resource Name (ARN) of the specified
     * accesspoint.
     */
    private String arn;

    /*
     * The name of the bucket that you want to associate this Access Point with.
     */
    private String bucket;

    /*
     * The AWS account ID associated with the S3 bucket associated with this access point.
     */
    private String bucketAccountId;

    /*
     * The name you want to assign to this Access Point. If you don't specify a name, AWS CloudFormation generates a
     * unique ID and uses that ID for the access point name.
     */
    private String name;

    /*
     * Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for
     * this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet.
     * Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the
     * Access Point and bucket access policies.
     */
    private NetworkOrigin networkOrigin;

    /*
     * The Access Point Policy you want to apply to this access point.
     */
    private Object policy;

    /*
     * The PublicAccessBlock configuration that you want to apply to this Access Point. You can enable the configuration
     * options in any combination. For more information about when Amazon S3 considers a bucket or object public, see
     * https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-
     * public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
     */
    private PublicAccessBlockConfiguration publicAccessBlockConfiguration;

    /*
     * If you include this field, Amazon S3 restricts access to this Access Point to requests from the specified Virtual
     * Private Cloud (VPC). The Virtual Private Cloud (VPC) configuration for a bucket access point.
     */
    private VpcConfiguration vpcConfiguration;

    /**
     * Creates an instance of AwsS3AccessPointProperties class.
     */
    public AwsS3AccessPointProperties() {
    }

    /**
     * Get the alias property: The alias of this Access Point. This alias can be used for compatibility purposes with
     * other AWS services and third-party applications.
     * 
     * @return the alias value.
     */
    public String alias() {
        return this.alias;
    }

    /**
     * Set the alias property: The alias of this Access Point. This alias can be used for compatibility purposes with
     * other AWS services and third-party applications.
     * 
     * @param alias the alias value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withAlias(String alias) {
        this.alias = alias;
        return this;
    }

    /**
     * Get the arn property: The Amazon Resource Name (ARN) of the specified accesspoint. the Amazon Resource Name (ARN)
     * of the specified accesspoint.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: The Amazon Resource Name (ARN) of the specified accesspoint. the Amazon Resource Name (ARN)
     * of the specified accesspoint.
     * 
     * @param arn the arn value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the bucket property: The name of the bucket that you want to associate this Access Point with.
     * 
     * @return the bucket value.
     */
    public String bucket() {
        return this.bucket;
    }

    /**
     * Set the bucket property: The name of the bucket that you want to associate this Access Point with.
     * 
     * @param bucket the bucket value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }

    /**
     * Get the bucketAccountId property: The AWS account ID associated with the S3 bucket associated with this access
     * point.
     * 
     * @return the bucketAccountId value.
     */
    public String bucketAccountId() {
        return this.bucketAccountId;
    }

    /**
     * Set the bucketAccountId property: The AWS account ID associated with the S3 bucket associated with this access
     * point.
     * 
     * @param bucketAccountId the bucketAccountId value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withBucketAccountId(String bucketAccountId) {
        this.bucketAccountId = bucketAccountId;
        return this;
    }

    /**
     * Get the name property: The name you want to assign to this Access Point. If you don't specify a name, AWS
     * CloudFormation generates a unique ID and uses that ID for the access point name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name you want to assign to this Access Point. If you don't specify a name, AWS
     * CloudFormation generates a unique ID and uses that ID for the access point name.
     * 
     * @param name the name value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the networkOrigin property: Indicates whether this Access Point allows access from the public Internet. If
     * VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't
     * allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access
     * from the public Internet, subject to the Access Point and bucket access policies.
     * 
     * @return the networkOrigin value.
     */
    public NetworkOrigin networkOrigin() {
        return this.networkOrigin;
    }

    /**
     * Set the networkOrigin property: Indicates whether this Access Point allows access from the public Internet. If
     * VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't
     * allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access
     * from the public Internet, subject to the Access Point and bucket access policies.
     * 
     * @param networkOrigin the networkOrigin value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withNetworkOrigin(NetworkOrigin networkOrigin) {
        this.networkOrigin = networkOrigin;
        return this;
    }

    /**
     * Get the policy property: The Access Point Policy you want to apply to this access point.
     * 
     * @return the policy value.
     */
    public Object policy() {
        return this.policy;
    }

    /**
     * Set the policy property: The Access Point Policy you want to apply to this access point.
     * 
     * @param policy the policy value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withPolicy(Object policy) {
        this.policy = policy;
        return this;
    }

    /**
     * Get the publicAccessBlockConfiguration property: The PublicAccessBlock configuration that you want to apply to
     * this Access Point. You can enable the configuration options in any combination. For more information about when
     * Amazon S3 considers a bucket or object public, see
     * https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status
     * 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
     * 
     * @return the publicAccessBlockConfiguration value.
     */
    public PublicAccessBlockConfiguration publicAccessBlockConfiguration() {
        return this.publicAccessBlockConfiguration;
    }

    /**
     * Set the publicAccessBlockConfiguration property: The PublicAccessBlock configuration that you want to apply to
     * this Access Point. You can enable the configuration options in any combination. For more information about when
     * Amazon S3 considers a bucket or object public, see
     * https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status
     * 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
     * 
     * @param publicAccessBlockConfiguration the publicAccessBlockConfiguration value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties
        withPublicAccessBlockConfiguration(PublicAccessBlockConfiguration publicAccessBlockConfiguration) {
        this.publicAccessBlockConfiguration = publicAccessBlockConfiguration;
        return this;
    }

    /**
     * Get the vpcConfiguration property: If you include this field, Amazon S3 restricts access to this Access Point to
     * requests from the specified Virtual Private Cloud (VPC). The Virtual Private Cloud (VPC) configuration for a
     * bucket access point.
     * 
     * @return the vpcConfiguration value.
     */
    public VpcConfiguration vpcConfiguration() {
        return this.vpcConfiguration;
    }

    /**
     * Set the vpcConfiguration property: If you include this field, Amazon S3 restricts access to this Access Point to
     * requests from the specified Virtual Private Cloud (VPC). The Virtual Private Cloud (VPC) configuration for a
     * bucket access point.
     * 
     * @param vpcConfiguration the vpcConfiguration value to set.
     * @return the AwsS3AccessPointProperties object itself.
     */
    public AwsS3AccessPointProperties withVpcConfiguration(VpcConfiguration vpcConfiguration) {
        this.vpcConfiguration = vpcConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publicAccessBlockConfiguration() != null) {
            publicAccessBlockConfiguration().validate();
        }
        if (vpcConfiguration() != null) {
            vpcConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("alias", this.alias);
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeStringField("bucket", this.bucket);
        jsonWriter.writeStringField("bucketAccountId", this.bucketAccountId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("networkOrigin", this.networkOrigin == null ? null : this.networkOrigin.toString());
        jsonWriter.writeUntypedField("policy", this.policy);
        jsonWriter.writeJsonField("publicAccessBlockConfiguration", this.publicAccessBlockConfiguration);
        jsonWriter.writeJsonField("vpcConfiguration", this.vpcConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsS3AccessPointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsS3AccessPointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsS3AccessPointProperties.
     */
    public static AwsS3AccessPointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsS3AccessPointProperties deserializedAwsS3AccessPointProperties = new AwsS3AccessPointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alias".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.alias = reader.getString();
                } else if ("arn".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.arn = reader.getString();
                } else if ("bucket".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.bucket = reader.getString();
                } else if ("bucketAccountId".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.bucketAccountId = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.name = reader.getString();
                } else if ("networkOrigin".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.networkOrigin = NetworkOrigin.fromString(reader.getString());
                } else if ("policy".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.policy = reader.readUntyped();
                } else if ("publicAccessBlockConfiguration".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.publicAccessBlockConfiguration
                        = PublicAccessBlockConfiguration.fromJson(reader);
                } else if ("vpcConfiguration".equals(fieldName)) {
                    deserializedAwsS3AccessPointProperties.vpcConfiguration = VpcConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsS3AccessPointProperties;
        });
    }
}
