// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Tmpfs.
 */
@Fluent
public final class Tmpfs implements JsonSerializable<Tmpfs> {
    /*
     * The absolute file path where the tmpfs volume is to be mounted.
     */
    private String containerPath;

    /*
     * The list of tmpfs volume mount options.
     */
    private List<String> mountOptions;

    /*
     * The maximum size (in MiB) of the tmpfs volume.
     */
    private Integer size;

    /**
     * Creates an instance of Tmpfs class.
     */
    public Tmpfs() {
    }

    /**
     * Get the containerPath property: The absolute file path where the tmpfs volume is to be mounted.
     * 
     * @return the containerPath value.
     */
    public String containerPath() {
        return this.containerPath;
    }

    /**
     * Set the containerPath property: The absolute file path where the tmpfs volume is to be mounted.
     * 
     * @param containerPath the containerPath value to set.
     * @return the Tmpfs object itself.
     */
    public Tmpfs withContainerPath(String containerPath) {
        this.containerPath = containerPath;
        return this;
    }

    /**
     * Get the mountOptions property: The list of tmpfs volume mount options.
     * 
     * @return the mountOptions value.
     */
    public List<String> mountOptions() {
        return this.mountOptions;
    }

    /**
     * Set the mountOptions property: The list of tmpfs volume mount options.
     * 
     * @param mountOptions the mountOptions value to set.
     * @return the Tmpfs object itself.
     */
    public Tmpfs withMountOptions(List<String> mountOptions) {
        this.mountOptions = mountOptions;
        return this;
    }

    /**
     * Get the size property: The maximum size (in MiB) of the tmpfs volume.
     * 
     * @return the size value.
     */
    public Integer size() {
        return this.size;
    }

    /**
     * Set the size property: The maximum size (in MiB) of the tmpfs volume.
     * 
     * @param size the size value to set.
     * @return the Tmpfs object itself.
     */
    public Tmpfs withSize(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("containerPath", this.containerPath);
        jsonWriter.writeArrayField("mountOptions", this.mountOptions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Tmpfs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Tmpfs if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Tmpfs.
     */
    public static Tmpfs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Tmpfs deserializedTmpfs = new Tmpfs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerPath".equals(fieldName)) {
                    deserializedTmpfs.containerPath = reader.getString();
                } else if ("mountOptions".equals(fieldName)) {
                    List<String> mountOptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedTmpfs.mountOptions = mountOptions;
                } else if ("size".equals(fieldName)) {
                    deserializedTmpfs.size = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTmpfs;
        });
    }
}
