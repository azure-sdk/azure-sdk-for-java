// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of StatelessRule.
 */
@Fluent
public final class StatelessRule implements JsonSerializable<StatelessRule> {
    /*
     * Property priority
     */
    private Integer priority;

    /*
     * Property ruleDefinition
     */
    private RuleDefinition ruleDefinition;

    /**
     * Creates an instance of StatelessRule class.
     */
    public StatelessRule() {
    }

    /**
     * Get the priority property: Property priority.
     * 
     * @return the priority value.
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Property priority.
     * 
     * @param priority the priority value to set.
     * @return the StatelessRule object itself.
     */
    public StatelessRule withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the ruleDefinition property: Property ruleDefinition.
     * 
     * @return the ruleDefinition value.
     */
    public RuleDefinition ruleDefinition() {
        return this.ruleDefinition;
    }

    /**
     * Set the ruleDefinition property: Property ruleDefinition.
     * 
     * @param ruleDefinition the ruleDefinition value to set.
     * @return the StatelessRule object itself.
     */
    public StatelessRule withRuleDefinition(RuleDefinition ruleDefinition) {
        this.ruleDefinition = ruleDefinition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ruleDefinition() != null) {
            ruleDefinition().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("priority", this.priority);
        jsonWriter.writeJsonField("ruleDefinition", this.ruleDefinition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatelessRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatelessRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatelessRule.
     */
    public static StatelessRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatelessRule deserializedStatelessRule = new StatelessRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("priority".equals(fieldName)) {
                    deserializedStatelessRule.priority = reader.getNullable(JsonReader::getInt);
                } else if ("ruleDefinition".equals(fieldName)) {
                    deserializedStatelessRule.ruleDefinition = RuleDefinition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatelessRule;
        });
    }
}
