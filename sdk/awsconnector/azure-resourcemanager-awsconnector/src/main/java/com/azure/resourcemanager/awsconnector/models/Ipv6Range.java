// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Ipv6Range.
 */
@Fluent
public final class Ipv6Range implements JsonSerializable<Ipv6Range> {
    /*
     * <p>The IPv6 address range. You can either specify a CIDR block or a source security group, not both. To specify a
     * single IPv6 address, use the /128 prefix length.</p>
     */
    private String cidrIpv6;

    /*
     * <p>A description for the security group rule that references this IPv6 address range.</p> <p>Constraints: Up to
     * 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
     */
    private String description;

    /**
     * Creates an instance of Ipv6Range class.
     */
    public Ipv6Range() {
    }

    /**
     * Get the cidrIpv6 property: &lt;p&gt;The IPv6 address range. You can either specify a CIDR block or a source
     * security group, not both. To specify a single IPv6 address, use the /128 prefix length.&lt;/p&gt;.
     * 
     * @return the cidrIpv6 value.
     */
    public String cidrIpv6() {
        return this.cidrIpv6;
    }

    /**
     * Set the cidrIpv6 property: &lt;p&gt;The IPv6 address range. You can either specify a CIDR block or a source
     * security group, not both. To specify a single IPv6 address, use the /128 prefix length.&lt;/p&gt;.
     * 
     * @param cidrIpv6 the cidrIpv6 value to set.
     * @return the Ipv6Range object itself.
     */
    public Ipv6Range withCidrIpv6(String cidrIpv6) {
        this.cidrIpv6 = cidrIpv6;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;A description for the security group rule that references this IPv6
     * address range.&lt;/p&gt; &lt;p&gt;Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z,
     * 0-9, spaces, and ._-:/()#,&#064;[]+=&amp;amp;;{}!$*&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;A description for the security group rule that references this IPv6
     * address range.&lt;/p&gt; &lt;p&gt;Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z,
     * 0-9, spaces, and ._-:/()#,&#064;[]+=&amp;amp;;{}!$*&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the Ipv6Range object itself.
     */
    public Ipv6Range withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cidrIpv6", this.cidrIpv6);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Ipv6Range from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Ipv6Range if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Ipv6Range.
     */
    public static Ipv6Range fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Ipv6Range deserializedIpv6Range = new Ipv6Range();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cidrIpv6".equals(fieldName)) {
                    deserializedIpv6Range.cidrIpv6 = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedIpv6Range.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpv6Range;
        });
    }
}
