// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ProjectSourceVersion.
 */
@Fluent
public final class ProjectSourceVersion implements JsonSerializable<ProjectSourceVersion> {
    /*
     * <p>An identifier for a source in the build project. The identifier can only contain alphanumeric characters and
     * underscores, and must be less than 128 characters in length. </p>
     */
    private String sourceIdentifier;

    /*
     * <p>The source version for the corresponding source identifier. If specified, must be one of:</p> <ul> <li> <p>For
     * CodeCommit: the commit ID, branch, or Git tag to use.</p> </li> <li> <p>For GitHub or GitLab: the commit ID, pull
     * request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a
     * pull request ID is specified, it must use the format <code>pr/pull-request-ID</code> (for example,
     * <code>pr/25</code>). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the
     * default branch's HEAD commit ID is used.</p> </li> <li> <p>For Bitbucket: the commit ID, branch name, or tag name
     * that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's
     * HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.</p> </li> <li> <p>For
     * Amazon S3: the version ID of the object that represents the build input ZIP file to use.</p> </li> </ul> <p> For
     * more information, see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html'>Source Version Sample
     * with CodeBuild</a> in the <i>CodeBuild User Guide</i>. </p>
     */
    private String sourceVersion;

    /**
     * Creates an instance of ProjectSourceVersion class.
     */
    public ProjectSourceVersion() {
    }

    /**
     * Get the sourceIdentifier property: &lt;p&gt;An identifier for a source in the build project. The identifier can
     * only contain alphanumeric characters and underscores, and must be less than 128 characters in length. &lt;/p&gt;.
     * 
     * @return the sourceIdentifier value.
     */
    public String sourceIdentifier() {
        return this.sourceIdentifier;
    }

    /**
     * Set the sourceIdentifier property: &lt;p&gt;An identifier for a source in the build project. The identifier can
     * only contain alphanumeric characters and underscores, and must be less than 128 characters in length. &lt;/p&gt;.
     * 
     * @param sourceIdentifier the sourceIdentifier value to set.
     * @return the ProjectSourceVersion object itself.
     */
    public ProjectSourceVersion withSourceIdentifier(String sourceIdentifier) {
        this.sourceIdentifier = sourceIdentifier;
        return this;
    }

    /**
     * Get the sourceVersion property: &lt;p&gt;The source version for the corresponding source identifier. If
     * specified, must be one of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For CodeCommit: the commit ID, branch, or Git
     * tag to use.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GitHub or GitLab: the commit ID, pull request ID,
     * branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request
     * ID is specified, it must use the format &lt;code&gt;pr/pull-request-ID&lt;/code&gt; (for example,
     * &lt;code&gt;pr/25&lt;/code&gt;). If a branch name is specified, the branch's HEAD commit ID is used. If not
     * specified, the default branch's HEAD commit ID is used.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Bitbucket:
     * the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If
     * a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD
     * commit ID is used.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon S3: the version ID of the object that
     * represents the build input ZIP file to use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see
     * &lt;a href='https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html'&gt;Source Version
     * Sample with CodeBuild&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;. &lt;/p&gt;.
     * 
     * @return the sourceVersion value.
     */
    public String sourceVersion() {
        return this.sourceVersion;
    }

    /**
     * Set the sourceVersion property: &lt;p&gt;The source version for the corresponding source identifier. If
     * specified, must be one of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For CodeCommit: the commit ID, branch, or Git
     * tag to use.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For GitHub or GitLab: the commit ID, pull request ID,
     * branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request
     * ID is specified, it must use the format &lt;code&gt;pr/pull-request-ID&lt;/code&gt; (for example,
     * &lt;code&gt;pr/25&lt;/code&gt;). If a branch name is specified, the branch's HEAD commit ID is used. If not
     * specified, the default branch's HEAD commit ID is used.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Bitbucket:
     * the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If
     * a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD
     * commit ID is used.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For Amazon S3: the version ID of the object that
     * represents the build input ZIP file to use.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see
     * &lt;a href='https://docs.aws.amazon.com/codebuild/latest/userguide/sample-source-version.html'&gt;Source Version
     * Sample with CodeBuild&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;. &lt;/p&gt;.
     * 
     * @param sourceVersion the sourceVersion value to set.
     * @return the ProjectSourceVersion object itself.
     */
    public ProjectSourceVersion withSourceVersion(String sourceVersion) {
        this.sourceVersion = sourceVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceIdentifier", this.sourceIdentifier);
        jsonWriter.writeStringField("sourceVersion", this.sourceVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectSourceVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectSourceVersion if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectSourceVersion.
     */
    public static ProjectSourceVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectSourceVersion deserializedProjectSourceVersion = new ProjectSourceVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceIdentifier".equals(fieldName)) {
                    deserializedProjectSourceVersion.sourceIdentifier = reader.getString();
                } else if ("sourceVersion".equals(fieldName)) {
                    deserializedProjectSourceVersion.sourceVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectSourceVersion;
        });
    }
}
