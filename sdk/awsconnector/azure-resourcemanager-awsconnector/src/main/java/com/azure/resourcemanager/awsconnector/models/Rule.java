// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Rule.
 */
@Fluent
public final class Rule implements JsonSerializable<Rule> {
    /*
     * Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket. Specifies the days
     * since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all
     * parts of the upload. For more information, see [Stopping Incomplete Multipart Uploads Using a Bucket Lifecycle
     * Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-
     * config) in the *Amazon S3 User Guide*.
     */
    private AbortIncompleteMultipartUpload abortIncompleteMultipartUpload;

    /*
     * Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601
     * format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same
     * time unit for both properties (either in days or by date). The expiration time must also be later than the
     * transition time. The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
     */
    private String expirationDate;

    /*
     * Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you
     * specify an expiration and transition time, you must use the same time unit for both properties (either in days or
     * by date). The expiration time must also be later than the transition time.
     */
    private Integer expirationInDays;

    /*
     * Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the
     * delete marker will be removed if there are no noncurrent versions. This cannot be specified with
     * ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
     */
    private Boolean expiredObjectDeleteMarker;

    /*
     * Unique identifier for the rule. The value can't be longer than 255 characters.
     */
    private String id;

    /*
     * Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object
     * versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to
     * request that S3 delete noncurrent object versions at a specific period in the object's lifetime. Specifies when
     * noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You
     * set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3
     * delete noncurrent object versions at a specific period in the object's lifetime. For more information about
     * setting a lifecycle rule configuration, see [AWS::S3::Bucket
     * Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-
     * rule.html).
     */
    private NoncurrentVersionExpiration noncurrentVersionExpiration;

    /*
     * (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new
     * version of the object is uploaded to the bucket and when old versions of the object expire. When object versions
     * expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time
     * must be later than the transition time.
     */
    private Integer noncurrentVersionExpirationInDays;

    /*
     * (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition
     * to a specified storage class. If you specify a transition and expiration time, the expiration time must be later
     * than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions``
     * property. Container for the transition rule that describes when noncurrent objects transition to the
     * ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE``
     * storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to
     * request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``, ``ONEZONE_IA``,
     * ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class at a specific period in
     * the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
     */
    private NoncurrentVersionTransition noncurrentVersionTransition;

    /*
     * For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current
     * objects transition to a specified storage class. If you specify a transition and expiration time, the expiration
     * time must be later than the transition time. If you specify this property, don't specify the
     * ``NoncurrentVersionTransition`` property.
     */
    private List<NoncurrentVersionTransition> noncurrentVersionTransitions;

    /*
     * Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in
     * bytes. For more information about size based rules, see [Lifecycle configuration using size-based
     * rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
     * in the *Amazon S3 User Guide*.
     */
    private String objectSizeGreaterThan;

    /*
     * Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in
     * bytes. For more information about sized based rules, see [Lifecycle configuration using size-based
     * rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
     * in the *Amazon S3 User Guide*.
     */
    private String objectSizeLessThan;

    /*
     * Object key prefix that identifies one or more objects to which this rule applies. Replacement must be made for
     * object keys containing special characters (such as carriage returns) when using XML requests. For more
     * information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-
     * constraints).
     */
    private String prefix;

    /*
     * If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
     */
    private RuleStatus status;

    /*
     * Tags to use to identify a subset of objects to which the lifecycle rule applies.
     */
    private List<TagFilter> tagFilters;

    /*
     * (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and
     * transition time, you must use the same time unit for both properties (either in days or by date). The expiration
     * time must also be later than the transition time. If you specify this property, don't specify the ``Transitions``
     * property. Specifies when an object transitions to a specified storage class. For more information about Amazon S3
     * lifecycle configuration rules, see [Transitioning Objects Using Amazon S3
     * Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in
     * the *Amazon S3 User Guide*.
     */
    private Transition transition;

    /*
     * One or more transition rules that specify when an object transitions to a specified storage class. If you specify
     * an expiration and transition time, you must use the same time unit for both properties (either in days or by
     * date). The expiration time must also be later than the transition time. If you specify this property, don't
     * specify the ``Transition`` property.
     */
    private List<Transition> transitions;

    /**
     * Creates an instance of Rule class.
     */
    public Rule() {
    }

    /**
     * Get the abortIncompleteMultipartUpload property: Specifies a lifecycle rule that stops incomplete multipart
     * uploads to an Amazon S3 bucket. Specifies the days since the initiation of an incomplete multipart upload that
     * Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [Stopping
     * Incomplete Multipart Uploads Using a Bucket Lifecycle
     * Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config)
     * in the *Amazon S3 User Guide*.
     * 
     * @return the abortIncompleteMultipartUpload value.
     */
    public AbortIncompleteMultipartUpload abortIncompleteMultipartUpload() {
        return this.abortIncompleteMultipartUpload;
    }

    /**
     * Set the abortIncompleteMultipartUpload property: Specifies a lifecycle rule that stops incomplete multipart
     * uploads to an Amazon S3 bucket. Specifies the days since the initiation of an incomplete multipart upload that
     * Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [Stopping
     * Incomplete Multipart Uploads Using a Bucket Lifecycle
     * Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config)
     * in the *Amazon S3 User Guide*.
     * 
     * @param abortIncompleteMultipartUpload the abortIncompleteMultipartUpload value to set.
     * @return the Rule object itself.
     */
    public Rule withAbortIncompleteMultipartUpload(AbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
        this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
        return this;
    }

    /**
     * Get the expirationDate property: Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The
     * date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and
     * transition time, you must use the same time unit for both properties (either in days or by date). The expiration
     * time must also be later than the transition time. The date value in ISO 8601 format. The timezone is always UTC.
     * (YYYY-MM-DDThh:mm:ssZ).
     * 
     * @return the expirationDate value.
     */
    public String expirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate property: Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The
     * date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and
     * transition time, you must use the same time unit for both properties (either in days or by date). The expiration
     * time must also be later than the transition time. The date value in ISO 8601 format. The timezone is always UTC.
     * (YYYY-MM-DDThh:mm:ssZ).
     * 
     * @param expirationDate the expirationDate value to set.
     * @return the Rule object itself.
     */
    public Rule withExpirationDate(String expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the expirationInDays property: Indicates the number of days after creation when objects are deleted from
     * Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time
     * unit for both properties (either in days or by date). The expiration time must also be later than the transition
     * time.
     * 
     * @return the expirationInDays value.
     */
    public Integer expirationInDays() {
        return this.expirationInDays;
    }

    /**
     * Set the expirationInDays property: Indicates the number of days after creation when objects are deleted from
     * Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time
     * unit for both properties (either in days or by date). The expiration time must also be later than the transition
     * time.
     * 
     * @param expirationInDays the expirationInDays value to set.
     * @return the Rule object itself.
     */
    public Rule withExpirationInDays(Integer expirationInDays) {
        this.expirationInDays = expirationInDays;
        return this;
    }

    /**
     * Get the expiredObjectDeleteMarker property: Indicates whether Amazon S3 will remove a delete marker without any
     * noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This
     * cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
     * 
     * @return the expiredObjectDeleteMarker value.
     */
    public Boolean expiredObjectDeleteMarker() {
        return this.expiredObjectDeleteMarker;
    }

    /**
     * Set the expiredObjectDeleteMarker property: Indicates whether Amazon S3 will remove a delete marker without any
     * noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This
     * cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
     * 
     * @param expiredObjectDeleteMarker the expiredObjectDeleteMarker value to set.
     * @return the Rule object itself.
     */
    public Rule withExpiredObjectDeleteMarker(Boolean expiredObjectDeleteMarker) {
        this.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
        return this;
    }

    /**
     * Get the id property: Unique identifier for the rule. The value can't be longer than 255 characters.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique identifier for the rule. The value can't be longer than 255 characters.
     * 
     * @param id the id value to set.
     * @return the Rule object itself.
     */
    public Rule withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the noncurrentVersionExpiration property: Specifies when noncurrent object versions expire. Upon expiration,
     * S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket
     * that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific
     * period in the object's lifetime. Specifies when noncurrent object versions expire. Upon expiration, S3
     * permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that
     * has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period
     * in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket
     * Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
     * 
     * @return the noncurrentVersionExpiration value.
     */
    public NoncurrentVersionExpiration noncurrentVersionExpiration() {
        return this.noncurrentVersionExpiration;
    }

    /**
     * Set the noncurrentVersionExpiration property: Specifies when noncurrent object versions expire. Upon expiration,
     * S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket
     * that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific
     * period in the object's lifetime. Specifies when noncurrent object versions expire. Upon expiration, S3
     * permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that
     * has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period
     * in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket
     * Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
     * 
     * @param noncurrentVersionExpiration the noncurrentVersionExpiration value to set.
     * @return the Rule object itself.
     */
    public Rule withNoncurrentVersionExpiration(NoncurrentVersionExpiration noncurrentVersionExpiration) {
        this.noncurrentVersionExpiration = noncurrentVersionExpiration;
        return this;
    }

    /**
     * Get the noncurrentVersionExpirationInDays property: (Deprecated.) For buckets with versioning enabled (or
     * suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and
     * when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you
     * specify a transition and expiration time, the expiration time must be later than the transition time.
     * 
     * @return the noncurrentVersionExpirationInDays value.
     */
    public Integer noncurrentVersionExpirationInDays() {
        return this.noncurrentVersionExpirationInDays;
    }

    /**
     * Set the noncurrentVersionExpirationInDays property: (Deprecated.) For buckets with versioning enabled (or
     * suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and
     * when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you
     * specify a transition and expiration time, the expiration time must be later than the transition time.
     * 
     * @param noncurrentVersionExpirationInDays the noncurrentVersionExpirationInDays value to set.
     * @return the Rule object itself.
     */
    public Rule withNoncurrentVersionExpirationInDays(Integer noncurrentVersionExpirationInDays) {
        this.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
        return this;
    }

    /**
     * Get the noncurrentVersionTransition property: (Deprecated.) For buckets with versioning enabled (or suspended),
     * specifies when non-current objects transition to a specified storage class. If you specify a transition and
     * expiration time, the expiration time must be later than the transition time. If you specify this property, don't
     * specify the ``NoncurrentVersionTransitions`` property. Container for the transition rule that describes when
     * noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``,
     * ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is
     * suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the
     * ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE``
     * storage class at a specific period in the object's lifetime. If you specify this property, don't specify the
     * ``NoncurrentVersionTransitions`` property.
     * 
     * @return the noncurrentVersionTransition value.
     */
    public NoncurrentVersionTransition noncurrentVersionTransition() {
        return this.noncurrentVersionTransition;
    }

    /**
     * Set the noncurrentVersionTransition property: (Deprecated.) For buckets with versioning enabled (or suspended),
     * specifies when non-current objects transition to a specified storage class. If you specify a transition and
     * expiration time, the expiration time must be later than the transition time. If you specify this property, don't
     * specify the ``NoncurrentVersionTransitions`` property. Container for the transition rule that describes when
     * noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``,
     * ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is
     * suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the
     * ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE``
     * storage class at a specific period in the object's lifetime. If you specify this property, don't specify the
     * ``NoncurrentVersionTransitions`` property.
     * 
     * @param noncurrentVersionTransition the noncurrentVersionTransition value to set.
     * @return the Rule object itself.
     */
    public Rule withNoncurrentVersionTransition(NoncurrentVersionTransition noncurrentVersionTransition) {
        this.noncurrentVersionTransition = noncurrentVersionTransition;
        return this;
    }

    /**
     * Get the noncurrentVersionTransitions property: For buckets with versioning enabled (or suspended), one or more
     * transition rules that specify when non-current objects transition to a specified storage class. If you specify a
     * transition and expiration time, the expiration time must be later than the transition time. If you specify this
     * property, don't specify the ``NoncurrentVersionTransition`` property.
     * 
     * @return the noncurrentVersionTransitions value.
     */
    public List<NoncurrentVersionTransition> noncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions;
    }

    /**
     * Set the noncurrentVersionTransitions property: For buckets with versioning enabled (or suspended), one or more
     * transition rules that specify when non-current objects transition to a specified storage class. If you specify a
     * transition and expiration time, the expiration time must be later than the transition time. If you specify this
     * property, don't specify the ``NoncurrentVersionTransition`` property.
     * 
     * @param noncurrentVersionTransitions the noncurrentVersionTransitions value to set.
     * @return the Rule object itself.
     */
    public Rule withNoncurrentVersionTransitions(List<NoncurrentVersionTransition> noncurrentVersionTransitions) {
        this.noncurrentVersionTransitions = noncurrentVersionTransitions;
        return this;
    }

    /**
     * Get the objectSizeGreaterThan property: Specifies the minimum object size in bytes for this rule to apply to.
     * Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle
     * configuration using size-based
     * rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
     * in the *Amazon S3 User Guide*.
     * 
     * @return the objectSizeGreaterThan value.
     */
    public String objectSizeGreaterThan() {
        return this.objectSizeGreaterThan;
    }

    /**
     * Set the objectSizeGreaterThan property: Specifies the minimum object size in bytes for this rule to apply to.
     * Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle
     * configuration using size-based
     * rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
     * in the *Amazon S3 User Guide*.
     * 
     * @param objectSizeGreaterThan the objectSizeGreaterThan value to set.
     * @return the Rule object itself.
     */
    public Rule withObjectSizeGreaterThan(String objectSizeGreaterThan) {
        this.objectSizeGreaterThan = objectSizeGreaterThan;
        return this;
    }

    /**
     * Get the objectSizeLessThan property: Specifies the maximum object size in bytes for this rule to apply to.
     * Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle
     * configuration using size-based
     * rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
     * in the *Amazon S3 User Guide*.
     * 
     * @return the objectSizeLessThan value.
     */
    public String objectSizeLessThan() {
        return this.objectSizeLessThan;
    }

    /**
     * Set the objectSizeLessThan property: Specifies the maximum object size in bytes for this rule to apply to.
     * Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle
     * configuration using size-based
     * rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules)
     * in the *Amazon S3 User Guide*.
     * 
     * @param objectSizeLessThan the objectSizeLessThan value to set.
     * @return the Rule object itself.
     */
    public Rule withObjectSizeLessThan(String objectSizeLessThan) {
        this.objectSizeLessThan = objectSizeLessThan;
        return this;
    }

    /**
     * Get the prefix property: Object key prefix that identifies one or more objects to which this rule applies.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using XML
     * requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: Object key prefix that identifies one or more objects to which this rule applies.
     * Replacement must be made for object keys containing special characters (such as carriage returns) when using XML
     * requests. For more information, see [XML related object key
     * constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
     * 
     * @param prefix the prefix value to set.
     * @return the Rule object itself.
     */
    public Rule withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the status property: If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not
     * currently being applied.
     * 
     * @return the status value.
     */
    public RuleStatus status() {
        return this.status;
    }

    /**
     * Set the status property: If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not
     * currently being applied.
     * 
     * @param status the status value to set.
     * @return the Rule object itself.
     */
    public Rule withStatus(RuleStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tagFilters property: Tags to use to identify a subset of objects to which the lifecycle rule applies.
     * 
     * @return the tagFilters value.
     */
    public List<TagFilter> tagFilters() {
        return this.tagFilters;
    }

    /**
     * Set the tagFilters property: Tags to use to identify a subset of objects to which the lifecycle rule applies.
     * 
     * @param tagFilters the tagFilters value to set.
     * @return the Rule object itself.
     */
    public Rule withTagFilters(List<TagFilter> tagFilters) {
        this.tagFilters = tagFilters;
        return this;
    }

    /**
     * Get the transition property: (Deprecated.) Specifies when an object transitions to a specified storage class. If
     * you specify an expiration and transition time, you must use the same time unit for both properties (either in
     * days or by date). The expiration time must also be later than the transition time. If you specify this property,
     * don't specify the ``Transitions`` property. Specifies when an object transitions to a specified storage class.
     * For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3
     * Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in
     * the *Amazon S3 User Guide*.
     * 
     * @return the transition value.
     */
    public Transition transition() {
        return this.transition;
    }

    /**
     * Set the transition property: (Deprecated.) Specifies when an object transitions to a specified storage class. If
     * you specify an expiration and transition time, you must use the same time unit for both properties (either in
     * days or by date). The expiration time must also be later than the transition time. If you specify this property,
     * don't specify the ``Transitions`` property. Specifies when an object transitions to a specified storage class.
     * For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3
     * Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in
     * the *Amazon S3 User Guide*.
     * 
     * @param transition the transition value to set.
     * @return the Rule object itself.
     */
    public Rule withTransition(Transition transition) {
        this.transition = transition;
        return this;
    }

    /**
     * Get the transitions property: One or more transition rules that specify when an object transitions to a specified
     * storage class. If you specify an expiration and transition time, you must use the same time unit for both
     * properties (either in days or by date). The expiration time must also be later than the transition time. If you
     * specify this property, don't specify the ``Transition`` property.
     * 
     * @return the transitions value.
     */
    public List<Transition> transitions() {
        return this.transitions;
    }

    /**
     * Set the transitions property: One or more transition rules that specify when an object transitions to a specified
     * storage class. If you specify an expiration and transition time, you must use the same time unit for both
     * properties (either in days or by date). The expiration time must also be later than the transition time. If you
     * specify this property, don't specify the ``Transition`` property.
     * 
     * @param transitions the transitions value to set.
     * @return the Rule object itself.
     */
    public Rule withTransitions(List<Transition> transitions) {
        this.transitions = transitions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (abortIncompleteMultipartUpload() != null) {
            abortIncompleteMultipartUpload().validate();
        }
        if (noncurrentVersionExpiration() != null) {
            noncurrentVersionExpiration().validate();
        }
        if (noncurrentVersionTransition() != null) {
            noncurrentVersionTransition().validate();
        }
        if (noncurrentVersionTransitions() != null) {
            noncurrentVersionTransitions().forEach(e -> e.validate());
        }
        if (tagFilters() != null) {
            tagFilters().forEach(e -> e.validate());
        }
        if (transition() != null) {
            transition().validate();
        }
        if (transitions() != null) {
            transitions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("abortIncompleteMultipartUpload", this.abortIncompleteMultipartUpload);
        jsonWriter.writeStringField("expirationDate", this.expirationDate);
        jsonWriter.writeNumberField("expirationInDays", this.expirationInDays);
        jsonWriter.writeBooleanField("expiredObjectDeleteMarker", this.expiredObjectDeleteMarker);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("noncurrentVersionExpiration", this.noncurrentVersionExpiration);
        jsonWriter.writeNumberField("noncurrentVersionExpirationInDays", this.noncurrentVersionExpirationInDays);
        jsonWriter.writeJsonField("noncurrentVersionTransition", this.noncurrentVersionTransition);
        jsonWriter.writeArrayField("noncurrentVersionTransitions", this.noncurrentVersionTransitions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("objectSizeGreaterThan", this.objectSizeGreaterThan);
        jsonWriter.writeStringField("objectSizeLessThan", this.objectSizeLessThan);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("tagFilters", this.tagFilters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("transition", this.transition);
        jsonWriter.writeArrayField("transitions", this.transitions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Rule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Rule if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Rule.
     */
    public static Rule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Rule deserializedRule = new Rule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("abortIncompleteMultipartUpload".equals(fieldName)) {
                    deserializedRule.abortIncompleteMultipartUpload = AbortIncompleteMultipartUpload.fromJson(reader);
                } else if ("expirationDate".equals(fieldName)) {
                    deserializedRule.expirationDate = reader.getString();
                } else if ("expirationInDays".equals(fieldName)) {
                    deserializedRule.expirationInDays = reader.getNullable(JsonReader::getInt);
                } else if ("expiredObjectDeleteMarker".equals(fieldName)) {
                    deserializedRule.expiredObjectDeleteMarker = reader.getNullable(JsonReader::getBoolean);
                } else if ("id".equals(fieldName)) {
                    deserializedRule.id = reader.getString();
                } else if ("noncurrentVersionExpiration".equals(fieldName)) {
                    deserializedRule.noncurrentVersionExpiration = NoncurrentVersionExpiration.fromJson(reader);
                } else if ("noncurrentVersionExpirationInDays".equals(fieldName)) {
                    deserializedRule.noncurrentVersionExpirationInDays = reader.getNullable(JsonReader::getInt);
                } else if ("noncurrentVersionTransition".equals(fieldName)) {
                    deserializedRule.noncurrentVersionTransition = NoncurrentVersionTransition.fromJson(reader);
                } else if ("noncurrentVersionTransitions".equals(fieldName)) {
                    List<NoncurrentVersionTransition> noncurrentVersionTransitions
                        = reader.readArray(reader1 -> NoncurrentVersionTransition.fromJson(reader1));
                    deserializedRule.noncurrentVersionTransitions = noncurrentVersionTransitions;
                } else if ("objectSizeGreaterThan".equals(fieldName)) {
                    deserializedRule.objectSizeGreaterThan = reader.getString();
                } else if ("objectSizeLessThan".equals(fieldName)) {
                    deserializedRule.objectSizeLessThan = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    deserializedRule.prefix = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedRule.status = RuleStatus.fromString(reader.getString());
                } else if ("tagFilters".equals(fieldName)) {
                    List<TagFilter> tagFilters = reader.readArray(reader1 -> TagFilter.fromJson(reader1));
                    deserializedRule.tagFilters = tagFilters;
                } else if ("transition".equals(fieldName)) {
                    deserializedRule.transition = Transition.fromJson(reader);
                } else if ("transitions".equals(fieldName)) {
                    List<Transition> transitions = reader.readArray(reader1 -> Transition.fromJson(reader1));
                    deserializedRule.transitions = transitions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRule;
        });
    }
}
