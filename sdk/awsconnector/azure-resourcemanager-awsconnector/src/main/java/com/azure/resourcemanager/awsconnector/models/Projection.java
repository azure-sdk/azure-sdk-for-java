// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Projection.
 */
@Fluent
public final class Projection implements JsonSerializable<Projection> {
    /*
     * Represents the non-key attribute names which will be projected into the index. For local secondary indexes, the
     * total count of ``NonKeyAttributes`` summed across all of the local secondary indexes, must not exceed 100. If you
     * project the same attribute into two different indexes, this counts as two distinct attributes when determining
     * the total.
     */
    private List<String> nonKeyAttributes;

    /*
     * The set of attributes that are projected into the index: + ``KEYS_ONLY`` - Only the index and primary keys are
     * projected into the index. + ``INCLUDE`` - In addition to the attributes described in ``KEYS_ONLY``, the secondary
     * index will include other non-key attributes that you specify. + ``ALL`` - All of the table attributes are
     * projected into the index. When using the DynamoDB console, ``ALL`` is selected by default.
     */
    private String projectionType;

    /**
     * Creates an instance of Projection class.
     */
    public Projection() {
    }

    /**
     * Get the nonKeyAttributes property: Represents the non-key attribute names which will be projected into the index.
     * For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the local secondary
     * indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two
     * distinct attributes when determining the total.
     * 
     * @return the nonKeyAttributes value.
     */
    public List<String> nonKeyAttributes() {
        return this.nonKeyAttributes;
    }

    /**
     * Set the nonKeyAttributes property: Represents the non-key attribute names which will be projected into the index.
     * For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the local secondary
     * indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two
     * distinct attributes when determining the total.
     * 
     * @param nonKeyAttributes the nonKeyAttributes value to set.
     * @return the Projection object itself.
     */
    public Projection withNonKeyAttributes(List<String> nonKeyAttributes) {
        this.nonKeyAttributes = nonKeyAttributes;
        return this;
    }

    /**
     * Get the projectionType property: The set of attributes that are projected into the index: + ``KEYS_ONLY`` - Only
     * the index and primary keys are projected into the index. + ``INCLUDE`` - In addition to the attributes described
     * in ``KEYS_ONLY``, the secondary index will include other non-key attributes that you specify. + ``ALL`` - All of
     * the table attributes are projected into the index. When using the DynamoDB console, ``ALL`` is selected by
     * default.
     * 
     * @return the projectionType value.
     */
    public String projectionType() {
        return this.projectionType;
    }

    /**
     * Set the projectionType property: The set of attributes that are projected into the index: + ``KEYS_ONLY`` - Only
     * the index and primary keys are projected into the index. + ``INCLUDE`` - In addition to the attributes described
     * in ``KEYS_ONLY``, the secondary index will include other non-key attributes that you specify. + ``ALL`` - All of
     * the table attributes are projected into the index. When using the DynamoDB console, ``ALL`` is selected by
     * default.
     * 
     * @param projectionType the projectionType value to set.
     * @return the Projection object itself.
     */
    public Projection withProjectionType(String projectionType) {
        this.projectionType = projectionType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("nonKeyAttributes", this.nonKeyAttributes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("projectionType", this.projectionType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Projection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Projection if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Projection.
     */
    public static Projection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Projection deserializedProjection = new Projection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nonKeyAttributes".equals(fieldName)) {
                    List<String> nonKeyAttributes = reader.readArray(reader1 -> reader1.getString());
                    deserializedProjection.nonKeyAttributes = nonKeyAttributes;
                } else if ("projectionType".equals(fieldName)) {
                    deserializedProjection.projectionType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjection;
        });
    }
}
