// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MasterUserSecret.
 */
@Fluent
public final class MasterUserSecret implements JsonSerializable<MasterUserSecret> {
    /*
     * The AWS KMS key identifier that is used to encrypt the secret.
     */
    private String kmsKeyId;

    /*
     * The Amazon Resource Name (ARN) of the secret.
     */
    private String secretArn;

    /**
     * Creates an instance of MasterUserSecret class.
     */
    public MasterUserSecret() {
    }

    /**
     * Get the kmsKeyId property: The AWS KMS key identifier that is used to encrypt the secret.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: The AWS KMS key identifier that is used to encrypt the secret.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the MasterUserSecret object itself.
     */
    public MasterUserSecret withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the secretArn property: The Amazon Resource Name (ARN) of the secret.
     * 
     * @return the secretArn value.
     */
    public String secretArn() {
        return this.secretArn;
    }

    /**
     * Set the secretArn property: The Amazon Resource Name (ARN) of the secret.
     * 
     * @param secretArn the secretArn value to set.
     * @return the MasterUserSecret object itself.
     */
    public MasterUserSecret withSecretArn(String secretArn) {
        this.secretArn = secretArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("secretArn", this.secretArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MasterUserSecret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MasterUserSecret if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MasterUserSecret.
     */
    public static MasterUserSecret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MasterUserSecret deserializedMasterUserSecret = new MasterUserSecret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kmsKeyId".equals(fieldName)) {
                    deserializedMasterUserSecret.kmsKeyId = reader.getString();
                } else if ("secretArn".equals(fieldName)) {
                    deserializedMasterUserSecret.secretArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMasterUserSecret;
        });
    }
}
