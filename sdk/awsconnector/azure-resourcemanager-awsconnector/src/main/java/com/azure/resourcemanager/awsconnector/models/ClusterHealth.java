// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ClusterHealth.
 */
@Fluent
public final class ClusterHealth implements JsonSerializable<ClusterHealth> {
    /*
     * <p>An object representing the health issues of your local Amazon EKS cluster on an Amazon Web Services
     * Outpost.</p>
     */
    private List<ClusterIssue> issues;

    /**
     * Creates an instance of ClusterHealth class.
     */
    public ClusterHealth() {
    }

    /**
     * Get the issues property: &lt;p&gt;An object representing the health issues of your local Amazon EKS cluster on an
     * Amazon Web Services Outpost.&lt;/p&gt;.
     * 
     * @return the issues value.
     */
    public List<ClusterIssue> issues() {
        return this.issues;
    }

    /**
     * Set the issues property: &lt;p&gt;An object representing the health issues of your local Amazon EKS cluster on an
     * Amazon Web Services Outpost.&lt;/p&gt;.
     * 
     * @param issues the issues value to set.
     * @return the ClusterHealth object itself.
     */
    public ClusterHealth withIssues(List<ClusterIssue> issues) {
        this.issues = issues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issues() != null) {
            issues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("issues", this.issues, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterHealth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterHealth if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterHealth.
     */
    public static ClusterHealth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterHealth deserializedClusterHealth = new ClusterHealth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issues".equals(fieldName)) {
                    List<ClusterIssue> issues = reader.readArray(reader1 -> ClusterIssue.fromJson(reader1));
                    deserializedClusterHealth.issues = issues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterHealth;
        });
    }
}
