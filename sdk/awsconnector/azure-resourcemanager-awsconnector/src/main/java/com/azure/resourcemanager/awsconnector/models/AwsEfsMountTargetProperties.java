// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEfsMountTarget.
 */
@Fluent
public final class AwsEfsMountTargetProperties implements JsonSerializable<AwsEfsMountTargetProperties> {
    /*
     * The ID of the file system for which to create the mount target.
     */
    private String fileSystemId;

    /*
     * Property id
     */
    private String id;

    /*
     * Valid IPv4 address within the address range of the specified subnet.
     */
    private String ipAddress;

    /*
     * Up to five VPC security group IDs, of the form ``sg-xxxxxxxx``. These must be for the same VPC as subnet
     * specified.
     */
    private List<String> securityGroups;

    /*
     * The ID of the subnet to add the mount target in. For One Zone file systems, use the subnet that is associated
     * with the file system's Availability Zone.
     */
    private String subnetId;

    /**
     * Creates an instance of AwsEfsMountTargetProperties class.
     */
    public AwsEfsMountTargetProperties() {
    }

    /**
     * Get the fileSystemId property: The ID of the file system for which to create the mount target.
     * 
     * @return the fileSystemId value.
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }

    /**
     * Set the fileSystemId property: The ID of the file system for which to create the mount target.
     * 
     * @param fileSystemId the fileSystemId value to set.
     * @return the AwsEfsMountTargetProperties object itself.
     */
    public AwsEfsMountTargetProperties withFileSystemId(String fileSystemId) {
        this.fileSystemId = fileSystemId;
        return this;
    }

    /**
     * Get the id property: Property id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Property id.
     * 
     * @param id the id value to set.
     * @return the AwsEfsMountTargetProperties object itself.
     */
    public AwsEfsMountTargetProperties withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the ipAddress property: Valid IPv4 address within the address range of the specified subnet.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: Valid IPv4 address within the address range of the specified subnet.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the AwsEfsMountTargetProperties object itself.
     */
    public AwsEfsMountTargetProperties withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the securityGroups property: Up to five VPC security group IDs, of the form ``sg-xxxxxxxx``. These must be
     * for the same VPC as subnet specified.
     * 
     * @return the securityGroups value.
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }

    /**
     * Set the securityGroups property: Up to five VPC security group IDs, of the form ``sg-xxxxxxxx``. These must be
     * for the same VPC as subnet specified.
     * 
     * @param securityGroups the securityGroups value to set.
     * @return the AwsEfsMountTargetProperties object itself.
     */
    public AwsEfsMountTargetProperties withSecurityGroups(List<String> securityGroups) {
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Get the subnetId property: The ID of the subnet to add the mount target in. For One Zone file systems, use the
     * subnet that is associated with the file system's Availability Zone.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: The ID of the subnet to add the mount target in. For One Zone file systems, use the
     * subnet that is associated with the file system's Availability Zone.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AwsEfsMountTargetProperties object itself.
     */
    public AwsEfsMountTargetProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fileSystemId", this.fileSystemId);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeArrayField("securityGroups", this.securityGroups,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("subnetId", this.subnetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEfsMountTargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEfsMountTargetProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEfsMountTargetProperties.
     */
    public static AwsEfsMountTargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEfsMountTargetProperties deserializedAwsEfsMountTargetProperties = new AwsEfsMountTargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileSystemId".equals(fieldName)) {
                    deserializedAwsEfsMountTargetProperties.fileSystemId = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedAwsEfsMountTargetProperties.id = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedAwsEfsMountTargetProperties.ipAddress = reader.getString();
                } else if ("securityGroups".equals(fieldName)) {
                    List<String> securityGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEfsMountTargetProperties.securityGroups = securityGroups;
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAwsEfsMountTargetProperties.subnetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEfsMountTargetProperties;
        });
    }
}
