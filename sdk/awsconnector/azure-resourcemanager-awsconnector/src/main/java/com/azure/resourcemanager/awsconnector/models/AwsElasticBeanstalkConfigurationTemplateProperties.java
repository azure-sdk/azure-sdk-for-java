// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsElasticBeanstalkConfigurationTemplate.
 */
@Fluent
public final class AwsElasticBeanstalkConfigurationTemplateProperties
    implements JsonSerializable<AwsElasticBeanstalkConfigurationTemplateProperties> {
    /*
     * The name of the Elastic Beanstalk application to associate with this configuration template.
     */
    private String applicationName;

    /*
     * An optional description for this configuration.
     */
    private String description;

    /*
     * The ID of an environment whose settings you want to use to create the configuration template. You must specify
     * EnvironmentId if you don't specify PlatformArn, SolutionStackName, or SourceConfiguration.
     */
    private String environmentId;

    /*
     * Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values
     * override the values obtained from the solution stack or the source configuration template. For a complete list of
     * Elastic Beanstalk configuration options, see [Option
     * Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk
     * Developer Guide.
     */
    private List<ConfigurationOptionSetting> optionSettings;

    /*
     * The Amazon Resource Name (ARN) of the custom platform. For more information, see [Custom
     * Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic
     * Beanstalk Developer Guide.
     */
    private String platformArn;

    /*
     * The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example,
     * 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and
     * application server for a configuration template. It also determines the set of configuration options as well as
     * the possible and default values. For more information, see [Supported
     * Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic
     * Beanstalk Developer Guide. You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or
     * SourceConfiguration. Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks.
     */
    private String solutionStackName;

    /*
     * An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the
     * configuration values from the specified configuration template to create a new configuration.Values specified in
     * OptionSettings override any values obtained from the SourceConfiguration.You must specify SourceConfiguration if
     * you don't specify PlatformArn, EnvironmentId, or SolutionStackName.Constraint: If both solution stack name and
     * source configuration are specified, the solution stack of the source configuration template must match the
     * specified solution stack name.
     */
    private SourceConfiguration sourceConfiguration;

    /*
     * The name of the configuration template
     */
    private String templateName;

    /**
     * Creates an instance of AwsElasticBeanstalkConfigurationTemplateProperties class.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties() {
    }

    /**
     * Get the applicationName property: The name of the Elastic Beanstalk application to associate with this
     * configuration template.
     * 
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: The name of the Elastic Beanstalk application to associate with this
     * configuration template.
     * 
     * @param applicationName the applicationName value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the description property: An optional description for this configuration.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: An optional description for this configuration.
     * 
     * @param description the description value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the environmentId property: The ID of an environment whose settings you want to use to create the
     * configuration template. You must specify EnvironmentId if you don't specify PlatformArn, SolutionStackName, or
     * SourceConfiguration.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: The ID of an environment whose settings you want to use to create the
     * configuration template. You must specify EnvironmentId if you don't specify PlatformArn, SolutionStackName, or
     * SourceConfiguration.
     * 
     * @param environmentId the environmentId value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the optionSettings property: Option values for the Elastic Beanstalk configuration, such as the instance
     * type. If specified, these values override the values obtained from the solution stack or the source configuration
     * template. For a complete list of Elastic Beanstalk configuration options, see [Option
     * Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk
     * Developer Guide.
     * 
     * @return the optionSettings value.
     */
    public List<ConfigurationOptionSetting> optionSettings() {
        return this.optionSettings;
    }

    /**
     * Set the optionSettings property: Option values for the Elastic Beanstalk configuration, such as the instance
     * type. If specified, these values override the values obtained from the solution stack or the source configuration
     * template. For a complete list of Elastic Beanstalk configuration options, see [Option
     * Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk
     * Developer Guide.
     * 
     * @param optionSettings the optionSettings value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties
        withOptionSettings(List<ConfigurationOptionSetting> optionSettings) {
        this.optionSettings = optionSettings;
        return this;
    }

    /**
     * Get the platformArn property: The Amazon Resource Name (ARN) of the custom platform. For more information, see
     * [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS
     * Elastic Beanstalk Developer Guide.
     * 
     * @return the platformArn value.
     */
    public String platformArn() {
        return this.platformArn;
    }

    /**
     * Set the platformArn property: The Amazon Resource Name (ARN) of the custom platform. For more information, see
     * [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS
     * Elastic Beanstalk Developer Guide.
     * 
     * @param platformArn the platformArn value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties withPlatformArn(String platformArn) {
        this.platformArn = platformArn;
        return this;
    }

    /**
     * Get the solutionStackName property: The name of an Elastic Beanstalk solution stack (platform version) that this
     * configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies
     * the operating system, runtime, and application server for a configuration template. It also determines the set of
     * configuration options as well as the possible and default values. For more information, see [Supported
     * Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic
     * Beanstalk Developer Guide. You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or
     * SourceConfiguration. Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks.
     * 
     * @return the solutionStackName value.
     */
    public String solutionStackName() {
        return this.solutionStackName;
    }

    /**
     * Set the solutionStackName property: The name of an Elastic Beanstalk solution stack (platform version) that this
     * configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies
     * the operating system, runtime, and application server for a configuration template. It also determines the set of
     * configuration options as well as the possible and default values. For more information, see [Supported
     * Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic
     * Beanstalk Developer Guide. You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or
     * SourceConfiguration. Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks.
     * 
     * @param solutionStackName the solutionStackName value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties withSolutionStackName(String solutionStackName) {
        this.solutionStackName = solutionStackName;
        return this;
    }

    /**
     * Get the sourceConfiguration property: An Elastic Beanstalk configuration template to base this one on. If
     * specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a
     * new configuration.Values specified in OptionSettings override any values obtained from the
     * SourceConfiguration.You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or
     * SolutionStackName.Constraint: If both solution stack name and source configuration are specified, the solution
     * stack of the source configuration template must match the specified solution stack name.
     * 
     * @return the sourceConfiguration value.
     */
    public SourceConfiguration sourceConfiguration() {
        return this.sourceConfiguration;
    }

    /**
     * Set the sourceConfiguration property: An Elastic Beanstalk configuration template to base this one on. If
     * specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a
     * new configuration.Values specified in OptionSettings override any values obtained from the
     * SourceConfiguration.You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or
     * SolutionStackName.Constraint: If both solution stack name and source configuration are specified, the solution
     * stack of the source configuration template must match the specified solution stack name.
     * 
     * @param sourceConfiguration the sourceConfiguration value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties
        withSourceConfiguration(SourceConfiguration sourceConfiguration) {
        this.sourceConfiguration = sourceConfiguration;
        return this;
    }

    /**
     * Get the templateName property: The name of the configuration template.
     * 
     * @return the templateName value.
     */
    public String templateName() {
        return this.templateName;
    }

    /**
     * Set the templateName property: The name of the configuration template.
     * 
     * @param templateName the templateName value to set.
     * @return the AwsElasticBeanstalkConfigurationTemplateProperties object itself.
     */
    public AwsElasticBeanstalkConfigurationTemplateProperties withTemplateName(String templateName) {
        this.templateName = templateName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (optionSettings() != null) {
            optionSettings().forEach(e -> e.validate());
        }
        if (sourceConfiguration() != null) {
            sourceConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationName", this.applicationName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("environmentId", this.environmentId);
        jsonWriter.writeArrayField("optionSettings", this.optionSettings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("platformArn", this.platformArn);
        jsonWriter.writeStringField("solutionStackName", this.solutionStackName);
        jsonWriter.writeJsonField("sourceConfiguration", this.sourceConfiguration);
        jsonWriter.writeStringField("templateName", this.templateName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsElasticBeanstalkConfigurationTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsElasticBeanstalkConfigurationTemplateProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsElasticBeanstalkConfigurationTemplateProperties.
     */
    public static AwsElasticBeanstalkConfigurationTemplateProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AwsElasticBeanstalkConfigurationTemplateProperties deserializedAwsElasticBeanstalkConfigurationTemplateProperties
                = new AwsElasticBeanstalkConfigurationTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.applicationName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.description = reader.getString();
                } else if ("environmentId".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.environmentId = reader.getString();
                } else if ("optionSettings".equals(fieldName)) {
                    List<ConfigurationOptionSetting> optionSettings
                        = reader.readArray(reader1 -> ConfigurationOptionSetting.fromJson(reader1));
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.optionSettings = optionSettings;
                } else if ("platformArn".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.platformArn = reader.getString();
                } else if ("solutionStackName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.solutionStackName
                        = reader.getString();
                } else if ("sourceConfiguration".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.sourceConfiguration
                        = SourceConfiguration.fromJson(reader);
                } else if ("templateName".equals(fieldName)) {
                    deserializedAwsElasticBeanstalkConfigurationTemplateProperties.templateName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsElasticBeanstalkConfigurationTemplateProperties;
        });
    }
}
