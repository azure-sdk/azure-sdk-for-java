// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of Configuration.
 */
@Fluent
public final class Configuration implements JsonSerializable<Configuration> {
    /*
     * <p>The classification within a configuration.</p>
     */
    private String classification;

    /*
     * <p>A list of additional configurations to apply within a configuration object.</p>
     */
    private List<Configuration> configurations;

    /*
     * <p>A set of properties specified within a configuration classification.</p>
     */
    private Map<String, String> properties;

    /**
     * Creates an instance of Configuration class.
     */
    public Configuration() {
    }

    /**
     * Get the classification property: &lt;p&gt;The classification within a configuration.&lt;/p&gt;.
     * 
     * @return the classification value.
     */
    public String classification() {
        return this.classification;
    }

    /**
     * Set the classification property: &lt;p&gt;The classification within a configuration.&lt;/p&gt;.
     * 
     * @param classification the classification value to set.
     * @return the Configuration object itself.
     */
    public Configuration withClassification(String classification) {
        this.classification = classification;
        return this;
    }

    /**
     * Get the configurations property: &lt;p&gt;A list of additional configurations to apply within a configuration
     * object.&lt;/p&gt;.
     * 
     * @return the configurations value.
     */
    public List<Configuration> configurations() {
        return this.configurations;
    }

    /**
     * Set the configurations property: &lt;p&gt;A list of additional configurations to apply within a configuration
     * object.&lt;/p&gt;.
     * 
     * @param configurations the configurations value to set.
     * @return the Configuration object itself.
     */
    public Configuration withConfigurations(List<Configuration> configurations) {
        this.configurations = configurations;
        return this;
    }

    /**
     * Get the properties property: &lt;p&gt;A set of properties specified within a configuration
     * classification.&lt;/p&gt;.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: &lt;p&gt;A set of properties specified within a configuration
     * classification.&lt;/p&gt;.
     * 
     * @param properties the properties value to set.
     * @return the Configuration object itself.
     */
    public Configuration withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configurations() != null) {
            configurations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("classification", this.classification);
        jsonWriter.writeArrayField("configurations", this.configurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Configuration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Configuration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Configuration.
     */
    public static Configuration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Configuration deserializedConfiguration = new Configuration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("classification".equals(fieldName)) {
                    deserializedConfiguration.classification = reader.getString();
                } else if ("configurations".equals(fieldName)) {
                    List<Configuration> configurations = reader.readArray(reader1 -> Configuration.fromJson(reader1));
                    deserializedConfiguration.configurations = configurations;
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedConfiguration.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConfiguration;
        });
    }
}
