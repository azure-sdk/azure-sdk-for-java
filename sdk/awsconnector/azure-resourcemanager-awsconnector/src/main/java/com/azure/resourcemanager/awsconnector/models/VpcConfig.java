// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of VpcConfig.
 */
@Fluent
public final class VpcConfig implements JsonSerializable<VpcConfig> {
    /*
     * <p>A list of one or more security groups IDs in your Amazon VPC.</p>
     */
    private List<String> securityGroupIds;

    /*
     * <p>A list of one or more subnet IDs in your Amazon VPC.</p>
     */
    private List<String> subnets;

    /*
     * <p>The ID of the Amazon VPC.</p>
     */
    private String vpcId;

    /**
     * Creates an instance of VpcConfig class.
     */
    public VpcConfig() {
    }

    /**
     * Get the securityGroupIds property: &lt;p&gt;A list of one or more security groups IDs in your Amazon
     * VPC.&lt;/p&gt;.
     * 
     * @return the securityGroupIds value.
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }

    /**
     * Set the securityGroupIds property: &lt;p&gt;A list of one or more security groups IDs in your Amazon
     * VPC.&lt;/p&gt;.
     * 
     * @param securityGroupIds the securityGroupIds value to set.
     * @return the VpcConfig object itself.
     */
    public VpcConfig withSecurityGroupIds(List<String> securityGroupIds) {
        this.securityGroupIds = securityGroupIds;
        return this;
    }

    /**
     * Get the subnets property: &lt;p&gt;A list of one or more subnet IDs in your Amazon VPC.&lt;/p&gt;.
     * 
     * @return the subnets value.
     */
    public List<String> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: &lt;p&gt;A list of one or more subnet IDs in your Amazon VPC.&lt;/p&gt;.
     * 
     * @param subnets the subnets value to set.
     * @return the VpcConfig object itself.
     */
    public VpcConfig withSubnets(List<String> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the vpcId property: &lt;p&gt;The ID of the Amazon VPC.&lt;/p&gt;.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: &lt;p&gt;The ID of the Amazon VPC.&lt;/p&gt;.
     * 
     * @param vpcId the vpcId value to set.
     * @return the VpcConfig object itself.
     */
    public VpcConfig withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("securityGroupIds", this.securityGroupIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VpcConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VpcConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the VpcConfig.
     */
    public static VpcConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VpcConfig deserializedVpcConfig = new VpcConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("securityGroupIds".equals(fieldName)) {
                    List<String> securityGroupIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedVpcConfig.securityGroupIds = securityGroupIds;
                } else if ("subnets".equals(fieldName)) {
                    List<String> subnets = reader.readArray(reader1 -> reader1.getString());
                    deserializedVpcConfig.subnets = subnets;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedVpcConfig.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVpcConfig;
        });
    }
}
