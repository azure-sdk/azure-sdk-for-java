// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of AddOn.
 */
@Fluent
public final class AddOn implements JsonSerializable<AddOn> {
    /*
     * The add-on type
     */
    private String addOnType;

    /*
     * An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
     */
    private AutoSnapshotAddOn autoSnapshotAddOnRequest;

    /*
     * Status of the Addon
     */
    private AddOnStatus status;

    /**
     * Creates an instance of AddOn class.
     */
    public AddOn() {
    }

    /**
     * Get the addOnType property: The add-on type.
     * 
     * @return the addOnType value.
     */
    public String addOnType() {
        return this.addOnType;
    }

    /**
     * Set the addOnType property: The add-on type.
     * 
     * @param addOnType the addOnType value to set.
     * @return the AddOn object itself.
     */
    public AddOn withAddOnType(String addOnType) {
        this.addOnType = addOnType;
        return this;
    }

    /**
     * Get the autoSnapshotAddOnRequest property: An object that represents additional parameters when enabling or
     * modifying the automatic snapshot add-on.
     * 
     * @return the autoSnapshotAddOnRequest value.
     */
    public AutoSnapshotAddOn autoSnapshotAddOnRequest() {
        return this.autoSnapshotAddOnRequest;
    }

    /**
     * Set the autoSnapshotAddOnRequest property: An object that represents additional parameters when enabling or
     * modifying the automatic snapshot add-on.
     * 
     * @param autoSnapshotAddOnRequest the autoSnapshotAddOnRequest value to set.
     * @return the AddOn object itself.
     */
    public AddOn withAutoSnapshotAddOnRequest(AutoSnapshotAddOn autoSnapshotAddOnRequest) {
        this.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest;
        return this;
    }

    /**
     * Get the status property: Status of the Addon.
     * 
     * @return the status value.
     */
    public AddOnStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the Addon.
     * 
     * @param status the status value to set.
     * @return the AddOn object itself.
     */
    public AddOn withStatus(AddOnStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (autoSnapshotAddOnRequest() != null) {
            autoSnapshotAddOnRequest().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("addOnType", this.addOnType);
        jsonWriter.writeJsonField("autoSnapshotAddOnRequest", this.autoSnapshotAddOnRequest);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddOn from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddOn if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the AddOn.
     */
    public static AddOn fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddOn deserializedAddOn = new AddOn();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addOnType".equals(fieldName)) {
                    deserializedAddOn.addOnType = reader.getString();
                } else if ("autoSnapshotAddOnRequest".equals(fieldName)) {
                    deserializedAddOn.autoSnapshotAddOnRequest = AutoSnapshotAddOn.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedAddOn.status = AddOnStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddOn;
        });
    }
}
