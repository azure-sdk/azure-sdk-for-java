// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EbsBlockDevice.
 */
@Fluent
public final class EbsBlockDevice implements JsonSerializable<EbsBlockDevice> {
    /*
     * <p>Indicates whether the EBS volume is deleted on instance termination. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-
     * termination'>Preserving Amazon EBS volumes on instance termination</a> in the <i>Amazon EC2 User Guide</i>.</p>
     */
    private Boolean deleteOnTermination;

    /*
     * <p>Indicates whether the encryption state of an EBS volume is changed while being restored from a backing
     * snapshot. The effect of setting the encryption state to <code>true</code> depends on the volume origin (new or
     * from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more
     * information, see <a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html#encryption-parameters'>Amazon EBS
     * encryption</a> in the <i>Amazon EBS User Guide</i>.</p> <p>In no case can you remove encryption from an encrypted
     * volume.</p> <p>Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more
     * information, see <a href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-
     * encryption_supported_instances'>Supported instance types</a>.</p> <p>This parameter is not returned by
     * <a>DescribeImageAttribute</a>.</p> <p>For <a>CreateImage</a> and <a>RegisterImage</a>, whether you can include
     * this parameter, and the allowed values differ depending on the type of block device mapping you are creating.</p>
     * <ul> <li> <p>If you are creating a block device mapping for a <b>new (empty) volume</b>, you can include this
     * parameter, and specify either <code>true</code> for an encrypted volume, or <code>false</code> for an unencrypted
     * volume. If you omit this parameter, it defaults to <code>false</code> (unencrypted).</p> </li> <li> <p>If you are
     * creating a block device mapping from an <b>existing encrypted or unencrypted snapshot</b>, you must omit this
     * parameter. If you include this parameter, the request will fail, regardless of the value that you specify.</p>
     * </li> <li> <p>If you are creating a block device mapping from an <b>existing unencrypted volume</b>, you can
     * include this parameter, but you must specify <code>false</code>. If you specify <code>true</code>, the request
     * will fail. In this case, we recommend that you omit the parameter.</p> </li> <li> <p>If you are creating a block
     * device mapping from an <b>existing encrypted volume</b>, you can include this parameter, and specify either
     * <code>true</code> or <code>false</code>. However, if you specify <code>false</code>, the parameter is ignored and
     * the block device mapping is always encrypted. In this case, we recommend that you omit the parameter.</p> </li>
     * </ul>
     */
    private Boolean encrypted;

    /*
     * <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code>
     * volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes,
     * this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits
     * for bursting.</p> <p>The following are the supported values for each volume type:</p> <ul> <li> <p>
     * <code>gp3</code>: 3,000 - 16,000 IOPS</p> </li> <li> <p> <code>io1</code>: 100 - 64,000 IOPS</p> </li> <li> <p>
     * <code>io2</code>: 100 - 256,000 IOPS</p> </li> </ul> <p>For <code>io2</code> volumes, you can achieve up to
     * 256,000 IOPS on <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances'>instances
     * built on the Nitro System</a>. On other instances, you can achieve performance up to 32,000 IOPS.</p> <p>This
     * parameter is required for <code>io1</code> and <code>io2</code> volumes. The default for <code>gp3</code> volumes
     * is 3,000 IOPS.</p>
     */
    private Integer iops;

    /*
     * <p>Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is
     * encrypted.</p> <p>This parameter is only supported on <code>BlockDeviceMapping</code> objects called by <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html'>RunInstances</a>, <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html'>RequestSpotFleet</a>, and
     * <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html'>RequestSpotInstances<
     * /a>.</p>
     */
    private String kmsKeyId;

    /*
     * <p>The ARN of the Outpost on which the snapshot is stored.</p> <p>This parameter is not supported when using <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html'>CreateImage</a>.</p>
     */
    private String outpostArn;

    /*
     * <p>The ID of the snapshot.</p>
     */
    private String snapshotId;

    /*
     * <p>The throughput that the volume supports, in MiB/s.</p> <p>This parameter is valid only for <code>gp3</code>
     * volumes.</p> <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>
     */
    private Integer throughput;

    /*
     * <p>The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a
     * snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the
     * snapshot size.</p> <p>The following are the supported sizes for each volume type:</p> <ul> <li> <p>
     * <code>gp2</code> and <code>gp3</code>: 1 - 16,384 GiB</p> </li> <li> <p> <code>io1</code>: 4 - 16,384 GiB</p>
     * </li> <li> <p> <code>io2</code>: 4 - 65,536 GiB</p> </li> <li> <p> <code>st1</code> and <code>sc1</code>: 125 -
     * 16,384 GiB</p> </li> <li> <p> <code>standard</code>: 1 - 1024 GiB</p> </li> </ul>
     */
    private Integer volumeSize;

    /*
     * <p>The volume type. For more information, see <a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html'>Amazon EBS volume types</a> in the
     * <i>Amazon EBS User Guide</i>.</p>
     */
    private VolumeTypeEnumValue volumeType;

    /**
     * Creates an instance of EbsBlockDevice class.
     */
    public EbsBlockDevice() {
    }

    /**
     * Get the deleteOnTermination property: &lt;p&gt;Indicates whether the EBS volume is deleted on instance
     * termination. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination'&gt;Preserving
     * Amazon EBS volumes on instance termination&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the deleteOnTermination value.
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }

    /**
     * Set the deleteOnTermination property: &lt;p&gt;Indicates whether the EBS volume is deleted on instance
     * termination. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination'&gt;Preserving
     * Amazon EBS volumes on instance termination&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param deleteOnTermination the deleteOnTermination value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withDeleteOnTermination(Boolean deleteOnTermination) {
        this.deleteOnTermination = deleteOnTermination;
        return this;
    }

    /**
     * Get the encrypted property: &lt;p&gt;Indicates whether the encryption state of an EBS volume is changed while
     * being restored from a backing snapshot. The effect of setting the encryption state to
     * &lt;code&gt;true&lt;/code&gt; depends on the volume origin (new or from a snapshot), starting encryption state,
     * ownership, and whether encryption by default is enabled. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html#encryption-parameters'&gt;Amazon EBS
     * encryption&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;In no case can you
     * remove encryption from an encrypted volume.&lt;/p&gt; &lt;p&gt;Encrypted volumes can only be attached to
     * instances that support Amazon EBS encryption. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances'&gt;Supported
     * instance types&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not returned by
     * &lt;a&gt;DescribeImageAttribute&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a&gt;CreateImage&lt;/a&gt; and
     * &lt;a&gt;RegisterImage&lt;/a&gt;, whether you can include this parameter, and the allowed values differ depending
     * on the type of block device mapping you are creating.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are
     * creating a block device mapping for a &lt;b&gt;new (empty) volume&lt;/b&gt;, you can include this parameter, and
     * specify either &lt;code&gt;true&lt;/code&gt; for an encrypted volume, or &lt;code&gt;false&lt;/code&gt; for an
     * unencrypted volume. If you omit this parameter, it defaults to &lt;code&gt;false&lt;/code&gt;
     * (unencrypted).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are creating a block device mapping from an
     * &lt;b&gt;existing encrypted or unencrypted snapshot&lt;/b&gt;, you must omit this parameter. If you include this
     * parameter, the request will fail, regardless of the value that you specify.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If you are creating a block device mapping from an &lt;b&gt;existing unencrypted volume&lt;/b&gt;, you
     * can include this parameter, but you must specify &lt;code&gt;false&lt;/code&gt;. If you specify
     * &lt;code&gt;true&lt;/code&gt;, the request will fail. In this case, we recommend that you omit the
     * parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are creating a block device mapping from an
     * &lt;b&gt;existing encrypted volume&lt;/b&gt;, you can include this parameter, and specify either
     * &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. However, if you specify
     * &lt;code&gt;false&lt;/code&gt;, the parameter is ignored and the block device mapping is always encrypted. In
     * this case, we recommend that you omit the parameter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the encrypted value.
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * Set the encrypted property: &lt;p&gt;Indicates whether the encryption state of an EBS volume is changed while
     * being restored from a backing snapshot. The effect of setting the encryption state to
     * &lt;code&gt;true&lt;/code&gt; depends on the volume origin (new or from a snapshot), starting encryption state,
     * ownership, and whether encryption by default is enabled. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html#encryption-parameters'&gt;Amazon EBS
     * encryption&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;In no case can you
     * remove encryption from an encrypted volume.&lt;/p&gt; &lt;p&gt;Encrypted volumes can only be attached to
     * instances that support Amazon EBS encryption. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances'&gt;Supported
     * instance types&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not returned by
     * &lt;a&gt;DescribeImageAttribute&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a&gt;CreateImage&lt;/a&gt; and
     * &lt;a&gt;RegisterImage&lt;/a&gt;, whether you can include this parameter, and the allowed values differ depending
     * on the type of block device mapping you are creating.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are
     * creating a block device mapping for a &lt;b&gt;new (empty) volume&lt;/b&gt;, you can include this parameter, and
     * specify either &lt;code&gt;true&lt;/code&gt; for an encrypted volume, or &lt;code&gt;false&lt;/code&gt; for an
     * unencrypted volume. If you omit this parameter, it defaults to &lt;code&gt;false&lt;/code&gt;
     * (unencrypted).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are creating a block device mapping from an
     * &lt;b&gt;existing encrypted or unencrypted snapshot&lt;/b&gt;, you must omit this parameter. If you include this
     * parameter, the request will fail, regardless of the value that you specify.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;If you are creating a block device mapping from an &lt;b&gt;existing unencrypted volume&lt;/b&gt;, you
     * can include this parameter, but you must specify &lt;code&gt;false&lt;/code&gt;. If you specify
     * &lt;code&gt;true&lt;/code&gt;, the request will fail. In this case, we recommend that you omit the
     * parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are creating a block device mapping from an
     * &lt;b&gt;existing encrypted volume&lt;/b&gt;, you can include this parameter, and specify either
     * &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. However, if you specify
     * &lt;code&gt;false&lt;/code&gt;, the parameter is ignored and the block device mapping is always encrypted. In
     * this case, we recommend that you omit the parameter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param encrypted the encrypted value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withEncrypted(Boolean encrypted) {
        this.encrypted = encrypted;
        return this;
    }

    /**
     * Get the iops property: &lt;p&gt;The number of I/O operations per second (IOPS). For &lt;code&gt;gp3&lt;/code&gt;,
     * &lt;code&gt;io1&lt;/code&gt;, and &lt;code&gt;io2&lt;/code&gt; volumes, this represents the number of IOPS that
     * are provisioned for the volume. For &lt;code&gt;gp2&lt;/code&gt; volumes, this represents the baseline
     * performance of the volume and the rate at which the volume accumulates I/O credits for bursting.&lt;/p&gt;
     * &lt;p&gt;The following are the supported values for each volume type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;gp3&lt;/code&gt;: 3,000 - 16,000 IOPS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io1&lt;/code&gt;: 100 - 64,000 IOPS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io2&lt;/code&gt;: 100 - 256,000 IOPS&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For
     * &lt;code&gt;io2&lt;/code&gt; volumes, you can achieve up to 256,000 IOPS on &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances'&gt;instances
     * built on the Nitro System&lt;/a&gt;. On other instances, you can achieve performance up to 32,000 IOPS.&lt;/p&gt;
     * &lt;p&gt;This parameter is required for &lt;code&gt;io1&lt;/code&gt; and &lt;code&gt;io2&lt;/code&gt; volumes.
     * The default for &lt;code&gt;gp3&lt;/code&gt; volumes is 3,000 IOPS.&lt;/p&gt;.
     * 
     * @return the iops value.
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * Set the iops property: &lt;p&gt;The number of I/O operations per second (IOPS). For &lt;code&gt;gp3&lt;/code&gt;,
     * &lt;code&gt;io1&lt;/code&gt;, and &lt;code&gt;io2&lt;/code&gt; volumes, this represents the number of IOPS that
     * are provisioned for the volume. For &lt;code&gt;gp2&lt;/code&gt; volumes, this represents the baseline
     * performance of the volume and the rate at which the volume accumulates I/O credits for bursting.&lt;/p&gt;
     * &lt;p&gt;The following are the supported values for each volume type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;gp3&lt;/code&gt;: 3,000 - 16,000 IOPS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io1&lt;/code&gt;: 100 - 64,000 IOPS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io2&lt;/code&gt;: 100 - 256,000 IOPS&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For
     * &lt;code&gt;io2&lt;/code&gt; volumes, you can achieve up to 256,000 IOPS on &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances'&gt;instances
     * built on the Nitro System&lt;/a&gt;. On other instances, you can achieve performance up to 32,000 IOPS.&lt;/p&gt;
     * &lt;p&gt;This parameter is required for &lt;code&gt;io1&lt;/code&gt; and &lt;code&gt;io2&lt;/code&gt; volumes.
     * The default for &lt;code&gt;gp3&lt;/code&gt; volumes is 3,000 IOPS.&lt;/p&gt;.
     * 
     * @param iops the iops value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withIops(Integer iops) {
        this.iops = iops;
        return this;
    }

    /**
     * Get the kmsKeyId property: &lt;p&gt;Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed
     * CMK under which the EBS volume is encrypted.&lt;/p&gt; &lt;p&gt;This parameter is only supported on
     * &lt;code&gt;BlockDeviceMapping&lt;/code&gt; objects called by &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html'&gt;RunInstances&lt;/a&gt;,
     * &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html'&gt;RequestSpotFleet&lt;/a&gt;,
     * and &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html'&gt;RequestSpotInstances&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the kmsKeyId value.
     */
    public String kmsKeyId() {
        return this.kmsKeyId;
    }

    /**
     * Set the kmsKeyId property: &lt;p&gt;Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed
     * CMK under which the EBS volume is encrypted.&lt;/p&gt; &lt;p&gt;This parameter is only supported on
     * &lt;code&gt;BlockDeviceMapping&lt;/code&gt; objects called by &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html'&gt;RunInstances&lt;/a&gt;,
     * &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html'&gt;RequestSpotFleet&lt;/a&gt;,
     * and &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html'&gt;RequestSpotInstances&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param kmsKeyId the kmsKeyId value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }

    /**
     * Get the outpostArn property: &lt;p&gt;The ARN of the Outpost on which the snapshot is stored.&lt;/p&gt;
     * &lt;p&gt;This parameter is not supported when using &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html'&gt;CreateImage&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: &lt;p&gt;The ARN of the Outpost on which the snapshot is stored.&lt;/p&gt;
     * &lt;p&gt;This parameter is not supported when using &lt;a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateImage.html'&gt;CreateImage&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the snapshotId property: &lt;p&gt;The ID of the snapshot.&lt;/p&gt;.
     * 
     * @return the snapshotId value.
     */
    public String snapshotId() {
        return this.snapshotId;
    }

    /**
     * Set the snapshotId property: &lt;p&gt;The ID of the snapshot.&lt;/p&gt;.
     * 
     * @param snapshotId the snapshotId value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * Get the throughput property: &lt;p&gt;The throughput that the volume supports, in MiB/s.&lt;/p&gt; &lt;p&gt;This
     * parameter is valid only for &lt;code&gt;gp3&lt;/code&gt; volumes.&lt;/p&gt; &lt;p&gt;Valid Range: Minimum value
     * of 125. Maximum value of 1000.&lt;/p&gt;.
     * 
     * @return the throughput value.
     */
    public Integer throughput() {
        return this.throughput;
    }

    /**
     * Set the throughput property: &lt;p&gt;The throughput that the volume supports, in MiB/s.&lt;/p&gt; &lt;p&gt;This
     * parameter is valid only for &lt;code&gt;gp3&lt;/code&gt; volumes.&lt;/p&gt; &lt;p&gt;Valid Range: Minimum value
     * of 125. Maximum value of 1000.&lt;/p&gt;.
     * 
     * @param throughput the throughput value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withThroughput(Integer throughput) {
        this.throughput = throughput;
        return this;
    }

    /**
     * Get the volumeSize property: &lt;p&gt;The size of the volume, in GiBs. You must specify either a snapshot ID or a
     * volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is
     * equal to or larger than the snapshot size.&lt;/p&gt; &lt;p&gt;The following are the supported sizes for each
     * volume type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;gp2&lt;/code&gt; and
     * &lt;code&gt;gp3&lt;/code&gt;: 1 - 16,384 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io1&lt;/code&gt;: 4 - 16,384 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io2&lt;/code&gt;: 4 - 65,536 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;st1&lt;/code&gt; and &lt;code&gt;sc1&lt;/code&gt;: 125 - 16,384 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;standard&lt;/code&gt;: 1 - 1024 GiB&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the volumeSize value.
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    /**
     * Set the volumeSize property: &lt;p&gt;The size of the volume, in GiBs. You must specify either a snapshot ID or a
     * volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is
     * equal to or larger than the snapshot size.&lt;/p&gt; &lt;p&gt;The following are the supported sizes for each
     * volume type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;gp2&lt;/code&gt; and
     * &lt;code&gt;gp3&lt;/code&gt;: 1 - 16,384 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io1&lt;/code&gt;: 4 - 16,384 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;io2&lt;/code&gt;: 4 - 65,536 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;st1&lt;/code&gt; and &lt;code&gt;sc1&lt;/code&gt;: 125 - 16,384 GiB&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;standard&lt;/code&gt;: 1 - 1024 GiB&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param volumeSize the volumeSize value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withVolumeSize(Integer volumeSize) {
        this.volumeSize = volumeSize;
        return this;
    }

    /**
     * Get the volumeType property: &lt;p&gt;The volume type. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html'&gt;Amazon EBS volume
     * types&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @return the volumeType value.
     */
    public VolumeTypeEnumValue volumeType() {
        return this.volumeType;
    }

    /**
     * Set the volumeType property: &lt;p&gt;The volume type. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html'&gt;Amazon EBS volume
     * types&lt;/a&gt; in the &lt;i&gt;Amazon EBS User Guide&lt;/i&gt;.&lt;/p&gt;.
     * 
     * @param volumeType the volumeType value to set.
     * @return the EbsBlockDevice object itself.
     */
    public EbsBlockDevice withVolumeType(VolumeTypeEnumValue volumeType) {
        this.volumeType = volumeType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (volumeType() != null) {
            volumeType().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("deleteOnTermination", this.deleteOnTermination);
        jsonWriter.writeBooleanField("encrypted", this.encrypted);
        jsonWriter.writeNumberField("iops", this.iops);
        jsonWriter.writeStringField("kmsKeyId", this.kmsKeyId);
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeStringField("snapshotId", this.snapshotId);
        jsonWriter.writeNumberField("throughput", this.throughput);
        jsonWriter.writeNumberField("volumeSize", this.volumeSize);
        jsonWriter.writeJsonField("volumeType", this.volumeType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EbsBlockDevice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EbsBlockDevice if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EbsBlockDevice.
     */
    public static EbsBlockDevice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EbsBlockDevice deserializedEbsBlockDevice = new EbsBlockDevice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deleteOnTermination".equals(fieldName)) {
                    deserializedEbsBlockDevice.deleteOnTermination = reader.getNullable(JsonReader::getBoolean);
                } else if ("encrypted".equals(fieldName)) {
                    deserializedEbsBlockDevice.encrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("iops".equals(fieldName)) {
                    deserializedEbsBlockDevice.iops = reader.getNullable(JsonReader::getInt);
                } else if ("kmsKeyId".equals(fieldName)) {
                    deserializedEbsBlockDevice.kmsKeyId = reader.getString();
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedEbsBlockDevice.outpostArn = reader.getString();
                } else if ("snapshotId".equals(fieldName)) {
                    deserializedEbsBlockDevice.snapshotId = reader.getString();
                } else if ("throughput".equals(fieldName)) {
                    deserializedEbsBlockDevice.throughput = reader.getNullable(JsonReader::getInt);
                } else if ("volumeSize".equals(fieldName)) {
                    deserializedEbsBlockDevice.volumeSize = reader.getNullable(JsonReader::getInt);
                } else if ("volumeType".equals(fieldName)) {
                    deserializedEbsBlockDevice.volumeType = VolumeTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEbsBlockDevice;
        });
    }
}
