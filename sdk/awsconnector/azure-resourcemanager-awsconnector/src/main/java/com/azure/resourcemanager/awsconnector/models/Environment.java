// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of Environment.
 */
@Fluent
public final class Environment implements JsonSerializable<Environment> {
    /*
     * Environment variable key-value pairs. For more information, see [Using Lambda environment
     * variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
     */
    private Map<String, String> variables;

    /**
     * Creates an instance of Environment class.
     */
    public Environment() {
    }

    /**
     * Get the variables property: Environment variable key-value pairs. For more information, see [Using Lambda
     * environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
     * 
     * @return the variables value.
     */
    public Map<String, String> variables() {
        return this.variables;
    }

    /**
     * Set the variables property: Environment variable key-value pairs. For more information, see [Using Lambda
     * environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
     * 
     * @param variables the variables value to set.
     * @return the Environment object itself.
     */
    public Environment withVariables(Map<String, String> variables) {
        this.variables = variables;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("variables", this.variables, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Environment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Environment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Environment.
     */
    public static Environment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Environment deserializedEnvironment = new Environment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("variables".equals(fieldName)) {
                    Map<String, String> variables = reader.readMap(reader1 -> reader1.getString());
                    deserializedEnvironment.variables = variables;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvironment;
        });
    }
}
