// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of Cookies.
 */
@Fluent
public final class Cookies implements JsonSerializable<Cookies> {
    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating
     * cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin
     * but not include them in the cache key, use origin request policy. For more information, see [Creating origin
     * request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*. Specifies which cookies
     * to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the
     * ``WhitelistedNames`` complex type. Amazon S3 doesn't process cookies. When the cache behavior is forwarding
     * requests to an Amazon S3 origin, specify none for the ``Forward`` element.
     */
    private String forward;

    /*
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this
     * field. If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating
     * cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache
     * -key-create-cache-policy) in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin
     * but not include them in the cache key, use an origin request policy. For more information, see [Creating origin
     * request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#
     * origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
     */
    private List<String> whitelistedNames;

    /**
     * Creates an instance of Cookies class.
     */
    public Cookies() {
    }

    /**
     * Get the forward property: This field is deprecated. We recommend that you use a cache policy or an origin request
     * policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. Specifies which cookies to forward to the origin for this cache
     * behavior: all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't
     * process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the
     * ``Forward`` element.
     * 
     * @return the forward value.
     */
    public String forward() {
        return this.forward;
    }

    /**
     * Set the forward property: This field is deprecated. We recommend that you use a cache policy or an origin request
     * policy instead of this field. If you want to include cookies in the cache key, use a cache policy. For more
     * information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*. Specifies which cookies to forward to the origin for this cache
     * behavior: all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type. Amazon S3 doesn't
     * process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the
     * ``Forward`` element.
     * 
     * @param forward the forward value to set.
     * @return the Cookies object itself.
     */
    public Cookies withForward(String forward) {
        this.forward = forward;
        return this;
    }

    /**
     * Get the whitelistedNames property: This field is deprecated. We recommend that you use a cache policy or an
     * origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy.
     * For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @return the whitelistedNames value.
     */
    public List<String> whitelistedNames() {
        return this.whitelistedNames;
    }

    /**
     * Set the whitelistedNames property: This field is deprecated. We recommend that you use a cache policy or an
     * origin request policy instead of this field. If you want to include cookies in the cache key, use a cache policy.
     * For more information, see [Creating cache
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy)
     * in the *Amazon CloudFront Developer Guide*. If you want to send cookies to the origin but not include them in the
     * cache key, use an origin request policy. For more information, see [Creating origin request
     * policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @param whitelistedNames the whitelistedNames value to set.
     * @return the Cookies object itself.
     */
    public Cookies withWhitelistedNames(List<String> whitelistedNames) {
        this.whitelistedNames = whitelistedNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("forward", this.forward);
        jsonWriter.writeArrayField("whitelistedNames", this.whitelistedNames,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cookies from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cookies if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Cookies.
     */
    public static Cookies fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cookies deserializedCookies = new Cookies();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("forward".equals(fieldName)) {
                    deserializedCookies.forward = reader.getString();
                } else if ("whitelistedNames".equals(fieldName)) {
                    List<String> whitelistedNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedCookies.whitelistedNames = whitelistedNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCookies;
        });
    }
}
