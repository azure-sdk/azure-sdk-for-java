// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Definition of Policy.
 */
@Fluent
public final class PolicyAutoGenerated implements JsonSerializable<PolicyAutoGenerated> {
    /*
     * The entire contents of the policy that defines permissions. For more information, see [Overview of JSON
     * policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
     */
    private Map<String, Object> policyDocument;

    /*
     * The friendly name (not ARN) identifying the policy.
     */
    private String policyName;

    /**
     * Creates an instance of PolicyAutoGenerated class.
     */
    public PolicyAutoGenerated() {
    }

    /**
     * Get the policyDocument property: The entire contents of the policy that defines permissions. For more
     * information, see [Overview of JSON
     * policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
     * 
     * @return the policyDocument value.
     */
    public Map<String, Object> policyDocument() {
        return this.policyDocument;
    }

    /**
     * Set the policyDocument property: The entire contents of the policy that defines permissions. For more
     * information, see [Overview of JSON
     * policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
     * 
     * @param policyDocument the policyDocument value to set.
     * @return the PolicyAutoGenerated object itself.
     */
    public PolicyAutoGenerated withPolicyDocument(Map<String, Object> policyDocument) {
        this.policyDocument = policyDocument;
        return this;
    }

    /**
     * Get the policyName property: The friendly name (not ARN) identifying the policy.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Set the policyName property: The friendly name (not ARN) identifying the policy.
     * 
     * @param policyName the policyName value to set.
     * @return the PolicyAutoGenerated object itself.
     */
    public PolicyAutoGenerated withPolicyName(String policyName) {
        this.policyName = policyName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("policyDocument", this.policyDocument,
            (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("policyName", this.policyName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyAutoGenerated if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyAutoGenerated.
     */
    public static PolicyAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyAutoGenerated deserializedPolicyAutoGenerated = new PolicyAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyDocument".equals(fieldName)) {
                    Map<String, Object> policyDocument = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedPolicyAutoGenerated.policyDocument = policyDocument;
                } else if ("policyName".equals(fieldName)) {
                    deserializedPolicyAutoGenerated.policyName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyAutoGenerated;
        });
    }
}
