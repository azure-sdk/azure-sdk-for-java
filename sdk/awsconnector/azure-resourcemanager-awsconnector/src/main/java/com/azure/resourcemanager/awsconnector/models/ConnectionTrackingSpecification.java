// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ConnectionTrackingSpecification.
 */
@Fluent
public final class ConnectionTrackingSpecification implements JsonSerializable<ConnectionTrackingSpecification> {
    /*
     * Property tcpEstablishedTimeout
     */
    private Integer tcpEstablishedTimeout;

    /*
     * Property udpStreamTimeout
     */
    private Integer udpStreamTimeout;

    /*
     * Property udpTimeout
     */
    private Integer udpTimeout;

    /**
     * Creates an instance of ConnectionTrackingSpecification class.
     */
    public ConnectionTrackingSpecification() {
    }

    /**
     * Get the tcpEstablishedTimeout property: Property tcpEstablishedTimeout.
     * 
     * @return the tcpEstablishedTimeout value.
     */
    public Integer tcpEstablishedTimeout() {
        return this.tcpEstablishedTimeout;
    }

    /**
     * Set the tcpEstablishedTimeout property: Property tcpEstablishedTimeout.
     * 
     * @param tcpEstablishedTimeout the tcpEstablishedTimeout value to set.
     * @return the ConnectionTrackingSpecification object itself.
     */
    public ConnectionTrackingSpecification withTcpEstablishedTimeout(Integer tcpEstablishedTimeout) {
        this.tcpEstablishedTimeout = tcpEstablishedTimeout;
        return this;
    }

    /**
     * Get the udpStreamTimeout property: Property udpStreamTimeout.
     * 
     * @return the udpStreamTimeout value.
     */
    public Integer udpStreamTimeout() {
        return this.udpStreamTimeout;
    }

    /**
     * Set the udpStreamTimeout property: Property udpStreamTimeout.
     * 
     * @param udpStreamTimeout the udpStreamTimeout value to set.
     * @return the ConnectionTrackingSpecification object itself.
     */
    public ConnectionTrackingSpecification withUdpStreamTimeout(Integer udpStreamTimeout) {
        this.udpStreamTimeout = udpStreamTimeout;
        return this;
    }

    /**
     * Get the udpTimeout property: Property udpTimeout.
     * 
     * @return the udpTimeout value.
     */
    public Integer udpTimeout() {
        return this.udpTimeout;
    }

    /**
     * Set the udpTimeout property: Property udpTimeout.
     * 
     * @param udpTimeout the udpTimeout value to set.
     * @return the ConnectionTrackingSpecification object itself.
     */
    public ConnectionTrackingSpecification withUdpTimeout(Integer udpTimeout) {
        this.udpTimeout = udpTimeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("tcpEstablishedTimeout", this.tcpEstablishedTimeout);
        jsonWriter.writeNumberField("udpStreamTimeout", this.udpStreamTimeout);
        jsonWriter.writeNumberField("udpTimeout", this.udpTimeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionTrackingSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionTrackingSpecification if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectionTrackingSpecification.
     */
    public static ConnectionTrackingSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionTrackingSpecification deserializedConnectionTrackingSpecification
                = new ConnectionTrackingSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tcpEstablishedTimeout".equals(fieldName)) {
                    deserializedConnectionTrackingSpecification.tcpEstablishedTimeout
                        = reader.getNullable(JsonReader::getInt);
                } else if ("udpStreamTimeout".equals(fieldName)) {
                    deserializedConnectionTrackingSpecification.udpStreamTimeout
                        = reader.getNullable(JsonReader::getInt);
                } else if ("udpTimeout".equals(fieldName)) {
                    deserializedConnectionTrackingSpecification.udpTimeout = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionTrackingSpecification;
        });
    }
}
