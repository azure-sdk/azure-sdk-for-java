// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ColdStorageOptions.
 */
@Fluent
public final class ColdStorageOptions implements JsonSerializable<ColdStorageOptions> {
    /*
     * <p>Whether to enable or disable cold storage on the domain. You must enable UltraWarm storage to enable cold
     * storage.</p>
     */
    private Boolean enabled;

    /**
     * Creates an instance of ColdStorageOptions class.
     */
    public ColdStorageOptions() {
    }

    /**
     * Get the enabled property: &lt;p&gt;Whether to enable or disable cold storage on the domain. You must enable
     * UltraWarm storage to enable cold storage.&lt;/p&gt;.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: &lt;p&gt;Whether to enable or disable cold storage on the domain. You must enable
     * UltraWarm storage to enable cold storage.&lt;/p&gt;.
     * 
     * @param enabled the enabled value to set.
     * @return the ColdStorageOptions object itself.
     */
    public ColdStorageOptions withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ColdStorageOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ColdStorageOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ColdStorageOptions.
     */
    public static ColdStorageOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ColdStorageOptions deserializedColdStorageOptions = new ColdStorageOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedColdStorageOptions.enabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedColdStorageOptions;
        });
    }
}
