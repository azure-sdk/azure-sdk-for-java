// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InputFormatOptions.
 */
@Fluent
public final class InputFormatOptions implements JsonSerializable<InputFormatOptions> {
    /*
     * The options for imported source files in CSV format. The values are Delimiter and HeaderList. The options for
     * imported source files in CSV format. The values are Delimiter and HeaderList.
     */
    private Csv csv;

    /**
     * Creates an instance of InputFormatOptions class.
     */
    public InputFormatOptions() {
    }

    /**
     * Get the csv property: The options for imported source files in CSV format. The values are Delimiter and
     * HeaderList. The options for imported source files in CSV format. The values are Delimiter and HeaderList.
     * 
     * @return the csv value.
     */
    public Csv csv() {
        return this.csv;
    }

    /**
     * Set the csv property: The options for imported source files in CSV format. The values are Delimiter and
     * HeaderList. The options for imported source files in CSV format. The values are Delimiter and HeaderList.
     * 
     * @param csv the csv value to set.
     * @return the InputFormatOptions object itself.
     */
    public InputFormatOptions withCsv(Csv csv) {
        this.csv = csv;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (csv() != null) {
            csv().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("csv", this.csv);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InputFormatOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InputFormatOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InputFormatOptions.
     */
    public static InputFormatOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InputFormatOptions deserializedInputFormatOptions = new InputFormatOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("csv".equals(fieldName)) {
                    deserializedInputFormatOptions.csv = Csv.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInputFormatOptions;
        });
    }
}
