// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MethodSetting.
 */
@Fluent
public final class MethodSetting implements JsonSerializable<MethodSetting> {
    /*
     * Specifies whether the cached responses are encrypted.
     */
    private Boolean cacheDataEncrypted;

    /*
     * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response
     * will be cached.
     */
    private Integer cacheTtlInSeconds;

    /*
     * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the
     * stage for responses to be cached.
     */
    private Boolean cachingEnabled;

    /*
     * Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon
     * CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend
     * that you don't enable this option for production APIs.
     */
    private Boolean dataTraceEnabled;

    /*
     * The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the
     * ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a
     * ``MethodSetting``.
     */
    private String httpMethod;

    /*
     * Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs.
     * Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to
     * CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.
     */
    private String loggingLevel;

    /*
     * Specifies whether Amazon CloudWatch metrics are enabled for this method.
     */
    private Boolean metricsEnabled;

    /*
     * The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must
     * include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as
     * ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to multiple
     * resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``.
     * This parameter is required when you specify a ``MethodSetting``.
     */
    private String resourcePath;

    /*
     * Specifies the throttling burst limit.
     */
    private Integer throttlingBurstLimit;

    /*
     * Specifies the throttling rate limit.
     */
    private Integer throttlingRateLimit;

    /**
     * Creates an instance of MethodSetting class.
     */
    public MethodSetting() {
    }

    /**
     * Get the cacheDataEncrypted property: Specifies whether the cached responses are encrypted.
     * 
     * @return the cacheDataEncrypted value.
     */
    public Boolean cacheDataEncrypted() {
        return this.cacheDataEncrypted;
    }

    /**
     * Set the cacheDataEncrypted property: Specifies whether the cached responses are encrypted.
     * 
     * @param cacheDataEncrypted the cacheDataEncrypted value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withCacheDataEncrypted(Boolean cacheDataEncrypted) {
        this.cacheDataEncrypted = cacheDataEncrypted;
        return this;
    }

    /**
     * Get the cacheTtlInSeconds property: Specifies the time to live (TTL), in seconds, for cached responses. The
     * higher the TTL, the longer the response will be cached.
     * 
     * @return the cacheTtlInSeconds value.
     */
    public Integer cacheTtlInSeconds() {
        return this.cacheTtlInSeconds;
    }

    /**
     * Set the cacheTtlInSeconds property: Specifies the time to live (TTL), in seconds, for cached responses. The
     * higher the TTL, the longer the response will be cached.
     * 
     * @param cacheTtlInSeconds the cacheTtlInSeconds value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withCacheTtlInSeconds(Integer cacheTtlInSeconds) {
        this.cacheTtlInSeconds = cacheTtlInSeconds;
        return this;
    }

    /**
     * Get the cachingEnabled property: Specifies whether responses should be cached and returned for requests. A cache
     * cluster must be enabled on the stage for responses to be cached.
     * 
     * @return the cachingEnabled value.
     */
    public Boolean cachingEnabled() {
        return this.cachingEnabled;
    }

    /**
     * Set the cachingEnabled property: Specifies whether responses should be cached and returned for requests. A cache
     * cluster must be enabled on the stage for responses to be cached.
     * 
     * @param cachingEnabled the cachingEnabled value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withCachingEnabled(Boolean cachingEnabled) {
        this.cachingEnabled = cachingEnabled;
        return this;
    }

    /**
     * Get the dataTraceEnabled property: Specifies whether data trace logging is enabled for this method, which affects
     * the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in
     * logging sensitive data. We recommend that you don't enable this option for production APIs.
     * 
     * @return the dataTraceEnabled value.
     */
    public Boolean dataTraceEnabled() {
        return this.dataTraceEnabled;
    }

    /**
     * Set the dataTraceEnabled property: Specifies whether data trace logging is enabled for this method, which affects
     * the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in
     * logging sensitive data. We recommend that you don't enable this option for production APIs.
     * 
     * @param dataTraceEnabled the dataTraceEnabled value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withDataTraceEnabled(Boolean dataTraceEnabled) {
        this.dataTraceEnabled = dataTraceEnabled;
        return this;
    }

    /**
     * Get the httpMethod property: The HTTP method. To apply settings to multiple resources and methods, specify an
     * asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you
     * specify a ``MethodSetting``.
     * 
     * @return the httpMethod value.
     */
    public String httpMethod() {
        return this.httpMethod;
    }

    /**
     * Set the httpMethod property: The HTTP method. To apply settings to multiple resources and methods, specify an
     * asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you
     * specify a ``MethodSetting``.
     * 
     * @param httpMethod the httpMethod value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withHttpMethod(String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }

    /**
     * Get the loggingLevel property: Specifies the logging level for this method, which affects the log entries pushed
     * to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only
     * error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra
     * informational events.
     * 
     * @return the loggingLevel value.
     */
    public String loggingLevel() {
        return this.loggingLevel;
    }

    /**
     * Set the loggingLevel property: Specifies the logging level for this method, which affects the log entries pushed
     * to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only
     * error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra
     * informational events.
     * 
     * @param loggingLevel the loggingLevel value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withLoggingLevel(String loggingLevel) {
        this.loggingLevel = loggingLevel;
        return this;
    }

    /**
     * Get the metricsEnabled property: Specifies whether Amazon CloudWatch metrics are enabled for this method.
     * 
     * @return the metricsEnabled value.
     */
    public Boolean metricsEnabled() {
        return this.metricsEnabled;
    }

    /**
     * Set the metricsEnabled property: Specifies whether Amazon CloudWatch metrics are enabled for this method.
     * 
     * @param metricsEnabled the metricsEnabled value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withMetricsEnabled(Boolean metricsEnabled) {
        this.metricsEnabled = metricsEnabled;
        return this;
    }

    /**
     * Get the resourcePath property: The resource path for this method. Forward slashes (``/``) are encoded as ``~1``
     * and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be
     * encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to
     * multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the
     * ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
     * 
     * @return the resourcePath value.
     */
    public String resourcePath() {
        return this.resourcePath;
    }

    /**
     * Set the resourcePath property: The resource path for this method. Forward slashes (``/``) are encoded as ``~1``
     * and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be
     * encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to
     * multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the
     * ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
     * 
     * @param resourcePath the resourcePath value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withResourcePath(String resourcePath) {
        this.resourcePath = resourcePath;
        return this;
    }

    /**
     * Get the throttlingBurstLimit property: Specifies the throttling burst limit.
     * 
     * @return the throttlingBurstLimit value.
     */
    public Integer throttlingBurstLimit() {
        return this.throttlingBurstLimit;
    }

    /**
     * Set the throttlingBurstLimit property: Specifies the throttling burst limit.
     * 
     * @param throttlingBurstLimit the throttlingBurstLimit value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withThrottlingBurstLimit(Integer throttlingBurstLimit) {
        this.throttlingBurstLimit = throttlingBurstLimit;
        return this;
    }

    /**
     * Get the throttlingRateLimit property: Specifies the throttling rate limit.
     * 
     * @return the throttlingRateLimit value.
     */
    public Integer throttlingRateLimit() {
        return this.throttlingRateLimit;
    }

    /**
     * Set the throttlingRateLimit property: Specifies the throttling rate limit.
     * 
     * @param throttlingRateLimit the throttlingRateLimit value to set.
     * @return the MethodSetting object itself.
     */
    public MethodSetting withThrottlingRateLimit(Integer throttlingRateLimit) {
        this.throttlingRateLimit = throttlingRateLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("cacheDataEncrypted", this.cacheDataEncrypted);
        jsonWriter.writeNumberField("cacheTtlInSeconds", this.cacheTtlInSeconds);
        jsonWriter.writeBooleanField("cachingEnabled", this.cachingEnabled);
        jsonWriter.writeBooleanField("dataTraceEnabled", this.dataTraceEnabled);
        jsonWriter.writeStringField("httpMethod", this.httpMethod);
        jsonWriter.writeStringField("loggingLevel", this.loggingLevel);
        jsonWriter.writeBooleanField("metricsEnabled", this.metricsEnabled);
        jsonWriter.writeStringField("resourcePath", this.resourcePath);
        jsonWriter.writeNumberField("throttlingBurstLimit", this.throttlingBurstLimit);
        jsonWriter.writeNumberField("throttlingRateLimit", this.throttlingRateLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MethodSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MethodSetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MethodSetting.
     */
    public static MethodSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MethodSetting deserializedMethodSetting = new MethodSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cacheDataEncrypted".equals(fieldName)) {
                    deserializedMethodSetting.cacheDataEncrypted = reader.getNullable(JsonReader::getBoolean);
                } else if ("cacheTtlInSeconds".equals(fieldName)) {
                    deserializedMethodSetting.cacheTtlInSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("cachingEnabled".equals(fieldName)) {
                    deserializedMethodSetting.cachingEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("dataTraceEnabled".equals(fieldName)) {
                    deserializedMethodSetting.dataTraceEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("httpMethod".equals(fieldName)) {
                    deserializedMethodSetting.httpMethod = reader.getString();
                } else if ("loggingLevel".equals(fieldName)) {
                    deserializedMethodSetting.loggingLevel = reader.getString();
                } else if ("metricsEnabled".equals(fieldName)) {
                    deserializedMethodSetting.metricsEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("resourcePath".equals(fieldName)) {
                    deserializedMethodSetting.resourcePath = reader.getString();
                } else if ("throttlingBurstLimit".equals(fieldName)) {
                    deserializedMethodSetting.throttlingBurstLimit = reader.getNullable(JsonReader::getInt);
                } else if ("throttlingRateLimit".equals(fieldName)) {
                    deserializedMethodSetting.throttlingRateLimit = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMethodSetting;
        });
    }
}
