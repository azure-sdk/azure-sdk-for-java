// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ExecuteCommandLogConfiguration.
 */
@Fluent
public final class ExecuteCommandLogConfiguration implements JsonSerializable<ExecuteCommandLogConfiguration> {
    /*
     * Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
     */
    private Boolean cloudWatchEncryptionEnabled;

    /*
     * The name of the CloudWatch log group to send logs to. The CloudWatch log group must already be created.
     */
    private String cloudWatchLogGroupName;

    /*
     * The name of the S3 bucket to send logs to. The S3 bucket must already be created.
     */
    private String s3BucketName;

    /*
     * Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
     */
    private Boolean s3EncryptionEnabled;

    /*
     * An optional folder in the S3 bucket to place logs in.
     */
    private String s3KeyPrefix;

    /**
     * Creates an instance of ExecuteCommandLogConfiguration class.
     */
    public ExecuteCommandLogConfiguration() {
    }

    /**
     * Get the cloudWatchEncryptionEnabled property: Determines whether to use encryption on the CloudWatch logs. If not
     * specified, encryption will be off.
     * 
     * @return the cloudWatchEncryptionEnabled value.
     */
    public Boolean cloudWatchEncryptionEnabled() {
        return this.cloudWatchEncryptionEnabled;
    }

    /**
     * Set the cloudWatchEncryptionEnabled property: Determines whether to use encryption on the CloudWatch logs. If not
     * specified, encryption will be off.
     * 
     * @param cloudWatchEncryptionEnabled the cloudWatchEncryptionEnabled value to set.
     * @return the ExecuteCommandLogConfiguration object itself.
     */
    public ExecuteCommandLogConfiguration withCloudWatchEncryptionEnabled(Boolean cloudWatchEncryptionEnabled) {
        this.cloudWatchEncryptionEnabled = cloudWatchEncryptionEnabled;
        return this;
    }

    /**
     * Get the cloudWatchLogGroupName property: The name of the CloudWatch log group to send logs to. The CloudWatch log
     * group must already be created.
     * 
     * @return the cloudWatchLogGroupName value.
     */
    public String cloudWatchLogGroupName() {
        return this.cloudWatchLogGroupName;
    }

    /**
     * Set the cloudWatchLogGroupName property: The name of the CloudWatch log group to send logs to. The CloudWatch log
     * group must already be created.
     * 
     * @param cloudWatchLogGroupName the cloudWatchLogGroupName value to set.
     * @return the ExecuteCommandLogConfiguration object itself.
     */
    public ExecuteCommandLogConfiguration withCloudWatchLogGroupName(String cloudWatchLogGroupName) {
        this.cloudWatchLogGroupName = cloudWatchLogGroupName;
        return this;
    }

    /**
     * Get the s3BucketName property: The name of the S3 bucket to send logs to. The S3 bucket must already be created.
     * 
     * @return the s3BucketName value.
     */
    public String s3BucketName() {
        return this.s3BucketName;
    }

    /**
     * Set the s3BucketName property: The name of the S3 bucket to send logs to. The S3 bucket must already be created.
     * 
     * @param s3BucketName the s3BucketName value to set.
     * @return the ExecuteCommandLogConfiguration object itself.
     */
    public ExecuteCommandLogConfiguration withS3BucketName(String s3BucketName) {
        this.s3BucketName = s3BucketName;
        return this;
    }

    /**
     * Get the s3EncryptionEnabled property: Determines whether to use encryption on the S3 logs. If not specified,
     * encryption is not used.
     * 
     * @return the s3EncryptionEnabled value.
     */
    public Boolean s3EncryptionEnabled() {
        return this.s3EncryptionEnabled;
    }

    /**
     * Set the s3EncryptionEnabled property: Determines whether to use encryption on the S3 logs. If not specified,
     * encryption is not used.
     * 
     * @param s3EncryptionEnabled the s3EncryptionEnabled value to set.
     * @return the ExecuteCommandLogConfiguration object itself.
     */
    public ExecuteCommandLogConfiguration withS3EncryptionEnabled(Boolean s3EncryptionEnabled) {
        this.s3EncryptionEnabled = s3EncryptionEnabled;
        return this;
    }

    /**
     * Get the s3KeyPrefix property: An optional folder in the S3 bucket to place logs in.
     * 
     * @return the s3KeyPrefix value.
     */
    public String s3KeyPrefix() {
        return this.s3KeyPrefix;
    }

    /**
     * Set the s3KeyPrefix property: An optional folder in the S3 bucket to place logs in.
     * 
     * @param s3KeyPrefix the s3KeyPrefix value to set.
     * @return the ExecuteCommandLogConfiguration object itself.
     */
    public ExecuteCommandLogConfiguration withS3KeyPrefix(String s3KeyPrefix) {
        this.s3KeyPrefix = s3KeyPrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("cloudWatchEncryptionEnabled", this.cloudWatchEncryptionEnabled);
        jsonWriter.writeStringField("cloudWatchLogGroupName", this.cloudWatchLogGroupName);
        jsonWriter.writeStringField("s3BucketName", this.s3BucketName);
        jsonWriter.writeBooleanField("s3EncryptionEnabled", this.s3EncryptionEnabled);
        jsonWriter.writeStringField("s3KeyPrefix", this.s3KeyPrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExecuteCommandLogConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExecuteCommandLogConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExecuteCommandLogConfiguration.
     */
    public static ExecuteCommandLogConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExecuteCommandLogConfiguration deserializedExecuteCommandLogConfiguration
                = new ExecuteCommandLogConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cloudWatchEncryptionEnabled".equals(fieldName)) {
                    deserializedExecuteCommandLogConfiguration.cloudWatchEncryptionEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("cloudWatchLogGroupName".equals(fieldName)) {
                    deserializedExecuteCommandLogConfiguration.cloudWatchLogGroupName = reader.getString();
                } else if ("s3BucketName".equals(fieldName)) {
                    deserializedExecuteCommandLogConfiguration.s3BucketName = reader.getString();
                } else if ("s3EncryptionEnabled".equals(fieldName)) {
                    deserializedExecuteCommandLogConfiguration.s3EncryptionEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("s3KeyPrefix".equals(fieldName)) {
                    deserializedExecuteCommandLogConfiguration.s3KeyPrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExecuteCommandLogConfiguration;
        });
    }
}
