// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ProjectBuildBatchConfig.
 */
@Fluent
public final class ProjectBuildBatchConfig implements JsonSerializable<ProjectBuildBatchConfig> {
    /*
     * <p>Specifies how build status reports are sent to the source provider for the batch build. This property is only
     * used when the source provider for your project is Bitbucket, GitHub, or GitHub Enterprise, and your project is
     * configured to report build statuses to the source provider.</p> <dl> <dt>REPORT_AGGREGATED_BATCH</dt> <dd>
     * <p>(Default) Aggregate all of the build statuses into a single status report.</p> </dd>
     * <dt>REPORT_INDIVIDUAL_BUILDS</dt> <dd> <p>Send a separate status report for each individual build.</p> </dd>
     * </dl>
     */
    private BatchReportModeTypeEnumValue batchReportMode;

    /*
     * <p>Specifies if the build artifacts for the batch build should be combined into a single artifact location.</p>
     */
    private Boolean combineArtifacts;

    /*
     * <p>A <code>BatchRestrictions</code> object that specifies the restrictions for the batch build.</p>
     */
    private BatchRestrictions restrictions;

    /*
     * <p>Specifies the service role ARN for the batch build project.</p>
     */
    private String serviceRole;

    /*
     * <p>Specifies the maximum amount of time, in minutes, that the batch build must be completed in.</p>
     */
    private Integer timeoutInMins;

    /**
     * Creates an instance of ProjectBuildBatchConfig class.
     */
    public ProjectBuildBatchConfig() {
    }

    /**
     * Get the batchReportMode property: &lt;p&gt;Specifies how build status reports are sent to the source provider for
     * the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or
     * GitHub Enterprise, and your project is configured to report build statuses to the source provider.&lt;/p&gt;
     * &lt;dl&gt; &lt;dt&gt;REPORT_AGGREGATED_BATCH&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;(Default) Aggregate all of the build
     * statuses into a single status report.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;REPORT_INDIVIDUAL_BUILDS&lt;/dt&gt;
     * &lt;dd&gt; &lt;p&gt;Send a separate status report for each individual build.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;.
     * 
     * @return the batchReportMode value.
     */
    public BatchReportModeTypeEnumValue batchReportMode() {
        return this.batchReportMode;
    }

    /**
     * Set the batchReportMode property: &lt;p&gt;Specifies how build status reports are sent to the source provider for
     * the batch build. This property is only used when the source provider for your project is Bitbucket, GitHub, or
     * GitHub Enterprise, and your project is configured to report build statuses to the source provider.&lt;/p&gt;
     * &lt;dl&gt; &lt;dt&gt;REPORT_AGGREGATED_BATCH&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;(Default) Aggregate all of the build
     * statuses into a single status report.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;REPORT_INDIVIDUAL_BUILDS&lt;/dt&gt;
     * &lt;dd&gt; &lt;p&gt;Send a separate status report for each individual build.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;.
     * 
     * @param batchReportMode the batchReportMode value to set.
     * @return the ProjectBuildBatchConfig object itself.
     */
    public ProjectBuildBatchConfig withBatchReportMode(BatchReportModeTypeEnumValue batchReportMode) {
        this.batchReportMode = batchReportMode;
        return this;
    }

    /**
     * Get the combineArtifacts property: &lt;p&gt;Specifies if the build artifacts for the batch build should be
     * combined into a single artifact location.&lt;/p&gt;.
     * 
     * @return the combineArtifacts value.
     */
    public Boolean combineArtifacts() {
        return this.combineArtifacts;
    }

    /**
     * Set the combineArtifacts property: &lt;p&gt;Specifies if the build artifacts for the batch build should be
     * combined into a single artifact location.&lt;/p&gt;.
     * 
     * @param combineArtifacts the combineArtifacts value to set.
     * @return the ProjectBuildBatchConfig object itself.
     */
    public ProjectBuildBatchConfig withCombineArtifacts(Boolean combineArtifacts) {
        this.combineArtifacts = combineArtifacts;
        return this;
    }

    /**
     * Get the restrictions property: &lt;p&gt;A &lt;code&gt;BatchRestrictions&lt;/code&gt; object that specifies the
     * restrictions for the batch build.&lt;/p&gt;.
     * 
     * @return the restrictions value.
     */
    public BatchRestrictions restrictions() {
        return this.restrictions;
    }

    /**
     * Set the restrictions property: &lt;p&gt;A &lt;code&gt;BatchRestrictions&lt;/code&gt; object that specifies the
     * restrictions for the batch build.&lt;/p&gt;.
     * 
     * @param restrictions the restrictions value to set.
     * @return the ProjectBuildBatchConfig object itself.
     */
    public ProjectBuildBatchConfig withRestrictions(BatchRestrictions restrictions) {
        this.restrictions = restrictions;
        return this;
    }

    /**
     * Get the serviceRole property: &lt;p&gt;Specifies the service role ARN for the batch build project.&lt;/p&gt;.
     * 
     * @return the serviceRole value.
     */
    public String serviceRole() {
        return this.serviceRole;
    }

    /**
     * Set the serviceRole property: &lt;p&gt;Specifies the service role ARN for the batch build project.&lt;/p&gt;.
     * 
     * @param serviceRole the serviceRole value to set.
     * @return the ProjectBuildBatchConfig object itself.
     */
    public ProjectBuildBatchConfig withServiceRole(String serviceRole) {
        this.serviceRole = serviceRole;
        return this;
    }

    /**
     * Get the timeoutInMins property: &lt;p&gt;Specifies the maximum amount of time, in minutes, that the batch build
     * must be completed in.&lt;/p&gt;.
     * 
     * @return the timeoutInMins value.
     */
    public Integer timeoutInMins() {
        return this.timeoutInMins;
    }

    /**
     * Set the timeoutInMins property: &lt;p&gt;Specifies the maximum amount of time, in minutes, that the batch build
     * must be completed in.&lt;/p&gt;.
     * 
     * @param timeoutInMins the timeoutInMins value to set.
     * @return the ProjectBuildBatchConfig object itself.
     */
    public ProjectBuildBatchConfig withTimeoutInMins(Integer timeoutInMins) {
        this.timeoutInMins = timeoutInMins;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (batchReportMode() != null) {
            batchReportMode().validate();
        }
        if (restrictions() != null) {
            restrictions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("batchReportMode", this.batchReportMode);
        jsonWriter.writeBooleanField("combineArtifacts", this.combineArtifacts);
        jsonWriter.writeJsonField("restrictions", this.restrictions);
        jsonWriter.writeStringField("serviceRole", this.serviceRole);
        jsonWriter.writeNumberField("timeoutInMins", this.timeoutInMins);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectBuildBatchConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectBuildBatchConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectBuildBatchConfig.
     */
    public static ProjectBuildBatchConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectBuildBatchConfig deserializedProjectBuildBatchConfig = new ProjectBuildBatchConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("batchReportMode".equals(fieldName)) {
                    deserializedProjectBuildBatchConfig.batchReportMode = BatchReportModeTypeEnumValue.fromJson(reader);
                } else if ("combineArtifacts".equals(fieldName)) {
                    deserializedProjectBuildBatchConfig.combineArtifacts = reader.getNullable(JsonReader::getBoolean);
                } else if ("restrictions".equals(fieldName)) {
                    deserializedProjectBuildBatchConfig.restrictions = BatchRestrictions.fromJson(reader);
                } else if ("serviceRole".equals(fieldName)) {
                    deserializedProjectBuildBatchConfig.serviceRole = reader.getString();
                } else if ("timeoutInMins".equals(fieldName)) {
                    deserializedProjectBuildBatchConfig.timeoutInMins = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectBuildBatchConfig;
        });
    }
}
