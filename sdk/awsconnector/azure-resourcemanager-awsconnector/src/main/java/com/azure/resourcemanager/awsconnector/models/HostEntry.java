// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of HostEntry.
 */
@Fluent
public final class HostEntry implements JsonSerializable<HostEntry> {
    /*
     * The hostname to use in the ``/etc/hosts`` entry.
     */
    private String hostname;

    /*
     * The IP address to use in the ``/etc/hosts`` entry.
     */
    private String ipAddress;

    /**
     * Creates an instance of HostEntry class.
     */
    public HostEntry() {
    }

    /**
     * Get the hostname property: The hostname to use in the ``/etc/hosts`` entry.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname to use in the ``/etc/hosts`` entry.
     * 
     * @param hostname the hostname value to set.
     * @return the HostEntry object itself.
     */
    public HostEntry withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the ipAddress property: The IP address to use in the ``/etc/hosts`` entry.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: The IP address to use in the ``/etc/hosts`` entry.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the HostEntry object itself.
     */
    public HostEntry withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostname", this.hostname);
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostEntry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostEntry if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the HostEntry.
     */
    public static HostEntry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostEntry deserializedHostEntry = new HostEntry();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostname".equals(fieldName)) {
                    deserializedHostEntry.hostname = reader.getString();
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedHostEntry.ipAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostEntry;
        });
    }
}
