// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of RuleOption.
 */
@Fluent
public final class RuleOption implements JsonSerializable<RuleOption> {
    /*
     * Property keyword
     */
    private String keyword;

    /*
     * Property settings
     */
    private List<String> settings;

    /**
     * Creates an instance of RuleOption class.
     */
    public RuleOption() {
    }

    /**
     * Get the keyword property: Property keyword.
     * 
     * @return the keyword value.
     */
    public String keyword() {
        return this.keyword;
    }

    /**
     * Set the keyword property: Property keyword.
     * 
     * @param keyword the keyword value to set.
     * @return the RuleOption object itself.
     */
    public RuleOption withKeyword(String keyword) {
        this.keyword = keyword;
        return this;
    }

    /**
     * Get the settings property: Property settings.
     * 
     * @return the settings value.
     */
    public List<String> settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Property settings.
     * 
     * @param settings the settings value to set.
     * @return the RuleOption object itself.
     */
    public RuleOption withSettings(List<String> settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyword", this.keyword);
        jsonWriter.writeArrayField("settings", this.settings, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleOption if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the RuleOption.
     */
    public static RuleOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleOption deserializedRuleOption = new RuleOption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyword".equals(fieldName)) {
                    deserializedRuleOption.keyword = reader.getString();
                } else if ("settings".equals(fieldName)) {
                    List<String> settings = reader.readArray(reader1 -> reader1.getString());
                    deserializedRuleOption.settings = settings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleOption;
        });
    }
}
