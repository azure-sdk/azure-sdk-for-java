// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsSsmParameter.
 */
@Fluent
public final class AwsSsmParameterProperties implements JsonSerializable<AwsSsmParameterProperties> {
    /*
     * A regular expression used to validate the parameter value. For example, for ``String`` types with values
     * restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``
     */
    private String allowedPattern;

    /*
     * The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
     */
    private DataType dataType;

    /*
     * Information about the parameter.
     */
    private String description;

    /*
     * The name of the parameter. The maximum length constraint listed below includes capacity for additional system
     * attributes that aren't part of the name. The maximum length for a parameter name, including the full length of
     * the parameter Amazon Resource Name (ARN), is 1011 characters. For example, the length of the following parameter
     * name is 65 characters, not 20 characters: ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``
     */
    private String name;

    /*
     * Information about the policies assigned to a parameter. [Assigning parameter
     * policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the
     * *User Guide*.
     */
    private String policies;

    /*
     * Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags
     * enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example,
     * you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or
     * the type of configuration data referenced by the parameter.
     */
    private Object tags;

    /*
     * The parameter tier.
     */
    private Tier tier;

    /*
     * The type of parameter.
     */
    private Type type;

    /*
     * The parameter value. If type is ``StringList``, the system returns a comma-separated string with no spaces
     * between commas in the ``Value`` field.
     */
    private String value;

    /**
     * Creates an instance of AwsSsmParameterProperties class.
     */
    public AwsSsmParameterProperties() {
    }

    /**
     * Get the allowedPattern property: A regular expression used to validate the parameter value. For example, for
     * ``String`` types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``.
     * 
     * @return the allowedPattern value.
     */
    public String allowedPattern() {
        return this.allowedPattern;
    }

    /**
     * Set the allowedPattern property: A regular expression used to validate the parameter value. For example, for
     * ``String`` types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``.
     * 
     * @param allowedPattern the allowedPattern value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withAllowedPattern(String allowedPattern) {
        this.allowedPattern = allowedPattern;
        return this;
    }

    /**
     * Get the dataType property: The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is
     * ``text``.
     * 
     * @return the dataType value.
     */
    public DataType dataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is
     * ``text``.
     * 
     * @param dataType the dataType value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withDataType(DataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Get the description property: Information about the parameter.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Information about the parameter.
     * 
     * @param description the description value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the name property: The name of the parameter. The maximum length constraint listed below includes capacity
     * for additional system attributes that aren't part of the name. The maximum length for a parameter name, including
     * the full length of the parameter Amazon Resource Name (ARN), is 1011 characters. For example, the length of the
     * following parameter name is 65 characters, not 20 characters:
     * ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the parameter. The maximum length constraint listed below includes capacity
     * for additional system attributes that aren't part of the name. The maximum length for a parameter name, including
     * the full length of the parameter Amazon Resource Name (ARN), is 1011 characters. For example, the length of the
     * following parameter name is 65 characters, not 20 characters:
     * ``arn:aws:ssm:us-east-2:111222333444:parameter/ExampleParameterName``.
     * 
     * @param name the name value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the policies property: Information about the policies assigned to a parameter. [Assigning parameter
     * policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the
     * *User Guide*.
     * 
     * @return the policies value.
     */
    public String policies() {
        return this.policies;
    }

    /**
     * Set the policies property: Information about the policies assigned to a parameter. [Assigning parameter
     * policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the
     * *User Guide*.
     * 
     * @param policies the policies value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withPolicies(String policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Get the tags property: Optional metadata that you assign to a resource in the form of an arbitrary set of tags
     * (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or
     * environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it
     * applies, the environment, or the type of configuration data referenced by the parameter.
     * 
     * @return the tags value.
     */
    public Object tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Optional metadata that you assign to a resource in the form of an arbitrary set of tags
     * (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or
     * environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it
     * applies, the environment, or the type of configuration data referenced by the parameter.
     * 
     * @param tags the tags value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withTags(Object tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the tier property: The parameter tier.
     * 
     * @return the tier value.
     */
    public Tier tier() {
        return this.tier;
    }

    /**
     * Set the tier property: The parameter tier.
     * 
     * @param tier the tier value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withTier(Tier tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the type property: The type of parameter.
     * 
     * @return the type value.
     */
    public Type type() {
        return this.type;
    }

    /**
     * Set the type property: The type of parameter.
     * 
     * @param type the type value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withType(Type type) {
        this.type = type;
        return this;
    }

    /**
     * Get the value property: The parameter value. If type is ``StringList``, the system returns a comma-separated
     * string with no spaces between commas in the ``Value`` field.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The parameter value. If type is ``StringList``, the system returns a comma-separated
     * string with no spaces between commas in the ``Value`` field.
     * 
     * @param value the value value to set.
     * @return the AwsSsmParameterProperties object itself.
     */
    public AwsSsmParameterProperties withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("allowedPattern", this.allowedPattern);
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("policies", this.policies);
        jsonWriter.writeUntypedField("tags", this.tags);
        jsonWriter.writeStringField("tier", this.tier == null ? null : this.tier.toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsSsmParameterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsSsmParameterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsSsmParameterProperties.
     */
    public static AwsSsmParameterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsSsmParameterProperties deserializedAwsSsmParameterProperties = new AwsSsmParameterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedPattern".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.allowedPattern = reader.getString();
                } else if ("dataType".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.dataType = DataType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.description = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.name = reader.getString();
                } else if ("policies".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.policies = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.tags = reader.readUntyped();
                } else if ("tier".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.tier = Tier.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.type = Type.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedAwsSsmParameterProperties.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsSsmParameterProperties;
        });
    }
}
