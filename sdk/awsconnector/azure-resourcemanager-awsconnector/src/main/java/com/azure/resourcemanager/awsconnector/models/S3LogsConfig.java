// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of S3LogsConfig.
 */
@Fluent
public final class S3LogsConfig implements JsonSerializable<S3LogsConfig> {
    /*
     * Property bucketOwnerAccess
     */
    private BucketOwnerAccessEnumValue bucketOwnerAccess;

    /*
     * <p> Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted.
     * </p>
     */
    private Boolean encryptionDisabled;

    /*
     * <p> The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is
     * <code>my-bucket</code>, and your path prefix is <code>build-log</code>, then acceptable formats are
     * <code>my-bucket/build-log</code> or <code>arn:aws:s3:::my-bucket/build-log</code>. </p>
     */
    private String location;

    /*
     * <p>The current status of the S3 build logs. Valid values are:</p> <ul> <li> <p> <code>ENABLED</code>: S3 build
     * logs are enabled for this build project.</p> </li> <li> <p> <code>DISABLED</code>: S3 build logs are not enabled
     * for this build project.</p> </li> </ul>
     */
    private LogsConfigStatusTypeEnumValue status;

    /**
     * Creates an instance of S3LogsConfig class.
     */
    public S3LogsConfig() {
    }

    /**
     * Get the bucketOwnerAccess property: Property bucketOwnerAccess.
     * 
     * @return the bucketOwnerAccess value.
     */
    public BucketOwnerAccessEnumValue bucketOwnerAccess() {
        return this.bucketOwnerAccess;
    }

    /**
     * Set the bucketOwnerAccess property: Property bucketOwnerAccess.
     * 
     * @param bucketOwnerAccess the bucketOwnerAccess value to set.
     * @return the S3LogsConfig object itself.
     */
    public S3LogsConfig withBucketOwnerAccess(BucketOwnerAccessEnumValue bucketOwnerAccess) {
        this.bucketOwnerAccess = bucketOwnerAccess;
        return this;
    }

    /**
     * Get the encryptionDisabled property: &lt;p&gt; Set to true if you do not want your S3 build log output encrypted.
     * By default S3 build logs are encrypted. &lt;/p&gt;.
     * 
     * @return the encryptionDisabled value.
     */
    public Boolean encryptionDisabled() {
        return this.encryptionDisabled;
    }

    /**
     * Set the encryptionDisabled property: &lt;p&gt; Set to true if you do not want your S3 build log output encrypted.
     * By default S3 build logs are encrypted. &lt;/p&gt;.
     * 
     * @param encryptionDisabled the encryptionDisabled value to set.
     * @return the S3LogsConfig object itself.
     */
    public S3LogsConfig withEncryptionDisabled(Boolean encryptionDisabled) {
        this.encryptionDisabled = encryptionDisabled;
        return this;
    }

    /**
     * Get the location property: &lt;p&gt; The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3
     * bucket name is &lt;code&gt;my-bucket&lt;/code&gt;, and your path prefix is &lt;code&gt;build-log&lt;/code&gt;,
     * then acceptable formats are &lt;code&gt;my-bucket/build-log&lt;/code&gt; or
     * &lt;code&gt;arn:aws:s3:::my-bucket/build-log&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: &lt;p&gt; The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3
     * bucket name is &lt;code&gt;my-bucket&lt;/code&gt;, and your path prefix is &lt;code&gt;build-log&lt;/code&gt;,
     * then acceptable formats are &lt;code&gt;my-bucket/build-log&lt;/code&gt; or
     * &lt;code&gt;arn:aws:s3:::my-bucket/build-log&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param location the location value to set.
     * @return the S3LogsConfig object itself.
     */
    public S3LogsConfig withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The current status of the S3 build logs. Valid values are:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt;: S3 build logs are enabled for this build
     * project.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt;: S3 build logs are not
     * enabled for this build project.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the status value.
     */
    public LogsConfigStatusTypeEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The current status of the S3 build logs. Valid values are:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt;: S3 build logs are enabled for this build
     * project.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt;: S3 build logs are not
     * enabled for this build project.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param status the status value to set.
     * @return the S3LogsConfig object itself.
     */
    public S3LogsConfig withStatus(LogsConfigStatusTypeEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bucketOwnerAccess() != null) {
            bucketOwnerAccess().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("bucketOwnerAccess", this.bucketOwnerAccess);
        jsonWriter.writeBooleanField("encryptionDisabled", this.encryptionDisabled);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of S3LogsConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of S3LogsConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the S3LogsConfig.
     */
    public static S3LogsConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            S3LogsConfig deserializedS3LogsConfig = new S3LogsConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucketOwnerAccess".equals(fieldName)) {
                    deserializedS3LogsConfig.bucketOwnerAccess = BucketOwnerAccessEnumValue.fromJson(reader);
                } else if ("encryptionDisabled".equals(fieldName)) {
                    deserializedS3LogsConfig.encryptionDisabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("location".equals(fieldName)) {
                    deserializedS3LogsConfig.location = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedS3LogsConfig.status = LogsConfigStatusTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedS3LogsConfig;
        });
    }
}
