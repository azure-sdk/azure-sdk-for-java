// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TargetDescription.
 */
@Fluent
public final class TargetDescriptionAutoGenerated implements JsonSerializable<TargetDescriptionAutoGenerated> {
    /*
     * <p>An Availability Zone or <code>all</code>. This determines whether the target receives traffic from the load
     * balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load
     * balancer.</p> <p>For Application Load Balancer target groups, the specified Availability Zone value is only
     * applicable when cross-zone load balancing is off. Otherwise the parameter is ignored and treated as
     * <code>all</code>.</p> <p>This parameter is not supported if the target type of the target group is
     * <code>instance</code> or <code>alb</code>.</p> <p>If the target type is <code>ip</code> and the IP address is in
     * a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is
     * optional. If the IP address is outside the VPC, this parameter is required.</p> <p>For Application Load Balancer
     * target groups with cross-zone load balancing off, if the target type is <code>ip</code> and the IP address is
     * outside of the VPC for the target group, this should be an Availability Zone inside the VPC for the target
     * group.</p> <p>If the target type is <code>lambda</code>, this parameter is optional and the only supported value
     * is <code>all</code>.</p>
     */
    private String availabilityZone;

    /*
     * <p>The ID of the target. If the target type of the target group is <code>instance</code>, specify an instance ID.
     * If the target type is <code>ip</code>, specify an IP address. If the target type is <code>lambda</code>, specify
     * the ARN of the Lambda function. If the target type is <code>alb</code>, specify the ARN of the Application Load
     * Balancer target. </p>
     */
    private String id;

    /*
     * <p>The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081.
     * If the target type is <code>alb</code>, the targeted Application Load Balancer must have at least one listener
     * whose port matches the target group port. This parameter is not used if the target is a Lambda function.</p>
     */
    private Integer port;

    /**
     * Creates an instance of TargetDescriptionAutoGenerated class.
     */
    public TargetDescriptionAutoGenerated() {
    }

    /**
     * Get the availabilityZone property: &lt;p&gt;An Availability Zone or &lt;code&gt;all&lt;/code&gt;. This determines
     * whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all
     * enabled Availability Zones for the load balancer.&lt;/p&gt; &lt;p&gt;For Application Load Balancer target groups,
     * the specified Availability Zone value is only applicable when cross-zone load balancing is off. Otherwise the
     * parameter is ignored and treated as &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not
     * supported if the target type of the target group is &lt;code&gt;instance&lt;/code&gt; or
     * &lt;code&gt;alb&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the target type is &lt;code&gt;ip&lt;/code&gt; and the IP
     * address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this
     * parameter is optional. If the IP address is outside the VPC, this parameter is required.&lt;/p&gt; &lt;p&gt;For
     * Application Load Balancer target groups with cross-zone load balancing off, if the target type is
     * &lt;code&gt;ip&lt;/code&gt; and the IP address is outside of the VPC for the target group, this should be an
     * Availability Zone inside the VPC for the target group.&lt;/p&gt; &lt;p&gt;If the target type is
     * &lt;code&gt;lambda&lt;/code&gt;, this parameter is optional and the only supported value is
     * &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: &lt;p&gt;An Availability Zone or &lt;code&gt;all&lt;/code&gt;. This determines
     * whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all
     * enabled Availability Zones for the load balancer.&lt;/p&gt; &lt;p&gt;For Application Load Balancer target groups,
     * the specified Availability Zone value is only applicable when cross-zone load balancing is off. Otherwise the
     * parameter is ignored and treated as &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not
     * supported if the target type of the target group is &lt;code&gt;instance&lt;/code&gt; or
     * &lt;code&gt;alb&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the target type is &lt;code&gt;ip&lt;/code&gt; and the IP
     * address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this
     * parameter is optional. If the IP address is outside the VPC, this parameter is required.&lt;/p&gt; &lt;p&gt;For
     * Application Load Balancer target groups with cross-zone load balancing off, if the target type is
     * &lt;code&gt;ip&lt;/code&gt; and the IP address is outside of the VPC for the target group, this should be an
     * Availability Zone inside the VPC for the target group.&lt;/p&gt; &lt;p&gt;If the target type is
     * &lt;code&gt;lambda&lt;/code&gt;, this parameter is optional and the only supported value is
     * &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the TargetDescriptionAutoGenerated object itself.
     */
    public TargetDescriptionAutoGenerated withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the id property: &lt;p&gt;The ID of the target. If the target type of the target group is
     * &lt;code&gt;instance&lt;/code&gt;, specify an instance ID. If the target type is &lt;code&gt;ip&lt;/code&gt;,
     * specify an IP address. If the target type is &lt;code&gt;lambda&lt;/code&gt;, specify the ARN of the Lambda
     * function. If the target type is &lt;code&gt;alb&lt;/code&gt;, specify the ARN of the Application Load Balancer
     * target. &lt;/p&gt;.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: &lt;p&gt;The ID of the target. If the target type of the target group is
     * &lt;code&gt;instance&lt;/code&gt;, specify an instance ID. If the target type is &lt;code&gt;ip&lt;/code&gt;,
     * specify an IP address. If the target type is &lt;code&gt;lambda&lt;/code&gt;, specify the ARN of the Lambda
     * function. If the target type is &lt;code&gt;alb&lt;/code&gt;, specify the ARN of the Application Load Balancer
     * target. &lt;/p&gt;.
     * 
     * @param id the id value to set.
     * @return the TargetDescriptionAutoGenerated object itself.
     */
    public TargetDescriptionAutoGenerated withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the port property: &lt;p&gt;The port on which the target is listening. If the target group protocol is
     * GENEVE, the supported port is 6081. If the target type is &lt;code&gt;alb&lt;/code&gt;, the targeted Application
     * Load Balancer must have at least one listener whose port matches the target group port. This parameter is not
     * used if the target is a Lambda function.&lt;/p&gt;.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: &lt;p&gt;The port on which the target is listening. If the target group protocol is
     * GENEVE, the supported port is 6081. If the target type is &lt;code&gt;alb&lt;/code&gt;, the targeted Application
     * Load Balancer must have at least one listener whose port matches the target group port. This parameter is not
     * used if the target is a Lambda function.&lt;/p&gt;.
     * 
     * @param port the port value to set.
     * @return the TargetDescriptionAutoGenerated object itself.
     */
    public TargetDescriptionAutoGenerated withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetDescriptionAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetDescriptionAutoGenerated if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetDescriptionAutoGenerated.
     */
    public static TargetDescriptionAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetDescriptionAutoGenerated deserializedTargetDescriptionAutoGenerated
                = new TargetDescriptionAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedTargetDescriptionAutoGenerated.availabilityZone = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedTargetDescriptionAutoGenerated.id = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedTargetDescriptionAutoGenerated.port = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetDescriptionAutoGenerated;
        });
    }
}
