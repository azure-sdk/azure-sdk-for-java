// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of TCPFlagField.
 */
@Fluent
public final class TcpFlagField implements JsonSerializable<TcpFlagField> {
    /*
     * Property flags
     */
    private List<String> flags;

    /*
     * Property masks
     */
    private List<String> masks;

    /**
     * Creates an instance of TcpFlagField class.
     */
    public TcpFlagField() {
    }

    /**
     * Get the flags property: Property flags.
     * 
     * @return the flags value.
     */
    public List<String> flags() {
        return this.flags;
    }

    /**
     * Set the flags property: Property flags.
     * 
     * @param flags the flags value to set.
     * @return the TcpFlagField object itself.
     */
    public TcpFlagField withFlags(List<String> flags) {
        this.flags = flags;
        return this;
    }

    /**
     * Get the masks property: Property masks.
     * 
     * @return the masks value.
     */
    public List<String> masks() {
        return this.masks;
    }

    /**
     * Set the masks property: Property masks.
     * 
     * @param masks the masks value to set.
     * @return the TcpFlagField object itself.
     */
    public TcpFlagField withMasks(List<String> masks) {
        this.masks = masks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("flags", this.flags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("masks", this.masks, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TcpFlagField from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TcpFlagField if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TcpFlagField.
     */
    public static TcpFlagField fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TcpFlagField deserializedTcpFlagField = new TcpFlagField();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("flags".equals(fieldName)) {
                    List<String> flags = reader.readArray(reader1 -> reader1.getString());
                    deserializedTcpFlagField.flags = flags;
                } else if ("masks".equals(fieldName)) {
                    List<String> masks = reader.readArray(reader1 -> reader1.getString());
                    deserializedTcpFlagField.masks = masks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTcpFlagField;
        });
    }
}
