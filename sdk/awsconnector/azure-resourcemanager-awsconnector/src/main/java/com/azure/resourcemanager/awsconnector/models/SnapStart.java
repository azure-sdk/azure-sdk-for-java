// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SnapStart.
 */
@Fluent
public final class SnapStart implements JsonSerializable<SnapStart> {
    /*
     * Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized execution environment when you
     * publish a function version.
     */
    private SnapStartApplyOn applyOn;

    /**
     * Creates an instance of SnapStart class.
     */
    public SnapStart() {
    }

    /**
     * Get the applyOn property: Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized
     * execution environment when you publish a function version.
     * 
     * @return the applyOn value.
     */
    public SnapStartApplyOn applyOn() {
        return this.applyOn;
    }

    /**
     * Set the applyOn property: Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized
     * execution environment when you publish a function version.
     * 
     * @param applyOn the applyOn value to set.
     * @return the SnapStart object itself.
     */
    public SnapStart withApplyOn(SnapStartApplyOn applyOn) {
        this.applyOn = applyOn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applyOn", this.applyOn == null ? null : this.applyOn.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SnapStart from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SnapStart if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SnapStart.
     */
    public static SnapStart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SnapStart deserializedSnapStart = new SnapStart();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applyOn".equals(fieldName)) {
                    deserializedSnapStart.applyOn = SnapStartApplyOn.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSnapStart;
        });
    }
}
