// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of awsIamPasswordPolicy.
 */
@Fluent
public final class AwsIamPasswordPolicyProperties implements JsonSerializable<AwsIamPasswordPolicyProperties> {
    /*
     * <p>Specifies whether IAM users are allowed to change their own password. Gives IAM users permissions to
     * <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action.
     * This option does not attach a permissions policy to each user, rather the permissions are applied at the
     * account-level for all users by IAM.</p>
     */
    private Boolean allowUsersToChangePassword;

    /*
     * <p>Indicates whether passwords in the account expire. Returns true if <code>MaxPasswordAge</code> contains a
     * value greater than 0. Returns false if MaxPasswordAge is 0 or not present.</p>
     */
    private Boolean expirePasswords;

    /*
     * <p>Specifies whether IAM users are prevented from setting a new password via the Amazon Web Services Management
     * Console after their password has expired. The IAM user cannot access the console until an administrator resets
     * the password. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their
     * own expired console password using the CLI or API.</p>
     */
    private Boolean hardExpiry;

    /*
     * <p>The number of days that an IAM user password is valid.</p>
     */
    private Integer maxPasswordAge;

    /*
     * <p>Minimum length to require for IAM user passwords.</p>
     */
    private Integer minimumPasswordLength;

    /*
     * <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p>
     */
    private Integer passwordReusePrevention;

    /*
     * <p>Specifies whether IAM user passwords must contain at least one lowercase character (a to z).</p>
     */
    private Boolean requireLowercaseCharacters;

    /*
     * <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p>
     */
    private Boolean requireNumbers;

    /*
     * <p>Specifies whether IAM user passwords must contain at least one of the following symbols:</p> <p>! @ # $ % ^
     * &amp; * ( ) _ + - = [ ] { } | '</p>
     */
    private Boolean requireSymbols;

    /*
     * <p>Specifies whether IAM user passwords must contain at least one uppercase character (A to Z).</p>
     */
    private Boolean requireUppercaseCharacters;

    /**
     * Creates an instance of AwsIamPasswordPolicyProperties class.
     */
    public AwsIamPasswordPolicyProperties() {
    }

    /**
     * Get the allowUsersToChangePassword property: &lt;p&gt;Specifies whether IAM users are allowed to change their own
     * password. Gives IAM users permissions to &lt;code&gt;iam:ChangePassword&lt;/code&gt; for only their user and to
     * the &lt;code&gt;iam:GetAccountPasswordPolicy&lt;/code&gt; action. This option does not attach a permissions
     * policy to each user, rather the permissions are applied at the account-level for all users by IAM.&lt;/p&gt;.
     * 
     * @return the allowUsersToChangePassword value.
     */
    public Boolean allowUsersToChangePassword() {
        return this.allowUsersToChangePassword;
    }

    /**
     * Set the allowUsersToChangePassword property: &lt;p&gt;Specifies whether IAM users are allowed to change their own
     * password. Gives IAM users permissions to &lt;code&gt;iam:ChangePassword&lt;/code&gt; for only their user and to
     * the &lt;code&gt;iam:GetAccountPasswordPolicy&lt;/code&gt; action. This option does not attach a permissions
     * policy to each user, rather the permissions are applied at the account-level for all users by IAM.&lt;/p&gt;.
     * 
     * @param allowUsersToChangePassword the allowUsersToChangePassword value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withAllowUsersToChangePassword(Boolean allowUsersToChangePassword) {
        this.allowUsersToChangePassword = allowUsersToChangePassword;
        return this;
    }

    /**
     * Get the expirePasswords property: &lt;p&gt;Indicates whether passwords in the account expire. Returns true if
     * &lt;code&gt;MaxPasswordAge&lt;/code&gt; contains a value greater than 0. Returns false if MaxPasswordAge is 0 or
     * not present.&lt;/p&gt;.
     * 
     * @return the expirePasswords value.
     */
    public Boolean expirePasswords() {
        return this.expirePasswords;
    }

    /**
     * Set the expirePasswords property: &lt;p&gt;Indicates whether passwords in the account expire. Returns true if
     * &lt;code&gt;MaxPasswordAge&lt;/code&gt; contains a value greater than 0. Returns false if MaxPasswordAge is 0 or
     * not present.&lt;/p&gt;.
     * 
     * @param expirePasswords the expirePasswords value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withExpirePasswords(Boolean expirePasswords) {
        this.expirePasswords = expirePasswords;
        return this;
    }

    /**
     * Get the hardExpiry property: &lt;p&gt;Specifies whether IAM users are prevented from setting a new password via
     * the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the
     * console until an administrator resets the password. IAM users with &lt;code&gt;iam:ChangePassword&lt;/code&gt;
     * permission and active access keys can reset their own expired console password using the CLI or API.&lt;/p&gt;.
     * 
     * @return the hardExpiry value.
     */
    public Boolean hardExpiry() {
        return this.hardExpiry;
    }

    /**
     * Set the hardExpiry property: &lt;p&gt;Specifies whether IAM users are prevented from setting a new password via
     * the Amazon Web Services Management Console after their password has expired. The IAM user cannot access the
     * console until an administrator resets the password. IAM users with &lt;code&gt;iam:ChangePassword&lt;/code&gt;
     * permission and active access keys can reset their own expired console password using the CLI or API.&lt;/p&gt;.
     * 
     * @param hardExpiry the hardExpiry value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withHardExpiry(Boolean hardExpiry) {
        this.hardExpiry = hardExpiry;
        return this;
    }

    /**
     * Get the maxPasswordAge property: &lt;p&gt;The number of days that an IAM user password is valid.&lt;/p&gt;.
     * 
     * @return the maxPasswordAge value.
     */
    public Integer maxPasswordAge() {
        return this.maxPasswordAge;
    }

    /**
     * Set the maxPasswordAge property: &lt;p&gt;The number of days that an IAM user password is valid.&lt;/p&gt;.
     * 
     * @param maxPasswordAge the maxPasswordAge value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withMaxPasswordAge(Integer maxPasswordAge) {
        this.maxPasswordAge = maxPasswordAge;
        return this;
    }

    /**
     * Get the minimumPasswordLength property: &lt;p&gt;Minimum length to require for IAM user passwords.&lt;/p&gt;.
     * 
     * @return the minimumPasswordLength value.
     */
    public Integer minimumPasswordLength() {
        return this.minimumPasswordLength;
    }

    /**
     * Set the minimumPasswordLength property: &lt;p&gt;Minimum length to require for IAM user passwords.&lt;/p&gt;.
     * 
     * @param minimumPasswordLength the minimumPasswordLength value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withMinimumPasswordLength(Integer minimumPasswordLength) {
        this.minimumPasswordLength = minimumPasswordLength;
        return this;
    }

    /**
     * Get the passwordReusePrevention property: &lt;p&gt;Specifies the number of previous passwords that IAM users are
     * prevented from reusing.&lt;/p&gt;.
     * 
     * @return the passwordReusePrevention value.
     */
    public Integer passwordReusePrevention() {
        return this.passwordReusePrevention;
    }

    /**
     * Set the passwordReusePrevention property: &lt;p&gt;Specifies the number of previous passwords that IAM users are
     * prevented from reusing.&lt;/p&gt;.
     * 
     * @param passwordReusePrevention the passwordReusePrevention value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withPasswordReusePrevention(Integer passwordReusePrevention) {
        this.passwordReusePrevention = passwordReusePrevention;
        return this;
    }

    /**
     * Get the requireLowercaseCharacters property: &lt;p&gt;Specifies whether IAM user passwords must contain at least
     * one lowercase character (a to z).&lt;/p&gt;.
     * 
     * @return the requireLowercaseCharacters value.
     */
    public Boolean requireLowercaseCharacters() {
        return this.requireLowercaseCharacters;
    }

    /**
     * Set the requireLowercaseCharacters property: &lt;p&gt;Specifies whether IAM user passwords must contain at least
     * one lowercase character (a to z).&lt;/p&gt;.
     * 
     * @param requireLowercaseCharacters the requireLowercaseCharacters value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withRequireLowercaseCharacters(Boolean requireLowercaseCharacters) {
        this.requireLowercaseCharacters = requireLowercaseCharacters;
        return this;
    }

    /**
     * Get the requireNumbers property: &lt;p&gt;Specifies whether IAM user passwords must contain at least one numeric
     * character (0 to 9).&lt;/p&gt;.
     * 
     * @return the requireNumbers value.
     */
    public Boolean requireNumbers() {
        return this.requireNumbers;
    }

    /**
     * Set the requireNumbers property: &lt;p&gt;Specifies whether IAM user passwords must contain at least one numeric
     * character (0 to 9).&lt;/p&gt;.
     * 
     * @param requireNumbers the requireNumbers value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withRequireNumbers(Boolean requireNumbers) {
        this.requireNumbers = requireNumbers;
        return this;
    }

    /**
     * Get the requireSymbols property: &lt;p&gt;Specifies whether IAM user passwords must contain at least one of the
     * following symbols:&lt;/p&gt; &lt;p&gt;! &#064; # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } | '&lt;/p&gt;.
     * 
     * @return the requireSymbols value.
     */
    public Boolean requireSymbols() {
        return this.requireSymbols;
    }

    /**
     * Set the requireSymbols property: &lt;p&gt;Specifies whether IAM user passwords must contain at least one of the
     * following symbols:&lt;/p&gt; &lt;p&gt;! &#064; # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } | '&lt;/p&gt;.
     * 
     * @param requireSymbols the requireSymbols value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withRequireSymbols(Boolean requireSymbols) {
        this.requireSymbols = requireSymbols;
        return this;
    }

    /**
     * Get the requireUppercaseCharacters property: &lt;p&gt;Specifies whether IAM user passwords must contain at least
     * one uppercase character (A to Z).&lt;/p&gt;.
     * 
     * @return the requireUppercaseCharacters value.
     */
    public Boolean requireUppercaseCharacters() {
        return this.requireUppercaseCharacters;
    }

    /**
     * Set the requireUppercaseCharacters property: &lt;p&gt;Specifies whether IAM user passwords must contain at least
     * one uppercase character (A to Z).&lt;/p&gt;.
     * 
     * @param requireUppercaseCharacters the requireUppercaseCharacters value to set.
     * @return the AwsIamPasswordPolicyProperties object itself.
     */
    public AwsIamPasswordPolicyProperties withRequireUppercaseCharacters(Boolean requireUppercaseCharacters) {
        this.requireUppercaseCharacters = requireUppercaseCharacters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("allowUsersToChangePassword", this.allowUsersToChangePassword);
        jsonWriter.writeBooleanField("expirePasswords", this.expirePasswords);
        jsonWriter.writeBooleanField("hardExpiry", this.hardExpiry);
        jsonWriter.writeNumberField("maxPasswordAge", this.maxPasswordAge);
        jsonWriter.writeNumberField("minimumPasswordLength", this.minimumPasswordLength);
        jsonWriter.writeNumberField("passwordReusePrevention", this.passwordReusePrevention);
        jsonWriter.writeBooleanField("requireLowercaseCharacters", this.requireLowercaseCharacters);
        jsonWriter.writeBooleanField("requireNumbers", this.requireNumbers);
        jsonWriter.writeBooleanField("requireSymbols", this.requireSymbols);
        jsonWriter.writeBooleanField("requireUppercaseCharacters", this.requireUppercaseCharacters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamPasswordPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamPasswordPolicyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamPasswordPolicyProperties.
     */
    public static AwsIamPasswordPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamPasswordPolicyProperties deserializedAwsIamPasswordPolicyProperties
                = new AwsIamPasswordPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowUsersToChangePassword".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.allowUsersToChangePassword
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("expirePasswords".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.expirePasswords
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("hardExpiry".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.hardExpiry = reader.getNullable(JsonReader::getBoolean);
                } else if ("maxPasswordAge".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.maxPasswordAge = reader.getNullable(JsonReader::getInt);
                } else if ("minimumPasswordLength".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.minimumPasswordLength
                        = reader.getNullable(JsonReader::getInt);
                } else if ("passwordReusePrevention".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.passwordReusePrevention
                        = reader.getNullable(JsonReader::getInt);
                } else if ("requireLowercaseCharacters".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.requireLowercaseCharacters
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("requireNumbers".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.requireNumbers
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("requireSymbols".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.requireSymbols
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("requireUppercaseCharacters".equals(fieldName)) {
                    deserializedAwsIamPasswordPolicyProperties.requireUppercaseCharacters
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamPasswordPolicyProperties;
        });
    }
}
