// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of AdvancedFieldSelector.
 */
@Fluent
public final class AdvancedFieldSelector implements JsonSerializable<AdvancedFieldSelector> {
    /*
     * An operator that includes events that match the last few characters of the event record field specified as the
     * value of Field.
     */
    private List<String> endsWith;

    /*
     * An operator that includes events that match the exact value of the event record field specified as the value of
     * Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type
     * fields.
     */
    private List<String> equals;

    /*
     * A field in an event record on which to filter events to be logged. Supported fields include readOnly,
     * eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
     */
    private String field;

    /*
     * An operator that excludes events that match the last few characters of the event record field specified as the
     * value of Field.
     */
    private List<String> notEndsWith;

    /*
     * An operator that excludes events that match the exact value of the event record field specified as the value of
     * Field.
     */
    private List<String> notEquals;

    /*
     * An operator that excludes events that match the first few characters of the event record field specified as the
     * value of Field.
     */
    private List<String> notStartsWith;

    /*
     * An operator that includes events that match the first few characters of the event record field specified as the
     * value of Field.
     */
    private List<String> startsWith;

    /**
     * Creates an instance of AdvancedFieldSelector class.
     */
    public AdvancedFieldSelector() {
    }

    /**
     * Get the endsWith property: An operator that includes events that match the last few characters of the event
     * record field specified as the value of Field.
     * 
     * @return the endsWith value.
     */
    public List<String> endsWith() {
        return this.endsWith;
    }

    /**
     * Set the endsWith property: An operator that includes events that match the last few characters of the event
     * record field specified as the value of Field.
     * 
     * @param endsWith the endsWith value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withEndsWith(List<String> endsWith) {
        this.endsWith = endsWith;
        return this;
    }

    /**
     * Get the equals property: An operator that includes events that match the exact value of the event record field
     * specified as the value of Field. This is the only valid operator that you can use with the readOnly,
     * eventCategory, and resources.type fields.
     * 
     * @return the equals value.
     */
    public List<String> equals() {
        return this.equals;
    }

    /**
     * Set the equals property: An operator that includes events that match the exact value of the event record field
     * specified as the value of Field. This is the only valid operator that you can use with the readOnly,
     * eventCategory, and resources.type fields.
     * 
     * @param equals the equals value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withEquals(List<String> equals) {
        this.equals = equals;
        return this;
    }

    /**
     * Get the field property: A field in an event record on which to filter events to be logged. Supported fields
     * include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and
     * resources.ARN.
     * 
     * @return the field value.
     */
    public String field() {
        return this.field;
    }

    /**
     * Set the field property: A field in an event record on which to filter events to be logged. Supported fields
     * include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and
     * resources.ARN.
     * 
     * @param field the field value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withField(String field) {
        this.field = field;
        return this;
    }

    /**
     * Get the notEndsWith property: An operator that excludes events that match the last few characters of the event
     * record field specified as the value of Field.
     * 
     * @return the notEndsWith value.
     */
    public List<String> notEndsWith() {
        return this.notEndsWith;
    }

    /**
     * Set the notEndsWith property: An operator that excludes events that match the last few characters of the event
     * record field specified as the value of Field.
     * 
     * @param notEndsWith the notEndsWith value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withNotEndsWith(List<String> notEndsWith) {
        this.notEndsWith = notEndsWith;
        return this;
    }

    /**
     * Get the notEquals property: An operator that excludes events that match the exact value of the event record field
     * specified as the value of Field.
     * 
     * @return the notEquals value.
     */
    public List<String> notEquals() {
        return this.notEquals;
    }

    /**
     * Set the notEquals property: An operator that excludes events that match the exact value of the event record field
     * specified as the value of Field.
     * 
     * @param notEquals the notEquals value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withNotEquals(List<String> notEquals) {
        this.notEquals = notEquals;
        return this;
    }

    /**
     * Get the notStartsWith property: An operator that excludes events that match the first few characters of the event
     * record field specified as the value of Field.
     * 
     * @return the notStartsWith value.
     */
    public List<String> notStartsWith() {
        return this.notStartsWith;
    }

    /**
     * Set the notStartsWith property: An operator that excludes events that match the first few characters of the event
     * record field specified as the value of Field.
     * 
     * @param notStartsWith the notStartsWith value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withNotStartsWith(List<String> notStartsWith) {
        this.notStartsWith = notStartsWith;
        return this;
    }

    /**
     * Get the startsWith property: An operator that includes events that match the first few characters of the event
     * record field specified as the value of Field.
     * 
     * @return the startsWith value.
     */
    public List<String> startsWith() {
        return this.startsWith;
    }

    /**
     * Set the startsWith property: An operator that includes events that match the first few characters of the event
     * record field specified as the value of Field.
     * 
     * @param startsWith the startsWith value to set.
     * @return the AdvancedFieldSelector object itself.
     */
    public AdvancedFieldSelector withStartsWith(List<String> startsWith) {
        this.startsWith = startsWith;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("endsWith", this.endsWith, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("equals", this.equals, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("field", this.field);
        jsonWriter.writeArrayField("notEndsWith", this.notEndsWith, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("notEquals", this.notEquals, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("notStartsWith", this.notStartsWith,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("startsWith", this.startsWith, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdvancedFieldSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdvancedFieldSelector if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdvancedFieldSelector.
     */
    public static AdvancedFieldSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdvancedFieldSelector deserializedAdvancedFieldSelector = new AdvancedFieldSelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endsWith".equals(fieldName)) {
                    List<String> endsWith = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdvancedFieldSelector.endsWith = endsWith;
                } else if ("equals".equals(fieldName)) {
                    List<String> equals = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdvancedFieldSelector.equals = equals;
                } else if ("field".equals(fieldName)) {
                    deserializedAdvancedFieldSelector.field = reader.getString();
                } else if ("notEndsWith".equals(fieldName)) {
                    List<String> notEndsWith = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdvancedFieldSelector.notEndsWith = notEndsWith;
                } else if ("notEquals".equals(fieldName)) {
                    List<String> notEquals = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdvancedFieldSelector.notEquals = notEquals;
                } else if ("notStartsWith".equals(fieldName)) {
                    List<String> notStartsWith = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdvancedFieldSelector.notStartsWith = notStartsWith;
                } else if ("startsWith".equals(fieldName)) {
                    List<String> startsWith = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdvancedFieldSelector.startsWith = startsWith;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdvancedFieldSelector;
        });
    }
}
