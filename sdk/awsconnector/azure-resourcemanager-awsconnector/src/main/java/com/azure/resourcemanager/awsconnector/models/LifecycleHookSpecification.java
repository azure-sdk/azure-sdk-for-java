// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LifecycleHookSpecification.
 */
@Fluent
public final class LifecycleHookSpecification implements JsonSerializable<LifecycleHookSpecification> {
    /*
     * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure
     * occurs. The default value is ``ABANDON``. Valid values: ``CONTINUE`` | ``ABANDON``
     */
    private String defaultResult;

    /*
     * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from ``30`` to
     * ``7200`` seconds. The default value is ``3600`` seconds (1 hour).
     */
    private Integer heartbeatTimeout;

    /*
     * The name of the lifecycle hook.
     */
    private String lifecycleHookName;

    /*
     * The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions. + To create a
     * lifecycle hook for scale-out events, specify ``autoscaling:EC2_INSTANCE_LAUNCHING``. + To create a lifecycle hook
     * for scale-in events, specify ``autoscaling:EC2_INSTANCE_TERMINATING``.
     */
    private String lifecycleTransition;

    /*
     * Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the
     * notification target.
     */
    private String notificationMetadata;

    /*
     * The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling sends notifications to
     * when an instance is in a wait state for the lifecycle hook. You can specify an Amazon SNS topic or an Amazon SQS
     * queue.
     */
    private String notificationTargetArn;

    /*
     * The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. For
     * information about creating this role, see [Configure a notification target for a lifecycle
     * hook](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html#lifecycle-
     * hook-notification-target) in the *Amazon EC2 Auto Scaling User Guide*. Valid only if the notification target is
     * an Amazon SNS topic or an Amazon SQS queue.
     */
    private String roleArn;

    /**
     * Creates an instance of LifecycleHookSpecification class.
     */
    public LifecycleHookSpecification() {
    }

    /**
     * Get the defaultResult property: The action the Auto Scaling group takes when the lifecycle hook timeout elapses
     * or if an unexpected failure occurs. The default value is ``ABANDON``. Valid values: ``CONTINUE`` | ``ABANDON``.
     * 
     * @return the defaultResult value.
     */
    public String defaultResult() {
        return this.defaultResult;
    }

    /**
     * Set the defaultResult property: The action the Auto Scaling group takes when the lifecycle hook timeout elapses
     * or if an unexpected failure occurs. The default value is ``ABANDON``. Valid values: ``CONTINUE`` | ``ABANDON``.
     * 
     * @param defaultResult the defaultResult value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withDefaultResult(String defaultResult) {
        this.defaultResult = defaultResult;
        return this;
    }

    /**
     * Get the heartbeatTimeout property: The maximum time, in seconds, that can elapse before the lifecycle hook times
     * out. The range is from ``30`` to ``7200`` seconds. The default value is ``3600`` seconds (1 hour).
     * 
     * @return the heartbeatTimeout value.
     */
    public Integer heartbeatTimeout() {
        return this.heartbeatTimeout;
    }

    /**
     * Set the heartbeatTimeout property: The maximum time, in seconds, that can elapse before the lifecycle hook times
     * out. The range is from ``30`` to ``7200`` seconds. The default value is ``3600`` seconds (1 hour).
     * 
     * @param heartbeatTimeout the heartbeatTimeout value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withHeartbeatTimeout(Integer heartbeatTimeout) {
        this.heartbeatTimeout = heartbeatTimeout;
        return this;
    }

    /**
     * Get the lifecycleHookName property: The name of the lifecycle hook.
     * 
     * @return the lifecycleHookName value.
     */
    public String lifecycleHookName() {
        return this.lifecycleHookName;
    }

    /**
     * Set the lifecycleHookName property: The name of the lifecycle hook.
     * 
     * @param lifecycleHookName the lifecycleHookName value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withLifecycleHookName(String lifecycleHookName) {
        this.lifecycleHookName = lifecycleHookName;
        return this;
    }

    /**
     * Get the lifecycleTransition property: The lifecycle transition. For Auto Scaling groups, there are two major
     * lifecycle transitions. + To create a lifecycle hook for scale-out events, specify
     * ``autoscaling:EC2_INSTANCE_LAUNCHING``. + To create a lifecycle hook for scale-in events, specify
     * ``autoscaling:EC2_INSTANCE_TERMINATING``.
     * 
     * @return the lifecycleTransition value.
     */
    public String lifecycleTransition() {
        return this.lifecycleTransition;
    }

    /**
     * Set the lifecycleTransition property: The lifecycle transition. For Auto Scaling groups, there are two major
     * lifecycle transitions. + To create a lifecycle hook for scale-out events, specify
     * ``autoscaling:EC2_INSTANCE_LAUNCHING``. + To create a lifecycle hook for scale-in events, specify
     * ``autoscaling:EC2_INSTANCE_TERMINATING``.
     * 
     * @param lifecycleTransition the lifecycleTransition value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withLifecycleTransition(String lifecycleTransition) {
        this.lifecycleTransition = lifecycleTransition;
        return this;
    }

    /**
     * Get the notificationMetadata property: Additional information that you want to include any time Amazon EC2 Auto
     * Scaling sends a message to the notification target.
     * 
     * @return the notificationMetadata value.
     */
    public String notificationMetadata() {
        return this.notificationMetadata;
    }

    /**
     * Set the notificationMetadata property: Additional information that you want to include any time Amazon EC2 Auto
     * Scaling sends a message to the notification target.
     * 
     * @param notificationMetadata the notificationMetadata value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withNotificationMetadata(String notificationMetadata) {
        this.notificationMetadata = notificationMetadata;
        return this;
    }

    /**
     * Get the notificationTargetArn property: The Amazon Resource Name (ARN) of the notification target that Amazon EC2
     * Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook. You can specify
     * an Amazon SNS topic or an Amazon SQS queue.
     * 
     * @return the notificationTargetArn value.
     */
    public String notificationTargetArn() {
        return this.notificationTargetArn;
    }

    /**
     * Set the notificationTargetArn property: The Amazon Resource Name (ARN) of the notification target that Amazon EC2
     * Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook. You can specify
     * an Amazon SNS topic or an Amazon SQS queue.
     * 
     * @param notificationTargetArn the notificationTargetArn value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withNotificationTargetArn(String notificationTargetArn) {
        this.notificationTargetArn = notificationTargetArn;
        return this;
    }

    /**
     * Get the roleArn property: The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
     * notification target. For information about creating this role, see [Configure a notification target for a
     * lifecycle
     * hook](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html#lifecycle-hook-notification-target)
     * in the *Amazon EC2 Auto Scaling User Guide*. Valid only if the notification target is an Amazon SNS topic or an
     * Amazon SQS queue.
     * 
     * @return the roleArn value.
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * Set the roleArn property: The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
     * notification target. For information about creating this role, see [Configure a notification target for a
     * lifecycle
     * hook](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html#lifecycle-hook-notification-target)
     * in the *Amazon EC2 Auto Scaling User Guide*. Valid only if the notification target is an Amazon SNS topic or an
     * Amazon SQS queue.
     * 
     * @param roleArn the roleArn value to set.
     * @return the LifecycleHookSpecification object itself.
     */
    public LifecycleHookSpecification withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultResult", this.defaultResult);
        jsonWriter.writeNumberField("heartbeatTimeout", this.heartbeatTimeout);
        jsonWriter.writeStringField("lifecycleHookName", this.lifecycleHookName);
        jsonWriter.writeStringField("lifecycleTransition", this.lifecycleTransition);
        jsonWriter.writeStringField("notificationMetadata", this.notificationMetadata);
        jsonWriter.writeStringField("notificationTargetARN", this.notificationTargetArn);
        jsonWriter.writeStringField("roleARN", this.roleArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifecycleHookSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifecycleHookSpecification if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifecycleHookSpecification.
     */
    public static LifecycleHookSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifecycleHookSpecification deserializedLifecycleHookSpecification = new LifecycleHookSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultResult".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.defaultResult = reader.getString();
                } else if ("heartbeatTimeout".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.heartbeatTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("lifecycleHookName".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.lifecycleHookName = reader.getString();
                } else if ("lifecycleTransition".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.lifecycleTransition = reader.getString();
                } else if ("notificationMetadata".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.notificationMetadata = reader.getString();
                } else if ("notificationTargetARN".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.notificationTargetArn = reader.getString();
                } else if ("roleARN".equals(fieldName)) {
                    deserializedLifecycleHookSpecification.roleArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifecycleHookSpecification;
        });
    }
}
