// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LambdaFunctionAssociation.
 */
@Fluent
public final class LambdaFunctionAssociation implements JsonSerializable<LambdaFunctionAssociation> {
    /*
     * Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values: +
     * ``viewer-request``: The function executes when CloudFront receives a request from a viewer and before it checks
     * to see whether the requested object is in the edge cache. + ``origin-request``: The function executes only when
     * CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't
     * execute. + ``origin-response``: The function executes after CloudFront receives a response from the origin and
     * before it caches the object in the response. When the requested object is in the edge cache, the function doesn't
     * execute. + ``viewer-response``: The function executes before CloudFront returns the requested object to the
     * viewer. The function executes regardless of whether the object was already in the edge cache. If the origin
     * returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.
     */
    private String eventType;

    /*
     * A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see
     * [Accessing the Request Body by Choosing the Include Body
     * Option](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html) in
     * the Amazon CloudFront Developer Guide.
     */
    private Boolean includeBody;

    /*
     * The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias
     * or $LATEST.
     */
    private String lambdaFunctionArn;

    /**
     * Creates an instance of LambdaFunctionAssociation class.
     */
    public LambdaFunctionAssociation() {
    }

    /**
     * Get the eventType property: Specifies the event type that triggers a Lambda&#064;Edge function invocation. You
     * can specify the following values: + ``viewer-request``: The function executes when CloudFront receives a request
     * from a viewer and before it checks to see whether the requested object is in the edge cache. +
     * ``origin-request``: The function executes only when CloudFront sends a request to your origin. When the requested
     * object is in the edge cache, the function doesn't execute. + ``origin-response``: The function executes after
     * CloudFront receives a response from the origin and before it caches the object in the response. When the
     * requested object is in the edge cache, the function doesn't execute. + ``viewer-response``: The function executes
     * before CloudFront returns the requested object to the viewer. The function executes regardless of whether the
     * object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the
     * function doesn't execute.
     * 
     * @return the eventType value.
     */
    public String eventType() {
        return this.eventType;
    }

    /**
     * Set the eventType property: Specifies the event type that triggers a Lambda&#064;Edge function invocation. You
     * can specify the following values: + ``viewer-request``: The function executes when CloudFront receives a request
     * from a viewer and before it checks to see whether the requested object is in the edge cache. +
     * ``origin-request``: The function executes only when CloudFront sends a request to your origin. When the requested
     * object is in the edge cache, the function doesn't execute. + ``origin-response``: The function executes after
     * CloudFront receives a response from the origin and before it caches the object in the response. When the
     * requested object is in the edge cache, the function doesn't execute. + ``viewer-response``: The function executes
     * before CloudFront returns the requested object to the viewer. The function executes regardless of whether the
     * object was already in the edge cache. If the origin returns an HTTP status code other than HTTP 200 (OK), the
     * function doesn't execute.
     * 
     * @param eventType the eventType value to set.
     * @return the LambdaFunctionAssociation object itself.
     */
    public LambdaFunctionAssociation withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Get the includeBody property: A flag that allows a Lambda&#064;Edge function to have read access to the body
     * content. For more information, see [Accessing the Request Body by Choosing the Include Body
     * Option](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html) in
     * the Amazon CloudFront Developer Guide.
     * 
     * @return the includeBody value.
     */
    public Boolean includeBody() {
        return this.includeBody;
    }

    /**
     * Set the includeBody property: A flag that allows a Lambda&#064;Edge function to have read access to the body
     * content. For more information, see [Accessing the Request Body by Choosing the Include Body
     * Option](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html) in
     * the Amazon CloudFront Developer Guide.
     * 
     * @param includeBody the includeBody value to set.
     * @return the LambdaFunctionAssociation object itself.
     */
    public LambdaFunctionAssociation withIncludeBody(Boolean includeBody) {
        this.includeBody = includeBody;
        return this;
    }

    /**
     * Get the lambdaFunctionArn property: The ARN of the Lambda&#064;Edge function. You must specify the ARN of a
     * function version; you can't specify an alias or $LATEST.
     * 
     * @return the lambdaFunctionArn value.
     */
    public String lambdaFunctionArn() {
        return this.lambdaFunctionArn;
    }

    /**
     * Set the lambdaFunctionArn property: The ARN of the Lambda&#064;Edge function. You must specify the ARN of a
     * function version; you can't specify an alias or $LATEST.
     * 
     * @param lambdaFunctionArn the lambdaFunctionArn value to set.
     * @return the LambdaFunctionAssociation object itself.
     */
    public LambdaFunctionAssociation withLambdaFunctionArn(String lambdaFunctionArn) {
        this.lambdaFunctionArn = lambdaFunctionArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventType", this.eventType);
        jsonWriter.writeBooleanField("includeBody", this.includeBody);
        jsonWriter.writeStringField("lambdaFunctionARN", this.lambdaFunctionArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LambdaFunctionAssociation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LambdaFunctionAssociation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LambdaFunctionAssociation.
     */
    public static LambdaFunctionAssociation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LambdaFunctionAssociation deserializedLambdaFunctionAssociation = new LambdaFunctionAssociation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventType".equals(fieldName)) {
                    deserializedLambdaFunctionAssociation.eventType = reader.getString();
                } else if ("includeBody".equals(fieldName)) {
                    deserializedLambdaFunctionAssociation.includeBody = reader.getNullable(JsonReader::getBoolean);
                } else if ("lambdaFunctionARN".equals(fieldName)) {
                    deserializedLambdaFunctionAssociation.lambdaFunctionArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLambdaFunctionAssociation;
        });
    }
}
