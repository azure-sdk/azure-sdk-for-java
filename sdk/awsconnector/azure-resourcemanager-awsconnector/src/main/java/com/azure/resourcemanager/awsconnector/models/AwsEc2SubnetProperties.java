// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsEc2Subnet.
 */
@Fluent
public final class AwsEc2SubnetProperties implements JsonSerializable<AwsEc2SubnetProperties> {
    /*
     * Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is
     * ``false``. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    private Boolean assignIpv6AddressOnCreation;

    /*
     * The Availability Zone of the subnet. If you update this property, you must also update the ``CidrBlock``
     * property.
     */
    private String availabilityZone;

    /*
     * The AZ ID of the subnet.
     */
    private String availabilityZoneId;

    /*
     * The IPv4 CIDR block assigned to the subnet. If you update this property, we create a new subnet, and then delete
     * the existing one.
     */
    private String cidrBlock;

    /*
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic
     * IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and
     * NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the
     * *User Guide*.
     */
    private Boolean enableDns64;

    /*
     * Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local
     * network interfaces in this subnet are the secondary network interface (eth1).
     */
    private Integer enableLniAtDeviceIndex;

    /*
     * An IPv4 IPAM pool ID for the subnet.
     */
    private String ipv4IpamPoolId;

    /*
     * An IPv4 netmask length for the subnet.
     */
    private Integer ipv4NetmaskLength;

    /*
     * The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    private String ipv6CidrBlock;

    /*
     * The IPv6 network ranges for the subnet, in CIDR notation.
     */
    private List<String> ipv6CidrBlocks;

    /*
     * An IPv6 IPAM pool ID for the subnet.
     */
    private String ipv6IpamPoolId;

    /*
     * Indicates whether this is an IPv6 only subnet. For more information, see [Subnet
     * basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
     */
    private Boolean ipv6Native;

    /*
     * An IPv6 netmask length for the subnet.
     */
    private Integer ipv6NetmaskLength;

    /*
     * Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is
     * ``false``. AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running
     * instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing
     * page](https://docs.aws.amazon.com/vpc/pricing/).
     */
    private Boolean mapPublicIpOnLaunch;

    /*
     * Property networkAclAssociationId
     */
    private String networkAclAssociationId;

    /*
     * The Amazon Resource Name (ARN) of the Outpost.
     */
    private String outpostArn;

    /*
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the
     * instances should be handled. For more information, see [Amazon EC2 instance hostname
     * types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
     * Available options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord (true | false)
     * + HostnameType (ip-name | resource-name)
     */
    private PrivateDnsNameOptionsOnLaunchModelProperties privateDnsNameOptionsOnLaunch;

    /*
     * Property subnetId
     */
    private String subnetId;

    /*
     * Any tags assigned to the subnet.
     */
    private List<TagAutoGenerated20> tags;

    /*
     * The ID of the VPC the subnet is in. If you update this property, you must also update the ``CidrBlock`` property.
     */
    private String vpcId;

    /**
     * Creates an instance of AwsEc2SubnetProperties class.
     */
    public AwsEc2SubnetProperties() {
    }

    /**
     * Get the assignIpv6AddressOnCreation property: Indicates whether a network interface created in this subnet
     * receives an IPv6 address. The default value is ``false``. If you specify ``AssignIpv6AddressOnCreation``, you
     * must also specify an IPv6 CIDR block.
     * 
     * @return the assignIpv6AddressOnCreation value.
     */
    public Boolean assignIpv6AddressOnCreation() {
        return this.assignIpv6AddressOnCreation;
    }

    /**
     * Set the assignIpv6AddressOnCreation property: Indicates whether a network interface created in this subnet
     * receives an IPv6 address. The default value is ``false``. If you specify ``AssignIpv6AddressOnCreation``, you
     * must also specify an IPv6 CIDR block.
     * 
     * @param assignIpv6AddressOnCreation the assignIpv6AddressOnCreation value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withAssignIpv6AddressOnCreation(Boolean assignIpv6AddressOnCreation) {
        this.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
        return this;
    }

    /**
     * Get the availabilityZone property: The Availability Zone of the subnet. If you update this property, you must
     * also update the ``CidrBlock`` property.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: The Availability Zone of the subnet. If you update this property, you must
     * also update the ``CidrBlock`` property.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the availabilityZoneId property: The AZ ID of the subnet.
     * 
     * @return the availabilityZoneId value.
     */
    public String availabilityZoneId() {
        return this.availabilityZoneId;
    }

    /**
     * Set the availabilityZoneId property: The AZ ID of the subnet.
     * 
     * @param availabilityZoneId the availabilityZoneId value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withAvailabilityZoneId(String availabilityZoneId) {
        this.availabilityZoneId = availabilityZoneId;
        return this;
    }

    /**
     * Get the cidrBlock property: The IPv4 CIDR block assigned to the subnet. If you update this property, we create a
     * new subnet, and then delete the existing one.
     * 
     * @return the cidrBlock value.
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }

    /**
     * Set the cidrBlock property: The IPv4 CIDR block assigned to the subnet. If you update this property, we create a
     * new subnet, and then delete the existing one.
     * 
     * @param cidrBlock the cidrBlock value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withCidrBlock(String cidrBlock) {
        this.cidrBlock = cidrBlock;
        return this;
    }

    /**
     * Get the enableDns64 property: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this
     * subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and
     * NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the
     * *User Guide*.
     * 
     * @return the enableDns64 value.
     */
    public Boolean enableDns64() {
        return this.enableDns64;
    }

    /**
     * Set the enableDns64 property: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this
     * subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and
     * NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the
     * *User Guide*.
     * 
     * @param enableDns64 the enableDns64 value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withEnableDns64(Boolean enableDns64) {
        this.enableDns64 = enableDns64;
        return this;
    }

    /**
     * Get the enableLniAtDeviceIndex property: Indicates the device position for local network interfaces in this
     * subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface
     * (eth1).
     * 
     * @return the enableLniAtDeviceIndex value.
     */
    public Integer enableLniAtDeviceIndex() {
        return this.enableLniAtDeviceIndex;
    }

    /**
     * Set the enableLniAtDeviceIndex property: Indicates the device position for local network interfaces in this
     * subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface
     * (eth1).
     * 
     * @param enableLniAtDeviceIndex the enableLniAtDeviceIndex value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withEnableLniAtDeviceIndex(Integer enableLniAtDeviceIndex) {
        this.enableLniAtDeviceIndex = enableLniAtDeviceIndex;
        return this;
    }

    /**
     * Get the ipv4IpamPoolId property: An IPv4 IPAM pool ID for the subnet.
     * 
     * @return the ipv4IpamPoolId value.
     */
    public String ipv4IpamPoolId() {
        return this.ipv4IpamPoolId;
    }

    /**
     * Set the ipv4IpamPoolId property: An IPv4 IPAM pool ID for the subnet.
     * 
     * @param ipv4IpamPoolId the ipv4IpamPoolId value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv4IpamPoolId(String ipv4IpamPoolId) {
        this.ipv4IpamPoolId = ipv4IpamPoolId;
        return this;
    }

    /**
     * Get the ipv4NetmaskLength property: An IPv4 netmask length for the subnet.
     * 
     * @return the ipv4NetmaskLength value.
     */
    public Integer ipv4NetmaskLength() {
        return this.ipv4NetmaskLength;
    }

    /**
     * Set the ipv4NetmaskLength property: An IPv4 netmask length for the subnet.
     * 
     * @param ipv4NetmaskLength the ipv4NetmaskLength value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv4NetmaskLength(Integer ipv4NetmaskLength) {
        this.ipv4NetmaskLength = ipv4NetmaskLength;
        return this;
    }

    /**
     * Get the ipv6CidrBlock property: The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must
     * also specify an IPv6 CIDR block.
     * 
     * @return the ipv6CidrBlock value.
     */
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }

    /**
     * Set the ipv6CidrBlock property: The IPv6 CIDR block. If you specify ``AssignIpv6AddressOnCreation``, you must
     * also specify an IPv6 CIDR block.
     * 
     * @param ipv6CidrBlock the ipv6CidrBlock value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv6CidrBlock(String ipv6CidrBlock) {
        this.ipv6CidrBlock = ipv6CidrBlock;
        return this;
    }

    /**
     * Get the ipv6CidrBlocks property: The IPv6 network ranges for the subnet, in CIDR notation.
     * 
     * @return the ipv6CidrBlocks value.
     */
    public List<String> ipv6CidrBlocks() {
        return this.ipv6CidrBlocks;
    }

    /**
     * Set the ipv6CidrBlocks property: The IPv6 network ranges for the subnet, in CIDR notation.
     * 
     * @param ipv6CidrBlocks the ipv6CidrBlocks value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv6CidrBlocks(List<String> ipv6CidrBlocks) {
        this.ipv6CidrBlocks = ipv6CidrBlocks;
        return this;
    }

    /**
     * Get the ipv6IpamPoolId property: An IPv6 IPAM pool ID for the subnet.
     * 
     * @return the ipv6IpamPoolId value.
     */
    public String ipv6IpamPoolId() {
        return this.ipv6IpamPoolId;
    }

    /**
     * Set the ipv6IpamPoolId property: An IPv6 IPAM pool ID for the subnet.
     * 
     * @param ipv6IpamPoolId the ipv6IpamPoolId value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv6IpamPoolId(String ipv6IpamPoolId) {
        this.ipv6IpamPoolId = ipv6IpamPoolId;
        return this;
    }

    /**
     * Get the ipv6Native property: Indicates whether this is an IPv6 only subnet. For more information, see [Subnet
     * basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
     * 
     * @return the ipv6Native value.
     */
    public Boolean ipv6Native() {
        return this.ipv6Native;
    }

    /**
     * Set the ipv6Native property: Indicates whether this is an IPv6 only subnet. For more information, see [Subnet
     * basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
     * 
     * @param ipv6Native the ipv6Native value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv6Native(Boolean ipv6Native) {
        this.ipv6Native = ipv6Native;
        return this;
    }

    /**
     * Get the ipv6NetmaskLength property: An IPv6 netmask length for the subnet.
     * 
     * @return the ipv6NetmaskLength value.
     */
    public Integer ipv6NetmaskLength() {
        return this.ipv6NetmaskLength;
    }

    /**
     * Set the ipv6NetmaskLength property: An IPv6 netmask length for the subnet.
     * 
     * @param ipv6NetmaskLength the ipv6NetmaskLength value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withIpv6NetmaskLength(Integer ipv6NetmaskLength) {
        this.ipv6NetmaskLength = ipv6NetmaskLength;
        return this;
    }

    /**
     * Get the mapPublicIpOnLaunch property: Indicates whether instances launched in this subnet receive a public IPv4
     * address. The default value is ``false``. AWS charges for all public IPv4 addresses, including public IPv4
     * addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4
     * Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
     * 
     * @return the mapPublicIpOnLaunch value.
     */
    public Boolean mapPublicIpOnLaunch() {
        return this.mapPublicIpOnLaunch;
    }

    /**
     * Set the mapPublicIpOnLaunch property: Indicates whether instances launched in this subnet receive a public IPv4
     * address. The default value is ``false``. AWS charges for all public IPv4 addresses, including public IPv4
     * addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4
     * Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
     * 
     * @param mapPublicIpOnLaunch the mapPublicIpOnLaunch value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withMapPublicIpOnLaunch(Boolean mapPublicIpOnLaunch) {
        this.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
        return this;
    }

    /**
     * Get the networkAclAssociationId property: Property networkAclAssociationId.
     * 
     * @return the networkAclAssociationId value.
     */
    public String networkAclAssociationId() {
        return this.networkAclAssociationId;
    }

    /**
     * Set the networkAclAssociationId property: Property networkAclAssociationId.
     * 
     * @param networkAclAssociationId the networkAclAssociationId value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withNetworkAclAssociationId(String networkAclAssociationId) {
        this.networkAclAssociationId = networkAclAssociationId;
        return this;
    }

    /**
     * Get the outpostArn property: The Amazon Resource Name (ARN) of the Outpost.
     * 
     * @return the outpostArn value.
     */
    public String outpostArn() {
        return this.outpostArn;
    }

    /**
     * Set the outpostArn property: The Amazon Resource Name (ARN) of the Outpost.
     * 
     * @param outpostArn the outpostArn value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withOutpostArn(String outpostArn) {
        this.outpostArn = outpostArn;
        return this;
    }

    /**
     * Get the privateDnsNameOptionsOnLaunch property: The hostname type for EC2 instances launched into this subnet and
     * how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2
     * instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the
     * *User Guide*. Available options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord
     * (true | false) + HostnameType (ip-name | resource-name).
     * 
     * @return the privateDnsNameOptionsOnLaunch value.
     */
    public PrivateDnsNameOptionsOnLaunchModelProperties privateDnsNameOptionsOnLaunch() {
        return this.privateDnsNameOptionsOnLaunch;
    }

    /**
     * Set the privateDnsNameOptionsOnLaunch property: The hostname type for EC2 instances launched into this subnet and
     * how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2
     * instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the
     * *User Guide*. Available options: + EnableResourceNameDnsAAAARecord (true | false) + EnableResourceNameDnsARecord
     * (true | false) + HostnameType (ip-name | resource-name).
     * 
     * @param privateDnsNameOptionsOnLaunch the privateDnsNameOptionsOnLaunch value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties
        withPrivateDnsNameOptionsOnLaunch(PrivateDnsNameOptionsOnLaunchModelProperties privateDnsNameOptionsOnLaunch) {
        this.privateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch;
        return this;
    }

    /**
     * Get the subnetId property: Property subnetId.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Property subnetId.
     * 
     * @param subnetId the subnetId value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the tags property: Any tags assigned to the subnet.
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated20> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Any tags assigned to the subnet.
     * 
     * @param tags the tags value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withTags(List<TagAutoGenerated20> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vpcId property: The ID of the VPC the subnet is in. If you update this property, you must also update the
     * ``CidrBlock`` property.
     * 
     * @return the vpcId value.
     */
    public String vpcId() {
        return this.vpcId;
    }

    /**
     * Set the vpcId property: The ID of the VPC the subnet is in. If you update this property, you must also update the
     * ``CidrBlock`` property.
     * 
     * @param vpcId the vpcId value to set.
     * @return the AwsEc2SubnetProperties object itself.
     */
    public AwsEc2SubnetProperties withVpcId(String vpcId) {
        this.vpcId = vpcId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateDnsNameOptionsOnLaunch() != null) {
            privateDnsNameOptionsOnLaunch().validate();
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("assignIpv6AddressOnCreation", this.assignIpv6AddressOnCreation);
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeStringField("availabilityZoneId", this.availabilityZoneId);
        jsonWriter.writeStringField("cidrBlock", this.cidrBlock);
        jsonWriter.writeBooleanField("enableDns64", this.enableDns64);
        jsonWriter.writeNumberField("enableLniAtDeviceIndex", this.enableLniAtDeviceIndex);
        jsonWriter.writeStringField("ipv4IpamPoolId", this.ipv4IpamPoolId);
        jsonWriter.writeNumberField("ipv4NetmaskLength", this.ipv4NetmaskLength);
        jsonWriter.writeStringField("ipv6CidrBlock", this.ipv6CidrBlock);
        jsonWriter.writeArrayField("ipv6CidrBlocks", this.ipv6CidrBlocks,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("ipv6IpamPoolId", this.ipv6IpamPoolId);
        jsonWriter.writeBooleanField("ipv6Native", this.ipv6Native);
        jsonWriter.writeNumberField("ipv6NetmaskLength", this.ipv6NetmaskLength);
        jsonWriter.writeBooleanField("mapPublicIpOnLaunch", this.mapPublicIpOnLaunch);
        jsonWriter.writeStringField("networkAclAssociationId", this.networkAclAssociationId);
        jsonWriter.writeStringField("outpostArn", this.outpostArn);
        jsonWriter.writeJsonField("privateDnsNameOptionsOnLaunch", this.privateDnsNameOptionsOnLaunch);
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vpcId", this.vpcId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsEc2SubnetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsEc2SubnetProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsEc2SubnetProperties.
     */
    public static AwsEc2SubnetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsEc2SubnetProperties deserializedAwsEc2SubnetProperties = new AwsEc2SubnetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assignIpv6AddressOnCreation".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.assignIpv6AddressOnCreation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("availabilityZone".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.availabilityZone = reader.getString();
                } else if ("availabilityZoneId".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.availabilityZoneId = reader.getString();
                } else if ("cidrBlock".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.cidrBlock = reader.getString();
                } else if ("enableDns64".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.enableDns64 = reader.getNullable(JsonReader::getBoolean);
                } else if ("enableLniAtDeviceIndex".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.enableLniAtDeviceIndex = reader.getNullable(JsonReader::getInt);
                } else if ("ipv4IpamPoolId".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.ipv4IpamPoolId = reader.getString();
                } else if ("ipv4NetmaskLength".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.ipv4NetmaskLength = reader.getNullable(JsonReader::getInt);
                } else if ("ipv6CidrBlock".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.ipv6CidrBlock = reader.getString();
                } else if ("ipv6CidrBlocks".equals(fieldName)) {
                    List<String> ipv6CidrBlocks = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsEc2SubnetProperties.ipv6CidrBlocks = ipv6CidrBlocks;
                } else if ("ipv6IpamPoolId".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.ipv6IpamPoolId = reader.getString();
                } else if ("ipv6Native".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.ipv6Native = reader.getNullable(JsonReader::getBoolean);
                } else if ("ipv6NetmaskLength".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.ipv6NetmaskLength = reader.getNullable(JsonReader::getInt);
                } else if ("mapPublicIpOnLaunch".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.mapPublicIpOnLaunch = reader.getNullable(JsonReader::getBoolean);
                } else if ("networkAclAssociationId".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.networkAclAssociationId = reader.getString();
                } else if ("outpostArn".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.outpostArn = reader.getString();
                } else if ("privateDnsNameOptionsOnLaunch".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.privateDnsNameOptionsOnLaunch
                        = PrivateDnsNameOptionsOnLaunchModelProperties.fromJson(reader);
                } else if ("subnetId".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.subnetId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated20> tags = reader.readArray(reader1 -> TagAutoGenerated20.fromJson(reader1));
                    deserializedAwsEc2SubnetProperties.tags = tags;
                } else if ("vpcId".equals(fieldName)) {
                    deserializedAwsEc2SubnetProperties.vpcId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsEc2SubnetProperties;
        });
    }
}
