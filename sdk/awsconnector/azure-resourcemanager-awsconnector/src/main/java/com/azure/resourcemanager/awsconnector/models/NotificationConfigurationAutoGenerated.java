// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of NotificationConfiguration.
 */
@Fluent
public final class NotificationConfigurationAutoGenerated
    implements JsonSerializable<NotificationConfigurationAutoGenerated> {
    /*
     * <p>The Amazon Resource Name (ARN) that identifies the topic. </p>
     */
    private String topicArn;

    /*
     * <p>The current state of the topic. A value of “active” means that notifications will be sent to the topic. A
     * value of “inactive” means that notifications will not be sent to the topic.</p>
     */
    private String topicStatus;

    /**
     * Creates an instance of NotificationConfigurationAutoGenerated class.
     */
    public NotificationConfigurationAutoGenerated() {
    }

    /**
     * Get the topicArn property: &lt;p&gt;The Amazon Resource Name (ARN) that identifies the topic. &lt;/p&gt;.
     * 
     * @return the topicArn value.
     */
    public String topicArn() {
        return this.topicArn;
    }

    /**
     * Set the topicArn property: &lt;p&gt;The Amazon Resource Name (ARN) that identifies the topic. &lt;/p&gt;.
     * 
     * @param topicArn the topicArn value to set.
     * @return the NotificationConfigurationAutoGenerated object itself.
     */
    public NotificationConfigurationAutoGenerated withTopicArn(String topicArn) {
        this.topicArn = topicArn;
        return this;
    }

    /**
     * Get the topicStatus property: &lt;p&gt;The current state of the topic. A value of “active” means that
     * notifications will be sent to the topic. A value of “inactive” means that notifications will not be sent to the
     * topic.&lt;/p&gt;.
     * 
     * @return the topicStatus value.
     */
    public String topicStatus() {
        return this.topicStatus;
    }

    /**
     * Set the topicStatus property: &lt;p&gt;The current state of the topic. A value of “active” means that
     * notifications will be sent to the topic. A value of “inactive” means that notifications will not be sent to the
     * topic.&lt;/p&gt;.
     * 
     * @param topicStatus the topicStatus value to set.
     * @return the NotificationConfigurationAutoGenerated object itself.
     */
    public NotificationConfigurationAutoGenerated withTopicStatus(String topicStatus) {
        this.topicStatus = topicStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topicArn", this.topicArn);
        jsonWriter.writeStringField("topicStatus", this.topicStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationConfigurationAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationConfigurationAutoGenerated if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationConfigurationAutoGenerated.
     */
    public static NotificationConfigurationAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationConfigurationAutoGenerated deserializedNotificationConfigurationAutoGenerated
                = new NotificationConfigurationAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topicArn".equals(fieldName)) {
                    deserializedNotificationConfigurationAutoGenerated.topicArn = reader.getString();
                } else if ("topicStatus".equals(fieldName)) {
                    deserializedNotificationConfigurationAutoGenerated.topicStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationConfigurationAutoGenerated;
        });
    }
}
