// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EnhancedMetricsConfig.
 */
@Fluent
public final class EnhancedMetricsConfig implements JsonSerializable<EnhancedMetricsConfig> {
    /*
     * <p>Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:</p> <ul> <li>
     * <p>Requests: The number of invocations that occured during a request.</p> </li> <li> <p>Latency: The time to
     * complete a data source invocation.</p> </li> <li> <p>Errors: The number of errors that occurred during a data
     * source invocation.</p> </li> </ul> <p>These metrics can be emitted to CloudWatch per data source or for all data
     * sources in the request. Metrics will be recorded by API ID and data source name.
     * <code>dataSourceLevelMetricsBehavior</code> accepts one of these values at a time:</p> <ul> <li> <p>
     * <code>FULL_REQUEST_DATA_SOURCE_METRICS</code>: Records and emits metric data for all data sources in the
     * request.</p> </li> <li> <p> <code>PER_DATA_SOURCE_METRICS</code>: Records and emits metric data for data sources
     * that have the <code>metricsConfig</code> value set to <code>ENABLED</code>.</p> </li> </ul>
     */
    private DataSourceLevelMetricsBehaviorEnumValue dataSourceLevelMetricsBehavior;

    /*
     * <p> Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:</p> <ul> <li>
     * <p>Requests: The number of times a specified GraphQL operation was called.</p> </li> <li> <p>GraphQL errors: The
     * number of GraphQL errors that occurred during a specified GraphQL operation.</p> </li> </ul> <p>Metrics will be
     * recorded by API ID and operation name. You can set the value to <code>ENABLED</code> or
     * <code>DISABLED</code>.</p>
     */
    private OperationLevelMetricsConfigEnumValue operationLevelMetricsConfig;

    /*
     * <p>Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:</p> <ul> <li>
     * <p>GraphQL errors: The number of GraphQL errors that occurred.</p> </li> <li> <p>Requests: The number of
     * invocations that occurred during a request. </p> </li> <li> <p>Latency: The time to complete a resolver
     * invocation.</p> </li> <li> <p>Cache hits: The number of cache hits during a request.</p> </li> <li> <p>Cache
     * misses: The number of cache misses during a request.</p> </li> </ul> <p>These metrics can be emitted to
     * CloudWatch per resolver or for all resolvers in the request. Metrics will be recorded by API ID and resolver
     * name. <code>resolverLevelMetricsBehavior</code> accepts one of these values at a time:</p> <ul> <li> <p>
     * <code>FULL_REQUEST_RESOLVER_METRICS</code>: Records and emits metric data for all resolvers in the request.</p>
     * </li> <li> <p> <code>PER_RESOLVER_METRICS</code>: Records and emits metric data for resolvers that have the
     * <code>metricsConfig</code> value set to <code>ENABLED</code>.</p> </li> </ul>
     */
    private ResolverLevelMetricsBehaviorEnumValue resolverLevelMetricsBehavior;

    /**
     * Creates an instance of EnhancedMetricsConfig class.
     */
    public EnhancedMetricsConfig() {
    }

    /**
     * Get the dataSourceLevelMetricsBehavior property: &lt;p&gt;Controls how data source metrics will be emitted to
     * CloudWatch. Data source metrics include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Requests: The number of
     * invocations that occured during a request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Latency: The time to
     * complete a data source invocation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Errors: The number of errors that
     * occurred during a data source invocation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These metrics can be emitted
     * to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data
     * source name. &lt;code&gt;dataSourceLevelMetricsBehavior&lt;/code&gt; accepts one of these values at a
     * time:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FULL_REQUEST_DATA_SOURCE_METRICS&lt;/code&gt;:
     * Records and emits metric data for all data sources in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;PER_DATA_SOURCE_METRICS&lt;/code&gt;: Records and emits metric data for data sources that have the
     * &lt;code&gt;metricsConfig&lt;/code&gt; value set to &lt;code&gt;ENABLED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @return the dataSourceLevelMetricsBehavior value.
     */
    public DataSourceLevelMetricsBehaviorEnumValue dataSourceLevelMetricsBehavior() {
        return this.dataSourceLevelMetricsBehavior;
    }

    /**
     * Set the dataSourceLevelMetricsBehavior property: &lt;p&gt;Controls how data source metrics will be emitted to
     * CloudWatch. Data source metrics include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Requests: The number of
     * invocations that occured during a request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Latency: The time to
     * complete a data source invocation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Errors: The number of errors that
     * occurred during a data source invocation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These metrics can be emitted
     * to CloudWatch per data source or for all data sources in the request. Metrics will be recorded by API ID and data
     * source name. &lt;code&gt;dataSourceLevelMetricsBehavior&lt;/code&gt; accepts one of these values at a
     * time:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FULL_REQUEST_DATA_SOURCE_METRICS&lt;/code&gt;:
     * Records and emits metric data for all data sources in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;PER_DATA_SOURCE_METRICS&lt;/code&gt;: Records and emits metric data for data sources that have the
     * &lt;code&gt;metricsConfig&lt;/code&gt; value set to &lt;code&gt;ENABLED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @param dataSourceLevelMetricsBehavior the dataSourceLevelMetricsBehavior value to set.
     * @return the EnhancedMetricsConfig object itself.
     */
    public EnhancedMetricsConfig
        withDataSourceLevelMetricsBehavior(DataSourceLevelMetricsBehaviorEnumValue dataSourceLevelMetricsBehavior) {
        this.dataSourceLevelMetricsBehavior = dataSourceLevelMetricsBehavior;
        return this;
    }

    /**
     * Get the operationLevelMetricsConfig property: &lt;p&gt; Controls how operation metrics will be emitted to
     * CloudWatch. Operation metrics include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Requests: The number of times a
     * specified GraphQL operation was called.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;GraphQL errors: The number of
     * GraphQL errors that occurred during a specified GraphQL operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;p&gt;Metrics will be recorded by API ID and operation name. You can set the value to
     * &lt;code&gt;ENABLED&lt;/code&gt; or &lt;code&gt;DISABLED&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the operationLevelMetricsConfig value.
     */
    public OperationLevelMetricsConfigEnumValue operationLevelMetricsConfig() {
        return this.operationLevelMetricsConfig;
    }

    /**
     * Set the operationLevelMetricsConfig property: &lt;p&gt; Controls how operation metrics will be emitted to
     * CloudWatch. Operation metrics include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Requests: The number of times a
     * specified GraphQL operation was called.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;GraphQL errors: The number of
     * GraphQL errors that occurred during a specified GraphQL operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * &lt;p&gt;Metrics will be recorded by API ID and operation name. You can set the value to
     * &lt;code&gt;ENABLED&lt;/code&gt; or &lt;code&gt;DISABLED&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param operationLevelMetricsConfig the operationLevelMetricsConfig value to set.
     * @return the EnhancedMetricsConfig object itself.
     */
    public EnhancedMetricsConfig
        withOperationLevelMetricsConfig(OperationLevelMetricsConfigEnumValue operationLevelMetricsConfig) {
        this.operationLevelMetricsConfig = operationLevelMetricsConfig;
        return this;
    }

    /**
     * Get the resolverLevelMetricsBehavior property: &lt;p&gt;Controls how resolver metrics will be emitted to
     * CloudWatch. Resolver metrics include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;GraphQL errors: The number of
     * GraphQL errors that occurred.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Requests: The number of invocations that
     * occurred during a request. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Latency: The time to complete a resolver
     * invocation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache hits: The number of cache hits during a
     * request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache misses: The number of cache misses during a
     * request.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These metrics can be emitted to CloudWatch per resolver or
     * for all resolvers in the request. Metrics will be recorded by API ID and resolver name.
     * &lt;code&gt;resolverLevelMetricsBehavior&lt;/code&gt; accepts one of these values at a time:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;FULL_REQUEST_RESOLVER_METRICS&lt;/code&gt;: Records and emits metric data for
     * all resolvers in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;PER_RESOLVER_METRICS&lt;/code&gt;: Records and emits metric data for resolvers that have the
     * &lt;code&gt;metricsConfig&lt;/code&gt; value set to &lt;code&gt;ENABLED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @return the resolverLevelMetricsBehavior value.
     */
    public ResolverLevelMetricsBehaviorEnumValue resolverLevelMetricsBehavior() {
        return this.resolverLevelMetricsBehavior;
    }

    /**
     * Set the resolverLevelMetricsBehavior property: &lt;p&gt;Controls how resolver metrics will be emitted to
     * CloudWatch. Resolver metrics include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;GraphQL errors: The number of
     * GraphQL errors that occurred.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Requests: The number of invocations that
     * occurred during a request. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Latency: The time to complete a resolver
     * invocation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache hits: The number of cache hits during a
     * request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache misses: The number of cache misses during a
     * request.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These metrics can be emitted to CloudWatch per resolver or
     * for all resolvers in the request. Metrics will be recorded by API ID and resolver name.
     * &lt;code&gt;resolverLevelMetricsBehavior&lt;/code&gt; accepts one of these values at a time:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;FULL_REQUEST_RESOLVER_METRICS&lt;/code&gt;: Records and emits metric data for
     * all resolvers in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;PER_RESOLVER_METRICS&lt;/code&gt;: Records and emits metric data for resolvers that have the
     * &lt;code&gt;metricsConfig&lt;/code&gt; value set to &lt;code&gt;ENABLED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @param resolverLevelMetricsBehavior the resolverLevelMetricsBehavior value to set.
     * @return the EnhancedMetricsConfig object itself.
     */
    public EnhancedMetricsConfig
        withResolverLevelMetricsBehavior(ResolverLevelMetricsBehaviorEnumValue resolverLevelMetricsBehavior) {
        this.resolverLevelMetricsBehavior = resolverLevelMetricsBehavior;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataSourceLevelMetricsBehavior() != null) {
            dataSourceLevelMetricsBehavior().validate();
        }
        if (operationLevelMetricsConfig() != null) {
            operationLevelMetricsConfig().validate();
        }
        if (resolverLevelMetricsBehavior() != null) {
            resolverLevelMetricsBehavior().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataSourceLevelMetricsBehavior", this.dataSourceLevelMetricsBehavior);
        jsonWriter.writeJsonField("operationLevelMetricsConfig", this.operationLevelMetricsConfig);
        jsonWriter.writeJsonField("resolverLevelMetricsBehavior", this.resolverLevelMetricsBehavior);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnhancedMetricsConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnhancedMetricsConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnhancedMetricsConfig.
     */
    public static EnhancedMetricsConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnhancedMetricsConfig deserializedEnhancedMetricsConfig = new EnhancedMetricsConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataSourceLevelMetricsBehavior".equals(fieldName)) {
                    deserializedEnhancedMetricsConfig.dataSourceLevelMetricsBehavior
                        = DataSourceLevelMetricsBehaviorEnumValue.fromJson(reader);
                } else if ("operationLevelMetricsConfig".equals(fieldName)) {
                    deserializedEnhancedMetricsConfig.operationLevelMetricsConfig
                        = OperationLevelMetricsConfigEnumValue.fromJson(reader);
                } else if ("resolverLevelMetricsBehavior".equals(fieldName)) {
                    deserializedEnhancedMetricsConfig.resolverLevelMetricsBehavior
                        = ResolverLevelMetricsBehaviorEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnhancedMetricsConfig;
        });
    }
}
