// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CFNMalwareProtectionConfiguration.
 */
@Fluent
public final class CfnMalwareProtectionConfiguration implements JsonSerializable<CfnMalwareProtectionConfiguration> {
    /*
     * Property scanEc2InstanceWithFindings
     */
    private CfnScanEc2InstanceWithFindingsConfiguration scanEc2InstanceWithFindings;

    /**
     * Creates an instance of CfnMalwareProtectionConfiguration class.
     */
    public CfnMalwareProtectionConfiguration() {
    }

    /**
     * Get the scanEc2InstanceWithFindings property: Property scanEc2InstanceWithFindings.
     * 
     * @return the scanEc2InstanceWithFindings value.
     */
    public CfnScanEc2InstanceWithFindingsConfiguration scanEc2InstanceWithFindings() {
        return this.scanEc2InstanceWithFindings;
    }

    /**
     * Set the scanEc2InstanceWithFindings property: Property scanEc2InstanceWithFindings.
     * 
     * @param scanEc2InstanceWithFindings the scanEc2InstanceWithFindings value to set.
     * @return the CfnMalwareProtectionConfiguration object itself.
     */
    public CfnMalwareProtectionConfiguration
        withScanEc2InstanceWithFindings(CfnScanEc2InstanceWithFindingsConfiguration scanEc2InstanceWithFindings) {
        this.scanEc2InstanceWithFindings = scanEc2InstanceWithFindings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scanEc2InstanceWithFindings() != null) {
            scanEc2InstanceWithFindings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("scanEc2InstanceWithFindings", this.scanEc2InstanceWithFindings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CfnMalwareProtectionConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CfnMalwareProtectionConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CfnMalwareProtectionConfiguration.
     */
    public static CfnMalwareProtectionConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CfnMalwareProtectionConfiguration deserializedCfnMalwareProtectionConfiguration
                = new CfnMalwareProtectionConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scanEc2InstanceWithFindings".equals(fieldName)) {
                    deserializedCfnMalwareProtectionConfiguration.scanEc2InstanceWithFindings
                        = CfnScanEc2InstanceWithFindingsConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCfnMalwareProtectionConfiguration;
        });
    }
}
