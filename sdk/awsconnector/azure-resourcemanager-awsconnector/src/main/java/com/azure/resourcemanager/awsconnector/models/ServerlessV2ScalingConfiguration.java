// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ServerlessV2ScalingConfiguration.
 */
@Fluent
public final class ServerlessV2ScalingConfiguration implements JsonSerializable<ServerlessV2ScalingConfiguration> {
    /*
     * The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can
     * specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use
     * is 128.
     */
    private Float maxCapacity;

    /*
     * The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can
     * specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is
     * 0.5.
     */
    private Float minCapacity;

    /**
     * Creates an instance of ServerlessV2ScalingConfiguration class.
     */
    public ServerlessV2ScalingConfiguration() {
    }

    /**
     * Get the maxCapacity property: The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora
     * Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The
     * largest value that you can use is 128.
     * 
     * @return the maxCapacity value.
     */
    public Float maxCapacity() {
        return this.maxCapacity;
    }

    /**
     * Set the maxCapacity property: The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora
     * Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The
     * largest value that you can use is 128.
     * 
     * @param maxCapacity the maxCapacity value to set.
     * @return the ServerlessV2ScalingConfiguration object itself.
     */
    public ServerlessV2ScalingConfiguration withMaxCapacity(Float maxCapacity) {
        this.maxCapacity = maxCapacity;
        return this;
    }

    /**
     * Get the minCapacity property: The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora
     * Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The
     * smallest value that you can use is 0.5.
     * 
     * @return the minCapacity value.
     */
    public Float minCapacity() {
        return this.minCapacity;
    }

    /**
     * Set the minCapacity property: The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora
     * Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The
     * smallest value that you can use is 0.5.
     * 
     * @param minCapacity the minCapacity value to set.
     * @return the ServerlessV2ScalingConfiguration object itself.
     */
    public ServerlessV2ScalingConfiguration withMinCapacity(Float minCapacity) {
        this.minCapacity = minCapacity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxCapacity", this.maxCapacity);
        jsonWriter.writeNumberField("minCapacity", this.minCapacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerlessV2ScalingConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerlessV2ScalingConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerlessV2ScalingConfiguration.
     */
    public static ServerlessV2ScalingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerlessV2ScalingConfiguration deserializedServerlessV2ScalingConfiguration
                = new ServerlessV2ScalingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxCapacity".equals(fieldName)) {
                    deserializedServerlessV2ScalingConfiguration.maxCapacity = reader.getNullable(JsonReader::getFloat);
                } else if ("minCapacity".equals(fieldName)) {
                    deserializedServerlessV2ScalingConfiguration.minCapacity = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerlessV2ScalingConfiguration;
        });
    }
}
