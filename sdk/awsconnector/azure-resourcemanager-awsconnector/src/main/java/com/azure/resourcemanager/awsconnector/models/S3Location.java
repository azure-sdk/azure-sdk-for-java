// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of S3Location.
 */
@Fluent
public final class S3Location implements JsonSerializable<S3Location> {
    /*
     * The name of the S3 bucket where the OpenAPI file is stored.
     */
    private String bucket;

    /*
     * The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value, API Gateway skips ETag
     * validation of your OpenAPI file.
     */
    private String etag;

    /*
     * The file name of the OpenAPI file (Amazon S3 object name).
     */
    private String key;

    /*
     * For versioning-enabled buckets, a specific version of the OpenAPI file.
     */
    private String version;

    /**
     * Creates an instance of S3Location class.
     */
    public S3Location() {
    }

    /**
     * Get the bucket property: The name of the S3 bucket where the OpenAPI file is stored.
     * 
     * @return the bucket value.
     */
    public String bucket() {
        return this.bucket;
    }

    /**
     * Set the bucket property: The name of the S3 bucket where the OpenAPI file is stored.
     * 
     * @param bucket the bucket value to set.
     * @return the S3Location object itself.
     */
    public S3Location withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }

    /**
     * Get the etag property: The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value,
     * API Gateway skips ETag validation of your OpenAPI file.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value,
     * API Gateway skips ETag validation of your OpenAPI file.
     * 
     * @param etag the etag value to set.
     * @return the S3Location object itself.
     */
    public S3Location withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the key property: The file name of the OpenAPI file (Amazon S3 object name).
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The file name of the OpenAPI file (Amazon S3 object name).
     * 
     * @param key the key value to set.
     * @return the S3Location object itself.
     */
    public S3Location withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the version property: For versioning-enabled buckets, a specific version of the OpenAPI file.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: For versioning-enabled buckets, a specific version of the OpenAPI file.
     * 
     * @param version the version value to set.
     * @return the S3Location object itself.
     */
    public S3Location withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bucket", this.bucket);
        jsonWriter.writeStringField("eTag", this.etag);
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of S3Location from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of S3Location if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the S3Location.
     */
    public static S3Location fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            S3Location deserializedS3Location = new S3Location();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucket".equals(fieldName)) {
                    deserializedS3Location.bucket = reader.getString();
                } else if ("eTag".equals(fieldName)) {
                    deserializedS3Location.etag = reader.getString();
                } else if ("key".equals(fieldName)) {
                    deserializedS3Location.key = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedS3Location.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedS3Location;
        });
    }
}
