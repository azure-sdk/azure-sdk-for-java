// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ServiceConnectConfiguration.
 */
@Fluent
public final class ServiceConnectConfiguration implements JsonSerializable<ServiceConnectConfiguration> {
    /*
     * Specifies whether to use Service Connect with this service.
     */
    private Boolean enabled;

    /*
     * The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
     * containers use the same logging driver that the Docker daemon uses. However, the container might use a different
     * logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For
     * more information about the options for different supported log drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Understand the following when specifying a log configuration for your containers. + Amazon ECS
     * currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be
     * available in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. + This parameter requires version 1.18 of the Docker Remote API or greater on
     * your container instance. + For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must
     * register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before
     * containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS
     * container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
     * in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't
     * have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be
     * installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to
     * send Gelf logs to. The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
     * containers use the same logging driver that the Docker daemon uses. However, the container might use a different
     * logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For
     * more information about the options for different supported log drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Understand the following when specifying a log configuration for your containers. + Amazon ECS
     * currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be
     * available in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. + This parameter requires version 1.18 of the Docker Remote API or greater on
     * your container instance. + For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must
     * register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before
     * containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS
     * container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
     * in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't
     * have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be
     * installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to
     * send Gelf logs to.
     */
    private LogConfiguration logConfiguration;

    /*
     * The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The
     * namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't
     * affect Service Connect. For more information about CMAPlong, see [Working with
     * Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
     */
    private String namespace;

    /*
     * The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used
     * by other Amazon ECS services to connect to this service. This field is not required for a 'client' Amazon ECS
     * service that's a member of a namespace only to connect to other services within the namespace. An example of this
     * would be a frontend application that accepts incoming requests from either a load balancer that's attached to the
     * service or by other means. An object selects a port from the task definition, assigns a name for the CMAPlong
     * service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
     */
    private List<ServiceConnectService> services;

    /**
     * Creates an instance of ServiceConnectConfiguration class.
     */
    public ServiceConnectConfiguration() {
    }

    /**
     * Get the enabled property: Specifies whether to use Service Connect with this service.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Specifies whether to use Service Connect with this service.
     * 
     * @param enabled the enabled value to set.
     * @return the ServiceConnectConfiguration object itself.
     */
    public ServiceConnectConfiguration withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the logConfiguration property: The log configuration for the container. This parameter maps to ``LogConfig``
     * in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
     * containers use the same logging driver that the Docker daemon uses. However, the container might use a different
     * logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For
     * more information about the options for different supported log drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Understand the following when specifying a log configuration for your containers. + Amazon ECS
     * currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be
     * available in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. + This parameter requires version 1.18 of the Docker Remote API or greater on
     * your container instance. + For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must
     * register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before
     * containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS
     * container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
     * in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't
     * have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be
     * installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to
     * send Gelf logs to. The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
     * containers use the same logging driver that the Docker daemon uses. However, the container might use a different
     * logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For
     * more information about the options for different supported log drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Understand the following when specifying a log configuration for your containers. + Amazon ECS
     * currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be
     * available in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. + This parameter requires version 1.18 of the Docker Remote API or greater on
     * your container instance. + For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must
     * register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before
     * containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS
     * container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
     * in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't
     * have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be
     * installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to
     * send Gelf logs to.
     * 
     * @return the logConfiguration value.
     */
    public LogConfiguration logConfiguration() {
        return this.logConfiguration;
    }

    /**
     * Set the logConfiguration property: The log configuration for the container. This parameter maps to ``LogConfig``
     * in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
     * containers use the same logging driver that the Docker daemon uses. However, the container might use a different
     * logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For
     * more information about the options for different supported log drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Understand the following when specifying a log configuration for your containers. + Amazon ECS
     * currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be
     * available in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. + This parameter requires version 1.18 of the Docker Remote API or greater on
     * your container instance. + For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must
     * register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before
     * containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS
     * container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
     * in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't
     * have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be
     * installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to
     * send Gelf logs to. The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a
     * container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
     * section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the
     * ``--log-driver`` option to [docker
     * run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/). By default,
     * containers use the same logging driver that the Docker daemon uses. However, the container might use a different
     * logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For
     * more information about the options for different supported log drivers, see [Configure logging
     * drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker
     * documentation. Understand the following when specifying a log configuration for your containers. + Amazon ECS
     * currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be
     * available in future releases of the Amazon ECS container agent. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. + This parameter requires version 1.18 of the Docker Remote API or greater on
     * your container instance. + For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must
     * register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before
     * containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS
     * container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
     * in the *Amazon Elastic Container Service Developer Guide*. + For tasks that are on FARGATElong, because you don't
     * have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be
     * installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to
     * send Gelf logs to.
     * 
     * @param logConfiguration the logConfiguration value to set.
     * @return the ServiceConnectConfiguration object itself.
     */
    public ServiceConnectConfiguration withLogConfiguration(LogConfiguration logConfiguration) {
        this.logConfiguration = logConfiguration;
        return this;
    }

    /**
     * Get the namespace property: The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for
     * use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The
     * type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with
     * Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for
     * use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The
     * type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with
     * Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
     * 
     * @param namespace the namespace value to set.
     * @return the ServiceConnectConfiguration object itself.
     */
    public ServiceConnectConfiguration withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the services property: The list of Service Connect service objects. These are names and aliases (also known
     * as endpoints) that are used by other Amazon ECS services to connect to this service. This field is not required
     * for a 'client' Amazon ECS service that's a member of a namespace only to connect to other services within the
     * namespace. An example of this would be a frontend application that accepts incoming requests from either a load
     * balancer that's attached to the service or by other means. An object selects a port from the task definition,
     * assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to
     * refer to this service.
     * 
     * @return the services value.
     */
    public List<ServiceConnectService> services() {
        return this.services;
    }

    /**
     * Set the services property: The list of Service Connect service objects. These are names and aliases (also known
     * as endpoints) that are used by other Amazon ECS services to connect to this service. This field is not required
     * for a 'client' Amazon ECS service that's a member of a namespace only to connect to other services within the
     * namespace. An example of this would be a frontend application that accepts incoming requests from either a load
     * balancer that's attached to the service or by other means. An object selects a port from the task definition,
     * assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to
     * refer to this service.
     * 
     * @param services the services value to set.
     * @return the ServiceConnectConfiguration object itself.
     */
    public ServiceConnectConfiguration withServices(List<ServiceConnectService> services) {
        this.services = services;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logConfiguration() != null) {
            logConfiguration().validate();
        }
        if (services() != null) {
            services().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeJsonField("logConfiguration", this.logConfiguration);
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeArrayField("services", this.services, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceConnectConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceConnectConfiguration if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceConnectConfiguration.
     */
    public static ServiceConnectConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceConnectConfiguration deserializedServiceConnectConfiguration = new ServiceConnectConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedServiceConnectConfiguration.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("logConfiguration".equals(fieldName)) {
                    deserializedServiceConnectConfiguration.logConfiguration = LogConfiguration.fromJson(reader);
                } else if ("namespace".equals(fieldName)) {
                    deserializedServiceConnectConfiguration.namespace = reader.getString();
                } else if ("services".equals(fieldName)) {
                    List<ServiceConnectService> services
                        = reader.readArray(reader1 -> ServiceConnectService.fromJson(reader1));
                    deserializedServiceConnectConfiguration.services = services;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceConnectConfiguration;
        });
    }
}
