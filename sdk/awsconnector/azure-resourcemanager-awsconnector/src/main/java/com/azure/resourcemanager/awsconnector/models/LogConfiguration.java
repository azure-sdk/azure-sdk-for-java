// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of LogConfiguration.
 */
@Fluent
public final class LogConfiguration implements JsonSerializable<LogConfiguration> {
    /*
     * The log driver to use for the container. For tasks on FARGATElong, the supported log drivers are ``awslogs``,
     * ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported log drivers are
     * ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and
     * ``awsfirelens``. For more information about using the ``awslogs`` log driver, see [Using the awslogs log
     * driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic
     * Container Service Developer Guide*. For more information about using the ``awsfirelens`` log driver, see [Custom
     * log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon
     * Elastic Container Service Developer Guide*. If you have a custom driver that isn't listed, you can fork the
     * Amazon ECS container agent project that's [available on
     * GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that
     * driver. We encourage you to submit pull requests for changes that you would like to have included. However, we
     * don't currently provide support for running modified copies of this software.
     */
    private String logDriver;

    /*
     * The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote
     * API or greater on your container instance. To check the Docker Remote API version on your container instance, log
     * in to your container instance and run the following command: ``sudo docker version --format
     * '{{.Server.APIVersion}}'``
     */
    private Object options;

    /*
     * The secrets to pass to the log configuration. For more information, see [Specifying sensitive
     * data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     */
    private List<Secret> secretOptions;

    /**
     * Creates an instance of LogConfiguration class.
     */
    public LogConfiguration() {
    }

    /**
     * Get the logDriver property: The log driver to use for the container. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. For more information about using the ``awslogs`` log driver, see [Using the
     * awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the
     * *Amazon Elastic Container Service Developer Guide*. For more information about using the ``awsfirelens`` log
     * driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
     * in the *Amazon Elastic Container Service Developer Guide*. If you have a custom driver that isn't listed, you can
     * fork the Amazon ECS container agent project that's [available on
     * GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that
     * driver. We encourage you to submit pull requests for changes that you would like to have included. However, we
     * don't currently provide support for running modified copies of this software.
     * 
     * @return the logDriver value.
     */
    public String logDriver() {
        return this.logDriver;
    }

    /**
     * Set the logDriver property: The log driver to use for the container. For tasks on FARGATElong, the supported log
     * drivers are ``awslogs``, ``splunk``, and ``awsfirelens``. For tasks hosted on Amazon EC2 instances, the supported
     * log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``,
     * ``splunk``, and ``awsfirelens``. For more information about using the ``awslogs`` log driver, see [Using the
     * awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the
     * *Amazon Elastic Container Service Developer Guide*. For more information about using the ``awsfirelens`` log
     * driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
     * in the *Amazon Elastic Container Service Developer Guide*. If you have a custom driver that isn't listed, you can
     * fork the Amazon ECS container agent project that's [available on
     * GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that
     * driver. We encourage you to submit pull requests for changes that you would like to have included. However, we
     * don't currently provide support for running modified copies of this software.
     * 
     * @param logDriver the logDriver value to set.
     * @return the LogConfiguration object itself.
     */
    public LogConfiguration withLogDriver(String logDriver) {
        this.logDriver = logDriver;
        return this;
    }

    /**
     * Get the options property: The configuration options to send to the log driver. This parameter requires version
     * 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on
     * your container instance, log in to your container instance and run the following command: ``sudo docker version
     * --format '{{.Server.APIVersion}}'``.
     * 
     * @return the options value.
     */
    public Object options() {
        return this.options;
    }

    /**
     * Set the options property: The configuration options to send to the log driver. This parameter requires version
     * 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on
     * your container instance, log in to your container instance and run the following command: ``sudo docker version
     * --format '{{.Server.APIVersion}}'``.
     * 
     * @param options the options value to set.
     * @return the LogConfiguration object itself.
     */
    public LogConfiguration withOptions(Object options) {
        this.options = options;
        return this;
    }

    /**
     * Get the secretOptions property: The secrets to pass to the log configuration. For more information, see
     * [Specifying sensitive
     * data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @return the secretOptions value.
     */
    public List<Secret> secretOptions() {
        return this.secretOptions;
    }

    /**
     * Set the secretOptions property: The secrets to pass to the log configuration. For more information, see
     * [Specifying sensitive
     * data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon
     * Elastic Container Service Developer Guide*.
     * 
     * @param secretOptions the secretOptions value to set.
     * @return the LogConfiguration object itself.
     */
    public LogConfiguration withSecretOptions(List<Secret> secretOptions) {
        this.secretOptions = secretOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secretOptions() != null) {
            secretOptions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("logDriver", this.logDriver);
        jsonWriter.writeUntypedField("options", this.options);
        jsonWriter.writeArrayField("secretOptions", this.secretOptions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogConfiguration.
     */
    public static LogConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogConfiguration deserializedLogConfiguration = new LogConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logDriver".equals(fieldName)) {
                    deserializedLogConfiguration.logDriver = reader.getString();
                } else if ("options".equals(fieldName)) {
                    deserializedLogConfiguration.options = reader.readUntyped();
                } else if ("secretOptions".equals(fieldName)) {
                    List<Secret> secretOptions = reader.readArray(reader1 -> Secret.fromJson(reader1));
                    deserializedLogConfiguration.secretOptions = secretOptions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogConfiguration;
        });
    }
}
