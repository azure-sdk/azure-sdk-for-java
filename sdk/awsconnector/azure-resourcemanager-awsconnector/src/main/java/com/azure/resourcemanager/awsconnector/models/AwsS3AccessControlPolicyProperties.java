// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsS3AccessControlPolicy.
 */
@Fluent
public final class AwsS3AccessControlPolicyProperties implements JsonSerializable<AwsS3AccessControlPolicyProperties> {
    /*
     * <p>A list of grants.</p>
     */
    private List<Grant> grants;

    /*
     * <p>Container for the bucket owner's display name and ID.</p>
     */
    private Owner owner;

    /**
     * Creates an instance of AwsS3AccessControlPolicyProperties class.
     */
    public AwsS3AccessControlPolicyProperties() {
    }

    /**
     * Get the grants property: &lt;p&gt;A list of grants.&lt;/p&gt;.
     * 
     * @return the grants value.
     */
    public List<Grant> grants() {
        return this.grants;
    }

    /**
     * Set the grants property: &lt;p&gt;A list of grants.&lt;/p&gt;.
     * 
     * @param grants the grants value to set.
     * @return the AwsS3AccessControlPolicyProperties object itself.
     */
    public AwsS3AccessControlPolicyProperties withGrants(List<Grant> grants) {
        this.grants = grants;
        return this;
    }

    /**
     * Get the owner property: &lt;p&gt;Container for the bucket owner's display name and ID.&lt;/p&gt;.
     * 
     * @return the owner value.
     */
    public Owner owner() {
        return this.owner;
    }

    /**
     * Set the owner property: &lt;p&gt;Container for the bucket owner's display name and ID.&lt;/p&gt;.
     * 
     * @param owner the owner value to set.
     * @return the AwsS3AccessControlPolicyProperties object itself.
     */
    public AwsS3AccessControlPolicyProperties withOwner(Owner owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (grants() != null) {
            grants().forEach(e -> e.validate());
        }
        if (owner() != null) {
            owner().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("grants", this.grants, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("owner", this.owner);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsS3AccessControlPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsS3AccessControlPolicyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsS3AccessControlPolicyProperties.
     */
    public static AwsS3AccessControlPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsS3AccessControlPolicyProperties deserializedAwsS3AccessControlPolicyProperties
                = new AwsS3AccessControlPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("grants".equals(fieldName)) {
                    List<Grant> grants = reader.readArray(reader1 -> Grant.fromJson(reader1));
                    deserializedAwsS3AccessControlPolicyProperties.grants = grants;
                } else if ("owner".equals(fieldName)) {
                    deserializedAwsS3AccessControlPolicyProperties.owner = Owner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsS3AccessControlPolicyProperties;
        });
    }
}
