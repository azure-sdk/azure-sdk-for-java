// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of InstancesDistribution.
 */
@Fluent
public final class InstancesDistribution implements JsonSerializable<InstancesDistribution> {
    /*
     * The allocation strategy to apply to your On-Demand Instances when they are launched. Possible instance types are
     * determined by the launch template overrides that you specify. The following lists the valid values: +
     * lowest-price Uses price to determine which instance types are the highest priority, launching the lowest priced
     * instance types within an Availability Zone first. This is the default value for Auto Scaling groups that specify
     * InstanceRequirements. + prioritized You set the order of instance types for the launch template overrides from
     * highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling launches your highest
     * priority instance types first. If all your On-Demand capacity cannot be fulfilled using your highest priority
     * instance type, then Amazon EC2 Auto Scaling launches the remaining capacity using the second priority instance
     * type, and so on. This is the default value for Auto Scaling groups that don't specify InstanceRequirements and
     * cannot be used for groups that do.
     */
    private String onDemandAllocationStrategy;

    /*
     * The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base
     * portion is launched first as your group scales. This number has the same unit of measurement as the group's
     * desired capacity. If you change the default unit of measurement (number of instances) by specifying weighted
     * capacity values in your launch template overrides list, or by changing the default desired capacity type setting
     * of the group, you must specify this number using the same unit of measurement. Default: 0 An update to this
     * setting means a gradual replacement of instances to adjust the current On-Demand Instance levels. When replacing
     * instances, Amazon EC2 Auto Scaling launches new instances before terminating the previous ones.
     */
    private Integer onDemandBaseCapacity;

    /*
     * Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond
     * ``OnDemandBaseCapacity``. Expressed as a number (for example, 20 specifies 20% On-Demand Instances, 80% Spot
     * Instances). If set to 100, only On-Demand Instances are used. Default: 100 An update to this setting means a
     * gradual replacement of instances to adjust the current On-Demand and Spot Instance levels for your additional
     * capacity higher than the base capacity. When replacing instances, Amazon EC2 Auto Scaling launches new instances
     * before terminating the previous ones.
     */
    private Integer onDemandPercentageAboveBaseCapacity;

    /*
     * The allocation strategy to apply to your Spot Instances when they are launched. Possible instance types are
     * determined by the launch template overrides that you specify. The following lists the valid values: +
     * capacity-optimized Requests Spot Instances using pools that are optimally chosen based on the available Spot
     * capacity. This strategy has the lowest risk of interruption. To give certain instance types a higher chance of
     * launching first, use capacity-optimized-prioritized. + capacity-optimized-prioritized You set the order of
     * instance types for the launch template overrides from highest to lowest priority (from first to last in the
     * list). Amazon EC2 Auto Scaling honors the instance type priorities on a best effort basis but optimizes for
     * capacity first. Note that if the On-Demand allocation strategy is set to prioritized, the same priority is
     * applied when fulfilling On-Demand capacity. This is not a valid value for Auto Scaling groups that specify
     * InstanceRequirements. + lowest-price Requests Spot Instances using the lowest priced pools within an Availability
     * Zone, across the number of Spot pools that you specify for the SpotInstancePools property. To ensure that your
     * desired capacity is met, you might receive Spot Instances from several pools. This is the default value, but it
     * might lead to high interruption rates because this strategy only considers instance price and not available
     * capacity. + price-capacity-optimized (recommended) The price and capacity optimized allocation strategy looks at
     * both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have
     * the lowest possible price.
     */
    private String spotAllocationStrategy;

    /*
     * The number of Spot Instance pools across which to allocate your Spot Instances. The Spot pools are determined
     * from the different instance types in the overrides. Valid only when the ``SpotAllocationStrategy`` is
     * ``lowest-price``. Value must be in the range of 1â€“20. Default: 2
     */
    private Integer spotInstancePools;

    /*
     * The maximum price per unit hour that you are willing to pay for a Spot Instance. If your maximum price is lower
     * than the Spot price for the instance types that you selected, your Spot Instances are not launched. We do not
     * recommend specifying a maximum price because it can lead to increased interruptions. When Spot Instances launch,
     * you pay the current Spot price. To remove a maximum price that you previously set, include the property but
     * specify an empty string ('') for the value. If you specify a maximum price, your instances will be interrupted
     * more frequently than if you do not specify one. Valid Range: Minimum value of 0.001
     */
    private String spotMaxPrice;

    /**
     * Creates an instance of InstancesDistribution class.
     */
    public InstancesDistribution() {
    }

    /**
     * Get the onDemandAllocationStrategy property: The allocation strategy to apply to your On-Demand Instances when
     * they are launched. Possible instance types are determined by the launch template overrides that you specify. The
     * following lists the valid values: + lowest-price Uses price to determine which instance types are the highest
     * priority, launching the lowest priced instance types within an Availability Zone first. This is the default value
     * for Auto Scaling groups that specify InstanceRequirements. + prioritized You set the order of instance types for
     * the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto
     * Scaling launches your highest priority instance types first. If all your On-Demand capacity cannot be fulfilled
     * using your highest priority instance type, then Amazon EC2 Auto Scaling launches the remaining capacity using the
     * second priority instance type, and so on. This is the default value for Auto Scaling groups that don't specify
     * InstanceRequirements and cannot be used for groups that do.
     * 
     * @return the onDemandAllocationStrategy value.
     */
    public String onDemandAllocationStrategy() {
        return this.onDemandAllocationStrategy;
    }

    /**
     * Set the onDemandAllocationStrategy property: The allocation strategy to apply to your On-Demand Instances when
     * they are launched. Possible instance types are determined by the launch template overrides that you specify. The
     * following lists the valid values: + lowest-price Uses price to determine which instance types are the highest
     * priority, launching the lowest priced instance types within an Availability Zone first. This is the default value
     * for Auto Scaling groups that specify InstanceRequirements. + prioritized You set the order of instance types for
     * the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto
     * Scaling launches your highest priority instance types first. If all your On-Demand capacity cannot be fulfilled
     * using your highest priority instance type, then Amazon EC2 Auto Scaling launches the remaining capacity using the
     * second priority instance type, and so on. This is the default value for Auto Scaling groups that don't specify
     * InstanceRequirements and cannot be used for groups that do.
     * 
     * @param onDemandAllocationStrategy the onDemandAllocationStrategy value to set.
     * @return the InstancesDistribution object itself.
     */
    public InstancesDistribution withOnDemandAllocationStrategy(String onDemandAllocationStrategy) {
        this.onDemandAllocationStrategy = onDemandAllocationStrategy;
        return this;
    }

    /**
     * Get the onDemandBaseCapacity property: The minimum amount of the Auto Scaling group's capacity that must be
     * fulfilled by On-Demand Instances. This base portion is launched first as your group scales. This number has the
     * same unit of measurement as the group's desired capacity. If you change the default unit of measurement (number
     * of instances) by specifying weighted capacity values in your launch template overrides list, or by changing the
     * default desired capacity type setting of the group, you must specify this number using the same unit of
     * measurement. Default: 0 An update to this setting means a gradual replacement of instances to adjust the current
     * On-Demand Instance levels. When replacing instances, Amazon EC2 Auto Scaling launches new instances before
     * terminating the previous ones.
     * 
     * @return the onDemandBaseCapacity value.
     */
    public Integer onDemandBaseCapacity() {
        return this.onDemandBaseCapacity;
    }

    /**
     * Set the onDemandBaseCapacity property: The minimum amount of the Auto Scaling group's capacity that must be
     * fulfilled by On-Demand Instances. This base portion is launched first as your group scales. This number has the
     * same unit of measurement as the group's desired capacity. If you change the default unit of measurement (number
     * of instances) by specifying weighted capacity values in your launch template overrides list, or by changing the
     * default desired capacity type setting of the group, you must specify this number using the same unit of
     * measurement. Default: 0 An update to this setting means a gradual replacement of instances to adjust the current
     * On-Demand Instance levels. When replacing instances, Amazon EC2 Auto Scaling launches new instances before
     * terminating the previous ones.
     * 
     * @param onDemandBaseCapacity the onDemandBaseCapacity value to set.
     * @return the InstancesDistribution object itself.
     */
    public InstancesDistribution withOnDemandBaseCapacity(Integer onDemandBaseCapacity) {
        this.onDemandBaseCapacity = onDemandBaseCapacity;
        return this;
    }

    /**
     * Get the onDemandPercentageAboveBaseCapacity property: Controls the percentages of On-Demand Instances and Spot
     * Instances for your additional capacity beyond ``OnDemandBaseCapacity``. Expressed as a number (for example, 20
     * specifies 20% On-Demand Instances, 80% Spot Instances). If set to 100, only On-Demand Instances are used.
     * Default: 100 An update to this setting means a gradual replacement of instances to adjust the current On-Demand
     * and Spot Instance levels for your additional capacity higher than the base capacity. When replacing instances,
     * Amazon EC2 Auto Scaling launches new instances before terminating the previous ones.
     * 
     * @return the onDemandPercentageAboveBaseCapacity value.
     */
    public Integer onDemandPercentageAboveBaseCapacity() {
        return this.onDemandPercentageAboveBaseCapacity;
    }

    /**
     * Set the onDemandPercentageAboveBaseCapacity property: Controls the percentages of On-Demand Instances and Spot
     * Instances for your additional capacity beyond ``OnDemandBaseCapacity``. Expressed as a number (for example, 20
     * specifies 20% On-Demand Instances, 80% Spot Instances). If set to 100, only On-Demand Instances are used.
     * Default: 100 An update to this setting means a gradual replacement of instances to adjust the current On-Demand
     * and Spot Instance levels for your additional capacity higher than the base capacity. When replacing instances,
     * Amazon EC2 Auto Scaling launches new instances before terminating the previous ones.
     * 
     * @param onDemandPercentageAboveBaseCapacity the onDemandPercentageAboveBaseCapacity value to set.
     * @return the InstancesDistribution object itself.
     */
    public InstancesDistribution withOnDemandPercentageAboveBaseCapacity(Integer onDemandPercentageAboveBaseCapacity) {
        this.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity;
        return this;
    }

    /**
     * Get the spotAllocationStrategy property: The allocation strategy to apply to your Spot Instances when they are
     * launched. Possible instance types are determined by the launch template overrides that you specify. The following
     * lists the valid values: + capacity-optimized Requests Spot Instances using pools that are optimally chosen based
     * on the available Spot capacity. This strategy has the lowest risk of interruption. To give certain instance types
     * a higher chance of launching first, use capacity-optimized-prioritized. + capacity-optimized-prioritized You set
     * the order of instance types for the launch template overrides from highest to lowest priority (from first to last
     * in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best effort basis but optimizes
     * for capacity first. Note that if the On-Demand allocation strategy is set to prioritized, the same priority is
     * applied when fulfilling On-Demand capacity. This is not a valid value for Auto Scaling groups that specify
     * InstanceRequirements. + lowest-price Requests Spot Instances using the lowest priced pools within an Availability
     * Zone, across the number of Spot pools that you specify for the SpotInstancePools property. To ensure that your
     * desired capacity is met, you might receive Spot Instances from several pools. This is the default value, but it
     * might lead to high interruption rates because this strategy only considers instance price and not available
     * capacity. + price-capacity-optimized (recommended) The price and capacity optimized allocation strategy looks at
     * both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have
     * the lowest possible price.
     * 
     * @return the spotAllocationStrategy value.
     */
    public String spotAllocationStrategy() {
        return this.spotAllocationStrategy;
    }

    /**
     * Set the spotAllocationStrategy property: The allocation strategy to apply to your Spot Instances when they are
     * launched. Possible instance types are determined by the launch template overrides that you specify. The following
     * lists the valid values: + capacity-optimized Requests Spot Instances using pools that are optimally chosen based
     * on the available Spot capacity. This strategy has the lowest risk of interruption. To give certain instance types
     * a higher chance of launching first, use capacity-optimized-prioritized. + capacity-optimized-prioritized You set
     * the order of instance types for the launch template overrides from highest to lowest priority (from first to last
     * in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best effort basis but optimizes
     * for capacity first. Note that if the On-Demand allocation strategy is set to prioritized, the same priority is
     * applied when fulfilling On-Demand capacity. This is not a valid value for Auto Scaling groups that specify
     * InstanceRequirements. + lowest-price Requests Spot Instances using the lowest priced pools within an Availability
     * Zone, across the number of Spot pools that you specify for the SpotInstancePools property. To ensure that your
     * desired capacity is met, you might receive Spot Instances from several pools. This is the default value, but it
     * might lead to high interruption rates because this strategy only considers instance price and not available
     * capacity. + price-capacity-optimized (recommended) The price and capacity optimized allocation strategy looks at
     * both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have
     * the lowest possible price.
     * 
     * @param spotAllocationStrategy the spotAllocationStrategy value to set.
     * @return the InstancesDistribution object itself.
     */
    public InstancesDistribution withSpotAllocationStrategy(String spotAllocationStrategy) {
        this.spotAllocationStrategy = spotAllocationStrategy;
        return this;
    }

    /**
     * Get the spotInstancePools property: The number of Spot Instance pools across which to allocate your Spot
     * Instances. The Spot pools are determined from the different instance types in the overrides. Valid only when the
     * ``SpotAllocationStrategy`` is ``lowest-price``. Value must be in the range of 1â€“20. Default: 2.
     * 
     * @return the spotInstancePools value.
     */
    public Integer spotInstancePools() {
        return this.spotInstancePools;
    }

    /**
     * Set the spotInstancePools property: The number of Spot Instance pools across which to allocate your Spot
     * Instances. The Spot pools are determined from the different instance types in the overrides. Valid only when the
     * ``SpotAllocationStrategy`` is ``lowest-price``. Value must be in the range of 1â€“20. Default: 2.
     * 
     * @param spotInstancePools the spotInstancePools value to set.
     * @return the InstancesDistribution object itself.
     */
    public InstancesDistribution withSpotInstancePools(Integer spotInstancePools) {
        this.spotInstancePools = spotInstancePools;
        return this;
    }

    /**
     * Get the spotMaxPrice property: The maximum price per unit hour that you are willing to pay for a Spot Instance.
     * If your maximum price is lower than the Spot price for the instance types that you selected, your Spot Instances
     * are not launched. We do not recommend specifying a maximum price because it can lead to increased interruptions.
     * When Spot Instances launch, you pay the current Spot price. To remove a maximum price that you previously set,
     * include the property but specify an empty string ('') for the value. If you specify a maximum price, your
     * instances will be interrupted more frequently than if you do not specify one. Valid Range: Minimum value of
     * 0.001.
     * 
     * @return the spotMaxPrice value.
     */
    public String spotMaxPrice() {
        return this.spotMaxPrice;
    }

    /**
     * Set the spotMaxPrice property: The maximum price per unit hour that you are willing to pay for a Spot Instance.
     * If your maximum price is lower than the Spot price for the instance types that you selected, your Spot Instances
     * are not launched. We do not recommend specifying a maximum price because it can lead to increased interruptions.
     * When Spot Instances launch, you pay the current Spot price. To remove a maximum price that you previously set,
     * include the property but specify an empty string ('') for the value. If you specify a maximum price, your
     * instances will be interrupted more frequently than if you do not specify one. Valid Range: Minimum value of
     * 0.001.
     * 
     * @param spotMaxPrice the spotMaxPrice value to set.
     * @return the InstancesDistribution object itself.
     */
    public InstancesDistribution withSpotMaxPrice(String spotMaxPrice) {
        this.spotMaxPrice = spotMaxPrice;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("onDemandAllocationStrategy", this.onDemandAllocationStrategy);
        jsonWriter.writeNumberField("onDemandBaseCapacity", this.onDemandBaseCapacity);
        jsonWriter.writeNumberField("onDemandPercentageAboveBaseCapacity", this.onDemandPercentageAboveBaseCapacity);
        jsonWriter.writeStringField("spotAllocationStrategy", this.spotAllocationStrategy);
        jsonWriter.writeNumberField("spotInstancePools", this.spotInstancePools);
        jsonWriter.writeStringField("spotMaxPrice", this.spotMaxPrice);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstancesDistribution from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstancesDistribution if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstancesDistribution.
     */
    public static InstancesDistribution fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstancesDistribution deserializedInstancesDistribution = new InstancesDistribution();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("onDemandAllocationStrategy".equals(fieldName)) {
                    deserializedInstancesDistribution.onDemandAllocationStrategy = reader.getString();
                } else if ("onDemandBaseCapacity".equals(fieldName)) {
                    deserializedInstancesDistribution.onDemandBaseCapacity = reader.getNullable(JsonReader::getInt);
                } else if ("onDemandPercentageAboveBaseCapacity".equals(fieldName)) {
                    deserializedInstancesDistribution.onDemandPercentageAboveBaseCapacity
                        = reader.getNullable(JsonReader::getInt);
                } else if ("spotAllocationStrategy".equals(fieldName)) {
                    deserializedInstancesDistribution.spotAllocationStrategy = reader.getString();
                } else if ("spotInstancePools".equals(fieldName)) {
                    deserializedInstancesDistribution.spotInstancePools = reader.getNullable(JsonReader::getInt);
                } else if ("spotMaxPrice".equals(fieldName)) {
                    deserializedInstancesDistribution.spotMaxPrice = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstancesDistribution;
        });
    }
}
