// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of MetricTransformation.
 */
@Fluent
public final class MetricTransformation implements JsonSerializable<MetricTransformation> {
    /*
     * (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
     */
    private Integer defaultValue;

    /*
     * The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
     * Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not
     * specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found
     * for a dimension is treated as a separate metric and accrues charges as a separate custom metric. CloudWatch Logs
     * disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a
     * certain amount of time. This helps to prevent accidental high charges. You can also set up a billing alarm to
     * alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to
     * Monitor Your Estimated
     * Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch
     * .html).
     */
    private List<DimensionAutoGenerated> dimensions;

    /*
     * The name of the CloudWatch metric.
     */
    private String metricName;

    /*
     * A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are
     * similar. For more information, see
     * [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
     */
    private String metricNamespace;

    /*
     * The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a
     * particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes
     * transferred, reference the value that is in the log event by using $. followed by the name of the field that you
     * specified in the filter pattern, such as ``$.size``.
     */
    private String metricValue;

    /*
     * The unit to assign to the metric. If you omit this, the unit is set as ``None``.
     */
    private MetricTransformationUnit unit;

    /**
     * Creates an instance of MetricTransformation class.
     */
    public MetricTransformation() {
    }

    /**
     * Get the defaultValue property: (Optional) The value to emit when a filter pattern does not match a log event.
     * This value can be null.
     * 
     * @return the defaultValue value.
     */
    public Integer defaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: (Optional) The value to emit when a filter pattern does not match a log event.
     * This value can be null.
     * 
     * @param defaultValue the defaultValue value to set.
     * @return the MetricTransformation object itself.
     */
    public MetricTransformation withDefaultValue(Integer defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the dimensions property: The fields to use as dimensions for the metric. One metric filter can include as
     * many as three dimensions. Metrics extracted from log events are charged as custom metrics. To prevent unexpected
     * high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each
     * different value found for a dimension is treated as a separate metric and accrues charges as a separate custom
     * metric. CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your
     * specified dimensions within a certain amount of time. This helps to prevent accidental high charges. You can also
     * set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating
     * a Billing Alarm to Monitor Your Estimated
     * Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
     * 
     * @return the dimensions value.
     */
    public List<DimensionAutoGenerated> dimensions() {
        return this.dimensions;
    }

    /**
     * Set the dimensions property: The fields to use as dimensions for the metric. One metric filter can include as
     * many as three dimensions. Metrics extracted from log events are charged as custom metrics. To prevent unexpected
     * high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each
     * different value found for a dimension is treated as a separate metric and accrues charges as a separate custom
     * metric. CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your
     * specified dimensions within a certain amount of time. This helps to prevent accidental high charges. You can also
     * set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating
     * a Billing Alarm to Monitor Your Estimated
     * Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
     * 
     * @param dimensions the dimensions value to set.
     * @return the MetricTransformation object itself.
     */
    public MetricTransformation withDimensions(List<DimensionAutoGenerated> dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    /**
     * Get the metricName property: The name of the CloudWatch metric.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: The name of the CloudWatch metric.
     * 
     * @param metricName the metricName value to set.
     * @return the MetricTransformation object itself.
     */
    public MetricTransformation withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the metricNamespace property: A custom namespace to contain your metric in CloudWatch. Use namespaces to
     * group together metrics that are similar. For more information, see
     * [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
     * 
     * @return the metricNamespace value.
     */
    public String metricNamespace() {
        return this.metricNamespace;
    }

    /**
     * Set the metricNamespace property: A custom namespace to contain your metric in CloudWatch. Use namespaces to
     * group together metrics that are similar. For more information, see
     * [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
     * 
     * @param metricNamespace the metricNamespace value to set.
     * @return the MetricTransformation object itself.
     */
    public MetricTransformation withMetricNamespace(String metricNamespace) {
        this.metricNamespace = metricNamespace;
        return this;
    }

    /**
     * Get the metricValue property: The value that is published to the CloudWatch metric. For example, if you're
     * counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting
     * the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of
     * the field that you specified in the filter pattern, such as ``$.size``.
     * 
     * @return the metricValue value.
     */
    public String metricValue() {
        return this.metricValue;
    }

    /**
     * Set the metricValue property: The value that is published to the CloudWatch metric. For example, if you're
     * counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting
     * the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of
     * the field that you specified in the filter pattern, such as ``$.size``.
     * 
     * @param metricValue the metricValue value to set.
     * @return the MetricTransformation object itself.
     */
    public MetricTransformation withMetricValue(String metricValue) {
        this.metricValue = metricValue;
        return this;
    }

    /**
     * Get the unit property: The unit to assign to the metric. If you omit this, the unit is set as ``None``.
     * 
     * @return the unit value.
     */
    public MetricTransformationUnit unit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit to assign to the metric. If you omit this, the unit is set as ``None``.
     * 
     * @param unit the unit value to set.
     * @return the MetricTransformation object itself.
     */
    public MetricTransformation withUnit(MetricTransformationUnit unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dimensions() != null) {
            dimensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("defaultValue", this.defaultValue);
        jsonWriter.writeArrayField("dimensions", this.dimensions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeStringField("metricNamespace", this.metricNamespace);
        jsonWriter.writeStringField("metricValue", this.metricValue);
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricTransformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricTransformation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricTransformation.
     */
    public static MetricTransformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricTransformation deserializedMetricTransformation = new MetricTransformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultValue".equals(fieldName)) {
                    deserializedMetricTransformation.defaultValue = reader.getNullable(JsonReader::getInt);
                } else if ("dimensions".equals(fieldName)) {
                    List<DimensionAutoGenerated> dimensions
                        = reader.readArray(reader1 -> DimensionAutoGenerated.fromJson(reader1));
                    deserializedMetricTransformation.dimensions = dimensions;
                } else if ("metricName".equals(fieldName)) {
                    deserializedMetricTransformation.metricName = reader.getString();
                } else if ("metricNamespace".equals(fieldName)) {
                    deserializedMetricTransformation.metricNamespace = reader.getString();
                } else if ("metricValue".equals(fieldName)) {
                    deserializedMetricTransformation.metricValue = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedMetricTransformation.unit = MetricTransformationUnit.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricTransformation;
        });
    }
}
