// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of ProjectSource.
 */
@Fluent
public final class ProjectSource implements JsonSerializable<ProjectSource> {
    /*
     * <p>Information about the authorization settings for CodeBuild to access the source code to be built.</p> <p>This
     * information is for the CodeBuild console's use only. Your code should not get or set this information
     * directly.</p>
     */
    private SourceAuth auth;

    /*
     * <p>Contains information that defines how the build project reports the build status to the source provider. This
     * option is only used when the source provider is <code>GITHUB</code>, <code>GITHUB_ENTERPRISE</code>, or
     * <code>BITBUCKET</code>.</p>
     */
    private BuildStatusConfig buildStatusConfig;

    /*
     * <p>The buildspec file declaration to use for the builds in this build project.</p> <p> If this value is set, it
     * can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of
     * the built-in <code>CODEBUILD_SRC_DIR</code> environment variable, or the path to an S3 bucket. The bucket must be
     * in the same Amazon Web Services Region as the build project. Specify the buildspec file using its ARN (for
     * example, <code>arn:aws:s3:::my-codebuild-sample2/buildspec.yml</code>). If this value is not provided or is set
     * to an empty string, the source code must contain a buildspec file in its root directory. For more information,
     * see <a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage'>
     * Buildspec File Name and Storage Location</a>. </p>
     */
    private String buildspec;

    /*
     * <p>Information about the Git clone depth for the build project.</p>
     */
    private Integer gitCloneDepth;

    /*
     * <p> Information about the Git submodules configuration for the build project. </p>
     */
    private GitSubmodulesConfig gitSubmodulesConfig;

    /*
     * <p>Enable this flag to ignore SSL warnings while connecting to the project source code.</p>
     */
    private Boolean insecureSsl;

    /*
     * <p>Information about the location of the source code to be built. Valid values include:</p> <ul> <li> <p>For
     * source code settings that are specified in the source action of a pipeline in CodePipeline, <code>location</code>
     * should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the
     * settings in a pipeline's source action instead of this value.</p> </li> <li> <p>For source code in an CodeCommit
     * repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for
     * example, <code>https://git-codecommit.&lt;region-ID&gt;.amazonaws.com/v1/repos/&lt;repo-name&gt;</code>).</p>
     * </li> <li> <p>For source code in an Amazon S3 input bucket, one of the following. </p> <ul> <li> <p>The path to
     * the ZIP file that contains the source code (for example,
     * <code>&lt;bucket-name&gt;/&lt;path&gt;/&lt;object-name&gt;.zip</code>). </p> </li> <li> <p>The path to the folder
     * that contains the source code (for example,
     * <code>&lt;bucket-name&gt;/&lt;path-to-source-code&gt;/&lt;folder&gt;/</code>). </p> </li> </ul> </li> <li> <p>For
     * source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the
     * buildspec file. You must connect your Amazon Web Services account to your GitHub account. Use the CodeBuild
     * console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the
     * GitHub <b>Authorize application</b> page, for <b>Organization access</b>, choose <b>Request access</b> next to
     * each repository you want to allow CodeBuild to have access to, and then choose <b>Authorize application</b>.
     * (After you have connected to your GitHub account, you do not need to finish creating the build project. You can
     * leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the <code>source</code> object,
     * set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p> </li> <li> <p>For source
     * code in an GitLab or self-managed GitLab repository, the HTTPS clone URL to the repository that contains the
     * source and the buildspec file. You must connect your Amazon Web Services account to your GitLab account. Use the
     * CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with
     * GitLab, on the Connections <b>Authorize application</b> page, choose <b>Authorize</b>. Then on the
     * CodeConnections <b>Create GitLab connection</b> page, choose <b>Connect to GitLab</b>. (After you have connected
     * to your GitLab account, you do not need to finish creating the build project. You can leave the CodeBuild
     * console.) To instruct CodeBuild to override the default connection and use this connection instead, set the
     * <code>auth</code> object's <code>type</code> value to <code>CODECONNECTIONS</code> in the <code>source</code>
     * object.</p> </li> <li> <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository that
     * contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket
     * account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or
     * reconnect) with Bitbucket, on the Bitbucket <b>Confirm access to your account</b> page, choose <b>Grant
     * access</b>. (After you have connected to your Bitbucket account, you do not need to finish creating the build
     * project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the
     * <code>source</code> object, set the <code>auth</code> object's <code>type</code> value to <code>OAUTH</code>.</p>
     * </li> </ul> <p> If you specify <code>CODEPIPELINE</code> for the <code>Type</code> property, don't specify this
     * property. For all of the other types, you must specify <code>Location</code>. </p>
     */
    private String location;

    /*
     * <p> Set to true to report the status of a build's start and finish to your source provider. This option is valid
     * only when your source provider is GitHub, GitHub Enterprise, GitLab, GitLab Self Managed, or Bitbucket. If this
     * is set and you use a different source provider, an <code>invalidInputException</code> is thrown. </p> <p>To be
     * able to report the build status to the source provider, the user associated with the source provider must have
     * write access to the repo. If the user does not have write access, the build status cannot be updated. For more
     * information, see <a href='https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html'>Source
     * provider access</a> in the <i>CodeBuild User Guide</i>.</p> <p>The status of a build triggered by a webhook is
     * always reported to your source provider. </p> <p>If your project's builds are triggered by a webhook, you must
     * push a new commit to the repo for a change to this property to take effect.</p>
     */
    private Boolean reportBuildStatus;

    /*
     * <p>An identifier for this project source. The identifier can only contain alphanumeric characters and
     * underscores, and must be less than 128 characters in length. </p>
     */
    private String sourceIdentifier;

    /*
     * <p>The type of repository that contains the source code to be built. Valid values include:</p> <ul> <li> <p>
     * <code>BITBUCKET</code>: The source code is in a Bitbucket repository.</p> </li> <li> <p> <code>CODECOMMIT</code>:
     * The source code is in an CodeCommit repository.</p> </li> <li> <p> <code>CODEPIPELINE</code>: The source code
     * settings are specified in the source action of a pipeline in CodePipeline.</p> </li> <li> <p>
     * <code>GITHUB</code>: The source code is in a GitHub repository.</p> </li> <li> <p>
     * <code>GITHUB_ENTERPRISE</code>: The source code is in a GitHub Enterprise Server repository.</p> </li> <li> <p>
     * <code>GITLAB</code>: The source code is in a GitLab repository.</p> </li> <li> <p>
     * <code>GITLAB_SELF_MANAGED</code>: The source code is in a self-managed GitLab repository.</p> </li> <li> <p>
     * <code>NO_SOURCE</code>: The project does not have input source code.</p> </li> <li> <p> <code>S3</code>: The
     * source code is in an Amazon S3 bucket.</p> </li> </ul>
     */
    private SourceTypeEnumValue type;

    /**
     * Creates an instance of ProjectSource class.
     */
    public ProjectSource() {
    }

    /**
     * Get the auth property: &lt;p&gt;Information about the authorization settings for CodeBuild to access the source
     * code to be built.&lt;/p&gt; &lt;p&gt;This information is for the CodeBuild console's use only. Your code should
     * not get or set this information directly.&lt;/p&gt;.
     * 
     * @return the auth value.
     */
    public SourceAuth auth() {
        return this.auth;
    }

    /**
     * Set the auth property: &lt;p&gt;Information about the authorization settings for CodeBuild to access the source
     * code to be built.&lt;/p&gt; &lt;p&gt;This information is for the CodeBuild console's use only. Your code should
     * not get or set this information directly.&lt;/p&gt;.
     * 
     * @param auth the auth value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withAuth(SourceAuth auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Get the buildStatusConfig property: &lt;p&gt;Contains information that defines how the build project reports the
     * build status to the source provider. This option is only used when the source provider is
     * &lt;code&gt;GITHUB&lt;/code&gt;, &lt;code&gt;GITHUB_ENTERPRISE&lt;/code&gt;, or
     * &lt;code&gt;BITBUCKET&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @return the buildStatusConfig value.
     */
    public BuildStatusConfig buildStatusConfig() {
        return this.buildStatusConfig;
    }

    /**
     * Set the buildStatusConfig property: &lt;p&gt;Contains information that defines how the build project reports the
     * build status to the source provider. This option is only used when the source provider is
     * &lt;code&gt;GITHUB&lt;/code&gt;, &lt;code&gt;GITHUB_ENTERPRISE&lt;/code&gt;, or
     * &lt;code&gt;BITBUCKET&lt;/code&gt;.&lt;/p&gt;.
     * 
     * @param buildStatusConfig the buildStatusConfig value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withBuildStatusConfig(BuildStatusConfig buildStatusConfig) {
        this.buildStatusConfig = buildStatusConfig;
        return this;
    }

    /**
     * Get the buildspec property: &lt;p&gt;The buildspec file declaration to use for the builds in this build
     * project.&lt;/p&gt; &lt;p&gt; If this value is set, it can be either an inline buildspec definition, the path to
     * an alternate buildspec file relative to the value of the built-in &lt;code&gt;CODEBUILD_SRC_DIR&lt;/code&gt;
     * environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as
     * the build project. Specify the buildspec file using its ARN (for example,
     * &lt;code&gt;arn:aws:s3:::my-codebuild-sample2/buildspec.yml&lt;/code&gt;). If this value is not provided or is
     * set to an empty string, the source code must contain a buildspec file in its root directory. For more
     * information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage'&gt;Buildspec
     * File Name and Storage Location&lt;/a&gt;. &lt;/p&gt;.
     * 
     * @return the buildspec value.
     */
    public String buildspec() {
        return this.buildspec;
    }

    /**
     * Set the buildspec property: &lt;p&gt;The buildspec file declaration to use for the builds in this build
     * project.&lt;/p&gt; &lt;p&gt; If this value is set, it can be either an inline buildspec definition, the path to
     * an alternate buildspec file relative to the value of the built-in &lt;code&gt;CODEBUILD_SRC_DIR&lt;/code&gt;
     * environment variable, or the path to an S3 bucket. The bucket must be in the same Amazon Web Services Region as
     * the build project. Specify the buildspec file using its ARN (for example,
     * &lt;code&gt;arn:aws:s3:::my-codebuild-sample2/buildspec.yml&lt;/code&gt;). If this value is not provided or is
     * set to an empty string, the source code must contain a buildspec file in its root directory. For more
     * information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-name-storage'&gt;Buildspec
     * File Name and Storage Location&lt;/a&gt;. &lt;/p&gt;.
     * 
     * @param buildspec the buildspec value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withBuildspec(String buildspec) {
        this.buildspec = buildspec;
        return this;
    }

    /**
     * Get the gitCloneDepth property: &lt;p&gt;Information about the Git clone depth for the build project.&lt;/p&gt;.
     * 
     * @return the gitCloneDepth value.
     */
    public Integer gitCloneDepth() {
        return this.gitCloneDepth;
    }

    /**
     * Set the gitCloneDepth property: &lt;p&gt;Information about the Git clone depth for the build project.&lt;/p&gt;.
     * 
     * @param gitCloneDepth the gitCloneDepth value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withGitCloneDepth(Integer gitCloneDepth) {
        this.gitCloneDepth = gitCloneDepth;
        return this;
    }

    /**
     * Get the gitSubmodulesConfig property: &lt;p&gt; Information about the Git submodules configuration for the build
     * project. &lt;/p&gt;.
     * 
     * @return the gitSubmodulesConfig value.
     */
    public GitSubmodulesConfig gitSubmodulesConfig() {
        return this.gitSubmodulesConfig;
    }

    /**
     * Set the gitSubmodulesConfig property: &lt;p&gt; Information about the Git submodules configuration for the build
     * project. &lt;/p&gt;.
     * 
     * @param gitSubmodulesConfig the gitSubmodulesConfig value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withGitSubmodulesConfig(GitSubmodulesConfig gitSubmodulesConfig) {
        this.gitSubmodulesConfig = gitSubmodulesConfig;
        return this;
    }

    /**
     * Get the insecureSsl property: &lt;p&gt;Enable this flag to ignore SSL warnings while connecting to the project
     * source code.&lt;/p&gt;.
     * 
     * @return the insecureSsl value.
     */
    public Boolean insecureSsl() {
        return this.insecureSsl;
    }

    /**
     * Set the insecureSsl property: &lt;p&gt;Enable this flag to ignore SSL warnings while connecting to the project
     * source code.&lt;/p&gt;.
     * 
     * @param insecureSsl the insecureSsl value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withInsecureSsl(Boolean insecureSsl) {
        this.insecureSsl = insecureSsl;
        return this;
    }

    /**
     * Get the location property: &lt;p&gt;Information about the location of the source code to be built. Valid values
     * include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For source code settings that are specified in the source
     * action of a pipeline in CodePipeline, &lt;code&gt;location&lt;/code&gt; should not be specified. If it is
     * specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action
     * instead of this value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in an CodeCommit repository, the
     * HTTPS clone URL to the repository that contains the source code and the buildspec file (for example,
     * &lt;code&gt;https://git-codecommit.&amp;lt;region-ID&amp;gt;.amazonaws.com/v1/repos/&amp;lt;repo-name&amp;gt;&lt;/code&gt;).&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in an Amazon S3 input bucket, one of the following. &lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt;The path to the ZIP file that contains the source code (for example,
     * &lt;code&gt;&amp;lt;bucket-name&amp;gt;/&amp;lt;path&amp;gt;/&amp;lt;object-name&amp;gt;.zip&lt;/code&gt;).
     * &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The path to the folder that contains the source code (for example,
     * &lt;code&gt;&amp;lt;bucket-name&amp;gt;/&amp;lt;path-to-source-code&amp;gt;/&amp;lt;folder&amp;gt;/&lt;/code&gt;).
     * &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in a GitHub repository, the
     * HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon
     * Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When
     * you use the console to connect (or reconnect) with GitHub, on the GitHub &lt;b&gt;Authorize application&lt;/b&gt;
     * page, for &lt;b&gt;Organization access&lt;/b&gt;, choose &lt;b&gt;Request access&lt;/b&gt; next to each
     * repository you want to allow CodeBuild to have access to, and then choose &lt;b&gt;Authorize
     * application&lt;/b&gt;. (After you have connected to your GitHub account, you do not need to finish creating the
     * build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the
     * &lt;code&gt;source&lt;/code&gt; object, set the &lt;code&gt;auth&lt;/code&gt; object's
     * &lt;code&gt;type&lt;/code&gt; value to &lt;code&gt;OAUTH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;For source code in an GitLab or self-managed GitLab repository, the HTTPS clone URL to the repository
     * that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitLab
     * account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or
     * reconnect) with GitLab, on the Connections &lt;b&gt;Authorize application&lt;/b&gt; page, choose
     * &lt;b&gt;Authorize&lt;/b&gt;. Then on the CodeConnections &lt;b&gt;Create GitLab connection&lt;/b&gt; page,
     * choose &lt;b&gt;Connect to GitLab&lt;/b&gt;. (After you have connected to your GitLab account, you do not need to
     * finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to override the
     * default connection and use this connection instead, set the &lt;code&gt;auth&lt;/code&gt; object's
     * &lt;code&gt;type&lt;/code&gt; value to &lt;code&gt;CODECONNECTIONS&lt;/code&gt; in the
     * &lt;code&gt;source&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in a Bitbucket
     * repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must
     * connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a
     * build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket
     * &lt;b&gt;Confirm access to your account&lt;/b&gt; page, choose &lt;b&gt;Grant access&lt;/b&gt;. (After you have
     * connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the
     * CodeBuild console.) To instruct CodeBuild to use this connection, in the &lt;code&gt;source&lt;/code&gt; object,
     * set the &lt;code&gt;auth&lt;/code&gt; object's &lt;code&gt;type&lt;/code&gt; value to
     * &lt;code&gt;OAUTH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you specify
     * &lt;code&gt;CODEPIPELINE&lt;/code&gt; for the &lt;code&gt;Type&lt;/code&gt; property, don't specify this
     * property. For all of the other types, you must specify &lt;code&gt;Location&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: &lt;p&gt;Information about the location of the source code to be built. Valid values
     * include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For source code settings that are specified in the source
     * action of a pipeline in CodePipeline, &lt;code&gt;location&lt;/code&gt; should not be specified. If it is
     * specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action
     * instead of this value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in an CodeCommit repository, the
     * HTTPS clone URL to the repository that contains the source code and the buildspec file (for example,
     * &lt;code&gt;https://git-codecommit.&amp;lt;region-ID&amp;gt;.amazonaws.com/v1/repos/&amp;lt;repo-name&amp;gt;&lt;/code&gt;).&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in an Amazon S3 input bucket, one of the following. &lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt;The path to the ZIP file that contains the source code (for example,
     * &lt;code&gt;&amp;lt;bucket-name&amp;gt;/&amp;lt;path&amp;gt;/&amp;lt;object-name&amp;gt;.zip&lt;/code&gt;).
     * &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The path to the folder that contains the source code (for example,
     * &lt;code&gt;&amp;lt;bucket-name&amp;gt;/&amp;lt;path-to-source-code&amp;gt;/&amp;lt;folder&amp;gt;/&lt;/code&gt;).
     * &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in a GitHub repository, the
     * HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon
     * Web Services account to your GitHub account. Use the CodeBuild console to start creating a build project. When
     * you use the console to connect (or reconnect) with GitHub, on the GitHub &lt;b&gt;Authorize application&lt;/b&gt;
     * page, for &lt;b&gt;Organization access&lt;/b&gt;, choose &lt;b&gt;Request access&lt;/b&gt; next to each
     * repository you want to allow CodeBuild to have access to, and then choose &lt;b&gt;Authorize
     * application&lt;/b&gt;. (After you have connected to your GitHub account, you do not need to finish creating the
     * build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the
     * &lt;code&gt;source&lt;/code&gt; object, set the &lt;code&gt;auth&lt;/code&gt; object's
     * &lt;code&gt;type&lt;/code&gt; value to &lt;code&gt;OAUTH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt;For source code in an GitLab or self-managed GitLab repository, the HTTPS clone URL to the repository
     * that contains the source and the buildspec file. You must connect your Amazon Web Services account to your GitLab
     * account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or
     * reconnect) with GitLab, on the Connections &lt;b&gt;Authorize application&lt;/b&gt; page, choose
     * &lt;b&gt;Authorize&lt;/b&gt;. Then on the CodeConnections &lt;b&gt;Create GitLab connection&lt;/b&gt; page,
     * choose &lt;b&gt;Connect to GitLab&lt;/b&gt;. (After you have connected to your GitLab account, you do not need to
     * finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to override the
     * default connection and use this connection instead, set the &lt;code&gt;auth&lt;/code&gt; object's
     * &lt;code&gt;type&lt;/code&gt; value to &lt;code&gt;CODECONNECTIONS&lt;/code&gt; in the
     * &lt;code&gt;source&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For source code in a Bitbucket
     * repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must
     * connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a
     * build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket
     * &lt;b&gt;Confirm access to your account&lt;/b&gt; page, choose &lt;b&gt;Grant access&lt;/b&gt;. (After you have
     * connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the
     * CodeBuild console.) To instruct CodeBuild to use this connection, in the &lt;code&gt;source&lt;/code&gt; object,
     * set the &lt;code&gt;auth&lt;/code&gt; object's &lt;code&gt;type&lt;/code&gt; value to
     * &lt;code&gt;OAUTH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; If you specify
     * &lt;code&gt;CODEPIPELINE&lt;/code&gt; for the &lt;code&gt;Type&lt;/code&gt; property, don't specify this
     * property. For all of the other types, you must specify &lt;code&gt;Location&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param location the location value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the reportBuildStatus property: &lt;p&gt; Set to true to report the status of a build's start and finish to
     * your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, GitLab,
     * GitLab Self Managed, or Bitbucket. If this is set and you use a different source provider, an
     * &lt;code&gt;invalidInputException&lt;/code&gt; is thrown. &lt;/p&gt; &lt;p&gt;To be able to report the build
     * status to the source provider, the user associated with the source provider must have write access to the repo.
     * If the user does not have write access, the build status cannot be updated. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html'&gt;Source provider
     * access&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The status of a build
     * triggered by a webhook is always reported to your source provider. &lt;/p&gt; &lt;p&gt;If your project's builds
     * are triggered by a webhook, you must push a new commit to the repo for a change to this property to take
     * effect.&lt;/p&gt;.
     * 
     * @return the reportBuildStatus value.
     */
    public Boolean reportBuildStatus() {
        return this.reportBuildStatus;
    }

    /**
     * Set the reportBuildStatus property: &lt;p&gt; Set to true to report the status of a build's start and finish to
     * your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, GitLab,
     * GitLab Self Managed, or Bitbucket. If this is set and you use a different source provider, an
     * &lt;code&gt;invalidInputException&lt;/code&gt; is thrown. &lt;/p&gt; &lt;p&gt;To be able to report the build
     * status to the source provider, the user associated with the source provider must have write access to the repo.
     * If the user does not have write access, the build status cannot be updated. For more information, see &lt;a
     * href='https://docs.aws.amazon.com/codebuild/latest/userguide/access-tokens.html'&gt;Source provider
     * access&lt;/a&gt; in the &lt;i&gt;CodeBuild User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The status of a build
     * triggered by a webhook is always reported to your source provider. &lt;/p&gt; &lt;p&gt;If your project's builds
     * are triggered by a webhook, you must push a new commit to the repo for a change to this property to take
     * effect.&lt;/p&gt;.
     * 
     * @param reportBuildStatus the reportBuildStatus value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withReportBuildStatus(Boolean reportBuildStatus) {
        this.reportBuildStatus = reportBuildStatus;
        return this;
    }

    /**
     * Get the sourceIdentifier property: &lt;p&gt;An identifier for this project source. The identifier can only
     * contain alphanumeric characters and underscores, and must be less than 128 characters in length. &lt;/p&gt;.
     * 
     * @return the sourceIdentifier value.
     */
    public String sourceIdentifier() {
        return this.sourceIdentifier;
    }

    /**
     * Set the sourceIdentifier property: &lt;p&gt;An identifier for this project source. The identifier can only
     * contain alphanumeric characters and underscores, and must be less than 128 characters in length. &lt;/p&gt;.
     * 
     * @param sourceIdentifier the sourceIdentifier value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withSourceIdentifier(String sourceIdentifier) {
        this.sourceIdentifier = sourceIdentifier;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt;The type of repository that contains the source code to be built. Valid values
     * include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BITBUCKET&lt;/code&gt;: The source code is in a
     * Bitbucket repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CODECOMMIT&lt;/code&gt;: The source
     * code is in an CodeCommit repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;CODEPIPELINE&lt;/code&gt;: The source code settings are specified in the source action of a pipeline
     * in CodePipeline.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GITHUB&lt;/code&gt;: The source code is
     * in a GitHub repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GITHUB_ENTERPRISE&lt;/code&gt;:
     * The source code is in a GitHub Enterprise Server repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;GITLAB&lt;/code&gt;: The source code is in a GitLab repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;GITLAB_SELF_MANAGED&lt;/code&gt;: The source code is in a self-managed GitLab
     * repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NO_SOURCE&lt;/code&gt;: The project does not
     * have input source code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;S3&lt;/code&gt;: The source code
     * is in an Amazon S3 bucket.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the type value.
     */
    public SourceTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt;The type of repository that contains the source code to be built. Valid values
     * include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BITBUCKET&lt;/code&gt;: The source code is in a
     * Bitbucket repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CODECOMMIT&lt;/code&gt;: The source
     * code is in an CodeCommit repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;CODEPIPELINE&lt;/code&gt;: The source code settings are specified in the source action of a pipeline
     * in CodePipeline.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GITHUB&lt;/code&gt;: The source code is
     * in a GitHub repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GITHUB_ENTERPRISE&lt;/code&gt;:
     * The source code is in a GitHub Enterprise Server repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;code&gt;GITLAB&lt;/code&gt;: The source code is in a GitLab repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;GITLAB_SELF_MANAGED&lt;/code&gt;: The source code is in a self-managed GitLab
     * repository.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NO_SOURCE&lt;/code&gt;: The project does not
     * have input source code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;S3&lt;/code&gt;: The source code
     * is in an Amazon S3 bucket.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param type the type value to set.
     * @return the ProjectSource object itself.
     */
    public ProjectSource withType(SourceTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (auth() != null) {
            auth().validate();
        }
        if (buildStatusConfig() != null) {
            buildStatusConfig().validate();
        }
        if (gitSubmodulesConfig() != null) {
            gitSubmodulesConfig().validate();
        }
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("auth", this.auth);
        jsonWriter.writeJsonField("buildStatusConfig", this.buildStatusConfig);
        jsonWriter.writeStringField("buildspec", this.buildspec);
        jsonWriter.writeNumberField("gitCloneDepth", this.gitCloneDepth);
        jsonWriter.writeJsonField("gitSubmodulesConfig", this.gitSubmodulesConfig);
        jsonWriter.writeBooleanField("insecureSsl", this.insecureSsl);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeBooleanField("reportBuildStatus", this.reportBuildStatus);
        jsonWriter.writeStringField("sourceIdentifier", this.sourceIdentifier);
        jsonWriter.writeJsonField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectSource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectSource.
     */
    public static ProjectSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectSource deserializedProjectSource = new ProjectSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("auth".equals(fieldName)) {
                    deserializedProjectSource.auth = SourceAuth.fromJson(reader);
                } else if ("buildStatusConfig".equals(fieldName)) {
                    deserializedProjectSource.buildStatusConfig = BuildStatusConfig.fromJson(reader);
                } else if ("buildspec".equals(fieldName)) {
                    deserializedProjectSource.buildspec = reader.getString();
                } else if ("gitCloneDepth".equals(fieldName)) {
                    deserializedProjectSource.gitCloneDepth = reader.getNullable(JsonReader::getInt);
                } else if ("gitSubmodulesConfig".equals(fieldName)) {
                    deserializedProjectSource.gitSubmodulesConfig = GitSubmodulesConfig.fromJson(reader);
                } else if ("insecureSsl".equals(fieldName)) {
                    deserializedProjectSource.insecureSsl = reader.getNullable(JsonReader::getBoolean);
                } else if ("location".equals(fieldName)) {
                    deserializedProjectSource.location = reader.getString();
                } else if ("reportBuildStatus".equals(fieldName)) {
                    deserializedProjectSource.reportBuildStatus = reader.getNullable(JsonReader::getBoolean);
                } else if ("sourceIdentifier".equals(fieldName)) {
                    deserializedProjectSource.sourceIdentifier = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedProjectSource.type = SourceTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectSource;
        });
    }
}
