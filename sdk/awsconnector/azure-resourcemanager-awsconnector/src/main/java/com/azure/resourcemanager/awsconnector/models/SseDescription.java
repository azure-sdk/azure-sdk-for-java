// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SSEDescription.
 */
@Fluent
public final class SseDescription implements JsonSerializable<SseDescription> {
    /*
     * <p>The current state of server-side encryption:</p> <ul> <li> <p> <code>ENABLING</code> - Server-side encryption
     * is being enabled.</p> </li> <li> <p> <code>ENABLED</code> - Server-side encryption is enabled.</p> </li> <li> <p>
     * <code>DISABLING</code> - Server-side encryption is being disabled.</p> </li> <li> <p> <code>DISABLED</code> -
     * Server-side encryption is disabled.</p> </li> </ul>
     */
    private SseStatusEnumValue status;

    /**
     * Creates an instance of SseDescription class.
     */
    public SseDescription() {
    }

    /**
     * Get the status property: &lt;p&gt;The current state of server-side encryption:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;ENABLING&lt;/code&gt; - Server-side encryption is being enabled.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; - Server-side encryption is enabled.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLING&lt;/code&gt; - Server-side encryption is being disabled.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Server-side encryption is
     * disabled.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @return the status value.
     */
    public SseStatusEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The current state of server-side encryption:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
     * &lt;p&gt; &lt;code&gt;ENABLING&lt;/code&gt; - Server-side encryption is being enabled.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; - Server-side encryption is enabled.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLING&lt;/code&gt; - Server-side encryption is being disabled.&lt;/p&gt;
     * &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Server-side encryption is
     * disabled.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;.
     * 
     * @param status the status value to set.
     * @return the SseDescription object itself.
     */
    public SseDescription withStatus(SseStatusEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SseDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SseDescription if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SseDescription.
     */
    public static SseDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SseDescription deserializedSseDescription = new SseDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedSseDescription.status = SseStatusEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSseDescription;
        });
    }
}
