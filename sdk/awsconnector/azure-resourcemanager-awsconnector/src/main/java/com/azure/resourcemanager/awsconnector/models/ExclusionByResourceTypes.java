// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ExclusionByResourceTypes.
 */
@Fluent
public final class ExclusionByResourceTypes implements JsonSerializable<ExclusionByResourceTypes> {
    /*
     * <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
     */
    private List<ResourceType> resourceTypes;

    /**
     * Creates an instance of ExclusionByResourceTypes class.
     */
    public ExclusionByResourceTypes() {
    }

    /**
     * Get the resourceTypes property: &lt;p&gt;A comma-separated list of resource types to exclude from recording by
     * the configuration recorder.&lt;/p&gt;.
     * 
     * @return the resourceTypes value.
     */
    public List<ResourceType> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: &lt;p&gt;A comma-separated list of resource types to exclude from recording by
     * the configuration recorder.&lt;/p&gt;.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the ExclusionByResourceTypes object itself.
     */
    public ExclusionByResourceTypes withResourceTypes(List<ResourceType> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExclusionByResourceTypes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExclusionByResourceTypes if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExclusionByResourceTypes.
     */
    public static ExclusionByResourceTypes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExclusionByResourceTypes deserializedExclusionByResourceTypes = new ExclusionByResourceTypes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceTypes".equals(fieldName)) {
                    List<ResourceType> resourceTypes
                        = reader.readArray(reader1 -> ResourceType.fromString(reader1.getString()));
                    deserializedExclusionByResourceTypes.resourceTypes = resourceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExclusionByResourceTypes;
        });
    }
}
