// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CustomErrorResponse.
 */
@Fluent
public final class CustomErrorResponse implements JsonSerializable<CustomErrorResponse> {
    /*
     * The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in
     * ``ErrorCode``. When this time period has elapsed, CloudFront queries your origin to see whether the problem that
     * caused the error has been resolved and the requested object is now available. For more information, see
     * [Customizing Error
     * Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the
     * *Amazon CloudFront Developer Guide*.
     */
    private Integer errorCachingMinTtl;

    /*
     * The HTTP status code for which you want to specify a custom error page and/or a caching duration.
     */
    private Integer errorCode;

    /*
     * The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are
     * a variety of reasons that you might want CloudFront to return a status code different from the status code that
     * your origin returned to CloudFront, for example: + Some Internet devices (some firewalls and corporate proxies,
     * for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you
     * substitute ``200``, the response typically won't be intercepted. + If you don't care about distinguishing among
     * different client errors or server errors, you can specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx
     * or 5xx errors. + You might want to return a ``200`` status code (OK) and static website so your customers don't
     * know that your website is down. If you specify a value for ``ResponseCode``, you must also specify a value for
     * ``ResponsePagePath``.
     */
    private Integer responseCode;

    /*
     * The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the
     * HTTP status code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to
     * store your objects and your custom error pages in different locations, your distribution must include a cache
     * behavior for which the following is true: + The value of ``PathPattern`` matches the path to your custom error
     * messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory
     * named ``/4xx-errors``. Your distribution must include a cache behavior for which the path pattern routes requests
     * for your custom error pages to that location, for example, ``/4xx-errors/*``. + The value of ``TargetOriginId``
     * specifies the value of the ``ID`` element for the origin that contains your custom error pages. If you specify a
     * value for ``ResponsePagePath``, you must also specify a value for ``ResponseCode``. We recommend that you store
     * custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server
     * starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin
     * server is unavailable.
     */
    private String responsePagePath;

    /**
     * Creates an instance of CustomErrorResponse class.
     */
    public CustomErrorResponse() {
    }

    /**
     * Get the errorCachingMinTtl property: The minimum amount of time, in seconds, that you want CloudFront to cache
     * the HTTP status code specified in ``ErrorCode``. When this time period has elapsed, CloudFront queries your
     * origin to see whether the problem that caused the error has been resolved and the requested object is now
     * available. For more information, see [Customizing Error
     * Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @return the errorCachingMinTtl value.
     */
    public Integer errorCachingMinTtl() {
        return this.errorCachingMinTtl;
    }

    /**
     * Set the errorCachingMinTtl property: The minimum amount of time, in seconds, that you want CloudFront to cache
     * the HTTP status code specified in ``ErrorCode``. When this time period has elapsed, CloudFront queries your
     * origin to see whether the problem that caused the error has been resolved and the requested object is now
     * available. For more information, see [Customizing Error
     * Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the
     * *Amazon CloudFront Developer Guide*.
     * 
     * @param errorCachingMinTtl the errorCachingMinTtl value to set.
     * @return the CustomErrorResponse object itself.
     */
    public CustomErrorResponse withErrorCachingMinTtl(Integer errorCachingMinTtl) {
        this.errorCachingMinTtl = errorCachingMinTtl;
        return this;
    }

    /**
     * Get the errorCode property: The HTTP status code for which you want to specify a custom error page and/or a
     * caching duration.
     * 
     * @return the errorCode value.
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: The HTTP status code for which you want to specify a custom error page and/or a
     * caching duration.
     * 
     * @param errorCode the errorCode value to set.
     * @return the CustomErrorResponse object itself.
     */
    public CustomErrorResponse withErrorCode(Integer errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the responseCode property: The HTTP status code that you want CloudFront to return to the viewer along with
     * the custom error page. There are a variety of reasons that you might want CloudFront to return a status code
     * different from the status code that your origin returned to CloudFront, for example: + Some Internet devices
     * (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from
     * being returned to the viewer. If you substitute ``200``, the response typically won't be intercepted. + If you
     * don't care about distinguishing among different client errors or server errors, you can specify ``400`` or
     * ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors. + You might want to return a ``200`` status code (OK)
     * and static website so your customers don't know that your website is down. If you specify a value for
     * ``ResponseCode``, you must also specify a value for ``ResponsePagePath``.
     * 
     * @return the responseCode value.
     */
    public Integer responseCode() {
        return this.responseCode;
    }

    /**
     * Set the responseCode property: The HTTP status code that you want CloudFront to return to the viewer along with
     * the custom error page. There are a variety of reasons that you might want CloudFront to return a status code
     * different from the status code that your origin returned to CloudFront, for example: + Some Internet devices
     * (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from
     * being returned to the viewer. If you substitute ``200``, the response typically won't be intercepted. + If you
     * don't care about distinguishing among different client errors or server errors, you can specify ``400`` or
     * ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors. + You might want to return a ``200`` status code (OK)
     * and static website so your customers don't know that your website is down. If you specify a value for
     * ``ResponseCode``, you must also specify a value for ``ResponsePagePath``.
     * 
     * @param responseCode the responseCode value to set.
     * @return the CustomErrorResponse object itself.
     */
    public CustomErrorResponse withResponseCode(Integer responseCode) {
        this.responseCode = responseCode;
        return this;
    }

    /**
     * Get the responsePagePath property: The path to the custom error page that you want CloudFront to return to a
     * viewer when your origin returns the HTTP status code specified by ``ErrorCode``, for example,
     * ``/4xx-errors/403-forbidden.html``. If you want to store your objects and your custom error pages in different
     * locations, your distribution must include a cache behavior for which the following is true: + The value of
     * ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved custom error pages
     * for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must include a
     * cache behavior for which the path pattern routes requests for your custom error pages to that location, for
     * example, ``/4xx-errors/*``. + The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the
     * origin that contains your custom error pages. If you specify a value for ``ResponsePagePath``, you must also
     * specify a value for ``ResponseCode``. We recommend that you store custom error pages in an Amazon S3 bucket. If
     * you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get
     * the files that you want to return to viewers because the origin server is unavailable.
     * 
     * @return the responsePagePath value.
     */
    public String responsePagePath() {
        return this.responsePagePath;
    }

    /**
     * Set the responsePagePath property: The path to the custom error page that you want CloudFront to return to a
     * viewer when your origin returns the HTTP status code specified by ``ErrorCode``, for example,
     * ``/4xx-errors/403-forbidden.html``. If you want to store your objects and your custom error pages in different
     * locations, your distribution must include a cache behavior for which the following is true: + The value of
     * ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved custom error pages
     * for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must include a
     * cache behavior for which the path pattern routes requests for your custom error pages to that location, for
     * example, ``/4xx-errors/*``. + The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the
     * origin that contains your custom error pages. If you specify a value for ``ResponsePagePath``, you must also
     * specify a value for ``ResponseCode``. We recommend that you store custom error pages in an Amazon S3 bucket. If
     * you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get
     * the files that you want to return to viewers because the origin server is unavailable.
     * 
     * @param responsePagePath the responsePagePath value to set.
     * @return the CustomErrorResponse object itself.
     */
    public CustomErrorResponse withResponsePagePath(String responsePagePath) {
        this.responsePagePath = responsePagePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("errorCachingMinTTL", this.errorCachingMinTtl);
        jsonWriter.writeNumberField("errorCode", this.errorCode);
        jsonWriter.writeNumberField("responseCode", this.responseCode);
        jsonWriter.writeStringField("responsePagePath", this.responsePagePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomErrorResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomErrorResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomErrorResponse.
     */
    public static CustomErrorResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomErrorResponse deserializedCustomErrorResponse = new CustomErrorResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCachingMinTTL".equals(fieldName)) {
                    deserializedCustomErrorResponse.errorCachingMinTtl = reader.getNullable(JsonReader::getInt);
                } else if ("errorCode".equals(fieldName)) {
                    deserializedCustomErrorResponse.errorCode = reader.getNullable(JsonReader::getInt);
                } else if ("responseCode".equals(fieldName)) {
                    deserializedCustomErrorResponse.responseCode = reader.getNullable(JsonReader::getInt);
                } else if ("responsePagePath".equals(fieldName)) {
                    deserializedCustomErrorResponse.responsePagePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomErrorResponse;
        });
    }
}
