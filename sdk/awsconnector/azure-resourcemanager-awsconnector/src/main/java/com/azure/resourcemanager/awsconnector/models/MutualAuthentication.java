// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MutualAuthentication.
 */
@Fluent
public final class MutualAuthentication implements JsonSerializable<MutualAuthentication> {
    /*
     * Indicates whether expired client certificates are ignored.
     */
    private Boolean ignoreClientCertificateExpiry;

    /*
     * The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is
     * ``off``.
     */
    private String mode;

    /*
     * The Amazon Resource Name (ARN) of the trust store.
     */
    private String trustStoreArn;

    /**
     * Creates an instance of MutualAuthentication class.
     */
    public MutualAuthentication() {
    }

    /**
     * Get the ignoreClientCertificateExpiry property: Indicates whether expired client certificates are ignored.
     * 
     * @return the ignoreClientCertificateExpiry value.
     */
    public Boolean ignoreClientCertificateExpiry() {
        return this.ignoreClientCertificateExpiry;
    }

    /**
     * Set the ignoreClientCertificateExpiry property: Indicates whether expired client certificates are ignored.
     * 
     * @param ignoreClientCertificateExpiry the ignoreClientCertificateExpiry value to set.
     * @return the MutualAuthentication object itself.
     */
    public MutualAuthentication withIgnoreClientCertificateExpiry(Boolean ignoreClientCertificateExpiry) {
        this.ignoreClientCertificateExpiry = ignoreClientCertificateExpiry;
        return this;
    }

    /**
     * Get the mode property: The client certificate handling method. Options are ``off``, ``passthrough`` or
     * ``verify``. The default value is ``off``.
     * 
     * @return the mode value.
     */
    public String mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The client certificate handling method. Options are ``off``, ``passthrough`` or
     * ``verify``. The default value is ``off``.
     * 
     * @param mode the mode value to set.
     * @return the MutualAuthentication object itself.
     */
    public MutualAuthentication withMode(String mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the trustStoreArn property: The Amazon Resource Name (ARN) of the trust store.
     * 
     * @return the trustStoreArn value.
     */
    public String trustStoreArn() {
        return this.trustStoreArn;
    }

    /**
     * Set the trustStoreArn property: The Amazon Resource Name (ARN) of the trust store.
     * 
     * @param trustStoreArn the trustStoreArn value to set.
     * @return the MutualAuthentication object itself.
     */
    public MutualAuthentication withTrustStoreArn(String trustStoreArn) {
        this.trustStoreArn = trustStoreArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("ignoreClientCertificateExpiry", this.ignoreClientCertificateExpiry);
        jsonWriter.writeStringField("mode", this.mode);
        jsonWriter.writeStringField("trustStoreArn", this.trustStoreArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MutualAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MutualAuthentication if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MutualAuthentication.
     */
    public static MutualAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MutualAuthentication deserializedMutualAuthentication = new MutualAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ignoreClientCertificateExpiry".equals(fieldName)) {
                    deserializedMutualAuthentication.ignoreClientCertificateExpiry
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("mode".equals(fieldName)) {
                    deserializedMutualAuthentication.mode = reader.getString();
                } else if ("trustStoreArn".equals(fieldName)) {
                    deserializedMutualAuthentication.trustStoreArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMutualAuthentication;
        });
    }
}
