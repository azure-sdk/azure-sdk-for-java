// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of CustomOriginConfig.
 */
@Fluent
public final class CustomOriginConfig implements JsonSerializable<CustomOriginConfig> {
    /*
     * The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port that the origin listens on.
     */
    private Integer httpPort;

    /*
     * The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port that the origin listens on.
     */
    private Integer httpsPort;

    /*
     * Specifies how long, in seconds, CloudFront persists its connection to the origin. The minimum timeout is 1
     * second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 5 seconds. For more
     * information, see [Origin Keep-alive
     * Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#
     * DownloadDistValuesOriginKeepaliveTimeout) in the *Amazon CloudFront Developer Guide*.
     */
    private Integer originKeepaliveTimeout;

    /*
     * Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Valid values are: +
     * ``http-only`` – CloudFront always uses HTTP to connect to the origin. + ``match-viewer`` – CloudFront connects to
     * the origin using the same protocol that the viewer used to connect to CloudFront. + ``https-only`` – CloudFront
     * always uses HTTPS to connect to the origin.
     */
    private String originProtocolPolicy;

    /*
     * Specifies how long, in seconds, CloudFront waits for a response from the origin. This is also known as the
     * *origin response timeout*. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you
     * don't specify otherwise) is 30 seconds. For more information, see [Origin Response
     * Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#
     * DownloadDistValuesOriginResponseTimeout) in the *Amazon CloudFront Developer Guide*.
     */
    private Integer originReadTimeout;

    /*
     * Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin over HTTPS. Valid
     * values include ``SSLv3``, ``TLSv1``, ``TLSv1.1``, and ``TLSv1.2``. For more information, see [Minimum Origin SSL
     * Protocol](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html
     * #DownloadDistValuesOriginSSLProtocols) in the *Amazon CloudFront Developer Guide*.
     */
    private List<String> originSslProtocols;

    /**
     * Creates an instance of CustomOriginConfig class.
     */
    public CustomOriginConfig() {
    }

    /**
     * Get the httpPort property: The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port
     * that the origin listens on.
     * 
     * @return the httpPort value.
     */
    public Integer httpPort() {
        return this.httpPort;
    }

    /**
     * Set the httpPort property: The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port
     * that the origin listens on.
     * 
     * @param httpPort the httpPort value to set.
     * @return the CustomOriginConfig object itself.
     */
    public CustomOriginConfig withHttpPort(Integer httpPort) {
        this.httpPort = httpPort;
        return this;
    }

    /**
     * Get the httpsPort property: The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port
     * that the origin listens on.
     * 
     * @return the httpsPort value.
     */
    public Integer httpsPort() {
        return this.httpsPort;
    }

    /**
     * Set the httpsPort property: The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port
     * that the origin listens on.
     * 
     * @param httpsPort the httpsPort value to set.
     * @return the CustomOriginConfig object itself.
     */
    public CustomOriginConfig withHttpsPort(Integer httpsPort) {
        this.httpsPort = httpsPort;
        return this;
    }

    /**
     * Get the originKeepaliveTimeout property: Specifies how long, in seconds, CloudFront persists its connection to
     * the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify
     * otherwise) is 5 seconds. For more information, see [Origin Keep-alive
     * Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @return the originKeepaliveTimeout value.
     */
    public Integer originKeepaliveTimeout() {
        return this.originKeepaliveTimeout;
    }

    /**
     * Set the originKeepaliveTimeout property: Specifies how long, in seconds, CloudFront persists its connection to
     * the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify
     * otherwise) is 5 seconds. For more information, see [Origin Keep-alive
     * Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @param originKeepaliveTimeout the originKeepaliveTimeout value to set.
     * @return the CustomOriginConfig object itself.
     */
    public CustomOriginConfig withOriginKeepaliveTimeout(Integer originKeepaliveTimeout) {
        this.originKeepaliveTimeout = originKeepaliveTimeout;
        return this;
    }

    /**
     * Get the originProtocolPolicy property: Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to
     * the origin. Valid values are: + ``http-only`` – CloudFront always uses HTTP to connect to the origin. +
     * ``match-viewer`` – CloudFront connects to the origin using the same protocol that the viewer used to connect to
     * CloudFront. + ``https-only`` – CloudFront always uses HTTPS to connect to the origin.
     * 
     * @return the originProtocolPolicy value.
     */
    public String originProtocolPolicy() {
        return this.originProtocolPolicy;
    }

    /**
     * Set the originProtocolPolicy property: Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to
     * the origin. Valid values are: + ``http-only`` – CloudFront always uses HTTP to connect to the origin. +
     * ``match-viewer`` – CloudFront connects to the origin using the same protocol that the viewer used to connect to
     * CloudFront. + ``https-only`` – CloudFront always uses HTTPS to connect to the origin.
     * 
     * @param originProtocolPolicy the originProtocolPolicy value to set.
     * @return the CustomOriginConfig object itself.
     */
    public CustomOriginConfig withOriginProtocolPolicy(String originProtocolPolicy) {
        this.originProtocolPolicy = originProtocolPolicy;
        return this;
    }

    /**
     * Get the originReadTimeout property: Specifies how long, in seconds, CloudFront waits for a response from the
     * origin. This is also known as the *origin response timeout*. The minimum timeout is 1 second, the maximum is 60
     * seconds, and the default (if you don't specify otherwise) is 30 seconds. For more information, see [Origin
     * Response
     * Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @return the originReadTimeout value.
     */
    public Integer originReadTimeout() {
        return this.originReadTimeout;
    }

    /**
     * Set the originReadTimeout property: Specifies how long, in seconds, CloudFront waits for a response from the
     * origin. This is also known as the *origin response timeout*. The minimum timeout is 1 second, the maximum is 60
     * seconds, and the default (if you don't specify otherwise) is 30 seconds. For more information, see [Origin
     * Response
     * Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @param originReadTimeout the originReadTimeout value to set.
     * @return the CustomOriginConfig object itself.
     */
    public CustomOriginConfig withOriginReadTimeout(Integer originReadTimeout) {
        this.originReadTimeout = originReadTimeout;
        return this;
    }

    /**
     * Get the originSslProtocols property: Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting
     * to your origin over HTTPS. Valid values include ``SSLv3``, ``TLSv1``, ``TLSv1.1``, and ``TLSv1.2``. For more
     * information, see [Minimum Origin SSL
     * Protocol](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @return the originSslProtocols value.
     */
    public List<String> originSslProtocols() {
        return this.originSslProtocols;
    }

    /**
     * Set the originSslProtocols property: Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting
     * to your origin over HTTPS. Valid values include ``SSLv3``, ``TLSv1``, ``TLSv1.1``, and ``TLSv1.2``. For more
     * information, see [Minimum Origin SSL
     * Protocol](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols)
     * in the *Amazon CloudFront Developer Guide*.
     * 
     * @param originSslProtocols the originSslProtocols value to set.
     * @return the CustomOriginConfig object itself.
     */
    public CustomOriginConfig withOriginSslProtocols(List<String> originSslProtocols) {
        this.originSslProtocols = originSslProtocols;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("httpPort", this.httpPort);
        jsonWriter.writeNumberField("httpsPort", this.httpsPort);
        jsonWriter.writeNumberField("originKeepaliveTimeout", this.originKeepaliveTimeout);
        jsonWriter.writeStringField("originProtocolPolicy", this.originProtocolPolicy);
        jsonWriter.writeNumberField("originReadTimeout", this.originReadTimeout);
        jsonWriter.writeArrayField("originSSLProtocols", this.originSslProtocols,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomOriginConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomOriginConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomOriginConfig.
     */
    public static CustomOriginConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomOriginConfig deserializedCustomOriginConfig = new CustomOriginConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("httpPort".equals(fieldName)) {
                    deserializedCustomOriginConfig.httpPort = reader.getNullable(JsonReader::getInt);
                } else if ("httpsPort".equals(fieldName)) {
                    deserializedCustomOriginConfig.httpsPort = reader.getNullable(JsonReader::getInt);
                } else if ("originKeepaliveTimeout".equals(fieldName)) {
                    deserializedCustomOriginConfig.originKeepaliveTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("originProtocolPolicy".equals(fieldName)) {
                    deserializedCustomOriginConfig.originProtocolPolicy = reader.getString();
                } else if ("originReadTimeout".equals(fieldName)) {
                    deserializedCustomOriginConfig.originReadTimeout = reader.getNullable(JsonReader::getInt);
                } else if ("originSSLProtocols".equals(fieldName)) {
                    List<String> originSslProtocols = reader.readArray(reader1 -> reader1.getString());
                    deserializedCustomOriginConfig.originSslProtocols = originSslProtocols;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomOriginConfig;
        });
    }
}
