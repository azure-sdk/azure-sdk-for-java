// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of HibernationOptions.
 */
@Fluent
public final class HibernationOptions implements JsonSerializable<HibernationOptions> {
    /*
     * <p>If <code>true</code>, your instance is enabled for hibernation; otherwise, it is not enabled for
     * hibernation.</p>
     */
    private Boolean configured;

    /**
     * Creates an instance of HibernationOptions class.
     */
    public HibernationOptions() {
    }

    /**
     * Get the configured property: &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, your instance is enabled for hibernation;
     * otherwise, it is not enabled for hibernation.&lt;/p&gt;.
     * 
     * @return the configured value.
     */
    public Boolean configured() {
        return this.configured;
    }

    /**
     * Set the configured property: &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, your instance is enabled for hibernation;
     * otherwise, it is not enabled for hibernation.&lt;/p&gt;.
     * 
     * @param configured the configured value to set.
     * @return the HibernationOptions object itself.
     */
    public HibernationOptions withConfigured(Boolean configured) {
        this.configured = configured;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("configured", this.configured);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HibernationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HibernationOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HibernationOptions.
     */
    public static HibernationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HibernationOptions deserializedHibernationOptions = new HibernationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configured".equals(fieldName)) {
                    deserializedHibernationOptions.configured = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHibernationOptions;
        });
    }
}
