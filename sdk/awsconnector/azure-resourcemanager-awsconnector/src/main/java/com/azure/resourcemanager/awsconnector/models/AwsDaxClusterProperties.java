// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of awsDaxCluster.
 */
@Fluent
public final class AwsDaxClusterProperties implements JsonSerializable<AwsDaxClusterProperties> {
    /*
     * <p>The number of nodes in the cluster that are active (i.e., capable of serving requests).</p>
     */
    private Integer activeNodes;

    /*
     * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster. </p>
     */
    private String clusterArn;

    /*
     * <p>The endpoint for this DAX cluster, consisting of a DNS name, a port number, and a URL. Applications should use
     * the URL to configure the DAX client to find their cluster.</p>
     */
    private Endpoint clusterDiscoveryEndpoint;

    /*
     * <p>The type of encryption supported by the cluster's endpoint. Values are:</p> <ul> <li> <p> <code>NONE</code>
     * for no encryption</p> <p> <code>TLS</code> for Transport Layer Security</p> </li> </ul>
     */
    private ClusterEndpointEncryptionTypeEnumValue clusterEndpointEncryptionType;

    /*
     * <p>The name of the DAX cluster.</p>
     */
    private String clusterName;

    /*
     * <p>The description of the cluster.</p>
     */
    private String description;

    /*
     * <p>A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use
     * the role's permissions to access DynamoDB on your behalf.</p>
     */
    private String iamRoleArn;

    /*
     * <p>A list of nodes to be removed from the cluster.</p>
     */
    private List<String> nodeIdsToRemove;

    /*
     * <p>The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)</p>
     */
    private String nodeType;

    /*
     * <p>A list of nodes that are currently in the cluster.</p>
     */
    private List<Node> nodes;

    /*
     * <p>Describes a notification topic and its status. Notification topics are used for publishing DAX events to
     * subscribers using Amazon Simple Notification Service (SNS).</p>
     */
    private NotificationConfigurationAutoGenerated notificationConfiguration;

    /*
     * <p>The parameter group being used by nodes in the cluster.</p>
     */
    private ParameterGroupStatus parameterGroup;

    /*
     * <p>A range of time when maintenance of DAX cluster software will be performed. For example:
     * <code>sun:01:00-sun:09:00</code>. Cluster maintenance normally takes less than 30 minutes, and is performed
     * automatically within the maintenance window.</p>
     */
    private String preferredMaintenanceWindow;

    /*
     * <p>The description of the server-side encryption status on the specified DAX cluster.</p>
     */
    private SseDescription sseDescription;

    /*
     * <p>A list of security groups, and the status of each, for the nodes in the cluster.</p>
     */
    private List<SecurityGroupMembership> securityGroups;

    /*
     * <p>The current status of the cluster.</p>
     */
    private String status;

    /*
     * <p>The subnet group where the DAX cluster is running.</p>
     */
    private String subnetGroup;

    /*
     * <p>The total number of nodes in the cluster.</p>
     */
    private Integer totalNodes;

    /**
     * Creates an instance of AwsDaxClusterProperties class.
     */
    public AwsDaxClusterProperties() {
    }

    /**
     * Get the activeNodes property: &lt;p&gt;The number of nodes in the cluster that are active (i.e., capable of
     * serving requests).&lt;/p&gt;.
     * 
     * @return the activeNodes value.
     */
    public Integer activeNodes() {
        return this.activeNodes;
    }

    /**
     * Set the activeNodes property: &lt;p&gt;The number of nodes in the cluster that are active (i.e., capable of
     * serving requests).&lt;/p&gt;.
     * 
     * @param activeNodes the activeNodes value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withActiveNodes(Integer activeNodes) {
        this.activeNodes = activeNodes;
        return this;
    }

    /**
     * Get the clusterArn property: &lt;p&gt;The Amazon Resource Name (ARN) that uniquely identifies the cluster.
     * &lt;/p&gt;.
     * 
     * @return the clusterArn value.
     */
    public String clusterArn() {
        return this.clusterArn;
    }

    /**
     * Set the clusterArn property: &lt;p&gt;The Amazon Resource Name (ARN) that uniquely identifies the cluster.
     * &lt;/p&gt;.
     * 
     * @param clusterArn the clusterArn value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withClusterArn(String clusterArn) {
        this.clusterArn = clusterArn;
        return this;
    }

    /**
     * Get the clusterDiscoveryEndpoint property: &lt;p&gt;The endpoint for this DAX cluster, consisting of a DNS name,
     * a port number, and a URL. Applications should use the URL to configure the DAX client to find their
     * cluster.&lt;/p&gt;.
     * 
     * @return the clusterDiscoveryEndpoint value.
     */
    public Endpoint clusterDiscoveryEndpoint() {
        return this.clusterDiscoveryEndpoint;
    }

    /**
     * Set the clusterDiscoveryEndpoint property: &lt;p&gt;The endpoint for this DAX cluster, consisting of a DNS name,
     * a port number, and a URL. Applications should use the URL to configure the DAX client to find their
     * cluster.&lt;/p&gt;.
     * 
     * @param clusterDiscoveryEndpoint the clusterDiscoveryEndpoint value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withClusterDiscoveryEndpoint(Endpoint clusterDiscoveryEndpoint) {
        this.clusterDiscoveryEndpoint = clusterDiscoveryEndpoint;
        return this;
    }

    /**
     * Get the clusterEndpointEncryptionType property: &lt;p&gt;The type of encryption supported by the cluster's
     * endpoint. Values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; for no
     * encryption&lt;/p&gt; &lt;p&gt; &lt;code&gt;TLS&lt;/code&gt; for Transport Layer Security&lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @return the clusterEndpointEncryptionType value.
     */
    public ClusterEndpointEncryptionTypeEnumValue clusterEndpointEncryptionType() {
        return this.clusterEndpointEncryptionType;
    }

    /**
     * Set the clusterEndpointEncryptionType property: &lt;p&gt;The type of encryption supported by the cluster's
     * endpoint. Values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; for no
     * encryption&lt;/p&gt; &lt;p&gt; &lt;code&gt;TLS&lt;/code&gt; for Transport Layer Security&lt;/p&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @param clusterEndpointEncryptionType the clusterEndpointEncryptionType value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties
        withClusterEndpointEncryptionType(ClusterEndpointEncryptionTypeEnumValue clusterEndpointEncryptionType) {
        this.clusterEndpointEncryptionType = clusterEndpointEncryptionType;
        return this;
    }

    /**
     * Get the clusterName property: &lt;p&gt;The name of the DAX cluster.&lt;/p&gt;.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: &lt;p&gt;The name of the DAX cluster.&lt;/p&gt;.
     * 
     * @param clusterName the clusterName value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the description property: &lt;p&gt;The description of the cluster.&lt;/p&gt;.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: &lt;p&gt;The description of the cluster.&lt;/p&gt;.
     * 
     * @param description the description value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the iamRoleArn property: &lt;p&gt;A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime,
     * DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.&lt;/p&gt;.
     * 
     * @return the iamRoleArn value.
     */
    public String iamRoleArn() {
        return this.iamRoleArn;
    }

    /**
     * Set the iamRoleArn property: &lt;p&gt;A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime,
     * DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.&lt;/p&gt;.
     * 
     * @param iamRoleArn the iamRoleArn value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withIamRoleArn(String iamRoleArn) {
        this.iamRoleArn = iamRoleArn;
        return this;
    }

    /**
     * Get the nodeIdsToRemove property: &lt;p&gt;A list of nodes to be removed from the cluster.&lt;/p&gt;.
     * 
     * @return the nodeIdsToRemove value.
     */
    public List<String> nodeIdsToRemove() {
        return this.nodeIdsToRemove;
    }

    /**
     * Set the nodeIdsToRemove property: &lt;p&gt;A list of nodes to be removed from the cluster.&lt;/p&gt;.
     * 
     * @param nodeIdsToRemove the nodeIdsToRemove value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withNodeIdsToRemove(List<String> nodeIdsToRemove) {
        this.nodeIdsToRemove = nodeIdsToRemove;
        return this;
    }

    /**
     * Get the nodeType property: &lt;p&gt;The node type for the nodes in the cluster. (All nodes in a DAX cluster are
     * of the same type.)&lt;/p&gt;.
     * 
     * @return the nodeType value.
     */
    public String nodeType() {
        return this.nodeType;
    }

    /**
     * Set the nodeType property: &lt;p&gt;The node type for the nodes in the cluster. (All nodes in a DAX cluster are
     * of the same type.)&lt;/p&gt;.
     * 
     * @param nodeType the nodeType value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withNodeType(String nodeType) {
        this.nodeType = nodeType;
        return this;
    }

    /**
     * Get the nodes property: &lt;p&gt;A list of nodes that are currently in the cluster.&lt;/p&gt;.
     * 
     * @return the nodes value.
     */
    public List<Node> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: &lt;p&gt;A list of nodes that are currently in the cluster.&lt;/p&gt;.
     * 
     * @param nodes the nodes value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withNodes(List<Node> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Get the notificationConfiguration property: &lt;p&gt;Describes a notification topic and its status. Notification
     * topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service
     * (SNS).&lt;/p&gt;.
     * 
     * @return the notificationConfiguration value.
     */
    public NotificationConfigurationAutoGenerated notificationConfiguration() {
        return this.notificationConfiguration;
    }

    /**
     * Set the notificationConfiguration property: &lt;p&gt;Describes a notification topic and its status. Notification
     * topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service
     * (SNS).&lt;/p&gt;.
     * 
     * @param notificationConfiguration the notificationConfiguration value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties
        withNotificationConfiguration(NotificationConfigurationAutoGenerated notificationConfiguration) {
        this.notificationConfiguration = notificationConfiguration;
        return this;
    }

    /**
     * Get the parameterGroup property: &lt;p&gt;The parameter group being used by nodes in the cluster.&lt;/p&gt;.
     * 
     * @return the parameterGroup value.
     */
    public ParameterGroupStatus parameterGroup() {
        return this.parameterGroup;
    }

    /**
     * Set the parameterGroup property: &lt;p&gt;The parameter group being used by nodes in the cluster.&lt;/p&gt;.
     * 
     * @param parameterGroup the parameterGroup value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withParameterGroup(ParameterGroupStatus parameterGroup) {
        this.parameterGroup = parameterGroup;
        return this;
    }

    /**
     * Get the preferredMaintenanceWindow property: &lt;p&gt;A range of time when maintenance of DAX cluster software
     * will be performed. For example: &lt;code&gt;sun:01:00-sun:09:00&lt;/code&gt;. Cluster maintenance normally takes
     * less than 30 minutes, and is performed automatically within the maintenance window.&lt;/p&gt;.
     * 
     * @return the preferredMaintenanceWindow value.
     */
    public String preferredMaintenanceWindow() {
        return this.preferredMaintenanceWindow;
    }

    /**
     * Set the preferredMaintenanceWindow property: &lt;p&gt;A range of time when maintenance of DAX cluster software
     * will be performed. For example: &lt;code&gt;sun:01:00-sun:09:00&lt;/code&gt;. Cluster maintenance normally takes
     * less than 30 minutes, and is performed automatically within the maintenance window.&lt;/p&gt;.
     * 
     * @param preferredMaintenanceWindow the preferredMaintenanceWindow value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        return this;
    }

    /**
     * Get the sseDescription property: &lt;p&gt;The description of the server-side encryption status on the specified
     * DAX cluster.&lt;/p&gt;.
     * 
     * @return the sseDescription value.
     */
    public SseDescription sseDescription() {
        return this.sseDescription;
    }

    /**
     * Set the sseDescription property: &lt;p&gt;The description of the server-side encryption status on the specified
     * DAX cluster.&lt;/p&gt;.
     * 
     * @param sseDescription the sseDescription value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withSseDescription(SseDescription sseDescription) {
        this.sseDescription = sseDescription;
        return this;
    }

    /**
     * Get the securityGroups property: &lt;p&gt;A list of security groups, and the status of each, for the nodes in the
     * cluster.&lt;/p&gt;.
     * 
     * @return the securityGroups value.
     */
    public List<SecurityGroupMembership> securityGroups() {
        return this.securityGroups;
    }

    /**
     * Set the securityGroups property: &lt;p&gt;A list of security groups, and the status of each, for the nodes in the
     * cluster.&lt;/p&gt;.
     * 
     * @param securityGroups the securityGroups value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withSecurityGroups(List<SecurityGroupMembership> securityGroups) {
        this.securityGroups = securityGroups;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The current status of the cluster.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The current status of the cluster.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the subnetGroup property: &lt;p&gt;The subnet group where the DAX cluster is running.&lt;/p&gt;.
     * 
     * @return the subnetGroup value.
     */
    public String subnetGroup() {
        return this.subnetGroup;
    }

    /**
     * Set the subnetGroup property: &lt;p&gt;The subnet group where the DAX cluster is running.&lt;/p&gt;.
     * 
     * @param subnetGroup the subnetGroup value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withSubnetGroup(String subnetGroup) {
        this.subnetGroup = subnetGroup;
        return this;
    }

    /**
     * Get the totalNodes property: &lt;p&gt;The total number of nodes in the cluster.&lt;/p&gt;.
     * 
     * @return the totalNodes value.
     */
    public Integer totalNodes() {
        return this.totalNodes;
    }

    /**
     * Set the totalNodes property: &lt;p&gt;The total number of nodes in the cluster.&lt;/p&gt;.
     * 
     * @param totalNodes the totalNodes value to set.
     * @return the AwsDaxClusterProperties object itself.
     */
    public AwsDaxClusterProperties withTotalNodes(Integer totalNodes) {
        this.totalNodes = totalNodes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterDiscoveryEndpoint() != null) {
            clusterDiscoveryEndpoint().validate();
        }
        if (clusterEndpointEncryptionType() != null) {
            clusterEndpointEncryptionType().validate();
        }
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
        if (notificationConfiguration() != null) {
            notificationConfiguration().validate();
        }
        if (parameterGroup() != null) {
            parameterGroup().validate();
        }
        if (sseDescription() != null) {
            sseDescription().validate();
        }
        if (securityGroups() != null) {
            securityGroups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("activeNodes", this.activeNodes);
        jsonWriter.writeStringField("clusterArn", this.clusterArn);
        jsonWriter.writeJsonField("clusterDiscoveryEndpoint", this.clusterDiscoveryEndpoint);
        jsonWriter.writeJsonField("clusterEndpointEncryptionType", this.clusterEndpointEncryptionType);
        jsonWriter.writeStringField("clusterName", this.clusterName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("iamRoleArn", this.iamRoleArn);
        jsonWriter.writeArrayField("nodeIdsToRemove", this.nodeIdsToRemove,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("nodeType", this.nodeType);
        jsonWriter.writeArrayField("nodes", this.nodes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("notificationConfiguration", this.notificationConfiguration);
        jsonWriter.writeJsonField("parameterGroup", this.parameterGroup);
        jsonWriter.writeStringField("preferredMaintenanceWindow", this.preferredMaintenanceWindow);
        jsonWriter.writeJsonField("sseDescription", this.sseDescription);
        jsonWriter.writeArrayField("securityGroups", this.securityGroups,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("subnetGroup", this.subnetGroup);
        jsonWriter.writeNumberField("totalNodes", this.totalNodes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsDaxClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsDaxClusterProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsDaxClusterProperties.
     */
    public static AwsDaxClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsDaxClusterProperties deserializedAwsDaxClusterProperties = new AwsDaxClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activeNodes".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.activeNodes = reader.getNullable(JsonReader::getInt);
                } else if ("clusterArn".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.clusterArn = reader.getString();
                } else if ("clusterDiscoveryEndpoint".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.clusterDiscoveryEndpoint = Endpoint.fromJson(reader);
                } else if ("clusterEndpointEncryptionType".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.clusterEndpointEncryptionType
                        = ClusterEndpointEncryptionTypeEnumValue.fromJson(reader);
                } else if ("clusterName".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.clusterName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.description = reader.getString();
                } else if ("iamRoleArn".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.iamRoleArn = reader.getString();
                } else if ("nodeIdsToRemove".equals(fieldName)) {
                    List<String> nodeIdsToRemove = reader.readArray(reader1 -> reader1.getString());
                    deserializedAwsDaxClusterProperties.nodeIdsToRemove = nodeIdsToRemove;
                } else if ("nodeType".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.nodeType = reader.getString();
                } else if ("nodes".equals(fieldName)) {
                    List<Node> nodes = reader.readArray(reader1 -> Node.fromJson(reader1));
                    deserializedAwsDaxClusterProperties.nodes = nodes;
                } else if ("notificationConfiguration".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.notificationConfiguration
                        = NotificationConfigurationAutoGenerated.fromJson(reader);
                } else if ("parameterGroup".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.parameterGroup = ParameterGroupStatus.fromJson(reader);
                } else if ("preferredMaintenanceWindow".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.preferredMaintenanceWindow = reader.getString();
                } else if ("sseDescription".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.sseDescription = SseDescription.fromJson(reader);
                } else if ("securityGroups".equals(fieldName)) {
                    List<SecurityGroupMembership> securityGroups
                        = reader.readArray(reader1 -> SecurityGroupMembership.fromJson(reader1));
                    deserializedAwsDaxClusterProperties.securityGroups = securityGroups;
                } else if ("status".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.status = reader.getString();
                } else if ("subnetGroup".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.subnetGroup = reader.getString();
                } else if ("totalNodes".equals(fieldName)) {
                    deserializedAwsDaxClusterProperties.totalNodes = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsDaxClusterProperties;
        });
    }
}
