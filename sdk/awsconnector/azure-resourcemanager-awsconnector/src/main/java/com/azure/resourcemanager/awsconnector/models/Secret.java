// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Secret.
 */
@Fluent
public final class Secret implements JsonSerializable<Secret> {
    /*
     * The name of the secret.
     */
    private String name;

    /*
     * The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the
     * full ARN of the parameter in the SSM Parameter Store. For information about the require IAMlong permissions, see
     * [Required IAM permissions for Amazon ECS
     * secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#
     * secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS
     * secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html)
     * (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*. If the SSM
     * Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the
     * full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be
     * specified.
     */
    private String valueFrom;

    /**
     * Creates an instance of Secret class.
     */
    public Secret() {
    }

    /**
     * Get the name property: The name of the secret.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the secret.
     * 
     * @param name the name value to set.
     * @return the Secret object itself.
     */
    public Secret withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the valueFrom property: The secret to expose to the container. The supported values are either the full ARN
     * of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store. For information about the
     * require IAMlong permissions, see [Required IAM permissions for Amazon ECS
     * secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam)
     * (for Secrets Manager) or [Required IAM permissions for Amazon ECS
     * secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html)
     * (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*. If the SSM
     * Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the
     * full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be
     * specified.
     * 
     * @return the valueFrom value.
     */
    public String valueFrom() {
        return this.valueFrom;
    }

    /**
     * Set the valueFrom property: The secret to expose to the container. The supported values are either the full ARN
     * of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store. For information about the
     * require IAMlong permissions, see [Required IAM permissions for Amazon ECS
     * secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam)
     * (for Secrets Manager) or [Required IAM permissions for Amazon ECS
     * secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html)
     * (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*. If the SSM
     * Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the
     * full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be
     * specified.
     * 
     * @param valueFrom the valueFrom value to set.
     * @return the Secret object itself.
     */
    public Secret withValueFrom(String valueFrom) {
        this.valueFrom = valueFrom;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("valueFrom", this.valueFrom);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Secret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Secret if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Secret.
     */
    public static Secret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Secret deserializedSecret = new Secret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSecret.name = reader.getString();
                } else if ("valueFrom".equals(fieldName)) {
                    deserializedSecret.valueFrom = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecret;
        });
    }
}
