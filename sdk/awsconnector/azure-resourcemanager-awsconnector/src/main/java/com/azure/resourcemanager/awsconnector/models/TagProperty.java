// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TagProperty.
 */
@Fluent
public final class TagProperty implements JsonSerializable<TagProperty> {
    /*
     * The tag key.
     */
    private String key;

    /*
     * Set to ``true`` if you want CloudFormation to copy the tag to EC2 instances that are launched as part of the Auto
     * Scaling group. Set to ``false`` if you want the tag attached only to the Auto Scaling group and not copied to any
     * instances launched as part of the Auto Scaling group.
     */
    private Boolean propagateAtLaunch;

    /*
     * The tag value.
     */
    private String value;

    /**
     * Creates an instance of TagProperty class.
     */
    public TagProperty() {
    }

    /**
     * Get the key property: The tag key.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The tag key.
     * 
     * @param key the key value to set.
     * @return the TagProperty object itself.
     */
    public TagProperty withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the propagateAtLaunch property: Set to ``true`` if you want CloudFormation to copy the tag to EC2 instances
     * that are launched as part of the Auto Scaling group. Set to ``false`` if you want the tag attached only to the
     * Auto Scaling group and not copied to any instances launched as part of the Auto Scaling group.
     * 
     * @return the propagateAtLaunch value.
     */
    public Boolean propagateAtLaunch() {
        return this.propagateAtLaunch;
    }

    /**
     * Set the propagateAtLaunch property: Set to ``true`` if you want CloudFormation to copy the tag to EC2 instances
     * that are launched as part of the Auto Scaling group. Set to ``false`` if you want the tag attached only to the
     * Auto Scaling group and not copied to any instances launched as part of the Auto Scaling group.
     * 
     * @param propagateAtLaunch the propagateAtLaunch value to set.
     * @return the TagProperty object itself.
     */
    public TagProperty withPropagateAtLaunch(Boolean propagateAtLaunch) {
        this.propagateAtLaunch = propagateAtLaunch;
        return this;
    }

    /**
     * Get the value property: The tag value.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The tag value.
     * 
     * @param value the value value to set.
     * @return the TagProperty object itself.
     */
    public TagProperty withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeBooleanField("propagateAtLaunch", this.propagateAtLaunch);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TagProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TagProperty if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TagProperty.
     */
    public static TagProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TagProperty deserializedTagProperty = new TagProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedTagProperty.key = reader.getString();
                } else if ("propagateAtLaunch".equals(fieldName)) {
                    deserializedTagProperty.propagateAtLaunch = reader.getNullable(JsonReader::getBoolean);
                } else if ("value".equals(fieldName)) {
                    deserializedTagProperty.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTagProperty;
        });
    }
}
