// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of OriginGroups.
 */
@Fluent
public final class OriginGroups implements JsonSerializable<OriginGroups> {
    /*
     * The items (origin groups) in a distribution.
     */
    private List<OriginGroup> items;

    /*
     * The number of origin groups.
     */
    private Integer quantity;

    /**
     * Creates an instance of OriginGroups class.
     */
    public OriginGroups() {
    }

    /**
     * Get the items property: The items (origin groups) in a distribution.
     * 
     * @return the items value.
     */
    public List<OriginGroup> items() {
        return this.items;
    }

    /**
     * Set the items property: The items (origin groups) in a distribution.
     * 
     * @param items the items value to set.
     * @return the OriginGroups object itself.
     */
    public OriginGroups withItems(List<OriginGroup> items) {
        this.items = items;
        return this;
    }

    /**
     * Get the quantity property: The number of origin groups.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: The number of origin groups.
     * 
     * @param quantity the quantity value to set.
     * @return the OriginGroups object itself.
     */
    public OriginGroups withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (items() != null) {
            items().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("quantity", this.quantity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OriginGroups from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OriginGroups if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OriginGroups.
     */
    public static OriginGroups fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OriginGroups deserializedOriginGroups = new OriginGroups();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("items".equals(fieldName)) {
                    List<OriginGroup> items = reader.readArray(reader1 -> OriginGroup.fromJson(reader1));
                    deserializedOriginGroups.items = items;
                } else if ("quantity".equals(fieldName)) {
                    deserializedOriginGroups.quantity = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOriginGroups;
        });
    }
}
