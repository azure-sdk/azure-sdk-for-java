// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of EphemeralStorage.
 */
@Fluent
public final class EphemeralStorage implements JsonSerializable<EphemeralStorage> {
    /*
     * The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is ``20`` GiB and
     * the maximum supported value is ``200`` GiB.
     */
    private Integer sizeInGiB;

    /**
     * Creates an instance of EphemeralStorage class.
     */
    public EphemeralStorage() {
    }

    /**
     * Get the sizeInGiB property: The total amount, in GiB, of ephemeral storage to set for the task. The minimum
     * supported value is ``20`` GiB and the maximum supported value is ``200`` GiB.
     * 
     * @return the sizeInGiB value.
     */
    public Integer sizeInGiB() {
        return this.sizeInGiB;
    }

    /**
     * Set the sizeInGiB property: The total amount, in GiB, of ephemeral storage to set for the task. The minimum
     * supported value is ``20`` GiB and the maximum supported value is ``200`` GiB.
     * 
     * @param sizeInGiB the sizeInGiB value to set.
     * @return the EphemeralStorage object itself.
     */
    public EphemeralStorage withSizeInGiB(Integer sizeInGiB) {
        this.sizeInGiB = sizeInGiB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("sizeInGiB", this.sizeInGiB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EphemeralStorage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EphemeralStorage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EphemeralStorage.
     */
    public static EphemeralStorage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EphemeralStorage deserializedEphemeralStorage = new EphemeralStorage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sizeInGiB".equals(fieldName)) {
                    deserializedEphemeralStorage.sizeInGiB = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEphemeralStorage;
        });
    }
}
