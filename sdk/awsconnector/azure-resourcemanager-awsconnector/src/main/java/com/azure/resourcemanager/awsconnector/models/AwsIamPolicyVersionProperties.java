// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of awsIamPolicyVersion.
 */
@Fluent
public final class AwsIamPolicyVersionProperties implements JsonSerializable<AwsIamPolicyVersionProperties> {
    /*
     * <p>The date and time, in <a href='http://www.iso.org/iso/iso8601'>ISO 8601 date-time format</a>, when the policy
     * version was created.</p>
     */
    private OffsetDateTime createDate;

    /*
     * <p>The policy document.</p> <p>The policy document is returned in the response to the <a>GetPolicyVersion</a> and
     * <a>GetAccountAuthorizationDetails</a> operations. It is not returned in the response to the
     * <a>CreatePolicyVersion</a> or <a>ListPolicyVersions</a> operations. </p> <p>The policy document returned in this
     * structure is URL-encoded compliant with <a href='https://tools.ietf.org/html/rfc3986'>RFC 3986</a>. You can use a
     * URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the
     * <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages
     * and SDKs provide similar functionality.</p>
     */
    private String document;

    /*
     * <p>Specifies whether the policy version is set as the policy's default version.</p>
     */
    private Boolean isDefaultVersion;

    /*
     * <p>The identifier for the policy version.</p> <p>Policy version identifiers always begin with <code>v</code>
     * (always lowercase). When a policy is created, the first policy version is <code>v1</code>. </p>
     */
    private String versionId;

    /**
     * Creates an instance of AwsIamPolicyVersionProperties class.
     */
    public AwsIamPolicyVersionProperties() {
    }

    /**
     * Get the createDate property: &lt;p&gt;The date and time, in &lt;a href='http://www.iso.org/iso/iso8601'&gt;ISO
     * 8601 date-time format&lt;/a&gt;, when the policy version was created.&lt;/p&gt;.
     * 
     * @return the createDate value.
     */
    public OffsetDateTime createDate() {
        return this.createDate;
    }

    /**
     * Set the createDate property: &lt;p&gt;The date and time, in &lt;a href='http://www.iso.org/iso/iso8601'&gt;ISO
     * 8601 date-time format&lt;/a&gt;, when the policy version was created.&lt;/p&gt;.
     * 
     * @param createDate the createDate value to set.
     * @return the AwsIamPolicyVersionProperties object itself.
     */
    public AwsIamPolicyVersionProperties withCreateDate(OffsetDateTime createDate) {
        this.createDate = createDate;
        return this;
    }

    /**
     * Get the document property: &lt;p&gt;The policy document.&lt;/p&gt; &lt;p&gt;The policy document is returned in
     * the response to the &lt;a&gt;GetPolicyVersion&lt;/a&gt; and &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt;
     * operations. It is not returned in the response to the &lt;a&gt;CreatePolicyVersion&lt;/a&gt; or
     * &lt;a&gt;ListPolicyVersions&lt;/a&gt; operations. &lt;/p&gt; &lt;p&gt;The policy document returned in this
     * structure is URL-encoded compliant with &lt;a href='https://tools.ietf.org/html/rfc3986'&gt;RFC 3986&lt;/a&gt;.
     * You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java,
     * you can use the &lt;code&gt;decode&lt;/code&gt; method of the &lt;code&gt;java.net.URLDecoder&lt;/code&gt;
     * utility class in the Java SDK. Other languages and SDKs provide similar functionality.&lt;/p&gt;.
     * 
     * @return the document value.
     */
    public String document() {
        return this.document;
    }

    /**
     * Set the document property: &lt;p&gt;The policy document.&lt;/p&gt; &lt;p&gt;The policy document is returned in
     * the response to the &lt;a&gt;GetPolicyVersion&lt;/a&gt; and &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt;
     * operations. It is not returned in the response to the &lt;a&gt;CreatePolicyVersion&lt;/a&gt; or
     * &lt;a&gt;ListPolicyVersions&lt;/a&gt; operations. &lt;/p&gt; &lt;p&gt;The policy document returned in this
     * structure is URL-encoded compliant with &lt;a href='https://tools.ietf.org/html/rfc3986'&gt;RFC 3986&lt;/a&gt;.
     * You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java,
     * you can use the &lt;code&gt;decode&lt;/code&gt; method of the &lt;code&gt;java.net.URLDecoder&lt;/code&gt;
     * utility class in the Java SDK. Other languages and SDKs provide similar functionality.&lt;/p&gt;.
     * 
     * @param document the document value to set.
     * @return the AwsIamPolicyVersionProperties object itself.
     */
    public AwsIamPolicyVersionProperties withDocument(String document) {
        this.document = document;
        return this;
    }

    /**
     * Get the isDefaultVersion property: &lt;p&gt;Specifies whether the policy version is set as the policy's default
     * version.&lt;/p&gt;.
     * 
     * @return the isDefaultVersion value.
     */
    public Boolean isDefaultVersion() {
        return this.isDefaultVersion;
    }

    /**
     * Set the isDefaultVersion property: &lt;p&gt;Specifies whether the policy version is set as the policy's default
     * version.&lt;/p&gt;.
     * 
     * @param isDefaultVersion the isDefaultVersion value to set.
     * @return the AwsIamPolicyVersionProperties object itself.
     */
    public AwsIamPolicyVersionProperties withIsDefaultVersion(Boolean isDefaultVersion) {
        this.isDefaultVersion = isDefaultVersion;
        return this;
    }

    /**
     * Get the versionId property: &lt;p&gt;The identifier for the policy version.&lt;/p&gt; &lt;p&gt;Policy version
     * identifiers always begin with &lt;code&gt;v&lt;/code&gt; (always lowercase). When a policy is created, the first
     * policy version is &lt;code&gt;v1&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @return the versionId value.
     */
    public String versionId() {
        return this.versionId;
    }

    /**
     * Set the versionId property: &lt;p&gt;The identifier for the policy version.&lt;/p&gt; &lt;p&gt;Policy version
     * identifiers always begin with &lt;code&gt;v&lt;/code&gt; (always lowercase). When a policy is created, the first
     * policy version is &lt;code&gt;v1&lt;/code&gt;. &lt;/p&gt;.
     * 
     * @param versionId the versionId value to set.
     * @return the AwsIamPolicyVersionProperties object itself.
     */
    public AwsIamPolicyVersionProperties withVersionId(String versionId) {
        this.versionId = versionId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createDate",
            this.createDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createDate));
        jsonWriter.writeStringField("document", this.document);
        jsonWriter.writeBooleanField("isDefaultVersion", this.isDefaultVersion);
        jsonWriter.writeStringField("versionId", this.versionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsIamPolicyVersionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsIamPolicyVersionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsIamPolicyVersionProperties.
     */
    public static AwsIamPolicyVersionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsIamPolicyVersionProperties deserializedAwsIamPolicyVersionProperties
                = new AwsIamPolicyVersionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createDate".equals(fieldName)) {
                    deserializedAwsIamPolicyVersionProperties.createDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("document".equals(fieldName)) {
                    deserializedAwsIamPolicyVersionProperties.document = reader.getString();
                } else if ("isDefaultVersion".equals(fieldName)) {
                    deserializedAwsIamPolicyVersionProperties.isDefaultVersion
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("versionId".equals(fieldName)) {
                    deserializedAwsIamPolicyVersionProperties.versionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsIamPolicyVersionProperties;
        });
    }
}
