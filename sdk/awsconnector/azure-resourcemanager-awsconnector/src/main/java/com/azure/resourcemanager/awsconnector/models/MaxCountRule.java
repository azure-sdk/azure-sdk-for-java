// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of MaxCountRule.
 */
@Fluent
public final class MaxCountRule implements JsonSerializable<MaxCountRule> {
    /*
     * Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application
     * version.
     */
    private Boolean deleteSourceFromS3;

    /*
     * Specify true to apply the rule, or false to disable it.
     */
    private Boolean enabled;

    /*
     * Specify the maximum number of application versions to retain.
     */
    private Integer maxCount;

    /**
     * Creates an instance of MaxCountRule class.
     */
    public MaxCountRule() {
    }

    /**
     * Get the deleteSourceFromS3 property: Set to true to delete a version's source bundle from Amazon S3 when Elastic
     * Beanstalk deletes the application version.
     * 
     * @return the deleteSourceFromS3 value.
     */
    public Boolean deleteSourceFromS3() {
        return this.deleteSourceFromS3;
    }

    /**
     * Set the deleteSourceFromS3 property: Set to true to delete a version's source bundle from Amazon S3 when Elastic
     * Beanstalk deletes the application version.
     * 
     * @param deleteSourceFromS3 the deleteSourceFromS3 value to set.
     * @return the MaxCountRule object itself.
     */
    public MaxCountRule withDeleteSourceFromS3(Boolean deleteSourceFromS3) {
        this.deleteSourceFromS3 = deleteSourceFromS3;
        return this;
    }

    /**
     * Get the enabled property: Specify true to apply the rule, or false to disable it.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Specify true to apply the rule, or false to disable it.
     * 
     * @param enabled the enabled value to set.
     * @return the MaxCountRule object itself.
     */
    public MaxCountRule withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the maxCount property: Specify the maximum number of application versions to retain.
     * 
     * @return the maxCount value.
     */
    public Integer maxCount() {
        return this.maxCount;
    }

    /**
     * Set the maxCount property: Specify the maximum number of application versions to retain.
     * 
     * @param maxCount the maxCount value to set.
     * @return the MaxCountRule object itself.
     */
    public MaxCountRule withMaxCount(Integer maxCount) {
        this.maxCount = maxCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("deleteSourceFromS3", this.deleteSourceFromS3);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeNumberField("maxCount", this.maxCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaxCountRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaxCountRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaxCountRule.
     */
    public static MaxCountRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaxCountRule deserializedMaxCountRule = new MaxCountRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deleteSourceFromS3".equals(fieldName)) {
                    deserializedMaxCountRule.deleteSourceFromS3 = reader.getNullable(JsonReader::getBoolean);
                } else if ("enabled".equals(fieldName)) {
                    deserializedMaxCountRule.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("maxCount".equals(fieldName)) {
                    deserializedMaxCountRule.maxCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaxCountRule;
        });
    }
}
