// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Definition of awsKmsKey.
 */
@Fluent
public final class AwsKmsKeyProperties implements JsonSerializable<AwsKmsKeyProperties> {
    /*
     * Property arn
     */
    private String arn;

    /*
     * Skips ('bypasses') the key policy lockout safety check. The default value is false. Setting this value to true
     * increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately. For
     * more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key)
     * in the *Developer Guide*. Use this parameter only when you intend to prevent the principal that is making the
     * request from making a subsequent
     * [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
     */
    private Boolean bypassPolicyLockoutSafetyCheck;

    /*
     * A description of the KMS key. Use a description that helps you to distinguish this KMS key from others in the
     * account, such as its intended use.
     */
    private String description;

    /*
     * Enables automatic rotation of the key material for the specified KMS key. By default, automatic key rotation is
     * not enabled. KMS supports automatic rotation only for symmetric encryption KMS keys (``KeySpec`` =
     * ``SYMMETRIC_DEFAULT``). For asymmetric KMS keys, HMAC KMS keys, and KMS keys with Origin ``EXTERNAL``, omit the
     * ``EnableKeyRotation`` property or set it to ``false``. To enable automatic key rotation of the key material for a
     * multi-Region KMS key, set ``EnableKeyRotation`` to ``true`` on the primary key (created by using
     * ``AWS::KMS::Key``). KMS copies the rotation status to all replica keys. For details, see [Rotating multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate) in
     * the *Developer Guide*. When you enable automatic rotation, KMS automatically creates new key material for the KMS
     * key one year after the enable date and every year thereafter. KMS retains all key material until you delete the
     * KMS key. For detailed information about automatic key rotation, see [Rotating KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html) in the *Developer Guide*.
     */
    private Boolean enableKeyRotation;

    /*
     * Specifies whether the KMS key is enabled. Disabled KMS keys cannot be used in cryptographic operations. When
     * ``Enabled`` is ``true``, the *key state* of the KMS key is ``Enabled``. When ``Enabled`` is ``false``, the key
     * state of the KMS key is ``Disabled``. The default value is ``true``. The actual key state of the KMS key might be
     * affected by actions taken outside of CloudFormation, such as running the
     * [EnableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_EnableKey.html),
     * [DisableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DisableKey.html), or
     * [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
     * operations. For information about the key states of a KMS key, see [Key state: Effect on your KMS
     * key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the *Developer Guide*.
     */
    private Boolean enabled;

    /*
     * Property keyId
     */
    private String keyId;

    /*
     * The key policy to attach to the KMS key. If you provide a key policy, it must meet the following criteria: + The
     * key policy must allow the caller to make a subsequent
     * [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
     * This reduces the risk that the KMS key becomes unmanageable. For more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-
     * enable-iam) in the *Developer Guide*. (To omit this condition, set ``BypassPolicyLockoutSafetyCheck`` to true.) +
     * Each statement in the key policy must contain one or more principals. The principals in the key policy must exist
     * and be visible to KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to
     * enforce a delay before including the new principal in a key policy because the new principal might not be
     * immediately visible to KMS. For more information, see [Changes that I make are not always immediately
     * visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual
     * -consistency) in the *User Guide*. If you do not provide a key policy, KMS attaches a default key policy to the
     * KMS key. For more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) in the
     * *Developer Guide*. A key policy document can include only the following characters: + Printable ASCII characters
     * + Printable characters in the Basic Latin and Latin-1 Supplement character set + The tab (``\u0009``), line feed
     * (``\u000A``), and carriage return (``\u000D``) special characters *Minimum*: ``1`` *Maximum*: ``32768``
     */
    private Map<String, Object> keyPolicy;

    /*
     * Specifies the type of KMS key to create. The default value, ``SYMMETRIC_DEFAULT``, creates a KMS key with a
     * 256-bit symmetric key for encryption and decryption. In China Regions, ``SYMMETRIC_DEFAULT`` creates a 128-bit
     * symmetric key that uses SM4 encryption. You can't change the ``KeySpec`` value after the KMS key is created. For
     * help choosing a key spec for your KMS key, see [Choosing a KMS key
     * type](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html) in the *Developer Guide*. The
     * ``KeySpec`` property determines the type of key material in the KMS key and the algorithms that the KMS key
     * supports. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key
     * policy or IAM policy. For more information, see [condition
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms) in the
     * *Developer Guide*. If you change the value of the ``KeySpec`` property on an existing KMS key, the update request
     * fails, regardless of the value of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)
     * . This prevents you from accidentally deleting a KMS key by changing an immutable property value. [services that
     * are integrated with](https://docs.aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption
     * KMS keys to protect your data. These services do not support encryption with asymmetric KMS keys. For help
     * determining whether a KMS key is asymmetric, see [Identifying asymmetric KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html) in the *Developer Guide*. KMS
     * supports the following key specs for KMS keys: + Symmetric encryption key (default) + ``SYMMETRIC_DEFAULT``
     * (AES-256-GCM) + HMAC keys (symmetric) + ``HMAC_224`` + ``HMAC_256`` + ``HMAC_384`` + ``HMAC_512`` + Asymmetric
     * RSA key pairs + ``RSA_2048`` + ``RSA_3072`` + ``RSA_4096`` + Asymmetric NIST-recommended elliptic curve key pairs
     * + ``ECC_NIST_P256`` (secp256r1) + ``ECC_NIST_P384`` (secp384r1) + ``ECC_NIST_P521`` (secp521r1) + Other
     * asymmetric elliptic curve key pairs + ``ECC_SECG_P256K1`` (secp256k1), commonly used for cryptocurrencies. + SM2
     * key pairs (China Regions only) + ``SM2``
     */
    private KeySpec keySpec;

    /*
     * Determines the [cryptographic
     * operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for
     * which you can use the KMS key. The default value is ``ENCRYPT_DECRYPT``. This property is required for asymmetric
     * KMS keys and HMAC KMS keys. You can't change the ``KeyUsage`` value after the KMS key is created. If you change
     * the value of the ``KeyUsage`` property on an existing KMS key, the update request fails, regardless of the value
     * of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)
     * . This prevents you from accidentally deleting a KMS key by changing an immutable property value. Select only one
     * valid value. + For symmetric encryption KMS keys, omit the property or specify ``ENCRYPT_DECRYPT``. + For
     * asymmetric KMS keys with RSA key material, specify ``ENCRYPT_DECRYPT`` or ``SIGN_VERIFY``. + For asymmetric KMS
     * keys with ECC key material, specify ``SIGN_VERIFY``. + For asymmetric KMS keys with SM2 (China Regions only) key
     * material, specify ``ENCRYPT_DECRYPT`` or ``SIGN_VERIFY``. + For HMAC KMS keys, specify ``GENERATE_VERIFY_MAC``.
     */
    private KeyUsage keyUsage;

    /*
     * Creates a multi-Region primary key that you can replicate in other AWS-Regions. You can't change the
     * ``MultiRegion`` value after the KMS key is created. For a list of AWS-Regions in which multi-Region keys are
     * supported, see [Multi-Region keys
     * in](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the **. If you
     * change the value of the ``MultiRegion`` property on an existing KMS key, the update request fails, regardless of
     * the value of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)
     * . This prevents you from accidentally deleting a KMS key by changing an immutable property value. For a
     * multi-Region key, set to this property to ``true``. For a single-Region key, omit this property or set it to
     * ``false``. The default value is ``false``. *Multi-Region keys* are an KMS feature that lets you create multiple
     * interoperable KMS keys in different AWS-Regions. Because these KMS keys have the same key ID, key material, and
     * other metadata, you can use them to encrypt data in one AWS-Region and decrypt it in a different AWS-Region
     * without making a cross-Region call or exposing the plaintext data. For more information, see [Multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the *Developer
     * Guide*. You can create a symmetric encryption, HMAC, or asymmetric multi-Region KMS key, and you can create a
     * multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.
     * To create a replica of this primary key in a different AWS-Region , create an
     * [AWS::KMS::ReplicaKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-replicakey
     * .html) resource in a CloudFormation stack in the replica Region. Specify the key ARN of this primary key.
     */
    private Boolean multiRegion;

    /*
     * The source of the key material for the KMS key. You cannot change the origin after you create the KMS key. The
     * default is ``AWS_KMS``, which means that KMS creates the key material. To [create a KMS key with no key
     * material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html) (for imported key
     * material), set this value to ``EXTERNAL``. For more information about importing key material into KMS, see
     * [Importing Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html) in the
     * *Developer Guide*. You can ignore ``ENABLED`` when Origin is ``EXTERNAL``. When a KMS key with Origin
     * ``EXTERNAL`` is created, the key state is ``PENDING_IMPORT`` and ``ENABLED`` is ``false``. After you import the
     * key material, ``ENABLED`` updated to ``true``. The KMS key can then be used for Cryptographic Operations. CFN
     * doesn't support creating an ``Origin`` parameter of the ``AWS_CLOUDHSM`` or ``EXTERNAL_KEY_STORE`` values.
     */
    private Origin origin;

    /*
     * Specifies the number of days in the waiting period before KMS deletes a KMS key that has been removed from a
     * CloudFormation stack. Enter a value between 7 and 30 days. The default value is 30 days. When you remove a KMS
     * key from a CloudFormation stack, KMS schedules the KMS key for deletion and starts the mandatory waiting period.
     * The ``PendingWindowInDays`` property determines the length of waiting period. During the waiting period, the key
     * state of KMS key is ``Pending Deletion`` or ``Pending Replica Deletion``, which prevents the KMS key from being
     * used in cryptographic operations. When the waiting period expires, KMS permanently deletes the KMS key. KMS will
     * not delete a [multi-Region primary
     * key](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) that has replica
     * keys. If you remove a multi-Region primary key from a CloudFormation stack, its key state changes to
     * ``PendingReplicaDeletion`` so it cannot be replicated or used in cryptographic operations. This state can persist
     * indefinitely. When the last of its replica keys is deleted, the key state of the primary key changes to
     * ``PendingDeletion`` and the waiting period specified by ``PendingWindowInDays`` begins. When this waiting period
     * expires, KMS deletes the primary key. For details, see [Deleting multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html) in the *Developer
     * Guide*. You cannot use a CloudFormation template to cancel deletion of the KMS key after you remove it from the
     * stack, regardless of the waiting period. If you specify a KMS key in your template, even one with the same name,
     * CloudFormation creates a new KMS key. To cancel deletion of a KMS key, use the KMS console or the
     * [CancelKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_CancelKeyDeletion.html) operation.
     * For information about the ``Pending Deletion`` and ``Pending Replica Deletion`` key states, see [Key state:
     * Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the *Developer
     * Guide*. For more information about deleting KMS keys, see the
     * [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html) operation
     * in the *API Reference* and [Deleting KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html) in the *Developer Guide*.
     */
    private Integer pendingWindowInDays;

    /*
     * Property rotationPeriodInDays
     */
    private Integer rotationPeriodInDays;

    /*
     * Assigns one or more tags to the replica key. Tagging or untagging a KMS key can allow or deny permission to the
     * KMS key. For details, see [ABAC for](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the
     * *Developer Guide*. For information about tags in KMS, see [Tagging
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html) in the *Developer Guide*. For
     * information about tags in CloudFormation, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     */
    private List<TagAutoGenerated35> tags;

    /**
     * Creates an instance of AwsKmsKeyProperties class.
     */
    public AwsKmsKeyProperties() {
    }

    /**
     * Get the arn property: Property arn.
     * 
     * @return the arn value.
     */
    public String arn() {
        return this.arn;
    }

    /**
     * Set the arn property: Property arn.
     * 
     * @param arn the arn value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withArn(String arn) {
        this.arn = arn;
        return this;
    }

    /**
     * Get the bypassPolicyLockoutSafetyCheck property: Skips ('bypasses') the key policy lockout safety check. The
     * default value is false. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do
     * not set this value to true indiscriminately. For more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key)
     * in the *Developer Guide*. Use this parameter only when you intend to prevent the principal that is making the
     * request from making a subsequent
     * [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
     * 
     * @return the bypassPolicyLockoutSafetyCheck value.
     */
    public Boolean bypassPolicyLockoutSafetyCheck() {
        return this.bypassPolicyLockoutSafetyCheck;
    }

    /**
     * Set the bypassPolicyLockoutSafetyCheck property: Skips ('bypasses') the key policy lockout safety check. The
     * default value is false. Setting this value to true increases the risk that the KMS key becomes unmanageable. Do
     * not set this value to true indiscriminately. For more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key)
     * in the *Developer Guide*. Use this parameter only when you intend to prevent the principal that is making the
     * request from making a subsequent
     * [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
     * 
     * @param bypassPolicyLockoutSafetyCheck the bypassPolicyLockoutSafetyCheck value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withBypassPolicyLockoutSafetyCheck(Boolean bypassPolicyLockoutSafetyCheck) {
        this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
        return this;
    }

    /**
     * Get the description property: A description of the KMS key. Use a description that helps you to distinguish this
     * KMS key from others in the account, such as its intended use.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the KMS key. Use a description that helps you to distinguish this
     * KMS key from others in the account, such as its intended use.
     * 
     * @param description the description value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the enableKeyRotation property: Enables automatic rotation of the key material for the specified KMS key. By
     * default, automatic key rotation is not enabled. KMS supports automatic rotation only for symmetric encryption KMS
     * keys (``KeySpec`` = ``SYMMETRIC_DEFAULT``). For asymmetric KMS keys, HMAC KMS keys, and KMS keys with Origin
     * ``EXTERNAL``, omit the ``EnableKeyRotation`` property or set it to ``false``. To enable automatic key rotation of
     * the key material for a multi-Region KMS key, set ``EnableKeyRotation`` to ``true`` on the primary key (created by
     * using ``AWS::KMS::Key``). KMS copies the rotation status to all replica keys. For details, see [Rotating
     * multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate) in
     * the *Developer Guide*. When you enable automatic rotation, KMS automatically creates new key material for the KMS
     * key one year after the enable date and every year thereafter. KMS retains all key material until you delete the
     * KMS key. For detailed information about automatic key rotation, see [Rotating KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html) in the *Developer Guide*.
     * 
     * @return the enableKeyRotation value.
     */
    public Boolean enableKeyRotation() {
        return this.enableKeyRotation;
    }

    /**
     * Set the enableKeyRotation property: Enables automatic rotation of the key material for the specified KMS key. By
     * default, automatic key rotation is not enabled. KMS supports automatic rotation only for symmetric encryption KMS
     * keys (``KeySpec`` = ``SYMMETRIC_DEFAULT``). For asymmetric KMS keys, HMAC KMS keys, and KMS keys with Origin
     * ``EXTERNAL``, omit the ``EnableKeyRotation`` property or set it to ``false``. To enable automatic key rotation of
     * the key material for a multi-Region KMS key, set ``EnableKeyRotation`` to ``true`` on the primary key (created by
     * using ``AWS::KMS::Key``). KMS copies the rotation status to all replica keys. For details, see [Rotating
     * multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate) in
     * the *Developer Guide*. When you enable automatic rotation, KMS automatically creates new key material for the KMS
     * key one year after the enable date and every year thereafter. KMS retains all key material until you delete the
     * KMS key. For detailed information about automatic key rotation, see [Rotating KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html) in the *Developer Guide*.
     * 
     * @param enableKeyRotation the enableKeyRotation value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withEnableKeyRotation(Boolean enableKeyRotation) {
        this.enableKeyRotation = enableKeyRotation;
        return this;
    }

    /**
     * Get the enabled property: Specifies whether the KMS key is enabled. Disabled KMS keys cannot be used in
     * cryptographic operations. When ``Enabled`` is ``true``, the *key state* of the KMS key is ``Enabled``. When
     * ``Enabled`` is ``false``, the key state of the KMS key is ``Disabled``. The default value is ``true``. The actual
     * key state of the KMS key might be affected by actions taken outside of CloudFormation, such as running the
     * [EnableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_EnableKey.html),
     * [DisableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DisableKey.html), or
     * [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
     * operations. For information about the key states of a KMS key, see [Key state: Effect on your KMS
     * key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the *Developer Guide*.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Specifies whether the KMS key is enabled. Disabled KMS keys cannot be used in
     * cryptographic operations. When ``Enabled`` is ``true``, the *key state* of the KMS key is ``Enabled``. When
     * ``Enabled`` is ``false``, the key state of the KMS key is ``Disabled``. The default value is ``true``. The actual
     * key state of the KMS key might be affected by actions taken outside of CloudFormation, such as running the
     * [EnableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_EnableKey.html),
     * [DisableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DisableKey.html), or
     * [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
     * operations. For information about the key states of a KMS key, see [Key state: Effect on your KMS
     * key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the *Developer Guide*.
     * 
     * @param enabled the enabled value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the keyId property: Property keyId.
     * 
     * @return the keyId value.
     */
    public String keyId() {
        return this.keyId;
    }

    /**
     * Set the keyId property: Property keyId.
     * 
     * @param keyId the keyId value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withKeyId(String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * Get the keyPolicy property: The key policy to attach to the KMS key. If you provide a key policy, it must meet
     * the following criteria: + The key policy must allow the caller to make a subsequent
     * [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
     * This reduces the risk that the KMS key becomes unmanageable. For more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
     * in the *Developer Guide*. (To omit this condition, set ``BypassPolicyLockoutSafetyCheck`` to true.) + Each
     * statement in the key policy must contain one or more principals. The principals in the key policy must exist and
     * be visible to KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to
     * enforce a delay before including the new principal in a key policy because the new principal might not be
     * immediately visible to KMS. For more information, see [Changes that I make are not always immediately
     * visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
     * in the *User Guide*. If you do not provide a key policy, KMS attaches a default key policy to the KMS key. For
     * more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) in the
     * *Developer Guide*. A key policy document can include only the following characters: + Printable ASCII characters
     * + Printable characters in the Basic Latin and Latin-1 Supplement character set + The tab (``\u0009``), line feed
     * (``\u000A``), and carriage return (``\u000D``) special characters *Minimum*: ``1`` *Maximum*: ``32768``.
     * 
     * @return the keyPolicy value.
     */
    public Map<String, Object> keyPolicy() {
        return this.keyPolicy;
    }

    /**
     * Set the keyPolicy property: The key policy to attach to the KMS key. If you provide a key policy, it must meet
     * the following criteria: + The key policy must allow the caller to make a subsequent
     * [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html) request on the KMS key.
     * This reduces the risk that the KMS key becomes unmanageable. For more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
     * in the *Developer Guide*. (To omit this condition, set ``BypassPolicyLockoutSafetyCheck`` to true.) + Each
     * statement in the key policy must contain one or more principals. The principals in the key policy must exist and
     * be visible to KMS. When you create a new AWS principal (for example, an IAM user or role), you might need to
     * enforce a delay before including the new principal in a key policy because the new principal might not be
     * immediately visible to KMS. For more information, see [Changes that I make are not always immediately
     * visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
     * in the *User Guide*. If you do not provide a key policy, KMS attaches a default key policy to the KMS key. For
     * more information, see [Default key
     * policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default) in the
     * *Developer Guide*. A key policy document can include only the following characters: + Printable ASCII characters
     * + Printable characters in the Basic Latin and Latin-1 Supplement character set + The tab (``\u0009``), line feed
     * (``\u000A``), and carriage return (``\u000D``) special characters *Minimum*: ``1`` *Maximum*: ``32768``.
     * 
     * @param keyPolicy the keyPolicy value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withKeyPolicy(Map<String, Object> keyPolicy) {
        this.keyPolicy = keyPolicy;
        return this;
    }

    /**
     * Get the keySpec property: Specifies the type of KMS key to create. The default value, ``SYMMETRIC_DEFAULT``,
     * creates a KMS key with a 256-bit symmetric key for encryption and decryption. In China Regions,
     * ``SYMMETRIC_DEFAULT`` creates a 128-bit symmetric key that uses SM4 encryption. You can't change the ``KeySpec``
     * value after the KMS key is created. For help choosing a key spec for your KMS key, see [Choosing a KMS key
     * type](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html) in the *Developer Guide*. The
     * ``KeySpec`` property determines the type of key material in the KMS key and the algorithms that the KMS key
     * supports. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key
     * policy or IAM policy. For more information, see [condition
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms) in the
     * *Developer Guide*. If you change the value of the ``KeySpec`` property on an existing KMS key, the update request
     * fails, regardless of the value of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
     * This prevents you from accidentally deleting a KMS key by changing an immutable property value. [services that
     * are integrated with](https://docs.aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption
     * KMS keys to protect your data. These services do not support encryption with asymmetric KMS keys. For help
     * determining whether a KMS key is asymmetric, see [Identifying asymmetric KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html) in the *Developer Guide*. KMS
     * supports the following key specs for KMS keys: + Symmetric encryption key (default) + ``SYMMETRIC_DEFAULT``
     * (AES-256-GCM) + HMAC keys (symmetric) + ``HMAC_224`` + ``HMAC_256`` + ``HMAC_384`` + ``HMAC_512`` + Asymmetric
     * RSA key pairs + ``RSA_2048`` + ``RSA_3072`` + ``RSA_4096`` + Asymmetric NIST-recommended elliptic curve key pairs
     * + ``ECC_NIST_P256`` (secp256r1) + ``ECC_NIST_P384`` (secp384r1) + ``ECC_NIST_P521`` (secp521r1) + Other
     * asymmetric elliptic curve key pairs + ``ECC_SECG_P256K1`` (secp256k1), commonly used for cryptocurrencies. + SM2
     * key pairs (China Regions only) + ``SM2``.
     * 
     * @return the keySpec value.
     */
    public KeySpec keySpec() {
        return this.keySpec;
    }

    /**
     * Set the keySpec property: Specifies the type of KMS key to create. The default value, ``SYMMETRIC_DEFAULT``,
     * creates a KMS key with a 256-bit symmetric key for encryption and decryption. In China Regions,
     * ``SYMMETRIC_DEFAULT`` creates a 128-bit symmetric key that uses SM4 encryption. You can't change the ``KeySpec``
     * value after the KMS key is created. For help choosing a key spec for your KMS key, see [Choosing a KMS key
     * type](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html) in the *Developer Guide*. The
     * ``KeySpec`` property determines the type of key material in the KMS key and the algorithms that the KMS key
     * supports. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key
     * policy or IAM policy. For more information, see [condition
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms) in the
     * *Developer Guide*. If you change the value of the ``KeySpec`` property on an existing KMS key, the update request
     * fails, regardless of the value of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
     * This prevents you from accidentally deleting a KMS key by changing an immutable property value. [services that
     * are integrated with](https://docs.aws.amazon.com/kms/features/#AWS_Service_Integration) use symmetric encryption
     * KMS keys to protect your data. These services do not support encryption with asymmetric KMS keys. For help
     * determining whether a KMS key is asymmetric, see [Identifying asymmetric KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html) in the *Developer Guide*. KMS
     * supports the following key specs for KMS keys: + Symmetric encryption key (default) + ``SYMMETRIC_DEFAULT``
     * (AES-256-GCM) + HMAC keys (symmetric) + ``HMAC_224`` + ``HMAC_256`` + ``HMAC_384`` + ``HMAC_512`` + Asymmetric
     * RSA key pairs + ``RSA_2048`` + ``RSA_3072`` + ``RSA_4096`` + Asymmetric NIST-recommended elliptic curve key pairs
     * + ``ECC_NIST_P256`` (secp256r1) + ``ECC_NIST_P384`` (secp384r1) + ``ECC_NIST_P521`` (secp521r1) + Other
     * asymmetric elliptic curve key pairs + ``ECC_SECG_P256K1`` (secp256k1), commonly used for cryptocurrencies. + SM2
     * key pairs (China Regions only) + ``SM2``.
     * 
     * @param keySpec the keySpec value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withKeySpec(KeySpec keySpec) {
        this.keySpec = keySpec;
        return this;
    }

    /**
     * Get the keyUsage property: Determines the [cryptographic
     * operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for
     * which you can use the KMS key. The default value is ``ENCRYPT_DECRYPT``. This property is required for asymmetric
     * KMS keys and HMAC KMS keys. You can't change the ``KeyUsage`` value after the KMS key is created. If you change
     * the value of the ``KeyUsage`` property on an existing KMS key, the update request fails, regardless of the value
     * of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
     * This prevents you from accidentally deleting a KMS key by changing an immutable property value. Select only one
     * valid value. + For symmetric encryption KMS keys, omit the property or specify ``ENCRYPT_DECRYPT``. + For
     * asymmetric KMS keys with RSA key material, specify ``ENCRYPT_DECRYPT`` or ``SIGN_VERIFY``. + For asymmetric KMS
     * keys with ECC key material, specify ``SIGN_VERIFY``. + For asymmetric KMS keys with SM2 (China Regions only) key
     * material, specify ``ENCRYPT_DECRYPT`` or ``SIGN_VERIFY``. + For HMAC KMS keys, specify ``GENERATE_VERIFY_MAC``.
     * 
     * @return the keyUsage value.
     */
    public KeyUsage keyUsage() {
        return this.keyUsage;
    }

    /**
     * Set the keyUsage property: Determines the [cryptographic
     * operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations) for
     * which you can use the KMS key. The default value is ``ENCRYPT_DECRYPT``. This property is required for asymmetric
     * KMS keys and HMAC KMS keys. You can't change the ``KeyUsage`` value after the KMS key is created. If you change
     * the value of the ``KeyUsage`` property on an existing KMS key, the update request fails, regardless of the value
     * of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
     * This prevents you from accidentally deleting a KMS key by changing an immutable property value. Select only one
     * valid value. + For symmetric encryption KMS keys, omit the property or specify ``ENCRYPT_DECRYPT``. + For
     * asymmetric KMS keys with RSA key material, specify ``ENCRYPT_DECRYPT`` or ``SIGN_VERIFY``. + For asymmetric KMS
     * keys with ECC key material, specify ``SIGN_VERIFY``. + For asymmetric KMS keys with SM2 (China Regions only) key
     * material, specify ``ENCRYPT_DECRYPT`` or ``SIGN_VERIFY``. + For HMAC KMS keys, specify ``GENERATE_VERIFY_MAC``.
     * 
     * @param keyUsage the keyUsage value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withKeyUsage(KeyUsage keyUsage) {
        this.keyUsage = keyUsage;
        return this;
    }

    /**
     * Get the multiRegion property: Creates a multi-Region primary key that you can replicate in other AWS-Regions. You
     * can't change the ``MultiRegion`` value after the KMS key is created. For a list of AWS-Regions in which
     * multi-Region keys are supported, see [Multi-Region keys
     * in](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the **. If you
     * change the value of the ``MultiRegion`` property on an existing KMS key, the update request fails, regardless of
     * the value of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
     * This prevents you from accidentally deleting a KMS key by changing an immutable property value. For a
     * multi-Region key, set to this property to ``true``. For a single-Region key, omit this property or set it to
     * ``false``. The default value is ``false``. *Multi-Region keys* are an KMS feature that lets you create multiple
     * interoperable KMS keys in different AWS-Regions. Because these KMS keys have the same key ID, key material, and
     * other metadata, you can use them to encrypt data in one AWS-Region and decrypt it in a different AWS-Region
     * without making a cross-Region call or exposing the plaintext data. For more information, see [Multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the *Developer
     * Guide*. You can create a symmetric encryption, HMAC, or asymmetric multi-Region KMS key, and you can create a
     * multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.
     * To create a replica of this primary key in a different AWS-Region , create an
     * [AWS::KMS::ReplicaKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-replicakey.html)
     * resource in a CloudFormation stack in the replica Region. Specify the key ARN of this primary key.
     * 
     * @return the multiRegion value.
     */
    public Boolean multiRegion() {
        return this.multiRegion;
    }

    /**
     * Set the multiRegion property: Creates a multi-Region primary key that you can replicate in other AWS-Regions. You
     * can't change the ``MultiRegion`` value after the KMS key is created. For a list of AWS-Regions in which
     * multi-Region keys are supported, see [Multi-Region keys
     * in](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the **. If you
     * change the value of the ``MultiRegion`` property on an existing KMS key, the update request fails, regardless of
     * the value of the [UpdateReplacePolicy
     * attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html).
     * This prevents you from accidentally deleting a KMS key by changing an immutable property value. For a
     * multi-Region key, set to this property to ``true``. For a single-Region key, omit this property or set it to
     * ``false``. The default value is ``false``. *Multi-Region keys* are an KMS feature that lets you create multiple
     * interoperable KMS keys in different AWS-Regions. Because these KMS keys have the same key ID, key material, and
     * other metadata, you can use them to encrypt data in one AWS-Region and decrypt it in a different AWS-Region
     * without making a cross-Region call or exposing the plaintext data. For more information, see [Multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) in the *Developer
     * Guide*. You can create a symmetric encryption, HMAC, or asymmetric multi-Region KMS key, and you can create a
     * multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.
     * To create a replica of this primary key in a different AWS-Region , create an
     * [AWS::KMS::ReplicaKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-replicakey.html)
     * resource in a CloudFormation stack in the replica Region. Specify the key ARN of this primary key.
     * 
     * @param multiRegion the multiRegion value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withMultiRegion(Boolean multiRegion) {
        this.multiRegion = multiRegion;
        return this;
    }

    /**
     * Get the origin property: The source of the key material for the KMS key. You cannot change the origin after you
     * create the KMS key. The default is ``AWS_KMS``, which means that KMS creates the key material. To [create a KMS
     * key with no key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html)
     * (for imported key material), set this value to ``EXTERNAL``. For more information about importing key material
     * into KMS, see [Importing Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html)
     * in the *Developer Guide*. You can ignore ``ENABLED`` when Origin is ``EXTERNAL``. When a KMS key with Origin
     * ``EXTERNAL`` is created, the key state is ``PENDING_IMPORT`` and ``ENABLED`` is ``false``. After you import the
     * key material, ``ENABLED`` updated to ``true``. The KMS key can then be used for Cryptographic Operations. CFN
     * doesn't support creating an ``Origin`` parameter of the ``AWS_CLOUDHSM`` or ``EXTERNAL_KEY_STORE`` values.
     * 
     * @return the origin value.
     */
    public Origin origin() {
        return this.origin;
    }

    /**
     * Set the origin property: The source of the key material for the KMS key. You cannot change the origin after you
     * create the KMS key. The default is ``AWS_KMS``, which means that KMS creates the key material. To [create a KMS
     * key with no key material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html)
     * (for imported key material), set this value to ``EXTERNAL``. For more information about importing key material
     * into KMS, see [Importing Key Material](https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html)
     * in the *Developer Guide*. You can ignore ``ENABLED`` when Origin is ``EXTERNAL``. When a KMS key with Origin
     * ``EXTERNAL`` is created, the key state is ``PENDING_IMPORT`` and ``ENABLED`` is ``false``. After you import the
     * key material, ``ENABLED`` updated to ``true``. The KMS key can then be used for Cryptographic Operations. CFN
     * doesn't support creating an ``Origin`` parameter of the ``AWS_CLOUDHSM`` or ``EXTERNAL_KEY_STORE`` values.
     * 
     * @param origin the origin value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withOrigin(Origin origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the pendingWindowInDays property: Specifies the number of days in the waiting period before KMS deletes a KMS
     * key that has been removed from a CloudFormation stack. Enter a value between 7 and 30 days. The default value is
     * 30 days. When you remove a KMS key from a CloudFormation stack, KMS schedules the KMS key for deletion and starts
     * the mandatory waiting period. The ``PendingWindowInDays`` property determines the length of waiting period.
     * During the waiting period, the key state of KMS key is ``Pending Deletion`` or ``Pending Replica Deletion``,
     * which prevents the KMS key from being used in cryptographic operations. When the waiting period expires, KMS
     * permanently deletes the KMS key. KMS will not delete a [multi-Region primary
     * key](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) that has replica
     * keys. If you remove a multi-Region primary key from a CloudFormation stack, its key state changes to
     * ``PendingReplicaDeletion`` so it cannot be replicated or used in cryptographic operations. This state can persist
     * indefinitely. When the last of its replica keys is deleted, the key state of the primary key changes to
     * ``PendingDeletion`` and the waiting period specified by ``PendingWindowInDays`` begins. When this waiting period
     * expires, KMS deletes the primary key. For details, see [Deleting multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html) in the *Developer
     * Guide*. You cannot use a CloudFormation template to cancel deletion of the KMS key after you remove it from the
     * stack, regardless of the waiting period. If you specify a KMS key in your template, even one with the same name,
     * CloudFormation creates a new KMS key. To cancel deletion of a KMS key, use the KMS console or the
     * [CancelKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_CancelKeyDeletion.html) operation.
     * For information about the ``Pending Deletion`` and ``Pending Replica Deletion`` key states, see [Key state:
     * Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the *Developer
     * Guide*. For more information about deleting KMS keys, see the
     * [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html) operation
     * in the *API Reference* and [Deleting KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html) in the *Developer Guide*.
     * 
     * @return the pendingWindowInDays value.
     */
    public Integer pendingWindowInDays() {
        return this.pendingWindowInDays;
    }

    /**
     * Set the pendingWindowInDays property: Specifies the number of days in the waiting period before KMS deletes a KMS
     * key that has been removed from a CloudFormation stack. Enter a value between 7 and 30 days. The default value is
     * 30 days. When you remove a KMS key from a CloudFormation stack, KMS schedules the KMS key for deletion and starts
     * the mandatory waiting period. The ``PendingWindowInDays`` property determines the length of waiting period.
     * During the waiting period, the key state of KMS key is ``Pending Deletion`` or ``Pending Replica Deletion``,
     * which prevents the KMS key from being used in cryptographic operations. When the waiting period expires, KMS
     * permanently deletes the KMS key. KMS will not delete a [multi-Region primary
     * key](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html) that has replica
     * keys. If you remove a multi-Region primary key from a CloudFormation stack, its key state changes to
     * ``PendingReplicaDeletion`` so it cannot be replicated or used in cryptographic operations. This state can persist
     * indefinitely. When the last of its replica keys is deleted, the key state of the primary key changes to
     * ``PendingDeletion`` and the waiting period specified by ``PendingWindowInDays`` begins. When this waiting period
     * expires, KMS deletes the primary key. For details, see [Deleting multi-Region
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html) in the *Developer
     * Guide*. You cannot use a CloudFormation template to cancel deletion of the KMS key after you remove it from the
     * stack, regardless of the waiting period. If you specify a KMS key in your template, even one with the same name,
     * CloudFormation creates a new KMS key. To cancel deletion of a KMS key, use the KMS console or the
     * [CancelKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_CancelKeyDeletion.html) operation.
     * For information about the ``Pending Deletion`` and ``Pending Replica Deletion`` key states, see [Key state:
     * Effect on your KMS key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html) in the *Developer
     * Guide*. For more information about deleting KMS keys, see the
     * [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html) operation
     * in the *API Reference* and [Deleting KMS
     * keys](https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html) in the *Developer Guide*.
     * 
     * @param pendingWindowInDays the pendingWindowInDays value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withPendingWindowInDays(Integer pendingWindowInDays) {
        this.pendingWindowInDays = pendingWindowInDays;
        return this;
    }

    /**
     * Get the rotationPeriodInDays property: Property rotationPeriodInDays.
     * 
     * @return the rotationPeriodInDays value.
     */
    public Integer rotationPeriodInDays() {
        return this.rotationPeriodInDays;
    }

    /**
     * Set the rotationPeriodInDays property: Property rotationPeriodInDays.
     * 
     * @param rotationPeriodInDays the rotationPeriodInDays value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withRotationPeriodInDays(Integer rotationPeriodInDays) {
        this.rotationPeriodInDays = rotationPeriodInDays;
        return this;
    }

    /**
     * Get the tags property: Assigns one or more tags to the replica key. Tagging or untagging a KMS key can allow or
     * deny permission to the KMS key. For details, see [ABAC
     * for](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the *Developer Guide*. For information
     * about tags in KMS, see [Tagging keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html) in
     * the *Developer Guide*. For information about tags in CloudFormation, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     * 
     * @return the tags value.
     */
    public List<TagAutoGenerated35> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Assigns one or more tags to the replica key. Tagging or untagging a KMS key can allow or
     * deny permission to the KMS key. For details, see [ABAC
     * for](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html) in the *Developer Guide*. For information
     * about tags in KMS, see [Tagging keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html) in
     * the *Developer Guide*. For information about tags in CloudFormation, see
     * [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
     * 
     * @param tags the tags value to set.
     * @return the AwsKmsKeyProperties object itself.
     */
    public AwsKmsKeyProperties withTags(List<TagAutoGenerated35> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("arn", this.arn);
        jsonWriter.writeBooleanField("bypassPolicyLockoutSafetyCheck", this.bypassPolicyLockoutSafetyCheck);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeBooleanField("enableKeyRotation", this.enableKeyRotation);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("keyId", this.keyId);
        jsonWriter.writeMapField("keyPolicy", this.keyPolicy, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("keySpec", this.keySpec == null ? null : this.keySpec.toString());
        jsonWriter.writeStringField("keyUsage", this.keyUsage == null ? null : this.keyUsage.toString());
        jsonWriter.writeBooleanField("multiRegion", this.multiRegion);
        jsonWriter.writeStringField("origin", this.origin == null ? null : this.origin.toString());
        jsonWriter.writeNumberField("pendingWindowInDays", this.pendingWindowInDays);
        jsonWriter.writeNumberField("rotationPeriodInDays", this.rotationPeriodInDays);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AwsKmsKeyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AwsKmsKeyProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AwsKmsKeyProperties.
     */
    public static AwsKmsKeyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AwsKmsKeyProperties deserializedAwsKmsKeyProperties = new AwsKmsKeyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arn".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.arn = reader.getString();
                } else if ("bypassPolicyLockoutSafetyCheck".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.bypassPolicyLockoutSafetyCheck
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("description".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.description = reader.getString();
                } else if ("enableKeyRotation".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.enableKeyRotation = reader.getNullable(JsonReader::getBoolean);
                } else if ("enabled".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("keyId".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.keyId = reader.getString();
                } else if ("keyPolicy".equals(fieldName)) {
                    Map<String, Object> keyPolicy = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedAwsKmsKeyProperties.keyPolicy = keyPolicy;
                } else if ("keySpec".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.keySpec = KeySpec.fromString(reader.getString());
                } else if ("keyUsage".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.keyUsage = KeyUsage.fromString(reader.getString());
                } else if ("multiRegion".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.multiRegion = reader.getNullable(JsonReader::getBoolean);
                } else if ("origin".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.origin = Origin.fromString(reader.getString());
                } else if ("pendingWindowInDays".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.pendingWindowInDays = reader.getNullable(JsonReader::getInt);
                } else if ("rotationPeriodInDays".equals(fieldName)) {
                    deserializedAwsKmsKeyProperties.rotationPeriodInDays = reader.getNullable(JsonReader::getInt);
                } else if ("tags".equals(fieldName)) {
                    List<TagAutoGenerated35> tags = reader.readArray(reader1 -> TagAutoGenerated35.fromJson(reader1));
                    deserializedAwsKmsKeyProperties.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAwsKmsKeyProperties;
        });
    }
}
