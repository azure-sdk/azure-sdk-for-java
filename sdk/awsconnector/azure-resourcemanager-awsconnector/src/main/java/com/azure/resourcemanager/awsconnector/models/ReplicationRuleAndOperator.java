// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of ReplicationRuleAndOperator.
 */
@Fluent
public final class ReplicationRuleAndOperator implements JsonSerializable<ReplicationRuleAndOperator> {
    /*
     * An object key name prefix that identifies the subset of objects to which the rule applies.
     */
    private String prefix;

    /*
     * An array of tags containing key and value pairs.
     */
    private List<TagFilter> tagFilters;

    /**
     * Creates an instance of ReplicationRuleAndOperator class.
     */
    public ReplicationRuleAndOperator() {
    }

    /**
     * Get the prefix property: An object key name prefix that identifies the subset of objects to which the rule
     * applies.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: An object key name prefix that identifies the subset of objects to which the rule
     * applies.
     * 
     * @param prefix the prefix value to set.
     * @return the ReplicationRuleAndOperator object itself.
     */
    public ReplicationRuleAndOperator withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the tagFilters property: An array of tags containing key and value pairs.
     * 
     * @return the tagFilters value.
     */
    public List<TagFilter> tagFilters() {
        return this.tagFilters;
    }

    /**
     * Set the tagFilters property: An array of tags containing key and value pairs.
     * 
     * @param tagFilters the tagFilters value to set.
     * @return the ReplicationRuleAndOperator object itself.
     */
    public ReplicationRuleAndOperator withTagFilters(List<TagFilter> tagFilters) {
        this.tagFilters = tagFilters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tagFilters() != null) {
            tagFilters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeArrayField("tagFilters", this.tagFilters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplicationRuleAndOperator from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplicationRuleAndOperator if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplicationRuleAndOperator.
     */
    public static ReplicationRuleAndOperator fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplicationRuleAndOperator deserializedReplicationRuleAndOperator = new ReplicationRuleAndOperator();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedReplicationRuleAndOperator.prefix = reader.getString();
                } else if ("tagFilters".equals(fieldName)) {
                    List<TagFilter> tagFilters = reader.readArray(reader1 -> TagFilter.fromJson(reader1));
                    deserializedReplicationRuleAndOperator.tagFilters = tagFilters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplicationRuleAndOperator;
        });
    }
}
