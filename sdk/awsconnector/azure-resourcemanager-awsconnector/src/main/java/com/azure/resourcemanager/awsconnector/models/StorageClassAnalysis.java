// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of StorageClassAnalysis.
 */
@Fluent
public final class StorageClassAnalysis implements JsonSerializable<StorageClassAnalysis> {
    /*
     * Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported. Specifies
     * how data related to the storage class analysis for an Amazon S3 bucket should be exported.
     */
    private DataExport dataExport;

    /**
     * Creates an instance of StorageClassAnalysis class.
     */
    public StorageClassAnalysis() {
    }

    /**
     * Get the dataExport property: Specifies how data related to the storage class analysis for an Amazon S3 bucket
     * should be exported. Specifies how data related to the storage class analysis for an Amazon S3 bucket should be
     * exported.
     * 
     * @return the dataExport value.
     */
    public DataExport dataExport() {
        return this.dataExport;
    }

    /**
     * Set the dataExport property: Specifies how data related to the storage class analysis for an Amazon S3 bucket
     * should be exported. Specifies how data related to the storage class analysis for an Amazon S3 bucket should be
     * exported.
     * 
     * @param dataExport the dataExport value to set.
     * @return the StorageClassAnalysis object itself.
     */
    public StorageClassAnalysis withDataExport(DataExport dataExport) {
        this.dataExport = dataExport;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataExport() != null) {
            dataExport().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataExport", this.dataExport);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageClassAnalysis from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageClassAnalysis if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageClassAnalysis.
     */
    public static StorageClassAnalysis fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageClassAnalysis deserializedStorageClassAnalysis = new StorageClassAnalysis();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataExport".equals(fieldName)) {
                    deserializedStorageClassAnalysis.dataExport = DataExport.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageClassAnalysis;
        });
    }
}
