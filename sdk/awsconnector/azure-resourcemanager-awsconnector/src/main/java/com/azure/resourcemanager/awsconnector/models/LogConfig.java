// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of LogConfig.
 */
@Fluent
public final class LogConfig implements JsonSerializable<LogConfig> {
    /*
     * <p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>
     */
    private String cloudWatchLogsRoleArn;

    /*
     * <p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping
     * templates, regardless of logging level.</p>
     */
    private Boolean excludeVerboseContent;

    /*
     * <p>The field logging level. Values can be NONE, ERROR, or ALL.</p> <ul> <li> <p> <b>NONE</b>: No field-level logs
     * are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in
     * error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li>
     * <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li>
     * <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level
     * tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each
     * field.</p> </li> </ul> </li> </ul>
     */
    private FieldLogLevelEnumValue fieldLogLevel;

    /**
     * Creates an instance of LogConfig class.
     */
    public LogConfig() {
    }

    /**
     * Get the cloudWatchLogsRoleArn property: &lt;p&gt;The service role that AppSync assumes to publish to CloudWatch
     * logs in your account.&lt;/p&gt;.
     * 
     * @return the cloudWatchLogsRoleArn value.
     */
    public String cloudWatchLogsRoleArn() {
        return this.cloudWatchLogsRoleArn;
    }

    /**
     * Set the cloudWatchLogsRoleArn property: &lt;p&gt;The service role that AppSync assumes to publish to CloudWatch
     * logs in your account.&lt;/p&gt;.
     * 
     * @param cloudWatchLogsRoleArn the cloudWatchLogsRoleArn value to set.
     * @return the LogConfig object itself.
     */
    public LogConfig withCloudWatchLogsRoleArn(String cloudWatchLogsRoleArn) {
        this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
        return this;
    }

    /**
     * Get the excludeVerboseContent property: &lt;p&gt;Set to TRUE to exclude sections that contain information such as
     * headers, context, and evaluated mapping templates, regardless of logging level.&lt;/p&gt;.
     * 
     * @return the excludeVerboseContent value.
     */
    public Boolean excludeVerboseContent() {
        return this.excludeVerboseContent;
    }

    /**
     * Set the excludeVerboseContent property: &lt;p&gt;Set to TRUE to exclude sections that contain information such as
     * headers, context, and evaluated mapping templates, regardless of logging level.&lt;/p&gt;.
     * 
     * @param excludeVerboseContent the excludeVerboseContent value to set.
     * @return the LogConfig object itself.
     */
    public LogConfig withExcludeVerboseContent(Boolean excludeVerboseContent) {
        this.excludeVerboseContent = excludeVerboseContent;
        return this;
    }

    /**
     * Get the fieldLogLevel property: &lt;p&gt;The field logging level. Values can be NONE, ERROR, or ALL.&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NONE&lt;/b&gt;: No field-level logs are captured.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;ERROR&lt;/b&gt;: Logs the following information only for the fields that are in
     * error:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The error section in the server response.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;Field-level errors.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The generated request/response
     * functions that got resolved for error fields.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;ALL&lt;/b&gt;: The following information is logged for all fields in the query:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt;Field-level tracing information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The generated
     * request/response functions that got resolved for each field.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @return the fieldLogLevel value.
     */
    public FieldLogLevelEnumValue fieldLogLevel() {
        return this.fieldLogLevel;
    }

    /**
     * Set the fieldLogLevel property: &lt;p&gt;The field logging level. Values can be NONE, ERROR, or ALL.&lt;/p&gt;
     * &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;NONE&lt;/b&gt;: No field-level logs are captured.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt; &lt;b&gt;ERROR&lt;/b&gt;: Logs the following information only for the fields that are in
     * error:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The error section in the server response.&lt;/p&gt; &lt;/li&gt;
     * &lt;li&gt; &lt;p&gt;Field-level errors.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The generated request/response
     * functions that got resolved for error fields.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;
     * &lt;b&gt;ALL&lt;/b&gt;: The following information is logged for all fields in the query:&lt;/p&gt; &lt;ul&gt;
     * &lt;li&gt; &lt;p&gt;Field-level tracing information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The generated
     * request/response functions that got resolved for each field.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;
     * &lt;/ul&gt;.
     * 
     * @param fieldLogLevel the fieldLogLevel value to set.
     * @return the LogConfig object itself.
     */
    public LogConfig withFieldLogLevel(FieldLogLevelEnumValue fieldLogLevel) {
        this.fieldLogLevel = fieldLogLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fieldLogLevel() != null) {
            fieldLogLevel().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cloudWatchLogsRoleArn", this.cloudWatchLogsRoleArn);
        jsonWriter.writeBooleanField("excludeVerboseContent", this.excludeVerboseContent);
        jsonWriter.writeJsonField("fieldLogLevel", this.fieldLogLevel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogConfig if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the LogConfig.
     */
    public static LogConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogConfig deserializedLogConfig = new LogConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cloudWatchLogsRoleArn".equals(fieldName)) {
                    deserializedLogConfig.cloudWatchLogsRoleArn = reader.getString();
                } else if ("excludeVerboseContent".equals(fieldName)) {
                    deserializedLogConfig.excludeVerboseContent = reader.getNullable(JsonReader::getBoolean);
                } else if ("fieldLogLevel".equals(fieldName)) {
                    deserializedLogConfig.fieldLogLevel = FieldLogLevelEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogConfig;
        });
    }
}
