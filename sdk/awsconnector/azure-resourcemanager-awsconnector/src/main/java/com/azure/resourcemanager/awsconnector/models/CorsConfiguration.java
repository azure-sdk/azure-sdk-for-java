// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of CorsConfiguration.
 */
@Fluent
public final class CorsConfiguration implements JsonSerializable<CorsConfiguration> {
    /*
     * A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the
     * configuration.
     */
    private List<CorsRule> corsRules;

    /**
     * Creates an instance of CorsConfiguration class.
     */
    public CorsConfiguration() {
    }

    /**
     * Get the corsRules property: A set of origins and methods (cross-origin access that you want to allow). You can
     * add up to 100 rules to the configuration.
     * 
     * @return the corsRules value.
     */
    public List<CorsRule> corsRules() {
        return this.corsRules;
    }

    /**
     * Set the corsRules property: A set of origins and methods (cross-origin access that you want to allow). You can
     * add up to 100 rules to the configuration.
     * 
     * @param corsRules the corsRules value to set.
     * @return the CorsConfiguration object itself.
     */
    public CorsConfiguration withCorsRules(List<CorsRule> corsRules) {
        this.corsRules = corsRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (corsRules() != null) {
            corsRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("corsRules", this.corsRules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CorsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CorsConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CorsConfiguration.
     */
    public static CorsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CorsConfiguration deserializedCorsConfiguration = new CorsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("corsRules".equals(fieldName)) {
                    List<CorsRule> corsRules = reader.readArray(reader1 -> CorsRule.fromJson(reader1));
                    deserializedCorsConfiguration.corsRules = corsRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCorsConfiguration;
        });
    }
}
