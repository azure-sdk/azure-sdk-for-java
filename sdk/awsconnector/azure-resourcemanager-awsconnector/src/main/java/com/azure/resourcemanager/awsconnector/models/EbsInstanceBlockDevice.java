// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Definition of EbsInstanceBlockDevice.
 */
@Fluent
public final class EbsInstanceBlockDevice implements JsonSerializable<EbsInstanceBlockDevice> {
    /*
     * <p>The ARN of the Amazon ECS or Fargate task to which the volume is attached.</p>
     */
    private String associatedResource;

    /*
     * <p>The time stamp when the attachment initiated.</p>
     */
    private OffsetDateTime attachTime;

    /*
     * <p>Indicates whether the volume is deleted on instance termination.</p>
     */
    private Boolean deleteOnTermination;

    /*
     * <p>The attachment state.</p>
     */
    private AttachmentStatusEnumValue status;

    /*
     * <p>The ID of the EBS volume.</p>
     */
    private String volumeId;

    /*
     * <p>The ID of the Amazon Web Services account that owns the volume.</p> <p>This parameter is returned only for
     * volumes that are attached to Fargate tasks.</p>
     */
    private String volumeOwnerId;

    /**
     * Creates an instance of EbsInstanceBlockDevice class.
     */
    public EbsInstanceBlockDevice() {
    }

    /**
     * Get the associatedResource property: &lt;p&gt;The ARN of the Amazon ECS or Fargate task to which the volume is
     * attached.&lt;/p&gt;.
     * 
     * @return the associatedResource value.
     */
    public String associatedResource() {
        return this.associatedResource;
    }

    /**
     * Set the associatedResource property: &lt;p&gt;The ARN of the Amazon ECS or Fargate task to which the volume is
     * attached.&lt;/p&gt;.
     * 
     * @param associatedResource the associatedResource value to set.
     * @return the EbsInstanceBlockDevice object itself.
     */
    public EbsInstanceBlockDevice withAssociatedResource(String associatedResource) {
        this.associatedResource = associatedResource;
        return this;
    }

    /**
     * Get the attachTime property: &lt;p&gt;The time stamp when the attachment initiated.&lt;/p&gt;.
     * 
     * @return the attachTime value.
     */
    public OffsetDateTime attachTime() {
        return this.attachTime;
    }

    /**
     * Set the attachTime property: &lt;p&gt;The time stamp when the attachment initiated.&lt;/p&gt;.
     * 
     * @param attachTime the attachTime value to set.
     * @return the EbsInstanceBlockDevice object itself.
     */
    public EbsInstanceBlockDevice withAttachTime(OffsetDateTime attachTime) {
        this.attachTime = attachTime;
        return this;
    }

    /**
     * Get the deleteOnTermination property: &lt;p&gt;Indicates whether the volume is deleted on instance
     * termination.&lt;/p&gt;.
     * 
     * @return the deleteOnTermination value.
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }

    /**
     * Set the deleteOnTermination property: &lt;p&gt;Indicates whether the volume is deleted on instance
     * termination.&lt;/p&gt;.
     * 
     * @param deleteOnTermination the deleteOnTermination value to set.
     * @return the EbsInstanceBlockDevice object itself.
     */
    public EbsInstanceBlockDevice withDeleteOnTermination(Boolean deleteOnTermination) {
        this.deleteOnTermination = deleteOnTermination;
        return this;
    }

    /**
     * Get the status property: &lt;p&gt;The attachment state.&lt;/p&gt;.
     * 
     * @return the status value.
     */
    public AttachmentStatusEnumValue status() {
        return this.status;
    }

    /**
     * Set the status property: &lt;p&gt;The attachment state.&lt;/p&gt;.
     * 
     * @param status the status value to set.
     * @return the EbsInstanceBlockDevice object itself.
     */
    public EbsInstanceBlockDevice withStatus(AttachmentStatusEnumValue status) {
        this.status = status;
        return this;
    }

    /**
     * Get the volumeId property: &lt;p&gt;The ID of the EBS volume.&lt;/p&gt;.
     * 
     * @return the volumeId value.
     */
    public String volumeId() {
        return this.volumeId;
    }

    /**
     * Set the volumeId property: &lt;p&gt;The ID of the EBS volume.&lt;/p&gt;.
     * 
     * @param volumeId the volumeId value to set.
     * @return the EbsInstanceBlockDevice object itself.
     */
    public EbsInstanceBlockDevice withVolumeId(String volumeId) {
        this.volumeId = volumeId;
        return this;
    }

    /**
     * Get the volumeOwnerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the
     * volume.&lt;/p&gt; &lt;p&gt;This parameter is returned only for volumes that are attached to Fargate
     * tasks.&lt;/p&gt;.
     * 
     * @return the volumeOwnerId value.
     */
    public String volumeOwnerId() {
        return this.volumeOwnerId;
    }

    /**
     * Set the volumeOwnerId property: &lt;p&gt;The ID of the Amazon Web Services account that owns the
     * volume.&lt;/p&gt; &lt;p&gt;This parameter is returned only for volumes that are attached to Fargate
     * tasks.&lt;/p&gt;.
     * 
     * @param volumeOwnerId the volumeOwnerId value to set.
     * @return the EbsInstanceBlockDevice object itself.
     */
    public EbsInstanceBlockDevice withVolumeOwnerId(String volumeOwnerId) {
        this.volumeOwnerId = volumeOwnerId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("associatedResource", this.associatedResource);
        jsonWriter.writeStringField("attachTime",
            this.attachTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.attachTime));
        jsonWriter.writeBooleanField("deleteOnTermination", this.deleteOnTermination);
        jsonWriter.writeJsonField("status", this.status);
        jsonWriter.writeStringField("volumeId", this.volumeId);
        jsonWriter.writeStringField("volumeOwnerId", this.volumeOwnerId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EbsInstanceBlockDevice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EbsInstanceBlockDevice if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EbsInstanceBlockDevice.
     */
    public static EbsInstanceBlockDevice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EbsInstanceBlockDevice deserializedEbsInstanceBlockDevice = new EbsInstanceBlockDevice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("associatedResource".equals(fieldName)) {
                    deserializedEbsInstanceBlockDevice.associatedResource = reader.getString();
                } else if ("attachTime".equals(fieldName)) {
                    deserializedEbsInstanceBlockDevice.attachTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("deleteOnTermination".equals(fieldName)) {
                    deserializedEbsInstanceBlockDevice.deleteOnTermination = reader.getNullable(JsonReader::getBoolean);
                } else if ("status".equals(fieldName)) {
                    deserializedEbsInstanceBlockDevice.status = AttachmentStatusEnumValue.fromJson(reader);
                } else if ("volumeId".equals(fieldName)) {
                    deserializedEbsInstanceBlockDevice.volumeId = reader.getString();
                } else if ("volumeOwnerId".equals(fieldName)) {
                    deserializedEbsInstanceBlockDevice.volumeOwnerId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEbsInstanceBlockDevice;
        });
    }
}
