// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of LocalSecondaryIndex.
 */
@Fluent
public final class LocalSecondaryIndex implements JsonSerializable<LocalSecondaryIndex> {
    /*
     * The name of the local secondary index. The name must be unique among all other indexes on this table.
     */
    private String indexName;

    /*
     * The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key
     * types: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key of an item is also known as its *hash
     * attribute*. The term 'hash attribute' derives from DynamoDB's usage of an internal hash function to evenly
     * distribute data items across partitions, based on their partition key values. The sort key of an item is also
     * known as its *range attribute*. The term 'range attribute' derives from the way DynamoDB stores items with the
     * same partition key physically close together, in sorted order by the sort key value.
     */
    private List<KeySchema> keySchema;

    /*
     * Represents attributes that are copied (projected) from the table into the local secondary index. These are in
     * addition to the primary key attributes and index key attributes, which are automatically projected. Represents
     * attributes that are copied (projected) from the table into an index. These are in addition to the primary key
     * attributes and index key attributes, which are automatically projected.
     */
    private Projection projection;

    /**
     * Creates an instance of LocalSecondaryIndex class.
     */
    public LocalSecondaryIndex() {
    }

    /**
     * Get the indexName property: The name of the local secondary index. The name must be unique among all other
     * indexes on this table.
     * 
     * @return the indexName value.
     */
    public String indexName() {
        return this.indexName;
    }

    /**
     * Set the indexName property: The name of the local secondary index. The name must be unique among all other
     * indexes on this table.
     * 
     * @param indexName the indexName value to set.
     * @return the LocalSecondaryIndex object itself.
     */
    public LocalSecondaryIndex withIndexName(String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Get the keySchema property: The complete key schema for the local secondary index, consisting of one or more
     * pairs of attribute names and key types: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key of an
     * item is also known as its *hash attribute*. The term 'hash attribute' derives from DynamoDB's usage of an
     * internal hash function to evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its *range attribute*. The term 'range attribute' derives from the way
     * DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key
     * value.
     * 
     * @return the keySchema value.
     */
    public List<KeySchema> keySchema() {
        return this.keySchema;
    }

    /**
     * Set the keySchema property: The complete key schema for the local secondary index, consisting of one or more
     * pairs of attribute names and key types: + ``HASH`` - partition key + ``RANGE`` - sort key The partition key of an
     * item is also known as its *hash attribute*. The term 'hash attribute' derives from DynamoDB's usage of an
     * internal hash function to evenly distribute data items across partitions, based on their partition key values.
     * The sort key of an item is also known as its *range attribute*. The term 'range attribute' derives from the way
     * DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key
     * value.
     * 
     * @param keySchema the keySchema value to set.
     * @return the LocalSecondaryIndex object itself.
     */
    public LocalSecondaryIndex withKeySchema(List<KeySchema> keySchema) {
        this.keySchema = keySchema;
        return this;
    }

    /**
     * Get the projection property: Represents attributes that are copied (projected) from the table into the local
     * secondary index. These are in addition to the primary key attributes and index key attributes, which are
     * automatically projected. Represents attributes that are copied (projected) from the table into an index. These
     * are in addition to the primary key attributes and index key attributes, which are automatically projected.
     * 
     * @return the projection value.
     */
    public Projection projection() {
        return this.projection;
    }

    /**
     * Set the projection property: Represents attributes that are copied (projected) from the table into the local
     * secondary index. These are in addition to the primary key attributes and index key attributes, which are
     * automatically projected. Represents attributes that are copied (projected) from the table into an index. These
     * are in addition to the primary key attributes and index key attributes, which are automatically projected.
     * 
     * @param projection the projection value to set.
     * @return the LocalSecondaryIndex object itself.
     */
    public LocalSecondaryIndex withProjection(Projection projection) {
        this.projection = projection;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keySchema() != null) {
            keySchema().forEach(e -> e.validate());
        }
        if (projection() != null) {
            projection().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("indexName", this.indexName);
        jsonWriter.writeArrayField("keySchema", this.keySchema, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("projection", this.projection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalSecondaryIndex from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalSecondaryIndex if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LocalSecondaryIndex.
     */
    public static LocalSecondaryIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalSecondaryIndex deserializedLocalSecondaryIndex = new LocalSecondaryIndex();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("indexName".equals(fieldName)) {
                    deserializedLocalSecondaryIndex.indexName = reader.getString();
                } else if ("keySchema".equals(fieldName)) {
                    List<KeySchema> keySchema = reader.readArray(reader1 -> KeySchema.fromJson(reader1));
                    deserializedLocalSecondaryIndex.keySchema = keySchema;
                } else if ("projection".equals(fieldName)) {
                    deserializedLocalSecondaryIndex.projection = Projection.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalSecondaryIndex;
        });
    }
}
