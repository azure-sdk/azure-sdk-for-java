// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of IPSetReference.
 */
@Fluent
public final class IpSetReference implements JsonSerializable<IpSetReference> {
    /*
     * A resource ARN.
     */
    private String referenceArn;

    /**
     * Creates an instance of IpSetReference class.
     */
    public IpSetReference() {
    }

    /**
     * Get the referenceArn property: A resource ARN.
     * 
     * @return the referenceArn value.
     */
    public String referenceArn() {
        return this.referenceArn;
    }

    /**
     * Set the referenceArn property: A resource ARN.
     * 
     * @param referenceArn the referenceArn value to set.
     * @return the IpSetReference object itself.
     */
    public IpSetReference withReferenceArn(String referenceArn) {
        this.referenceArn = referenceArn;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("referenceArn", this.referenceArn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpSetReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpSetReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IpSetReference.
     */
    public static IpSetReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpSetReference deserializedIpSetReference = new IpSetReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referenceArn".equals(fieldName)) {
                    deserializedIpSetReference.referenceArn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpSetReference;
        });
    }
}
