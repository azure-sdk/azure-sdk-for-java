// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of PlacementStrategy.
 */
@Fluent
public final class PlacementStrategy implements JsonSerializable<PlacementStrategy> {
    /*
     * The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are
     * ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute that is applied to a
     * container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid
     * values are ``CPU`` and ``MEMORY``. For the ``random`` placement strategy, this field is not used.
     */
    private String field;

    /*
     * The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates.
     * The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field``
     * parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of
     * the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is
     * placed on the instance with the least amount of remaining memory but still enough to run the task.
     */
    private PlacementStrategyType type;

    /**
     * Creates an instance of PlacementStrategy class.
     */
    public PlacementStrategy() {
    }

    /**
     * Get the field property: The field to apply the placement strategy against. For the ``spread`` placement strategy,
     * valid values are ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute
     * that is applied to a container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack``
     * placement strategy, valid values are ``CPU`` and ``MEMORY``. For the ``random`` placement strategy, this field is
     * not used.
     * 
     * @return the field value.
     */
    public String field() {
        return this.field;
    }

    /**
     * Set the field property: The field to apply the placement strategy against. For the ``spread`` placement strategy,
     * valid values are ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute
     * that is applied to a container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack``
     * placement strategy, valid values are ``CPU`` and ``MEMORY``. For the ``random`` placement strategy, this field is
     * not used.
     * 
     * @param field the field value to set.
     * @return the PlacementStrategy object itself.
     */
    public PlacementStrategy withField(String field) {
        this.field = field;
        return this;
    }

    /**
     * Get the type property: The type of placement strategy. The ``random`` placement strategy randomly places tasks on
     * available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly
     * based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the
     * least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack
     * on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the
     * task.
     * 
     * @return the type value.
     */
    public PlacementStrategyType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of placement strategy. The ``random`` placement strategy randomly places tasks on
     * available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly
     * based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the
     * least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack
     * on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the
     * task.
     * 
     * @param type the type value to set.
     * @return the PlacementStrategy object itself.
     */
    public PlacementStrategy withType(PlacementStrategyType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("field", this.field);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementStrategy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementStrategy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementStrategy.
     */
    public static PlacementStrategy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementStrategy deserializedPlacementStrategy = new PlacementStrategy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("field".equals(fieldName)) {
                    deserializedPlacementStrategy.field = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPlacementStrategy.type = PlacementStrategyType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementStrategy;
        });
    }
}
