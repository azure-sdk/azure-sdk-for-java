// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of SourceAuth.
 */
@Fluent
public final class SourceAuth implements JsonSerializable<SourceAuth> {
    /*
     * <p>The resource value that applies to the specified authorization type.</p>
     */
    private String resource;

    /*
     * <p>The authorization type to use. Valid options are OAUTH or CODECONNECTIONS.</p>
     */
    private SourceAuthTypeEnumValue type;

    /**
     * Creates an instance of SourceAuth class.
     */
    public SourceAuth() {
    }

    /**
     * Get the resource property: &lt;p&gt;The resource value that applies to the specified authorization
     * type.&lt;/p&gt;.
     * 
     * @return the resource value.
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Set the resource property: &lt;p&gt;The resource value that applies to the specified authorization
     * type.&lt;/p&gt;.
     * 
     * @param resource the resource value to set.
     * @return the SourceAuth object itself.
     */
    public SourceAuth withResource(String resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the type property: &lt;p&gt;The authorization type to use. Valid options are OAUTH or
     * CODECONNECTIONS.&lt;/p&gt;.
     * 
     * @return the type value.
     */
    public SourceAuthTypeEnumValue type() {
        return this.type;
    }

    /**
     * Set the type property: &lt;p&gt;The authorization type to use. Valid options are OAUTH or
     * CODECONNECTIONS.&lt;/p&gt;.
     * 
     * @param type the type value to set.
     * @return the SourceAuth object itself.
     */
    public SourceAuth withType(SourceAuthTypeEnumValue type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() != null) {
            type().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resource", this.resource);
        jsonWriter.writeJsonField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceAuth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceAuth if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SourceAuth.
     */
    public static SourceAuth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceAuth deserializedSourceAuth = new SourceAuth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resource".equals(fieldName)) {
                    deserializedSourceAuth.resource = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSourceAuth.type = SourceAuthTypeEnumValue.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceAuth;
        });
    }
}
