// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.awsconnector.fluent.LightsailInstancesClient;
import com.azure.resourcemanager.awsconnector.fluent.models.LightsailInstanceInner;
import com.azure.resourcemanager.awsconnector.models.LightsailInstance;
import com.azure.resourcemanager.awsconnector.models.LightsailInstances;

public final class LightsailInstancesImpl implements LightsailInstances {
    private static final ClientLogger LOGGER = new ClientLogger(LightsailInstancesImpl.class);

    private final LightsailInstancesClient innerClient;

    private final com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager;

    public LightsailInstancesImpl(LightsailInstancesClient innerClient,
        com.azure.resourcemanager.awsconnector.AwsconnectorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LightsailInstance> list() {
        PagedIterable<LightsailInstanceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LightsailInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<LightsailInstance> list(Context context) {
        PagedIterable<LightsailInstanceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LightsailInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<LightsailInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<LightsailInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LightsailInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<LightsailInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<LightsailInstanceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LightsailInstanceImpl(inner1, this.manager()));
    }

    public Response<LightsailInstance> getByResourceGroupWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<LightsailInstanceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LightsailInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LightsailInstance getByResourceGroup(String resourceGroupName, String name) {
        LightsailInstanceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new LightsailInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public void delete(String resourceGroupName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, name, context);
    }

    public LightsailInstance getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "lightsailInstances");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'lightsailInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<LightsailInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "lightsailInstances");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'lightsailInstances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "lightsailInstances");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'lightsailInstances'.", id)));
        }
        this.delete(resourceGroupName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "lightsailInstances");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'lightsailInstances'.", id)));
        }
        this.delete(resourceGroupName, name, context);
    }

    private LightsailInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.awsconnector.AwsconnectorManager manager() {
        return this.serviceManager;
    }

    public LightsailInstanceImpl define(String name) {
        return new LightsailInstanceImpl(name, this.manager());
    }
}
