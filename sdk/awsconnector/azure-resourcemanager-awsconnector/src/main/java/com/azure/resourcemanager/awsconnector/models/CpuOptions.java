// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of CpuOptions.
 */
@Fluent
public final class CpuOptions implements JsonSerializable<CpuOptions> {
    /*
     * <p>Indicates whether the instance is enabled for AMD SEV-SNP. For more information, see <a
     * href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html'>AMD SEV-SNP</a>.</p>
     */
    private AmdSevSnpSpecificationEnumValue amdSevSnp;

    /*
     * <p>The number of CPU cores for the instance.</p>
     */
    private Integer coreCount;

    /*
     * <p>The number of threads per CPU core.</p>
     */
    private Integer threadsPerCore;

    /**
     * Creates an instance of CpuOptions class.
     */
    public CpuOptions() {
    }

    /**
     * Get the amdSevSnp property: &lt;p&gt;Indicates whether the instance is enabled for AMD SEV-SNP. For more
     * information, see &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html'&gt;AMD
     * SEV-SNP&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @return the amdSevSnp value.
     */
    public AmdSevSnpSpecificationEnumValue amdSevSnp() {
        return this.amdSevSnp;
    }

    /**
     * Set the amdSevSnp property: &lt;p&gt;Indicates whether the instance is enabled for AMD SEV-SNP. For more
     * information, see &lt;a href='https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html'&gt;AMD
     * SEV-SNP&lt;/a&gt;.&lt;/p&gt;.
     * 
     * @param amdSevSnp the amdSevSnp value to set.
     * @return the CpuOptions object itself.
     */
    public CpuOptions withAmdSevSnp(AmdSevSnpSpecificationEnumValue amdSevSnp) {
        this.amdSevSnp = amdSevSnp;
        return this;
    }

    /**
     * Get the coreCount property: &lt;p&gt;The number of CPU cores for the instance.&lt;/p&gt;.
     * 
     * @return the coreCount value.
     */
    public Integer coreCount() {
        return this.coreCount;
    }

    /**
     * Set the coreCount property: &lt;p&gt;The number of CPU cores for the instance.&lt;/p&gt;.
     * 
     * @param coreCount the coreCount value to set.
     * @return the CpuOptions object itself.
     */
    public CpuOptions withCoreCount(Integer coreCount) {
        this.coreCount = coreCount;
        return this;
    }

    /**
     * Get the threadsPerCore property: &lt;p&gt;The number of threads per CPU core.&lt;/p&gt;.
     * 
     * @return the threadsPerCore value.
     */
    public Integer threadsPerCore() {
        return this.threadsPerCore;
    }

    /**
     * Set the threadsPerCore property: &lt;p&gt;The number of threads per CPU core.&lt;/p&gt;.
     * 
     * @param threadsPerCore the threadsPerCore value to set.
     * @return the CpuOptions object itself.
     */
    public CpuOptions withThreadsPerCore(Integer threadsPerCore) {
        this.threadsPerCore = threadsPerCore;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (amdSevSnp() != null) {
            amdSevSnp().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("amdSevSnp", this.amdSevSnp);
        jsonWriter.writeNumberField("coreCount", this.coreCount);
        jsonWriter.writeNumberField("threadsPerCore", this.threadsPerCore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CpuOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CpuOptions if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the CpuOptions.
     */
    public static CpuOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CpuOptions deserializedCpuOptions = new CpuOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amdSevSnp".equals(fieldName)) {
                    deserializedCpuOptions.amdSevSnp = AmdSevSnpSpecificationEnumValue.fromJson(reader);
                } else if ("coreCount".equals(fieldName)) {
                    deserializedCpuOptions.coreCount = reader.getNullable(JsonReader::getInt);
                } else if ("threadsPerCore".equals(fieldName)) {
                    deserializedCpuOptions.threadsPerCore = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCpuOptions;
        });
    }
}
