// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of Logging.
 */
@Fluent
public final class Logging implements JsonSerializable<Logging> {
    /*
     * The Amazon S3 bucket to store the access logs in, for example, ``myawslogbucket.s3.amazonaws.com``.
     */
    private String bucket;

    /*
     * Specifies whether you want CloudFront to include cookies in access logs, specify ``true`` for ``IncludeCookies``.
     * If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache
     * behaviors for this distribution. If you don't want to include cookies when you create a distribution or if you
     * want to disable include cookies for an existing distribution, specify ``false`` for ``IncludeCookies``.
     */
    private Boolean includeCookies;

    /*
     * An optional string that you want CloudFront to prefix to the access log ``filenames`` for this distribution, for
     * example, ``myprefix/``. If you want to enable logging, but you don't want to specify a prefix, you still must
     * include an empty ``Prefix`` element in the ``Logging`` element.
     */
    private String prefix;

    /**
     * Creates an instance of Logging class.
     */
    public Logging() {
    }

    /**
     * Get the bucket property: The Amazon S3 bucket to store the access logs in, for example,
     * ``myawslogbucket.s3.amazonaws.com``.
     * 
     * @return the bucket value.
     */
    public String bucket() {
        return this.bucket;
    }

    /**
     * Set the bucket property: The Amazon S3 bucket to store the access logs in, for example,
     * ``myawslogbucket.s3.amazonaws.com``.
     * 
     * @param bucket the bucket value to set.
     * @return the Logging object itself.
     */
    public Logging withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }

    /**
     * Get the includeCookies property: Specifies whether you want CloudFront to include cookies in access logs, specify
     * ``true`` for ``IncludeCookies``. If you choose to include cookies in logs, CloudFront logs all cookies regardless
     * of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you
     * create a distribution or if you want to disable include cookies for an existing distribution, specify ``false``
     * for ``IncludeCookies``.
     * 
     * @return the includeCookies value.
     */
    public Boolean includeCookies() {
        return this.includeCookies;
    }

    /**
     * Set the includeCookies property: Specifies whether you want CloudFront to include cookies in access logs, specify
     * ``true`` for ``IncludeCookies``. If you choose to include cookies in logs, CloudFront logs all cookies regardless
     * of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you
     * create a distribution or if you want to disable include cookies for an existing distribution, specify ``false``
     * for ``IncludeCookies``.
     * 
     * @param includeCookies the includeCookies value to set.
     * @return the Logging object itself.
     */
    public Logging withIncludeCookies(Boolean includeCookies) {
        this.includeCookies = includeCookies;
        return this;
    }

    /**
     * Get the prefix property: An optional string that you want CloudFront to prefix to the access log ``filenames``
     * for this distribution, for example, ``myprefix/``. If you want to enable logging, but you don't want to specify a
     * prefix, you still must include an empty ``Prefix`` element in the ``Logging`` element.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: An optional string that you want CloudFront to prefix to the access log ``filenames``
     * for this distribution, for example, ``myprefix/``. If you want to enable logging, but you don't want to specify a
     * prefix, you still must include an empty ``Prefix`` element in the ``Logging`` element.
     * 
     * @param prefix the prefix value to set.
     * @return the Logging object itself.
     */
    public Logging withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("bucket", this.bucket);
        jsonWriter.writeBooleanField("includeCookies", this.includeCookies);
        jsonWriter.writeStringField("prefix", this.prefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Logging from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Logging if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Logging.
     */
    public static Logging fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Logging deserializedLogging = new Logging();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucket".equals(fieldName)) {
                    deserializedLogging.bucket = reader.getString();
                } else if ("includeCookies".equals(fieldName)) {
                    deserializedLogging.includeCookies = reader.getNullable(JsonReader::getBoolean);
                } else if ("prefix".equals(fieldName)) {
                    deserializedLogging.prefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogging;
        });
    }
}
