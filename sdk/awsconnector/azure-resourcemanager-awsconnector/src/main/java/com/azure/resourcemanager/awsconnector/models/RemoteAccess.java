// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of RemoteAccess.
 */
@Fluent
public final class RemoteAccess implements JsonSerializable<RemoteAccess> {
    /*
     * Property ec2SshKey
     */
    private String ec2SshKey;

    /*
     * Property sourceSecurityGroups
     */
    private List<String> sourceSecurityGroups;

    /**
     * Creates an instance of RemoteAccess class.
     */
    public RemoteAccess() {
    }

    /**
     * Get the ec2SshKey property: Property ec2SshKey.
     * 
     * @return the ec2SshKey value.
     */
    public String ec2SshKey() {
        return this.ec2SshKey;
    }

    /**
     * Set the ec2SshKey property: Property ec2SshKey.
     * 
     * @param ec2SshKey the ec2SshKey value to set.
     * @return the RemoteAccess object itself.
     */
    public RemoteAccess withEc2SshKey(String ec2SshKey) {
        this.ec2SshKey = ec2SshKey;
        return this;
    }

    /**
     * Get the sourceSecurityGroups property: Property sourceSecurityGroups.
     * 
     * @return the sourceSecurityGroups value.
     */
    public List<String> sourceSecurityGroups() {
        return this.sourceSecurityGroups;
    }

    /**
     * Set the sourceSecurityGroups property: Property sourceSecurityGroups.
     * 
     * @param sourceSecurityGroups the sourceSecurityGroups value to set.
     * @return the RemoteAccess object itself.
     */
    public RemoteAccess withSourceSecurityGroups(List<String> sourceSecurityGroups) {
        this.sourceSecurityGroups = sourceSecurityGroups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ec2SshKey", this.ec2SshKey);
        jsonWriter.writeArrayField("sourceSecurityGroups", this.sourceSecurityGroups,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoteAccess from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoteAccess if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoteAccess.
     */
    public static RemoteAccess fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoteAccess deserializedRemoteAccess = new RemoteAccess();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ec2SshKey".equals(fieldName)) {
                    deserializedRemoteAccess.ec2SshKey = reader.getString();
                } else if ("sourceSecurityGroups".equals(fieldName)) {
                    List<String> sourceSecurityGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedRemoteAccess.sourceSecurityGroups = sourceSecurityGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemoteAccess;
        });
    }
}
