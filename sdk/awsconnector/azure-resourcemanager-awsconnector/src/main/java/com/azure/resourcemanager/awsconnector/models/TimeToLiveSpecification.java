// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of TimeToLiveSpecification.
 */
@Fluent
public final class TimeToLiveSpecification implements JsonSerializable<TimeToLiveSpecification> {
    /*
     * The name of the TTL attribute used to store the expiration time for items in the table. + The ``AttributeName``
     * property is required when enabling the TTL, or when TTL is already enabled. + To update this property, you must
     * first disable TTL and then enable TTL with the new attribute name.
     */
    private String attributeName;

    /*
     * Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
     */
    private Boolean enabled;

    /**
     * Creates an instance of TimeToLiveSpecification class.
     */
    public TimeToLiveSpecification() {
    }

    /**
     * Get the attributeName property: The name of the TTL attribute used to store the expiration time for items in the
     * table. + The ``AttributeName`` property is required when enabling the TTL, or when TTL is already enabled. + To
     * update this property, you must first disable TTL and then enable TTL with the new attribute name.
     * 
     * @return the attributeName value.
     */
    public String attributeName() {
        return this.attributeName;
    }

    /**
     * Set the attributeName property: The name of the TTL attribute used to store the expiration time for items in the
     * table. + The ``AttributeName`` property is required when enabling the TTL, or when TTL is already enabled. + To
     * update this property, you must first disable TTL and then enable TTL with the new attribute name.
     * 
     * @param attributeName the attributeName value to set.
     * @return the TimeToLiveSpecification object itself.
     */
    public TimeToLiveSpecification withAttributeName(String attributeName) {
        this.attributeName = attributeName;
        return this;
    }

    /**
     * Get the enabled property: Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
     * 
     * @param enabled the enabled value to set.
     * @return the TimeToLiveSpecification object itself.
     */
    public TimeToLiveSpecification withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("attributeName", this.attributeName);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeToLiveSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeToLiveSpecification if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeToLiveSpecification.
     */
    public static TimeToLiveSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeToLiveSpecification deserializedTimeToLiveSpecification = new TimeToLiveSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributeName".equals(fieldName)) {
                    deserializedTimeToLiveSpecification.attributeName = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedTimeToLiveSpecification.enabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTimeToLiveSpecification;
        });
    }
}
