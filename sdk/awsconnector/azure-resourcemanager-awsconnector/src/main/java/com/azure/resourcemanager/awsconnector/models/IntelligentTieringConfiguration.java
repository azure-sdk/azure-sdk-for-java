// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of IntelligentTieringConfiguration.
 */
@Fluent
public final class IntelligentTieringConfiguration implements JsonSerializable<IntelligentTieringConfiguration> {
    /*
     * The ID used to identify the S3 Intelligent-Tiering configuration.
     */
    private String id;

    /*
     * An object key name prefix that identifies the subset of objects to which the rule applies.
     */
    private String prefix;

    /*
     * Specifies the status of the configuration.
     */
    private IntelligentTieringConfigurationStatus status;

    /*
     * A container for a key-value pair.
     */
    private List<TagFilter> tagFilters;

    /*
     * Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be
     * defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier:
     * ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``. You only need Intelligent Tiering Configuration enabled on a
     * bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive
     * Access or Deep Archive Access tiers.
     */
    private List<Tiering> tierings;

    /**
     * Creates an instance of IntelligentTieringConfiguration class.
     */
    public IntelligentTieringConfiguration() {
    }

    /**
     * Get the id property: The ID used to identify the S3 Intelligent-Tiering configuration.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID used to identify the S3 Intelligent-Tiering configuration.
     * 
     * @param id the id value to set.
     * @return the IntelligentTieringConfiguration object itself.
     */
    public IntelligentTieringConfiguration withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the prefix property: An object key name prefix that identifies the subset of objects to which the rule
     * applies.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: An object key name prefix that identifies the subset of objects to which the rule
     * applies.
     * 
     * @param prefix the prefix value to set.
     * @return the IntelligentTieringConfiguration object itself.
     */
    public IntelligentTieringConfiguration withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the status property: Specifies the status of the configuration.
     * 
     * @return the status value.
     */
    public IntelligentTieringConfigurationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Specifies the status of the configuration.
     * 
     * @param status the status value to set.
     * @return the IntelligentTieringConfiguration object itself.
     */
    public IntelligentTieringConfiguration withStatus(IntelligentTieringConfigurationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tagFilters property: A container for a key-value pair.
     * 
     * @return the tagFilters value.
     */
    public List<TagFilter> tagFilters() {
        return this.tagFilters;
    }

    /**
     * Set the tagFilters property: A container for a key-value pair.
     * 
     * @param tagFilters the tagFilters value to set.
     * @return the IntelligentTieringConfiguration object itself.
     */
    public IntelligentTieringConfiguration withTagFilters(List<TagFilter> tagFilters) {
        this.tagFilters = tagFilters;
        return this;
    }

    /**
     * Get the tierings property: Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration.
     * At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each
     * available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``. You only need Intelligent Tiering
     * Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering
     * storage class to Archive Access or Deep Archive Access tiers.
     * 
     * @return the tierings value.
     */
    public List<Tiering> tierings() {
        return this.tierings;
    }

    /**
     * Set the tierings property: Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration.
     * At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each
     * available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``. You only need Intelligent Tiering
     * Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering
     * storage class to Archive Access or Deep Archive Access tiers.
     * 
     * @param tierings the tierings value to set.
     * @return the IntelligentTieringConfiguration object itself.
     */
    public IntelligentTieringConfiguration withTierings(List<Tiering> tierings) {
        this.tierings = tierings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tagFilters() != null) {
            tagFilters().forEach(e -> e.validate());
        }
        if (tierings() != null) {
            tierings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("tagFilters", this.tagFilters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("tierings", this.tierings, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntelligentTieringConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntelligentTieringConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntelligentTieringConfiguration.
     */
    public static IntelligentTieringConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntelligentTieringConfiguration deserializedIntelligentTieringConfiguration
                = new IntelligentTieringConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIntelligentTieringConfiguration.id = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    deserializedIntelligentTieringConfiguration.prefix = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedIntelligentTieringConfiguration.status
                        = IntelligentTieringConfigurationStatus.fromString(reader.getString());
                } else if ("tagFilters".equals(fieldName)) {
                    List<TagFilter> tagFilters = reader.readArray(reader1 -> TagFilter.fromJson(reader1));
                    deserializedIntelligentTieringConfiguration.tagFilters = tagFilters;
                } else if ("tierings".equals(fieldName)) {
                    List<Tiering> tierings = reader.readArray(reader1 -> Tiering.fromJson(reader1));
                    deserializedIntelligentTieringConfiguration.tierings = tierings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntelligentTieringConfiguration;
        });
    }
}
