// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.awsconnector.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Definition of AdvancedEventSelector.
 */
@Fluent
public final class AdvancedEventSelector implements JsonSerializable<AdvancedEventSelector> {
    /*
     * Contains all selector statements in an advanced event selector.
     */
    private List<AdvancedFieldSelector> fieldSelectors;

    /*
     * An optional, descriptive name for an advanced event selector, such as 'Log data events for only two S3 buckets'.
     */
    private String name;

    /**
     * Creates an instance of AdvancedEventSelector class.
     */
    public AdvancedEventSelector() {
    }

    /**
     * Get the fieldSelectors property: Contains all selector statements in an advanced event selector.
     * 
     * @return the fieldSelectors value.
     */
    public List<AdvancedFieldSelector> fieldSelectors() {
        return this.fieldSelectors;
    }

    /**
     * Set the fieldSelectors property: Contains all selector statements in an advanced event selector.
     * 
     * @param fieldSelectors the fieldSelectors value to set.
     * @return the AdvancedEventSelector object itself.
     */
    public AdvancedEventSelector withFieldSelectors(List<AdvancedFieldSelector> fieldSelectors) {
        this.fieldSelectors = fieldSelectors;
        return this;
    }

    /**
     * Get the name property: An optional, descriptive name for an advanced event selector, such as 'Log data events for
     * only two S3 buckets'.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: An optional, descriptive name for an advanced event selector, such as 'Log data events for
     * only two S3 buckets'.
     * 
     * @param name the name value to set.
     * @return the AdvancedEventSelector object itself.
     */
    public AdvancedEventSelector withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fieldSelectors() != null) {
            fieldSelectors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("fieldSelectors", this.fieldSelectors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdvancedEventSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdvancedEventSelector if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdvancedEventSelector.
     */
    public static AdvancedEventSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdvancedEventSelector deserializedAdvancedEventSelector = new AdvancedEventSelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldSelectors".equals(fieldName)) {
                    List<AdvancedFieldSelector> fieldSelectors
                        = reader.readArray(reader1 -> AdvancedFieldSelector.fromJson(reader1));
                    deserializedAdvancedEventSelector.fieldSelectors = fieldSelectors;
                } else if ("name".equals(fieldName)) {
                    deserializedAdvancedEventSelector.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdvancedEventSelector;
        });
    }
}
