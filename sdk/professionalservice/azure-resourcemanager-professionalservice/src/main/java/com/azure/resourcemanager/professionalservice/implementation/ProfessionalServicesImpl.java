// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.professionalservice.fluent.ProfessionalServicesClient;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResource;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceCreation;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServices;

public final class ProfessionalServicesImpl implements ProfessionalServices {
    private static final ClientLogger LOGGER = new ClientLogger(ProfessionalServicesImpl.class);

    private final ProfessionalServicesClient innerClient;

    private final com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager;

    public ProfessionalServicesImpl(
        ProfessionalServicesClient innerClient,
        com.azure.resourcemanager.professionalservice.ProfessionalServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ProfessionalServiceResource> getWithResponse(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName, Context context) {
        Response<ProfessionalServiceResourceInner> inner =
            this.serviceClient().getWithResponse(billingAccount, billingProfile, invoiceSection, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProfessionalServiceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProfessionalServiceResource get(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName) {
        ProfessionalServiceResourceInner inner =
            this.serviceClient().get(billingAccount, billingProfile, invoiceSection, resourceName);
        if (inner != null) {
            return new ProfessionalServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ProfessionalServiceResource createOrUpdate(
        String billingAccount,
        String billingProfile,
        String invoiceSection,
        String resourceName,
        ProfessionalServiceResourceCreation parameters) {
        ProfessionalServiceResourceInner inner =
            this
                .serviceClient()
                .createOrUpdate(billingAccount, billingProfile, invoiceSection, resourceName, parameters);
        if (inner != null) {
            return new ProfessionalServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ProfessionalServiceResource createOrUpdate(
        String billingAccount,
        String billingProfile,
        String invoiceSection,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context) {
        ProfessionalServiceResourceInner inner =
            this
                .serviceClient()
                .createOrUpdate(billingAccount, billingProfile, invoiceSection, resourceName, parameters, context);
        if (inner != null) {
            return new ProfessionalServiceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String billingAccount, String billingProfile, String invoiceSection, String resourceName) {
        this.serviceClient().delete(billingAccount, billingProfile, invoiceSection, resourceName);
    }

    public void delete(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName, Context context) {
        this.serviceClient().delete(billingAccount, billingProfile, invoiceSection, resourceName, context);
    }

    private ProfessionalServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.professionalservice.ProfessionalServiceManager manager() {
        return this.serviceManager;
    }
}
