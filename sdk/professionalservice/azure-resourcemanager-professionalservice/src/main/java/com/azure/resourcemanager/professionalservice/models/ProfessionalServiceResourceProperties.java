// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** ProfessionalService properties. */
@Fluent
public final class ProfessionalServiceResourceProperties extends ProfessionalServiceProperties {
    /*
     * The offer id.
     */
    @JsonProperty(value = "offerId")
    private String offerId;

    /*
     * The publisher id.
     */
    @JsonProperty(value = "publisherId")
    private String publisherId;

    /*
     * The seat count.
     */
    @JsonProperty(value = "quantity")
    private Float quantity;

    /*
     * The plan id.
     */
    @JsonProperty(value = "skuId")
    private String skuId;

    /*
     * The metadata about the ProfessionalService subscription such as the OrganizationId.
     */
    @JsonProperty(value = "paymentChannelMetadata")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> paymentChannelMetadata;

    /*
     * The current Term id.
     */
    @JsonProperty(value = "termId")
    private String termId;

    /*
     * The quote id which the ProfessionalService will be purchase with.
     */
    @JsonProperty(value = "quoteId")
    private String quoteId;

    /*
     * The store front which initiates the purchase.
     */
    @JsonProperty(value = "storeFront")
    private String storeFront;

    /*
     * Whether the ProfessionalService subscription will auto renew upon term end.
     */
    @JsonProperty(value = "autoRenew")
    private Boolean autoRenew;

    /** Creates an instance of ProfessionalServiceResourceProperties class. */
    public ProfessionalServiceResourceProperties() {
    }

    /**
     * Get the offerId property: The offer id.
     *
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: The offer id.
     *
     * @param offerId the offerId value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Get the publisherId property: The publisher id.
     *
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: The publisher id.
     *
     * @param publisherId the publisherId value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the quantity property: The seat count.
     *
     * @return the quantity value.
     */
    public Float quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: The seat count.
     *
     * @param quantity the quantity value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withQuantity(Float quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the skuId property: The plan id.
     *
     * @return the skuId value.
     */
    public String skuId() {
        return this.skuId;
    }

    /**
     * Set the skuId property: The plan id.
     *
     * @param skuId the skuId value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withSkuId(String skuId) {
        this.skuId = skuId;
        return this;
    }

    /**
     * Get the paymentChannelMetadata property: The metadata about the ProfessionalService subscription such as the
     * OrganizationId.
     *
     * @return the paymentChannelMetadata value.
     */
    public Map<String, String> paymentChannelMetadata() {
        return this.paymentChannelMetadata;
    }

    /**
     * Set the paymentChannelMetadata property: The metadata about the ProfessionalService subscription such as the
     * OrganizationId.
     *
     * @param paymentChannelMetadata the paymentChannelMetadata value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withPaymentChannelMetadata(
        Map<String, String> paymentChannelMetadata) {
        this.paymentChannelMetadata = paymentChannelMetadata;
        return this;
    }

    /**
     * Get the termId property: The current Term id.
     *
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Set the termId property: The current Term id.
     *
     * @param termId the termId value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withTermId(String termId) {
        this.termId = termId;
        return this;
    }

    /**
     * Get the quoteId property: The quote id which the ProfessionalService will be purchase with.
     *
     * @return the quoteId value.
     */
    public String quoteId() {
        return this.quoteId;
    }

    /**
     * Set the quoteId property: The quote id which the ProfessionalService will be purchase with.
     *
     * @param quoteId the quoteId value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withQuoteId(String quoteId) {
        this.quoteId = quoteId;
        return this;
    }

    /**
     * Get the storeFront property: The store front which initiates the purchase.
     *
     * @return the storeFront value.
     */
    public String storeFront() {
        return this.storeFront;
    }

    /**
     * Set the storeFront property: The store front which initiates the purchase.
     *
     * @param storeFront the storeFront value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withStoreFront(String storeFront) {
        this.storeFront = storeFront;
        return this;
    }

    /**
     * Get the autoRenew property: Whether the ProfessionalService subscription will auto renew upon term end.
     *
     * @return the autoRenew value.
     */
    public Boolean autoRenew() {
        return this.autoRenew;
    }

    /**
     * Set the autoRenew property: Whether the ProfessionalService subscription will auto renew upon term end.
     *
     * @param autoRenew the autoRenew value to set.
     * @return the ProfessionalServiceResourceProperties object itself.
     */
    public ProfessionalServiceResourceProperties withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfessionalServiceResourceProperties withStatus(ProfessionalServiceResourceStatus status) {
        super.withStatus(status);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfessionalServiceResourceProperties withTerm(ProfessionalServicePropertiesTerm term) {
        super.withTerm(term);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfessionalServiceResourceProperties withIsFreeTrial(Boolean isFreeTrial) {
        super.withIsFreeTrial(isFreeTrial);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfessionalServiceResourceProperties withLastModified(String lastModified) {
        super.withLastModified(lastModified);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
