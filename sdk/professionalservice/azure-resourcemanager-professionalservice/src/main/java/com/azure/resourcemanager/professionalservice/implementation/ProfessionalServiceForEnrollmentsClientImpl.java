// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.professionalservice.fluent.ProfessionalServiceForEnrollmentsClient;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceCreation;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ProfessionalServiceForEnrollmentsClient.
 */
public final class ProfessionalServiceForEnrollmentsClientImpl implements ProfessionalServiceForEnrollmentsClient {
    /** The proxy service used to perform REST calls. */
    private final ProfessionalServiceForEnrollmentsService service;

    /** The service client containing this operation class. */
    private final ProfessionalServiceImpl client;

    /**
     * Initializes an instance of ProfessionalServiceForEnrollmentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ProfessionalServiceForEnrollmentsClientImpl(ProfessionalServiceImpl client) {
        this.service =
            RestProxy
                .create(
                    ProfessionalServiceForEnrollmentsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ProfessionalServiceProfessionalServiceForEnrollments to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ProfessionalServiceP")
    public interface ProfessionalServiceForEnrollmentsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Billing/billingAccounts/{enrollmentBillingAccount}/providers"
                + "/Microsoft.ProfessionalService/resources/{resourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ProfessionalServiceResourceInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("enrollmentBillingAccount") String enrollmentBillingAccount,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.Billing/billingAccounts/{enrollmentBillingAccount}/providers"
                + "/Microsoft.ProfessionalService/resources/{resourceName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("enrollmentBillingAccount") String enrollmentBillingAccount,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ProfessionalServiceResourceCreation parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/providers/Microsoft.Billing/billingAccounts/{enrollmentBillingAccount}/providers"
                + "/Microsoft.ProfessionalService/resources/{resourceName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("enrollmentBillingAccount") String enrollmentBillingAccount,
            @PathParam("resourceName") String resourceName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets information about the specified Professional Service for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service for enrollment account along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProfessionalServiceResourceInner>> getWithResponseAsync(
        String enrollmentBillingAccount, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (enrollmentBillingAccount == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter enrollmentBillingAccount is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            enrollmentBillingAccount,
                            resourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about the specified Professional Service for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service for enrollment account along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ProfessionalServiceResourceInner>> getWithResponseAsync(
        String enrollmentBillingAccount, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (enrollmentBillingAccount == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter enrollmentBillingAccount is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                enrollmentBillingAccount,
                resourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets information about the specified Professional Service for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service for enrollment account on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProfessionalServiceResourceInner> getAsync(String enrollmentBillingAccount, String resourceName) {
        return getWithResponseAsync(enrollmentBillingAccount, resourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets information about the specified Professional Service for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service for enrollment account along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ProfessionalServiceResourceInner> getWithResponse(
        String enrollmentBillingAccount, String resourceName, Context context) {
        return getWithResponseAsync(enrollmentBillingAccount, resourceName, context).block();
    }

    /**
     * Gets information about the specified Professional Service for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service for enrollment account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProfessionalServiceResourceInner get(String enrollmentBillingAccount, String resourceName) {
        return getWithResponse(enrollmentBillingAccount, resourceName, Context.NONE).getValue();
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String enrollmentBillingAccount, String resourceName, ProfessionalServiceResourceCreation parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (enrollmentBillingAccount == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter enrollmentBillingAccount is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            enrollmentBillingAccount,
                            resourceName,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String enrollmentBillingAccount,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (enrollmentBillingAccount == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter enrollmentBillingAccount is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                enrollmentBillingAccount,
                resourceName,
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner>
        beginCreateOrUpdateAsync(
            String enrollmentBillingAccount, String resourceName, ProfessionalServiceResourceCreation parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(enrollmentBillingAccount, resourceName, parameters);
        return this
            .client
            .<ProfessionalServiceResourceInner, ProfessionalServiceResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ProfessionalServiceResourceInner.class,
                ProfessionalServiceResourceInner.class,
                this.client.getContext());
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner>
        beginCreateOrUpdateAsync(
            String enrollmentBillingAccount,
            String resourceName,
            ProfessionalServiceResourceCreation parameters,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(enrollmentBillingAccount, resourceName, parameters, context);
        return this
            .client
            .<ProfessionalServiceResourceInner, ProfessionalServiceResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ProfessionalServiceResourceInner.class,
                ProfessionalServiceResourceInner.class,
                context);
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner>
        beginCreateOrUpdate(
            String enrollmentBillingAccount, String resourceName, ProfessionalServiceResourceCreation parameters) {
        return beginCreateOrUpdateAsync(enrollmentBillingAccount, resourceName, parameters).getSyncPoller();
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner>
        beginCreateOrUpdate(
            String enrollmentBillingAccount,
            String resourceName,
            ProfessionalServiceResourceCreation parameters,
            Context context) {
        return beginCreateOrUpdateAsync(enrollmentBillingAccount, resourceName, parameters, context).getSyncPoller();
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProfessionalServiceResourceInner> createOrUpdateAsync(
        String enrollmentBillingAccount, String resourceName, ProfessionalServiceResourceCreation parameters) {
        return beginCreateOrUpdateAsync(enrollmentBillingAccount, resourceName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProfessionalServiceResourceInner> createOrUpdateAsync(
        String enrollmentBillingAccount,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context) {
        return beginCreateOrUpdateAsync(enrollmentBillingAccount, resourceName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProfessionalServiceResourceInner createOrUpdate(
        String enrollmentBillingAccount, String resourceName, ProfessionalServiceResourceCreation parameters) {
        return createOrUpdateAsync(enrollmentBillingAccount, resourceName, parameters).block();
    }

    /**
     * Creates or updates a ProfessionalService resource for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProfessionalServiceResourceInner createOrUpdate(
        String enrollmentBillingAccount,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context) {
        return createOrUpdateAsync(enrollmentBillingAccount, resourceName, parameters, context).block();
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String enrollmentBillingAccount, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (enrollmentBillingAccount == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter enrollmentBillingAccount is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            enrollmentBillingAccount,
                            resourceName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String enrollmentBillingAccount, String resourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (enrollmentBillingAccount == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter enrollmentBillingAccount is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                enrollmentBillingAccount,
                resourceName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String enrollmentBillingAccount, String resourceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(enrollmentBillingAccount, resourceName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String enrollmentBillingAccount, String resourceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(enrollmentBillingAccount, resourceName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String enrollmentBillingAccount, String resourceName) {
        return beginDeleteAsync(enrollmentBillingAccount, resourceName).getSyncPoller();
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String enrollmentBillingAccount, String resourceName, Context context) {
        return beginDeleteAsync(enrollmentBillingAccount, resourceName, context).getSyncPoller();
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String enrollmentBillingAccount, String resourceName) {
        return beginDeleteAsync(enrollmentBillingAccount, resourceName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String enrollmentBillingAccount, String resourceName, Context context) {
        return beginDeleteAsync(enrollmentBillingAccount, resourceName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String enrollmentBillingAccount, String resourceName) {
        deleteAsync(enrollmentBillingAccount, resourceName).block();
    }

    /**
     * Deletes the specified ProfessionalService for enrollment account.
     *
     * @param enrollmentBillingAccount The enrollment billing account id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String enrollmentBillingAccount, String resourceName, Context context) {
        deleteAsync(enrollmentBillingAccount, resourceName, context).block();
    }
}
