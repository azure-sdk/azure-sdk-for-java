// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.professionalservice.fluent.models.ProfessionalServiceResourceInner;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceCreation;

/** An instance of this class provides access to all the operations defined in ProfessionalServicesClient. */
public interface ProfessionalServicesClient {
    /**
     * Gets information about the specified Professional Service.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProfessionalServiceResourceInner> getWithResponse(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName, Context context);

    /**
     * Gets information about the specified Professional Service.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified Professional Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner get(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner> beginCreateOrUpdate(
        String billingAccount,
        String billingProfile,
        String invoiceSection,
        String resourceName,
        ProfessionalServiceResourceCreation parameters);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProfessionalServiceResourceInner>, ProfessionalServiceResourceInner> beginCreateOrUpdate(
        String billingAccount,
        String billingProfile,
        String invoiceSection,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner createOrUpdate(
        String billingAccount,
        String billingProfile,
        String invoiceSection,
        String resourceName,
        ProfessionalServiceResourceCreation parameters);

    /**
     * Creates or updates a ProfessionalService resource.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param parameters Parameters supplied to the create or update ProfessionalService operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return professionalService REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProfessionalServiceResourceInner createOrUpdate(
        String billingAccount,
        String billingProfile,
        String invoiceSection,
        String resourceName,
        ProfessionalServiceResourceCreation parameters,
        Context context);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName, Context context);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String billingAccount, String billingProfile, String invoiceSection, String resourceName);

    /**
     * Deletes the specified ProfessionalService.
     *
     * @param billingAccount The billing account id.
     * @param billingProfile The biling profile id.
     * @param invoiceSection The invoice section id.
     * @param resourceName The name of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(
        String billingAccount, String billingProfile, String invoiceSection, String resourceName, Context context);
}
