// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.professionalservice.generated;

import com.azure.core.util.Context;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceCreationProperties;
import com.azure.resourcemanager.professionalservice.models.ProfessionalServiceResourceCreation;
import java.util.HashMap;
import java.util.Map;

/** Samples for ProfessionalService CreateOrUpdate. */
public final class ProfessionalServiceCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/professionalservice/resource-manager/Microsoft.ProfessionalService/stable/2020-05-01/examples/ProfessionalService/ProfessionalServicePut.json
     */
    /**
     * Sample code: Create professional service resource.
     *
     * @param manager Entry point to ProfessionalServiceManager.
     */
    public static void createProfessionalServiceResource(
        com.azure.resourcemanager.professionalservice.ProfessionalServiceManager manager) {
        manager
            .professionalServices()
            .createOrUpdate(
                "48cb92a8-b67e-5a1b-4c7b-7bafbb523123",
                "AYOE-3HRP-BG7-ABC",
                "GOSZ-YOKV-PJA-ABC",
                "ps_subscription",
                new ProfessionalServiceResourceCreation()
                    .withName("ps_subscription")
                    .withLocation("global")
                    .withProperties(
                        new ProfessionalServiceCreationProperties()
                            .withOfferId("testprofservice")
                            .withPublisherId("profservicepublisher")
                            .withSkuId("ff051f4f-a6d9-4cbc-8d9a-2a41bd468abc")
                            .withPaymentChannelMetadata(
                                mapOf("OrganizationId", "fe8fd1af-1f5d-47f5-9db2-600bc5c74123_2018-09-30"))
                            .withTermId("hjdtn7tfnxcy")
                            .withQuoteId("quoteabc")),
                Context.NONE);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
