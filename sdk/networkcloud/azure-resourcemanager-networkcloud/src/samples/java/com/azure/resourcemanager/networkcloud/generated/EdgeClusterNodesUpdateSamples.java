// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.resourcemanager.networkcloud.models.EdgeClusterNode;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeMatchingIdentifier;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeMatchingIdentifierName;
import com.azure.resourcemanager.networkcloud.models.KubernetesLabel;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for EdgeClusterNodes Update.
 */
public final class EdgeClusterNodesUpdateSamples {
    /*
     * x-ms-original-file: specification/networkcloud/resource-manager/Microsoft.NetworkCloud/preview/2024-05-01-preview/examples/EdgeClusterNodes_Patch.json
     */
    /**
     * Sample code: Patch edge cluster node.
     * 
     * @param manager Entry point to NetworkCloudManager.
     */
    public static void patchEdgeClusterNode(com.azure.resourcemanager.networkcloud.NetworkCloudManager manager) {
        EdgeClusterNode resource = manager.edgeClusterNodes()
            .getWithResponse("resourceGroupName", "edgeClusterName", "nodeName", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withMachineSkuId(
                "/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/edgeClusterMachineSkus/edgeClusterMachineSkuName")
            .withNodeMatchingIdentifiers(Arrays.asList(new EdgeClusterNodeMatchingIdentifier()
                .withName(EdgeClusterNodeMatchingIdentifierName.PRODUCT_SERIAL_NUMBER)
                .withValue("productSerialNumber")))
            .withRegistrationHubMachineId(
                "/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/registrationHubs/registrationHubName/registrationHubMachines/registrationHubMachineName")
            .withSchedulingLabels(
                Arrays.asList(new KubernetesLabel().withKey("fakeTokenPlaceholder").withValue("schedulingLabel1")))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
