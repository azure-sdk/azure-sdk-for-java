// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.generated;

import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachineConfiguration;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachineCpu;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachineDevice;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachineMemory;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachineSystem;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for RegistrationHubMachines CreateOrUpdate.
 */
public final class RegistrationHubMachinesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/networkcloud/resource-manager/Microsoft.NetworkCloud/preview/2024-05-01-preview/examples/RegistrationHubMachines_Create.json
     */
    /**
     * Sample code: Create or update registration hub machine.
     * 
     * @param manager Entry point to NetworkCloudManager.
     */
    public static void
        createOrUpdateRegistrationHubMachine(com.azure.resourcemanager.networkcloud.NetworkCloudManager manager) {
        manager.registrationHubMachines()
            .define("machineName")
            .withRegion("location")
            .withExistingRegistrationHub("resourceGroupName", "registrationHubName")
            .withMachineConfiguration(new RegistrationHubMachineConfiguration()
                .withCpus(Arrays.asList(new RegistrationHubMachineCpu().withArchitecture("x86-64")
                    .withFamily("6")
                    .withModel("165")
                    .withModelName("Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz")
                    .withPhysicalCoresPerSocket(6L)
                    .withVendor("GenuineIntel")))
                .withDevices(Arrays.asList(new RegistrationHubMachineDevice().withAddress("0000:0e:00.0")
                    .withBus("pci")
                    .withClassProperty("storage")
                    .withMacAddress("2C:54:91:88:C9:E3")
                    .withModel("M-6581")
                    .withSerialNumber("BM1219XXX")
                    .withSizeGB(512L)
                    .withVendor("TestDeviceVendor")))
                .withMemory(new RegistrationHubMachineMemory().withSizeGB(256L))
                .withSystem(new RegistrationHubMachineSystem().withBiosVendor("biosVendor")
                    .withBiosVersion("1.2.3")
                    .withBoardSerialNumber("boardSerialNumber")
                    .withChassisSerialNumber("chassisSerialNumber")
                    .withProductName("productName")
                    .withProductSerialNumber("productSerialNumber")
                    .withTpmEndorsementKey("fakeTokenPlaceholder")
                    .withVendor("vendorName")))
            .withTags(mapOf("key1", "fakeTokenPlaceholder", "key2", "fakeTokenPlaceholder"))
            .withDescription("An example description of machine.")
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
