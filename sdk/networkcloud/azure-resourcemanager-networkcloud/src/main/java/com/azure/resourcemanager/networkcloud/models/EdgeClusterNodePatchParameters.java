// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodePatchProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * EdgeClusterNodePatchParameters represents the body of the request to patch the edge cluster node.
 */
@Fluent
public final class EdgeClusterNodePatchParameters {
    /*
     * EdgeClusterNodePatchProperties represents the edge cluster node properties for patching.
     * 
     * The list of the resource properties.
     */
    @JsonProperty(value = "properties")
    private EdgeClusterNodePatchProperties innerProperties;

    /*
     * The Azure resource tags that will replace the existing ones.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /**
     * Creates an instance of EdgeClusterNodePatchParameters class.
     */
    public EdgeClusterNodePatchParameters() {
    }

    /**
     * Get the innerProperties property: EdgeClusterNodePatchProperties represents the edge cluster node properties for
     * patching.
     * 
     * The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private EdgeClusterNodePatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tags property: The Azure resource tags that will replace the existing ones.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The Azure resource tags that will replace the existing ones.
     * 
     * @param tags the tags value to set.
     * @return the EdgeClusterNodePatchParameters object itself.
     */
    public EdgeClusterNodePatchParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the machineSkuId property: The resource ID of the SKU of the edge cluster node.
     * 
     * @return the machineSkuId value.
     */
    public String machineSkuId() {
        return this.innerProperties() == null ? null : this.innerProperties().machineSkuId();
    }

    /**
     * Set the machineSkuId property: The resource ID of the SKU of the edge cluster node.
     * 
     * @param machineSkuId the machineSkuId value to set.
     * @return the EdgeClusterNodePatchParameters object itself.
     */
    public EdgeClusterNodePatchParameters withMachineSkuId(String machineSkuId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EdgeClusterNodePatchProperties();
        }
        this.innerProperties().withMachineSkuId(machineSkuId);
        return this;
    }

    /**
     * Get the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in the registration
     * hub.
     * 
     * @return the nodeMatchingIdentifiers value.
     */
    public List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers() {
        return this.innerProperties() == null ? null : this.innerProperties().nodeMatchingIdentifiers();
    }

    /**
     * Set the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in the registration
     * hub.
     * 
     * @param nodeMatchingIdentifiers the nodeMatchingIdentifiers value to set.
     * @return the EdgeClusterNodePatchParameters object itself.
     */
    public EdgeClusterNodePatchParameters
        withNodeMatchingIdentifiers(List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EdgeClusterNodePatchProperties();
        }
        this.innerProperties().withNodeMatchingIdentifiers(nodeMatchingIdentifiers);
        return this;
    }

    /**
     * Get the registrationHubMachineId property: The resource ID of the machine in the registration hub that the node
     * is registered against.
     * 
     * @return the registrationHubMachineId value.
     */
    public String registrationHubMachineId() {
        return this.innerProperties() == null ? null : this.innerProperties().registrationHubMachineId();
    }

    /**
     * Set the registrationHubMachineId property: The resource ID of the machine in the registration hub that the node
     * is registered against.
     * 
     * @param registrationHubMachineId the registrationHubMachineId value to set.
     * @return the EdgeClusterNodePatchParameters object itself.
     */
    public EdgeClusterNodePatchParameters withRegistrationHubMachineId(String registrationHubMachineId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EdgeClusterNodePatchProperties();
        }
        this.innerProperties().withRegistrationHubMachineId(registrationHubMachineId);
        return this;
    }

    /**
     * Get the schedulingLabels property: The labels used to schedule resources on this node.
     * 
     * @return the schedulingLabels value.
     */
    public List<KubernetesLabel> schedulingLabels() {
        return this.innerProperties() == null ? null : this.innerProperties().schedulingLabels();
    }

    /**
     * Set the schedulingLabels property: The labels used to schedule resources on this node.
     * 
     * @param schedulingLabels the schedulingLabels value to set.
     * @return the EdgeClusterNodePatchParameters object itself.
     */
    public EdgeClusterNodePatchParameters withSchedulingLabels(List<KubernetesLabel> schedulingLabels) {
        if (this.innerProperties() == null) {
            this.innerProperties = new EdgeClusterNodePatchProperties();
        }
        this.innerProperties().withSchedulingLabels(schedulingLabels);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
