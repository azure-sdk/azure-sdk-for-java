// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** ClusterUpdateStrategy represents the strategy for updating the cluster. */
@Fluent
public final class ClusterUpdateStrategy {
    /*
     * The maximum number of worker nodes that can be offline within the increment of update, e.g., rack-by-rack.
     * Limited by the maximum number of machines in the increment. Defaults to the whole increment size.
     */
    @JsonProperty(value = "maxUnavailable")
    private Long maxUnavailable;

    /*
     * The mode of operation for runtime protection.
     */
    @JsonProperty(value = "strategyType", required = true)
    private ClusterUpdateStrategyType strategyType;

    /*
     * Selection of how the threshold should be evaluated.
     */
    @JsonProperty(value = "thresholdType", required = true)
    private ValidationThresholdType thresholdType;

    /*
     * The numeric threshold value.
     */
    @JsonProperty(value = "thresholdValue", required = true)
    private long thresholdValue;

    /*
     * The time to wait between the increments of update defined by the strategy.
     */
    @JsonProperty(value = "waitTimeMinutes")
    private Long waitTimeMinutes;

    /** Creates an instance of ClusterUpdateStrategy class. */
    public ClusterUpdateStrategy() {
    }

    /**
     * Get the maxUnavailable property: The maximum number of worker nodes that can be offline within the increment of
     * update, e.g., rack-by-rack. Limited by the maximum number of machines in the increment. Defaults to the whole
     * increment size.
     *
     * @return the maxUnavailable value.
     */
    public Long maxUnavailable() {
        return this.maxUnavailable;
    }

    /**
     * Set the maxUnavailable property: The maximum number of worker nodes that can be offline within the increment of
     * update, e.g., rack-by-rack. Limited by the maximum number of machines in the increment. Defaults to the whole
     * increment size.
     *
     * @param maxUnavailable the maxUnavailable value to set.
     * @return the ClusterUpdateStrategy object itself.
     */
    public ClusterUpdateStrategy withMaxUnavailable(Long maxUnavailable) {
        this.maxUnavailable = maxUnavailable;
        return this;
    }

    /**
     * Get the strategyType property: The mode of operation for runtime protection.
     *
     * @return the strategyType value.
     */
    public ClusterUpdateStrategyType strategyType() {
        return this.strategyType;
    }

    /**
     * Set the strategyType property: The mode of operation for runtime protection.
     *
     * @param strategyType the strategyType value to set.
     * @return the ClusterUpdateStrategy object itself.
     */
    public ClusterUpdateStrategy withStrategyType(ClusterUpdateStrategyType strategyType) {
        this.strategyType = strategyType;
        return this;
    }

    /**
     * Get the thresholdType property: Selection of how the threshold should be evaluated.
     *
     * @return the thresholdType value.
     */
    public ValidationThresholdType thresholdType() {
        return this.thresholdType;
    }

    /**
     * Set the thresholdType property: Selection of how the threshold should be evaluated.
     *
     * @param thresholdType the thresholdType value to set.
     * @return the ClusterUpdateStrategy object itself.
     */
    public ClusterUpdateStrategy withThresholdType(ValidationThresholdType thresholdType) {
        this.thresholdType = thresholdType;
        return this;
    }

    /**
     * Get the thresholdValue property: The numeric threshold value.
     *
     * @return the thresholdValue value.
     */
    public long thresholdValue() {
        return this.thresholdValue;
    }

    /**
     * Set the thresholdValue property: The numeric threshold value.
     *
     * @param thresholdValue the thresholdValue value to set.
     * @return the ClusterUpdateStrategy object itself.
     */
    public ClusterUpdateStrategy withThresholdValue(long thresholdValue) {
        this.thresholdValue = thresholdValue;
        return this;
    }

    /**
     * Get the waitTimeMinutes property: The time to wait between the increments of update defined by the strategy.
     *
     * @return the waitTimeMinutes value.
     */
    public Long waitTimeMinutes() {
        return this.waitTimeMinutes;
    }

    /**
     * Set the waitTimeMinutes property: The time to wait between the increments of update defined by the strategy.
     *
     * @param waitTimeMinutes the waitTimeMinutes value to set.
     * @return the ClusterUpdateStrategy object itself.
     */
    public ClusterUpdateStrategy withWaitTimeMinutes(Long waitTimeMinutes) {
        this.waitTimeMinutes = waitTimeMinutes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (strategyType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property strategyType in model ClusterUpdateStrategy"));
        }
        if (thresholdType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property thresholdType in model ClusterUpdateStrategy"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClusterUpdateStrategy.class);
}
