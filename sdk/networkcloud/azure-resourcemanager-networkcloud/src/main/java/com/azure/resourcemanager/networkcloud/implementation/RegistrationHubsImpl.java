// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.fluent.RegistrationHubsClient;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubInner;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import com.azure.resourcemanager.networkcloud.models.RegistrationHub;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubs;

public final class RegistrationHubsImpl implements RegistrationHubs {
    private static final ClientLogger LOGGER = new ClientLogger(RegistrationHubsImpl.class);

    private final RegistrationHubsClient innerClient;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public RegistrationHubsImpl(RegistrationHubsClient innerClient,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RegistrationHub> list() {
        PagedIterable<RegistrationHubInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegistrationHubImpl(inner1, this.manager()));
    }

    public PagedIterable<RegistrationHub> list(Context context) {
        PagedIterable<RegistrationHubInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegistrationHubImpl(inner1, this.manager()));
    }

    public PagedIterable<RegistrationHub> listByResourceGroup(String resourceGroupName) {
        PagedIterable<RegistrationHubInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegistrationHubImpl(inner1, this.manager()));
    }

    public PagedIterable<RegistrationHub> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<RegistrationHubInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegistrationHubImpl(inner1, this.manager()));
    }

    public Response<RegistrationHub> getByResourceGroupWithResponse(String resourceGroupName,
        String registrationHubName, Context context) {
        Response<RegistrationHubInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, registrationHubName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RegistrationHubImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RegistrationHub getByResourceGroup(String resourceGroupName, String registrationHubName) {
        RegistrationHubInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, registrationHubName);
        if (inner != null) {
            return new RegistrationHubImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult deleteByResourceGroup(String resourceGroupName, String registrationHubName) {
        OperationStatusResultInner inner = this.serviceClient().delete(resourceGroupName, registrationHubName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult delete(String resourceGroupName, String registrationHubName, Context context) {
        OperationStatusResultInner inner = this.serviceClient().delete(resourceGroupName, registrationHubName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RegistrationHub getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, registrationHubName, Context.NONE).getValue();
    }

    public Response<RegistrationHub> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, registrationHubName, context);
    }

    public OperationStatusResult deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        return this.delete(resourceGroupName, registrationHubName, Context.NONE);
    }

    public OperationStatusResult deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        return this.delete(resourceGroupName, registrationHubName, context);
    }

    private RegistrationHubsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    public RegistrationHubImpl define(String name) {
        return new RegistrationHubImpl(name, this.manager());
    }
}
