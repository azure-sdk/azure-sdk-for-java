// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeLifecycleStatus;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeMatchingIdentifier;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeNetworkInterface;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeProvisioningState;
import com.azure.resourcemanager.networkcloud.models.KubernetesLabel;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * EdgeClusterNodeProperties represents the properties of an edge cluster node.
 */
@Fluent
public final class EdgeClusterNodeProperties {
    /*
     * The resource IDs of the resources that depend on the Edge Cluster. This includes both infrastructure resources added automatically and workload resources that are added through orchestration.
     */
    @JsonProperty(value = "infrastructureResourceIds", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> infrastructureResourceIds;

    /*
     * The version of Kubernetes running on the node. This will typically match the Edge Cluster’s Kubernetes version, but may differ during upgrade activities.
     */
    @JsonProperty(value = "kubernetesVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String kubernetesVersion;

    /*
     * The lifecycle status of the edge cluster node resource.
     */
    @JsonProperty(value = "lifecycleStatus", access = JsonProperty.Access.WRITE_ONLY)
    private EdgeClusterNodeLifecycleStatus lifecycleStatus;

    /*
     * The resource ID of the SKU of the edge cluster node.
     */
    @JsonProperty(value = "machineSkuId", required = true)
    private String machineSkuId;

    /*
     * The network interfaces of the node.
     */
    @JsonProperty(value = "networkInterfaces", access = JsonProperty.Access.WRITE_ONLY)
    private List<EdgeClusterNodeNetworkInterface> networkInterfaces;

    /*
     * The identifiers used to match the node to a machine in the registration hub.
     */
    @JsonProperty(value = "nodeMatchingIdentifiers")
    private List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers;

    /*
     * The provisioning state of the edge cluster node.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private EdgeClusterNodeProvisioningState provisioningState;

    /*
     * The resource ID of the machine in the registration hub that the node is registered against.
     */
    @JsonProperty(value = "registrationHubMachineId")
    private String registrationHubMachineId;

    /*
     * The resource ID of the runtime version of the Nexus software running on the machine of the node. This will typically match the Edge Cluster’s runtime, but may differ during upgrade activities.
     */
    @JsonProperty(value = "runtimeVersionId", access = JsonProperty.Access.WRITE_ONLY)
    private String runtimeVersionId;

    /*
     * The labels used to schedule resources on this node.
     */
    @JsonProperty(value = "schedulingLabels")
    private List<KubernetesLabel> schedulingLabels;

    /*
     * The resource ID of the runtime version of the Nexus software that has been pre-staged to the machine, pending a cluster runtime update. If no runtime has been staged, this field will be omitted. During the process of staging a runtime, this field will be empty. It will only be populated when the staging has completed.
     */
    @JsonProperty(value = "stagedRuntimeVersionId", access = JsonProperty.Access.WRITE_ONLY)
    private String stagedRuntimeVersionId;

    /**
     * Creates an instance of EdgeClusterNodeProperties class.
     */
    public EdgeClusterNodeProperties() {
    }

    /**
     * Get the infrastructureResourceIds property: The resource IDs of the resources that depend on the Edge Cluster.
     * This includes both infrastructure resources added automatically and workload resources that are added through
     * orchestration.
     * 
     * @return the infrastructureResourceIds value.
     */
    public List<String> infrastructureResourceIds() {
        return this.infrastructureResourceIds;
    }

    /**
     * Get the kubernetesVersion property: The version of Kubernetes running on the node. This will typically match the
     * Edge Cluster’s Kubernetes version, but may differ during upgrade activities.
     * 
     * @return the kubernetesVersion value.
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * Get the lifecycleStatus property: The lifecycle status of the edge cluster node resource.
     * 
     * @return the lifecycleStatus value.
     */
    public EdgeClusterNodeLifecycleStatus lifecycleStatus() {
        return this.lifecycleStatus;
    }

    /**
     * Get the machineSkuId property: The resource ID of the SKU of the edge cluster node.
     * 
     * @return the machineSkuId value.
     */
    public String machineSkuId() {
        return this.machineSkuId;
    }

    /**
     * Set the machineSkuId property: The resource ID of the SKU of the edge cluster node.
     * 
     * @param machineSkuId the machineSkuId value to set.
     * @return the EdgeClusterNodeProperties object itself.
     */
    public EdgeClusterNodeProperties withMachineSkuId(String machineSkuId) {
        this.machineSkuId = machineSkuId;
        return this;
    }

    /**
     * Get the networkInterfaces property: The network interfaces of the node.
     * 
     * @return the networkInterfaces value.
     */
    public List<EdgeClusterNodeNetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Get the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in the registration
     * hub.
     * 
     * @return the nodeMatchingIdentifiers value.
     */
    public List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers() {
        return this.nodeMatchingIdentifiers;
    }

    /**
     * Set the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in the registration
     * hub.
     * 
     * @param nodeMatchingIdentifiers the nodeMatchingIdentifiers value to set.
     * @return the EdgeClusterNodeProperties object itself.
     */
    public EdgeClusterNodeProperties
        withNodeMatchingIdentifiers(List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers) {
        this.nodeMatchingIdentifiers = nodeMatchingIdentifiers;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the edge cluster node.
     * 
     * @return the provisioningState value.
     */
    public EdgeClusterNodeProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the registrationHubMachineId property: The resource ID of the machine in the registration hub that the node
     * is registered against.
     * 
     * @return the registrationHubMachineId value.
     */
    public String registrationHubMachineId() {
        return this.registrationHubMachineId;
    }

    /**
     * Set the registrationHubMachineId property: The resource ID of the machine in the registration hub that the node
     * is registered against.
     * 
     * @param registrationHubMachineId the registrationHubMachineId value to set.
     * @return the EdgeClusterNodeProperties object itself.
     */
    public EdgeClusterNodeProperties withRegistrationHubMachineId(String registrationHubMachineId) {
        this.registrationHubMachineId = registrationHubMachineId;
        return this;
    }

    /**
     * Get the runtimeVersionId property: The resource ID of the runtime version of the Nexus software running on the
     * machine of the node. This will typically match the Edge Cluster’s runtime, but may differ during upgrade
     * activities.
     * 
     * @return the runtimeVersionId value.
     */
    public String runtimeVersionId() {
        return this.runtimeVersionId;
    }

    /**
     * Get the schedulingLabels property: The labels used to schedule resources on this node.
     * 
     * @return the schedulingLabels value.
     */
    public List<KubernetesLabel> schedulingLabels() {
        return this.schedulingLabels;
    }

    /**
     * Set the schedulingLabels property: The labels used to schedule resources on this node.
     * 
     * @param schedulingLabels the schedulingLabels value to set.
     * @return the EdgeClusterNodeProperties object itself.
     */
    public EdgeClusterNodeProperties withSchedulingLabels(List<KubernetesLabel> schedulingLabels) {
        this.schedulingLabels = schedulingLabels;
        return this;
    }

    /**
     * Get the stagedRuntimeVersionId property: The resource ID of the runtime version of the Nexus software that has
     * been pre-staged to the machine, pending a cluster runtime update. If no runtime has been staged, this field will
     * be omitted. During the process of staging a runtime, this field will be empty. It will only be populated when the
     * staging has completed.
     * 
     * @return the stagedRuntimeVersionId value.
     */
    public String stagedRuntimeVersionId() {
        return this.stagedRuntimeVersionId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (machineSkuId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property machineSkuId in model EdgeClusterNodeProperties"));
        }
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
        if (nodeMatchingIdentifiers() != null) {
            nodeMatchingIdentifiers().forEach(e -> e.validate());
        }
        if (schedulingLabels() != null) {
            schedulingLabels().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EdgeClusterNodeProperties.class);
}
