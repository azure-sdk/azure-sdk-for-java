// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodeInner;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNode;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeLifecycleStatus;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeMatchingIdentifier;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeNetworkInterface;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodePatchParameters;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeProvisioningState;
import com.azure.resourcemanager.networkcloud.models.KubernetesLabel;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class EdgeClusterNodeImpl implements EdgeClusterNode, EdgeClusterNode.Definition, EdgeClusterNode.Update {
    private EdgeClusterNodeInner innerObject;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<String> infrastructureResourceIds() {
        List<String> inner = this.innerModel().infrastructureResourceIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String kubernetesVersion() {
        return this.innerModel().kubernetesVersion();
    }

    public EdgeClusterNodeLifecycleStatus lifecycleStatus() {
        return this.innerModel().lifecycleStatus();
    }

    public String machineSkuId() {
        return this.innerModel().machineSkuId();
    }

    public List<EdgeClusterNodeNetworkInterface> networkInterfaces() {
        List<EdgeClusterNodeNetworkInterface> inner = this.innerModel().networkInterfaces();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers() {
        List<EdgeClusterNodeMatchingIdentifier> inner = this.innerModel().nodeMatchingIdentifiers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public EdgeClusterNodeProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String registrationHubMachineId() {
        return this.innerModel().registrationHubMachineId();
    }

    public String runtimeVersionId() {
        return this.innerModel().runtimeVersionId();
    }

    public List<KubernetesLabel> schedulingLabels() {
        List<KubernetesLabel> inner = this.innerModel().schedulingLabels();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String stagedRuntimeVersionId() {
        return this.innerModel().stagedRuntimeVersionId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public EdgeClusterNodeInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String edgeClusterName;

    private String nodeName;

    private EdgeClusterNodePatchParameters updateEdgeClusterNodeUpdateParameters;

    public EdgeClusterNodeImpl withExistingEdgeCluster(String resourceGroupName, String edgeClusterName) {
        this.resourceGroupName = resourceGroupName;
        this.edgeClusterName = edgeClusterName;
        return this;
    }

    public EdgeClusterNode create() {
        this.innerObject = serviceManager.serviceClient()
            .getEdgeClusterNodes()
            .createOrUpdate(resourceGroupName, edgeClusterName, nodeName, this.innerModel(), Context.NONE);
        return this;
    }

    public EdgeClusterNode create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEdgeClusterNodes()
            .createOrUpdate(resourceGroupName, edgeClusterName, nodeName, this.innerModel(), context);
        return this;
    }

    EdgeClusterNodeImpl(String name, com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = new EdgeClusterNodeInner();
        this.serviceManager = serviceManager;
        this.nodeName = name;
    }

    public EdgeClusterNodeImpl update() {
        this.updateEdgeClusterNodeUpdateParameters = new EdgeClusterNodePatchParameters();
        return this;
    }

    public EdgeClusterNode apply() {
        this.innerObject = serviceManager.serviceClient()
            .getEdgeClusterNodes()
            .update(resourceGroupName, edgeClusterName, nodeName, updateEdgeClusterNodeUpdateParameters, Context.NONE);
        return this;
    }

    public EdgeClusterNode apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEdgeClusterNodes()
            .update(resourceGroupName, edgeClusterName, nodeName, updateEdgeClusterNodeUpdateParameters, context);
        return this;
    }

    EdgeClusterNodeImpl(EdgeClusterNodeInner innerObject,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.edgeClusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "edgeClusters");
        this.nodeName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "nodes");
    }

    public EdgeClusterNode refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getEdgeClusterNodes()
            .getWithResponse(resourceGroupName, edgeClusterName, nodeName, Context.NONE)
            .getValue();
        return this;
    }

    public EdgeClusterNode refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEdgeClusterNodes()
            .getWithResponse(resourceGroupName, edgeClusterName, nodeName, context)
            .getValue();
        return this;
    }

    public OperationStatusResult reimage() {
        return serviceManager.edgeClusterNodes().reimage(resourceGroupName, edgeClusterName, nodeName);
    }

    public OperationStatusResult reimage(Context context) {
        return serviceManager.edgeClusterNodes().reimage(resourceGroupName, edgeClusterName, nodeName, context);
    }

    public OperationStatusResult restart() {
        return serviceManager.edgeClusterNodes().restart(resourceGroupName, edgeClusterName, nodeName);
    }

    public OperationStatusResult restart(Context context) {
        return serviceManager.edgeClusterNodes().restart(resourceGroupName, edgeClusterName, nodeName, context);
    }

    public OperationStatusResult synchronizeTime() {
        return serviceManager.edgeClusterNodes().synchronizeTime(resourceGroupName, edgeClusterName, nodeName);
    }

    public OperationStatusResult synchronizeTime(Context context) {
        return serviceManager.edgeClusterNodes().synchronizeTime(resourceGroupName, edgeClusterName, nodeName, context);
    }

    public EdgeClusterNodeImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EdgeClusterNodeImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EdgeClusterNodeImpl withMachineSkuId(String machineSkuId) {
        if (isInCreateMode()) {
            this.innerModel().withMachineSkuId(machineSkuId);
            return this;
        } else {
            this.updateEdgeClusterNodeUpdateParameters.withMachineSkuId(machineSkuId);
            return this;
        }
    }

    public EdgeClusterNodeImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateEdgeClusterNodeUpdateParameters.withTags(tags);
            return this;
        }
    }

    public EdgeClusterNodeImpl
        withNodeMatchingIdentifiers(List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers) {
        if (isInCreateMode()) {
            this.innerModel().withNodeMatchingIdentifiers(nodeMatchingIdentifiers);
            return this;
        } else {
            this.updateEdgeClusterNodeUpdateParameters.withNodeMatchingIdentifiers(nodeMatchingIdentifiers);
            return this;
        }
    }

    public EdgeClusterNodeImpl withRegistrationHubMachineId(String registrationHubMachineId) {
        if (isInCreateMode()) {
            this.innerModel().withRegistrationHubMachineId(registrationHubMachineId);
            return this;
        } else {
            this.updateEdgeClusterNodeUpdateParameters.withRegistrationHubMachineId(registrationHubMachineId);
            return this;
        }
    }

    public EdgeClusterNodeImpl withSchedulingLabels(List<KubernetesLabel> schedulingLabels) {
        if (isInCreateMode()) {
            this.innerModel().withSchedulingLabels(schedulingLabels);
            return this;
        } else {
            this.updateEdgeClusterNodeUpdateParameters.withSchedulingLabels(schedulingLabels);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
