// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.networkcloud.models.ClusterSecretArchive;
import com.azure.resourcemanager.networkcloud.models.ClusterUpdateStrategy;
import com.azure.resourcemanager.networkcloud.models.CommandOutputSettings;
import com.azure.resourcemanager.networkcloud.models.RackDefinition;
import com.azure.resourcemanager.networkcloud.models.RuntimeProtectionConfiguration;
import com.azure.resourcemanager.networkcloud.models.ServicePrincipalInformation;
import com.azure.resourcemanager.networkcloud.models.ValidationThreshold;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * ClusterPatchProperties represents the properties of the cluster for patching.
 */
@Fluent
public final class ClusterPatchProperties {
    /*
     * RackDefinition represents details regarding the rack.
     * 
     * The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.
     */
    @JsonProperty(value = "aggregatorOrSingleRackDefinition")
    private RackDefinition aggregatorOrSingleRackDefinition;

    /*
     * The customer-provided location information to identify where the cluster resides.
     */
    @JsonProperty(value = "clusterLocation")
    private String clusterLocation;

    /*
     * ServicePrincipalInformation represents the details of the service principal to be used by the cluster during Arc Appliance installation.
     * 
     * The service principal to be used by the cluster during Arc Appliance installation.
     */
    @JsonProperty(value = "clusterServicePrincipal")
    private ServicePrincipalInformation clusterServicePrincipal;

    /*
     * CommandOutputSettings represents the settings for commands run within the cluster such as bare metal machine run read-only commands.
     * 
     * The settings for commands run in this cluster, such as bare metal machine run read only commands and data extracts.
     */
    @JsonProperty(value = "commandOutputSettings")
    private CommandOutputSettings commandOutputSettings;

    /*
     * ValidationThreshold indicates allowed machine and node hardware and deployment failures.
     * 
     * The validation threshold indicating the allowable failures of compute machines during environment validation and deployment.
     */
    @JsonProperty(value = "computeDeploymentThreshold")
    private ValidationThreshold computeDeploymentThreshold;

    /*
     * The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     */
    @JsonProperty(value = "computeRackDefinitions")
    private List<RackDefinition> computeRackDefinitions;

    /*
     * RuntimeProtectionConfiguration represents the runtime protection configuration for the cluster.
     * 
     * The settings for cluster runtime protection.
     */
    @JsonProperty(value = "runtimeProtectionConfiguration")
    private RuntimeProtectionConfiguration runtimeProtectionConfiguration;

    /*
     * ClusterSecretArchive configures the key vault to archive the secrets of the cluster for later retrieval.
     * 
     * The configuration for use of a key vault to store secrets for later retrieval by the operator.
     */
    @JsonProperty(value = "secretArchive")
    private ClusterSecretArchive secretArchive;

    /*
     * ClusterUpdateStrategy represents the strategy for updating the cluster.
     * 
     * The strategy for updating the cluster.
     */
    @JsonProperty(value = "updateStrategy")
    private ClusterUpdateStrategy updateStrategy;

    /**
     * Creates an instance of ClusterPatchProperties class.
     */
    public ClusterPatchProperties() {
    }

    /**
     * Get the aggregatorOrSingleRackDefinition property: RackDefinition represents details regarding the rack.
     * 
     * The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator
     * rack in a multi-rack cluster.
     * 
     * @return the aggregatorOrSingleRackDefinition value.
     */
    public RackDefinition aggregatorOrSingleRackDefinition() {
        return this.aggregatorOrSingleRackDefinition;
    }

    /**
     * Set the aggregatorOrSingleRackDefinition property: RackDefinition represents details regarding the rack.
     * 
     * The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator
     * rack in a multi-rack cluster.
     * 
     * @param aggregatorOrSingleRackDefinition the aggregatorOrSingleRackDefinition value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties
        withAggregatorOrSingleRackDefinition(RackDefinition aggregatorOrSingleRackDefinition) {
        this.aggregatorOrSingleRackDefinition = aggregatorOrSingleRackDefinition;
        return this;
    }

    /**
     * Get the clusterLocation property: The customer-provided location information to identify where the cluster
     * resides.
     * 
     * @return the clusterLocation value.
     */
    public String clusterLocation() {
        return this.clusterLocation;
    }

    /**
     * Set the clusterLocation property: The customer-provided location information to identify where the cluster
     * resides.
     * 
     * @param clusterLocation the clusterLocation value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withClusterLocation(String clusterLocation) {
        this.clusterLocation = clusterLocation;
        return this;
    }

    /**
     * Get the clusterServicePrincipal property: ServicePrincipalInformation represents the details of the service
     * principal to be used by the cluster during Arc Appliance installation.
     * 
     * The service principal to be used by the cluster during Arc Appliance installation.
     * 
     * @return the clusterServicePrincipal value.
     */
    public ServicePrincipalInformation clusterServicePrincipal() {
        return this.clusterServicePrincipal;
    }

    /**
     * Set the clusterServicePrincipal property: ServicePrincipalInformation represents the details of the service
     * principal to be used by the cluster during Arc Appliance installation.
     * 
     * The service principal to be used by the cluster during Arc Appliance installation.
     * 
     * @param clusterServicePrincipal the clusterServicePrincipal value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withClusterServicePrincipal(ServicePrincipalInformation clusterServicePrincipal) {
        this.clusterServicePrincipal = clusterServicePrincipal;
        return this;
    }

    /**
     * Get the commandOutputSettings property: CommandOutputSettings represents the settings for commands run within the
     * cluster such as bare metal machine run read-only commands.
     * 
     * The settings for commands run in this cluster, such as bare metal machine run read only commands and data
     * extracts.
     * 
     * @return the commandOutputSettings value.
     */
    public CommandOutputSettings commandOutputSettings() {
        return this.commandOutputSettings;
    }

    /**
     * Set the commandOutputSettings property: CommandOutputSettings represents the settings for commands run within the
     * cluster such as bare metal machine run read-only commands.
     * 
     * The settings for commands run in this cluster, such as bare metal machine run read only commands and data
     * extracts.
     * 
     * @param commandOutputSettings the commandOutputSettings value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withCommandOutputSettings(CommandOutputSettings commandOutputSettings) {
        this.commandOutputSettings = commandOutputSettings;
        return this;
    }

    /**
     * Get the computeDeploymentThreshold property: ValidationThreshold indicates allowed machine and node hardware and
     * deployment failures.
     * 
     * The validation threshold indicating the allowable failures of compute machines during environment validation and
     * deployment.
     * 
     * @return the computeDeploymentThreshold value.
     */
    public ValidationThreshold computeDeploymentThreshold() {
        return this.computeDeploymentThreshold;
    }

    /**
     * Set the computeDeploymentThreshold property: ValidationThreshold indicates allowed machine and node hardware and
     * deployment failures.
     * 
     * The validation threshold indicating the allowable failures of compute machines during environment validation and
     * deployment.
     * 
     * @param computeDeploymentThreshold the computeDeploymentThreshold value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withComputeDeploymentThreshold(ValidationThreshold computeDeploymentThreshold) {
        this.computeDeploymentThreshold = computeDeploymentThreshold;
        return this;
    }

    /**
     * Get the computeRackDefinitions property: The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     * 
     * @return the computeRackDefinitions value.
     */
    public List<RackDefinition> computeRackDefinitions() {
        return this.computeRackDefinitions;
    }

    /**
     * Set the computeRackDefinitions property: The list of rack definitions for the compute racks in a multi-rack
     * cluster, or an empty list in a single-rack cluster.
     * 
     * @param computeRackDefinitions the computeRackDefinitions value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withComputeRackDefinitions(List<RackDefinition> computeRackDefinitions) {
        this.computeRackDefinitions = computeRackDefinitions;
        return this;
    }

    /**
     * Get the runtimeProtectionConfiguration property: RuntimeProtectionConfiguration represents the runtime protection
     * configuration for the cluster.
     * 
     * The settings for cluster runtime protection.
     * 
     * @return the runtimeProtectionConfiguration value.
     */
    public RuntimeProtectionConfiguration runtimeProtectionConfiguration() {
        return this.runtimeProtectionConfiguration;
    }

    /**
     * Set the runtimeProtectionConfiguration property: RuntimeProtectionConfiguration represents the runtime protection
     * configuration for the cluster.
     * 
     * The settings for cluster runtime protection.
     * 
     * @param runtimeProtectionConfiguration the runtimeProtectionConfiguration value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties
        withRuntimeProtectionConfiguration(RuntimeProtectionConfiguration runtimeProtectionConfiguration) {
        this.runtimeProtectionConfiguration = runtimeProtectionConfiguration;
        return this;
    }

    /**
     * Get the secretArchive property: ClusterSecretArchive configures the key vault to archive the secrets of the
     * cluster for later retrieval.
     * 
     * The configuration for use of a key vault to store secrets for later retrieval by the operator.
     * 
     * @return the secretArchive value.
     */
    public ClusterSecretArchive secretArchive() {
        return this.secretArchive;
    }

    /**
     * Set the secretArchive property: ClusterSecretArchive configures the key vault to archive the secrets of the
     * cluster for later retrieval.
     * 
     * The configuration for use of a key vault to store secrets for later retrieval by the operator.
     * 
     * @param secretArchive the secretArchive value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withSecretArchive(ClusterSecretArchive secretArchive) {
        this.secretArchive = secretArchive;
        return this;
    }

    /**
     * Get the updateStrategy property: ClusterUpdateStrategy represents the strategy for updating the cluster.
     * 
     * The strategy for updating the cluster.
     * 
     * @return the updateStrategy value.
     */
    public ClusterUpdateStrategy updateStrategy() {
        return this.updateStrategy;
    }

    /**
     * Set the updateStrategy property: ClusterUpdateStrategy represents the strategy for updating the cluster.
     * 
     * The strategy for updating the cluster.
     * 
     * @param updateStrategy the updateStrategy value to set.
     * @return the ClusterPatchProperties object itself.
     */
    public ClusterPatchProperties withUpdateStrategy(ClusterUpdateStrategy updateStrategy) {
        this.updateStrategy = updateStrategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregatorOrSingleRackDefinition() != null) {
            aggregatorOrSingleRackDefinition().validate();
        }
        if (clusterServicePrincipal() != null) {
            clusterServicePrincipal().validate();
        }
        if (commandOutputSettings() != null) {
            commandOutputSettings().validate();
        }
        if (computeDeploymentThreshold() != null) {
            computeDeploymentThreshold().validate();
        }
        if (computeRackDefinitions() != null) {
            computeRackDefinitions().forEach(e -> e.validate());
        }
        if (runtimeProtectionConfiguration() != null) {
            runtimeProtectionConfiguration().validate();
        }
        if (secretArchive() != null) {
            secretArchive().validate();
        }
        if (updateStrategy() != null) {
            updateStrategy().validate();
        }
    }
}
