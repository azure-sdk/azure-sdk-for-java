// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodeInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodePatchParameters;

/**
 * An instance of this class provides access to all the operations defined in EdgeClusterNodesClient.
 */
public interface EdgeClusterNodesClient {
    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeClusterNodeInner> listByEdgeCluster(String resourceGroupName, String edgeClusterName);

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeClusterNodeInner> listByEdgeCluster(String resourceGroupName, String edgeClusterName,
        Context context);

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EdgeClusterNodeInner> getWithResponse(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context);

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterNodeInner get(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginCreateOrUpdate(String resourceGroupName,
        String edgeClusterName, String nodeName, EdgeClusterNodeInner edgeClusterNodeParameters);

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginCreateOrUpdate(String resourceGroupName,
        String edgeClusterName, String nodeName, EdgeClusterNodeInner edgeClusterNodeParameters, Context context);

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterNodeInner createOrUpdate(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters);

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterNodeInner createOrUpdate(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters, Context context);

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(String resourceGroupName,
        String edgeClusterName, String nodeName);

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(String resourceGroupName,
        String edgeClusterName, String nodeName, Context context);

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context);

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginUpdate(String resourceGroupName,
        String edgeClusterName, String nodeName);

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginUpdate(String resourceGroupName,
        String edgeClusterName, String nodeName, EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters,
        Context context);

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterNodeInner update(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterNodeInner update(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters, Context context);

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimage(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimage(String resourceGroupName, String edgeClusterName, String nodeName, Context context);

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner reimage(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner reimage(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context);

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestart(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestart(String resourceGroupName, String edgeClusterName, String nodeName, Context context);

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner restart(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner restart(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context);

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginSynchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginSynchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName, Context context);

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner synchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName);

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner synchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context);
}
