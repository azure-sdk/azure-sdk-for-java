// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.fluent.EdgeClusterNodesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodeInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNode;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodes;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;

public final class EdgeClusterNodesImpl implements EdgeClusterNodes {
    private static final ClientLogger LOGGER = new ClientLogger(EdgeClusterNodesImpl.class);

    private final EdgeClusterNodesClient innerClient;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public EdgeClusterNodesImpl(EdgeClusterNodesClient innerClient,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<EdgeClusterNode> listByEdgeCluster(String resourceGroupName, String edgeClusterName) {
        PagedIterable<EdgeClusterNodeInner> inner
            = this.serviceClient().listByEdgeCluster(resourceGroupName, edgeClusterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EdgeClusterNodeImpl(inner1, this.manager()));
    }

    public PagedIterable<EdgeClusterNode> listByEdgeCluster(String resourceGroupName, String edgeClusterName,
        Context context) {
        PagedIterable<EdgeClusterNodeInner> inner
            = this.serviceClient().listByEdgeCluster(resourceGroupName, edgeClusterName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EdgeClusterNodeImpl(inner1, this.manager()));
    }

    public Response<EdgeClusterNode> getWithResponse(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        Response<EdgeClusterNodeInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, edgeClusterName, nodeName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EdgeClusterNodeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EdgeClusterNode get(String resourceGroupName, String edgeClusterName, String nodeName) {
        EdgeClusterNodeInner inner = this.serviceClient().get(resourceGroupName, edgeClusterName, nodeName);
        if (inner != null) {
            return new EdgeClusterNodeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult delete(String resourceGroupName, String edgeClusterName, String nodeName) {
        OperationStatusResultInner inner = this.serviceClient().delete(resourceGroupName, edgeClusterName, nodeName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult delete(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().delete(resourceGroupName, edgeClusterName, nodeName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult reimage(String resourceGroupName, String edgeClusterName, String nodeName) {
        OperationStatusResultInner inner = this.serviceClient().reimage(resourceGroupName, edgeClusterName, nodeName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult reimage(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().reimage(resourceGroupName, edgeClusterName, nodeName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult restart(String resourceGroupName, String edgeClusterName, String nodeName) {
        OperationStatusResultInner inner = this.serviceClient().restart(resourceGroupName, edgeClusterName, nodeName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult restart(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().restart(resourceGroupName, edgeClusterName, nodeName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult synchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName) {
        OperationStatusResultInner inner
            = this.serviceClient().synchronizeTime(resourceGroupName, edgeClusterName, nodeName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult synchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().synchronizeTime(resourceGroupName, edgeClusterName, nodeName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EdgeClusterNode getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeClusterName = ResourceManagerUtils.getValueFromIdByName(id, "edgeClusters");
        if (edgeClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeClusters'.", id)));
        }
        String nodeName = ResourceManagerUtils.getValueFromIdByName(id, "nodes");
        if (nodeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, edgeClusterName, nodeName, Context.NONE).getValue();
    }

    public Response<EdgeClusterNode> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeClusterName = ResourceManagerUtils.getValueFromIdByName(id, "edgeClusters");
        if (edgeClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeClusters'.", id)));
        }
        String nodeName = ResourceManagerUtils.getValueFromIdByName(id, "nodes");
        if (nodeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, edgeClusterName, nodeName, context);
    }

    public OperationStatusResult deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeClusterName = ResourceManagerUtils.getValueFromIdByName(id, "edgeClusters");
        if (edgeClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeClusters'.", id)));
        }
        String nodeName = ResourceManagerUtils.getValueFromIdByName(id, "nodes");
        if (nodeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodes'.", id)));
        }
        return this.delete(resourceGroupName, edgeClusterName, nodeName, Context.NONE);
    }

    public OperationStatusResult deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String edgeClusterName = ResourceManagerUtils.getValueFromIdByName(id, "edgeClusters");
        if (edgeClusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'edgeClusters'.", id)));
        }
        String nodeName = ResourceManagerUtils.getValueFromIdByName(id, "nodes");
        if (nodeName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'nodes'.", id)));
        }
        return this.delete(resourceGroupName, edgeClusterName, nodeName, context);
    }

    private EdgeClusterNodesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    public EdgeClusterNodeImpl define(String name) {
        return new EdgeClusterNodeImpl(name, this.manager());
    }
}
