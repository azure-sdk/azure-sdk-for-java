// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.RegistrationHubsClient;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubInner;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubList;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubPatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RegistrationHubsClient.
 */
public final class RegistrationHubsClientImpl implements RegistrationHubsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RegistrationHubsService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of RegistrationHubsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RegistrationHubsClientImpl(NetworkCloudImpl client) {
        this.service
            = RestProxy.create(RegistrationHubsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudRegistrationHubs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudRegistra")
    public interface RegistrationHubsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/registrationHubs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubList>> listByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName,
            @BodyParam("application/json") RegistrationHubInner registrationHubParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName,
            @BodyParam("application/json") RegistrationHubPatchParameters registrationHubUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<RegistrationHubInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubInner> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context))
            .<PagedResponse<RegistrationHubInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationHubInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String registrationHubName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationHubInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String registrationHubName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context);
    }

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubInner> getByResourceGroupAsync(String resourceGroupName, String registrationHubName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, registrationHubName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistrationHubInner> getByResourceGroupWithResponse(String resourceGroupName,
        String registrationHubName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, registrationHubName, context).block();
    }

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubInner getByResourceGroup(String resourceGroupName, String registrationHubName) {
        return getByResourceGroupWithResponse(resourceGroupName, registrationHubName, Context.NONE).getValue();
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String registrationHubName, RegistrationHubInner registrationHubParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (registrationHubParameters == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter registrationHubParameters is required and cannot be null."));
        } else {
            registrationHubParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, registrationHubParameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String registrationHubName, RegistrationHubInner registrationHubParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (registrationHubParameters == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter registrationHubParameters is required and cannot be null."));
        } else {
            registrationHubParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, registrationHubName, registrationHubParameters, accept,
            context);
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubInner>, RegistrationHubInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String registrationHubName, RegistrationHubInner registrationHubParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, registrationHubName, registrationHubParameters);
        return this.client.<RegistrationHubInner, RegistrationHubInner>getLroResult(mono, this.client.getHttpPipeline(),
            RegistrationHubInner.class, RegistrationHubInner.class, this.client.getContext());
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubInner>, RegistrationHubInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String registrationHubName, RegistrationHubInner registrationHubParameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, registrationHubName,
            registrationHubParameters, context);
        return this.client.<RegistrationHubInner, RegistrationHubInner>getLroResult(mono, this.client.getHttpPipeline(),
            RegistrationHubInner.class, RegistrationHubInner.class, context);
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginCreateOrUpdate(
        String resourceGroupName, String registrationHubName, RegistrationHubInner registrationHubParameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, registrationHubParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginCreateOrUpdate(
        String resourceGroupName, String registrationHubName, RegistrationHubInner registrationHubParameters,
        Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, registrationHubParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubInner> createOrUpdateAsync(String resourceGroupName, String registrationHubName,
        RegistrationHubInner registrationHubParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, registrationHubParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubInner> createOrUpdateAsync(String resourceGroupName, String registrationHubName,
        RegistrationHubInner registrationHubParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, registrationHubParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubInner createOrUpdate(String resourceGroupName, String registrationHubName,
        RegistrationHubInner registrationHubParameters) {
        return createOrUpdateAsync(resourceGroupName, registrationHubName, registrationHubParameters).block();
    }

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubInner createOrUpdate(String resourceGroupName, String registrationHubName,
        RegistrationHubInner registrationHubParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, registrationHubName, registrationHubParameters, context).block();
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String registrationHubName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String registrationHubName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, accept, context);
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String registrationHubName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, registrationHubName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String registrationHubName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, registrationHubName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String registrationHubName) {
        return this.beginDeleteAsync(resourceGroupName, registrationHubName).getSyncPoller();
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String registrationHubName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, registrationHubName, context).getSyncPoller();
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String registrationHubName) {
        return beginDeleteAsync(resourceGroupName, registrationHubName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String registrationHubName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, registrationHubName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String registrationHubName) {
        return deleteAsync(resourceGroupName, registrationHubName).block();
    }

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String registrationHubName, Context context) {
        return deleteAsync(resourceGroupName, registrationHubName, context).block();
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String registrationHubName, RegistrationHubPatchParameters registrationHubUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (registrationHubUpdateParameters != null) {
            registrationHubUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName,
                registrationHubUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String registrationHubName, RegistrationHubPatchParameters registrationHubUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (registrationHubUpdateParameters != null) {
            registrationHubUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, registrationHubUpdateParameters, accept, context);
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubInner>, RegistrationHubInner> beginUpdateAsync(
        String resourceGroupName, String registrationHubName,
        RegistrationHubPatchParameters registrationHubUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters);
        return this.client.<RegistrationHubInner, RegistrationHubInner>getLroResult(mono, this.client.getHttpPipeline(),
            RegistrationHubInner.class, RegistrationHubInner.class, this.client.getContext());
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubInner>, RegistrationHubInner>
        beginUpdateAsync(String resourceGroupName, String registrationHubName) {
        final RegistrationHubPatchParameters registrationHubUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters);
        return this.client.<RegistrationHubInner, RegistrationHubInner>getLroResult(mono, this.client.getHttpPipeline(),
            RegistrationHubInner.class, RegistrationHubInner.class, this.client.getContext());
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubInner>, RegistrationHubInner> beginUpdateAsync(
        String resourceGroupName, String registrationHubName,
        RegistrationHubPatchParameters registrationHubUpdateParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters, context);
        return this.client.<RegistrationHubInner, RegistrationHubInner>getLroResult(mono, this.client.getHttpPipeline(),
            RegistrationHubInner.class, RegistrationHubInner.class, context);
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginUpdate(String resourceGroupName,
        String registrationHubName) {
        final RegistrationHubPatchParameters registrationHubUpdateParameters = null;
        return this.beginUpdateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters)
            .getSyncPoller();
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginUpdate(String resourceGroupName,
        String registrationHubName, RegistrationHubPatchParameters registrationHubUpdateParameters, Context context) {
        return this.beginUpdateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters, context)
            .getSyncPoller();
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubInner> updateAsync(String resourceGroupName, String registrationHubName,
        RegistrationHubPatchParameters registrationHubUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubInner> updateAsync(String resourceGroupName, String registrationHubName) {
        final RegistrationHubPatchParameters registrationHubUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubInner> updateAsync(String resourceGroupName, String registrationHubName,
        RegistrationHubPatchParameters registrationHubUpdateParameters, Context context) {
        return beginUpdateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubInner update(String resourceGroupName, String registrationHubName) {
        final RegistrationHubPatchParameters registrationHubUpdateParameters = null;
        return updateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters).block();
    }

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubInner update(String resourceGroupName, String registrationHubName,
        RegistrationHubPatchParameters registrationHubUpdateParameters, Context context) {
        return updateAsync(resourceGroupName, registrationHubName, registrationHubUpdateParameters, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubList represents a list of registration hubs along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RegistrationHubInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubList represents a list of registration hubs along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listBySubscriptionNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubList represents a list of registration hubs along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RegistrationHubInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubList represents a list of registration hubs along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubInner>> listByResourceGroupNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
