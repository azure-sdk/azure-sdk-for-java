// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.fluent.RegistrationHubMachinesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubMachineInner;
import com.azure.resourcemanager.networkcloud.models.OperationStatusResult;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachine;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachines;

public final class RegistrationHubMachinesImpl implements RegistrationHubMachines {
    private static final ClientLogger LOGGER = new ClientLogger(RegistrationHubMachinesImpl.class);

    private final RegistrationHubMachinesClient innerClient;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public RegistrationHubMachinesImpl(RegistrationHubMachinesClient innerClient,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RegistrationHubMachine> listByRegistrationHub(String resourceGroupName,
        String registrationHubName) {
        PagedIterable<RegistrationHubMachineInner> inner
            = this.serviceClient().listByRegistrationHub(resourceGroupName, registrationHubName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegistrationHubMachineImpl(inner1, this.manager()));
    }

    public PagedIterable<RegistrationHubMachine> listByRegistrationHub(String resourceGroupName,
        String registrationHubName, Context context) {
        PagedIterable<RegistrationHubMachineInner> inner
            = this.serviceClient().listByRegistrationHub(resourceGroupName, registrationHubName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RegistrationHubMachineImpl(inner1, this.manager()));
    }

    public Response<RegistrationHubMachine> getWithResponse(String resourceGroupName, String registrationHubName,
        String machineName, Context context) {
        Response<RegistrationHubMachineInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, registrationHubName, machineName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RegistrationHubMachineImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RegistrationHubMachine get(String resourceGroupName, String registrationHubName, String machineName) {
        RegistrationHubMachineInner inner
            = this.serviceClient().get(resourceGroupName, registrationHubName, machineName);
        if (inner != null) {
            return new RegistrationHubMachineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult delete(String resourceGroupName, String registrationHubName, String machineName) {
        OperationStatusResultInner inner
            = this.serviceClient().delete(resourceGroupName, registrationHubName, machineName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult delete(String resourceGroupName, String registrationHubName, String machineName,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().delete(resourceGroupName, registrationHubName, machineName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult decline(String resourceGroupName, String registrationHubName, String machineName) {
        OperationStatusResultInner inner
            = this.serviceClient().decline(resourceGroupName, registrationHubName, machineName);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationStatusResult decline(String resourceGroupName, String registrationHubName, String machineName,
        Context context) {
        OperationStatusResultInner inner
            = this.serviceClient().decline(resourceGroupName, registrationHubName, machineName, context);
        if (inner != null) {
            return new OperationStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RegistrationHubMachine getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registrationHubName, machineName, Context.NONE).getValue();
    }

    public Response<RegistrationHubMachine> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        return this.getWithResponse(resourceGroupName, registrationHubName, machineName, context);
    }

    public OperationStatusResult deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        return this.delete(resourceGroupName, registrationHubName, machineName, Context.NONE);
    }

    public OperationStatusResult deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String registrationHubName = ResourceManagerUtils.getValueFromIdByName(id, "registrationHubs");
        if (registrationHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'registrationHubs'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        return this.delete(resourceGroupName, registrationHubName, machineName, context);
    }

    private RegistrationHubMachinesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    public RegistrationHubMachineImpl define(String name) {
        return new RegistrationHubMachineImpl(name, this.manager());
    }
}
