// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.EdgeClustersClient;
import com.azure.resourcemanager.networkcloud.fluent.models.CredentialResultsInner;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterList;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterPatchParameters;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterStageRuntimeParameters;
import com.azure.resourcemanager.networkcloud.models.ListUserCredentialParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in EdgeClustersClient.
 */
public final class EdgeClustersClientImpl implements EdgeClustersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EdgeClustersService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of EdgeClustersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EdgeClustersClientImpl(NetworkCloudImpl client) {
        this.service
            = RestProxy.create(EdgeClustersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudEdgeClusters to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudEdgeClus")
    public interface EdgeClustersService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/edgeClusters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterList>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterList>> listByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName,
            @BodyParam("application/json") EdgeClusterInner edgeClusterParameters, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName,
            @BodyParam("application/json") EdgeClusterPatchParameters edgeClusterUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/listClusterUserCredential")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CredentialResultsInner>> listClusterUserCredential(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName,
            @BodyParam("application/json") ListUserCredentialParameters listUserCredentialParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/stageRuntime")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> stageRuntime(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName,
            @BodyParam("application/json") EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterList>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterList>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<EdgeClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EdgeClusterInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EdgeClusterInner> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EdgeClusterInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EdgeClusterInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context))
            .<PagedResponse<EdgeClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EdgeClusterInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EdgeClusterInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EdgeClusterInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EdgeClusterInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EdgeClusterInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String edgeClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EdgeClusterInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String edgeClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, accept, context);
    }

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterInner> getByResourceGroupAsync(String resourceGroupName, String edgeClusterName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, edgeClusterName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EdgeClusterInner> getByResourceGroupWithResponse(String resourceGroupName, String edgeClusterName,
        Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, edgeClusterName, context).block();
    }

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterInner getByResourceGroup(String resourceGroupName, String edgeClusterName) {
        return getByResourceGroupWithResponse(resourceGroupName, edgeClusterName, Context.NONE).getValue();
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String edgeClusterName, EdgeClusterInner edgeClusterParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (edgeClusterParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterParameters is required and cannot be null."));
        } else {
            edgeClusterParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, edgeClusterParameters, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String edgeClusterName, EdgeClusterInner edgeClusterParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (edgeClusterParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterParameters is required and cannot be null."));
        } else {
            edgeClusterParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, edgeClusterParameters, accept,
            context);
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterInner>, EdgeClusterInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String edgeClusterName, EdgeClusterInner edgeClusterParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, edgeClusterName, edgeClusterParameters);
        return this.client.<EdgeClusterInner, EdgeClusterInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterInner.class, EdgeClusterInner.class, this.client.getContext());
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterInner>, EdgeClusterInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String edgeClusterName, EdgeClusterInner edgeClusterParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, edgeClusterName, edgeClusterParameters, context);
        return this.client.<EdgeClusterInner, EdgeClusterInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterInner.class, EdgeClusterInner.class, context);
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginCreateOrUpdate(String resourceGroupName,
        String edgeClusterName, EdgeClusterInner edgeClusterParameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterParameters).getSyncPoller();
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginCreateOrUpdate(String resourceGroupName,
        String edgeClusterName, EdgeClusterInner edgeClusterParameters, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterInner> createOrUpdateAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterInner edgeClusterParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterInner> createOrUpdateAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterInner edgeClusterParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterParameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterInner createOrUpdate(String resourceGroupName, String edgeClusterName,
        EdgeClusterInner edgeClusterParameters) {
        return createOrUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterParameters).block();
    }

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterInner createOrUpdate(String resourceGroupName, String edgeClusterName,
        EdgeClusterInner edgeClusterParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterParameters, context).block();
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String edgeClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String edgeClusterName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, accept, context);
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String edgeClusterName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, edgeClusterName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String edgeClusterName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, edgeClusterName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String edgeClusterName) {
        return this.beginDeleteAsync(resourceGroupName, edgeClusterName).getSyncPoller();
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String edgeClusterName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, edgeClusterName, context).getSyncPoller();
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String edgeClusterName) {
        return beginDeleteAsync(resourceGroupName, edgeClusterName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String edgeClusterName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, edgeClusterName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName) {
        return deleteAsync(resourceGroupName, edgeClusterName).block();
    }

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName, Context context) {
        return deleteAsync(resourceGroupName, edgeClusterName, context).block();
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterPatchParameters edgeClusterUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (edgeClusterUpdateParameters != null) {
            edgeClusterUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, edgeClusterUpdateParameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (edgeClusterUpdateParameters != null) {
            edgeClusterUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, accept, context);
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdateAsync(String resourceGroupName,
        String edgeClusterName, EdgeClusterPatchParameters edgeClusterUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters);
        return this.client.<EdgeClusterInner, EdgeClusterInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterInner.class, EdgeClusterInner.class, this.client.getContext());
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdateAsync(String resourceGroupName,
        String edgeClusterName) {
        final EdgeClusterPatchParameters edgeClusterUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters);
        return this.client.<EdgeClusterInner, EdgeClusterInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterInner.class, EdgeClusterInner.class, this.client.getContext());
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdateAsync(String resourceGroupName,
        String edgeClusterName, EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, context);
        return this.client.<EdgeClusterInner, EdgeClusterInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterInner.class, EdgeClusterInner.class, context);
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdate(String resourceGroupName,
        String edgeClusterName) {
        final EdgeClusterPatchParameters edgeClusterUpdateParameters = null;
        return this.beginUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters).getSyncPoller();
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdate(String resourceGroupName,
        String edgeClusterName, EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context) {
        return this.beginUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, context)
            .getSyncPoller();
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterInner> updateAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterPatchParameters edgeClusterUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterInner> updateAsync(String resourceGroupName, String edgeClusterName) {
        final EdgeClusterPatchParameters edgeClusterUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterInner> updateAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context) {
        return beginUpdateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterInner update(String resourceGroupName, String edgeClusterName) {
        final EdgeClusterPatchParameters edgeClusterUpdateParameters = null;
        return updateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters).block();
    }

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterInner update(String resourceGroupName, String edgeClusterName,
        EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context) {
        return updateAsync(resourceGroupName, edgeClusterName, edgeClusterUpdateParameters, context).block();
    }

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param listUserCredentialParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CredentialResultsInner>> listClusterUserCredentialWithResponseAsync(String resourceGroupName,
        String edgeClusterName, ListUserCredentialParameters listUserCredentialParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (listUserCredentialParameters != null) {
            listUserCredentialParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listClusterUserCredential(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, edgeClusterName,
                listUserCredentialParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param listUserCredentialParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CredentialResultsInner>> listClusterUserCredentialWithResponseAsync(String resourceGroupName,
        String edgeClusterName, ListUserCredentialParameters listUserCredentialParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (listUserCredentialParameters != null) {
            listUserCredentialParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listClusterUserCredential(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, listUserCredentialParameters, accept,
            context);
    }

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CredentialResultsInner> listClusterUserCredentialAsync(String resourceGroupName,
        String edgeClusterName) {
        final ListUserCredentialParameters listUserCredentialParameters = null;
        return listClusterUserCredentialWithResponseAsync(resourceGroupName, edgeClusterName,
            listUserCredentialParameters).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param listUserCredentialParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CredentialResultsInner> listClusterUserCredentialWithResponse(String resourceGroupName,
        String edgeClusterName, ListUserCredentialParameters listUserCredentialParameters, Context context) {
        return listClusterUserCredentialWithResponseAsync(resourceGroupName, edgeClusterName,
            listUserCredentialParameters, context).block();
    }

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CredentialResultsInner listClusterUserCredential(String resourceGroupName, String edgeClusterName) {
        final ListUserCredentialParameters listUserCredentialParameters = null;
        return listClusterUserCredentialWithResponse(resourceGroupName, edgeClusterName, listUserCredentialParameters,
            Context.NONE).getValue();
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stageRuntimeWithResponseAsync(String resourceGroupName,
        String edgeClusterName, EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (edgeClusterStageRuntimeParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter edgeClusterStageRuntimeParameters is required and cannot be null."));
        } else {
            edgeClusterStageRuntimeParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.stageRuntime(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> stageRuntimeWithResponseAsync(String resourceGroupName,
        String edgeClusterName, EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (edgeClusterStageRuntimeParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter edgeClusterStageRuntimeParameters is required and cannot be null."));
        } else {
            edgeClusterStageRuntimeParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.stageRuntime(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters,
            accept, context);
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStageRuntimeAsync(
        String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = stageRuntimeWithResponseAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStageRuntimeAsync(
        String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = stageRuntimeWithResponseAsync(resourceGroupName, edgeClusterName,
            edgeClusterStageRuntimeParameters, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStageRuntime(
        String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters) {
        return this.beginStageRuntimeAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters)
            .getSyncPoller();
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStageRuntime(
        String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context) {
        return this
            .beginStageRuntimeAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters, context)
            .getSyncPoller();
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> stageRuntimeAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters) {
        return beginStageRuntimeAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> stageRuntimeAsync(String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context) {
        return beginStageRuntimeAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner stageRuntime(String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters) {
        return stageRuntimeAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters).block();
    }

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner stageRuntime(String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context) {
        return stageRuntimeAsync(resourceGroupName, edgeClusterName, edgeClusterStageRuntimeParameters, context)
            .block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterList represents a list of edge cluster objects along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EdgeClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterList represents a list of edge cluster objects along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listBySubscriptionNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterList represents a list of edge cluster objects along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EdgeClusterInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterList represents a list of edge cluster objects along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterInner>> listByResourceGroupNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
