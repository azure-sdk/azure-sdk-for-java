// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * SecretRotationStatus represents the status of a secret rotation.
 */
@Immutable
public final class SecretRotationStatus {
    /*
     * The maximum number of days the secret may be used before it must be changed.
     */
    @JsonProperty(value = "expirePeriodDays", access = JsonProperty.Access.WRITE_ONLY)
    private Long expirePeriodDays;

    /*
     * The date and time when the secret was last changed.
     */
    @JsonProperty(value = "lastRotationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastRotationTime;

    /*
     * The number of days a secret exists before rotations will be attempted.
     */
    @JsonProperty(value = "rotationPeriodDays", access = JsonProperty.Access.WRITE_ONLY)
    private Long rotationPeriodDays;

    /*
     * SecretArchiveReference represents the reference to a secret in a key vault.
     * 
     * The reference to the secret in a key vault.
     */
    @JsonProperty(value = "secretArchiveReference", access = JsonProperty.Access.WRITE_ONLY)
    private SecretArchiveReference secretArchiveReference;

    /*
     * The type name used to identify the purpose of the secret.
     */
    @JsonProperty(value = "secretType", access = JsonProperty.Access.WRITE_ONLY)
    private String secretType;

    /**
     * Creates an instance of SecretRotationStatus class.
     */
    public SecretRotationStatus() {
    }

    /**
     * Get the expirePeriodDays property: The maximum number of days the secret may be used before it must be changed.
     * 
     * @return the expirePeriodDays value.
     */
    public Long expirePeriodDays() {
        return this.expirePeriodDays;
    }

    /**
     * Get the lastRotationTime property: The date and time when the secret was last changed.
     * 
     * @return the lastRotationTime value.
     */
    public OffsetDateTime lastRotationTime() {
        return this.lastRotationTime;
    }

    /**
     * Get the rotationPeriodDays property: The number of days a secret exists before rotations will be attempted.
     * 
     * @return the rotationPeriodDays value.
     */
    public Long rotationPeriodDays() {
        return this.rotationPeriodDays;
    }

    /**
     * Get the secretArchiveReference property: SecretArchiveReference represents the reference to a secret in a key
     * vault.
     * 
     * The reference to the secret in a key vault.
     * 
     * @return the secretArchiveReference value.
     */
    public SecretArchiveReference secretArchiveReference() {
        return this.secretArchiveReference;
    }

    /**
     * Get the secretType property: The type name used to identify the purpose of the secret.
     * 
     * @return the secretType value.
     */
    public String secretType() {
        return this.secretType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secretArchiveReference() != null) {
            secretArchiveReference().validate();
        }
    }
}
