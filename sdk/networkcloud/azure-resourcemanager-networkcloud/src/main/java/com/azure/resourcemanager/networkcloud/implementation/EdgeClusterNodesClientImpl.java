// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.EdgeClusterNodesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodeInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodeList;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterNodePatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in EdgeClusterNodesClient.
 */
public final class EdgeClusterNodesClientImpl implements EdgeClusterNodesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EdgeClusterNodesService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of EdgeClusterNodesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EdgeClusterNodesClientImpl(NetworkCloudImpl client) {
        this.service
            = RestProxy.create(EdgeClusterNodesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudEdgeClusterNodes to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudEdgeClus")
    public interface EdgeClusterNodesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterNodeList>> listByEdgeCluster(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterNodeInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @BodyParam("application/json") EdgeClusterNodeInner edgeClusterNodeParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @BodyParam("application/json") EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/reimage")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> reimage(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/restart")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restart(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/edgeClusters/{edgeClusterName}/nodes/{nodeName}/synchronizeTime")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> synchronizeTime(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("edgeClusterName") String edgeClusterName, @PathParam("nodeName") String nodeName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EdgeClusterNodeList>> listByEdgeClusterNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterNodeInner>> listByEdgeClusterSinglePageAsync(String resourceGroupName,
        String edgeClusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByEdgeCluster(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, accept, context))
            .<PagedResponse<EdgeClusterNodeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterNodeInner>> listByEdgeClusterSinglePageAsync(String resourceGroupName,
        String edgeClusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByEdgeCluster(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, edgeClusterName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EdgeClusterNodeInner> listByEdgeClusterAsync(String resourceGroupName, String edgeClusterName) {
        return new PagedFlux<>(() -> listByEdgeClusterSinglePageAsync(resourceGroupName, edgeClusterName),
            nextLink -> listByEdgeClusterNextSinglePageAsync(nextLink));
    }

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EdgeClusterNodeInner> listByEdgeClusterAsync(String resourceGroupName, String edgeClusterName,
        Context context) {
        return new PagedFlux<>(() -> listByEdgeClusterSinglePageAsync(resourceGroupName, edgeClusterName, context),
            nextLink -> listByEdgeClusterNextSinglePageAsync(nextLink, context));
    }

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EdgeClusterNodeInner> listByEdgeCluster(String resourceGroupName, String edgeClusterName) {
        return new PagedIterable<>(listByEdgeClusterAsync(resourceGroupName, edgeClusterName));
    }

    /**
     * List edge cluster nodes in the edge cluster.
     * 
     * Get a list of edge cluster nodes in the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge cluster nodes in the provided edge cluster as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EdgeClusterNodeInner> listByEdgeCluster(String resourceGroupName, String edgeClusterName,
        Context context) {
        return new PagedIterable<>(listByEdgeClusterAsync(resourceGroupName, edgeClusterName, context));
    }

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EdgeClusterNodeInner>> getWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EdgeClusterNodeInner>> getWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, nodeName, accept, context);
    }

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterNodeInner> getAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        return getWithResponseAsync(resourceGroupName, edgeClusterName, nodeName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EdgeClusterNodeInner> getWithResponse(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        return getWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, context).block();
    }

    /**
     * Retrieve the edge cluster node.
     * 
     * Get properties of the provided the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterNodeInner get(String resourceGroupName, String edgeClusterName, String nodeName) {
        return getWithResponse(resourceGroupName, edgeClusterName, nodeName, Context.NONE).getValue();
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String edgeClusterName, String nodeName, EdgeClusterNodeInner edgeClusterNodeParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        if (edgeClusterNodeParameters == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter edgeClusterNodeParameters is required and cannot be null."));
        } else {
            edgeClusterNodeParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName,
                edgeClusterNodeParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String edgeClusterName, String nodeName, EdgeClusterNodeInner edgeClusterNodeParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        if (edgeClusterNodeParameters == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter edgeClusterNodeParameters is required and cannot be null."));
        } else {
            edgeClusterNodeParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters,
            accept, context);
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters);
        return this.client.<EdgeClusterNodeInner, EdgeClusterNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterNodeInner.class, EdgeClusterNodeInner.class, this.client.getContext());
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, edgeClusterName,
            nodeName, edgeClusterNodeParameters, context);
        return this.client.<EdgeClusterNodeInner, EdgeClusterNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterNodeInner.class, EdgeClusterNodeInner.class, context);
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginCreateOrUpdate(
        String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginCreateOrUpdate(
        String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterNodeInner> createOrUpdateAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, EdgeClusterNodeInner edgeClusterNodeParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterNodeInner> createOrUpdateAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, EdgeClusterNodeInner edgeClusterNodeParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterNodeInner createOrUpdate(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters) {
        return createOrUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters).block();
    }

    /**
     * Create or update the edge cluster node.
     * 
     * Create a new edge cluster node or update properties of the edge cluster node if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterNodeInner createOrUpdate(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodeInner edgeClusterNodeParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeParameters, context)
            .block();
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, nodeName, accept, context);
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, edgeClusterName, nodeName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String edgeClusterName, String nodeName) {
        return this.beginDeleteAsync(resourceGroupName, edgeClusterName, nodeName).getSyncPoller();
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, edgeClusterName, nodeName, context).getSyncPoller();
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        return beginDeleteAsync(resourceGroupName, edgeClusterName, nodeName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        return beginDeleteAsync(resourceGroupName, edgeClusterName, nodeName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName, String nodeName) {
        return deleteAsync(resourceGroupName, edgeClusterName, nodeName).block();
    }

    /**
     * Delete the edge cluster node.
     * 
     * Delete the provided edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        return deleteAsync(resourceGroupName, edgeClusterName, nodeName, context).block();
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        if (edgeClusterNodeUpdateParameters != null) {
            edgeClusterNodeUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName,
                edgeClusterNodeUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        if (edgeClusterNodeUpdateParameters != null) {
            edgeClusterNodeUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters, accept, context);
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginUpdateAsync(
        String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters);
        return this.client.<EdgeClusterNodeInner, EdgeClusterNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterNodeInner.class, EdgeClusterNodeInner.class, this.client.getContext());
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner>
        beginUpdateAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        final EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters);
        return this.client.<EdgeClusterNodeInner, EdgeClusterNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterNodeInner.class, EdgeClusterNodeInner.class, this.client.getContext());
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginUpdateAsync(
        String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, edgeClusterName, nodeName,
            edgeClusterNodeUpdateParameters, context);
        return this.client.<EdgeClusterNodeInner, EdgeClusterNodeInner>getLroResult(mono, this.client.getHttpPipeline(),
            EdgeClusterNodeInner.class, EdgeClusterNodeInner.class, context);
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginUpdate(String resourceGroupName,
        String edgeClusterName, String nodeName) {
        final EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters = null;
        return this.beginUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters)
            .getSyncPoller();
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EdgeClusterNodeInner>, EdgeClusterNodeInner> beginUpdate(String resourceGroupName,
        String edgeClusterName, String nodeName, EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters,
        Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters, context)
            .getSyncPoller();
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterNodeInner> updateAsync(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterNodeInner> updateAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        final EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EdgeClusterNodeInner> updateAsync(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters, Context context) {
        return beginUpdateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterNodeInner update(String resourceGroupName, String edgeClusterName, String nodeName) {
        final EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters = null;
        return updateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters).block();
    }

    /**
     * Patch the edge cluster node.
     * 
     * Patch properties of the provided edge cluster node, or update the tags assigned to the edge cluster node.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param edgeClusterNodeUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNode represents the node of an edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EdgeClusterNodeInner update(String resourceGroupName, String edgeClusterName, String nodeName,
        EdgeClusterNodePatchParameters edgeClusterNodeUpdateParameters, Context context) {
        return updateAsync(resourceGroupName, edgeClusterName, nodeName, edgeClusterNodeUpdateParameters, context)
            .block();
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reimageWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.reimage(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reimageWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.reimage(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, nodeName, accept, context);
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimageAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        Mono<Response<Flux<ByteBuffer>>> mono = reimageWithResponseAsync(resourceGroupName, edgeClusterName, nodeName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimageAsync(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = reimageWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimage(String resourceGroupName, String edgeClusterName, String nodeName) {
        return this.beginReimageAsync(resourceGroupName, edgeClusterName, nodeName).getSyncPoller();
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginReimage(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        return this.beginReimageAsync(resourceGroupName, edgeClusterName, nodeName, context).getSyncPoller();
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> reimageAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        return beginReimageAsync(resourceGroupName, edgeClusterName, nodeName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> reimageAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        return beginReimageAsync(resourceGroupName, edgeClusterName, nodeName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner reimage(String resourceGroupName, String edgeClusterName, String nodeName) {
        return reimageAsync(resourceGroupName, edgeClusterName, nodeName).block();
    }

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner reimage(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        return reimageAsync(resourceGroupName, edgeClusterName, nodeName, context).block();
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.restart(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.restart(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, edgeClusterName, nodeName, accept, context);
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestartAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        Mono<Response<Flux<ByteBuffer>>> mono = restartWithResponseAsync(resourceGroupName, edgeClusterName, nodeName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestartAsync(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = restartWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestart(String resourceGroupName, String edgeClusterName, String nodeName) {
        return this.beginRestartAsync(resourceGroupName, edgeClusterName, nodeName).getSyncPoller();
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginRestart(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        return this.beginRestartAsync(resourceGroupName, edgeClusterName, nodeName, context).getSyncPoller();
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> restartAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        return beginRestartAsync(resourceGroupName, edgeClusterName, nodeName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> restartAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        return beginRestartAsync(resourceGroupName, edgeClusterName, nodeName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner restart(String resourceGroupName, String edgeClusterName, String nodeName) {
        return restartAsync(resourceGroupName, edgeClusterName, nodeName).block();
    }

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner restart(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        return restartAsync(resourceGroupName, edgeClusterName, nodeName, context).block();
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> synchronizeTimeWithResponseAsync(String resourceGroupName,
        String edgeClusterName, String nodeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.synchronizeTime(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> synchronizeTimeWithResponseAsync(String resourceGroupName,
        String edgeClusterName, String nodeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (edgeClusterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter edgeClusterName is required and cannot be null."));
        }
        if (nodeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.synchronizeTime(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, edgeClusterName, nodeName, accept, context);
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginSynchronizeTimeAsync(String resourceGroupName, String edgeClusterName, String nodeName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = synchronizeTimeWithResponseAsync(resourceGroupName, edgeClusterName, nodeName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginSynchronizeTimeAsync(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = synchronizeTimeWithResponseAsync(resourceGroupName, edgeClusterName, nodeName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginSynchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName) {
        return this.beginSynchronizeTimeAsync(resourceGroupName, edgeClusterName, nodeName).getSyncPoller();
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginSynchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName, Context context) {
        return this.beginSynchronizeTimeAsync(resourceGroupName, edgeClusterName, nodeName, context).getSyncPoller();
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> synchronizeTimeAsync(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        return beginSynchronizeTimeAsync(resourceGroupName, edgeClusterName, nodeName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> synchronizeTimeAsync(String resourceGroupName, String edgeClusterName,
        String nodeName, Context context) {
        return beginSynchronizeTimeAsync(resourceGroupName, edgeClusterName, nodeName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner synchronizeTime(String resourceGroupName, String edgeClusterName,
        String nodeName) {
        return synchronizeTimeAsync(resourceGroupName, edgeClusterName, nodeName).block();
    }

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param nodeName The name of the node.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner synchronizeTime(String resourceGroupName, String edgeClusterName, String nodeName,
        Context context) {
        return synchronizeTimeAsync(resourceGroupName, edgeClusterName, nodeName, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNodeList represents the list of edge cluster node objects along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterNodeInner>> listByEdgeClusterNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByEdgeClusterNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EdgeClusterNodeInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeClusterNodeList represents the list of edge cluster node objects along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EdgeClusterNodeInner>> listByEdgeClusterNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByEdgeClusterNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
