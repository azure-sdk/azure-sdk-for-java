// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubImagePatchProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * RegistrationHubImagePatchParameters represents the body of the request to patch the registration hub image
 * properties.
 */
@Fluent
public final class RegistrationHubImagePatchParameters {
    /*
     * RegistrationHubImagePatchProperties represents the properties of the registration hub image during patching.
     * 
     * The list of the resource properties.
     */
    @JsonProperty(value = "properties")
    private RegistrationHubImagePatchProperties innerProperties;

    /*
     * The Azure resource tags that will replace the existing ones.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /**
     * Creates an instance of RegistrationHubImagePatchParameters class.
     */
    public RegistrationHubImagePatchParameters() {
    }

    /**
     * Get the innerProperties property: RegistrationHubImagePatchProperties represents the properties of the
     * registration hub image during patching.
     * 
     * The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private RegistrationHubImagePatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tags property: The Azure resource tags that will replace the existing ones.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The Azure resource tags that will replace the existing ones.
     * 
     * @param tags the tags value to set.
     * @return the RegistrationHubImagePatchParameters object itself.
     */
    public RegistrationHubImagePatchParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the allowRegistration property: The indicator of whether the image can be used to register machines.
     * 
     * @return the allowRegistration value.
     */
    public AllowRegistration allowRegistration() {
        return this.innerProperties() == null ? null : this.innerProperties().allowRegistration();
    }

    /**
     * Set the allowRegistration property: The indicator of whether the image can be used to register machines.
     * 
     * @param allowRegistration the allowRegistration value to set.
     * @return the RegistrationHubImagePatchParameters object itself.
     */
    public RegistrationHubImagePatchParameters withAllowRegistration(AllowRegistration allowRegistration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationHubImagePatchProperties();
        }
        this.innerProperties().withAllowRegistration(allowRegistration);
        return this;
    }

    /**
     * Get the description property: User provided information about the registration hub image.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: User provided information about the registration hub image.
     * 
     * @param description the description value to set.
     * @return the RegistrationHubImagePatchParameters object itself.
     */
    public RegistrationHubImagePatchParameters withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationHubImagePatchProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
