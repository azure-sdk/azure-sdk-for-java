// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterMachineSkuCpu;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterMachineSkuDevice;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterMachineSkuMemory;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterMachineSkuSystem;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * EdgeClusterMachineSkuProperties represents the defining characteristics of an edge cluster machine.
 */
@Fluent
public final class EdgeClusterMachineSkuProperties {
    /*
     * The list of cpus for the machine.
     */
    @JsonProperty(value = "cpus", access = JsonProperty.Access.WRITE_ONLY)
    private List<EdgeClusterMachineSkuCpu> cpus;

    /*
     * The list of devices for the machine.
     */
    @JsonProperty(value = "devices", access = JsonProperty.Access.WRITE_ONLY)
    private List<EdgeClusterMachineSkuDevice> devices;

    /*
     * EdgeClusterMachineSkuMemory represents the memory configuration of an edge cluster machine.
     * 
     * The memory configuration for the machine.
     */
    @JsonProperty(value = "memory")
    private EdgeClusterMachineSkuMemory memory;

    /*
     * EdgeClusterMachineSkuSystem represents the BIOS and top-level system related information of an edge cluster machine.
     * 
     * The bios and top-level system related information.
     */
    @JsonProperty(value = "system")
    private EdgeClusterMachineSkuSystem system;

    /**
     * Creates an instance of EdgeClusterMachineSkuProperties class.
     */
    public EdgeClusterMachineSkuProperties() {
    }

    /**
     * Get the cpus property: The list of cpus for the machine.
     * 
     * @return the cpus value.
     */
    public List<EdgeClusterMachineSkuCpu> cpus() {
        return this.cpus;
    }

    /**
     * Get the devices property: The list of devices for the machine.
     * 
     * @return the devices value.
     */
    public List<EdgeClusterMachineSkuDevice> devices() {
        return this.devices;
    }

    /**
     * Get the memory property: EdgeClusterMachineSkuMemory represents the memory configuration of an edge cluster
     * machine.
     * 
     * The memory configuration for the machine.
     * 
     * @return the memory value.
     */
    public EdgeClusterMachineSkuMemory memory() {
        return this.memory;
    }

    /**
     * Set the memory property: EdgeClusterMachineSkuMemory represents the memory configuration of an edge cluster
     * machine.
     * 
     * The memory configuration for the machine.
     * 
     * @param memory the memory value to set.
     * @return the EdgeClusterMachineSkuProperties object itself.
     */
    public EdgeClusterMachineSkuProperties withMemory(EdgeClusterMachineSkuMemory memory) {
        this.memory = memory;
        return this;
    }

    /**
     * Get the system property: EdgeClusterMachineSkuSystem represents the BIOS and top-level system related information
     * of an edge cluster machine.
     * 
     * The bios and top-level system related information.
     * 
     * @return the system value.
     */
    public EdgeClusterMachineSkuSystem system() {
        return this.system;
    }

    /**
     * Set the system property: EdgeClusterMachineSkuSystem represents the BIOS and top-level system related information
     * of an edge cluster machine.
     * 
     * The bios and top-level system related information.
     * 
     * @param system the system value to set.
     * @return the EdgeClusterMachineSkuProperties object itself.
     */
    public EdgeClusterMachineSkuProperties withSystem(EdgeClusterMachineSkuSystem system) {
        this.system = system;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (cpus() != null) {
            cpus().forEach(e -> e.validate());
        }
        if (devices() != null) {
            devices().forEach(e -> e.validate());
        }
        if (memory() != null) {
            memory().validate();
        }
        if (system() != null) {
            system().validate();
        }
    }
}
