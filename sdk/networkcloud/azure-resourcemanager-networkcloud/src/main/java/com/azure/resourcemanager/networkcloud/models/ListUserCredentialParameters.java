// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ListUserCredentialParameters represents the options for listing the cluster user credentials.
 */
@Fluent
public final class ListUserCredentialParameters {
    /*
     * The indicator of which credential to return based on the access mechanism specified. Utilize Local for access from the same subnet as the edge cluster, and Relay for remote access across a relay.
     */
    @JsonProperty(value = "accessMechanism")
    private ListEdgeClusterUserCredentialAccessMechanism accessMechanism;

    /*
     * The mode of client authentication.
     */
    @JsonProperty(value = "authenticationMethod", required = true)
    private UserCredentialAuthenticationMethod authenticationMethod;

    /*
     * Client proxy indicates if the returned credentials are for the client-side proxy.
     */
    @JsonProperty(value = "clientProxy", required = true)
    private ListEdgeClusterUserCredentialClientProxy clientProxy;

    /**
     * Creates an instance of ListUserCredentialParameters class.
     */
    public ListUserCredentialParameters() {
    }

    /**
     * Get the accessMechanism property: The indicator of which credential to return based on the access mechanism
     * specified. Utilize Local for access from the same subnet as the edge cluster, and Relay for remote access across
     * a relay.
     * 
     * @return the accessMechanism value.
     */
    public ListEdgeClusterUserCredentialAccessMechanism accessMechanism() {
        return this.accessMechanism;
    }

    /**
     * Set the accessMechanism property: The indicator of which credential to return based on the access mechanism
     * specified. Utilize Local for access from the same subnet as the edge cluster, and Relay for remote access across
     * a relay.
     * 
     * @param accessMechanism the accessMechanism value to set.
     * @return the ListUserCredentialParameters object itself.
     */
    public ListUserCredentialParameters
        withAccessMechanism(ListEdgeClusterUserCredentialAccessMechanism accessMechanism) {
        this.accessMechanism = accessMechanism;
        return this;
    }

    /**
     * Get the authenticationMethod property: The mode of client authentication.
     * 
     * @return the authenticationMethod value.
     */
    public UserCredentialAuthenticationMethod authenticationMethod() {
        return this.authenticationMethod;
    }

    /**
     * Set the authenticationMethod property: The mode of client authentication.
     * 
     * @param authenticationMethod the authenticationMethod value to set.
     * @return the ListUserCredentialParameters object itself.
     */
    public ListUserCredentialParameters
        withAuthenticationMethod(UserCredentialAuthenticationMethod authenticationMethod) {
        this.authenticationMethod = authenticationMethod;
        return this;
    }

    /**
     * Get the clientProxy property: Client proxy indicates if the returned credentials are for the client-side proxy.
     * 
     * @return the clientProxy value.
     */
    public ListEdgeClusterUserCredentialClientProxy clientProxy() {
        return this.clientProxy;
    }

    /**
     * Set the clientProxy property: Client proxy indicates if the returned credentials are for the client-side proxy.
     * 
     * @param clientProxy the clientProxy value to set.
     * @return the ListUserCredentialParameters object itself.
     */
    public ListUserCredentialParameters withClientProxy(ListEdgeClusterUserCredentialClientProxy clientProxy) {
        this.clientProxy = clientProxy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authenticationMethod() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authenticationMethod in model ListUserCredentialParameters"));
        }
        if (clientProxy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clientProxy in model ListUserCredentialParameters"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ListUserCredentialParameters.class);
}
