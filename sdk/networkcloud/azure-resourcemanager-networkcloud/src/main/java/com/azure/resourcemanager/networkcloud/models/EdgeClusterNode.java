// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodeInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of EdgeClusterNode.
 */
public interface EdgeClusterNode {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the infrastructureResourceIds property: The resource IDs of the resources that depend on the Edge Cluster.
     * This includes both infrastructure resources added automatically and workload resources that are added through
     * orchestration.
     * 
     * @return the infrastructureResourceIds value.
     */
    List<String> infrastructureResourceIds();

    /**
     * Gets the kubernetesVersion property: The version of Kubernetes running on the node. This will typically match the
     * Edge Cluster’s Kubernetes version, but may differ during upgrade activities.
     * 
     * @return the kubernetesVersion value.
     */
    String kubernetesVersion();

    /**
     * Gets the lifecycleStatus property: The lifecycle status of the edge cluster node resource.
     * 
     * @return the lifecycleStatus value.
     */
    EdgeClusterNodeLifecycleStatus lifecycleStatus();

    /**
     * Gets the machineSkuId property: The resource ID of the SKU of the edge cluster node.
     * 
     * @return the machineSkuId value.
     */
    String machineSkuId();

    /**
     * Gets the networkInterfaces property: The network interfaces of the node.
     * 
     * @return the networkInterfaces value.
     */
    List<EdgeClusterNodeNetworkInterface> networkInterfaces();

    /**
     * Gets the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in the
     * registration hub.
     * 
     * @return the nodeMatchingIdentifiers value.
     */
    List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers();

    /**
     * Gets the provisioningState property: The provisioning state of the edge cluster node.
     * 
     * @return the provisioningState value.
     */
    EdgeClusterNodeProvisioningState provisioningState();

    /**
     * Gets the registrationHubMachineId property: The resource ID of the machine in the registration hub that the node
     * is registered against.
     * 
     * @return the registrationHubMachineId value.
     */
    String registrationHubMachineId();

    /**
     * Gets the runtimeVersionId property: The resource ID of the runtime version of the Nexus software running on the
     * machine of the node. This will typically match the Edge Cluster’s runtime, but may differ during upgrade
     * activities.
     * 
     * @return the runtimeVersionId value.
     */
    String runtimeVersionId();

    /**
     * Gets the schedulingLabels property: The labels used to schedule resources on this node.
     * 
     * @return the schedulingLabels value.
     */
    List<KubernetesLabel> schedulingLabels();

    /**
     * Gets the stagedRuntimeVersionId property: The resource ID of the runtime version of the Nexus software that has
     * been pre-staged to the machine, pending a cluster runtime update. If no runtime has been staged, this field will
     * be omitted. During the process of staging a runtime, this field will be empty. It will only be populated when the
     * staging has completed.
     * 
     * @return the stagedRuntimeVersionId value.
     */
    String stagedRuntimeVersionId();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterNodeInner object.
     * 
     * @return the inner object.
     */
    EdgeClusterNodeInner innerModel();

    /**
     * The entirety of the EdgeClusterNode definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithMachineSkuId, DefinitionStages.WithCreate {
    }

    /**
     * The EdgeClusterNode definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the EdgeClusterNode definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, edgeClusterName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param edgeClusterName The name of the edge cluster.
             * @return the next definition stage.
             */
            WithMachineSkuId withExistingEdgeCluster(String resourceGroupName, String edgeClusterName);
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify machineSkuId.
         */
        interface WithMachineSkuId {
            /**
             * Specifies the machineSkuId property: The resource ID of the SKU of the edge cluster node..
             * 
             * @param machineSkuId The resource ID of the SKU of the edge cluster node.
             * @return the next definition stage.
             */
            WithCreate withMachineSkuId(String machineSkuId);
        }

        /**
         * The stage of the EdgeClusterNode definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithNodeMatchingIdentifiers,
            DefinitionStages.WithRegistrationHubMachineId, DefinitionStages.WithSchedulingLabels {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            EdgeClusterNode create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            EdgeClusterNode create(Context context);
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify nodeMatchingIdentifiers.
         */
        interface WithNodeMatchingIdentifiers {
            /**
             * Specifies the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in
             * the registration hub..
             * 
             * @param nodeMatchingIdentifiers The identifiers used to match the node to a machine in the registration
             * hub.
             * @return the next definition stage.
             */
            WithCreate withNodeMatchingIdentifiers(List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers);
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify registrationHubMachineId.
         */
        interface WithRegistrationHubMachineId {
            /**
             * Specifies the registrationHubMachineId property: The resource ID of the machine in the registration hub
             * that the node is registered against..
             * 
             * @param registrationHubMachineId The resource ID of the machine in the registration hub that the node is
             * registered against.
             * @return the next definition stage.
             */
            WithCreate withRegistrationHubMachineId(String registrationHubMachineId);
        }

        /**
         * The stage of the EdgeClusterNode definition allowing to specify schedulingLabels.
         */
        interface WithSchedulingLabels {
            /**
             * Specifies the schedulingLabels property: The labels used to schedule resources on this node..
             * 
             * @param schedulingLabels The labels used to schedule resources on this node.
             * @return the next definition stage.
             */
            WithCreate withSchedulingLabels(List<KubernetesLabel> schedulingLabels);
        }
    }

    /**
     * Begins update for the EdgeClusterNode resource.
     * 
     * @return the stage of resource update.
     */
    EdgeClusterNode.Update update();

    /**
     * The template for EdgeClusterNode update.
     */
    interface Update
        extends UpdateStages.WithTags, UpdateStages.WithMachineSkuId, UpdateStages.WithNodeMatchingIdentifiers,
        UpdateStages.WithRegistrationHubMachineId, UpdateStages.WithSchedulingLabels {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        EdgeClusterNode apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        EdgeClusterNode apply(Context context);
    }

    /**
     * The EdgeClusterNode update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the EdgeClusterNode update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: The Azure resource tags that will replace the existing ones..
             * 
             * @param tags The Azure resource tags that will replace the existing ones.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the EdgeClusterNode update allowing to specify machineSkuId.
         */
        interface WithMachineSkuId {
            /**
             * Specifies the machineSkuId property: The resource ID of the SKU of the edge cluster node..
             * 
             * @param machineSkuId The resource ID of the SKU of the edge cluster node.
             * @return the next definition stage.
             */
            Update withMachineSkuId(String machineSkuId);
        }

        /**
         * The stage of the EdgeClusterNode update allowing to specify nodeMatchingIdentifiers.
         */
        interface WithNodeMatchingIdentifiers {
            /**
             * Specifies the nodeMatchingIdentifiers property: The identifiers used to match the node to a machine in
             * the registration hub..
             * 
             * @param nodeMatchingIdentifiers The identifiers used to match the node to a machine in the registration
             * hub.
             * @return the next definition stage.
             */
            Update withNodeMatchingIdentifiers(List<EdgeClusterNodeMatchingIdentifier> nodeMatchingIdentifiers);
        }

        /**
         * The stage of the EdgeClusterNode update allowing to specify registrationHubMachineId.
         */
        interface WithRegistrationHubMachineId {
            /**
             * Specifies the registrationHubMachineId property: The resource ID of the machine in the registration hub
             * that the node is registered against..
             * 
             * @param registrationHubMachineId The resource ID of the machine in the registration hub that the node is
             * registered against.
             * @return the next definition stage.
             */
            Update withRegistrationHubMachineId(String registrationHubMachineId);
        }

        /**
         * The stage of the EdgeClusterNode update allowing to specify schedulingLabels.
         */
        interface WithSchedulingLabels {
            /**
             * Specifies the schedulingLabels property: The labels used to schedule resources on this node..
             * 
             * @param schedulingLabels The labels used to schedule resources on this node.
             * @return the next definition stage.
             */
            Update withSchedulingLabels(List<KubernetesLabel> schedulingLabels);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    EdgeClusterNode refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    EdgeClusterNode refresh(Context context);

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult reimage();

    /**
     * Reimage the edge cluster node.
     * 
     * Reimages the edge cluster node, returning it to a refreshed OS image.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult reimage(Context context);

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult restart();

    /**
     * Restart the edge cluster node.
     * 
     * Restarts the edge cluster node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult restart(Context context);

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult synchronizeTime();

    /**
     * Synchronize time for the edge cluster node.
     * 
     * Synchronizes the time for the edge cluster node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    OperationStatusResult synchronizeTime(Context context);
}
