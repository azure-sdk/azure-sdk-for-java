// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.networkcloud.models.AllowRegistration;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubImageProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * RegistrationHubImage represents the image used to bootstrap a machine in Edge Cluster.
 */
@Fluent
public final class RegistrationHubImageInner extends Resource {
    /*
     * RegistrationHubImageProperties represents the properties of a registration hub image.
     * 
     * The list of the resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private RegistrationHubImageProperties innerProperties = new RegistrationHubImageProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of RegistrationHubImageInner class.
     */
    public RegistrationHubImageInner() {
    }

    /**
     * Get the innerProperties property: RegistrationHubImageProperties represents the properties of a registration hub
     * image.
     * 
     * The list of the resource properties.
     * 
     * @return the innerProperties value.
     */
    private RegistrationHubImageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegistrationHubImageInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegistrationHubImageInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the allowRegistration property: The indicator of whether the image can be used to register machines.
     * 
     * @return the allowRegistration value.
     */
    public AllowRegistration allowRegistration() {
        return this.innerProperties() == null ? null : this.innerProperties().allowRegistration();
    }

    /**
     * Set the allowRegistration property: The indicator of whether the image can be used to register machines.
     * 
     * @param allowRegistration the allowRegistration value to set.
     * @return the RegistrationHubImageInner object itself.
     */
    public RegistrationHubImageInner withAllowRegistration(AllowRegistration allowRegistration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationHubImageProperties();
        }
        this.innerProperties().withAllowRegistration(allowRegistration);
        return this;
    }

    /**
     * Get the clientConfiguration property: The base64 encoded client configuration that contains the system provided
     * information for the bootstrap process.
     * 
     * @return the clientConfiguration value.
     */
    public String clientConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().clientConfiguration();
    }

    /**
     * Get the customConfiguration property: The base64 encoded configuration that can be modified with custom settings
     * for the bootstrap process.
     * 
     * @return the customConfiguration value.
     */
    public String customConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().customConfiguration();
    }

    /**
     * Get the description property: The user provided information about the registration hub image.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: The user provided information about the registration hub image.
     * 
     * @param description the description value to set.
     * @return the RegistrationHubImageInner object itself.
     */
    public RegistrationHubImageInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationHubImageProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the imageDownloadUri property: The URI where the bootstrap image can be downloaded from.
     * 
     * @return the imageDownloadUri value.
     */
    public String imageDownloadUri() {
        return this.innerProperties() == null ? null : this.innerProperties().imageDownloadUri();
    }

    /**
     * Get the imageUniqueId property: The unique identifier that represents this image.
     * 
     * @return the imageUniqueId value.
     */
    public String imageUniqueId() {
        return this.innerProperties() == null ? null : this.innerProperties().imageUniqueId();
    }

    /**
     * Set the imageUniqueId property: The unique identifier that represents this image.
     * 
     * @param imageUniqueId the imageUniqueId value to set.
     * @return the RegistrationHubImageInner object itself.
     */
    public RegistrationHubImageInner withImageUniqueId(String imageUniqueId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegistrationHubImageProperties();
        }
        this.innerProperties().withImageUniqueId(imageUniqueId);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the registration hub image resource.
     * 
     * @return the provisioningState value.
     */
    public RegistrationHubImageProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model RegistrationHubImageInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RegistrationHubImageInner.class);
}
