// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.RegistrationHubMachinesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubMachineInner;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachineList;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubMachinePatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RegistrationHubMachinesClient.
 */
public final class RegistrationHubMachinesClientImpl implements RegistrationHubMachinesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RegistrationHubMachinesService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of RegistrationHubMachinesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RegistrationHubMachinesClientImpl(NetworkCloudImpl client) {
        this.service = RestProxy.create(RegistrationHubMachinesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudRegistrationHubMachines to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudRegistra")
    public interface RegistrationHubMachinesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubMachineList>> listByRegistrationHub(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubMachineInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("machineName") String machineName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("machineName") String machineName,
            @BodyParam("application/json") RegistrationHubMachineInner registrationHubMachineParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("machineName") String machineName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("machineName") String machineName,
            @BodyParam("application/json") RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/machines/{machineName}/decline")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> decline(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("machineName") String machineName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubMachineList>> listByRegistrationHubNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List machines in the registration hub.
     * 
     * Get a list of machines in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of machines in the provided registration hub along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubMachineInner>>
        listByRegistrationHubSinglePageAsync(String resourceGroupName, String registrationHubName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByRegistrationHub(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context))
            .<PagedResponse<RegistrationHubMachineInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List machines in the registration hub.
     * 
     * Get a list of machines in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of machines in the provided registration hub along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubMachineInner>>
        listByRegistrationHubSinglePageAsync(String resourceGroupName, String registrationHubName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByRegistrationHub(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List machines in the registration hub.
     * 
     * Get a list of machines in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of machines in the provided registration hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubMachineInner> listByRegistrationHubAsync(String resourceGroupName,
        String registrationHubName) {
        return new PagedFlux<>(() -> listByRegistrationHubSinglePageAsync(resourceGroupName, registrationHubName),
            nextLink -> listByRegistrationHubNextSinglePageAsync(nextLink));
    }

    /**
     * List machines in the registration hub.
     * 
     * Get a list of machines in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of machines in the provided registration hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubMachineInner> listByRegistrationHubAsync(String resourceGroupName,
        String registrationHubName, Context context) {
        return new PagedFlux<>(
            () -> listByRegistrationHubSinglePageAsync(resourceGroupName, registrationHubName, context),
            nextLink -> listByRegistrationHubNextSinglePageAsync(nextLink, context));
    }

    /**
     * List machines in the registration hub.
     * 
     * Get a list of machines in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of machines in the provided registration hub as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubMachineInner> listByRegistrationHub(String resourceGroupName,
        String registrationHubName) {
        return new PagedIterable<>(listByRegistrationHubAsync(resourceGroupName, registrationHubName));
    }

    /**
     * List machines in the registration hub.
     * 
     * Get a list of machines in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of machines in the provided registration hub as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubMachineInner> listByRegistrationHub(String resourceGroupName,
        String registrationHubName, Context context) {
        return new PagedIterable<>(listByRegistrationHubAsync(resourceGroupName, registrationHubName, context));
    }

    /**
     * Retrieve the registration hub machine.
     * 
     * Get properties of the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub machine along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationHubMachineInner>> getWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, machineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the registration hub machine.
     * 
     * Get properties of the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub machine along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationHubMachineInner>> getWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, machineName, accept, context);
    }

    /**
     * Retrieve the registration hub machine.
     * 
     * Get properties of the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub machine on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubMachineInner> getAsync(String resourceGroupName, String registrationHubName,
        String machineName) {
        return getWithResponseAsync(resourceGroupName, registrationHubName, machineName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the registration hub machine.
     * 
     * Get properties of the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub machine along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistrationHubMachineInner> getWithResponse(String resourceGroupName, String registrationHubName,
        String machineName, Context context) {
        return getWithResponseAsync(resourceGroupName, registrationHubName, machineName, context).block();
    }

    /**
     * Retrieve the registration hub machine.
     * 
     * Get properties of the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubMachineInner get(String resourceGroupName, String registrationHubName, String machineName) {
        return getWithResponse(resourceGroupName, registrationHubName, machineName, Context.NONE).getValue();
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName, RegistrationHubMachineInner registrationHubMachineParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        if (registrationHubMachineParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter registrationHubMachineParameters is required and cannot be null."));
        } else {
            registrationHubMachineParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, machineName,
                registrationHubMachineParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName, RegistrationHubMachineInner registrationHubMachineParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        if (registrationHubMachineParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter registrationHubMachineParameters is required and cannot be null."));
        } else {
            registrationHubMachineParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, registrationHubName, machineName,
            registrationHubMachineParameters, accept, context);
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachineInner registrationHubMachineParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, registrationHubName,
            machineName, registrationHubMachineParameters);
        return this.client.<RegistrationHubMachineInner, RegistrationHubMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubMachineInner.class, RegistrationHubMachineInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachineInner registrationHubMachineParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, registrationHubName,
            machineName, registrationHubMachineParameters, context);
        return this.client.<RegistrationHubMachineInner, RegistrationHubMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubMachineInner.class, RegistrationHubMachineInner.class,
            context);
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginCreateOrUpdate(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachineInner registrationHubMachineParameters) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, machineName,
                registrationHubMachineParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginCreateOrUpdate(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachineInner registrationHubMachineParameters, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, machineName,
                registrationHubMachineParameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubMachineInner> createOrUpdateAsync(String resourceGroupName, String registrationHubName,
        String machineName, RegistrationHubMachineInner registrationHubMachineParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubMachineInner> createOrUpdateAsync(String resourceGroupName, String registrationHubName,
        String machineName, RegistrationHubMachineInner registrationHubMachineParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubMachineInner createOrUpdate(String resourceGroupName, String registrationHubName,
        String machineName, RegistrationHubMachineInner registrationHubMachineParameters) {
        return createOrUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineParameters).block();
    }

    /**
     * Create or update the registration hub machines.
     * 
     * Create a new registration hub machine or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubMachineInner createOrUpdate(String resourceGroupName, String registrationHubName,
        String machineName, RegistrationHubMachineInner registrationHubMachineParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineParameters, context).block();
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, machineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, machineName, accept, context);
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String registrationHubName, String machineName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, registrationHubName, machineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String registrationHubName, String machineName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, registrationHubName, machineName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String registrationHubName, String machineName) {
        return this.beginDeleteAsync(resourceGroupName, registrationHubName, machineName).getSyncPoller();
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String registrationHubName, String machineName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, registrationHubName, machineName, context).getSyncPoller();
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String registrationHubName,
        String machineName) {
        return beginDeleteAsync(resourceGroupName, registrationHubName, machineName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String registrationHubName,
        String machineName, Context context) {
        return beginDeleteAsync(resourceGroupName, registrationHubName, machineName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String registrationHubName, String machineName) {
        return deleteAsync(resourceGroupName, registrationHubName, machineName).block();
    }

    /**
     * Delete the registration hub machine.
     * 
     * Delete the provided registration hub machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String registrationHubName, String machineName,
        Context context) {
        return deleteAsync(resourceGroupName, registrationHubName, machineName, context).block();
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName,
        RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        if (registrationHubMachineUpdateParameters != null) {
            registrationHubMachineUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, machineName,
                registrationHubMachineUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName,
        RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        if (registrationHubMachineUpdateParameters != null) {
            registrationHubMachineUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, machineName, registrationHubMachineUpdateParameters, accept,
            context);
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginUpdateAsync(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, registrationHubName,
            machineName, registrationHubMachineUpdateParameters);
        return this.client.<RegistrationHubMachineInner, RegistrationHubMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubMachineInner.class, RegistrationHubMachineInner.class,
            this.client.getContext());
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner>
        beginUpdateAsync(String resourceGroupName, String registrationHubName, String machineName) {
        final RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, registrationHubName,
            machineName, registrationHubMachineUpdateParameters);
        return this.client.<RegistrationHubMachineInner, RegistrationHubMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubMachineInner.class, RegistrationHubMachineInner.class,
            this.client.getContext());
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginUpdateAsync(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, registrationHubName,
            machineName, registrationHubMachineUpdateParameters, context);
        return this.client.<RegistrationHubMachineInner, RegistrationHubMachineInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubMachineInner.class, RegistrationHubMachineInner.class,
            context);
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner>
        beginUpdate(String resourceGroupName, String registrationHubName, String machineName) {
        final RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters = null;
        return this
            .beginUpdateAsync(resourceGroupName, registrationHubName, machineName,
                registrationHubMachineUpdateParameters)
            .getSyncPoller();
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubMachine represents the registration of a machine to
     * a registration hub.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubMachineInner>, RegistrationHubMachineInner> beginUpdate(
        String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, registrationHubName, machineName,
                registrationHubMachineUpdateParameters, context)
            .getSyncPoller();
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubMachineInner> updateAsync(String resourceGroupName, String registrationHubName,
        String machineName, RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubMachineInner> updateAsync(String resourceGroupName, String registrationHubName,
        String machineName) {
        final RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineUpdateParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubMachineInner> updateAsync(String resourceGroupName, String registrationHubName,
        String machineName, RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, registrationHubName, machineName,
            registrationHubMachineUpdateParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubMachineInner update(String resourceGroupName, String registrationHubName,
        String machineName) {
        final RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters = null;
        return updateAsync(resourceGroupName, registrationHubName, machineName, registrationHubMachineUpdateParameters)
            .block();
    }

    /**
     * Patch the registration hub machine.
     * 
     * Patch properties of the provided registration hub machine, or update the tags associated with the registration
     * hub machine. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param registrationHubMachineUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachine represents the registration of a machine to a registration hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubMachineInner update(String resourceGroupName, String registrationHubName, String machineName,
        RegistrationHubMachinePatchParameters registrationHubMachineUpdateParameters, Context context) {
        return updateAsync(resourceGroupName, registrationHubName, machineName, registrationHubMachineUpdateParameters,
            context).block();
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> declineWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.decline(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, machineName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> declineWithResponseAsync(String resourceGroupName,
        String registrationHubName, String machineName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (machineName == null) {
            return Mono.error(new IllegalArgumentException("Parameter machineName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.decline(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, machineName, accept, context);
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeclineAsync(String resourceGroupName, String registrationHubName, String machineName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = declineWithResponseAsync(resourceGroupName, registrationHubName, machineName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeclineAsync(String resourceGroupName, String registrationHubName, String machineName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = declineWithResponseAsync(resourceGroupName, registrationHubName, machineName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDecline(String resourceGroupName, String registrationHubName, String machineName) {
        return this.beginDeclineAsync(resourceGroupName, registrationHubName, machineName).getSyncPoller();
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDecline(String resourceGroupName, String registrationHubName, String machineName, Context context) {
        return this.beginDeclineAsync(resourceGroupName, registrationHubName, machineName, context).getSyncPoller();
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> declineAsync(String resourceGroupName, String registrationHubName,
        String machineName) {
        return beginDeclineAsync(resourceGroupName, registrationHubName, machineName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> declineAsync(String resourceGroupName, String registrationHubName,
        String machineName, Context context) {
        return beginDeclineAsync(resourceGroupName, registrationHubName, machineName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner decline(String resourceGroupName, String registrationHubName,
        String machineName) {
        return declineAsync(resourceGroupName, registrationHubName, machineName).block();
    }

    /**
     * Decline the machine
     * 
     * Declines a machine that is pending approval during registration. This effectively “dead ends” this machine and is
     * an explicit refusal to let the machine proceed with further provisioning.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param machineName The name of the registration hub machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner decline(String resourceGroupName, String registrationHubName, String machineName,
        Context context) {
        return declineAsync(resourceGroupName, registrationHubName, machineName, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachineList represents a list of registration hub machines along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubMachineInner>> listByRegistrationHubNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByRegistrationHubNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RegistrationHubMachineInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubMachineList represents a list of registration hub machines along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubMachineInner>> listByRegistrationHubNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByRegistrationHubNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
