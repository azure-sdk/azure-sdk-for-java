// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.models.CredentialResultsInner;
import com.azure.resourcemanager.networkcloud.fluent.models.EdgeClusterInner;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterPatchParameters;
import com.azure.resourcemanager.networkcloud.models.EdgeClusterStageRuntimeParameters;
import com.azure.resourcemanager.networkcloud.models.ListUserCredentialParameters;

/**
 * An instance of this class provides access to all the operations defined in EdgeClustersClient.
 */
public interface EdgeClustersClient {
    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeClusterInner> list();

    /**
     * List edge clusters in the subscription.
     * 
     * Get a list of edge clusters in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeClusterInner> list(Context context);

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeClusterInner> listByResourceGroup(String resourceGroupName);

    /**
     * List edge clusters in the resource group.
     * 
     * Get a list of edge clusters in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of edge clusters in the provided resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeClusterInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EdgeClusterInner> getByResourceGroupWithResponse(String resourceGroupName, String edgeClusterName,
        Context context);

    /**
     * Retrieve the edge cluster.
     * 
     * Get properties of the provided the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided the edge cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterInner getByResourceGroup(String resourceGroupName, String edgeClusterName);

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginCreateOrUpdate(String resourceGroupName,
        String edgeClusterName, EdgeClusterInner edgeClusterParameters);

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginCreateOrUpdate(String resourceGroupName,
        String edgeClusterName, EdgeClusterInner edgeClusterParameters, Context context);

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterInner createOrUpdate(String resourceGroupName, String edgeClusterName,
        EdgeClusterInner edgeClusterParameters);

    /**
     * Create or update the edge cluster.
     * 
     * Create a new edge cluster or update properties of the edge cluster if it exists.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterInner createOrUpdate(String resourceGroupName, String edgeClusterName,
        EdgeClusterInner edgeClusterParameters, Context context);

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(String resourceGroupName,
        String edgeClusterName);

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(String resourceGroupName,
        String edgeClusterName, Context context);

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName);

    /**
     * Delete the edge cluster.
     * 
     * Delete the provided edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner delete(String resourceGroupName, String edgeClusterName, Context context);

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdate(String resourceGroupName,
        String edgeClusterName);

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edgeCluster represents a cluster that encompasses one or more nodes
     * used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeClusterInner>, EdgeClusterInner> beginUpdate(String resourceGroupName,
        String edgeClusterName, EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context);

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterInner update(String resourceGroupName, String edgeClusterName);

    /**
     * Patch the edge cluster.
     * 
     * Patch properties of the provided edge cluster, or update the tags assigned to the edge cluster. Properties and
     * tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edgeCluster represents a cluster that encompasses one or more nodes used to host network functions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeClusterInner update(String resourceGroupName, String edgeClusterName,
        EdgeClusterPatchParameters edgeClusterUpdateParameters, Context context);

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param listUserCredentialParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CredentialResultsInner> listClusterUserCredentialWithResponse(String resourceGroupName,
        String edgeClusterName, ListUserCredentialParameters listUserCredentialParameters, Context context);

    /**
     * Retrieve the kubernetes configuration credentials for the edge cluster.
     * 
     * Generates and returns the kubernetes configuration credentials for the edge cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return credentialResults represents the results of the cluster user credential request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CredentialResultsInner listClusterUserCredential(String resourceGroupName, String edgeClusterName);

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStageRuntime(
        String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters);

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginStageRuntime(
        String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context);

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner stageRuntime(String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters);

    /**
     * Stages a runtime version for an edge cluster.
     * 
     * Prepares and stages the images to the edge cluster nodes for the specified runtime version.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param edgeClusterName The name of the edge cluster.
     * @param edgeClusterStageRuntimeParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner stageRuntime(String resourceGroupName, String edgeClusterName,
        EdgeClusterStageRuntimeParameters edgeClusterStageRuntimeParameters, Context context);
}
