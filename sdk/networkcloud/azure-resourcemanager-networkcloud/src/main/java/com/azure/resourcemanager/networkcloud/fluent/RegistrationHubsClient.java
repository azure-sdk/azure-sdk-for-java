// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubInner;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubPatchParameters;

/**
 * An instance of this class provides access to all the operations defined in RegistrationHubsClient.
 */
public interface RegistrationHubsClient {
    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RegistrationHubInner> list();

    /**
     * List registration hubs in the subscription.
     * 
     * Get a list of registration hubs in the provided subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RegistrationHubInner> list(Context context);

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RegistrationHubInner> listByResourceGroup(String resourceGroupName);

    /**
     * List registration hubs in the resource group.
     * 
     * Get a list of registration hubs in the provided resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of registration hubs in the provided resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<RegistrationHubInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<RegistrationHubInner> getByResourceGroupWithResponse(String resourceGroupName, String registrationHubName,
        Context context);

    /**
     * Retrieve the registration hub.
     * 
     * Get properties of the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegistrationHubInner getByResourceGroup(String resourceGroupName, String registrationHubName);

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginCreateOrUpdate(String resourceGroupName,
        String registrationHubName, RegistrationHubInner registrationHubParameters);

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginCreateOrUpdate(String resourceGroupName,
        String registrationHubName, RegistrationHubInner registrationHubParameters, Context context);

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegistrationHubInner createOrUpdate(String resourceGroupName, String registrationHubName,
        RegistrationHubInner registrationHubParameters);

    /**
     * Create or update the registration hubs.
     * 
     * Create a new registration hub or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegistrationHubInner createOrUpdate(String resourceGroupName, String registrationHubName,
        RegistrationHubInner registrationHubParameters, Context context);

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(String resourceGroupName,
        String registrationHubName);

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner> beginDelete(String resourceGroupName,
        String registrationHubName, Context context);

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner delete(String resourceGroupName, String registrationHubName);

    /**
     * Delete the registration hub.
     * 
     * Delete the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OperationStatusResultInner delete(String resourceGroupName, String registrationHubName, Context context);

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginUpdate(String resourceGroupName,
        String registrationHubName);

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHub represents the resource responsible for onboarding
     * and bootstrapping of machines that are used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RegistrationHubInner>, RegistrationHubInner> beginUpdate(String resourceGroupName,
        String registrationHubName, RegistrationHubPatchParameters registrationHubUpdateParameters, Context context);

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegistrationHubInner update(String resourceGroupName, String registrationHubName);

    /**
     * Patch the registration hub.
     * 
     * Patch properties of the provided registration hub, or update the tags associated with the registration hub.
     * Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param registrationHubUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHub represents the resource responsible for onboarding and bootstrapping of machines that are
     * used in Edge Clusters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegistrationHubInner update(String resourceGroupName, String registrationHubName,
        RegistrationHubPatchParameters registrationHubUpdateParameters, Context context);
}
