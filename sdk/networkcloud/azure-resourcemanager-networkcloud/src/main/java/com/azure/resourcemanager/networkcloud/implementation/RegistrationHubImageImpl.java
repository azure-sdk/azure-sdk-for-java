// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubImageInner;
import com.azure.resourcemanager.networkcloud.models.AllowRegistration;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubImage;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubImagePatchParameters;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubImageProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class RegistrationHubImageImpl
    implements RegistrationHubImage, RegistrationHubImage.Definition, RegistrationHubImage.Update {
    private RegistrationHubImageInner innerObject;

    private final com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public AllowRegistration allowRegistration() {
        return this.innerModel().allowRegistration();
    }

    public String clientConfiguration() {
        return this.innerModel().clientConfiguration();
    }

    public String customConfiguration() {
        return this.innerModel().customConfiguration();
    }

    public String description() {
        return this.innerModel().description();
    }

    public String imageDownloadUri() {
        return this.innerModel().imageDownloadUri();
    }

    public String imageUniqueId() {
        return this.innerModel().imageUniqueId();
    }

    public RegistrationHubImageProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public RegistrationHubImageInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.networkcloud.NetworkCloudManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String registrationHubName;

    private String imageName;

    private RegistrationHubImagePatchParameters updateRegistrationHubImageUpdateParameters;

    public RegistrationHubImageImpl withExistingRegistrationHub(String resourceGroupName, String registrationHubName) {
        this.resourceGroupName = resourceGroupName;
        this.registrationHubName = registrationHubName;
        return this;
    }

    public RegistrationHubImage create() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistrationHubImages()
            .createOrUpdate(resourceGroupName, registrationHubName, imageName, this.innerModel(), Context.NONE);
        return this;
    }

    public RegistrationHubImage create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistrationHubImages()
            .createOrUpdate(resourceGroupName, registrationHubName, imageName, this.innerModel(), context);
        return this;
    }

    RegistrationHubImageImpl(String name, com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = new RegistrationHubImageInner();
        this.serviceManager = serviceManager;
        this.imageName = name;
    }

    public RegistrationHubImageImpl update() {
        this.updateRegistrationHubImageUpdateParameters = new RegistrationHubImagePatchParameters();
        return this;
    }

    public RegistrationHubImage apply() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistrationHubImages()
            .update(resourceGroupName, registrationHubName, imageName, updateRegistrationHubImageUpdateParameters,
                Context.NONE);
        return this;
    }

    public RegistrationHubImage apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistrationHubImages()
            .update(resourceGroupName, registrationHubName, imageName, updateRegistrationHubImageUpdateParameters,
                context);
        return this;
    }

    RegistrationHubImageImpl(RegistrationHubImageInner innerObject,
        com.azure.resourcemanager.networkcloud.NetworkCloudManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.registrationHubName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "registrationHubs");
        this.imageName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "images");
    }

    public RegistrationHubImage refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getRegistrationHubImages()
            .getWithResponse(resourceGroupName, registrationHubName, imageName, Context.NONE)
            .getValue();
        return this;
    }

    public RegistrationHubImage refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getRegistrationHubImages()
            .getWithResponse(resourceGroupName, registrationHubName, imageName, context)
            .getValue();
        return this;
    }

    public RegistrationHubImageImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public RegistrationHubImageImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public RegistrationHubImageImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateRegistrationHubImageUpdateParameters.withTags(tags);
            return this;
        }
    }

    public RegistrationHubImageImpl withAllowRegistration(AllowRegistration allowRegistration) {
        if (isInCreateMode()) {
            this.innerModel().withAllowRegistration(allowRegistration);
            return this;
        } else {
            this.updateRegistrationHubImageUpdateParameters.withAllowRegistration(allowRegistration);
            return this;
        }
    }

    public RegistrationHubImageImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateRegistrationHubImageUpdateParameters.withDescription(description);
            return this;
        }
    }

    public RegistrationHubImageImpl withImageUniqueId(String imageUniqueId) {
        this.innerModel().withImageUniqueId(imageUniqueId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
