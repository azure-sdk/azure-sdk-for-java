// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.networkcloud.fluent.RegistrationHubImagesClient;
import com.azure.resourcemanager.networkcloud.fluent.models.OperationStatusResultInner;
import com.azure.resourcemanager.networkcloud.fluent.models.RegistrationHubImageInner;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubImageList;
import com.azure.resourcemanager.networkcloud.models.RegistrationHubImagePatchParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in RegistrationHubImagesClient.
 */
public final class RegistrationHubImagesClientImpl implements RegistrationHubImagesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final RegistrationHubImagesService service;

    /**
     * The service client containing this operation class.
     */
    private final NetworkCloudImpl client;

    /**
     * Initializes an instance of RegistrationHubImagesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    RegistrationHubImagesClientImpl(NetworkCloudImpl client) {
        this.service = RestProxy.create(RegistrationHubImagesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkCloudRegistrationHubImages to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "NetworkCloudRegistra")
    public interface RegistrationHubImagesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubImageList>> listByRegistrationHub(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubImageInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("imageName") String imageName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("imageName") String imageName,
            @BodyParam("application/json") RegistrationHubImageInner registrationHubImageParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}")
        @ExpectedResponses({ 200, 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("imageName") String imageName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/registrationHubs/{registrationHubName}/images/{imageName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("registrationHubName") String registrationHubName, @PathParam("imageName") String imageName,
            @BodyParam("application/json") RegistrationHubImagePatchParameters registrationHubImageUpdateParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RegistrationHubImageList>> listByRegistrationHubNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List images in the registration hub.
     * 
     * Get a list of images in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of images in the provided registration hub along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubImageInner>>
        listByRegistrationHubSinglePageAsync(String resourceGroupName, String registrationHubName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByRegistrationHub(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context))
            .<PagedResponse<RegistrationHubImageInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List images in the registration hub.
     * 
     * Get a list of images in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of images in the provided registration hub along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubImageInner>>
        listByRegistrationHubSinglePageAsync(String resourceGroupName, String registrationHubName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByRegistrationHub(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List images in the registration hub.
     * 
     * Get a list of images in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of images in the provided registration hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubImageInner> listByRegistrationHubAsync(String resourceGroupName,
        String registrationHubName) {
        return new PagedFlux<>(() -> listByRegistrationHubSinglePageAsync(resourceGroupName, registrationHubName),
            nextLink -> listByRegistrationHubNextSinglePageAsync(nextLink));
    }

    /**
     * List images in the registration hub.
     * 
     * Get a list of images in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of images in the provided registration hub as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<RegistrationHubImageInner> listByRegistrationHubAsync(String resourceGroupName,
        String registrationHubName, Context context) {
        return new PagedFlux<>(
            () -> listByRegistrationHubSinglePageAsync(resourceGroupName, registrationHubName, context),
            nextLink -> listByRegistrationHubNextSinglePageAsync(nextLink, context));
    }

    /**
     * List images in the registration hub.
     * 
     * Get a list of images in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of images in the provided registration hub as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubImageInner> listByRegistrationHub(String resourceGroupName,
        String registrationHubName) {
        return new PagedIterable<>(listByRegistrationHubAsync(resourceGroupName, registrationHubName));
    }

    /**
     * List images in the registration hub.
     * 
     * Get a list of images in the provided registration hub.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of images in the provided registration hub as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RegistrationHubImageInner> listByRegistrationHub(String resourceGroupName,
        String registrationHubName, Context context) {
        return new PagedIterable<>(listByRegistrationHubAsync(resourceGroupName, registrationHubName, context));
    }

    /**
     * Retrieve the registration hub image.
     * 
     * Get properties of the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub image along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationHubImageInner>> getWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, imageName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the registration hub image.
     * 
     * Get properties of the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub image along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RegistrationHubImageInner>> getWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, imageName, accept, context);
    }

    /**
     * Retrieve the registration hub image.
     * 
     * Get properties of the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub image on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubImageInner> getAsync(String resourceGroupName, String registrationHubName,
        String imageName) {
        return getWithResponseAsync(resourceGroupName, registrationHubName, imageName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Retrieve the registration hub image.
     * 
     * Get properties of the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub image along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RegistrationHubImageInner> getWithResponse(String resourceGroupName, String registrationHubName,
        String imageName, Context context) {
        return getWithResponseAsync(resourceGroupName, registrationHubName, imageName, context).block();
    }

    /**
     * Retrieve the registration hub image.
     * 
     * Get properties of the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of the provided registration hub image.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubImageInner get(String resourceGroupName, String registrationHubName, String imageName) {
        return getWithResponse(resourceGroupName, registrationHubName, imageName, Context.NONE).getValue();
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName, RegistrationHubImageInner registrationHubImageParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        if (registrationHubImageParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter registrationHubImageParameters is required and cannot be null."));
        } else {
            registrationHubImageParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, imageName,
                registrationHubImageParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName, RegistrationHubImageInner registrationHubImageParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        if (registrationHubImageParameters == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter registrationHubImageParameters is required and cannot be null."));
        } else {
            registrationHubImageParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, registrationHubName, imageName,
            registrationHubImageParameters, accept, context);
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImageInner registrationHubImageParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, registrationHubName,
            imageName, registrationHubImageParameters);
        return this.client.<RegistrationHubImageInner, RegistrationHubImageInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubImageInner.class, RegistrationHubImageInner.class,
            this.client.getContext());
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImageInner registrationHubImageParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, registrationHubName,
            imageName, registrationHubImageParameters, context);
        return this.client.<RegistrationHubImageInner, RegistrationHubImageInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubImageInner.class, RegistrationHubImageInner.class, context);
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginCreateOrUpdate(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImageInner registrationHubImageParameters) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageParameters)
            .getSyncPoller();
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginCreateOrUpdate(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImageInner registrationHubImageParameters, Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageParameters,
                context)
            .getSyncPoller();
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubImageInner> createOrUpdateAsync(String resourceGroupName, String registrationHubName,
        String imageName, RegistrationHubImageInner registrationHubImageParameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, imageName,
            registrationHubImageParameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubImageInner> createOrUpdateAsync(String resourceGroupName, String registrationHubName,
        String imageName, RegistrationHubImageInner registrationHubImageParameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, registrationHubName, imageName,
            registrationHubImageParameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubImageInner createOrUpdate(String resourceGroupName, String registrationHubName,
        String imageName, RegistrationHubImageInner registrationHubImageParameters) {
        return createOrUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageParameters)
            .block();
    }

    /**
     * Create or update the registration hub images.
     * 
     * Create a new registration hub image or update properties of the existing one.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubImageInner createOrUpdate(String resourceGroupName, String registrationHubName,
        String imageName, RegistrationHubImageInner registrationHubImageParameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageParameters,
            context).block();
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, imageName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, imageName, accept, context);
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String registrationHubName, String imageName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, registrationHubName, imageName);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class,
            this.client.getContext());
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDeleteAsync(String resourceGroupName, String registrationHubName, String imageName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, registrationHubName, imageName, context);
        return this.client.<OperationStatusResultInner, OperationStatusResultInner>getLroResult(mono,
            this.client.getHttpPipeline(), OperationStatusResultInner.class, OperationStatusResultInner.class, context);
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String registrationHubName, String imageName) {
        return this.beginDeleteAsync(resourceGroupName, registrationHubName, imageName).getSyncPoller();
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<OperationStatusResultInner>, OperationStatusResultInner>
        beginDelete(String resourceGroupName, String registrationHubName, String imageName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, registrationHubName, imageName, context).getSyncPoller();
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String registrationHubName,
        String imageName) {
        return beginDeleteAsync(resourceGroupName, registrationHubName, imageName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationStatusResultInner> deleteAsync(String resourceGroupName, String registrationHubName,
        String imageName, Context context) {
        return beginDeleteAsync(resourceGroupName, registrationHubName, imageName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String registrationHubName, String imageName) {
        return deleteAsync(resourceGroupName, registrationHubName, imageName).block();
    }

    /**
     * Delete the registration hub image.
     * 
     * Delete the provided registration hub image.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the current status of an async operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationStatusResultInner delete(String resourceGroupName, String registrationHubName, String imageName,
        Context context) {
        return deleteAsync(resourceGroupName, registrationHubName, imageName, context).block();
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName,
        RegistrationHubImagePatchParameters registrationHubImageUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        if (registrationHubImageUpdateParameters != null) {
            registrationHubImageUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, registrationHubName, imageName,
                registrationHubImageUpdateParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String registrationHubName, String imageName,
        RegistrationHubImagePatchParameters registrationHubImageUpdateParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (registrationHubName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter registrationHubName is required and cannot be null."));
        }
        if (imageName == null) {
            return Mono.error(new IllegalArgumentException("Parameter imageName is required and cannot be null."));
        }
        if (registrationHubImageUpdateParameters != null) {
            registrationHubImageUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters, accept, context);
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginUpdateAsync(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImagePatchParameters registrationHubImageUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, registrationHubName,
            imageName, registrationHubImageUpdateParameters);
        return this.client.<RegistrationHubImageInner, RegistrationHubImageInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubImageInner.class, RegistrationHubImageInner.class,
            this.client.getContext());
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner>
        beginUpdateAsync(String resourceGroupName, String registrationHubName, String imageName) {
        final RegistrationHubImagePatchParameters registrationHubImageUpdateParameters = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, registrationHubName,
            imageName, registrationHubImageUpdateParameters);
        return this.client.<RegistrationHubImageInner, RegistrationHubImageInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubImageInner.class, RegistrationHubImageInner.class,
            this.client.getContext());
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginUpdateAsync(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImagePatchParameters registrationHubImageUpdateParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, registrationHubName,
            imageName, registrationHubImageUpdateParameters, context);
        return this.client.<RegistrationHubImageInner, RegistrationHubImageInner>getLroResult(mono,
            this.client.getHttpPipeline(), RegistrationHubImageInner.class, RegistrationHubImageInner.class, context);
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner>
        beginUpdate(String resourceGroupName, String registrationHubName, String imageName) {
        final RegistrationHubImagePatchParameters registrationHubImageUpdateParameters = null;
        return this
            .beginUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters)
            .getSyncPoller();
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of registrationHubImage represents the image used to bootstrap a
     * machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<RegistrationHubImageInner>, RegistrationHubImageInner> beginUpdate(
        String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImagePatchParameters registrationHubImageUpdateParameters, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters,
                context)
            .getSyncPoller();
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubImageInner> updateAsync(String resourceGroupName, String registrationHubName,
        String imageName, RegistrationHubImagePatchParameters registrationHubImageUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubImageInner> updateAsync(String resourceGroupName, String registrationHubName,
        String imageName) {
        final RegistrationHubImagePatchParameters registrationHubImageUpdateParameters = null;
        return beginUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RegistrationHubImageInner> updateAsync(String resourceGroupName, String registrationHubName,
        String imageName, RegistrationHubImagePatchParameters registrationHubImageUpdateParameters, Context context) {
        return beginUpdateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubImageInner update(String resourceGroupName, String registrationHubName, String imageName) {
        final RegistrationHubImagePatchParameters registrationHubImageUpdateParameters = null;
        return updateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters)
            .block();
    }

    /**
     * Patch the registration hub image.
     * 
     * Patch properties of the provided registration hub image, or update the tags associated with the registration hub
     * image. Properties and tag updates can be done independently.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registrationHubName The name of the registration hub.
     * @param imageName The name of the registration hub image.
     * @param registrationHubImageUpdateParameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImage represents the image used to bootstrap a machine in Edge Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RegistrationHubImageInner update(String resourceGroupName, String registrationHubName, String imageName,
        RegistrationHubImagePatchParameters registrationHubImageUpdateParameters, Context context) {
        return updateAsync(resourceGroupName, registrationHubName, imageName, registrationHubImageUpdateParameters,
            context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImageList represents a list of registration hub images along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubImageInner>> listByRegistrationHubNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByRegistrationHubNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<RegistrationHubImageInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return registrationHubImageList represents a list of registration hub images along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<RegistrationHubImageInner>> listByRegistrationHubNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByRegistrationHubNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
