// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkcloud.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureAvailabilityLifecycle;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureDetailedStatus;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureProvisioningState;
import com.azure.resourcemanager.networkcloud.models.KubernetesClusterFeatureRequired;
import com.azure.resourcemanager.networkcloud.models.StringKeyValuePair;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * KubernetesClusterFeatureProperties represents the properties of a Kubernetes cluster feature.
 */
@Fluent
public final class KubernetesClusterFeatureProperties {
    /*
     * The lifecycle indicator of the feature.
     */
    @JsonProperty(value = "availabilityLifecycle", access = JsonProperty.Access.WRITE_ONLY)
    private KubernetesClusterFeatureAvailabilityLifecycle availabilityLifecycle;

    /*
     * The detailed status of the feature.
     */
    @JsonProperty(value = "detailedStatus", access = JsonProperty.Access.WRITE_ONLY)
    private KubernetesClusterFeatureDetailedStatus detailedStatus;

    /*
     * The descriptive message for the detailed status of the feature.
     */
    @JsonProperty(value = "detailedStatusMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String detailedStatusMessage;

    /*
     * The configured options for the feature.
     */
    @JsonProperty(value = "options")
    private List<StringKeyValuePair> options;

    /*
     * The provisioning state of the Kubernetes cluster feature.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private KubernetesClusterFeatureProvisioningState provisioningState;

    /*
     * The indicator of if the feature is required or optional. Optional features may be deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
     */
    @JsonProperty(value = "required", access = JsonProperty.Access.WRITE_ONLY)
    private KubernetesClusterFeatureRequired required;

    /*
     * The version of the feature.
     */
    @JsonProperty(value = "version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /**
     * Creates an instance of KubernetesClusterFeatureProperties class.
     */
    public KubernetesClusterFeatureProperties() {
    }

    /**
     * Get the availabilityLifecycle property: The lifecycle indicator of the feature.
     * 
     * @return the availabilityLifecycle value.
     */
    public KubernetesClusterFeatureAvailabilityLifecycle availabilityLifecycle() {
        return this.availabilityLifecycle;
    }

    /**
     * Get the detailedStatus property: The detailed status of the feature.
     * 
     * @return the detailedStatus value.
     */
    public KubernetesClusterFeatureDetailedStatus detailedStatus() {
        return this.detailedStatus;
    }

    /**
     * Get the detailedStatusMessage property: The descriptive message for the detailed status of the feature.
     * 
     * @return the detailedStatusMessage value.
     */
    public String detailedStatusMessage() {
        return this.detailedStatusMessage;
    }

    /**
     * Get the options property: The configured options for the feature.
     * 
     * @return the options value.
     */
    public List<StringKeyValuePair> options() {
        return this.options;
    }

    /**
     * Set the options property: The configured options for the feature.
     * 
     * @param options the options value to set.
     * @return the KubernetesClusterFeatureProperties object itself.
     */
    public KubernetesClusterFeatureProperties withOptions(List<StringKeyValuePair> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the Kubernetes cluster feature.
     * 
     * @return the provisioningState value.
     */
    public KubernetesClusterFeatureProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the required property: The indicator of if the feature is required or optional. Optional features may be
     * deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
     * 
     * @return the required value.
     */
    public KubernetesClusterFeatureRequired required() {
        return this.required;
    }

    /**
     * Get the version property: The version of the feature.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (options() != null) {
            options().forEach(e -> e.validate());
        }
    }
}
