// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.nginx.fluent.models.NginxCertificateInner;
import com.azure.resourcemanager.nginx.models.NginxCertificate;
import com.azure.resourcemanager.nginx.models.NginxCertificateErrorResponseBody;
import com.azure.resourcemanager.nginx.models.ProvisioningState;
import java.time.OffsetDateTime;

public final class NginxCertificateImpl
    implements NginxCertificate, NginxCertificate.Definition, NginxCertificate.Update {
    private NginxCertificateInner innerObject;

    private final com.azure.resourcemanager.nginx.NginxManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String keyVirtualPath() {
        return this.innerModel().keyVirtualPath();
    }

    public String certificateVirtualPath() {
        return this.innerModel().certificateVirtualPath();
    }

    public String keyVaultSecretId() {
        return this.innerModel().keyVaultSecretId();
    }

    public String sha1Thumbprint() {
        return this.innerModel().sha1Thumbprint();
    }

    public String keyVaultSecretVersion() {
        return this.innerModel().keyVaultSecretVersion();
    }

    public OffsetDateTime keyVaultSecretCreated() {
        return this.innerModel().keyVaultSecretCreated();
    }

    public NginxCertificateErrorResponseBody certificateError() {
        return this.innerModel().certificateError();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NginxCertificateInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.nginx.NginxManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String deploymentName;

    private String certificateName;

    public NginxCertificateImpl withExistingNginxDeployment(String resourceGroupName, String deploymentName) {
        this.resourceGroupName = resourceGroupName;
        this.deploymentName = deploymentName;
        return this;
    }

    public NginxCertificate create() {
        this.innerObject = serviceManager.serviceClient()
            .getCertificates()
            .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), Context.NONE);
        return this;
    }

    public NginxCertificate create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCertificates()
            .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), context);
        return this;
    }

    NginxCertificateImpl(String name, com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerObject = new NginxCertificateInner();
        this.serviceManager = serviceManager;
        this.certificateName = name;
    }

    public NginxCertificateImpl update() {
        return this;
    }

    public NginxCertificate apply() {
        this.innerObject = serviceManager.serviceClient()
            .getCertificates()
            .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), Context.NONE);
        return this;
    }

    public NginxCertificate apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCertificates()
            .createOrUpdate(resourceGroupName, deploymentName, certificateName, this.innerModel(), context);
        return this;
    }

    NginxCertificateImpl(NginxCertificateInner innerObject,
        com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.deploymentName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "nginxDeployments");
        this.certificateName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "certificates");
    }

    public NginxCertificate refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getCertificates()
            .getWithResponse(resourceGroupName, deploymentName, certificateName, Context.NONE)
            .getValue();
        return this;
    }

    public NginxCertificate refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getCertificates()
            .getWithResponse(resourceGroupName, deploymentName, certificateName, context)
            .getValue();
        return this;
    }

    public NginxCertificateImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NginxCertificateImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NginxCertificateImpl withKeyVirtualPath(String keyVirtualPath) {
        this.innerModel().withKeyVirtualPath(keyVirtualPath);
        return this;
    }

    public NginxCertificateImpl withCertificateVirtualPath(String certificateVirtualPath) {
        this.innerModel().withCertificateVirtualPath(certificateVirtualPath);
        return this;
    }

    public NginxCertificateImpl withKeyVaultSecretId(String keyVaultSecretId) {
        this.innerModel().withKeyVaultSecretId(keyVaultSecretId);
        return this;
    }

    public NginxCertificateImpl withCertificateError(NginxCertificateErrorResponseBody certificateError) {
        this.innerModel().withCertificateError(certificateError);
        return this;
    }
}
