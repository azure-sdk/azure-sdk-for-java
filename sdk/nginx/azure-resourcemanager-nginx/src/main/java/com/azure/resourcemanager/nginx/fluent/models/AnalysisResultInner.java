// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.nginx.models.AnalysisDiagnostic;
import com.azure.resourcemanager.nginx.models.DiagnosticItem;
import java.io.IOException;
import java.util.List;

/**
 * The response body for an analysis request. Contains the status of the analysis and any errors.
 */
@Fluent
public final class AnalysisResultInner implements JsonSerializable<AnalysisResultInner> {
    /*
     * The status of the analysis.
     */
    private String status;

    /*
     * The data property.
     */
    private AnalysisResultData innerData;

    /**
     * Creates an instance of AnalysisResultInner class.
     */
    public AnalysisResultInner() {
    }

    /**
     * Get the status property: The status of the analysis.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the analysis.
     * 
     * @param status the status value to set.
     * @return the AnalysisResultInner object itself.
     */
    public AnalysisResultInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the innerData property: The data property.
     * 
     * @return the innerData value.
     */
    private AnalysisResultData innerData() {
        return this.innerData;
    }

    /**
     * Get the errors property: The errors property.
     * 
     * @return the errors value.
     */
    public List<AnalysisDiagnostic> errors() {
        return this.innerData() == null ? null : this.innerData().errors();
    }

    /**
     * Set the errors property: The errors property.
     * 
     * @param errors the errors value to set.
     * @return the AnalysisResultInner object itself.
     */
    public AnalysisResultInner withErrors(List<AnalysisDiagnostic> errors) {
        if (this.innerData() == null) {
            this.innerData = new AnalysisResultData();
        }
        this.innerData().withErrors(errors);
        return this;
    }

    /**
     * Get the diagnostics property: The diagnostics property.
     * 
     * @return the diagnostics value.
     */
    public List<DiagnosticItem> diagnostics() {
        return this.innerData() == null ? null : this.innerData().diagnostics();
    }

    /**
     * Set the diagnostics property: The diagnostics property.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the AnalysisResultInner object itself.
     */
    public AnalysisResultInner withDiagnostics(List<DiagnosticItem> diagnostics) {
        if (this.innerData() == null) {
            this.innerData = new AnalysisResultData();
        }
        this.innerData().withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model AnalysisResultInner"));
        }
        if (innerData() != null) {
            innerData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AnalysisResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeJsonField("data", this.innerData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalysisResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalysisResultInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalysisResultInner.
     */
    public static AnalysisResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalysisResultInner deserializedAnalysisResultInner = new AnalysisResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedAnalysisResultInner.status = reader.getString();
                } else if ("data".equals(fieldName)) {
                    deserializedAnalysisResultInner.innerData = AnalysisResultData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalysisResultInner;
        });
    }
}
