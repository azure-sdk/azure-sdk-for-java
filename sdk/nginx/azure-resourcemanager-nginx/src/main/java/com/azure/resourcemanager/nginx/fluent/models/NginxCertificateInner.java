// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.nginx.models.NginxCertificateErrorResponseBody;
import com.azure.resourcemanager.nginx.models.ProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Concrete proxy resource types can be created by aliasing this type using a specific property type.
 */
@Fluent
public final class NginxCertificateInner extends ProxyResource {
    /*
     * The properties property.
     */
    private NginxCertificateProperties innerProperties;

    /*
     * The location property.
     */
    private String location;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of NginxCertificateInner class.
     */
    public NginxCertificateInner() {
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private NginxCertificateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the location property: The location property.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location property.
     * 
     * @param location the location value to set.
     * @return the NginxCertificateInner object itself.
     */
    public NginxCertificateInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the keyVirtualPath property: The keyVirtualPath property.
     * 
     * @return the keyVirtualPath value.
     */
    public String keyVirtualPath() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVirtualPath();
    }

    /**
     * Set the keyVirtualPath property: The keyVirtualPath property.
     * 
     * @param keyVirtualPath the keyVirtualPath value to set.
     * @return the NginxCertificateInner object itself.
     */
    public NginxCertificateInner withKeyVirtualPath(String keyVirtualPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxCertificateProperties();
        }
        this.innerProperties().withKeyVirtualPath(keyVirtualPath);
        return this;
    }

    /**
     * Get the certificateVirtualPath property: The certificateVirtualPath property.
     * 
     * @return the certificateVirtualPath value.
     */
    public String certificateVirtualPath() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateVirtualPath();
    }

    /**
     * Set the certificateVirtualPath property: The certificateVirtualPath property.
     * 
     * @param certificateVirtualPath the certificateVirtualPath value to set.
     * @return the NginxCertificateInner object itself.
     */
    public NginxCertificateInner withCertificateVirtualPath(String certificateVirtualPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxCertificateProperties();
        }
        this.innerProperties().withCertificateVirtualPath(certificateVirtualPath);
        return this;
    }

    /**
     * Get the keyVaultSecretId property: The keyVaultSecretId property.
     * 
     * @return the keyVaultSecretId value.
     */
    public String keyVaultSecretId() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultSecretId();
    }

    /**
     * Set the keyVaultSecretId property: The keyVaultSecretId property.
     * 
     * @param keyVaultSecretId the keyVaultSecretId value to set.
     * @return the NginxCertificateInner object itself.
     */
    public NginxCertificateInner withKeyVaultSecretId(String keyVaultSecretId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxCertificateProperties();
        }
        this.innerProperties().withKeyVaultSecretId(keyVaultSecretId);
        return this;
    }

    /**
     * Get the sha1Thumbprint property: The sha1Thumbprint property.
     * 
     * @return the sha1Thumbprint value.
     */
    public String sha1Thumbprint() {
        return this.innerProperties() == null ? null : this.innerProperties().sha1Thumbprint();
    }

    /**
     * Get the keyVaultSecretVersion property: The keyVaultSecretVersion property.
     * 
     * @return the keyVaultSecretVersion value.
     */
    public String keyVaultSecretVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultSecretVersion();
    }

    /**
     * Get the keyVaultSecretCreated property: The keyVaultSecretCreated property.
     * 
     * @return the keyVaultSecretCreated value.
     */
    public OffsetDateTime keyVaultSecretCreated() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultSecretCreated();
    }

    /**
     * Get the certificateError property: The certificateError property.
     * 
     * @return the certificateError value.
     */
    public NginxCertificateErrorResponseBody certificateError() {
        return this.innerProperties() == null ? null : this.innerProperties().certificateError();
    }

    /**
     * Set the certificateError property: The certificateError property.
     * 
     * @param certificateError the certificateError value to set.
     * @return the NginxCertificateInner object itself.
     */
    public NginxCertificateInner withCertificateError(NginxCertificateErrorResponseBody certificateError) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxCertificateProperties();
        }
        this.innerProperties().withCertificateError(certificateError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxCertificateInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxCertificateInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NginxCertificateInner.
     */
    public static NginxCertificateInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxCertificateInner deserializedNginxCertificateInner = new NginxCertificateInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNginxCertificateInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNginxCertificateInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNginxCertificateInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedNginxCertificateInner.innerProperties = NginxCertificateProperties.fromJson(reader);
                } else if ("location".equals(fieldName)) {
                    deserializedNginxCertificateInner.location = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedNginxCertificateInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxCertificateInner;
        });
    }
}
