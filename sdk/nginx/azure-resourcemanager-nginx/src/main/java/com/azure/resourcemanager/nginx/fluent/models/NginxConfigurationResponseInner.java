// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.nginx.models.NginxConfigurationFile;
import com.azure.resourcemanager.nginx.models.NginxConfigurationPackage;
import com.azure.resourcemanager.nginx.models.NginxConfigurationProtectedFileResponse;
import com.azure.resourcemanager.nginx.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Concrete proxy resource types can be created by aliasing this type using a specific property type.
 */
@Fluent
public final class NginxConfigurationResponseInner extends ProxyResource {
    /*
     * The properties property.
     */
    private NginxConfigurationResponseProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of NginxConfigurationResponseInner class.
     */
    public NginxConfigurationResponseInner() {
    }

    /**
     * Get the innerProperties property: The properties property.
     * 
     * @return the innerProperties value.
     */
    private NginxConfigurationResponseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the files property: The files property.
     * 
     * @return the files value.
     */
    public List<NginxConfigurationFile> files() {
        return this.innerProperties() == null ? null : this.innerProperties().files();
    }

    /**
     * Set the files property: The files property.
     * 
     * @param files the files value to set.
     * @return the NginxConfigurationResponseInner object itself.
     */
    public NginxConfigurationResponseInner withFiles(List<NginxConfigurationFile> files) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxConfigurationResponseProperties();
        }
        this.innerProperties().withFiles(files);
        return this;
    }

    /**
     * Get the protectedFiles property: The protectedFiles property.
     * 
     * @return the protectedFiles value.
     */
    public List<NginxConfigurationProtectedFileResponse> protectedFiles() {
        return this.innerProperties() == null ? null : this.innerProperties().protectedFiles();
    }

    /**
     * Set the protectedFiles property: The protectedFiles property.
     * 
     * @param protectedFiles the protectedFiles value to set.
     * @return the NginxConfigurationResponseInner object itself.
     */
    public NginxConfigurationResponseInner
        withProtectedFiles(List<NginxConfigurationProtectedFileResponse> protectedFiles) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxConfigurationResponseProperties();
        }
        this.innerProperties().withProtectedFiles(protectedFiles);
        return this;
    }

    /**
     * Get the packageProperty property: The package property.
     * 
     * @return the packageProperty value.
     */
    public NginxConfigurationPackage packageProperty() {
        return this.innerProperties() == null ? null : this.innerProperties().packageProperty();
    }

    /**
     * Set the packageProperty property: The package property.
     * 
     * @param packageProperty the packageProperty value to set.
     * @return the NginxConfigurationResponseInner object itself.
     */
    public NginxConfigurationResponseInner withPackageProperty(NginxConfigurationPackage packageProperty) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxConfigurationResponseProperties();
        }
        this.innerProperties().withPackageProperty(packageProperty);
        return this;
    }

    /**
     * Get the rootFile property: The rootFile property.
     * 
     * @return the rootFile value.
     */
    public String rootFile() {
        return this.innerProperties() == null ? null : this.innerProperties().rootFile();
    }

    /**
     * Set the rootFile property: The rootFile property.
     * 
     * @param rootFile the rootFile value to set.
     * @return the NginxConfigurationResponseInner object itself.
     */
    public NginxConfigurationResponseInner withRootFile(String rootFile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NginxConfigurationResponseProperties();
        }
        this.innerProperties().withRootFile(rootFile);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NginxConfigurationResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NginxConfigurationResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NginxConfigurationResponseInner.
     */
    public static NginxConfigurationResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NginxConfigurationResponseInner deserializedNginxConfigurationResponseInner
                = new NginxConfigurationResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNginxConfigurationResponseInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNginxConfigurationResponseInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNginxConfigurationResponseInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedNginxConfigurationResponseInner.innerProperties
                        = NginxConfigurationResponseProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedNginxConfigurationResponseInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNginxConfigurationResponseInner;
        });
    }
}
