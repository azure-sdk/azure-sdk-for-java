// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.nginx.fluent.models.NginxCertificateInner;
import java.time.OffsetDateTime;

/**
 * An immutable client-side representation of NginxCertificate.
 */
public interface NginxCertificate {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The location property.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the keyVirtualPath property: The keyVirtualPath property.
     * 
     * @return the keyVirtualPath value.
     */
    String keyVirtualPath();

    /**
     * Gets the certificateVirtualPath property: The certificateVirtualPath property.
     * 
     * @return the certificateVirtualPath value.
     */
    String certificateVirtualPath();

    /**
     * Gets the keyVaultSecretId property: The keyVaultSecretId property.
     * 
     * @return the keyVaultSecretId value.
     */
    String keyVaultSecretId();

    /**
     * Gets the sha1Thumbprint property: The sha1Thumbprint property.
     * 
     * @return the sha1Thumbprint value.
     */
    String sha1Thumbprint();

    /**
     * Gets the keyVaultSecretVersion property: The keyVaultSecretVersion property.
     * 
     * @return the keyVaultSecretVersion value.
     */
    String keyVaultSecretVersion();

    /**
     * Gets the keyVaultSecretCreated property: The keyVaultSecretCreated property.
     * 
     * @return the keyVaultSecretCreated value.
     */
    OffsetDateTime keyVaultSecretCreated();

    /**
     * Gets the certificateError property: The certificateError property.
     * 
     * @return the certificateError value.
     */
    NginxCertificateErrorResponseBody certificateError();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.nginx.fluent.models.NginxCertificateInner object.
     * 
     * @return the inner object.
     */
    NginxCertificateInner innerModel();

    /**
     * The entirety of the NginxCertificate definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The NginxCertificate definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the NginxCertificate definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the NginxCertificate definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, deploymentName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param deploymentName The name of targeted NGINX deployment.
             * @return the next definition stage.
             */
            WithCreate withExistingNginxDeployment(String resourceGroupName, String deploymentName);
        }

        /**
         * The stage of the NginxCertificate definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithLocation, DefinitionStages.WithKeyVirtualPath,
            DefinitionStages.WithCertificateVirtualPath, DefinitionStages.WithKeyVaultSecretId,
            DefinitionStages.WithCertificateError {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            NginxCertificate create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NginxCertificate create(Context context);
        }

        /**
         * The stage of the NginxCertificate definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The location property.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The location property.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }

        /**
         * The stage of the NginxCertificate definition allowing to specify keyVirtualPath.
         */
        interface WithKeyVirtualPath {
            /**
             * Specifies the keyVirtualPath property: The keyVirtualPath property..
             * 
             * @param keyVirtualPath The keyVirtualPath property.
             * @return the next definition stage.
             */
            WithCreate withKeyVirtualPath(String keyVirtualPath);
        }

        /**
         * The stage of the NginxCertificate definition allowing to specify certificateVirtualPath.
         */
        interface WithCertificateVirtualPath {
            /**
             * Specifies the certificateVirtualPath property: The certificateVirtualPath property..
             * 
             * @param certificateVirtualPath The certificateVirtualPath property.
             * @return the next definition stage.
             */
            WithCreate withCertificateVirtualPath(String certificateVirtualPath);
        }

        /**
         * The stage of the NginxCertificate definition allowing to specify keyVaultSecretId.
         */
        interface WithKeyVaultSecretId {
            /**
             * Specifies the keyVaultSecretId property: The keyVaultSecretId property..
             * 
             * @param keyVaultSecretId The keyVaultSecretId property.
             * @return the next definition stage.
             */
            WithCreate withKeyVaultSecretId(String keyVaultSecretId);
        }

        /**
         * The stage of the NginxCertificate definition allowing to specify certificateError.
         */
        interface WithCertificateError {
            /**
             * Specifies the certificateError property: The certificateError property..
             * 
             * @param certificateError The certificateError property.
             * @return the next definition stage.
             */
            WithCreate withCertificateError(NginxCertificateErrorResponseBody certificateError);
        }
    }

    /**
     * Begins update for the NginxCertificate resource.
     * 
     * @return the stage of resource update.
     */
    NginxCertificate.Update update();

    /**
     * The template for NginxCertificate update.
     */
    interface Update extends UpdateStages.WithKeyVirtualPath, UpdateStages.WithCertificateVirtualPath,
        UpdateStages.WithKeyVaultSecretId, UpdateStages.WithCertificateError {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        NginxCertificate apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NginxCertificate apply(Context context);
    }

    /**
     * The NginxCertificate update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the NginxCertificate update allowing to specify keyVirtualPath.
         */
        interface WithKeyVirtualPath {
            /**
             * Specifies the keyVirtualPath property: The keyVirtualPath property..
             * 
             * @param keyVirtualPath The keyVirtualPath property.
             * @return the next definition stage.
             */
            Update withKeyVirtualPath(String keyVirtualPath);
        }

        /**
         * The stage of the NginxCertificate update allowing to specify certificateVirtualPath.
         */
        interface WithCertificateVirtualPath {
            /**
             * Specifies the certificateVirtualPath property: The certificateVirtualPath property..
             * 
             * @param certificateVirtualPath The certificateVirtualPath property.
             * @return the next definition stage.
             */
            Update withCertificateVirtualPath(String certificateVirtualPath);
        }

        /**
         * The stage of the NginxCertificate update allowing to specify keyVaultSecretId.
         */
        interface WithKeyVaultSecretId {
            /**
             * Specifies the keyVaultSecretId property: The keyVaultSecretId property..
             * 
             * @param keyVaultSecretId The keyVaultSecretId property.
             * @return the next definition stage.
             */
            Update withKeyVaultSecretId(String keyVaultSecretId);
        }

        /**
         * The stage of the NginxCertificate update allowing to specify certificateError.
         */
        interface WithCertificateError {
            /**
             * Specifies the certificateError property: The certificateError property..
             * 
             * @param certificateError The certificateError property.
             * @return the next definition stage.
             */
            Update withCertificateError(NginxCertificateErrorResponseBody certificateError);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    NginxCertificate refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NginxCertificate refresh(Context context);
}
