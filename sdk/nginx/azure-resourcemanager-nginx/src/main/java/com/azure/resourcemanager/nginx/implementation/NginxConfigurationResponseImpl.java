// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.nginx.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.nginx.fluent.models.NginxConfigurationResponseInner;
import com.azure.resourcemanager.nginx.models.AnalysisCreate;
import com.azure.resourcemanager.nginx.models.AnalysisResult;
import com.azure.resourcemanager.nginx.models.NginxConfigurationFile;
import com.azure.resourcemanager.nginx.models.NginxConfigurationPackage;
import com.azure.resourcemanager.nginx.models.NginxConfigurationProtectedFileResponse;
import com.azure.resourcemanager.nginx.models.NginxConfigurationResponse;
import com.azure.resourcemanager.nginx.models.ProvisioningState;
import java.util.Collections;
import java.util.List;

public final class NginxConfigurationResponseImpl
    implements NginxConfigurationResponse, NginxConfigurationResponse.Definition, NginxConfigurationResponse.Update {
    private NginxConfigurationResponseInner innerObject;

    private final com.azure.resourcemanager.nginx.NginxManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<NginxConfigurationFile> files() {
        List<NginxConfigurationFile> inner = this.innerModel().files();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<NginxConfigurationProtectedFileResponse> protectedFiles() {
        List<NginxConfigurationProtectedFileResponse> inner = this.innerModel().protectedFiles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public NginxConfigurationPackage packageProperty() {
        return this.innerModel().packageProperty();
    }

    public String rootFile() {
        return this.innerModel().rootFile();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NginxConfigurationResponseInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.nginx.NginxManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String deploymentName;

    private String configurationName;

    public NginxConfigurationResponseImpl withExistingNginxDeployment(String resourceGroupName, String deploymentName) {
        this.resourceGroupName = resourceGroupName;
        this.deploymentName = deploymentName;
        return this;
    }

    public NginxConfigurationResponse create() {
        this.innerObject = serviceManager.serviceClient()
            .getConfigurations()
            .createOrUpdate(resourceGroupName, deploymentName, configurationName, this.innerModel(), Context.NONE);
        return this;
    }

    public NginxConfigurationResponse create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConfigurations()
            .createOrUpdate(resourceGroupName, deploymentName, configurationName, this.innerModel(), context);
        return this;
    }

    NginxConfigurationResponseImpl(String name, com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerObject = new NginxConfigurationResponseInner();
        this.serviceManager = serviceManager;
        this.configurationName = name;
    }

    public NginxConfigurationResponseImpl update() {
        return this;
    }

    public NginxConfigurationResponse apply() {
        this.innerObject = serviceManager.serviceClient()
            .getConfigurations()
            .createOrUpdate(resourceGroupName, deploymentName, configurationName, this.innerModel(), Context.NONE);
        return this;
    }

    public NginxConfigurationResponse apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConfigurations()
            .createOrUpdate(resourceGroupName, deploymentName, configurationName, this.innerModel(), context);
        return this;
    }

    NginxConfigurationResponseImpl(NginxConfigurationResponseInner innerObject,
        com.azure.resourcemanager.nginx.NginxManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.deploymentName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "nginxDeployments");
        this.configurationName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "configurations");
    }

    public NginxConfigurationResponse refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getConfigurations()
            .getWithResponse(resourceGroupName, deploymentName, configurationName, Context.NONE)
            .getValue();
        return this;
    }

    public NginxConfigurationResponse refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getConfigurations()
            .getWithResponse(resourceGroupName, deploymentName, configurationName, context)
            .getValue();
        return this;
    }

    public Response<AnalysisResult> analysisWithResponse(AnalysisCreate body, Context context) {
        return serviceManager.configurations()
            .analysisWithResponse(resourceGroupName, deploymentName, configurationName, body, context);
    }

    public AnalysisResult analysis() {
        return serviceManager.configurations().analysis(resourceGroupName, deploymentName, configurationName);
    }

    public NginxConfigurationResponseImpl withFiles(List<NginxConfigurationFile> files) {
        this.innerModel().withFiles(files);
        return this;
    }

    public NginxConfigurationResponseImpl
        withProtectedFiles(List<NginxConfigurationProtectedFileResponse> protectedFiles) {
        this.innerModel().withProtectedFiles(protectedFiles);
        return this;
    }

    public NginxConfigurationResponseImpl withPackageProperty(NginxConfigurationPackage packageProperty) {
        this.innerModel().withPackageProperty(packageProperty);
        return this;
    }

    public NginxConfigurationResponseImpl withRootFile(String rootFile) {
        this.innerModel().withRootFile(rootFile);
        return this;
    }
}
