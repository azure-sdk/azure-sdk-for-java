// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dashboard.fluent.models.ManagedDashboardInner;
import com.azure.resourcemanager.dashboard.models.ManagedDashboardUpdateParameters;

/**
 * An instance of this class provides access to all the operations defined in ManagedDashboardsClient.
 */
public interface ManagedDashboardsClient {
    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagedDashboardInner>, ManagedDashboardInner> beginCreate(String resourceGroupName,
        String dashboardName, ManagedDashboardInner requestBodyParameters);

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagedDashboardInner>, ManagedDashboardInner> beginCreate(String resourceGroupName,
        String dashboardName, ManagedDashboardInner requestBodyParameters, Context context);

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedDashboardInner create(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters);

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedDashboardInner create(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters, Context context);

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ManagedDashboardInner> updateWithResponse(String resourceGroupName, String dashboardName,
        ManagedDashboardUpdateParameters requestBodyParameters, Context context);

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedDashboardInner update(String resourceGroupName, String dashboardName,
        ManagedDashboardUpdateParameters requestBodyParameters);

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String dashboardName, Context context);

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String dashboardName);
}
