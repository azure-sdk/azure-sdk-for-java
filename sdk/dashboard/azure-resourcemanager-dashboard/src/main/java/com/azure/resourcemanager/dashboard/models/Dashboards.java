// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Dashboards.
 */
public interface Dashboards {
    /**
     * List all resources of dashboards under the specified subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    PagedIterable<ManagedDashboard> list();

    /**
     * List all resources of dashboards under the specified subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    PagedIterable<ManagedDashboard> list(Context context);

    /**
     * List all resources of dashboards under the specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    PagedIterable<ManagedDashboard> listByResourceGroup(String resourceGroupName);

    /**
     * List all resources of dashboards under the specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    PagedIterable<ManagedDashboard> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get the properties of a specific dashboard for grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a specific dashboard for grafana resource along with {@link Response}.
     */
    Response<ManagedDashboard> getByResourceGroupWithResponse(String resourceGroupName, String dashboardName,
        Context context);

    /**
     * Get the properties of a specific dashboard for grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of a specific dashboard for grafana resource.
     */
    ManagedDashboard getByResourceGroup(String resourceGroupName, String dashboardName);
}
