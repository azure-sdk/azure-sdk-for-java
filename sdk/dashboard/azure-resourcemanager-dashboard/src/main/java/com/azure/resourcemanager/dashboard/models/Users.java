// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Grafana users settings.
 */
@Fluent
public final class Users implements JsonSerializable<Users> {
    /*
     * Set to true so viewers can access and use explore and perform temporary edits on panels in dashboards they have
     * access to. They cannot save their changes.
     */
    private Boolean viewersCanEdit;

    /**
     * Creates an instance of Users class.
     */
    public Users() {
    }

    /**
     * Get the viewersCanEdit property: Set to true so viewers can access and use explore and perform temporary edits on
     * panels in dashboards they have access to. They cannot save their changes.
     * 
     * @return the viewersCanEdit value.
     */
    public Boolean viewersCanEdit() {
        return this.viewersCanEdit;
    }

    /**
     * Set the viewersCanEdit property: Set to true so viewers can access and use explore and perform temporary edits on
     * panels in dashboards they have access to. They cannot save their changes.
     * 
     * @param viewersCanEdit the viewersCanEdit value to set.
     * @return the Users object itself.
     */
    public Users withViewersCanEdit(Boolean viewersCanEdit) {
        this.viewersCanEdit = viewersCanEdit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("viewersCanEdit", this.viewersCanEdit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Users from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Users if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Users.
     */
    public static Users fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Users deserializedUsers = new Users();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("viewersCanEdit".equals(fieldName)) {
                    deserializedUsers.viewersCanEdit = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsers;
        });
    }
}
