// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dashboard.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dashboard.fluent.ManagedDashboardsClient;
import com.azure.resourcemanager.dashboard.fluent.models.ManagedDashboardInner;
import com.azure.resourcemanager.dashboard.models.ManagedDashboardUpdateParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ManagedDashboardsClient.
 */
public final class ManagedDashboardsClientImpl implements ManagedDashboardsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ManagedDashboardsService service;

    /**
     * The service client containing this operation class.
     */
    private final DashboardManagementClientImpl client;

    /**
     * Initializes an instance of ManagedDashboardsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ManagedDashboardsClientImpl(DashboardManagementClientImpl client) {
        this.service
            = RestProxy.create(ManagedDashboardsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DashboardManagementClientManagedDashboards to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DashboardManagementC")
    public interface ManagedDashboardsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("dashboardName") String dashboardName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedDashboardInner requestBodyParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedDashboardInner>> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("dashboardName") String dashboardName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ManagedDashboardUpdateParameters requestBodyParameters,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/dashboards/{dashboardName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("dashboardName") String dashboardName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dashboardName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dashboardName is required and cannot be null."));
        }
        if (requestBodyParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter requestBodyParameters is required and cannot be null."));
        } else {
            requestBodyParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dashboardName, this.client.getApiVersion(), requestBodyParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dashboardName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dashboardName is required and cannot be null."));
        }
        if (requestBodyParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter requestBodyParameters is required and cannot be null."));
        } else {
            requestBodyParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dashboardName, this.client.getApiVersion(), requestBodyParameters, accept, context);
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedDashboardInner>, ManagedDashboardInner>
        beginCreateAsync(String resourceGroupName, String dashboardName, ManagedDashboardInner requestBodyParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, dashboardName, requestBodyParameters);
        return this.client.<ManagedDashboardInner, ManagedDashboardInner>getLroResult(mono,
            this.client.getHttpPipeline(), ManagedDashboardInner.class, ManagedDashboardInner.class,
            this.client.getContext());
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedDashboardInner>, ManagedDashboardInner> beginCreateAsync(
        String resourceGroupName, String dashboardName, ManagedDashboardInner requestBodyParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, dashboardName, requestBodyParameters, context);
        return this.client.<ManagedDashboardInner, ManagedDashboardInner>getLroResult(mono,
            this.client.getHttpPipeline(), ManagedDashboardInner.class, ManagedDashboardInner.class, context);
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedDashboardInner>, ManagedDashboardInner> beginCreate(String resourceGroupName,
        String dashboardName, ManagedDashboardInner requestBodyParameters) {
        return this.beginCreateAsync(resourceGroupName, dashboardName, requestBodyParameters).getSyncPoller();
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedDashboardInner>, ManagedDashboardInner> beginCreate(String resourceGroupName,
        String dashboardName, ManagedDashboardInner requestBodyParameters, Context context) {
        return this.beginCreateAsync(resourceGroupName, dashboardName, requestBodyParameters, context).getSyncPoller();
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedDashboardInner> createAsync(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters) {
        return beginCreateAsync(resourceGroupName, dashboardName, requestBodyParameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedDashboardInner> createAsync(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters, Context context) {
        return beginCreateAsync(resourceGroupName, dashboardName, requestBodyParameters, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedDashboardInner create(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters) {
        return createAsync(resourceGroupName, dashboardName, requestBodyParameters).block();
    }

    /**
     * Create or update a dashboard for grafana resource. This API is idempotent, so user can either create a new
     * dashboard or update an existing dashboard.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedDashboardInner create(String resourceGroupName, String dashboardName,
        ManagedDashboardInner requestBodyParameters, Context context) {
        return createAsync(resourceGroupName, dashboardName, requestBodyParameters, context).block();
    }

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedDashboardInner>> updateWithResponseAsync(String resourceGroupName,
        String dashboardName, ManagedDashboardUpdateParameters requestBodyParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dashboardName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dashboardName is required and cannot be null."));
        }
        if (requestBodyParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter requestBodyParameters is required and cannot be null."));
        } else {
            requestBodyParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dashboardName, this.client.getApiVersion(), requestBodyParameters, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedDashboardInner>> updateWithResponseAsync(String resourceGroupName,
        String dashboardName, ManagedDashboardUpdateParameters requestBodyParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dashboardName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dashboardName is required and cannot be null."));
        }
        if (requestBodyParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter requestBodyParameters is required and cannot be null."));
        } else {
            requestBodyParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dashboardName, this.client.getApiVersion(), requestBodyParameters, accept, context);
    }

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedDashboardInner> updateAsync(String resourceGroupName, String dashboardName,
        ManagedDashboardUpdateParameters requestBodyParameters) {
        return updateWithResponseAsync(resourceGroupName, dashboardName, requestBodyParameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManagedDashboardInner> updateWithResponse(String resourceGroupName, String dashboardName,
        ManagedDashboardUpdateParameters requestBodyParameters, Context context) {
        return updateWithResponseAsync(resourceGroupName, dashboardName, requestBodyParameters, context).block();
    }

    /**
     * Update a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param requestBodyParameters The requestBodyParameters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the managed dashboard resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedDashboardInner update(String resourceGroupName, String dashboardName,
        ManagedDashboardUpdateParameters requestBodyParameters) {
        return updateWithResponse(resourceGroupName, dashboardName, requestBodyParameters, Context.NONE).getValue();
    }

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String dashboardName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dashboardName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dashboardName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, dashboardName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String dashboardName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (dashboardName == null) {
            return Mono.error(new IllegalArgumentException("Parameter dashboardName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            dashboardName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String dashboardName) {
        return deleteWithResponseAsync(resourceGroupName, dashboardName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String dashboardName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, dashboardName, context).block();
    }

    /**
     * Delete a dashboard for Grafana resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dashboardName The name of the Azure Managed Dashboard.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String dashboardName) {
        deleteWithResponse(resourceGroupName, dashboardName, Context.NONE);
    }
}
