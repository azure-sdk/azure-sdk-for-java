// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.models.ServiceClassificationAnswer;
import java.io.IOException;
import java.util.List;

/**
 * Output of the service classification API.
 */
@Fluent
public final class ServiceClassificationOutputInner implements JsonSerializable<ServiceClassificationOutputInner> {
    /*
     * Set of problem classification objects classified.
     */
    private List<ServiceClassificationAnswer> serviceClassificationResults;

    /**
     * Creates an instance of ServiceClassificationOutputInner class.
     */
    public ServiceClassificationOutputInner() {
    }

    /**
     * Get the serviceClassificationResults property: Set of problem classification objects classified.
     * 
     * @return the serviceClassificationResults value.
     */
    public List<ServiceClassificationAnswer> serviceClassificationResults() {
        return this.serviceClassificationResults;
    }

    /**
     * Set the serviceClassificationResults property: Set of problem classification objects classified.
     * 
     * @param serviceClassificationResults the serviceClassificationResults value to set.
     * @return the ServiceClassificationOutputInner object itself.
     */
    public ServiceClassificationOutputInner
        withServiceClassificationResults(List<ServiceClassificationAnswer> serviceClassificationResults) {
        this.serviceClassificationResults = serviceClassificationResults;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceClassificationResults() != null) {
            serviceClassificationResults().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("serviceClassificationResults", this.serviceClassificationResults,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceClassificationOutputInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceClassificationOutputInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceClassificationOutputInner.
     */
    public static ServiceClassificationOutputInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceClassificationOutputInner deserializedServiceClassificationOutputInner
                = new ServiceClassificationOutputInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceClassificationResults".equals(fieldName)) {
                    List<ServiceClassificationAnswer> serviceClassificationResults
                        = reader.readArray(reader1 -> ServiceClassificationAnswer.fromJson(reader1));
                    deserializedServiceClassificationOutputInner.serviceClassificationResults
                        = serviceClassificationResults;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceClassificationOutputInner;
        });
    }
}
