// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input to problem classification Classification API.
 */
@Fluent
public final class ProblemClassificationsClassificationInput
    implements JsonSerializable<ProblemClassificationsClassificationInput> {
    /*
     * Natural language description of the customer’s issue.
     */
    private String issueSummary;

    /*
     * ARM resource Id of the resource that is having the issue.
     */
    private String resourceId;

    /**
     * Creates an instance of ProblemClassificationsClassificationInput class.
     */
    public ProblemClassificationsClassificationInput() {
    }

    /**
     * Get the issueSummary property: Natural language description of the customer’s issue.
     * 
     * @return the issueSummary value.
     */
    public String issueSummary() {
        return this.issueSummary;
    }

    /**
     * Set the issueSummary property: Natural language description of the customer’s issue.
     * 
     * @param issueSummary the issueSummary value to set.
     * @return the ProblemClassificationsClassificationInput object itself.
     */
    public ProblemClassificationsClassificationInput withIssueSummary(String issueSummary) {
        this.issueSummary = issueSummary;
        return this;
    }

    /**
     * Get the resourceId property: ARM resource Id of the resource that is having the issue.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ARM resource Id of the resource that is having the issue.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ProblemClassificationsClassificationInput object itself.
     */
    public ProblemClassificationsClassificationInput withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issueSummary() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property issueSummary in model ProblemClassificationsClassificationInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProblemClassificationsClassificationInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issueSummary", this.issueSummary);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProblemClassificationsClassificationInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProblemClassificationsClassificationInput if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProblemClassificationsClassificationInput.
     */
    public static ProblemClassificationsClassificationInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProblemClassificationsClassificationInput deserializedProblemClassificationsClassificationInput
                = new ProblemClassificationsClassificationInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueSummary".equals(fieldName)) {
                    deserializedProblemClassificationsClassificationInput.issueSummary = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedProblemClassificationsClassificationInput.resourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProblemClassificationsClassificationInput;
        });
    }
}
