// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.fluent.models.ClassificationService;
import java.io.IOException;
import java.util.List;

/**
 * Service Classification result object.
 */
@Fluent
public final class ServiceClassificationAnswer extends ClassificationService {
    /*
     * Child service.
     */
    private ClassificationService childService;

    /*
     * Localized name of the azure service.
     */
    private String displayName;

    /*
     * Azure resource Id of the service.
     */
    private String serviceId;

    /**
     * Creates an instance of ServiceClassificationAnswer class.
     */
    public ServiceClassificationAnswer() {
    }

    /**
     * Get the childService property: Child service.
     * 
     * @return the childService value.
     */
    public ClassificationService childService() {
        return this.childService;
    }

    /**
     * Set the childService property: Child service.
     * 
     * @param childService the childService value to set.
     * @return the ServiceClassificationAnswer object itself.
     */
    public ServiceClassificationAnswer withChildService(ClassificationService childService) {
        this.childService = childService;
        return this;
    }

    /**
     * Get the displayName property: Localized name of the azure service.
     * 
     * @return the displayName value.
     */
    @Override
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the serviceId property: Azure resource Id of the service.
     * 
     * @return the serviceId value.
     */
    @Override
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceClassificationAnswer withResourceTypes(List<String> resourceTypes) {
        super.withResourceTypes(resourceTypes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (childService() != null) {
            childService().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceTypes", resourceTypes(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("childService", this.childService);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceClassificationAnswer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceClassificationAnswer if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceClassificationAnswer.
     */
    public static ServiceClassificationAnswer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceClassificationAnswer deserializedServiceClassificationAnswer = new ServiceClassificationAnswer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceId".equals(fieldName)) {
                    deserializedServiceClassificationAnswer.serviceId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedServiceClassificationAnswer.displayName = reader.getString();
                } else if ("resourceTypes".equals(fieldName)) {
                    List<String> resourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedServiceClassificationAnswer.withResourceTypes(resourceTypes);
                } else if ("childService".equals(fieldName)) {
                    deserializedServiceClassificationAnswer.childService = ClassificationService.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceClassificationAnswer;
        });
    }
}
