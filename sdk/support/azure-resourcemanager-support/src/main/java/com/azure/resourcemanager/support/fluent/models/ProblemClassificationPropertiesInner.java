// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.models.SecondaryConsentEnabled;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Details about a problem classification available for an Azure service.
 */
@Fluent
public final class ProblemClassificationPropertiesInner
    implements JsonSerializable<ProblemClassificationPropertiesInner> {
    /*
     * Localized name of problem classification.
     */
    private String displayName;

    /*
     * This property indicates whether secondary consent is present for problem classification
     */
    private List<SecondaryConsentEnabled> secondaryConsentEnabled;

    /*
     * String-to-string dictionary for additional metadata.
     */
    private Map<String, String> metadata;

    /*
     * Reference to the parent problem classification which has same structure as problem classification
     */
    private ProblemClassificationInner parentProblemClassification;

    /**
     * Creates an instance of ProblemClassificationPropertiesInner class.
     */
    public ProblemClassificationPropertiesInner() {
    }

    /**
     * Get the displayName property: Localized name of problem classification.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized name of problem classification.
     * 
     * @param displayName the displayName value to set.
     * @return the ProblemClassificationPropertiesInner object itself.
     */
    public ProblemClassificationPropertiesInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @return the secondaryConsentEnabled value.
     */
    public List<SecondaryConsentEnabled> secondaryConsentEnabled() {
        return this.secondaryConsentEnabled;
    }

    /**
     * Set the secondaryConsentEnabled property: This property indicates whether secondary consent is present for
     * problem classification.
     * 
     * @param secondaryConsentEnabled the secondaryConsentEnabled value to set.
     * @return the ProblemClassificationPropertiesInner object itself.
     */
    public ProblemClassificationPropertiesInner
        withSecondaryConsentEnabled(List<SecondaryConsentEnabled> secondaryConsentEnabled) {
        this.secondaryConsentEnabled = secondaryConsentEnabled;
        return this;
    }

    /**
     * Get the metadata property: String-to-string dictionary for additional metadata.
     * 
     * @return the metadata value.
     */
    public Map<String, String> metadata() {
        return this.metadata;
    }

    /**
     * Get the parentProblemClassification property: Reference to the parent problem classification which has same
     * structure as problem classification.
     * 
     * @return the parentProblemClassification value.
     */
    public ProblemClassificationInner parentProblemClassification() {
        return this.parentProblemClassification;
    }

    /**
     * Set the parentProblemClassification property: Reference to the parent problem classification which has same
     * structure as problem classification.
     * 
     * @param parentProblemClassification the parentProblemClassification value to set.
     * @return the ProblemClassificationPropertiesInner object itself.
     */
    public ProblemClassificationPropertiesInner
        withParentProblemClassification(ProblemClassificationInner parentProblemClassification) {
        this.parentProblemClassification = parentProblemClassification;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secondaryConsentEnabled() != null) {
            secondaryConsentEnabled().forEach(e -> e.validate());
        }
        if (parentProblemClassification() != null) {
            parentProblemClassification().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("secondaryConsentEnabled", this.secondaryConsentEnabled,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("parentProblemClassification", this.parentProblemClassification);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProblemClassificationPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProblemClassificationPropertiesInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProblemClassificationPropertiesInner.
     */
    public static ProblemClassificationPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProblemClassificationPropertiesInner deserializedProblemClassificationPropertiesInner
                = new ProblemClassificationPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedProblemClassificationPropertiesInner.displayName = reader.getString();
                } else if ("secondaryConsentEnabled".equals(fieldName)) {
                    List<SecondaryConsentEnabled> secondaryConsentEnabled
                        = reader.readArray(reader1 -> SecondaryConsentEnabled.fromJson(reader1));
                    deserializedProblemClassificationPropertiesInner.secondaryConsentEnabled = secondaryConsentEnabled;
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedProblemClassificationPropertiesInner.metadata = metadata;
                } else if ("parentProblemClassification".equals(fieldName)) {
                    deserializedProblemClassificationPropertiesInner.parentProblemClassification
                        = ProblemClassificationInner.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProblemClassificationPropertiesInner;
        });
    }
}
