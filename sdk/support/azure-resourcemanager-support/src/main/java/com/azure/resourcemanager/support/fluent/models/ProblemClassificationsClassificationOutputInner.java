// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.support.models.ProblemClassificationsClassificationResult;
import java.io.IOException;
import java.util.List;

/**
 * Output of the problem classification Classification API.
 */
@Fluent
public final class ProblemClassificationsClassificationOutputInner
    implements JsonSerializable<ProblemClassificationsClassificationOutputInner> {
    /*
     * Set of problem classification objects classified.
     */
    private List<ProblemClassificationsClassificationResult> problemClassificationResults;

    /**
     * Creates an instance of ProblemClassificationsClassificationOutputInner class.
     */
    public ProblemClassificationsClassificationOutputInner() {
    }

    /**
     * Get the problemClassificationResults property: Set of problem classification objects classified.
     * 
     * @return the problemClassificationResults value.
     */
    public List<ProblemClassificationsClassificationResult> problemClassificationResults() {
        return this.problemClassificationResults;
    }

    /**
     * Set the problemClassificationResults property: Set of problem classification objects classified.
     * 
     * @param problemClassificationResults the problemClassificationResults value to set.
     * @return the ProblemClassificationsClassificationOutputInner object itself.
     */
    public ProblemClassificationsClassificationOutputInner withProblemClassificationResults(
        List<ProblemClassificationsClassificationResult> problemClassificationResults) {
        this.problemClassificationResults = problemClassificationResults;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (problemClassificationResults() != null) {
            problemClassificationResults().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("problemClassificationResults", this.problemClassificationResults,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProblemClassificationsClassificationOutputInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProblemClassificationsClassificationOutputInner if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProblemClassificationsClassificationOutputInner.
     */
    public static ProblemClassificationsClassificationOutputInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProblemClassificationsClassificationOutputInner deserializedProblemClassificationsClassificationOutputInner
                = new ProblemClassificationsClassificationOutputInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("problemClassificationResults".equals(fieldName)) {
                    List<ProblemClassificationsClassificationResult> problemClassificationResults
                        = reader.readArray(reader1 -> ProblemClassificationsClassificationResult.fromJson(reader1));
                    deserializedProblemClassificationsClassificationOutputInner.problemClassificationResults
                        = problemClassificationResults;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProblemClassificationsClassificationOutputInner;
        });
    }
}
