// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.support.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input to problem classification Classification API.
 */
@Fluent
public final class ServiceClassificationRequest implements JsonSerializable<ServiceClassificationRequest> {
    /*
     * Natural language description of the customer’s issue.
     */
    private String issueSummary;

    /*
     * ARM resource Id of the resource that is having the issue.
     */
    private String resourceId;

    /*
     * Additional information in the form of a string.
     */
    private String additionalContext;

    /**
     * Creates an instance of ServiceClassificationRequest class.
     */
    public ServiceClassificationRequest() {
    }

    /**
     * Get the issueSummary property: Natural language description of the customer’s issue.
     * 
     * @return the issueSummary value.
     */
    public String issueSummary() {
        return this.issueSummary;
    }

    /**
     * Set the issueSummary property: Natural language description of the customer’s issue.
     * 
     * @param issueSummary the issueSummary value to set.
     * @return the ServiceClassificationRequest object itself.
     */
    public ServiceClassificationRequest withIssueSummary(String issueSummary) {
        this.issueSummary = issueSummary;
        return this;
    }

    /**
     * Get the resourceId property: ARM resource Id of the resource that is having the issue.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ARM resource Id of the resource that is having the issue.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ServiceClassificationRequest object itself.
     */
    public ServiceClassificationRequest withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the additionalContext property: Additional information in the form of a string.
     * 
     * @return the additionalContext value.
     */
    public String additionalContext() {
        return this.additionalContext;
    }

    /**
     * Set the additionalContext property: Additional information in the form of a string.
     * 
     * @param additionalContext the additionalContext value to set.
     * @return the ServiceClassificationRequest object itself.
     */
    public ServiceClassificationRequest withAdditionalContext(String additionalContext) {
        this.additionalContext = additionalContext;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issueSummary", this.issueSummary);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("additionalContext", this.additionalContext);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceClassificationRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceClassificationRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceClassificationRequest.
     */
    public static ServiceClassificationRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceClassificationRequest deserializedServiceClassificationRequest = new ServiceClassificationRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueSummary".equals(fieldName)) {
                    deserializedServiceClassificationRequest.issueSummary = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedServiceClassificationRequest.resourceId = reader.getString();
                } else if ("additionalContext".equals(fieldName)) {
                    deserializedServiceClassificationRequest.additionalContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceClassificationRequest;
        });
    }
}
