// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Aggregation query type and scopes. */
@Fluent
public final class AggregationRequest {
    /*
     * The azure scopes in which the query will be executed - List of subscription IDs.
     */
    @JsonProperty(value = "azureScopes")
    private List<String> azureScopes;

    /*
     * The aws scopes in which the query will be executed - list of cloud connector IDs.
     */
    @JsonProperty(value = "awsScopes")
    private List<String> awsScopes;

    /*
     * The GCP scopes in which the query will be executed - list of GCP connector IDs.
     */
    @JsonProperty(value = "gcpScopes")
    private List<String> gcpScopes;

    /*
     * The aggregation query type
     */
    @JsonProperty(value = "aggregationType", required = true)
    private AggregationType aggregationType;

    /** Creates an instance of AggregationRequest class. */
    public AggregationRequest() {
    }

    /**
     * Get the azureScopes property: The azure scopes in which the query will be executed - List of subscription IDs.
     *
     * @return the azureScopes value.
     */
    public List<String> azureScopes() {
        return this.azureScopes;
    }

    /**
     * Set the azureScopes property: The azure scopes in which the query will be executed - List of subscription IDs.
     *
     * @param azureScopes the azureScopes value to set.
     * @return the AggregationRequest object itself.
     */
    public AggregationRequest withAzureScopes(List<String> azureScopes) {
        this.azureScopes = azureScopes;
        return this;
    }

    /**
     * Get the awsScopes property: The aws scopes in which the query will be executed - list of cloud connector IDs.
     *
     * @return the awsScopes value.
     */
    public List<String> awsScopes() {
        return this.awsScopes;
    }

    /**
     * Set the awsScopes property: The aws scopes in which the query will be executed - list of cloud connector IDs.
     *
     * @param awsScopes the awsScopes value to set.
     * @return the AggregationRequest object itself.
     */
    public AggregationRequest withAwsScopes(List<String> awsScopes) {
        this.awsScopes = awsScopes;
        return this;
    }

    /**
     * Get the gcpScopes property: The GCP scopes in which the query will be executed - list of GCP connector IDs.
     *
     * @return the gcpScopes value.
     */
    public List<String> gcpScopes() {
        return this.gcpScopes;
    }

    /**
     * Set the gcpScopes property: The GCP scopes in which the query will be executed - list of GCP connector IDs.
     *
     * @param gcpScopes the gcpScopes value to set.
     * @return the AggregationRequest object itself.
     */
    public AggregationRequest withGcpScopes(List<String> gcpScopes) {
        this.gcpScopes = gcpScopes;
        return this;
    }

    /**
     * Get the aggregationType property: The aggregation query type.
     *
     * @return the aggregationType value.
     */
    public AggregationType aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: The aggregation query type.
     *
     * @param aggregationType the aggregationType value to set.
     * @return the AggregationRequest object itself.
     */
    public AggregationRequest withAggregationType(AggregationType aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregationType() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property aggregationType in model AggregationRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AggregationRequest.class);
}
