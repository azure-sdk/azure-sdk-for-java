// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.GovernanceRuleInner;

/** Resource collection API of ManagementGroupGovernanceRulesOperations. */
public interface ManagementGroupGovernanceRulesOperations {
    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId along with {@link Response}.
     */
    Response<GovernanceRule> getWithResponse(String managementGroupId, String ruleId, Context context);

    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId.
     */
    GovernanceRule get(String managementGroupId, String ruleId);

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope along with {@link Response}.
     */
    Response<GovernanceRule> createOrUpdateWithResponse(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule, Context context);

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope.
     */
    GovernanceRule createOrUpdate(String managementGroupId, String ruleId, GovernanceRuleInner governanceRule);

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String managementGroupId, String ruleId);

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String managementGroupId, String ruleId, Context context);
}
