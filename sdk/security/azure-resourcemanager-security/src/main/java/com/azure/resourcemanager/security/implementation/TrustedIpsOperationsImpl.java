// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.TrustedIpsOperationsClient;
import com.azure.resourcemanager.security.fluent.models.TrustedIpsInner;
import com.azure.resourcemanager.security.models.TrustedIps;
import com.azure.resourcemanager.security.models.TrustedIpsOperations;

public final class TrustedIpsOperationsImpl implements TrustedIpsOperations {
    private static final ClientLogger LOGGER = new ClientLogger(TrustedIpsOperationsImpl.class);

    private final TrustedIpsOperationsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public TrustedIpsOperationsImpl(TrustedIpsOperationsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<TrustedIps> list(String scope) {
        PagedIterable<TrustedIpsInner> inner = this.serviceClient().list(scope);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TrustedIpsImpl(inner1, this.manager()));
    }

    public PagedIterable<TrustedIps> list(String scope, Context context) {
        PagedIterable<TrustedIpsInner> inner = this.serviceClient().list(scope, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TrustedIpsImpl(inner1, this.manager()));
    }

    public Response<TrustedIps> getWithResponse(String scope, String trustedIpsId, Context context) {
        Response<TrustedIpsInner> inner = this.serviceClient().getWithResponse(scope, trustedIpsId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TrustedIpsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TrustedIps get(String scope, String trustedIpsId) {
        TrustedIpsInner inner = this.serviceClient().get(scope, trustedIpsId);
        if (inner != null) {
            return new TrustedIpsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String scope, String trustedIpsId, Context context) {
        return this.serviceClient().deleteWithResponse(scope, trustedIpsId, context);
    }

    public void deleteByResourceGroup(String scope, String trustedIpsId) {
        this.serviceClient().delete(scope, trustedIpsId);
    }

    public TrustedIps getById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String trustedIpsId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "trustedIpsId");
        if (trustedIpsId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'trustedIps'.", id)));
        }
        return this.getWithResponse(scope, trustedIpsId, Context.NONE).getValue();
    }

    public Response<TrustedIps> getByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String trustedIpsId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "trustedIpsId");
        if (trustedIpsId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'trustedIps'.", id)));
        }
        return this.getWithResponse(scope, trustedIpsId, context);
    }

    public void deleteById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String trustedIpsId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "trustedIpsId");
        if (trustedIpsId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'trustedIps'.", id)));
        }
        this.deleteByResourceGroupWithResponse(scope, trustedIpsId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String trustedIpsId = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Security/trustedIps/{trustedIpsId}", "trustedIpsId");
        if (trustedIpsId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'trustedIps'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(scope, trustedIpsId, context);
    }

    private TrustedIpsOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public TrustedIpsImpl define(String name) {
        return new TrustedIpsImpl(name, this.manager());
    }
}
