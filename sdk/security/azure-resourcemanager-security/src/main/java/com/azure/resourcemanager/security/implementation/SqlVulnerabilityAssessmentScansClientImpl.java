// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.security.fluent.SqlVulnerabilityAssessmentScansClient;
import com.azure.resourcemanager.security.fluent.models.ScanV2Inner;
import com.azure.resourcemanager.security.fluent.models.ScansV2Inner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SqlVulnerabilityAssessmentScansClient. */
public final class SqlVulnerabilityAssessmentScansClientImpl implements SqlVulnerabilityAssessmentScansClient {
    /** The proxy service used to perform REST calls. */
    private final SqlVulnerabilityAssessmentScansService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of SqlVulnerabilityAssessmentScansClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SqlVulnerabilityAssessmentScansClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(
                    SqlVulnerabilityAssessmentScansService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterSqlVulnerabilityAssessmentScans to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterSqlVul")
    public interface SqlVulnerabilityAssessmentScansService {
        @Headers({"Content-Type: application/json"})
        @Get("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScanV2Inner>> get(
            @HostParam("$host") String endpoint,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @PathParam("scanId") String scanId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ScansV2Inner>> list(
            @HostParam("$host") String endpoint,
            @PathParam(value = "resourceId", encoded = true) String resourceId,
            @QueryParam("workspaceId") String workspaceId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the scan details of a single scan record.
     *
     * @param resourceId The identifier of the resource.
     * @param scanId The scan Id. Type 'latest' to get the scan record for the latest scan.
     * @param workspaceId The workspace Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan details of a single scan record along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScanV2Inner>> getWithResponseAsync(String resourceId, String scanId, String workspaceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (scanId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            resourceId,
                            scanId,
                            workspaceId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the scan details of a single scan record.
     *
     * @param resourceId The identifier of the resource.
     * @param scanId The scan Id. Type 'latest' to get the scan record for the latest scan.
     * @param workspaceId The workspace Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan details of a single scan record along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScanV2Inner>> getWithResponseAsync(
        String resourceId, String scanId, String workspaceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (scanId == null) {
            return Mono.error(new IllegalArgumentException("Parameter scanId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                resourceId,
                scanId,
                workspaceId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the scan details of a single scan record.
     *
     * @param resourceId The identifier of the resource.
     * @param scanId The scan Id. Type 'latest' to get the scan record for the latest scan.
     * @param workspaceId The workspace Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan details of a single scan record on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScanV2Inner> getAsync(String resourceId, String scanId, String workspaceId) {
        return getWithResponseAsync(resourceId, scanId, workspaceId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the scan details of a single scan record.
     *
     * @param resourceId The identifier of the resource.
     * @param scanId The scan Id. Type 'latest' to get the scan record for the latest scan.
     * @param workspaceId The workspace Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan details of a single scan record along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScanV2Inner> getWithResponse(
        String resourceId, String scanId, String workspaceId, Context context) {
        return getWithResponseAsync(resourceId, scanId, workspaceId, context).block();
    }

    /**
     * Gets the scan details of a single scan record.
     *
     * @param resourceId The identifier of the resource.
     * @param scanId The scan Id. Type 'latest' to get the scan record for the latest scan.
     * @param workspaceId The workspace Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the scan details of a single scan record.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScanV2Inner get(String resourceId, String scanId, String workspaceId) {
        return getWithResponse(resourceId, scanId, workspaceId, Context.NONE).getValue();
    }

    /**
     * Gets a list of scan records.
     *
     * @param resourceId The identifier of the resource.
     * @param workspaceId The workspace Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan records along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScansV2Inner>> listWithResponseAsync(String resourceId, String workspaceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            resourceId,
                            workspaceId,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of scan records.
     *
     * @param resourceId The identifier of the resource.
     * @param workspaceId The workspace Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan records along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ScansV2Inner>> listWithResponseAsync(String resourceId, String workspaceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (workspaceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter workspaceId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), resourceId, workspaceId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets a list of scan records.
     *
     * @param resourceId The identifier of the resource.
     * @param workspaceId The workspace Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan records on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ScansV2Inner> listAsync(String resourceId, String workspaceId) {
        return listWithResponseAsync(resourceId, workspaceId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list of scan records.
     *
     * @param resourceId The identifier of the resource.
     * @param workspaceId The workspace Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan records along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ScansV2Inner> listWithResponse(String resourceId, String workspaceId, Context context) {
        return listWithResponseAsync(resourceId, workspaceId, context).block();
    }

    /**
     * Gets a list of scan records.
     *
     * @param resourceId The identifier of the resource.
     * @param workspaceId The workspace Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of scan records.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ScansV2Inner list(String resourceId, String workspaceId) {
        return listWithResponse(resourceId, workspaceId, Context.NONE).getValue();
    }
}
