// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.ApplicationMappingRulesClient;
import com.azure.resourcemanager.security.fluent.models.ApplicationMappingRuleInner;
import com.azure.resourcemanager.security.models.ApplicationMappingRule;
import com.azure.resourcemanager.security.models.ApplicationMappingRules;

public final class ApplicationMappingRulesImpl implements ApplicationMappingRules {
    private static final ClientLogger LOGGER = new ClientLogger(ApplicationMappingRulesImpl.class);

    private final ApplicationMappingRulesClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public ApplicationMappingRulesImpl(
        ApplicationMappingRulesClient innerClient, com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ApplicationMappingRule> list(String scope) {
        PagedIterable<ApplicationMappingRuleInner> inner = this.serviceClient().list(scope);
        return Utils.mapPage(inner, inner1 -> new ApplicationMappingRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationMappingRule> list(String scope, Context context) {
        PagedIterable<ApplicationMappingRuleInner> inner = this.serviceClient().list(scope, context);
        return Utils.mapPage(inner, inner1 -> new ApplicationMappingRuleImpl(inner1, this.manager()));
    }

    public Response<ApplicationMappingRule> getWithResponse(String scope, String ruleId, Context context) {
        Response<ApplicationMappingRuleInner> inner = this.serviceClient().getWithResponse(scope, ruleId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationMappingRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicationMappingRule get(String scope, String ruleId) {
        ApplicationMappingRuleInner inner = this.serviceClient().get(scope, ruleId);
        if (inner != null) {
            return new ApplicationMappingRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String scope, String ruleId, Context context) {
        return this.serviceClient().deleteWithResponse(scope, ruleId, context);
    }

    public void deleteByResourceGroup(String scope, String ruleId) {
        this.serviceClient().delete(scope, ruleId);
    }

    public ApplicationMappingRule getById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String ruleId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "ruleId");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationMappingRules'.",
                                id)));
        }
        return this.getWithResponse(scope, ruleId, Context.NONE).getValue();
    }

    public Response<ApplicationMappingRule> getByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String ruleId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "ruleId");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationMappingRules'.",
                                id)));
        }
        return this.getWithResponse(scope, ruleId, context);
    }

    public void deleteById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String ruleId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "ruleId");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationMappingRules'.",
                                id)));
        }
        this.deleteByResourceGroupWithResponse(scope, ruleId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String ruleId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.Security/applicationMappingRules/{ruleId}", "ruleId");
        if (ruleId == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationMappingRules'.",
                                id)));
        }
        return this.deleteByResourceGroupWithResponse(scope, ruleId, context);
    }

    private ApplicationMappingRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }

    public ApplicationMappingRuleImpl define(String name) {
        return new ApplicationMappingRuleImpl(name, this.manager());
    }
}
