// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.security.models.EffectiveNetworkSecurityGroups;
import com.azure.resourcemanager.security.models.Rule;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Adaptive Network Hardening resource properties.
 */
@Fluent
public final class AdaptiveNetworkHardeningProperties implements JsonSerializable<AdaptiveNetworkHardeningProperties> {
    /*
     * The security rules which are recommended to be effective on the VM
     */
    private List<Rule> rules;

    /*
     * The UTC time on which the rules were calculated
     */
    private OffsetDateTime rulesCalculationTime;

    /*
     * The Network Security Groups effective on the network interfaces of the protected resource
     */
    private List<EffectiveNetworkSecurityGroups> effectiveNetworkSecurityGroups;

    /**
     * Creates an instance of AdaptiveNetworkHardeningProperties class.
     */
    public AdaptiveNetworkHardeningProperties() {
    }

    /**
     * Get the rules property: The security rules which are recommended to be effective on the VM.
     * 
     * @return the rules value.
     */
    public List<Rule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: The security rules which are recommended to be effective on the VM.
     * 
     * @param rules the rules value to set.
     * @return the AdaptiveNetworkHardeningProperties object itself.
     */
    public AdaptiveNetworkHardeningProperties withRules(List<Rule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Get the rulesCalculationTime property: The UTC time on which the rules were calculated.
     * 
     * @return the rulesCalculationTime value.
     */
    public OffsetDateTime rulesCalculationTime() {
        return this.rulesCalculationTime;
    }

    /**
     * Set the rulesCalculationTime property: The UTC time on which the rules were calculated.
     * 
     * @param rulesCalculationTime the rulesCalculationTime value to set.
     * @return the AdaptiveNetworkHardeningProperties object itself.
     */
    public AdaptiveNetworkHardeningProperties withRulesCalculationTime(OffsetDateTime rulesCalculationTime) {
        this.rulesCalculationTime = rulesCalculationTime;
        return this;
    }

    /**
     * Get the effectiveNetworkSecurityGroups property: The Network Security Groups effective on the network interfaces
     * of the protected resource.
     * 
     * @return the effectiveNetworkSecurityGroups value.
     */
    public List<EffectiveNetworkSecurityGroups> effectiveNetworkSecurityGroups() {
        return this.effectiveNetworkSecurityGroups;
    }

    /**
     * Set the effectiveNetworkSecurityGroups property: The Network Security Groups effective on the network interfaces
     * of the protected resource.
     * 
     * @param effectiveNetworkSecurityGroups the effectiveNetworkSecurityGroups value to set.
     * @return the AdaptiveNetworkHardeningProperties object itself.
     */
    public AdaptiveNetworkHardeningProperties
        withEffectiveNetworkSecurityGroups(List<EffectiveNetworkSecurityGroups> effectiveNetworkSecurityGroups) {
        this.effectiveNetworkSecurityGroups = effectiveNetworkSecurityGroups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
        if (effectiveNetworkSecurityGroups() != null) {
            effectiveNetworkSecurityGroups().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("rulesCalculationTime",
            this.rulesCalculationTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.rulesCalculationTime));
        jsonWriter.writeArrayField("effectiveNetworkSecurityGroups", this.effectiveNetworkSecurityGroups,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdaptiveNetworkHardeningProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdaptiveNetworkHardeningProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdaptiveNetworkHardeningProperties.
     */
    public static AdaptiveNetworkHardeningProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdaptiveNetworkHardeningProperties deserializedAdaptiveNetworkHardeningProperties
                = new AdaptiveNetworkHardeningProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rules".equals(fieldName)) {
                    List<Rule> rules = reader.readArray(reader1 -> Rule.fromJson(reader1));
                    deserializedAdaptiveNetworkHardeningProperties.rules = rules;
                } else if ("rulesCalculationTime".equals(fieldName)) {
                    deserializedAdaptiveNetworkHardeningProperties.rulesCalculationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("effectiveNetworkSecurityGroups".equals(fieldName)) {
                    List<EffectiveNetworkSecurityGroups> effectiveNetworkSecurityGroups
                        = reader.readArray(reader1 -> EffectiveNetworkSecurityGroups.fromJson(reader1));
                    deserializedAdaptiveNetworkHardeningProperties.effectiveNetworkSecurityGroups
                        = effectiveNetworkSecurityGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdaptiveNetworkHardeningProperties;
        });
    }
}
