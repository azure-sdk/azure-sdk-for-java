// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * A plan's extension properties.
 */
@Fluent
public final class Extension implements JsonSerializable<Extension> {
    /*
     * The extension name. Supported values are: <br><br>**AgentlessDiscoveryForKubernetes** - API-based discovery of
     * information about Kubernetes cluster architecture, workload objects, and setup. Required for Kubernetes
     * inventory, identity and network exposure detection, attack path analysis and risk hunting as part of the cloud
     * security explorer.
     * Available for CloudPosture plan.<br><br>**OnUploadMalwareScanning** - Limits the GB to be scanned per month for
     * each storage account within the subscription. Once this limit reached on a given storage account, Blobs won't be
     * scanned during current calendar month.
     * Available for StorageAccounts plan.<br><br>**SensitiveDataDiscovery** - Sensitive data discovery identifies Blob
     * storage container with sensitive data such as credentials, credit cards, and more, to help prioritize and
     * investigate security events.
     * Available for StorageAccounts and CloudPosture plans.<br><br>**ContainerRegistriesVulnerabilityAssessments** -
     * Provides vulnerability management for images stored in your container registries.
     * Available for CloudPosture and Containers plans. <br><br>**MdeDesignatedSubscription** -
     * VirtualMachines_P1;VirtualMachines_P2 <br><br>**AgentlessVmScanning** -
     * CloudPosture_Default;VirtualMachines_P2;Containers_Default_Preview <br><br>**EntraPermissionsManagement** -
     * CloudPosture_Default <br><br>**FileIntegrityMonitoring** - VirtualMachines_P2 <br><br>**ContainerSensor** -
     * Containers_Default <br><br>**ContainerIntegrityContribution** -
     * Containers_Default_Preview;CloudPosture_Default_Preview <br><br>**AIPromptEvidence** - AI_Default
     * <br><br>**ApiPosture** - CloudPosture_Default_Preview <br><br>
     */
    private String name;

    /*
     * Indicates whether the extension is enabled.
     */
    private IsEnabled isEnabled;

    /*
     * Property values associated with the extension.
     */
    private Map<String, Object> additionalExtensionProperties;

    /*
     * Optional. A status describing the success/failure of the extension's enablement/disablement operation.
     */
    private OperationStatusAutoGenerated operationStatus;

    /**
     * Creates an instance of Extension class.
     */
    public Extension() {
    }

    /**
     * Get the name property: The extension name. Supported values are:
     * &lt;br&gt;&lt;br&gt;**AgentlessDiscoveryForKubernetes** - API-based discovery of information about Kubernetes
     * cluster architecture, workload objects, and setup. Required for Kubernetes inventory, identity and network
     * exposure detection, attack path analysis and risk hunting as part of the cloud security explorer.
     * Available for CloudPosture plan.&lt;br&gt;&lt;br&gt;**OnUploadMalwareScanning** - Limits the GB to be scanned per
     * month for each storage account within the subscription. Once this limit reached on a given storage account, Blobs
     * won't be scanned during current calendar month.
     * Available for StorageAccounts plan.&lt;br&gt;&lt;br&gt;**SensitiveDataDiscovery** - Sensitive data discovery
     * identifies Blob storage container with sensitive data such as credentials, credit cards, and more, to help
     * prioritize and investigate security events.
     * Available for StorageAccounts and CloudPosture
     * plans.&lt;br&gt;&lt;br&gt;**ContainerRegistriesVulnerabilityAssessments** - Provides vulnerability management for
     * images stored in your container registries.
     * Available for CloudPosture and Containers plans. &lt;br&gt;&lt;br&gt;**MdeDesignatedSubscription** -
     * VirtualMachines_P1;VirtualMachines_P2 &lt;br&gt;&lt;br&gt;**AgentlessVmScanning** -
     * CloudPosture_Default;VirtualMachines_P2;Containers_Default_Preview
     * &lt;br&gt;&lt;br&gt;**EntraPermissionsManagement** - CloudPosture_Default
     * &lt;br&gt;&lt;br&gt;**FileIntegrityMonitoring** - VirtualMachines_P2 &lt;br&gt;&lt;br&gt;**ContainerSensor** -
     * Containers_Default &lt;br&gt;&lt;br&gt;**ContainerIntegrityContribution** -
     * Containers_Default_Preview;CloudPosture_Default_Preview &lt;br&gt;&lt;br&gt;**AIPromptEvidence** - AI_Default
     * &lt;br&gt;&lt;br&gt;**ApiPosture** - CloudPosture_Default_Preview &lt;br&gt;&lt;br&gt;.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The extension name. Supported values are:
     * &lt;br&gt;&lt;br&gt;**AgentlessDiscoveryForKubernetes** - API-based discovery of information about Kubernetes
     * cluster architecture, workload objects, and setup. Required for Kubernetes inventory, identity and network
     * exposure detection, attack path analysis and risk hunting as part of the cloud security explorer.
     * Available for CloudPosture plan.&lt;br&gt;&lt;br&gt;**OnUploadMalwareScanning** - Limits the GB to be scanned per
     * month for each storage account within the subscription. Once this limit reached on a given storage account, Blobs
     * won't be scanned during current calendar month.
     * Available for StorageAccounts plan.&lt;br&gt;&lt;br&gt;**SensitiveDataDiscovery** - Sensitive data discovery
     * identifies Blob storage container with sensitive data such as credentials, credit cards, and more, to help
     * prioritize and investigate security events.
     * Available for StorageAccounts and CloudPosture
     * plans.&lt;br&gt;&lt;br&gt;**ContainerRegistriesVulnerabilityAssessments** - Provides vulnerability management for
     * images stored in your container registries.
     * Available for CloudPosture and Containers plans. &lt;br&gt;&lt;br&gt;**MdeDesignatedSubscription** -
     * VirtualMachines_P1;VirtualMachines_P2 &lt;br&gt;&lt;br&gt;**AgentlessVmScanning** -
     * CloudPosture_Default;VirtualMachines_P2;Containers_Default_Preview
     * &lt;br&gt;&lt;br&gt;**EntraPermissionsManagement** - CloudPosture_Default
     * &lt;br&gt;&lt;br&gt;**FileIntegrityMonitoring** - VirtualMachines_P2 &lt;br&gt;&lt;br&gt;**ContainerSensor** -
     * Containers_Default &lt;br&gt;&lt;br&gt;**ContainerIntegrityContribution** -
     * Containers_Default_Preview;CloudPosture_Default_Preview &lt;br&gt;&lt;br&gt;**AIPromptEvidence** - AI_Default
     * &lt;br&gt;&lt;br&gt;**ApiPosture** - CloudPosture_Default_Preview &lt;br&gt;&lt;br&gt;.
     * 
     * @param name the name value to set.
     * @return the Extension object itself.
     */
    public Extension withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the isEnabled property: Indicates whether the extension is enabled.
     * 
     * @return the isEnabled value.
     */
    public IsEnabled isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Indicates whether the extension is enabled.
     * 
     * @param isEnabled the isEnabled value to set.
     * @return the Extension object itself.
     */
    public Extension withIsEnabled(IsEnabled isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the additionalExtensionProperties property: Property values associated with the extension.
     * 
     * @return the additionalExtensionProperties value.
     */
    public Map<String, Object> additionalExtensionProperties() {
        return this.additionalExtensionProperties;
    }

    /**
     * Set the additionalExtensionProperties property: Property values associated with the extension.
     * 
     * @param additionalExtensionProperties the additionalExtensionProperties value to set.
     * @return the Extension object itself.
     */
    public Extension withAdditionalExtensionProperties(Map<String, Object> additionalExtensionProperties) {
        this.additionalExtensionProperties = additionalExtensionProperties;
        return this;
    }

    /**
     * Get the operationStatus property: Optional. A status describing the success/failure of the extension's
     * enablement/disablement operation.
     * 
     * @return the operationStatus value.
     */
    public OperationStatusAutoGenerated operationStatus() {
        return this.operationStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model Extension"));
        }
        if (isEnabled() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property isEnabled in model Extension"));
        }
        if (operationStatus() != null) {
            operationStatus().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Extension.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("isEnabled", this.isEnabled == null ? null : this.isEnabled.toString());
        jsonWriter.writeMapField("additionalExtensionProperties", this.additionalExtensionProperties,
            (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Extension from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Extension if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Extension.
     */
    public static Extension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Extension deserializedExtension = new Extension();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedExtension.name = reader.getString();
                } else if ("isEnabled".equals(fieldName)) {
                    deserializedExtension.isEnabled = IsEnabled.fromString(reader.getString());
                } else if ("additionalExtensionProperties".equals(fieldName)) {
                    Map<String, Object> additionalExtensionProperties
                        = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedExtension.additionalExtensionProperties = additionalExtensionProperties;
                } else if ("operationStatus".equals(fieldName)) {
                    deserializedExtension.operationStatus = OperationStatusAutoGenerated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtension;
        });
    }
}
