// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes remote addresses that is recommended to communicate with the Azure resource on some (Protocol, Port,
 * Direction). All other remote addresses are recommended to be blocked.
 */
@Fluent
public final class Rule implements JsonSerializable<Rule> {
    /*
     * The name of the rule
     */
    private String name;

    /*
     * The rule's direction
     */
    private Direction direction;

    /*
     * The rule's destination port
     */
    private Integer destinationPort;

    /*
     * The rule's transport protocols
     */
    private List<TransportProtocol> protocols;

    /*
     * The remote IP addresses that should be able to communicate with the Azure resource on the rule's destination port
     * and protocol
     */
    private List<String> ipAddresses;

    /**
     * Creates an instance of Rule class.
     */
    public Rule() {
    }

    /**
     * Get the name property: The name of the rule.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the rule.
     * 
     * @param name the name value to set.
     * @return the Rule object itself.
     */
    public Rule withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the direction property: The rule's direction.
     * 
     * @return the direction value.
     */
    public Direction direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The rule's direction.
     * 
     * @param direction the direction value to set.
     * @return the Rule object itself.
     */
    public Rule withDirection(Direction direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the destinationPort property: The rule's destination port.
     * 
     * @return the destinationPort value.
     */
    public Integer destinationPort() {
        return this.destinationPort;
    }

    /**
     * Set the destinationPort property: The rule's destination port.
     * 
     * @param destinationPort the destinationPort value to set.
     * @return the Rule object itself.
     */
    public Rule withDestinationPort(Integer destinationPort) {
        this.destinationPort = destinationPort;
        return this;
    }

    /**
     * Get the protocols property: The rule's transport protocols.
     * 
     * @return the protocols value.
     */
    public List<TransportProtocol> protocols() {
        return this.protocols;
    }

    /**
     * Set the protocols property: The rule's transport protocols.
     * 
     * @param protocols the protocols value to set.
     * @return the Rule object itself.
     */
    public Rule withProtocols(List<TransportProtocol> protocols) {
        this.protocols = protocols;
        return this;
    }

    /**
     * Get the ipAddresses property: The remote IP addresses that should be able to communicate with the Azure resource
     * on the rule's destination port and protocol.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Set the ipAddresses property: The remote IP addresses that should be able to communicate with the Azure resource
     * on the rule's destination port and protocol.
     * 
     * @param ipAddresses the ipAddresses value to set.
     * @return the Rule object itself.
     */
    public Rule withIpAddresses(List<String> ipAddresses) {
        this.ipAddresses = ipAddresses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeNumberField("destinationPort", this.destinationPort);
        jsonWriter.writeArrayField("protocols", this.protocols,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("ipAddresses", this.ipAddresses, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Rule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Rule if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Rule.
     */
    public static Rule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Rule deserializedRule = new Rule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedRule.name = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedRule.direction = Direction.fromString(reader.getString());
                } else if ("destinationPort".equals(fieldName)) {
                    deserializedRule.destinationPort = reader.getNullable(JsonReader::getInt);
                } else if ("protocols".equals(fieldName)) {
                    List<TransportProtocol> protocols
                        = reader.readArray(reader1 -> TransportProtocol.fromString(reader1.getString()));
                    deserializedRule.protocols = protocols;
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedRule.ipAddresses = ipAddresses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRule;
        });
    }
}
