// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Query result.
 */
@Fluent
public final class ScenarioResponseInner implements JsonSerializable<ScenarioResponseInner> {
    /*
     * The result of the query operation.
     */
    private Object scenarioResult;

    /**
     * Creates an instance of ScenarioResponseInner class.
     */
    public ScenarioResponseInner() {
    }

    /**
     * Get the scenarioResult property: The result of the query operation.
     * 
     * @return the scenarioResult value.
     */
    public Object scenarioResult() {
        return this.scenarioResult;
    }

    /**
     * Set the scenarioResult property: The result of the query operation.
     * 
     * @param scenarioResult the scenarioResult value to set.
     * @return the ScenarioResponseInner object itself.
     */
    public ScenarioResponseInner withScenarioResult(Object scenarioResult) {
        this.scenarioResult = scenarioResult;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (this.scenarioResult != null) {
            jsonWriter.writeUntypedField("scenarioResult", this.scenarioResult);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScenarioResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScenarioResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScenarioResponseInner.
     */
    public static ScenarioResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScenarioResponseInner deserializedScenarioResponseInner = new ScenarioResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scenarioResult".equals(fieldName)) {
                    deserializedScenarioResponseInner.scenarioResult = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScenarioResponseInner;
        });
    }
}
