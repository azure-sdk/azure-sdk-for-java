// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.security.models.AdaptiveApplicationControlIssueSummary;
import com.azure.resourcemanager.security.models.ConfigurationStatus;
import com.azure.resourcemanager.security.models.EnforcementMode;
import com.azure.resourcemanager.security.models.PathRecommendation;
import com.azure.resourcemanager.security.models.ProtectionMode;
import com.azure.resourcemanager.security.models.RecommendationStatus;
import com.azure.resourcemanager.security.models.SourceSystem;
import com.azure.resourcemanager.security.models.VmRecommendation;
import java.io.IOException;
import java.util.List;

/**
 * The AdaptiveApplicationControlGroup model.
 */
@Fluent
public final class AdaptiveApplicationControlGroupInner extends ProxyResource {
    /*
     * Represents a machines group and set of rules to be allowed running on a machine
     */
    private AdaptiveApplicationControlGroupData innerProperties = new AdaptiveApplicationControlGroupData();

    /*
     * Location where the resource is stored
     */
    private String location;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of AdaptiveApplicationControlGroupInner class.
     */
    public AdaptiveApplicationControlGroupInner() {
    }

    /**
     * Get the innerProperties property: Represents a machines group and set of rules to be allowed running on a
     * machine.
     * 
     * @return the innerProperties value.
     */
    private AdaptiveApplicationControlGroupData innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the location property: Location where the resource is stored.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the enforcementMode property: The application control policy enforcement/protection mode of the machine
     * group.
     * 
     * @return the enforcementMode value.
     */
    public EnforcementMode enforcementMode() {
        return this.innerProperties() == null ? null : this.innerProperties().enforcementMode();
    }

    /**
     * Set the enforcementMode property: The application control policy enforcement/protection mode of the machine
     * group.
     * 
     * @param enforcementMode the enforcementMode value to set.
     * @return the AdaptiveApplicationControlGroupInner object itself.
     */
    public AdaptiveApplicationControlGroupInner withEnforcementMode(EnforcementMode enforcementMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdaptiveApplicationControlGroupData();
        }
        this.innerProperties().withEnforcementMode(enforcementMode);
        return this;
    }

    /**
     * Get the protectionMode property: The protection mode of the collection/file types. Exe/Msi/Script are used for
     * Windows, Executable is used for Linux.
     * 
     * @return the protectionMode value.
     */
    public ProtectionMode protectionMode() {
        return this.innerProperties() == null ? null : this.innerProperties().protectionMode();
    }

    /**
     * Set the protectionMode property: The protection mode of the collection/file types. Exe/Msi/Script are used for
     * Windows, Executable is used for Linux.
     * 
     * @param protectionMode the protectionMode value to set.
     * @return the AdaptiveApplicationControlGroupInner object itself.
     */
    public AdaptiveApplicationControlGroupInner withProtectionMode(ProtectionMode protectionMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdaptiveApplicationControlGroupData();
        }
        this.innerProperties().withProtectionMode(protectionMode);
        return this;
    }

    /**
     * Get the configurationStatus property: The configuration status of the machines group or machine or rule.
     * 
     * @return the configurationStatus value.
     */
    public ConfigurationStatus configurationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().configurationStatus();
    }

    /**
     * Get the recommendationStatus property: The initial recommendation status of the machine group or machine.
     * 
     * @return the recommendationStatus value.
     */
    public RecommendationStatus recommendationStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().recommendationStatus();
    }

    /**
     * Get the issues property: The issues property.
     * 
     * @return the issues value.
     */
    public List<AdaptiveApplicationControlIssueSummary> issues() {
        return this.innerProperties() == null ? null : this.innerProperties().issues();
    }

    /**
     * Get the sourceSystem property: The source type of the machine group.
     * 
     * @return the sourceSystem value.
     */
    public SourceSystem sourceSystem() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceSystem();
    }

    /**
     * Get the vmRecommendations property: The vmRecommendations property.
     * 
     * @return the vmRecommendations value.
     */
    public List<VmRecommendation> vmRecommendations() {
        return this.innerProperties() == null ? null : this.innerProperties().vmRecommendations();
    }

    /**
     * Set the vmRecommendations property: The vmRecommendations property.
     * 
     * @param vmRecommendations the vmRecommendations value to set.
     * @return the AdaptiveApplicationControlGroupInner object itself.
     */
    public AdaptiveApplicationControlGroupInner withVmRecommendations(List<VmRecommendation> vmRecommendations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdaptiveApplicationControlGroupData();
        }
        this.innerProperties().withVmRecommendations(vmRecommendations);
        return this;
    }

    /**
     * Get the pathRecommendations property: The pathRecommendations property.
     * 
     * @return the pathRecommendations value.
     */
    public List<PathRecommendation> pathRecommendations() {
        return this.innerProperties() == null ? null : this.innerProperties().pathRecommendations();
    }

    /**
     * Set the pathRecommendations property: The pathRecommendations property.
     * 
     * @param pathRecommendations the pathRecommendations value to set.
     * @return the AdaptiveApplicationControlGroupInner object itself.
     */
    public AdaptiveApplicationControlGroupInner withPathRecommendations(List<PathRecommendation> pathRecommendations) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AdaptiveApplicationControlGroupData();
        }
        this.innerProperties().withPathRecommendations(pathRecommendations);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model AdaptiveApplicationControlGroupInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AdaptiveApplicationControlGroupInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdaptiveApplicationControlGroupInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdaptiveApplicationControlGroupInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AdaptiveApplicationControlGroupInner.
     */
    public static AdaptiveApplicationControlGroupInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdaptiveApplicationControlGroupInner deserializedAdaptiveApplicationControlGroupInner
                = new AdaptiveApplicationControlGroupInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupInner.innerProperties
                        = AdaptiveApplicationControlGroupData.fromJson(reader);
                } else if ("location".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupInner.location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdaptiveApplicationControlGroupInner;
        });
    }
}
