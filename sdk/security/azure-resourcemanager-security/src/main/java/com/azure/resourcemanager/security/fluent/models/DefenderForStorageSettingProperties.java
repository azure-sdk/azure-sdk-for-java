// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.security.models.OperationStatusAutoGenerated;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A Defender for Storage resource properties. */
@Fluent
public final class DefenderForStorageSettingProperties {
    /*
     * Indicates whether Defender for Storage is enabled on this resource.
     */
    @JsonProperty(value = "isEnabled")
    private Boolean isEnabled;

    /*
     * Properties of Malware Scanning.
     */
    @JsonProperty(value = "malwareScanning")
    private MalwareScanningProperties innerMalwareScanning;

    /*
     * Properties of Sensitive Data Discovery.
     */
    @JsonProperty(value = "sensitiveDataDiscovery")
    private SensitiveDataDiscoveryProperties innerSensitiveDataDiscovery;

    /*
     * Indicates whether the settings defined for this resource should override the settings defined on the
     * subscription.
     */
    @JsonProperty(value = "overrideSubscriptionLevelSettings")
    private Boolean overrideSubscriptionLevelSettings;

    /** Creates an instance of DefenderForStorageSettingProperties class. */
    public DefenderForStorageSettingProperties() {
    }

    /**
     * Get the isEnabled property: Indicates whether Defender for Storage is enabled on this resource.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Set the isEnabled property: Indicates whether Defender for Storage is enabled on this resource.
     *
     * @param isEnabled the isEnabled value to set.
     * @return the DefenderForStorageSettingProperties object itself.
     */
    public DefenderForStorageSettingProperties withIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
        return this;
    }

    /**
     * Get the innerMalwareScanning property: Properties of Malware Scanning.
     *
     * @return the innerMalwareScanning value.
     */
    private MalwareScanningProperties innerMalwareScanning() {
        return this.innerMalwareScanning;
    }

    /**
     * Get the innerSensitiveDataDiscovery property: Properties of Sensitive Data Discovery.
     *
     * @return the innerSensitiveDataDiscovery value.
     */
    private SensitiveDataDiscoveryProperties innerSensitiveDataDiscovery() {
        return this.innerSensitiveDataDiscovery;
    }

    /**
     * Get the overrideSubscriptionLevelSettings property: Indicates whether the settings defined for this resource
     * should override the settings defined on the subscription.
     *
     * @return the overrideSubscriptionLevelSettings value.
     */
    public Boolean overrideSubscriptionLevelSettings() {
        return this.overrideSubscriptionLevelSettings;
    }

    /**
     * Set the overrideSubscriptionLevelSettings property: Indicates whether the settings defined for this resource
     * should override the settings defined on the subscription.
     *
     * @param overrideSubscriptionLevelSettings the overrideSubscriptionLevelSettings value to set.
     * @return the DefenderForStorageSettingProperties object itself.
     */
    public DefenderForStorageSettingProperties withOverrideSubscriptionLevelSettings(
        Boolean overrideSubscriptionLevelSettings) {
        this.overrideSubscriptionLevelSettings = overrideSubscriptionLevelSettings;
        return this;
    }

    /**
     * Get the operationStatus property: Optional. A status describing the success/failure of Malware Scanning
     * enablement/disablement operation.
     *
     * @return the operationStatus value.
     */
    public OperationStatusAutoGenerated operationStatus() {
        return this.innerMalwareScanning() == null ? null : this.innerMalwareScanning().operationStatus();
    }

    /**
     * Get the isEnabled property: Indicates whether On Upload malware scanning should be enabled.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabledMalwareScanningIsEnabled() {
        return this.innerMalwareScanning() == null ? null : this.innerMalwareScanning().isEnabled();
    }

    /**
     * Set the isEnabled property: Indicates whether On Upload malware scanning should be enabled.
     *
     * @param isEnabled the isEnabled value to set.
     * @return the DefenderForStorageSettingProperties object itself.
     */
    public DefenderForStorageSettingProperties withIsEnabledMalwareScanningIsEnabled(Boolean isEnabled) {
        if (this.innerMalwareScanning() == null) {
            this.innerMalwareScanning = new MalwareScanningProperties();
        }
        this.innerMalwareScanning().withIsEnabled(isEnabled);
        return this;
    }

    /**
     * Get the capGBPerMonth property: Defines the max GB to be scanned per Month. Set to -1 if no capping is needed.
     *
     * @return the capGBPerMonth value.
     */
    public Integer capGBPerMonth() {
        return this.innerMalwareScanning() == null ? null : this.innerMalwareScanning().capGBPerMonth();
    }

    /**
     * Set the capGBPerMonth property: Defines the max GB to be scanned per Month. Set to -1 if no capping is needed.
     *
     * @param capGBPerMonth the capGBPerMonth value to set.
     * @return the DefenderForStorageSettingProperties object itself.
     */
    public DefenderForStorageSettingProperties withCapGBPerMonth(Integer capGBPerMonth) {
        if (this.innerMalwareScanning() == null) {
            this.innerMalwareScanning = new MalwareScanningProperties();
        }
        this.innerMalwareScanning().withCapGBPerMonth(capGBPerMonth);
        return this;
    }

    /**
     * Get the isEnabled property: Indicates whether Sensitive Data Discovery should be enabled.
     *
     * @return the isEnabled value.
     */
    public Boolean isEnabledSensitiveDataDiscoveryIsEnabled() {
        return this.innerSensitiveDataDiscovery() == null ? null : this.innerSensitiveDataDiscovery().isEnabled();
    }

    /**
     * Set the isEnabled property: Indicates whether Sensitive Data Discovery should be enabled.
     *
     * @param isEnabled the isEnabled value to set.
     * @return the DefenderForStorageSettingProperties object itself.
     */
    public DefenderForStorageSettingProperties withIsEnabledSensitiveDataDiscoveryIsEnabled(Boolean isEnabled) {
        if (this.innerSensitiveDataDiscovery() == null) {
            this.innerSensitiveDataDiscovery = new SensitiveDataDiscoveryProperties();
        }
        this.innerSensitiveDataDiscovery().withIsEnabled(isEnabled);
        return this;
    }

    /**
     * Get the operationStatus property: Optional. A status describing the success/failure of Sensitive Data Discovery's
     * enablement/disablement operation.
     *
     * @return the operationStatus value.
     */
    public OperationStatusAutoGenerated operationStatusSensitiveDataDiscoveryOperationStatus() {
        return this.innerSensitiveDataDiscovery() == null ? null : this.innerSensitiveDataDiscovery().operationStatus();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerMalwareScanning() != null) {
            innerMalwareScanning().validate();
        }
        if (innerSensitiveDataDiscovery() != null) {
            innerSensitiveDataDiscovery().validate();
        }
    }
}
