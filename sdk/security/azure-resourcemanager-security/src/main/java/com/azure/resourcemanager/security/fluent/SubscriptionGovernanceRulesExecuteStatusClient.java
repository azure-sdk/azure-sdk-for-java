// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.util.Context;
import com.azure.resourcemanager.security.fluent.models.ExecuteRuleStatusInner;
import com.azure.resourcemanager.security.models.SubscriptionGovernanceRulesExecuteStatusGetResponse;

/**
 * An instance of this class provides access to all the operations defined in
 * SubscriptionGovernanceRulesExecuteStatusClient.
 */
public interface SubscriptionGovernanceRulesExecuteStatusClient {
    /**
     * Get a specific governance rule execution status for the requested scope by ruleId and operationId.
     *
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule execution status for the requested scope by ruleId and operationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SubscriptionGovernanceRulesExecuteStatusGetResponse getWithResponse(
        String ruleId, String operationId, Context context);

    /**
     * Get a specific governance rule execution status for the requested scope by ruleId and operationId.
     *
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule execution status for the requested scope by ruleId and operationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExecuteRuleStatusInner get(String ruleId, String operationId);
}
