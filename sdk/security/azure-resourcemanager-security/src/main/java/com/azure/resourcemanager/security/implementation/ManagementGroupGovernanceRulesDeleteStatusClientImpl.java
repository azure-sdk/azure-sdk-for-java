// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.security.fluent.ManagementGroupGovernanceRulesDeleteStatusClient;
import com.azure.resourcemanager.security.models.ManagementGroupGovernanceRulesDeleteStatusGetResponse;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ManagementGroupGovernanceRulesDeleteStatusClient.
 */
public final class ManagementGroupGovernanceRulesDeleteStatusClientImpl
    implements ManagementGroupGovernanceRulesDeleteStatusClient {
    /** The proxy service used to perform REST calls. */
    private final ManagementGroupGovernanceRulesDeleteStatusService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of ManagementGroupGovernanceRulesDeleteStatusClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ManagementGroupGovernanceRulesDeleteStatusClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(
                    ManagementGroupGovernanceRulesDeleteStatusService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterManagementGroupGovernanceRulesDeleteStatus to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterManage")
    public interface ManagementGroupGovernanceRulesDeleteStatusService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security"
                + "/governanceRules/{ruleId}/delete/operationResults/{operationId}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<ManagementGroupGovernanceRulesDeleteStatusGetResponse> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("ruleId") String ruleId,
            @PathParam("operationId") String operationId,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a specific governance rule deletion status for the requested scope by rule ID and operation ID.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule deletion status for the requested scope by rule ID and operation ID on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagementGroupGovernanceRulesDeleteStatusGetResponse> getWithResponseAsync(
        String managementGroupId, String ruleId, String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            apiVersion,
                            managementGroupId,
                            ruleId,
                            operationId,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific governance rule deletion status for the requested scope by rule ID and operation ID.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule deletion status for the requested scope by rule ID and operation ID on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagementGroupGovernanceRulesDeleteStatusGetResponse> getWithResponseAsync(
        String managementGroupId, String ruleId, String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(this.client.getEndpoint(), apiVersion, managementGroupId, ruleId, operationId, accept, context);
    }

    /**
     * Get a specific governance rule deletion status for the requested scope by rule ID and operation ID.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule deletion status for the requested scope by rule ID and operation ID on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> getAsync(String managementGroupId, String ruleId, String operationId) {
        return getWithResponseAsync(managementGroupId, ruleId, operationId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Get a specific governance rule deletion status for the requested scope by rule ID and operation ID.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule deletion status for the requested scope by rule ID and operation ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagementGroupGovernanceRulesDeleteStatusGetResponse getWithResponse(
        String managementGroupId, String ruleId, String operationId, Context context) {
        return getWithResponseAsync(managementGroupId, ruleId, operationId, context).block();
    }

    /**
     * Get a specific governance rule deletion status for the requested scope by rule ID and operation ID.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param operationId The governance rule execution key - unique key for the execution of governance rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void get(String managementGroupId, String ruleId, String operationId) {
        getWithResponse(managementGroupId, ruleId, operationId, Context.NONE);
    }
}
