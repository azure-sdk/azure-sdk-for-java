// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The AdaptiveNetworkHardeningEnforceRequest model.
 */
@Fluent
public final class AdaptiveNetworkHardeningEnforceRequest
    implements JsonSerializable<AdaptiveNetworkHardeningEnforceRequest> {
    /*
     * The rules to enforce
     */
    private List<Rule> rules;

    /*
     * The Azure resource IDs of the effective network security groups that will be updated with the created security
     * rules from the Adaptive Network Hardening rules
     */
    private List<String> networkSecurityGroups;

    /**
     * Creates an instance of AdaptiveNetworkHardeningEnforceRequest class.
     */
    public AdaptiveNetworkHardeningEnforceRequest() {
    }

    /**
     * Get the rules property: The rules to enforce.
     * 
     * @return the rules value.
     */
    public List<Rule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: The rules to enforce.
     * 
     * @param rules the rules value to set.
     * @return the AdaptiveNetworkHardeningEnforceRequest object itself.
     */
    public AdaptiveNetworkHardeningEnforceRequest withRules(List<Rule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Get the networkSecurityGroups property: The Azure resource IDs of the effective network security groups that will
     * be updated with the created security rules from the Adaptive Network Hardening rules.
     * 
     * @return the networkSecurityGroups value.
     */
    public List<String> networkSecurityGroups() {
        return this.networkSecurityGroups;
    }

    /**
     * Set the networkSecurityGroups property: The Azure resource IDs of the effective network security groups that will
     * be updated with the created security rules from the Adaptive Network Hardening rules.
     * 
     * @param networkSecurityGroups the networkSecurityGroups value to set.
     * @return the AdaptiveNetworkHardeningEnforceRequest object itself.
     */
    public AdaptiveNetworkHardeningEnforceRequest withNetworkSecurityGroups(List<String> networkSecurityGroups) {
        this.networkSecurityGroups = networkSecurityGroups;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rules in model AdaptiveNetworkHardeningEnforceRequest"));
        } else {
            rules().forEach(e -> e.validate());
        }
        if (networkSecurityGroups() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkSecurityGroups in model AdaptiveNetworkHardeningEnforceRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AdaptiveNetworkHardeningEnforceRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("networkSecurityGroups", this.networkSecurityGroups,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdaptiveNetworkHardeningEnforceRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdaptiveNetworkHardeningEnforceRequest if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AdaptiveNetworkHardeningEnforceRequest.
     */
    public static AdaptiveNetworkHardeningEnforceRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdaptiveNetworkHardeningEnforceRequest deserializedAdaptiveNetworkHardeningEnforceRequest
                = new AdaptiveNetworkHardeningEnforceRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rules".equals(fieldName)) {
                    List<Rule> rules = reader.readArray(reader1 -> Rule.fromJson(reader1));
                    deserializedAdaptiveNetworkHardeningEnforceRequest.rules = rules;
                } else if ("networkSecurityGroups".equals(fieldName)) {
                    List<String> networkSecurityGroups = reader.readArray(reader1 -> reader1.getString());
                    deserializedAdaptiveNetworkHardeningEnforceRequest.networkSecurityGroups = networkSecurityGroups;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdaptiveNetworkHardeningEnforceRequest;
        });
    }
}
