// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.security.models.ApplicationMappingRuleMetadata;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes properties of the application. */
@Fluent
public final class ApplicationMappingRuleProperties {
    /*
     * The tenant Id associated with the application mapping rule (GUID)
     */
    @JsonProperty(value = "tenantId")
    private String tenantId;

    /*
     * The application mapping rule display name
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * The application mapping rule description
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The mapping tag key list
     */
    @JsonProperty(value = "mappingTagKeys")
    private List<String> mappingTagKeys;

    /*
     * The included mapping tag values,for an empty array - all the values should create applications
     */
    @JsonProperty(value = "includedMappingTagValues")
    private List<String> includedMappingTagValues;

    /*
     * The application mapping rule deployment environment tag
     */
    @JsonProperty(value = "deploymentEnvironment")
    private String deploymentEnvironment;

    /*
     * Excluded Scopes, filter out the descendants of the scope
     */
    @JsonProperty(value = "excludedScopes")
    private List<String> excludedScopes;

    /*
     * Defines whether the rule is management scope rule (management connector as a single scope or management scope)
     */
    @JsonProperty(value = "includeMemberScopes")
    private Boolean includeMemberScopes;

    /*
     * The applications mapping rule metadata
     */
    @JsonProperty(value = "metadata")
    private ApplicationMappingRuleMetadata metadata;

    /** Creates an instance of ApplicationMappingRuleProperties class. */
    public ApplicationMappingRuleProperties() {
    }

    /**
     * Get the tenantId property: The tenant Id associated with the application mapping rule (GUID).
     *
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenant Id associated with the application mapping rule (GUID).
     *
     * @param tenantId the tenantId value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the displayName property: The application mapping rule display name.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The application mapping rule display name.
     *
     * @param displayName the displayName value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The application mapping rule description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The application mapping rule description.
     *
     * @param description the description value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the mappingTagKeys property: The mapping tag key list.
     *
     * @return the mappingTagKeys value.
     */
    public List<String> mappingTagKeys() {
        return this.mappingTagKeys;
    }

    /**
     * Set the mappingTagKeys property: The mapping tag key list.
     *
     * @param mappingTagKeys the mappingTagKeys value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withMappingTagKeys(List<String> mappingTagKeys) {
        this.mappingTagKeys = mappingTagKeys;
        return this;
    }

    /**
     * Get the includedMappingTagValues property: The included mapping tag values,for an empty array - all the values
     * should create applications.
     *
     * @return the includedMappingTagValues value.
     */
    public List<String> includedMappingTagValues() {
        return this.includedMappingTagValues;
    }

    /**
     * Set the includedMappingTagValues property: The included mapping tag values,for an empty array - all the values
     * should create applications.
     *
     * @param includedMappingTagValues the includedMappingTagValues value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withIncludedMappingTagValues(List<String> includedMappingTagValues) {
        this.includedMappingTagValues = includedMappingTagValues;
        return this;
    }

    /**
     * Get the deploymentEnvironment property: The application mapping rule deployment environment tag.
     *
     * @return the deploymentEnvironment value.
     */
    public String deploymentEnvironment() {
        return this.deploymentEnvironment;
    }

    /**
     * Set the deploymentEnvironment property: The application mapping rule deployment environment tag.
     *
     * @param deploymentEnvironment the deploymentEnvironment value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withDeploymentEnvironment(String deploymentEnvironment) {
        this.deploymentEnvironment = deploymentEnvironment;
        return this;
    }

    /**
     * Get the excludedScopes property: Excluded Scopes, filter out the descendants of the scope.
     *
     * @return the excludedScopes value.
     */
    public List<String> excludedScopes() {
        return this.excludedScopes;
    }

    /**
     * Set the excludedScopes property: Excluded Scopes, filter out the descendants of the scope.
     *
     * @param excludedScopes the excludedScopes value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withExcludedScopes(List<String> excludedScopes) {
        this.excludedScopes = excludedScopes;
        return this;
    }

    /**
     * Get the includeMemberScopes property: Defines whether the rule is management scope rule (management connector as
     * a single scope or management scope).
     *
     * @return the includeMemberScopes value.
     */
    public Boolean includeMemberScopes() {
        return this.includeMemberScopes;
    }

    /**
     * Set the includeMemberScopes property: Defines whether the rule is management scope rule (management connector as
     * a single scope or management scope).
     *
     * @param includeMemberScopes the includeMemberScopes value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withIncludeMemberScopes(Boolean includeMemberScopes) {
        this.includeMemberScopes = includeMemberScopes;
        return this;
    }

    /**
     * Get the metadata property: The applications mapping rule metadata.
     *
     * @return the metadata value.
     */
    public ApplicationMappingRuleMetadata metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The applications mapping rule metadata.
     *
     * @param metadata the metadata value to set.
     * @return the ApplicationMappingRuleProperties object itself.
     */
    public ApplicationMappingRuleProperties withMetadata(ApplicationMappingRuleMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
    }
}
