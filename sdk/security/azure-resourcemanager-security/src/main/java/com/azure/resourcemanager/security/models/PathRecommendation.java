// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents a path that is recommended to be allowed and its properties.
 */
@Fluent
public final class PathRecommendation implements JsonSerializable<PathRecommendation> {
    /*
     * The full path of the file, or an identifier of the application
     */
    private String path;

    /*
     * The recommendation action of the machine or rule
     */
    private RecommendationAction action;

    /*
     * The type of IoT Security recommendation.
     */
    private RecommendationType type;

    /*
     * Represents the publisher information of a process/rule
     */
    private PublisherInfo publisherInfo;

    /*
     * Whether the application is commonly run on the machine
     */
    private Boolean common;

    /*
     * The userSids property.
     */
    private List<String> userSids;

    /*
     * The usernames property.
     */
    private List<UserRecommendation> usernames;

    /*
     * The type of the file (for Linux files - Executable is used)
     */
    private FileType fileType;

    /*
     * The configuration status of the machines group or machine or rule
     */
    private ConfigurationStatus configurationStatus;

    /**
     * Creates an instance of PathRecommendation class.
     */
    public PathRecommendation() {
    }

    /**
     * Get the path property: The full path of the file, or an identifier of the application.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: The full path of the file, or an identifier of the application.
     * 
     * @param path the path value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the action property: The recommendation action of the machine or rule.
     * 
     * @return the action value.
     */
    public RecommendationAction action() {
        return this.action;
    }

    /**
     * Set the action property: The recommendation action of the machine or rule.
     * 
     * @param action the action value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withAction(RecommendationAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the type property: The type of IoT Security recommendation.
     * 
     * @return the type value.
     */
    public RecommendationType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of IoT Security recommendation.
     * 
     * @param type the type value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withType(RecommendationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the publisherInfo property: Represents the publisher information of a process/rule.
     * 
     * @return the publisherInfo value.
     */
    public PublisherInfo publisherInfo() {
        return this.publisherInfo;
    }

    /**
     * Set the publisherInfo property: Represents the publisher information of a process/rule.
     * 
     * @param publisherInfo the publisherInfo value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withPublisherInfo(PublisherInfo publisherInfo) {
        this.publisherInfo = publisherInfo;
        return this;
    }

    /**
     * Get the common property: Whether the application is commonly run on the machine.
     * 
     * @return the common value.
     */
    public Boolean common() {
        return this.common;
    }

    /**
     * Set the common property: Whether the application is commonly run on the machine.
     * 
     * @param common the common value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withCommon(Boolean common) {
        this.common = common;
        return this;
    }

    /**
     * Get the userSids property: The userSids property.
     * 
     * @return the userSids value.
     */
    public List<String> userSids() {
        return this.userSids;
    }

    /**
     * Set the userSids property: The userSids property.
     * 
     * @param userSids the userSids value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withUserSids(List<String> userSids) {
        this.userSids = userSids;
        return this;
    }

    /**
     * Get the usernames property: The usernames property.
     * 
     * @return the usernames value.
     */
    public List<UserRecommendation> usernames() {
        return this.usernames;
    }

    /**
     * Set the usernames property: The usernames property.
     * 
     * @param usernames the usernames value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withUsernames(List<UserRecommendation> usernames) {
        this.usernames = usernames;
        return this;
    }

    /**
     * Get the fileType property: The type of the file (for Linux files - Executable is used).
     * 
     * @return the fileType value.
     */
    public FileType fileType() {
        return this.fileType;
    }

    /**
     * Set the fileType property: The type of the file (for Linux files - Executable is used).
     * 
     * @param fileType the fileType value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withFileType(FileType fileType) {
        this.fileType = fileType;
        return this;
    }

    /**
     * Get the configurationStatus property: The configuration status of the machines group or machine or rule.
     * 
     * @return the configurationStatus value.
     */
    public ConfigurationStatus configurationStatus() {
        return this.configurationStatus;
    }

    /**
     * Set the configurationStatus property: The configuration status of the machines group or machine or rule.
     * 
     * @param configurationStatus the configurationStatus value to set.
     * @return the PathRecommendation object itself.
     */
    public PathRecommendation withConfigurationStatus(ConfigurationStatus configurationStatus) {
        this.configurationStatus = configurationStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisherInfo() != null) {
            publisherInfo().validate();
        }
        if (usernames() != null) {
            usernames().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeStringField("action", this.action == null ? null : this.action.toString());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("publisherInfo", this.publisherInfo);
        jsonWriter.writeBooleanField("common", this.common);
        jsonWriter.writeArrayField("userSids", this.userSids, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("usernames", this.usernames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("fileType", this.fileType == null ? null : this.fileType.toString());
        jsonWriter.writeStringField("configurationStatus",
            this.configurationStatus == null ? null : this.configurationStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PathRecommendation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PathRecommendation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PathRecommendation.
     */
    public static PathRecommendation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PathRecommendation deserializedPathRecommendation = new PathRecommendation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedPathRecommendation.path = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedPathRecommendation.action = RecommendationAction.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedPathRecommendation.type = RecommendationType.fromString(reader.getString());
                } else if ("publisherInfo".equals(fieldName)) {
                    deserializedPathRecommendation.publisherInfo = PublisherInfo.fromJson(reader);
                } else if ("common".equals(fieldName)) {
                    deserializedPathRecommendation.common = reader.getNullable(JsonReader::getBoolean);
                } else if ("userSids".equals(fieldName)) {
                    List<String> userSids = reader.readArray(reader1 -> reader1.getString());
                    deserializedPathRecommendation.userSids = userSids;
                } else if ("usernames".equals(fieldName)) {
                    List<UserRecommendation> usernames
                        = reader.readArray(reader1 -> UserRecommendation.fromJson(reader1));
                    deserializedPathRecommendation.usernames = usernames;
                } else if ("fileType".equals(fieldName)) {
                    deserializedPathRecommendation.fileType = FileType.fromString(reader.getString());
                } else if ("configurationStatus".equals(fieldName)) {
                    deserializedPathRecommendation.configurationStatus
                        = ConfigurationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPathRecommendation;
        });
    }
}
