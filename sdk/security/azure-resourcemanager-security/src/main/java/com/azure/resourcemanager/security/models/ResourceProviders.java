// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ResourceProviders. */
public interface ResourceProviders {
    /**
     * Updates data sensitivity settings for sensitive data discovery.
     *
     * @param sensitivitySettings The data sensitivity settings to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data sensitivity settings for sensitive data discovery along with {@link Response}.
     */
    Response<GetSensitivitySettingsResponse> updateSensitivitySettingsWithResponse(
        UpdateSensitivitySettingsRequest sensitivitySettings, Context context);

    /**
     * Updates data sensitivity settings for sensitive data discovery.
     *
     * @param sensitivitySettings The data sensitivity settings to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data sensitivity settings for sensitive data discovery.
     */
    GetSensitivitySettingsResponse updateSensitivitySettings(UpdateSensitivitySettingsRequest sensitivitySettings);

    /**
     * Gets data sensitivity settings for sensitive data discovery.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data sensitivity settings for sensitive data discovery along with {@link Response}.
     */
    Response<GetSensitivitySettingsResponse> getSensitivitySettingsWithResponse(Context context);

    /**
     * Gets data sensitivity settings for sensitive data discovery.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data sensitivity settings for sensitive data discovery.
     */
    GetSensitivitySettingsResponse getSensitivitySettings();

    /**
     * Run pre-defined aggregation query against Microsoft.Security data types for scopes specified in the request.
     *
     * @param aggregations Request specifying Aggregation type and scopes.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aggregation query result along with {@link Response}.
     */
    Response<AggregationResponse> aggregationsWithResponse(AggregationRequest aggregations, Context context);

    /**
     * Run pre-defined aggregation query against Microsoft.Security data types for scopes specified in the request.
     *
     * @param aggregations Request specifying Aggregation type and scopes.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aggregation query result.
     */
    AggregationResponse aggregations(AggregationRequest aggregations);
}
