// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Schema for operation parameters.
 */
@Fluent
public final class ParametersSchema implements JsonSerializable<ParametersSchema> {
    /*
     * The list of scopes for which the data is requested
     */
    private List<String> scopes;

    /*
     * The name of the scenario for which the data is requested
     */
    private String scenarioName;

    /*
     * The parameters for the specified scenario and view
     */
    private Object scenarioParameters;

    /**
     * Creates an instance of ParametersSchema class.
     */
    public ParametersSchema() {
    }

    /**
     * Get the scopes property: The list of scopes for which the data is requested.
     * 
     * @return the scopes value.
     */
    public List<String> scopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: The list of scopes for which the data is requested.
     * 
     * @param scopes the scopes value to set.
     * @return the ParametersSchema object itself.
     */
    public ParametersSchema withScopes(List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Get the scenarioName property: The name of the scenario for which the data is requested.
     * 
     * @return the scenarioName value.
     */
    public String scenarioName() {
        return this.scenarioName;
    }

    /**
     * Set the scenarioName property: The name of the scenario for which the data is requested.
     * 
     * @param scenarioName the scenarioName value to set.
     * @return the ParametersSchema object itself.
     */
    public ParametersSchema withScenarioName(String scenarioName) {
        this.scenarioName = scenarioName;
        return this;
    }

    /**
     * Get the scenarioParameters property: The parameters for the specified scenario and view.
     * 
     * @return the scenarioParameters value.
     */
    public Object scenarioParameters() {
        return this.scenarioParameters;
    }

    /**
     * Set the scenarioParameters property: The parameters for the specified scenario and view.
     * 
     * @param scenarioParameters the scenarioParameters value to set.
     * @return the ParametersSchema object itself.
     */
    public ParametersSchema withScenarioParameters(Object scenarioParameters) {
        this.scenarioParameters = scenarioParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scopes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property scopes in model ParametersSchema"));
        }
        if (scenarioName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property scenarioName in model ParametersSchema"));
        }
        if (scenarioParameters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scenarioParameters in model ParametersSchema"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ParametersSchema.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scopes", this.scopes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("scenarioName", this.scenarioName);
        jsonWriter.writeUntypedField("scenarioParameters", this.scenarioParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParametersSchema from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParametersSchema if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ParametersSchema.
     */
    public static ParametersSchema fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParametersSchema deserializedParametersSchema = new ParametersSchema();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedParametersSchema.scopes = scopes;
                } else if ("scenarioName".equals(fieldName)) {
                    deserializedParametersSchema.scenarioName = reader.getString();
                } else if ("scenarioParameters".equals(fieldName)) {
                    deserializedParametersSchema.scenarioParameters = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParametersSchema;
        });
    }
}
