// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Optional. Determine which blobs get scanned by On Upload malware scanning. An Or operation is performed between each
 * filter type.
 */
@Fluent
public final class OnUploadFilters implements JsonSerializable<OnUploadFilters> {
    /*
     * Optional. A list of prefixes to exclude from on-upload malware scanning.
     * Format: `container-name/blob-name` (start with the container name; do not include the storage account name).
     * Exclude entire containers: Use prefix of container names you want to exclude without a trailing `/`.
     * Exclude a single container: Add a trailing slash `/` after the container name to avoid excluding other containers
     * with similar prefixes.
     */
    private List<String> excludeBlobsWithPrefix;

    /*
     * Optional. A list of suffixes to exclude from on-upload malware scanning. Suffixes match only the end of blob
     * names, and should be used for file extensions or blob name endings only.
     */
    private List<String> excludeBlobsWithSuffix;

    /*
     * Optional. Specifies the maximum size in bytes for blobs to be scanned. This parameter accepts a single positive
     * integer value. Blobs larger than this value will be excluded from scanning.
     */
    private Object excludeBlobsLargerThan;

    /**
     * Creates an instance of OnUploadFilters class.
     */
    public OnUploadFilters() {
    }

    /**
     * Get the excludeBlobsWithPrefix property: Optional. A list of prefixes to exclude from on-upload malware scanning.
     * Format: `container-name/blob-name` (start with the container name; do not include the storage account name).
     * Exclude entire containers: Use prefix of container names you want to exclude without a trailing `/`.
     * Exclude a single container: Add a trailing slash `/` after the container name to avoid excluding other containers
     * with similar prefixes.
     * 
     * @return the excludeBlobsWithPrefix value.
     */
    public List<String> excludeBlobsWithPrefix() {
        return this.excludeBlobsWithPrefix;
    }

    /**
     * Set the excludeBlobsWithPrefix property: Optional. A list of prefixes to exclude from on-upload malware scanning.
     * Format: `container-name/blob-name` (start with the container name; do not include the storage account name).
     * Exclude entire containers: Use prefix of container names you want to exclude without a trailing `/`.
     * Exclude a single container: Add a trailing slash `/` after the container name to avoid excluding other containers
     * with similar prefixes.
     * 
     * @param excludeBlobsWithPrefix the excludeBlobsWithPrefix value to set.
     * @return the OnUploadFilters object itself.
     */
    public OnUploadFilters withExcludeBlobsWithPrefix(List<String> excludeBlobsWithPrefix) {
        this.excludeBlobsWithPrefix = excludeBlobsWithPrefix;
        return this;
    }

    /**
     * Get the excludeBlobsWithSuffix property: Optional. A list of suffixes to exclude from on-upload malware scanning.
     * Suffixes match only the end of blob names, and should be used for file extensions or blob name endings only.
     * 
     * @return the excludeBlobsWithSuffix value.
     */
    public List<String> excludeBlobsWithSuffix() {
        return this.excludeBlobsWithSuffix;
    }

    /**
     * Set the excludeBlobsWithSuffix property: Optional. A list of suffixes to exclude from on-upload malware scanning.
     * Suffixes match only the end of blob names, and should be used for file extensions or blob name endings only.
     * 
     * @param excludeBlobsWithSuffix the excludeBlobsWithSuffix value to set.
     * @return the OnUploadFilters object itself.
     */
    public OnUploadFilters withExcludeBlobsWithSuffix(List<String> excludeBlobsWithSuffix) {
        this.excludeBlobsWithSuffix = excludeBlobsWithSuffix;
        return this;
    }

    /**
     * Get the excludeBlobsLargerThan property: Optional. Specifies the maximum size in bytes for blobs to be scanned.
     * This parameter accepts a single positive integer value. Blobs larger than this value will be excluded from
     * scanning.
     * 
     * @return the excludeBlobsLargerThan value.
     */
    public Object excludeBlobsLargerThan() {
        return this.excludeBlobsLargerThan;
    }

    /**
     * Set the excludeBlobsLargerThan property: Optional. Specifies the maximum size in bytes for blobs to be scanned.
     * This parameter accepts a single positive integer value. Blobs larger than this value will be excluded from
     * scanning.
     * 
     * @param excludeBlobsLargerThan the excludeBlobsLargerThan value to set.
     * @return the OnUploadFilters object itself.
     */
    public OnUploadFilters withExcludeBlobsLargerThan(Object excludeBlobsLargerThan) {
        this.excludeBlobsLargerThan = excludeBlobsLargerThan;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("excludeBlobsWithPrefix", this.excludeBlobsWithPrefix,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludeBlobsWithSuffix", this.excludeBlobsWithSuffix,
            (writer, element) -> writer.writeString(element));
        if (this.excludeBlobsLargerThan != null) {
            jsonWriter.writeUntypedField("excludeBlobsLargerThan", this.excludeBlobsLargerThan);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnUploadFilters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnUploadFilters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnUploadFilters.
     */
    public static OnUploadFilters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnUploadFilters deserializedOnUploadFilters = new OnUploadFilters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("excludeBlobsWithPrefix".equals(fieldName)) {
                    List<String> excludeBlobsWithPrefix = reader.readArray(reader1 -> reader1.getString());
                    deserializedOnUploadFilters.excludeBlobsWithPrefix = excludeBlobsWithPrefix;
                } else if ("excludeBlobsWithSuffix".equals(fieldName)) {
                    List<String> excludeBlobsWithSuffix = reader.readArray(reader1 -> reader1.getString());
                    deserializedOnUploadFilters.excludeBlobsWithSuffix = excludeBlobsWithSuffix;
                } else if ("excludeBlobsLargerThan".equals(fieldName)) {
                    deserializedOnUploadFilters.excludeBlobsLargerThan = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnUploadFilters;
        });
    }
}
