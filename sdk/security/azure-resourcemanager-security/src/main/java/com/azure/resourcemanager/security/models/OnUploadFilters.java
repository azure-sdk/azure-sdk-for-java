// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The OnUploadFilters model.
 */
@Fluent
public final class OnUploadFilters implements JsonSerializable<OnUploadFilters> {
    /*
     * Exclude each blob that begins with ANY OF the given prefixes from On Upload malware scanning.
     */
    private List<String> excludeBlobsBeginningWith;

    /*
     * Exclude each blob that begins with ANY OF the given suffixes from On Upload malware scanning.
     */
    private List<String> excludeBlobsEndingWith;

    /*
     * Exclude each blob larger than the given value in bytes from On Upload malware scanning.
     */
    private Integer excludeBlobsLargerThan;

    /**
     * Creates an instance of OnUploadFilters class.
     */
    public OnUploadFilters() {
    }

    /**
     * Get the excludeBlobsBeginningWith property: Exclude each blob that begins with ANY OF the given prefixes from On
     * Upload malware scanning.
     * 
     * @return the excludeBlobsBeginningWith value.
     */
    public List<String> excludeBlobsBeginningWith() {
        return this.excludeBlobsBeginningWith;
    }

    /**
     * Set the excludeBlobsBeginningWith property: Exclude each blob that begins with ANY OF the given prefixes from On
     * Upload malware scanning.
     * 
     * @param excludeBlobsBeginningWith the excludeBlobsBeginningWith value to set.
     * @return the OnUploadFilters object itself.
     */
    public OnUploadFilters withExcludeBlobsBeginningWith(List<String> excludeBlobsBeginningWith) {
        this.excludeBlobsBeginningWith = excludeBlobsBeginningWith;
        return this;
    }

    /**
     * Get the excludeBlobsEndingWith property: Exclude each blob that begins with ANY OF the given suffixes from On
     * Upload malware scanning.
     * 
     * @return the excludeBlobsEndingWith value.
     */
    public List<String> excludeBlobsEndingWith() {
        return this.excludeBlobsEndingWith;
    }

    /**
     * Set the excludeBlobsEndingWith property: Exclude each blob that begins with ANY OF the given suffixes from On
     * Upload malware scanning.
     * 
     * @param excludeBlobsEndingWith the excludeBlobsEndingWith value to set.
     * @return the OnUploadFilters object itself.
     */
    public OnUploadFilters withExcludeBlobsEndingWith(List<String> excludeBlobsEndingWith) {
        this.excludeBlobsEndingWith = excludeBlobsEndingWith;
        return this;
    }

    /**
     * Get the excludeBlobsLargerThan property: Exclude each blob larger than the given value in bytes from On Upload
     * malware scanning.
     * 
     * @return the excludeBlobsLargerThan value.
     */
    public Integer excludeBlobsLargerThan() {
        return this.excludeBlobsLargerThan;
    }

    /**
     * Set the excludeBlobsLargerThan property: Exclude each blob larger than the given value in bytes from On Upload
     * malware scanning.
     * 
     * @param excludeBlobsLargerThan the excludeBlobsLargerThan value to set.
     * @return the OnUploadFilters object itself.
     */
    public OnUploadFilters withExcludeBlobsLargerThan(Integer excludeBlobsLargerThan) {
        this.excludeBlobsLargerThan = excludeBlobsLargerThan;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("excludeBlobsBeginningWith", this.excludeBlobsBeginningWith,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludeBlobsEndingWith", this.excludeBlobsEndingWith,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("excludeBlobsLargerThan", this.excludeBlobsLargerThan);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnUploadFilters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnUploadFilters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnUploadFilters.
     */
    public static OnUploadFilters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnUploadFilters deserializedOnUploadFilters = new OnUploadFilters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("excludeBlobsBeginningWith".equals(fieldName)) {
                    List<String> excludeBlobsBeginningWith = reader.readArray(reader1 -> reader1.getString());
                    deserializedOnUploadFilters.excludeBlobsBeginningWith = excludeBlobsBeginningWith;
                } else if ("excludeBlobsEndingWith".equals(fieldName)) {
                    List<String> excludeBlobsEndingWith = reader.readArray(reader1 -> reader1.getString());
                    deserializedOnUploadFilters.excludeBlobsEndingWith = excludeBlobsEndingWith;
                } else if ("excludeBlobsLargerThan".equals(fieldName)) {
                    deserializedOnUploadFilters.excludeBlobsLargerThan = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnUploadFilters;
        });
    }
}
