// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.security.fluent.ManagementGroupGovernanceRulesOperationsClient;
import com.azure.resourcemanager.security.fluent.models.GovernanceRuleInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ManagementGroupGovernanceRulesOperationsClient.
 */
public final class ManagementGroupGovernanceRulesOperationsClientImpl
    implements ManagementGroupGovernanceRulesOperationsClient {
    /** The proxy service used to perform REST calls. */
    private final ManagementGroupGovernanceRulesOperationsService service;

    /** The service client containing this operation class. */
    private final SecurityCenterImpl client;

    /**
     * Initializes an instance of ManagementGroupGovernanceRulesOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ManagementGroupGovernanceRulesOperationsClientImpl(SecurityCenterImpl client) {
        this.service =
            RestProxy
                .create(
                    ManagementGroupGovernanceRulesOperationsService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SecurityCenterManagementGroupGovernanceRulesOperations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SecurityCenterManage")
    public interface ManagementGroupGovernanceRulesOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security"
                + "/governanceRules/{ruleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GovernanceRuleInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("ruleId") String ruleId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security"
                + "/governanceRules/{ruleId}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GovernanceRuleInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("ruleId") String ruleId,
            @BodyParam("application/json") GovernanceRuleInner governanceRule,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Security"
                + "/governanceRules/{ruleId}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("ruleId") String ruleId,
            Context context);
    }

    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceRuleInner>> getWithResponseAsync(String managementGroupId, String ruleId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.get(this.client.getEndpoint(), apiVersion, managementGroupId, ruleId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceRuleInner>> getWithResponseAsync(
        String managementGroupId, String ruleId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), apiVersion, managementGroupId, ruleId, accept, context);
    }

    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GovernanceRuleInner> getAsync(String managementGroupId, String ruleId) {
        return getWithResponseAsync(managementGroupId, ruleId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GovernanceRuleInner> getWithResponse(String managementGroupId, String ruleId, Context context) {
        return getWithResponseAsync(managementGroupId, ruleId, context).block();
    }

    /**
     * Get a specific governance rule for the requested scope by ruleId.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific governance rule for the requested scope by ruleId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GovernanceRuleInner get(String managementGroupId, String ruleId) {
        return getWithResponse(managementGroupId, ruleId, Context.NONE).getValue();
    }

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceRuleInner>> createOrUpdateWithResponseAsync(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (governanceRule == null) {
            return Mono.error(new IllegalArgumentException("Parameter governanceRule is required and cannot be null."));
        } else {
            governanceRule.validate();
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            apiVersion,
                            managementGroupId,
                            ruleId,
                            governanceRule,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GovernanceRuleInner>> createOrUpdateWithResponseAsync(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (governanceRule == null) {
            return Mono.error(new IllegalArgumentException("Parameter governanceRule is required and cannot be null."));
        } else {
            governanceRule.validate();
        }
        final String apiVersion = "2022-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(), apiVersion, managementGroupId, ruleId, governanceRule, accept, context);
    }

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GovernanceRuleInner> createOrUpdateAsync(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule) {
        return createOrUpdateWithResponseAsync(managementGroupId, ruleId, governanceRule)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GovernanceRuleInner> createOrUpdateWithResponse(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule, Context context) {
        return createOrUpdateWithResponseAsync(managementGroupId, ruleId, governanceRule, context).block();
    }

    /**
     * Creates or updates governance rule on the given management group.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param governanceRule Governance rule over a given scope.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return governance rule over a given scope.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GovernanceRuleInner createOrUpdate(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule) {
        return createOrUpdateWithResponse(managementGroupId, ruleId, governanceRule, Context.NONE).getValue();
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String managementGroupId, String ruleId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        return FluxUtil
            .withContext(
                context -> service.delete(this.client.getEndpoint(), apiVersion, managementGroupId, ruleId, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String managementGroupId, String ruleId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        final String apiVersion = "2022-01-01-preview";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), apiVersion, managementGroupId, ruleId, context);
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String managementGroupId, String ruleId) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(managementGroupId, ruleId);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String managementGroupId, String ruleId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(managementGroupId, ruleId, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String ruleId) {
        return beginDeleteAsync(managementGroupId, ruleId).getSyncPoller();
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String ruleId, Context context) {
        return beginDeleteAsync(managementGroupId, ruleId, context).getSyncPoller();
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String ruleId) {
        return beginDeleteAsync(managementGroupId, ruleId).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String ruleId, Context context) {
        return beginDeleteAsync(managementGroupId, ruleId, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String ruleId) {
        deleteAsync(managementGroupId, ruleId).block();
    }

    /**
     * Delete a Governance rule over a given scope.
     *
     * @param managementGroupId Azure Management Group ID.
     * @param ruleId The governance rule key - unique key for the standard governance rule (GUID).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String ruleId, Context context) {
        deleteAsync(managementGroupId, ruleId, context).block();
    }
}
