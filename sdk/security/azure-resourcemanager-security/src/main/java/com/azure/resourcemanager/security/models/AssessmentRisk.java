// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The risk properties of the assessment.
 */
@Fluent
public final class AssessmentRisk {
    /*
     * The level of the risk
     */
    @JsonProperty(value = "level")
    private AssessmentRiskLevel level;

    /*
     * List of Attack Path IDs that effect the risk for this assessment
     */
    @JsonProperty(value = "attackPathsReferences")
    private List<String> attackPathsReferences;

    /*
     * List of risk factors that were considered for calculating the risk
     */
    @JsonProperty(value = "riskFactors")
    private List<String> riskFactors;

    /*
     * List of paths that were considered for calculating the risk
     */
    @JsonProperty(value = "paths")
    private List<AssessmentRiskPath> paths;

    /**
     * Creates an instance of AssessmentRisk class.
     */
    public AssessmentRisk() {
    }

    /**
     * Get the level property: The level of the risk.
     * 
     * @return the level value.
     */
    public AssessmentRiskLevel level() {
        return this.level;
    }

    /**
     * Set the level property: The level of the risk.
     * 
     * @param level the level value to set.
     * @return the AssessmentRisk object itself.
     */
    public AssessmentRisk withLevel(AssessmentRiskLevel level) {
        this.level = level;
        return this;
    }

    /**
     * Get the attackPathsReferences property: List of Attack Path IDs that effect the risk for this assessment.
     * 
     * @return the attackPathsReferences value.
     */
    public List<String> attackPathsReferences() {
        return this.attackPathsReferences;
    }

    /**
     * Set the attackPathsReferences property: List of Attack Path IDs that effect the risk for this assessment.
     * 
     * @param attackPathsReferences the attackPathsReferences value to set.
     * @return the AssessmentRisk object itself.
     */
    public AssessmentRisk withAttackPathsReferences(List<String> attackPathsReferences) {
        this.attackPathsReferences = attackPathsReferences;
        return this;
    }

    /**
     * Get the riskFactors property: List of risk factors that were considered for calculating the risk.
     * 
     * @return the riskFactors value.
     */
    public List<String> riskFactors() {
        return this.riskFactors;
    }

    /**
     * Set the riskFactors property: List of risk factors that were considered for calculating the risk.
     * 
     * @param riskFactors the riskFactors value to set.
     * @return the AssessmentRisk object itself.
     */
    public AssessmentRisk withRiskFactors(List<String> riskFactors) {
        this.riskFactors = riskFactors;
        return this;
    }

    /**
     * Get the paths property: List of paths that were considered for calculating the risk.
     * 
     * @return the paths value.
     */
    public List<AssessmentRiskPath> paths() {
        return this.paths;
    }

    /**
     * Set the paths property: List of paths that were considered for calculating the risk.
     * 
     * @param paths the paths value to set.
     * @return the AssessmentRisk object itself.
     */
    public AssessmentRisk withPaths(List<AssessmentRiskPath> paths) {
        this.paths = paths;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (paths() != null) {
            paths().forEach(e -> e.validate());
        }
    }
}
