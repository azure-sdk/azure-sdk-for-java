// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.fluent.ManagementGroupGovernanceRulesOperationsClient;
import com.azure.resourcemanager.security.fluent.models.GovernanceRuleInner;
import com.azure.resourcemanager.security.models.GovernanceRule;
import com.azure.resourcemanager.security.models.ManagementGroupGovernanceRulesOperations;

public final class ManagementGroupGovernanceRulesOperationsImpl implements ManagementGroupGovernanceRulesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ManagementGroupGovernanceRulesOperationsImpl.class);

    private final ManagementGroupGovernanceRulesOperationsClient innerClient;

    private final com.azure.resourcemanager.security.SecurityManager serviceManager;

    public ManagementGroupGovernanceRulesOperationsImpl(
        ManagementGroupGovernanceRulesOperationsClient innerClient,
        com.azure.resourcemanager.security.SecurityManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GovernanceRule> getWithResponse(String managementGroupId, String ruleId, Context context) {
        Response<GovernanceRuleInner> inner = this.serviceClient().getWithResponse(managementGroupId, ruleId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GovernanceRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GovernanceRule get(String managementGroupId, String ruleId) {
        GovernanceRuleInner inner = this.serviceClient().get(managementGroupId, ruleId);
        if (inner != null) {
            return new GovernanceRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GovernanceRule> createOrUpdateWithResponse(
        String managementGroupId, String ruleId, GovernanceRuleInner governanceRule, Context context) {
        Response<GovernanceRuleInner> inner =
            this.serviceClient().createOrUpdateWithResponse(managementGroupId, ruleId, governanceRule, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GovernanceRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GovernanceRule createOrUpdate(String managementGroupId, String ruleId, GovernanceRuleInner governanceRule) {
        GovernanceRuleInner inner = this.serviceClient().createOrUpdate(managementGroupId, ruleId, governanceRule);
        if (inner != null) {
            return new GovernanceRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String managementGroupId, String ruleId) {
        this.serviceClient().delete(managementGroupId, ruleId);
    }

    public void delete(String managementGroupId, String ruleId, Context context) {
        this.serviceClient().delete(managementGroupId, ruleId, context);
    }

    private ManagementGroupGovernanceRulesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.security.SecurityManager manager() {
        return this.serviceManager;
    }
}
