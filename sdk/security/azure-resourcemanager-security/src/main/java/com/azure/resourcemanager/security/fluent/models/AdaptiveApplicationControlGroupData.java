// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.security.models.AdaptiveApplicationControlIssueSummary;
import com.azure.resourcemanager.security.models.ConfigurationStatus;
import com.azure.resourcemanager.security.models.EnforcementMode;
import com.azure.resourcemanager.security.models.PathRecommendation;
import com.azure.resourcemanager.security.models.ProtectionMode;
import com.azure.resourcemanager.security.models.RecommendationStatus;
import com.azure.resourcemanager.security.models.SourceSystem;
import com.azure.resourcemanager.security.models.VmRecommendation;
import java.io.IOException;
import java.util.List;

/**
 * Represents a machines group and set of rules to be allowed running on a machine.
 */
@Fluent
public final class AdaptiveApplicationControlGroupData
    implements JsonSerializable<AdaptiveApplicationControlGroupData> {
    /*
     * The application control policy enforcement/protection mode of the machine group
     */
    private EnforcementMode enforcementMode;

    /*
     * The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for
     * Linux.
     */
    private ProtectionMode protectionMode;

    /*
     * The configuration status of the machines group or machine or rule
     */
    private ConfigurationStatus configurationStatus;

    /*
     * The initial recommendation status of the machine group or machine
     */
    private RecommendationStatus recommendationStatus;

    /*
     * The issues property.
     */
    private List<AdaptiveApplicationControlIssueSummary> issues;

    /*
     * The source type of the machine group
     */
    private SourceSystem sourceSystem;

    /*
     * The vmRecommendations property.
     */
    private List<VmRecommendation> vmRecommendations;

    /*
     * The pathRecommendations property.
     */
    private List<PathRecommendation> pathRecommendations;

    /**
     * Creates an instance of AdaptiveApplicationControlGroupData class.
     */
    public AdaptiveApplicationControlGroupData() {
    }

    /**
     * Get the enforcementMode property: The application control policy enforcement/protection mode of the machine
     * group.
     * 
     * @return the enforcementMode value.
     */
    public EnforcementMode enforcementMode() {
        return this.enforcementMode;
    }

    /**
     * Set the enforcementMode property: The application control policy enforcement/protection mode of the machine
     * group.
     * 
     * @param enforcementMode the enforcementMode value to set.
     * @return the AdaptiveApplicationControlGroupData object itself.
     */
    public AdaptiveApplicationControlGroupData withEnforcementMode(EnforcementMode enforcementMode) {
        this.enforcementMode = enforcementMode;
        return this;
    }

    /**
     * Get the protectionMode property: The protection mode of the collection/file types. Exe/Msi/Script are used for
     * Windows, Executable is used for Linux.
     * 
     * @return the protectionMode value.
     */
    public ProtectionMode protectionMode() {
        return this.protectionMode;
    }

    /**
     * Set the protectionMode property: The protection mode of the collection/file types. Exe/Msi/Script are used for
     * Windows, Executable is used for Linux.
     * 
     * @param protectionMode the protectionMode value to set.
     * @return the AdaptiveApplicationControlGroupData object itself.
     */
    public AdaptiveApplicationControlGroupData withProtectionMode(ProtectionMode protectionMode) {
        this.protectionMode = protectionMode;
        return this;
    }

    /**
     * Get the configurationStatus property: The configuration status of the machines group or machine or rule.
     * 
     * @return the configurationStatus value.
     */
    public ConfigurationStatus configurationStatus() {
        return this.configurationStatus;
    }

    /**
     * Get the recommendationStatus property: The initial recommendation status of the machine group or machine.
     * 
     * @return the recommendationStatus value.
     */
    public RecommendationStatus recommendationStatus() {
        return this.recommendationStatus;
    }

    /**
     * Get the issues property: The issues property.
     * 
     * @return the issues value.
     */
    public List<AdaptiveApplicationControlIssueSummary> issues() {
        return this.issues;
    }

    /**
     * Get the sourceSystem property: The source type of the machine group.
     * 
     * @return the sourceSystem value.
     */
    public SourceSystem sourceSystem() {
        return this.sourceSystem;
    }

    /**
     * Get the vmRecommendations property: The vmRecommendations property.
     * 
     * @return the vmRecommendations value.
     */
    public List<VmRecommendation> vmRecommendations() {
        return this.vmRecommendations;
    }

    /**
     * Set the vmRecommendations property: The vmRecommendations property.
     * 
     * @param vmRecommendations the vmRecommendations value to set.
     * @return the AdaptiveApplicationControlGroupData object itself.
     */
    public AdaptiveApplicationControlGroupData withVmRecommendations(List<VmRecommendation> vmRecommendations) {
        this.vmRecommendations = vmRecommendations;
        return this;
    }

    /**
     * Get the pathRecommendations property: The pathRecommendations property.
     * 
     * @return the pathRecommendations value.
     */
    public List<PathRecommendation> pathRecommendations() {
        return this.pathRecommendations;
    }

    /**
     * Set the pathRecommendations property: The pathRecommendations property.
     * 
     * @param pathRecommendations the pathRecommendations value to set.
     * @return the AdaptiveApplicationControlGroupData object itself.
     */
    public AdaptiveApplicationControlGroupData withPathRecommendations(List<PathRecommendation> pathRecommendations) {
        this.pathRecommendations = pathRecommendations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (protectionMode() != null) {
            protectionMode().validate();
        }
        if (issues() != null) {
            issues().forEach(e -> e.validate());
        }
        if (vmRecommendations() != null) {
            vmRecommendations().forEach(e -> e.validate());
        }
        if (pathRecommendations() != null) {
            pathRecommendations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enforcementMode",
            this.enforcementMode == null ? null : this.enforcementMode.toString());
        jsonWriter.writeJsonField("protectionMode", this.protectionMode);
        jsonWriter.writeArrayField("vmRecommendations", this.vmRecommendations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("pathRecommendations", this.pathRecommendations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdaptiveApplicationControlGroupData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdaptiveApplicationControlGroupData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdaptiveApplicationControlGroupData.
     */
    public static AdaptiveApplicationControlGroupData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdaptiveApplicationControlGroupData deserializedAdaptiveApplicationControlGroupData
                = new AdaptiveApplicationControlGroupData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enforcementMode".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupData.enforcementMode
                        = EnforcementMode.fromString(reader.getString());
                } else if ("protectionMode".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupData.protectionMode = ProtectionMode.fromJson(reader);
                } else if ("configurationStatus".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupData.configurationStatus
                        = ConfigurationStatus.fromString(reader.getString());
                } else if ("recommendationStatus".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupData.recommendationStatus
                        = RecommendationStatus.fromString(reader.getString());
                } else if ("issues".equals(fieldName)) {
                    List<AdaptiveApplicationControlIssueSummary> issues
                        = reader.readArray(reader1 -> AdaptiveApplicationControlIssueSummary.fromJson(reader1));
                    deserializedAdaptiveApplicationControlGroupData.issues = issues;
                } else if ("sourceSystem".equals(fieldName)) {
                    deserializedAdaptiveApplicationControlGroupData.sourceSystem
                        = SourceSystem.fromString(reader.getString());
                } else if ("vmRecommendations".equals(fieldName)) {
                    List<VmRecommendation> vmRecommendations
                        = reader.readArray(reader1 -> VmRecommendation.fromJson(reader1));
                    deserializedAdaptiveApplicationControlGroupData.vmRecommendations = vmRecommendations;
                } else if ("pathRecommendations".equals(fieldName)) {
                    List<PathRecommendation> pathRecommendations
                        = reader.readArray(reader1 -> PathRecommendation.fromJson(reader1));
                    deserializedAdaptiveApplicationControlGroupData.pathRecommendations = pathRecommendations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdaptiveApplicationControlGroupData;
        });
    }
}
