// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details about Agentless configuration.
 */
@Fluent
public final class AgentlessConfiguration implements JsonSerializable<AgentlessConfiguration> {
    /*
     * Agentless Enablement states.
     */
    private AgentlessEnablement agentlessEnabled;

    /*
     * AutoDiscovery states.
     */
    private AutoDiscovery agentlessAutoDiscovery;

    /*
     * Gets or sets the scanners for the connector.
     */
    private List<String> scanners;

    /*
     * Types for inventory list.
     */
    private InventoryListKind inventoryListType;

    /*
     * Gets or sets the inventory list for inclusion or exclusion from Agentless.
     * Will be ignored if agentless auto-discovery is enabled.
     */
    private List<InventoryList> inventoryList;

    /**
     * Creates an instance of AgentlessConfiguration class.
     */
    public AgentlessConfiguration() {
    }

    /**
     * Get the agentlessEnabled property: Agentless Enablement states.
     * 
     * @return the agentlessEnabled value.
     */
    public AgentlessEnablement agentlessEnabled() {
        return this.agentlessEnabled;
    }

    /**
     * Set the agentlessEnabled property: Agentless Enablement states.
     * 
     * @param agentlessEnabled the agentlessEnabled value to set.
     * @return the AgentlessConfiguration object itself.
     */
    public AgentlessConfiguration withAgentlessEnabled(AgentlessEnablement agentlessEnabled) {
        this.agentlessEnabled = agentlessEnabled;
        return this;
    }

    /**
     * Get the agentlessAutoDiscovery property: AutoDiscovery states.
     * 
     * @return the agentlessAutoDiscovery value.
     */
    public AutoDiscovery agentlessAutoDiscovery() {
        return this.agentlessAutoDiscovery;
    }

    /**
     * Set the agentlessAutoDiscovery property: AutoDiscovery states.
     * 
     * @param agentlessAutoDiscovery the agentlessAutoDiscovery value to set.
     * @return the AgentlessConfiguration object itself.
     */
    public AgentlessConfiguration withAgentlessAutoDiscovery(AutoDiscovery agentlessAutoDiscovery) {
        this.agentlessAutoDiscovery = agentlessAutoDiscovery;
        return this;
    }

    /**
     * Get the scanners property: Gets or sets the scanners for the connector.
     * 
     * @return the scanners value.
     */
    public List<String> scanners() {
        return this.scanners;
    }

    /**
     * Set the scanners property: Gets or sets the scanners for the connector.
     * 
     * @param scanners the scanners value to set.
     * @return the AgentlessConfiguration object itself.
     */
    public AgentlessConfiguration withScanners(List<String> scanners) {
        this.scanners = scanners;
        return this;
    }

    /**
     * Get the inventoryListType property: Types for inventory list.
     * 
     * @return the inventoryListType value.
     */
    public InventoryListKind inventoryListType() {
        return this.inventoryListType;
    }

    /**
     * Set the inventoryListType property: Types for inventory list.
     * 
     * @param inventoryListType the inventoryListType value to set.
     * @return the AgentlessConfiguration object itself.
     */
    public AgentlessConfiguration withInventoryListType(InventoryListKind inventoryListType) {
        this.inventoryListType = inventoryListType;
        return this;
    }

    /**
     * Get the inventoryList property: Gets or sets the inventory list for inclusion or exclusion from Agentless.
     * Will be ignored if agentless auto-discovery is enabled.
     * 
     * @return the inventoryList value.
     */
    public List<InventoryList> inventoryList() {
        return this.inventoryList;
    }

    /**
     * Set the inventoryList property: Gets or sets the inventory list for inclusion or exclusion from Agentless.
     * Will be ignored if agentless auto-discovery is enabled.
     * 
     * @param inventoryList the inventoryList value to set.
     * @return the AgentlessConfiguration object itself.
     */
    public AgentlessConfiguration withInventoryList(List<InventoryList> inventoryList) {
        this.inventoryList = inventoryList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inventoryList() != null) {
            inventoryList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("agentlessEnabled",
            this.agentlessEnabled == null ? null : this.agentlessEnabled.toString());
        jsonWriter.writeStringField("agentlessAutoDiscovery",
            this.agentlessAutoDiscovery == null ? null : this.agentlessAutoDiscovery.toString());
        jsonWriter.writeArrayField("scanners", this.scanners, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("inventoryListType",
            this.inventoryListType == null ? null : this.inventoryListType.toString());
        jsonWriter.writeArrayField("inventoryList", this.inventoryList, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgentlessConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgentlessConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgentlessConfiguration.
     */
    public static AgentlessConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgentlessConfiguration deserializedAgentlessConfiguration = new AgentlessConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("agentlessEnabled".equals(fieldName)) {
                    deserializedAgentlessConfiguration.agentlessEnabled
                        = AgentlessEnablement.fromString(reader.getString());
                } else if ("agentlessAutoDiscovery".equals(fieldName)) {
                    deserializedAgentlessConfiguration.agentlessAutoDiscovery
                        = AutoDiscovery.fromString(reader.getString());
                } else if ("scanners".equals(fieldName)) {
                    List<String> scanners = reader.readArray(reader1 -> reader1.getString());
                    deserializedAgentlessConfiguration.scanners = scanners;
                } else if ("inventoryListType".equals(fieldName)) {
                    deserializedAgentlessConfiguration.inventoryListType
                        = InventoryListKind.fromString(reader.getString());
                } else if ("inventoryList".equals(fieldName)) {
                    List<InventoryList> inventoryList = reader.readArray(reader1 -> InventoryList.fromJson(reader1));
                    deserializedAgentlessConfiguration.inventoryList = inventoryList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAgentlessConfiguration;
        });
    }
}
