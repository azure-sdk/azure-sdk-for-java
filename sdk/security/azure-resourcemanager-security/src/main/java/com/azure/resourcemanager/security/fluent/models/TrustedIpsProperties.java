// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.security.models.TrustedIpsMetadata;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes properties of a trusted IPs.
 */
@Fluent
public final class TrustedIpsProperties {
    /*
     * The tenantId (GUID)
     */
    @JsonProperty(value = "tenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String tenantId;

    /*
     * Display name of the trusted IPs
     */
    @JsonProperty(value = "displayName", required = true)
    private String displayName;

    /*
     * The scope from which the trusted IPs object was inherited; if not applicable, this will be null
     */
    @JsonProperty(value = "inheritedFrom", access = JsonProperty.Access.WRITE_ONLY)
    private String inheritedFrom;

    /*
     * Specifies the trusted IPs range in CIDR notation
     */
    @JsonProperty(value = "cidr", required = true)
    private String cidr;

    /*
     * The trusted IPs metadata
     */
    @JsonProperty(value = "metadata")
    private TrustedIpsMetadata metadata;

    /**
     * Creates an instance of TrustedIpsProperties class.
     */
    public TrustedIpsProperties() {
    }

    /**
     * Get the tenantId property: The tenantId (GUID).
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the displayName property: Display name of the trusted IPs.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the trusted IPs.
     * 
     * @param displayName the displayName value to set.
     * @return the TrustedIpsProperties object itself.
     */
    public TrustedIpsProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the inheritedFrom property: The scope from which the trusted IPs object was inherited; if not applicable,
     * this will be null.
     * 
     * @return the inheritedFrom value.
     */
    public String inheritedFrom() {
        return this.inheritedFrom;
    }

    /**
     * Get the cidr property: Specifies the trusted IPs range in CIDR notation.
     * 
     * @return the cidr value.
     */
    public String cidr() {
        return this.cidr;
    }

    /**
     * Set the cidr property: Specifies the trusted IPs range in CIDR notation.
     * 
     * @param cidr the cidr value to set.
     * @return the TrustedIpsProperties object itself.
     */
    public TrustedIpsProperties withCidr(String cidr) {
        this.cidr = cidr;
        return this;
    }

    /**
     * Get the metadata property: The trusted IPs metadata.
     * 
     * @return the metadata value.
     */
    public TrustedIpsMetadata metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The trusted IPs metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the TrustedIpsProperties object itself.
     */
    public TrustedIpsProperties withMetadata(TrustedIpsMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (displayName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayName in model TrustedIpsProperties"));
        }
        if (cidr() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property cidr in model TrustedIpsProperties"));
        }
        if (metadata() != null) {
            metadata().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TrustedIpsProperties.class);
}
