// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.security.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.security.models.BusinessCriticality;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The application business criticality resource. */
@Fluent
public final class ApplicationInner extends ProxyResource {
    /*
     * Properties of an application business criticality
     */
    @JsonProperty(value = "properties")
    private ApplicationProperties innerProperties;

    /** Creates an instance of ApplicationInner class. */
    public ApplicationInner() {
    }

    /**
     * Get the innerProperties property: Properties of an application business criticality.
     *
     * @return the innerProperties value.
     */
    private ApplicationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the tenantId property: The tenant Id associated with the application (GUID).
     *
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: The tenant Id associated with the application (GUID).
     *
     * @param tenantId the tenantId value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the kqlQuery property: The application mapping KQL query.
     *
     * @return the kqlQuery value.
     */
    public String kqlQuery() {
        return this.innerProperties() == null ? null : this.innerProperties().kqlQuery();
    }

    /**
     * Set the kqlQuery property: The application mapping KQL query.
     *
     * @param kqlQuery the kqlQuery value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withKqlQuery(String kqlQuery) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withKqlQuery(kqlQuery);
        return this;
    }

    /**
     * Get the applicationOwner property: Application owner (GUID).
     *
     * @return the applicationOwner value.
     */
    public String applicationOwner() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationOwner();
    }

    /**
     * Set the applicationOwner property: Application owner (GUID).
     *
     * @param applicationOwner the applicationOwner value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withApplicationOwner(String applicationOwner) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withApplicationOwner(applicationOwner);
        return this;
    }

    /**
     * Get the businessCriticality property: The business criticality of the application.
     *
     * @return the businessCriticality value.
     */
    public BusinessCriticality businessCriticality() {
        return this.innerProperties() == null ? null : this.innerProperties().businessCriticality();
    }

    /**
     * Set the businessCriticality property: The business criticality of the application.
     *
     * @param businessCriticality the businessCriticality value to set.
     * @return the ApplicationInner object itself.
     */
    public ApplicationInner withBusinessCriticality(BusinessCriticality businessCriticality) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withBusinessCriticality(businessCriticality);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
