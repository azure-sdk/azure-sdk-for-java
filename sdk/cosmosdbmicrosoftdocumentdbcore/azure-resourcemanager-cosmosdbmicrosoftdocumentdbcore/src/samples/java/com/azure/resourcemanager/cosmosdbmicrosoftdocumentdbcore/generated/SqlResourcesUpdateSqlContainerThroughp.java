// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.generated;

import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ThroughputSettingsResource;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ThroughputSettingsUpdateParameters;
import java.util.HashMap;
import java.util.Map;

/** Samples for SqlResources UpdateSqlContainerThroughput. */
public final class SqlResourcesUpdateSqlContainerThroughp {
    /*
     * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/core/preview/2023-03-15-preview/examples/CosmosDBSqlContainerThroughputUpdate.json
     */
    /**
     * Sample code: CosmosDBSqlContainerThroughputUpdate.
     *
     * @param manager Entry point to CosmosDBManager.
     */
    public static void cosmosDBSqlContainerThroughputUpdate(
        com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.CosmosDBManager manager) {
        manager
            .sqlResources()
            .updateSqlContainerThroughput(
                "rg1",
                "ddb1",
                "databaseName",
                "containerName",
                new ThroughputSettingsUpdateParameters()
                    .withLocation("West US")
                    .withTags(mapOf())
                    .withResource(new ThroughputSettingsResource().withThroughput(400)),
                com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
