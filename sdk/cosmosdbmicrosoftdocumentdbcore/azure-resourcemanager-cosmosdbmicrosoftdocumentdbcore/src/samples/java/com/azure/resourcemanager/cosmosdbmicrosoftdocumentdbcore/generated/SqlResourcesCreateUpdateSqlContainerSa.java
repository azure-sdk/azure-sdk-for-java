// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.generated;

import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ClientEncryptionIncludedPath;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ClientEncryptionPolicy;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ConflictResolutionMode;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ConflictResolutionPolicy;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.ContainerPartitionKey;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.CreateUpdateOptions;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.DataType;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.IncludedPath;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.IndexKind;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.Indexes;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.IndexingMode;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.IndexingPolicy;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.PartitionKind;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.SqlContainerResource;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.UniqueKey;
import com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.models.UniqueKeyPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for SqlResources CreateUpdateSqlContainer. */
public final class SqlResourcesCreateUpdateSqlContainerSa {
    /*
     * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/core/stable/2023-03-15/examples/CosmosDBSqlContainerCreateUpdate.json
     */
    /**
     * Sample code: CosmosDBSqlContainerCreateUpdate.
     *
     * @param manager Entry point to CosmosDBManager.
     */
    public static void cosmosDBSqlContainerCreateUpdate(
        com.azure.resourcemanager.cosmosdbmicrosoftdocumentdbcore.CosmosDBManager manager) {
        manager
            .sqlResources()
            .defineUpdateSqlContainer("containerName")
            .withRegion("West US")
            .withExistingSqlDatabase("rg1", "ddb1", "databaseName")
            .withResource(
                new SqlContainerResource()
                    .withId("containerName")
                    .withIndexingPolicy(
                        new IndexingPolicy()
                            .withAutomatic(true)
                            .withIndexingMode(IndexingMode.CONSISTENT)
                            .withIncludedPaths(
                                Arrays
                                    .asList(
                                        new IncludedPath()
                                            .withPath("/*")
                                            .withIndexes(
                                                Arrays
                                                    .asList(
                                                        new Indexes()
                                                            .withDataType(DataType.STRING)
                                                            .withPrecision(-1)
                                                            .withKind(IndexKind.RANGE),
                                                        new Indexes()
                                                            .withDataType(DataType.NUMBER)
                                                            .withPrecision(-1)
                                                            .withKind(IndexKind.RANGE)))))
                            .withExcludedPaths(Arrays.asList()))
                    .withPartitionKey(
                        new ContainerPartitionKey()
                            .withPaths(Arrays.asList("/AccountNumber"))
                            .withKind(PartitionKind.HASH))
                    .withDefaultTtl(100)
                    .withUniqueKeyPolicy(
                        new UniqueKeyPolicy()
                            .withUniqueKeys(Arrays.asList(new UniqueKey().withPaths(Arrays.asList("/testPath")))))
                    .withConflictResolutionPolicy(
                        new ConflictResolutionPolicy()
                            .withMode(ConflictResolutionMode.LAST_WRITER_WINS)
                            .withConflictResolutionPath("/path"))
                    .withClientEncryptionPolicy(
                        new ClientEncryptionPolicy()
                            .withIncludedPaths(
                                Arrays
                                    .asList(
                                        new ClientEncryptionIncludedPath()
                                            .withPath("/path")
                                            .withClientEncryptionKeyId("fakeTokenPlaceholder")
                                            .withEncryptionType("Deterministic")
                                            .withEncryptionAlgorithm("AEAD_AES_256_CBC_HMAC_SHA256")))
                            .withPolicyFormatVersion(2)))
            .withTags(mapOf())
            .withOptions(new CreateUpdateOptions())
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
