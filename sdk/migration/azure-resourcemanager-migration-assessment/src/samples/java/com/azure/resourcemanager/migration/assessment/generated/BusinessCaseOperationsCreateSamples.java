// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.resourcemanager.migration.assessment.models.AzureArcManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureArcMonitoringSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureArcSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureArcState;
import com.azure.resourcemanager.migration.assessment.models.AzureSettings;
import com.azure.resourcemanager.migration.assessment.models.BusinessCaseCurrency;
import com.azure.resourcemanager.migration.assessment.models.BusinessCaseProperties;
import com.azure.resourcemanager.migration.assessment.models.ComputeSettings;
import com.azure.resourcemanager.migration.assessment.models.DiscoverySource;
import com.azure.resourcemanager.migration.assessment.models.FacilitySettings;
import com.azure.resourcemanager.migration.assessment.models.HyperVLicenseType;
import com.azure.resourcemanager.migration.assessment.models.HypervLicense;
import com.azure.resourcemanager.migration.assessment.models.HypervVirtualizationManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.LaborSettings;
import com.azure.resourcemanager.migration.assessment.models.LinuxServerLicensingSettings;
import com.azure.resourcemanager.migration.assessment.models.ManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.MigrationStrategy;
import com.azure.resourcemanager.migration.assessment.models.NetworkSettings;
import com.azure.resourcemanager.migration.assessment.models.OnPremiseSettings;
import com.azure.resourcemanager.migration.assessment.models.OtherManagementCostsSettings;
import com.azure.resourcemanager.migration.assessment.models.SavingsOption;
import com.azure.resourcemanager.migration.assessment.models.SecuritySettings;
import com.azure.resourcemanager.migration.assessment.models.Settings;
import com.azure.resourcemanager.migration.assessment.models.SqlServerLicenseType;
import com.azure.resourcemanager.migration.assessment.models.SqlServerLicensingSettings;
import com.azure.resourcemanager.migration.assessment.models.StorageSettings;
import com.azure.resourcemanager.migration.assessment.models.ThirdPartyManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.VirtualizationSoftwareSettings;
import com.azure.resourcemanager.migration.assessment.models.WindowsServerLicensingSettings;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for BusinessCaseOperations Create.
 */
public final class BusinessCaseOperationsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/preview/2024-01-01-preview/examples/
     * BusinessCaseOperations_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: BusinessCaseOperations_Create_MaximumSet_Gen.
     * 
     * @param manager Entry point to MigrationAssessmentManager.
     */
    public static void businessCaseOperationsCreateMaximumSetGen(
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager) {
        manager.businessCaseOperations()
            .define("sample-business-case")
            .withExistingAssessmentProject("rgopenapi", "multipleto8617project")
            .withProperties(new BusinessCaseProperties().withSettings(new Settings()
                .withAzureSettings(new AzureSettings().withTargetLocation("WestUs2")
                    .withDiscountPercentage(83.0F)
                    .withCurrency(BusinessCaseCurrency.USD)
                    .withBusinessCaseType(MigrationStrategy.OPTIMIZE_FOR_COST)
                    .withWorkloadDiscoverySource(DiscoverySource.APPLIANCE)
                    .withPerformanceDataStartTime(OffsetDateTime.parse("2023-11-08T07:10:07.764Z"))
                    .withPerformanceDataEndTime(OffsetDateTime.parse("2023-11-08T07:10:07.764Z"))
                    .withComfortFactor(29.0F)
                    .withPerformanceUtilizationPercentile(4.0F)
                    .withPerYearMigrationCompletionPercentage(
                        mapOf("Year0", 20f, "Year1", 30f, "Year2", 60f, "Year3", 90f))
                    .withInfrastructureGrowthRate(83.0F)
                    .withWacc(79.0F)
                    .withNetworkCostPercentage(40.0F)
                    .withIaasLaborCostPercentage(94.0F)
                    .withPaasLaborCostPercentage(47.0F)
                    .withAvsLaborCostPercentage(0.0F)
                    .withSavingsOption(SavingsOption.RI3YEAR))
                .withOnPremiseSettings(new OnPremiseSettings()
                    .withComputeSettings(new ComputeSettings().withHyperthreadCoreToMemoryRatio(12f)
                        .withPrice(16f)
                        .withSqlServerLicensing(
                            Arrays.asList(new SqlServerLicensingSettings().withVersion(SqlServerLicenseType.ENTERPRISE)
                                .withLicenseCost(27f)
                                .withSoftwareAssuranceCost(16f)))
                        .withWindowsServerLicensing(new WindowsServerLicensingSettings().withLicenseCost(9f)
                            .withSoftwareAssuranceCost(1f)
                            .withLicensesPerCore(11))
                        .withRhelLinuxServerLicensing(new LinuxServerLicensingSettings().withLicenseCost(9f))
                        .withSuseLinuxServerLicensing(new LinuxServerLicensingSettings().withLicenseCost(9f))
                        .withVirtualizationSoftwareSettings(
                            new VirtualizationSoftwareSettings().withVMwareCloudFoundationLicenseCost(7f)))
                    .withStorageSettings(new StorageSettings().withCostPerGbPerMonth(22f)
                        .withMaintainanceCostPercentageToAcquisitionCost(1f))
                    .withNetworkSettings(new NetworkSettings().withHardwareSoftwareCostPercentage(50f)
                        .withMaintenanceCostPercentage(48f))
                    .withFacilitySettings(new FacilitySettings().withFacilitiesCostPerKwh(28.0F))
                    .withLaborSettings(new LaborSettings().withPhysicalServersPerAdmin(6)
                        .withVirtualMachinesPerAdmin(24)
                        .withHourlyAdminCost(25f))
                    .withSecuritySettings(new SecuritySettings().withServerSecurityCostPerServerPerYear(14f)
                        .withSqlServerSecurityCostPerServerPerYear(7f))
                    .withManagementSettings(
                        new ManagementSettings()
                            .withHypervVirtualizationManagementSettings(
                                new HypervVirtualizationManagementSettings().withNumberOfPhysicalCoresPerLicense(2)
                                    .withSoftwareAssuranceCost(11f)
                                    .withLicenseAndSupportList(Arrays.asList(new HypervLicense().withLicenseCost(4f)
                                        .withLicenseType(HyperVLicenseType.STANDARD))))
                            .withThirdPartyManagementSettings(
                                new ThirdPartyManagementSettings().withLicenseCost(23f).withSupportCost(9f))
                            .withOtherManagementCostsSettings(
                                new OtherManagementCostsSettings().withMonitoringCostPerServerPerYear(10f)
                                    .withPatchingCostPerServerPerYear(18f)
                                    .withDataProtectionCostPerServerPerYear(18f))))
                .withAzureArcSettings(new AzureArcSettings().withAzureArcState(AzureArcState.ENABLED)
                    .withLaborCostPercentage(70.0F)
                    .withManagementSettings(new AzureArcManagementSettings().withMonitoringSettings(
                        new AzureArcMonitoringSettings().withLogsVolumeInGB(0.5f).withAlertRulesCount(10))))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
