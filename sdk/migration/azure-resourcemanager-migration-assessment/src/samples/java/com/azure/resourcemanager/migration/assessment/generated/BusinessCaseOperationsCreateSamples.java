// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.resourcemanager.migration.assessment.models.AzureArcManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureArcMonitoringSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureArcSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureArcState;
import com.azure.resourcemanager.migration.assessment.models.AzureSettings;
import com.azure.resourcemanager.migration.assessment.models.AzureSettingsPerYearMigrationCompletionPercentageItem;
import com.azure.resourcemanager.migration.assessment.models.BusinessCaseCurrency;
import com.azure.resourcemanager.migration.assessment.models.BusinessCaseProperties;
import com.azure.resourcemanager.migration.assessment.models.ComputeSettings;
import com.azure.resourcemanager.migration.assessment.models.DiscoverySource;
import com.azure.resourcemanager.migration.assessment.models.FacilitySettings;
import com.azure.resourcemanager.migration.assessment.models.HyperVLicenseType;
import com.azure.resourcemanager.migration.assessment.models.HypervLicense;
import com.azure.resourcemanager.migration.assessment.models.HypervVirtualizationManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.LaborSettings;
import com.azure.resourcemanager.migration.assessment.models.LinuxServerLicensingSettings;
import com.azure.resourcemanager.migration.assessment.models.ManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.MigrationStrategy;
import com.azure.resourcemanager.migration.assessment.models.NetworkSettings;
import com.azure.resourcemanager.migration.assessment.models.OnPremiseSettings;
import com.azure.resourcemanager.migration.assessment.models.OtherManagementCostsSettings;
import com.azure.resourcemanager.migration.assessment.models.SavingsOption;
import com.azure.resourcemanager.migration.assessment.models.SecuritySettings;
import com.azure.resourcemanager.migration.assessment.models.Settings;
import com.azure.resourcemanager.migration.assessment.models.SqlServerLicenseType;
import com.azure.resourcemanager.migration.assessment.models.SqlServerLicensingSettings;
import com.azure.resourcemanager.migration.assessment.models.StorageSettings;
import com.azure.resourcemanager.migration.assessment.models.ThirdPartyManagementSettings;
import com.azure.resourcemanager.migration.assessment.models.VirtualizationSoftwareSettings;
import com.azure.resourcemanager.migration.assessment.models.WindowsServerLicensingSettings;
import java.time.OffsetDateTime;
import java.util.Arrays;

/**
 * Samples for BusinessCaseOperations Create.
 */
public final class BusinessCaseOperationsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/preview/2024-03-03-preview/examples/
     * BusinessCaseOperations_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: BusinessCaseOperations_Create_MaximumSet.
     * 
     * @param manager Entry point to MigrationAssessmentManager.
     */
    public static void businessCaseOperationsCreateMaximumSet(
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager) {
        manager.businessCaseOperations()
            .define("MyBusinessCase")
            .withExistingAssessmentProject("rgbusinessCases", "MyMigrateProject")
            .withProperties(new BusinessCaseProperties().withSettings(new Settings()
                .withAzureSettings(new AzureSettings().withTargetLocation("hpocokeckktxpzilk")
                    .withDiscountPercentage(48.0F)
                    .withCurrency(BusinessCaseCurrency.UNKNOWN)
                    .withBusinessCaseType(MigrationStrategy.UNKNOWN)
                    .withWorkloadDiscoverySource(DiscoverySource.UNKNOWN)
                    .withPerformanceDataStartTime(OffsetDateTime.parse("2024-11-14T10:27:58.436Z"))
                    .withPerformanceDataEndTime(OffsetDateTime.parse("2024-11-14T10:27:58.436Z"))
                    .withComfortFactor(19.0F)
                    .withPerformanceUtilizationPercentile(93.0F)
                    .withPerYearMigrationCompletionPercentage(Arrays.asList(
                        new AzureSettingsPerYearMigrationCompletionPercentageItem().withName("cthxvjhedpsnbddvyghswtgp")
                            .withValue(13.0F)))
                    .withInfrastructureGrowthRate(79.0F)
                    .withWacc(43.0F)
                    .withNetworkCostPercentage(81.0F)
                    .withIaasLaborCostPercentage(51.0F)
                    .withPaasLaborCostPercentage(13.0F)
                    .withAvsLaborCostPercentage(2.0F)
                    .withSavingsOption(SavingsOption.UNKNOWN))
                .withOnPremiseSettings(new OnPremiseSettings()
                    .withComputeSettings(new ComputeSettings().withHyperthreadCoreToMemoryRatio(26f)
                        .withPrice(8f)
                        .withComputeHardwareMaintenanceCost(1f)
                        .withVmOversubscriptionRatio(10f)
                        .withCpuOversubscriptionRatio(10f)
                        .withSqlServerLicensing(
                            Arrays.asList(new SqlServerLicensingSettings().withVersion(SqlServerLicenseType.UNKNOWN)
                                .withLicenseCost(28f)
                                .withSoftwareAssuranceCost(27f)))
                        .withWindowsServerLicensing(new WindowsServerLicensingSettings().withLicenseCost(2f)
                            .withSoftwareAssuranceCost(6f)
                            .withLicensesPerCore(21))
                        .withRhelLinuxServerLicensing(new LinuxServerLicensingSettings().withLicenseCost(7f))
                        .withSuseLinuxServerLicensing(new LinuxServerLicensingSettings().withLicenseCost(7f))
                        .withVirtualizationSoftwareSettings(
                            new VirtualizationSoftwareSettings().withVMwareCloudFoundationLicenseCost(23f)))
                    .withStorageSettings(new StorageSettings().withCostPerGbPerYear(12f)
                        .withMaintainanceCostPercentageToAcquisitionCost(5f))
                    .withNetworkSettings(new NetworkSettings().withMaintenanceCostPercentage(84f)
                        .withPhysicalServersPerCabinet(18)
                        .withAverageCostPerCabinet(27f))
                    .withFacilitySettings(
                        new FacilitySettings().withFacilitiesCostPerKwh(1.0F).withPowerUtilizationEfficiency(25f))
                    .withLaborSettings(new LaborSettings().withPhysicalServersPerAdmin(16)
                        .withVirtualMachinesPerAdmin(18)
                        .withHourlyAdminCost(22f))
                    .withSecuritySettings(new SecuritySettings().withServerSecurityCostPerServerPerYear(6f)
                        .withSqlServerSecurityCostPerServerPerYear(10f))
                    .withManagementSettings(
                        new ManagementSettings()
                            .withHypervVirtualizationManagementSettings(
                                new HypervVirtualizationManagementSettings().withNumberOfPhysicalCoresPerLicense(8)
                                    .withSoftwareAssuranceCost(15f)
                                    .withLicenseAndSupportList(Arrays.asList(new HypervLicense().withLicenseCost(1f)
                                        .withLicenseType(HyperVLicenseType.UNKNOWN))))
                            .withThirdPartyManagementSettings(
                                new ThirdPartyManagementSettings().withLicenseCost(1f).withSupportCost(13f))
                            .withOtherManagementCostsSettings(
                                new OtherManagementCostsSettings().withMonitoringCostPerServerPerYear(2f)
                                    .withPatchingCostPerServerPerYear(28f)
                                    .withDataProtectionCostPerServerPerYear(4f))))
                .withAzureArcSettings(new AzureArcSettings().withAzureArcState(AzureArcState.DISABLED)
                    .withLaborCostPercentage(46.0F)
                    .withManagementSettings(new AzureArcManagementSettings().withMonitoringSettings(
                        new AzureArcMonitoringSettings().withLogsVolumeInGB(17f).withAlertRulesCount(19))))))
            .create();
    }
}
