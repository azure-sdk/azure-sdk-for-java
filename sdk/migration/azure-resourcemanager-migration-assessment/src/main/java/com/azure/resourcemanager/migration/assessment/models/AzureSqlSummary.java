// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Shows the Azure SQL details.
 */
@Immutable
public final class AzureSqlSummary implements JsonSerializable<AzureSqlSummary> {
    /*
     * Estimated cost by recommended offer.
     */
    private List<EstimatedCostByOffer> estimatedCostByOffer;

    /*
     * Distribution by service tiers, retaining just to support older Business cases.
     */
    private List<SqlServiceTier> distributionByServiceTier;

    /*
     * Distribution by service tiers for SQL MI.
     */
    private List<SqlServiceTier> distributionByServiceTierForSqlMi;

    /*
     * Distribution by service tiers for SQL DB.
     */
    private List<SqlServiceTier> distributionByServiceTierForSqlDb;

    /**
     * Creates an instance of AzureSqlSummary class.
     */
    public AzureSqlSummary() {
    }

    /**
     * Get the estimatedCostByOffer property: Estimated cost by recommended offer.
     * 
     * @return the estimatedCostByOffer value.
     */
    public List<EstimatedCostByOffer> estimatedCostByOffer() {
        return this.estimatedCostByOffer;
    }

    /**
     * Get the distributionByServiceTier property: Distribution by service tiers, retaining just to support older
     * Business cases.
     * 
     * @return the distributionByServiceTier value.
     */
    public List<SqlServiceTier> distributionByServiceTier() {
        return this.distributionByServiceTier;
    }

    /**
     * Get the distributionByServiceTierForSqlMi property: Distribution by service tiers for SQL MI.
     * 
     * @return the distributionByServiceTierForSqlMi value.
     */
    public List<SqlServiceTier> distributionByServiceTierForSqlMi() {
        return this.distributionByServiceTierForSqlMi;
    }

    /**
     * Get the distributionByServiceTierForSqlDb property: Distribution by service tiers for SQL DB.
     * 
     * @return the distributionByServiceTierForSqlDb value.
     */
    public List<SqlServiceTier> distributionByServiceTierForSqlDb() {
        return this.distributionByServiceTierForSqlDb;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (estimatedCostByOffer() != null) {
            estimatedCostByOffer().forEach(e -> e.validate());
        }
        if (distributionByServiceTier() != null) {
            distributionByServiceTier().forEach(e -> e.validate());
        }
        if (distributionByServiceTierForSqlMi() != null) {
            distributionByServiceTierForSqlMi().forEach(e -> e.validate());
        }
        if (distributionByServiceTierForSqlDb() != null) {
            distributionByServiceTierForSqlDb().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSqlSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSqlSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureSqlSummary.
     */
    public static AzureSqlSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSqlSummary deserializedAzureSqlSummary = new AzureSqlSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("estimatedCostByOffer".equals(fieldName)) {
                    List<EstimatedCostByOffer> estimatedCostByOffer
                        = reader.readArray(reader1 -> EstimatedCostByOffer.fromJson(reader1));
                    deserializedAzureSqlSummary.estimatedCostByOffer = estimatedCostByOffer;
                } else if ("distributionByServiceTier".equals(fieldName)) {
                    List<SqlServiceTier> distributionByServiceTier
                        = reader.readArray(reader1 -> SqlServiceTier.fromJson(reader1));
                    deserializedAzureSqlSummary.distributionByServiceTier = distributionByServiceTier;
                } else if ("distributionByServiceTierForSqlMi".equals(fieldName)) {
                    List<SqlServiceTier> distributionByServiceTierForSqlMi
                        = reader.readArray(reader1 -> SqlServiceTier.fromJson(reader1));
                    deserializedAzureSqlSummary.distributionByServiceTierForSqlMi = distributionByServiceTierForSqlMi;
                } else if ("distributionByServiceTierForSqlDb".equals(fieldName)) {
                    List<SqlServiceTier> distributionByServiceTierForSqlDb
                        = reader.readArray(reader1 -> SqlServiceTier.fromJson(reader1));
                    deserializedAzureSqlSummary.distributionByServiceTierForSqlDb = distributionByServiceTierForSqlDb;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSqlSummary;
        });
    }
}
