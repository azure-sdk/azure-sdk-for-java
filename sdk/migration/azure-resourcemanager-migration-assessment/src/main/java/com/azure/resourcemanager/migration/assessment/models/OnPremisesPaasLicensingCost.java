// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The on premises paas licensing cost.
 */
@Immutable
public final class OnPremisesPaasLicensingCost implements JsonSerializable<OnPremisesPaasLicensingCost> {
    /*
     * The version.
     */
    private String version;

    /*
     * The total cost.
     */
    private Float totalCost;

    /*
     * The decommissioned server cost.
     */
    private Float decomissionServerCost;

    /**
     * Creates an instance of OnPremisesPaasLicensingCost class.
     */
    public OnPremisesPaasLicensingCost() {
    }

    /**
     * Get the version property: The version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the totalCost property: The total cost.
     * 
     * @return the totalCost value.
     */
    public Float totalCost() {
        return this.totalCost;
    }

    /**
     * Get the decomissionServerCost property: The decommissioned server cost.
     * 
     * @return the decomissionServerCost value.
     */
    public Float decomissionServerCost() {
        return this.decomissionServerCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnPremisesPaasLicensingCost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnPremisesPaasLicensingCost if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnPremisesPaasLicensingCost.
     */
    public static OnPremisesPaasLicensingCost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnPremisesPaasLicensingCost deserializedOnPremisesPaasLicensingCost = new OnPremisesPaasLicensingCost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedOnPremisesPaasLicensingCost.version = reader.getString();
                } else if ("totalCost".equals(fieldName)) {
                    deserializedOnPremisesPaasLicensingCost.totalCost = reader.getNullable(JsonReader::getFloat);
                } else if ("decomissionServerCost".equals(fieldName)) {
                    deserializedOnPremisesPaasLicensingCost.decomissionServerCost
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnPremisesPaasLicensingCost;
        });
    }
}
