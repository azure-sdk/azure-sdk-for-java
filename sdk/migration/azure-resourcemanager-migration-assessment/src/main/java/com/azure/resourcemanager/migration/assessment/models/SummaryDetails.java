// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Summary Details.
 */
@Immutable
public final class SummaryDetails implements JsonSerializable<SummaryDetails> {
    /*
     * Gets count.
     */
    private int count;

    /*
     * Gets monthly cost.
     */
    private float monthlyCost;

    /**
     * Creates an instance of SummaryDetails class.
     */
    public SummaryDetails() {
    }

    /**
     * Get the count property: Gets count.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Get the monthlyCost property: Gets monthly cost.
     * 
     * @return the monthlyCost value.
     */
    public float monthlyCost() {
        return this.monthlyCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SummaryDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SummaryDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SummaryDetails.
     */
    public static SummaryDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SummaryDetails deserializedSummaryDetails = new SummaryDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedSummaryDetails.count = reader.getInt();
                } else if ("monthlyCost".equals(fieldName)) {
                    deserializedSummaryDetails.monthlyCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSummaryDetails;
        });
    }
}
