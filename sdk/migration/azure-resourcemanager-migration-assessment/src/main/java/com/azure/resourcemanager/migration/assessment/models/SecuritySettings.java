// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Security settings.
 */
@Fluent
public final class SecuritySettings implements JsonSerializable<SecuritySettings> {
    /*
     * Physical servers per administrator.
     */
    private float serverSecurityCostPerServerPerYear;

    /*
     * Virtual machines per administrator.
     */
    private float sqlServerSecurityCostPerServerPerYear;

    /**
     * Creates an instance of SecuritySettings class.
     */
    public SecuritySettings() {
    }

    /**
     * Get the serverSecurityCostPerServerPerYear property: Physical servers per administrator.
     * 
     * @return the serverSecurityCostPerServerPerYear value.
     */
    public float serverSecurityCostPerServerPerYear() {
        return this.serverSecurityCostPerServerPerYear;
    }

    /**
     * Set the serverSecurityCostPerServerPerYear property: Physical servers per administrator.
     * 
     * @param serverSecurityCostPerServerPerYear the serverSecurityCostPerServerPerYear value to set.
     * @return the SecuritySettings object itself.
     */
    public SecuritySettings withServerSecurityCostPerServerPerYear(float serverSecurityCostPerServerPerYear) {
        this.serverSecurityCostPerServerPerYear = serverSecurityCostPerServerPerYear;
        return this;
    }

    /**
     * Get the sqlServerSecurityCostPerServerPerYear property: Virtual machines per administrator.
     * 
     * @return the sqlServerSecurityCostPerServerPerYear value.
     */
    public float sqlServerSecurityCostPerServerPerYear() {
        return this.sqlServerSecurityCostPerServerPerYear;
    }

    /**
     * Set the sqlServerSecurityCostPerServerPerYear property: Virtual machines per administrator.
     * 
     * @param sqlServerSecurityCostPerServerPerYear the sqlServerSecurityCostPerServerPerYear value to set.
     * @return the SecuritySettings object itself.
     */
    public SecuritySettings withSqlServerSecurityCostPerServerPerYear(float sqlServerSecurityCostPerServerPerYear) {
        this.sqlServerSecurityCostPerServerPerYear = sqlServerSecurityCostPerServerPerYear;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("serverSecurityCostPerServerPerYear", this.serverSecurityCostPerServerPerYear);
        jsonWriter.writeFloatField("sqlServerSecurityCostPerServerPerYear", this.sqlServerSecurityCostPerServerPerYear);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecuritySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecuritySettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecuritySettings.
     */
    public static SecuritySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecuritySettings deserializedSecuritySettings = new SecuritySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverSecurityCostPerServerPerYear".equals(fieldName)) {
                    deserializedSecuritySettings.serverSecurityCostPerServerPerYear = reader.getFloat();
                } else if ("sqlServerSecurityCostPerServerPerYear".equals(fieldName)) {
                    deserializedSecuritySettings.sqlServerSecurityCostPerServerPerYear = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecuritySettings;
        });
    }
}
