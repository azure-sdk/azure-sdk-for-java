// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Sku details.
 */
@Immutable
public final class SkuDetails implements JsonSerializable<SkuDetails> {
    /*
     * The sku type.
     */
    private SkuType skuType;

    /*
     * The sku name.
     */
    private String skuName;

    /*
     * The capabilities.
     */
    private List<SkuDetailsCapabilitiesItem> capabilities;

    /*
     * The sku cost details.
     */
    private List<CostDetailsCommon> totalCost;

    /*
     * The sku savings details.
     */
    private List<SavingsDetailsCommon> totalSavings;

    /**
     * Creates an instance of SkuDetails class.
     */
    public SkuDetails() {
    }

    /**
     * Get the skuType property: The sku type.
     * 
     * @return the skuType value.
     */
    public SkuType skuType() {
        return this.skuType;
    }

    /**
     * Get the skuName property: The sku name.
     * 
     * @return the skuName value.
     */
    public String skuName() {
        return this.skuName;
    }

    /**
     * Get the capabilities property: The capabilities.
     * 
     * @return the capabilities value.
     */
    public List<SkuDetailsCapabilitiesItem> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the totalCost property: The sku cost details.
     * 
     * @return the totalCost value.
     */
    public List<CostDetailsCommon> totalCost() {
        return this.totalCost;
    }

    /**
     * Get the totalSavings property: The sku savings details.
     * 
     * @return the totalSavings value.
     */
    public List<SavingsDetailsCommon> totalSavings() {
        return this.totalSavings;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (totalCost() != null) {
            totalCost().forEach(e -> e.validate());
        }
        if (totalSavings() != null) {
            totalSavings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuDetails if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SkuDetails.
     */
    public static SkuDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuDetails deserializedSkuDetails = new SkuDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("skuType".equals(fieldName)) {
                    deserializedSkuDetails.skuType = SkuType.fromString(reader.getString());
                } else if ("skuName".equals(fieldName)) {
                    deserializedSkuDetails.skuName = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    List<SkuDetailsCapabilitiesItem> capabilities
                        = reader.readArray(reader1 -> SkuDetailsCapabilitiesItem.fromJson(reader1));
                    deserializedSkuDetails.capabilities = capabilities;
                } else if ("totalCost".equals(fieldName)) {
                    List<CostDetailsCommon> totalCost
                        = reader.readArray(reader1 -> CostDetailsCommon.fromJson(reader1));
                    deserializedSkuDetails.totalCost = totalCost;
                } else if ("totalSavings".equals(fieldName)) {
                    List<SavingsDetailsCommon> totalSavings
                        = reader.readArray(reader1 -> SavingsDetailsCommon.fromJson(reader1));
                    deserializedSkuDetails.totalSavings = totalSavings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuDetails;
        });
    }
}
