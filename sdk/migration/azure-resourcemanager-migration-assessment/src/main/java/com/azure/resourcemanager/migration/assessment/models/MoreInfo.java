// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of More information about check or rule.
 */
@Immutable
public final class MoreInfo implements JsonSerializable<MoreInfo> {
    /*
     * Gets title.
     */
    private String title;

    /*
     * Gets url.
     */
    private String url;

    /**
     * Creates an instance of MoreInfo class.
     */
    public MoreInfo() {
    }

    /**
     * Get the title property: Gets title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the url property: Gets url.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MoreInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MoreInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MoreInfo.
     */
    public static MoreInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MoreInfo deserializedMoreInfo = new MoreInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedMoreInfo.title = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedMoreInfo.url = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMoreInfo;
        });
    }
}
