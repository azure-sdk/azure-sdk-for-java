// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Web app migration issues.
 */
@Fluent
public final class WebAppMigrationIssues implements JsonSerializable<WebAppMigrationIssues> {
    /*
     * Gets or sets the issue Id.
     */
    private String issueId;

    /*
     * Gets or sets the issue category.
     */
    private AzureWebAppSuitabilityIssueCategory issueCategory;

    /*
     * Gets or sets the issue description list.
     */
    private List<String> issueDescriptionList;

    /**
     * Creates an instance of WebAppMigrationIssues class.
     */
    public WebAppMigrationIssues() {
    }

    /**
     * Get the issueId property: Gets or sets the issue Id.
     * 
     * @return the issueId value.
     */
    public String issueId() {
        return this.issueId;
    }

    /**
     * Set the issueId property: Gets or sets the issue Id.
     * 
     * @param issueId the issueId value to set.
     * @return the WebAppMigrationIssues object itself.
     */
    public WebAppMigrationIssues withIssueId(String issueId) {
        this.issueId = issueId;
        return this;
    }

    /**
     * Get the issueCategory property: Gets or sets the issue category.
     * 
     * @return the issueCategory value.
     */
    public AzureWebAppSuitabilityIssueCategory issueCategory() {
        return this.issueCategory;
    }

    /**
     * Set the issueCategory property: Gets or sets the issue category.
     * 
     * @param issueCategory the issueCategory value to set.
     * @return the WebAppMigrationIssues object itself.
     */
    public WebAppMigrationIssues withIssueCategory(AzureWebAppSuitabilityIssueCategory issueCategory) {
        this.issueCategory = issueCategory;
        return this;
    }

    /**
     * Get the issueDescriptionList property: Gets or sets the issue description list.
     * 
     * @return the issueDescriptionList value.
     */
    public List<String> issueDescriptionList() {
        return this.issueDescriptionList;
    }

    /**
     * Set the issueDescriptionList property: Gets or sets the issue description list.
     * 
     * @param issueDescriptionList the issueDescriptionList value to set.
     * @return the WebAppMigrationIssues object itself.
     */
    public WebAppMigrationIssues withIssueDescriptionList(List<String> issueDescriptionList) {
        this.issueDescriptionList = issueDescriptionList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issueId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property issueId in model WebAppMigrationIssues"));
        }
        if (issueCategory() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property issueCategory in model WebAppMigrationIssues"));
        }
        if (issueDescriptionList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property issueDescriptionList in model WebAppMigrationIssues"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebAppMigrationIssues.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issueId", this.issueId);
        jsonWriter.writeStringField("issueCategory", this.issueCategory == null ? null : this.issueCategory.toString());
        jsonWriter.writeArrayField("issueDescriptionList", this.issueDescriptionList,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebAppMigrationIssues from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebAppMigrationIssues if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebAppMigrationIssues.
     */
    public static WebAppMigrationIssues fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebAppMigrationIssues deserializedWebAppMigrationIssues = new WebAppMigrationIssues();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueId".equals(fieldName)) {
                    deserializedWebAppMigrationIssues.issueId = reader.getString();
                } else if ("issueCategory".equals(fieldName)) {
                    deserializedWebAppMigrationIssues.issueCategory
                        = AzureWebAppSuitabilityIssueCategory.fromString(reader.getString());
                } else if ("issueDescriptionList".equals(fieldName)) {
                    List<String> issueDescriptionList = reader.readArray(reader1 -> reader1.getString());
                    deserializedWebAppMigrationIssues.issueDescriptionList = issueDescriptionList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebAppMigrationIssues;
        });
    }
}
