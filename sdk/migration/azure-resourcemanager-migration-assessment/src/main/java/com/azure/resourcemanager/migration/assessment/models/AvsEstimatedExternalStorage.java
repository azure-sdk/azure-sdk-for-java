// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details on the Estimated External Storage for AVS Assessment.
 */
@Fluent
public final class AvsEstimatedExternalStorage implements JsonSerializable<AvsEstimatedExternalStorage> {
    /*
     * Total monthly cost for type of storage.
     */
    private Float monthlyPrice;

    /*
     * Recommended External Storage.
     */
    private ExternalStorageType storageType;

    /*
     * Predicted total Storage used in GB.
     */
    private Float totalStorageInGB;

    /*
     * Predicted storage utilization.
     */
    private Float storageUtilization;

    /**
     * Creates an instance of AvsEstimatedExternalStorage class.
     */
    public AvsEstimatedExternalStorage() {
    }

    /**
     * Get the monthlyPrice property: Total monthly cost for type of storage.
     * 
     * @return the monthlyPrice value.
     */
    public Float monthlyPrice() {
        return this.monthlyPrice;
    }

    /**
     * Set the monthlyPrice property: Total monthly cost for type of storage.
     * 
     * @param monthlyPrice the monthlyPrice value to set.
     * @return the AvsEstimatedExternalStorage object itself.
     */
    public AvsEstimatedExternalStorage withMonthlyPrice(Float monthlyPrice) {
        this.monthlyPrice = monthlyPrice;
        return this;
    }

    /**
     * Get the storageType property: Recommended External Storage.
     * 
     * @return the storageType value.
     */
    public ExternalStorageType storageType() {
        return this.storageType;
    }

    /**
     * Set the storageType property: Recommended External Storage.
     * 
     * @param storageType the storageType value to set.
     * @return the AvsEstimatedExternalStorage object itself.
     */
    public AvsEstimatedExternalStorage withStorageType(ExternalStorageType storageType) {
        this.storageType = storageType;
        return this;
    }

    /**
     * Get the totalStorageInGB property: Predicted total Storage used in GB.
     * 
     * @return the totalStorageInGB value.
     */
    public Float totalStorageInGB() {
        return this.totalStorageInGB;
    }

    /**
     * Set the totalStorageInGB property: Predicted total Storage used in GB.
     * 
     * @param totalStorageInGB the totalStorageInGB value to set.
     * @return the AvsEstimatedExternalStorage object itself.
     */
    public AvsEstimatedExternalStorage withTotalStorageInGB(Float totalStorageInGB) {
        this.totalStorageInGB = totalStorageInGB;
        return this;
    }

    /**
     * Get the storageUtilization property: Predicted storage utilization.
     * 
     * @return the storageUtilization value.
     */
    public Float storageUtilization() {
        return this.storageUtilization;
    }

    /**
     * Set the storageUtilization property: Predicted storage utilization.
     * 
     * @param storageUtilization the storageUtilization value to set.
     * @return the AvsEstimatedExternalStorage object itself.
     */
    public AvsEstimatedExternalStorage withStorageUtilization(Float storageUtilization) {
        this.storageUtilization = storageUtilization;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("monthlyPrice", this.monthlyPrice);
        jsonWriter.writeStringField("storageType", this.storageType == null ? null : this.storageType.toString());
        jsonWriter.writeNumberField("totalStorageInGB", this.totalStorageInGB);
        jsonWriter.writeNumberField("storageUtilization", this.storageUtilization);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsEstimatedExternalStorage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsEstimatedExternalStorage if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsEstimatedExternalStorage.
     */
    public static AvsEstimatedExternalStorage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsEstimatedExternalStorage deserializedAvsEstimatedExternalStorage = new AvsEstimatedExternalStorage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("monthlyPrice".equals(fieldName)) {
                    deserializedAvsEstimatedExternalStorage.monthlyPrice = reader.getNullable(JsonReader::getFloat);
                } else if ("storageType".equals(fieldName)) {
                    deserializedAvsEstimatedExternalStorage.storageType
                        = ExternalStorageType.fromString(reader.getString());
                } else if ("totalStorageInGB".equals(fieldName)) {
                    deserializedAvsEstimatedExternalStorage.totalStorageInGB = reader.getNullable(JsonReader::getFloat);
                } else if ("storageUtilization".equals(fieldName)) {
                    deserializedAvsEstimatedExternalStorage.storageUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsEstimatedExternalStorage;
        });
    }
}
