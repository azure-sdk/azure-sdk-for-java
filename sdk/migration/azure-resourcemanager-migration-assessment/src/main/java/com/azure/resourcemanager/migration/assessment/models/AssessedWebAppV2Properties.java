// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Assessed Web app database properties web model.
 */
@Immutable
public final class AssessedWebAppV2Properties implements JsonSerializable<AssessedWebAppV2Properties> {
    /*
     * Gets or sets the web app type.
     */
    private WebAppType webAppType;

    /*
     * Gets or sets the target specific result.
     */
    private Map<String, TargetSpecificResult> targetSpecificResult;

    /*
     * Gets or sets the app service plan name.
     */
    private String appServicePlanName;

    /*
     * Gets the machine name.
     */
    private String machineName;

    /*
     * Gets or sets the server ARM Id.
     */
    private String serverArmId;

    /*
     * Gets or sets the web server name.
     */
    private String webServerName;

    /*
     * Gets or sets web app name.
     */
    private String webAppName;

    /*
     * Gets the discovered web app ID.
     */
    private String discoveredWebAppId;

    /*
     * Machine arm id.
     */
    private String discoveredMachineId;

    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * When was assessed SQL database first created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * When was assessed Web app database last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /**
     * Creates an instance of AssessedWebAppV2Properties class.
     */
    public AssessedWebAppV2Properties() {
    }

    /**
     * Get the webAppType property: Gets or sets the web app type.
     * 
     * @return the webAppType value.
     */
    public WebAppType webAppType() {
        return this.webAppType;
    }

    /**
     * Get the targetSpecificResult property: Gets or sets the target specific result.
     * 
     * @return the targetSpecificResult value.
     */
    public Map<String, TargetSpecificResult> targetSpecificResult() {
        return this.targetSpecificResult;
    }

    /**
     * Get the appServicePlanName property: Gets or sets the app service plan name.
     * 
     * @return the appServicePlanName value.
     */
    public String appServicePlanName() {
        return this.appServicePlanName;
    }

    /**
     * Get the machineName property: Gets the machine name.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Get the serverArmId property: Gets or sets the server ARM Id.
     * 
     * @return the serverArmId value.
     */
    public String serverArmId() {
        return this.serverArmId;
    }

    /**
     * Get the webServerName property: Gets or sets the web server name.
     * 
     * @return the webServerName value.
     */
    public String webServerName() {
        return this.webServerName;
    }

    /**
     * Get the webAppName property: Gets or sets web app name.
     * 
     * @return the webAppName value.
     */
    public String webAppName() {
        return this.webAppName;
    }

    /**
     * Get the discoveredWebAppId property: Gets the discovered web app ID.
     * 
     * @return the discoveredWebAppId value.
     */
    public String discoveredWebAppId() {
        return this.discoveredWebAppId;
    }

    /**
     * Get the discoveredMachineId property: Machine arm id.
     * 
     * @return the discoveredMachineId value.
     */
    public String discoveredMachineId() {
        return this.discoveredMachineId;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the createdTimestamp property: When was assessed SQL database first created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: When was assessed Web app database last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetSpecificResult() != null) {
            targetSpecificResult().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedWebAppV2Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedWebAppV2Properties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessedWebAppV2Properties.
     */
    public static AssessedWebAppV2Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedWebAppV2Properties deserializedAssessedWebAppV2Properties = new AssessedWebAppV2Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appServicePlanName".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.appServicePlanName = reader.getString();
                } else if ("machineName".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.machineName = reader.getString();
                } else if ("webAppType".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.webAppType = WebAppType.fromString(reader.getString());
                } else if ("targetSpecificResult".equals(fieldName)) {
                    Map<String, TargetSpecificResult> targetSpecificResult
                        = reader.readMap(reader1 -> TargetSpecificResult.fromJson(reader1));
                    deserializedAssessedWebAppV2Properties.targetSpecificResult = targetSpecificResult;
                } else if ("serverArmId".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.serverArmId = reader.getString();
                } else if ("webServerName".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.webServerName = reader.getString();
                } else if ("webAppName".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.webAppName = reader.getString();
                } else if ("discoveredWebAppId".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.discoveredWebAppId = reader.getString();
                } else if ("discoveredMachineId".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.discoveredMachineId = reader.getString();
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessedWebAppV2Properties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedWebAppV2Properties;
        });
    }
}
