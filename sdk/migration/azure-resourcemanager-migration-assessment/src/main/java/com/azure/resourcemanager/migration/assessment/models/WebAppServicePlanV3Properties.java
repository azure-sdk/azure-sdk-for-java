// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * WebApp assessment service plan properties class.
 */
@Immutable
public final class WebAppServicePlanV3Properties implements JsonSerializable<WebAppServicePlanV3Properties> {
    /*
     * Target type of the webapp.
     */
    private WebAppTargetType webAppTargetType;

    /*
     * Type of webapp.
     */
    private WebServerType webAppType;

    /*
     * Webapp service plan name.
     */
    private String webAppServicePlanName;

    /*
     * Number of web apps.
     */
    private int numberOfWebApps;

    /*
     * Monthly cost of the web app service plan.
     */
    private double monthlyCost;

    /*
     * Storage used by the web app service plan.
     */
    private double storage;

    /*
     * Number of scale-out instances.
     */
    private int scaleOutInstances;

    /*
     * Number of cores.
     */
    private int cores;

    /*
     * Amount of RAM.
     */
    private double ram;

    /*
     * SKU name of the web app.
     */
    private String webAppSkuName;

    /*
     * SKU size of the web app.
     */
    private String webAppSkuSize;

    /*
     * Timestamp when the web app service plan was created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Timestamp when the web app service plan was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Cost components of the web app service plan.
     */
    private List<CostComponent> costComponents;

    /**
     * Creates an instance of WebAppServicePlanV3Properties class.
     */
    public WebAppServicePlanV3Properties() {
    }

    /**
     * Get the webAppTargetType property: Target type of the webapp.
     * 
     * @return the webAppTargetType value.
     */
    public WebAppTargetType webAppTargetType() {
        return this.webAppTargetType;
    }

    /**
     * Get the webAppType property: Type of webapp.
     * 
     * @return the webAppType value.
     */
    public WebServerType webAppType() {
        return this.webAppType;
    }

    /**
     * Get the webAppServicePlanName property: Webapp service plan name.
     * 
     * @return the webAppServicePlanName value.
     */
    public String webAppServicePlanName() {
        return this.webAppServicePlanName;
    }

    /**
     * Get the numberOfWebApps property: Number of web apps.
     * 
     * @return the numberOfWebApps value.
     */
    public int numberOfWebApps() {
        return this.numberOfWebApps;
    }

    /**
     * Get the monthlyCost property: Monthly cost of the web app service plan.
     * 
     * @return the monthlyCost value.
     */
    public double monthlyCost() {
        return this.monthlyCost;
    }

    /**
     * Get the storage property: Storage used by the web app service plan.
     * 
     * @return the storage value.
     */
    public double storage() {
        return this.storage;
    }

    /**
     * Get the scaleOutInstances property: Number of scale-out instances.
     * 
     * @return the scaleOutInstances value.
     */
    public int scaleOutInstances() {
        return this.scaleOutInstances;
    }

    /**
     * Get the cores property: Number of cores.
     * 
     * @return the cores value.
     */
    public int cores() {
        return this.cores;
    }

    /**
     * Get the ram property: Amount of RAM.
     * 
     * @return the ram value.
     */
    public double ram() {
        return this.ram;
    }

    /**
     * Get the webAppSkuName property: SKU name of the web app.
     * 
     * @return the webAppSkuName value.
     */
    public String webAppSkuName() {
        return this.webAppSkuName;
    }

    /**
     * Get the webAppSkuSize property: SKU size of the web app.
     * 
     * @return the webAppSkuSize value.
     */
    public String webAppSkuSize() {
        return this.webAppSkuSize;
    }

    /**
     * Get the createdTimestamp property: Timestamp when the web app service plan was created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Timestamp when the web app service plan was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the costComponents property: Cost components of the web app service plan.
     * 
     * @return the costComponents value.
     */
    public List<CostComponent> costComponents() {
        return this.costComponents;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebAppServicePlanV3Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebAppServicePlanV3Properties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebAppServicePlanV3Properties.
     */
    public static WebAppServicePlanV3Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebAppServicePlanV3Properties deserializedWebAppServicePlanV3Properties
                = new WebAppServicePlanV3Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webAppTargetType".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.webAppTargetType
                        = WebAppTargetType.fromString(reader.getString());
                } else if ("webAppType".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.webAppType = WebServerType.fromString(reader.getString());
                } else if ("webAppServicePlanName".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.webAppServicePlanName = reader.getString();
                } else if ("numberOfWebApps".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.numberOfWebApps = reader.getInt();
                } else if ("monthlyCost".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.monthlyCost = reader.getDouble();
                } else if ("storage".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.storage = reader.getDouble();
                } else if ("scaleOutInstances".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.scaleOutInstances = reader.getInt();
                } else if ("cores".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.cores = reader.getInt();
                } else if ("ram".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.ram = reader.getDouble();
                } else if ("webAppSkuName".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.webAppSkuName = reader.getString();
                } else if ("webAppSkuSize".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.webAppSkuSize = reader.getString();
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedWebAppServicePlanV3Properties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("costComponents".equals(fieldName)) {
                    List<CostComponent> costComponents = reader.readArray(reader1 -> CostComponent.fromJson(reader1));
                    deserializedWebAppServicePlanV3Properties.costComponents = costComponents;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebAppServicePlanV3Properties;
        });
    }
}
