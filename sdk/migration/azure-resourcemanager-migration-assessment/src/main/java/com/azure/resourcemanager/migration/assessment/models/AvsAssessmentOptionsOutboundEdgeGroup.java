// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class that represents the outbound edges from a given node.
 */
@Fluent
public final class AvsAssessmentOptionsOutboundEdgeGroup
    implements JsonSerializable<AvsAssessmentOptionsOutboundEdgeGroup> {
    /*
     * Gets or sets the Azure Locations.
     */
    private List<AzureLocation> targetLocations;

    /*
     * Gets or sets the Azure Currency.
     */
    private List<AzureCurrency> currencies;

    /*
     * Gets or sets the Assessment Savings Options.
     */
    private List<SavingsOptions> savingsOptions;

    /*
     * Gets or sets the Licensing Program.
     */
    private List<LicensingProgram> licensingProgram;

    /*
     * Gets or sets the Avs External Storage Type.
     */
    private List<ExternalStorageType> avsExternalStorageTypes;

    /*
     * Gets or sets the Azure Avs Node Type.
     */
    private List<AzureAvsNodeType> avsNodes;

    /*
     * Gets or sets the Azure SQL service tiers.
     */
    private List<FttAndRaidLevel> failuresToTolerateAndRaidLevelValues;

    /**
     * Creates an instance of AvsAssessmentOptionsOutboundEdgeGroup class.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup() {
    }

    /**
     * Get the targetLocations property: Gets or sets the Azure Locations.
     * 
     * @return the targetLocations value.
     */
    public List<AzureLocation> targetLocations() {
        return this.targetLocations;
    }

    /**
     * Set the targetLocations property: Gets or sets the Azure Locations.
     * 
     * @param targetLocations the targetLocations value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup withTargetLocations(List<AzureLocation> targetLocations) {
        this.targetLocations = targetLocations;
        return this;
    }

    /**
     * Get the currencies property: Gets or sets the Azure Currency.
     * 
     * @return the currencies value.
     */
    public List<AzureCurrency> currencies() {
        return this.currencies;
    }

    /**
     * Set the currencies property: Gets or sets the Azure Currency.
     * 
     * @param currencies the currencies value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup withCurrencies(List<AzureCurrency> currencies) {
        this.currencies = currencies;
        return this;
    }

    /**
     * Get the savingsOptions property: Gets or sets the Assessment Savings Options.
     * 
     * @return the savingsOptions value.
     */
    public List<SavingsOptions> savingsOptions() {
        return this.savingsOptions;
    }

    /**
     * Set the savingsOptions property: Gets or sets the Assessment Savings Options.
     * 
     * @param savingsOptions the savingsOptions value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup withSavingsOptions(List<SavingsOptions> savingsOptions) {
        this.savingsOptions = savingsOptions;
        return this;
    }

    /**
     * Get the licensingProgram property: Gets or sets the Licensing Program.
     * 
     * @return the licensingProgram value.
     */
    public List<LicensingProgram> licensingProgram() {
        return this.licensingProgram;
    }

    /**
     * Set the licensingProgram property: Gets or sets the Licensing Program.
     * 
     * @param licensingProgram the licensingProgram value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup withLicensingProgram(List<LicensingProgram> licensingProgram) {
        this.licensingProgram = licensingProgram;
        return this;
    }

    /**
     * Get the avsExternalStorageTypes property: Gets or sets the Avs External Storage Type.
     * 
     * @return the avsExternalStorageTypes value.
     */
    public List<ExternalStorageType> avsExternalStorageTypes() {
        return this.avsExternalStorageTypes;
    }

    /**
     * Set the avsExternalStorageTypes property: Gets or sets the Avs External Storage Type.
     * 
     * @param avsExternalStorageTypes the avsExternalStorageTypes value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup
        withAvsExternalStorageTypes(List<ExternalStorageType> avsExternalStorageTypes) {
        this.avsExternalStorageTypes = avsExternalStorageTypes;
        return this;
    }

    /**
     * Get the avsNodes property: Gets or sets the Azure Avs Node Type.
     * 
     * @return the avsNodes value.
     */
    public List<AzureAvsNodeType> avsNodes() {
        return this.avsNodes;
    }

    /**
     * Set the avsNodes property: Gets or sets the Azure Avs Node Type.
     * 
     * @param avsNodes the avsNodes value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup withAvsNodes(List<AzureAvsNodeType> avsNodes) {
        this.avsNodes = avsNodes;
        return this;
    }

    /**
     * Get the failuresToTolerateAndRaidLevelValues property: Gets or sets the Azure SQL service tiers.
     * 
     * @return the failuresToTolerateAndRaidLevelValues value.
     */
    public List<FttAndRaidLevel> failuresToTolerateAndRaidLevelValues() {
        return this.failuresToTolerateAndRaidLevelValues;
    }

    /**
     * Set the failuresToTolerateAndRaidLevelValues property: Gets or sets the Azure SQL service tiers.
     * 
     * @param failuresToTolerateAndRaidLevelValues the failuresToTolerateAndRaidLevelValues value to set.
     * @return the AvsAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AvsAssessmentOptionsOutboundEdgeGroup
        withFailuresToTolerateAndRaidLevelValues(List<FttAndRaidLevel> failuresToTolerateAndRaidLevelValues) {
        this.failuresToTolerateAndRaidLevelValues = failuresToTolerateAndRaidLevelValues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetLocations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetLocations in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
        if (currencies() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property currencies in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
        if (savingsOptions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property savingsOptions in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
        if (licensingProgram() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property licensingProgram in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
        if (avsExternalStorageTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property avsExternalStorageTypes in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
        if (avsNodes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property avsNodes in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
        if (failuresToTolerateAndRaidLevelValues() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property failuresToTolerateAndRaidLevelValues in model AvsAssessmentOptionsOutboundEdgeGroup"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AvsAssessmentOptionsOutboundEdgeGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("targetLocations", this.targetLocations,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("currencies", this.currencies,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("savingsOptions", this.savingsOptions,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("licensingProgram", this.licensingProgram,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("avsExternalStorageTypes", this.avsExternalStorageTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("avsNodes", this.avsNodes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("failuresToTolerateAndRaidLevelValues", this.failuresToTolerateAndRaidLevelValues,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsAssessmentOptionsOutboundEdgeGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsAssessmentOptionsOutboundEdgeGroup if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvsAssessmentOptionsOutboundEdgeGroup.
     */
    public static AvsAssessmentOptionsOutboundEdgeGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsAssessmentOptionsOutboundEdgeGroup deserializedAvsAssessmentOptionsOutboundEdgeGroup
                = new AvsAssessmentOptionsOutboundEdgeGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetLocations".equals(fieldName)) {
                    List<AzureLocation> targetLocations
                        = reader.readArray(reader1 -> AzureLocation.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.targetLocations = targetLocations;
                } else if ("currencies".equals(fieldName)) {
                    List<AzureCurrency> currencies
                        = reader.readArray(reader1 -> AzureCurrency.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.currencies = currencies;
                } else if ("savingsOptions".equals(fieldName)) {
                    List<SavingsOptions> savingsOptions
                        = reader.readArray(reader1 -> SavingsOptions.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.savingsOptions = savingsOptions;
                } else if ("licensingProgram".equals(fieldName)) {
                    List<LicensingProgram> licensingProgram
                        = reader.readArray(reader1 -> LicensingProgram.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.licensingProgram = licensingProgram;
                } else if ("avsExternalStorageTypes".equals(fieldName)) {
                    List<ExternalStorageType> avsExternalStorageTypes
                        = reader.readArray(reader1 -> ExternalStorageType.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.avsExternalStorageTypes = avsExternalStorageTypes;
                } else if ("avsNodes".equals(fieldName)) {
                    List<AzureAvsNodeType> avsNodes
                        = reader.readArray(reader1 -> AzureAvsNodeType.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.avsNodes = avsNodes;
                } else if ("failuresToTolerateAndRaidLevelValues".equals(fieldName)) {
                    List<FttAndRaidLevel> failuresToTolerateAndRaidLevelValues
                        = reader.readArray(reader1 -> FttAndRaidLevel.fromString(reader1.getString()));
                    deserializedAvsAssessmentOptionsOutboundEdgeGroup.failuresToTolerateAndRaidLevelValues
                        = failuresToTolerateAndRaidLevelValues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsAssessmentOptionsOutboundEdgeGroup;
        });
    }
}
