// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base ARM model of Assessment ARM properties.
 */
@Fluent
public class AssessmentPropertiesBase extends MutableArmResource {
    /*
     * Gets or sets scope parameters to identify inventory items for assessment.
     */
    private AssessmentScopeParameters scope;

    /*
     * Gets the provisioning state.
     */
    private ProvisioningStatus provisioningState;

    /**
     * Creates an instance of AssessmentPropertiesBase class.
     */
    public AssessmentPropertiesBase() {
    }

    /**
     * Get the scope property: Gets or sets scope parameters to identify inventory items for assessment.
     * 
     * @return the scope value.
     */
    public AssessmentScopeParameters scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Gets or sets scope parameters to identify inventory items for assessment.
     * 
     * @param scope the scope value to set.
     * @return the AssessmentPropertiesBase object itself.
     */
    public AssessmentPropertiesBase withScope(AssessmentScopeParameters scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (scope() != null) {
            scope().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("scope", this.scope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentPropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentPropertiesBase if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentPropertiesBase.
     */
    public static AssessmentPropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentPropertiesBase deserializedAssessmentPropertiesBase = new AssessmentPropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAssessmentPropertiesBase.provisioningState
                        = ProvisioningStatus.fromString(reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedAssessmentPropertiesBase.scope = AssessmentScopeParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentPropertiesBase;
        });
    }
}
