// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The cost by storage type.
 */
@Immutable
public final class CostByStorageType implements JsonSerializable<CostByStorageType> {
    /*
     * The storage type.
     */
    private String storageType;

    /*
     * Cost per storage type.
     */
    private Float cost;

    /**
     * Creates an instance of CostByStorageType class.
     */
    public CostByStorageType() {
    }

    /**
     * Get the storageType property: The storage type.
     * 
     * @return the storageType value.
     */
    public String storageType() {
        return this.storageType;
    }

    /**
     * Get the cost property: Cost per storage type.
     * 
     * @return the cost value.
     */
    public Float cost() {
        return this.cost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CostByStorageType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CostByStorageType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CostByStorageType.
     */
    public static CostByStorageType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CostByStorageType deserializedCostByStorageType = new CostByStorageType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageType".equals(fieldName)) {
                    deserializedCostByStorageType.storageType = reader.getString();
                } else if ("cost".equals(fieldName)) {
                    deserializedCostByStorageType.cost = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCostByStorageType;
        });
    }
}
