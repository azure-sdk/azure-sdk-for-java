// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Business case settings.
 */
@Fluent
public final class Settings implements JsonSerializable<Settings> {
    /*
     * Azure settings for a business case.
     */
    private AzureSettings azureSettings;

    /*
     * On-premise settings.
     */
    private OnPremiseSettings onPremiseSettings;

    /*
     * Azure arc settings.
     */
    private AzureArcSettings azureArcSettings;

    /**
     * Creates an instance of Settings class.
     */
    public Settings() {
    }

    /**
     * Get the azureSettings property: Azure settings for a business case.
     * 
     * @return the azureSettings value.
     */
    public AzureSettings azureSettings() {
        return this.azureSettings;
    }

    /**
     * Set the azureSettings property: Azure settings for a business case.
     * 
     * @param azureSettings the azureSettings value to set.
     * @return the Settings object itself.
     */
    public Settings withAzureSettings(AzureSettings azureSettings) {
        this.azureSettings = azureSettings;
        return this;
    }

    /**
     * Get the onPremiseSettings property: On-premise settings.
     * 
     * @return the onPremiseSettings value.
     */
    public OnPremiseSettings onPremiseSettings() {
        return this.onPremiseSettings;
    }

    /**
     * Set the onPremiseSettings property: On-premise settings.
     * 
     * @param onPremiseSettings the onPremiseSettings value to set.
     * @return the Settings object itself.
     */
    public Settings withOnPremiseSettings(OnPremiseSettings onPremiseSettings) {
        this.onPremiseSettings = onPremiseSettings;
        return this;
    }

    /**
     * Get the azureArcSettings property: Azure arc settings.
     * 
     * @return the azureArcSettings value.
     */
    public AzureArcSettings azureArcSettings() {
        return this.azureArcSettings;
    }

    /**
     * Set the azureArcSettings property: Azure arc settings.
     * 
     * @param azureArcSettings the azureArcSettings value to set.
     * @return the Settings object itself.
     */
    public Settings withAzureArcSettings(AzureArcSettings azureArcSettings) {
        this.azureArcSettings = azureArcSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property azureSettings in model Settings"));
        } else {
            azureSettings().validate();
        }
        if (onPremiseSettings() != null) {
            onPremiseSettings().validate();
        }
        if (azureArcSettings() != null) {
            azureArcSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Settings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("azureSettings", this.azureSettings);
        jsonWriter.writeJsonField("onPremiseSettings", this.onPremiseSettings);
        jsonWriter.writeJsonField("azureArcSettings", this.azureArcSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Settings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Settings if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Settings.
     */
    public static Settings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Settings deserializedSettings = new Settings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureSettings".equals(fieldName)) {
                    deserializedSettings.azureSettings = AzureSettings.fromJson(reader);
                } else if ("onPremiseSettings".equals(fieldName)) {
                    deserializedSettings.onPremiseSettings = OnPremiseSettings.fromJson(reader);
                } else if ("azureArcSettings".equals(fieldName)) {
                    deserializedSettings.azureArcSettings = AzureArcSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSettings;
        });
    }
}
