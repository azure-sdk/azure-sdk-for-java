// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Data model of Performance Data Settings.
 */
@Fluent
public final class PerfDataSettings implements JsonSerializable<PerfDataSettings> {
    /*
     * Gets perf data time range.
     */
    private TimeRange timeRange;

    /*
     * Gets or sets perf data start time.
     */
    private OffsetDateTime perfDataStartTime;

    /*
     * Gets or sets perf data end time.
     */
    private OffsetDateTime perfDataEndTime;

    /*
     * Gets percentile utilization for performance data.
     */
    private Percentile percentile;

    /**
     * Creates an instance of PerfDataSettings class.
     */
    public PerfDataSettings() {
    }

    /**
     * Get the timeRange property: Gets perf data time range.
     * 
     * @return the timeRange value.
     */
    public TimeRange timeRange() {
        return this.timeRange;
    }

    /**
     * Set the timeRange property: Gets perf data time range.
     * 
     * @param timeRange the timeRange value to set.
     * @return the PerfDataSettings object itself.
     */
    public PerfDataSettings withTimeRange(TimeRange timeRange) {
        this.timeRange = timeRange;
        return this;
    }

    /**
     * Get the perfDataStartTime property: Gets or sets perf data start time.
     * 
     * @return the perfDataStartTime value.
     */
    public OffsetDateTime perfDataStartTime() {
        return this.perfDataStartTime;
    }

    /**
     * Set the perfDataStartTime property: Gets or sets perf data start time.
     * 
     * @param perfDataStartTime the perfDataStartTime value to set.
     * @return the PerfDataSettings object itself.
     */
    public PerfDataSettings withPerfDataStartTime(OffsetDateTime perfDataStartTime) {
        this.perfDataStartTime = perfDataStartTime;
        return this;
    }

    /**
     * Get the perfDataEndTime property: Gets or sets perf data end time.
     * 
     * @return the perfDataEndTime value.
     */
    public OffsetDateTime perfDataEndTime() {
        return this.perfDataEndTime;
    }

    /**
     * Set the perfDataEndTime property: Gets or sets perf data end time.
     * 
     * @param perfDataEndTime the perfDataEndTime value to set.
     * @return the PerfDataSettings object itself.
     */
    public PerfDataSettings withPerfDataEndTime(OffsetDateTime perfDataEndTime) {
        this.perfDataEndTime = perfDataEndTime;
        return this;
    }

    /**
     * Get the percentile property: Gets percentile utilization for performance data.
     * 
     * @return the percentile value.
     */
    public Percentile percentile() {
        return this.percentile;
    }

    /**
     * Set the percentile property: Gets percentile utilization for performance data.
     * 
     * @param percentile the percentile value to set.
     * @return the PerfDataSettings object itself.
     */
    public PerfDataSettings withPercentile(Percentile percentile) {
        this.percentile = percentile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (timeRange() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property timeRange in model PerfDataSettings"));
        }
        if (percentile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property percentile in model PerfDataSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PerfDataSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timeRange", this.timeRange == null ? null : this.timeRange.toString());
        jsonWriter.writeStringField("percentile", this.percentile == null ? null : this.percentile.toString());
        jsonWriter.writeStringField("perfDataStartTime",
            this.perfDataStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.perfDataStartTime));
        jsonWriter.writeStringField("perfDataEndTime",
            this.perfDataEndTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.perfDataEndTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PerfDataSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PerfDataSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PerfDataSettings.
     */
    public static PerfDataSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PerfDataSettings deserializedPerfDataSettings = new PerfDataSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeRange".equals(fieldName)) {
                    deserializedPerfDataSettings.timeRange = TimeRange.fromString(reader.getString());
                } else if ("percentile".equals(fieldName)) {
                    deserializedPerfDataSettings.percentile = Percentile.fromString(reader.getString());
                } else if ("perfDataStartTime".equals(fieldName)) {
                    deserializedPerfDataSettings.perfDataStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("perfDataEndTime".equals(fieldName)) {
                    deserializedPerfDataSettings.perfDataEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPerfDataSettings;
        });
    }
}
