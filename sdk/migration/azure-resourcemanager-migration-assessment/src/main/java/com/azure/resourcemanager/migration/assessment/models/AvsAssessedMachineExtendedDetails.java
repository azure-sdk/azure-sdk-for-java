// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The avs assessed machine extended details.
 */
@Immutable
public final class AvsAssessedMachineExtendedDetails implements JsonSerializable<AvsAssessedMachineExtendedDetails> {
    /*
     * List of errors for this machine.
     */
    private List<Error> errors;

    /*
     * List of Disks that were assessed as part of this machine's assessment.
     */
    private List<AvsAssessedDiskV2> disks;

    /*
     * List of Network Adapters that were assessed as part of this machine's
     * assessment.
     */
    private List<AvsAssessedNetworkAdapter> networkAdapters;

    /*
     * Gets the storage in use.
     */
    private Float storageInUseGB;

    /*
     * Boot type of machine discovered in private data center.
     */
    private MachineBootType bootType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemName;

    /*
     * Operating system version as reported by datacenter management solution.
     */
    private String operatingSystemVersion;

    /*
     * Operating system architecture as reported by datacenter management solution.
     */
    private GuestOperatingSystemArchitecture operatingSystemArchitecture;

    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /*
     * Description for the machine.
     */
    private String description;

    /*
     * Data center management server name.
     */
    private String datacenterManagementServerName;

    /*
     * Megabytes of memory found allocated for the machine in private data center.
     */
    private Float megabytesOfMemory;

    /*
     * Number of CPU cores found on the machine.
     */
    private Integer numberOfCores;

    /*
     * Percentile of Percentage of Cores Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageCoresUtilization;

    /*
     * Percentile of Percentage of Memory Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageMemoryUtilization;

    /*
     * Gets the Avs Target Type for Machine.
     */
    private AzureAvsNodeType avsTargetNode;

    /**
     * Creates an instance of AvsAssessedMachineExtendedDetails class.
     */
    public AvsAssessedMachineExtendedDetails() {
    }

    /**
     * Get the errors property: List of errors for this machine.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Get the disks property: List of Disks that were assessed as part of this machine's assessment.
     * 
     * @return the disks value.
     */
    public List<AvsAssessedDiskV2> disks() {
        return this.disks;
    }

    /**
     * Get the networkAdapters property: List of Network Adapters that were assessed as part of this machine's
     * assessment.
     * 
     * @return the networkAdapters value.
     */
    public List<AvsAssessedNetworkAdapter> networkAdapters() {
        return this.networkAdapters;
    }

    /**
     * Get the storageInUseGB property: Gets the storage in use.
     * 
     * @return the storageInUseGB value.
     */
    public Float storageInUseGB() {
        return this.storageInUseGB;
    }

    /**
     * Get the bootType property: Boot type of machine discovered in private data center.
     * 
     * @return the bootType value.
     */
    public MachineBootType bootType() {
        return this.bootType;
    }

    /**
     * Get the operatingSystemType property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemType value.
     */
    public String operatingSystemType() {
        return this.operatingSystemType;
    }

    /**
     * Get the operatingSystemName property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemName value.
     */
    public String operatingSystemName() {
        return this.operatingSystemName;
    }

    /**
     * Get the operatingSystemVersion property: Operating system version as reported by datacenter management solution.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Get the operatingSystemArchitecture property: Operating system architecture as reported by datacenter management
     * solution.
     * 
     * @return the operatingSystemArchitecture value.
     */
    public GuestOperatingSystemArchitecture operatingSystemArchitecture() {
        return this.operatingSystemArchitecture;
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Description for the machine.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the datacenterManagementServerName property: Data center management server name.
     * 
     * @return the datacenterManagementServerName value.
     */
    public String datacenterManagementServerName() {
        return this.datacenterManagementServerName;
    }

    /**
     * Get the megabytesOfMemory property: Megabytes of memory found allocated for the machine in private data center.
     * 
     * @return the megabytesOfMemory value.
     */
    public Float megabytesOfMemory() {
        return this.megabytesOfMemory;
    }

    /**
     * Get the numberOfCores property: Number of CPU cores found on the machine.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Get the percentageCoresUtilization property: Percentile of Percentage of Cores Utilized noted during time period
     * T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the percentageMemoryUtilization property: Percentile of Percentage of Memory Utilized noted during time
     * period T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageMemoryUtilization value.
     */
    public Float percentageMemoryUtilization() {
        return this.percentageMemoryUtilization;
    }

    /**
     * Get the avsTargetNode property: Gets the Avs Target Type for Machine.
     * 
     * @return the avsTargetNode value.
     */
    public AzureAvsNodeType avsTargetNode() {
        return this.avsTargetNode;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (networkAdapters() != null) {
            networkAdapters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsAssessedMachineExtendedDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsAssessedMachineExtendedDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsAssessedMachineExtendedDetails.
     */
    public static AvsAssessedMachineExtendedDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsAssessedMachineExtendedDetails deserializedAvsAssessedMachineExtendedDetails
                = new AvsAssessedMachineExtendedDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedAvsAssessedMachineExtendedDetails.errors = errors;
                } else if ("disks".equals(fieldName)) {
                    List<AvsAssessedDiskV2> disks = reader.readArray(reader1 -> AvsAssessedDiskV2.fromJson(reader1));
                    deserializedAvsAssessedMachineExtendedDetails.disks = disks;
                } else if ("networkAdapters".equals(fieldName)) {
                    List<AvsAssessedNetworkAdapter> networkAdapters
                        = reader.readArray(reader1 -> AvsAssessedNetworkAdapter.fromJson(reader1));
                    deserializedAvsAssessedMachineExtendedDetails.networkAdapters = networkAdapters;
                } else if ("storageInUseGB".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.storageInUseGB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("bootType".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.bootType
                        = MachineBootType.fromString(reader.getString());
                } else if ("operatingSystemType".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.operatingSystemType = reader.getString();
                } else if ("operatingSystemName".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.operatingSystemName = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.operatingSystemVersion = reader.getString();
                } else if ("operatingSystemArchitecture".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.operatingSystemArchitecture
                        = GuestOperatingSystemArchitecture.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.description = reader.getString();
                } else if ("datacenterManagementServerName".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.datacenterManagementServerName = reader.getString();
                } else if ("megabytesOfMemory".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.megabytesOfMemory
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.numberOfCores
                        = reader.getNullable(JsonReader::getInt);
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageMemoryUtilization".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.percentageMemoryUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("avsTargetNode".equals(fieldName)) {
                    deserializedAvsAssessedMachineExtendedDetails.avsTargetNode
                        = AzureAvsNodeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsAssessedMachineExtendedDetails;
        });
    }
}
