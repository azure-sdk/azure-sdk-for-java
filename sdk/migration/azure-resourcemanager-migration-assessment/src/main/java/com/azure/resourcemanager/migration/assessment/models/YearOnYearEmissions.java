// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Year on Year Emissions.
 */
@Fluent
public final class YearOnYearEmissions implements JsonSerializable<YearOnYearEmissions> {
    /*
     * Year value.
     */
    private Year year;

    /*
     * Emissions for the specified year.
     */
    private Float emissions;

    /**
     * Creates an instance of YearOnYearEmissions class.
     */
    public YearOnYearEmissions() {
    }

    /**
     * Get the year property: Year value.
     * 
     * @return the year value.
     */
    public Year year() {
        return this.year;
    }

    /**
     * Set the year property: Year value.
     * 
     * @param year the year value to set.
     * @return the YearOnYearEmissions object itself.
     */
    public YearOnYearEmissions withYear(Year year) {
        this.year = year;
        return this;
    }

    /**
     * Get the emissions property: Emissions for the specified year.
     * 
     * @return the emissions value.
     */
    public Float emissions() {
        return this.emissions;
    }

    /**
     * Set the emissions property: Emissions for the specified year.
     * 
     * @param emissions the emissions value to set.
     * @return the YearOnYearEmissions object itself.
     */
    public YearOnYearEmissions withEmissions(Float emissions) {
        this.emissions = emissions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (year() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property year in model YearOnYearEmissions"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(YearOnYearEmissions.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("year", this.year == null ? null : this.year.toString());
        jsonWriter.writeNumberField("emissions", this.emissions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of YearOnYearEmissions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of YearOnYearEmissions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the YearOnYearEmissions.
     */
    public static YearOnYearEmissions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            YearOnYearEmissions deserializedYearOnYearEmissions = new YearOnYearEmissions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("year".equals(fieldName)) {
                    deserializedYearOnYearEmissions.year = Year.fromString(reader.getString());
                } else if ("emissions".equals(fieldName)) {
                    deserializedYearOnYearEmissions.emissions = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedYearOnYearEmissions;
        });
    }
}
