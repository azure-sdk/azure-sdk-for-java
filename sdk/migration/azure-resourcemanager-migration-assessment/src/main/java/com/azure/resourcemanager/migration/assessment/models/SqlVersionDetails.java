// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SQL version details.
 */
@Immutable
public final class SqlVersionDetails implements JsonSerializable<SqlVersionDetails> {
    /*
     * The SQL version.
     */
    private String sqlVersion;

    /*
     * Number of instances with the above SQL version.
     */
    private Integer numberOfInstances;

    /**
     * Creates an instance of SqlVersionDetails class.
     */
    public SqlVersionDetails() {
    }

    /**
     * Get the sqlVersion property: The SQL version.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.sqlVersion;
    }

    /**
     * Get the numberOfInstances property: Number of instances with the above SQL version.
     * 
     * @return the numberOfInstances value.
     */
    public Integer numberOfInstances() {
        return this.numberOfInstances;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVersionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVersionDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlVersionDetails.
     */
    public static SqlVersionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVersionDetails deserializedSqlVersionDetails = new SqlVersionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sqlVersion".equals(fieldName)) {
                    deserializedSqlVersionDetails.sqlVersion = reader.getString();
                } else if ("numberOfInstances".equals(fieldName)) {
                    deserializedSqlVersionDetails.numberOfInstances = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVersionDetails;
        });
    }
}
