// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Common properties for all azure tracked and proxy resources.
 */
@Immutable
public class AzureResourceProperties2 implements JsonSerializable<AzureResourceProperties2> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState2 provisioningState;

    /**
     * Creates an instance of AzureResourceProperties2 class.
     */
    public AzureResourceProperties2() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState2 provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The status of the last operation.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the AzureResourceProperties2 object itself.
     */
    AzureResourceProperties2 withProvisioningState(ProvisioningState2 provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureResourceProperties2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureResourceProperties2 if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureResourceProperties2.
     */
    public static AzureResourceProperties2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureResourceProperties2 deserializedAzureResourceProperties2 = new AzureResourceProperties2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAzureResourceProperties2.provisioningState
                        = ProvisioningState2.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureResourceProperties2;
        });
    }
}
