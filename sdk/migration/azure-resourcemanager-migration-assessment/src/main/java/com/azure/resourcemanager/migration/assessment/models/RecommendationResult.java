// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Recommendation Result.
 */
@Immutable
public final class RecommendationResult implements JsonSerializable<RecommendationResult> {
    /*
     * Gets cores and memory request.
     */
    private ComputeResource request;

    /*
     * Gets cores and memory limit.
     */
    private ComputeResource limit;

    /*
     * Gets cluster name.
     */
    private String clusterName;

    /**
     * Creates an instance of RecommendationResult class.
     */
    public RecommendationResult() {
    }

    /**
     * Get the request property: Gets cores and memory request.
     * 
     * @return the request value.
     */
    public ComputeResource request() {
        return this.request;
    }

    /**
     * Get the limit property: Gets cores and memory limit.
     * 
     * @return the limit value.
     */
    public ComputeResource limit() {
        return this.limit;
    }

    /**
     * Get the clusterName property: Gets cluster name.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (request() != null) {
            request().validate();
        }
        if (limit() != null) {
            limit().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendationResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecommendationResult.
     */
    public static RecommendationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationResult deserializedRecommendationResult = new RecommendationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("request".equals(fieldName)) {
                    deserializedRecommendationResult.request = ComputeResource.fromJson(reader);
                } else if ("limit".equals(fieldName)) {
                    deserializedRecommendationResult.limit = ComputeResource.fromJson(reader);
                } else if ("clusterName".equals(fieldName)) {
                    deserializedRecommendationResult.clusterName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendationResult;
        });
    }
}
