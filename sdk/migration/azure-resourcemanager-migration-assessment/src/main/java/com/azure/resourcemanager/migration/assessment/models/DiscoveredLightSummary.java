// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Summary of the compound assessment.
 */
@Fluent
public final class DiscoveredLightSummary implements JsonSerializable<DiscoveredLightSummary> {
    /*
     * Number of web apps.
     */
    private int numberOfWebApps;

    /*
     * Number of web apps per type.
     */
    private List<WebAppsPerType> numberOfWebAppsPerType;

    /*
     * Number of web servers per type.
     */
    private List<WebServersPerType> numberOfWebServersPerType;

    /*
     * Number of web servers.
     */
    private int numberOfWebServers;

    /*
     * Number of servers.
     */
    private int numberOfServers;

    /**
     * Creates an instance of DiscoveredLightSummary class.
     */
    public DiscoveredLightSummary() {
    }

    /**
     * Get the numberOfWebApps property: Number of web apps.
     * 
     * @return the numberOfWebApps value.
     */
    public int numberOfWebApps() {
        return this.numberOfWebApps;
    }

    /**
     * Set the numberOfWebApps property: Number of web apps.
     * 
     * @param numberOfWebApps the numberOfWebApps value to set.
     * @return the DiscoveredLightSummary object itself.
     */
    public DiscoveredLightSummary withNumberOfWebApps(int numberOfWebApps) {
        this.numberOfWebApps = numberOfWebApps;
        return this;
    }

    /**
     * Get the numberOfWebAppsPerType property: Number of web apps per type.
     * 
     * @return the numberOfWebAppsPerType value.
     */
    public List<WebAppsPerType> numberOfWebAppsPerType() {
        return this.numberOfWebAppsPerType;
    }

    /**
     * Set the numberOfWebAppsPerType property: Number of web apps per type.
     * 
     * @param numberOfWebAppsPerType the numberOfWebAppsPerType value to set.
     * @return the DiscoveredLightSummary object itself.
     */
    public DiscoveredLightSummary withNumberOfWebAppsPerType(List<WebAppsPerType> numberOfWebAppsPerType) {
        this.numberOfWebAppsPerType = numberOfWebAppsPerType;
        return this;
    }

    /**
     * Get the numberOfWebServersPerType property: Number of web servers per type.
     * 
     * @return the numberOfWebServersPerType value.
     */
    public List<WebServersPerType> numberOfWebServersPerType() {
        return this.numberOfWebServersPerType;
    }

    /**
     * Set the numberOfWebServersPerType property: Number of web servers per type.
     * 
     * @param numberOfWebServersPerType the numberOfWebServersPerType value to set.
     * @return the DiscoveredLightSummary object itself.
     */
    public DiscoveredLightSummary withNumberOfWebServersPerType(List<WebServersPerType> numberOfWebServersPerType) {
        this.numberOfWebServersPerType = numberOfWebServersPerType;
        return this;
    }

    /**
     * Get the numberOfWebServers property: Number of web servers.
     * 
     * @return the numberOfWebServers value.
     */
    public int numberOfWebServers() {
        return this.numberOfWebServers;
    }

    /**
     * Set the numberOfWebServers property: Number of web servers.
     * 
     * @param numberOfWebServers the numberOfWebServers value to set.
     * @return the DiscoveredLightSummary object itself.
     */
    public DiscoveredLightSummary withNumberOfWebServers(int numberOfWebServers) {
        this.numberOfWebServers = numberOfWebServers;
        return this;
    }

    /**
     * Get the numberOfServers property: Number of servers.
     * 
     * @return the numberOfServers value.
     */
    public int numberOfServers() {
        return this.numberOfServers;
    }

    /**
     * Set the numberOfServers property: Number of servers.
     * 
     * @param numberOfServers the numberOfServers value to set.
     * @return the DiscoveredLightSummary object itself.
     */
    public DiscoveredLightSummary withNumberOfServers(int numberOfServers) {
        this.numberOfServers = numberOfServers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (numberOfWebAppsPerType() != null) {
            numberOfWebAppsPerType().forEach(e -> e.validate());
        }
        if (numberOfWebServersPerType() != null) {
            numberOfWebServersPerType().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("numberOfWebApps", this.numberOfWebApps);
        jsonWriter.writeIntField("numberOfWebServers", this.numberOfWebServers);
        jsonWriter.writeIntField("numberOfServers", this.numberOfServers);
        jsonWriter.writeArrayField("numberOfWebAppsPerType", this.numberOfWebAppsPerType,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("numberOfWebServersPerType", this.numberOfWebServersPerType,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveredLightSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveredLightSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoveredLightSummary.
     */
    public static DiscoveredLightSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveredLightSummary deserializedDiscoveredLightSummary = new DiscoveredLightSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfWebApps".equals(fieldName)) {
                    deserializedDiscoveredLightSummary.numberOfWebApps = reader.getInt();
                } else if ("numberOfWebServers".equals(fieldName)) {
                    deserializedDiscoveredLightSummary.numberOfWebServers = reader.getInt();
                } else if ("numberOfServers".equals(fieldName)) {
                    deserializedDiscoveredLightSummary.numberOfServers = reader.getInt();
                } else if ("numberOfWebAppsPerType".equals(fieldName)) {
                    List<WebAppsPerType> numberOfWebAppsPerType
                        = reader.readArray(reader1 -> WebAppsPerType.fromJson(reader1));
                    deserializedDiscoveredLightSummary.numberOfWebAppsPerType = numberOfWebAppsPerType;
                } else if ("numberOfWebServersPerType".equals(fieldName)) {
                    List<WebServersPerType> numberOfWebServersPerType
                        = reader.readArray(reader1 -> WebServersPerType.fromJson(reader1));
                    deserializedDiscoveredLightSummary.numberOfWebServersPerType = numberOfWebServersPerType;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveredLightSummary;
        });
    }
}
