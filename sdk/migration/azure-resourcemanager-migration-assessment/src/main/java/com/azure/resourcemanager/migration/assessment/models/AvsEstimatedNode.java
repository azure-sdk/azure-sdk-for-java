// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details on the Estimated nodes for AVS Assessment.
 */
@Fluent
public final class AvsEstimatedNode implements JsonSerializable<AvsEstimatedNode> {
    /*
     * Total monthly cost for type and number of nodes.
     */
    private Float monthlyPrice;

    /*
     * Recommended SKU.
     */
    private AzureAvsNodeType nodeType;

    /*
     * Number of nodes that will be needed.
     */
    private Integer nodeNumber;

    /*
     * Predicted CPU utilization.
     */
    private Float cpuUtilization;

    /*
     * Predicted RAM utilization.
     */
    private Float ramUtilization;

    /*
     * Predicted storage utilization.
     */
    private Float storageUtilization;

    /*
     * Predicted total CPU cores across the set of nodes.
     */
    private Float totalCpu;

    /*
     * Predicted total RAM used in GB.
     */
    private Float totalRam;

    /*
     * Predicted total Storage used in GB.
     */
    private Float totalStorage;

    /*
     * Pricing model indicates what hour multiplier to use while estimating the Nodes cost.
     */
    private AzureReservedInstance pricingModel;

    /*
     * FttRaidLevel recommended for Node.
     */
    private FttAndRaidLevel fttRaidLevel;

    /**
     * Creates an instance of AvsEstimatedNode class.
     */
    public AvsEstimatedNode() {
    }

    /**
     * Get the monthlyPrice property: Total monthly cost for type and number of nodes.
     * 
     * @return the monthlyPrice value.
     */
    public Float monthlyPrice() {
        return this.monthlyPrice;
    }

    /**
     * Set the monthlyPrice property: Total monthly cost for type and number of nodes.
     * 
     * @param monthlyPrice the monthlyPrice value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withMonthlyPrice(Float monthlyPrice) {
        this.monthlyPrice = monthlyPrice;
        return this;
    }

    /**
     * Get the nodeType property: Recommended SKU.
     * 
     * @return the nodeType value.
     */
    public AzureAvsNodeType nodeType() {
        return this.nodeType;
    }

    /**
     * Set the nodeType property: Recommended SKU.
     * 
     * @param nodeType the nodeType value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withNodeType(AzureAvsNodeType nodeType) {
        this.nodeType = nodeType;
        return this;
    }

    /**
     * Get the nodeNumber property: Number of nodes that will be needed.
     * 
     * @return the nodeNumber value.
     */
    public Integer nodeNumber() {
        return this.nodeNumber;
    }

    /**
     * Set the nodeNumber property: Number of nodes that will be needed.
     * 
     * @param nodeNumber the nodeNumber value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withNodeNumber(Integer nodeNumber) {
        this.nodeNumber = nodeNumber;
        return this;
    }

    /**
     * Get the cpuUtilization property: Predicted CPU utilization.
     * 
     * @return the cpuUtilization value.
     */
    public Float cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Set the cpuUtilization property: Predicted CPU utilization.
     * 
     * @param cpuUtilization the cpuUtilization value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withCpuUtilization(Float cpuUtilization) {
        this.cpuUtilization = cpuUtilization;
        return this;
    }

    /**
     * Get the ramUtilization property: Predicted RAM utilization.
     * 
     * @return the ramUtilization value.
     */
    public Float ramUtilization() {
        return this.ramUtilization;
    }

    /**
     * Set the ramUtilization property: Predicted RAM utilization.
     * 
     * @param ramUtilization the ramUtilization value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withRamUtilization(Float ramUtilization) {
        this.ramUtilization = ramUtilization;
        return this;
    }

    /**
     * Get the storageUtilization property: Predicted storage utilization.
     * 
     * @return the storageUtilization value.
     */
    public Float storageUtilization() {
        return this.storageUtilization;
    }

    /**
     * Set the storageUtilization property: Predicted storage utilization.
     * 
     * @param storageUtilization the storageUtilization value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withStorageUtilization(Float storageUtilization) {
        this.storageUtilization = storageUtilization;
        return this;
    }

    /**
     * Get the totalCpu property: Predicted total CPU cores across the set of nodes.
     * 
     * @return the totalCpu value.
     */
    public Float totalCpu() {
        return this.totalCpu;
    }

    /**
     * Set the totalCpu property: Predicted total CPU cores across the set of nodes.
     * 
     * @param totalCpu the totalCpu value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withTotalCpu(Float totalCpu) {
        this.totalCpu = totalCpu;
        return this;
    }

    /**
     * Get the totalRam property: Predicted total RAM used in GB.
     * 
     * @return the totalRam value.
     */
    public Float totalRam() {
        return this.totalRam;
    }

    /**
     * Set the totalRam property: Predicted total RAM used in GB.
     * 
     * @param totalRam the totalRam value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withTotalRam(Float totalRam) {
        this.totalRam = totalRam;
        return this;
    }

    /**
     * Get the totalStorage property: Predicted total Storage used in GB.
     * 
     * @return the totalStorage value.
     */
    public Float totalStorage() {
        return this.totalStorage;
    }

    /**
     * Set the totalStorage property: Predicted total Storage used in GB.
     * 
     * @param totalStorage the totalStorage value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withTotalStorage(Float totalStorage) {
        this.totalStorage = totalStorage;
        return this;
    }

    /**
     * Get the pricingModel property: Pricing model indicates what hour multiplier to use while estimating the Nodes
     * cost.
     * 
     * @return the pricingModel value.
     */
    public AzureReservedInstance pricingModel() {
        return this.pricingModel;
    }

    /**
     * Set the pricingModel property: Pricing model indicates what hour multiplier to use while estimating the Nodes
     * cost.
     * 
     * @param pricingModel the pricingModel value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withPricingModel(AzureReservedInstance pricingModel) {
        this.pricingModel = pricingModel;
        return this;
    }

    /**
     * Get the fttRaidLevel property: FttRaidLevel recommended for Node.
     * 
     * @return the fttRaidLevel value.
     */
    public FttAndRaidLevel fttRaidLevel() {
        return this.fttRaidLevel;
    }

    /**
     * Set the fttRaidLevel property: FttRaidLevel recommended for Node.
     * 
     * @param fttRaidLevel the fttRaidLevel value to set.
     * @return the AvsEstimatedNode object itself.
     */
    public AvsEstimatedNode withFttRaidLevel(FttAndRaidLevel fttRaidLevel) {
        this.fttRaidLevel = fttRaidLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("monthlyPrice", this.monthlyPrice);
        jsonWriter.writeStringField("nodeType", this.nodeType == null ? null : this.nodeType.toString());
        jsonWriter.writeNumberField("nodeNumber", this.nodeNumber);
        jsonWriter.writeNumberField("cpuUtilization", this.cpuUtilization);
        jsonWriter.writeNumberField("ramUtilization", this.ramUtilization);
        jsonWriter.writeNumberField("storageUtilization", this.storageUtilization);
        jsonWriter.writeNumberField("totalCpu", this.totalCpu);
        jsonWriter.writeNumberField("totalRam", this.totalRam);
        jsonWriter.writeNumberField("totalStorage", this.totalStorage);
        jsonWriter.writeStringField("pricingModel", this.pricingModel == null ? null : this.pricingModel.toString());
        jsonWriter.writeStringField("fttRaidLevel", this.fttRaidLevel == null ? null : this.fttRaidLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsEstimatedNode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsEstimatedNode if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsEstimatedNode.
     */
    public static AvsEstimatedNode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsEstimatedNode deserializedAvsEstimatedNode = new AvsEstimatedNode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("monthlyPrice".equals(fieldName)) {
                    deserializedAvsEstimatedNode.monthlyPrice = reader.getNullable(JsonReader::getFloat);
                } else if ("nodeType".equals(fieldName)) {
                    deserializedAvsEstimatedNode.nodeType = AzureAvsNodeType.fromString(reader.getString());
                } else if ("nodeNumber".equals(fieldName)) {
                    deserializedAvsEstimatedNode.nodeNumber = reader.getNullable(JsonReader::getInt);
                } else if ("cpuUtilization".equals(fieldName)) {
                    deserializedAvsEstimatedNode.cpuUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("ramUtilization".equals(fieldName)) {
                    deserializedAvsEstimatedNode.ramUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("storageUtilization".equals(fieldName)) {
                    deserializedAvsEstimatedNode.storageUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("totalCpu".equals(fieldName)) {
                    deserializedAvsEstimatedNode.totalCpu = reader.getNullable(JsonReader::getFloat);
                } else if ("totalRam".equals(fieldName)) {
                    deserializedAvsEstimatedNode.totalRam = reader.getNullable(JsonReader::getFloat);
                } else if ("totalStorage".equals(fieldName)) {
                    deserializedAvsEstimatedNode.totalStorage = reader.getNullable(JsonReader::getFloat);
                } else if ("pricingModel".equals(fieldName)) {
                    deserializedAvsEstimatedNode.pricingModel = AzureReservedInstance.fromString(reader.getString());
                } else if ("fttRaidLevel".equals(fieldName)) {
                    deserializedAvsEstimatedNode.fttRaidLevel = FttAndRaidLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsEstimatedNode;
        });
    }
}
