// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Recommendations for assessed sql entities.
 */
@Fluent
public final class SqlEntityRecommendations implements JsonSerializable<SqlEntityRecommendations> {
    /*
     * The configuration data.
     */
    private Configuration configuration;

    /*
     * The recommended details.
     */
    private RecommendedFor recommendedFor;

    /*
     * The migration Platform.
     */
    private MigrationPlatform migrationPlatform;

    /*
     * The confidence score.
     */
    private Float confidenceScore;

    /*
     * The migration suitability.
     */
    private MigrationSuitability migrationSuitability;

    /*
     * The security suitability.
     */
    private SecuritySuitability securitySuitability;

    /*
     * The total cost details.
     */
    private List<CostDetailsCommon> totalCost;

    /*
     * The total cost details.
     */
    private List<SavingsDetailsCommon> totalSavings;

    /*
     * The migration issues list.
     */
    private List<SqlAssessmentMigrationIssue> migrationIssues;

    /*
     * The Skus list.
     */
    private List<SqlEntityRecommendationsSkusItem> skus;

    /*
     * Gets a value indicating whether replicas should be provisioned.
     */
    private Boolean shouldProvisionReplicas;

    /*
     * Gets the replication mode.
     */
    private SkuReplicationMode skuReplicationMode;

    /*
     * Gets the list of migration guidelines applicable to this target.
     */
    private List<SqlMigrationGuideline> migrationGuidelines;

    /*
     * The product support status.
     */
    private List<SqlRecommendationReasoning> recommendationReasonings;

    /*
     * Gets the migration target platform.
     */
    private TargetType migrationTargetPlatform;

    /*
     * Gets or sets the machine assessment ARM ID for VM fallback.
     */
    private String fallbackMachineAssessmentArmId;

    /**
     * Creates an instance of SqlEntityRecommendations class.
     */
    public SqlEntityRecommendations() {
    }

    /**
     * Get the configuration property: The configuration data.
     * 
     * @return the configuration value.
     */
    public Configuration configuration() {
        return this.configuration;
    }

    /**
     * Get the recommendedFor property: The recommended details.
     * 
     * @return the recommendedFor value.
     */
    public RecommendedFor recommendedFor() {
        return this.recommendedFor;
    }

    /**
     * Get the migrationPlatform property: The migration Platform.
     * 
     * @return the migrationPlatform value.
     */
    public MigrationPlatform migrationPlatform() {
        return this.migrationPlatform;
    }

    /**
     * Get the confidenceScore property: The confidence score.
     * 
     * @return the confidenceScore value.
     */
    public Float confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the migrationSuitability property: The migration suitability.
     * 
     * @return the migrationSuitability value.
     */
    public MigrationSuitability migrationSuitability() {
        return this.migrationSuitability;
    }

    /**
     * Get the securitySuitability property: The security suitability.
     * 
     * @return the securitySuitability value.
     */
    public SecuritySuitability securitySuitability() {
        return this.securitySuitability;
    }

    /**
     * Get the totalCost property: The total cost details.
     * 
     * @return the totalCost value.
     */
    public List<CostDetailsCommon> totalCost() {
        return this.totalCost;
    }

    /**
     * Get the totalSavings property: The total cost details.
     * 
     * @return the totalSavings value.
     */
    public List<SavingsDetailsCommon> totalSavings() {
        return this.totalSavings;
    }

    /**
     * Get the migrationIssues property: The migration issues list.
     * 
     * @return the migrationIssues value.
     */
    public List<SqlAssessmentMigrationIssue> migrationIssues() {
        return this.migrationIssues;
    }

    /**
     * Get the skus property: The Skus list.
     * 
     * @return the skus value.
     */
    public List<SqlEntityRecommendationsSkusItem> skus() {
        return this.skus;
    }

    /**
     * Get the shouldProvisionReplicas property: Gets a value indicating whether replicas should be provisioned.
     * 
     * @return the shouldProvisionReplicas value.
     */
    public Boolean shouldProvisionReplicas() {
        return this.shouldProvisionReplicas;
    }

    /**
     * Get the skuReplicationMode property: Gets the replication mode.
     * 
     * @return the skuReplicationMode value.
     */
    public SkuReplicationMode skuReplicationMode() {
        return this.skuReplicationMode;
    }

    /**
     * Get the migrationGuidelines property: Gets the list of migration guidelines applicable to this target.
     * 
     * @return the migrationGuidelines value.
     */
    public List<SqlMigrationGuideline> migrationGuidelines() {
        return this.migrationGuidelines;
    }

    /**
     * Get the recommendationReasonings property: The product support status.
     * 
     * @return the recommendationReasonings value.
     */
    public List<SqlRecommendationReasoning> recommendationReasonings() {
        return this.recommendationReasonings;
    }

    /**
     * Get the migrationTargetPlatform property: Gets the migration target platform.
     * 
     * @return the migrationTargetPlatform value.
     */
    public TargetType migrationTargetPlatform() {
        return this.migrationTargetPlatform;
    }

    /**
     * Get the fallbackMachineAssessmentArmId property: Gets or sets the machine assessment ARM ID for VM fallback.
     * 
     * @return the fallbackMachineAssessmentArmId value.
     */
    public String fallbackMachineAssessmentArmId() {
        return this.fallbackMachineAssessmentArmId;
    }

    /**
     * Set the fallbackMachineAssessmentArmId property: Gets or sets the machine assessment ARM ID for VM fallback.
     * 
     * @param fallbackMachineAssessmentArmId the fallbackMachineAssessmentArmId value to set.
     * @return the SqlEntityRecommendations object itself.
     */
    public SqlEntityRecommendations withFallbackMachineAssessmentArmId(String fallbackMachineAssessmentArmId) {
        this.fallbackMachineAssessmentArmId = fallbackMachineAssessmentArmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (configuration() != null) {
            configuration().validate();
        }
        if (recommendedFor() != null) {
            recommendedFor().validate();
        }
        if (migrationSuitability() != null) {
            migrationSuitability().validate();
        }
        if (securitySuitability() != null) {
            securitySuitability().validate();
        }
        if (totalCost() != null) {
            totalCost().forEach(e -> e.validate());
        }
        if (totalSavings() != null) {
            totalSavings().forEach(e -> e.validate());
        }
        if (migrationIssues() != null) {
            migrationIssues().forEach(e -> e.validate());
        }
        if (skus() != null) {
            skus().forEach(e -> e.validate());
        }
        if (migrationGuidelines() != null) {
            migrationGuidelines().forEach(e -> e.validate());
        }
        if (recommendationReasonings() != null) {
            recommendationReasonings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fallbackMachineAssessmentArmId", this.fallbackMachineAssessmentArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlEntityRecommendations from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlEntityRecommendations if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlEntityRecommendations.
     */
    public static SqlEntityRecommendations fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlEntityRecommendations deserializedSqlEntityRecommendations = new SqlEntityRecommendations();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.configuration = Configuration.fromJson(reader);
                } else if ("recommendedFor".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.recommendedFor = RecommendedFor.fromJson(reader);
                } else if ("migrationPlatform".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.migrationPlatform
                        = MigrationPlatform.fromString(reader.getString());
                } else if ("confidenceScore".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.confidenceScore = reader.getNullable(JsonReader::getFloat);
                } else if ("migrationSuitability".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.migrationSuitability = MigrationSuitability.fromJson(reader);
                } else if ("securitySuitability".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.securitySuitability = SecuritySuitability.fromJson(reader);
                } else if ("totalCost".equals(fieldName)) {
                    List<CostDetailsCommon> totalCost
                        = reader.readArray(reader1 -> CostDetailsCommon.fromJson(reader1));
                    deserializedSqlEntityRecommendations.totalCost = totalCost;
                } else if ("totalSavings".equals(fieldName)) {
                    List<SavingsDetailsCommon> totalSavings
                        = reader.readArray(reader1 -> SavingsDetailsCommon.fromJson(reader1));
                    deserializedSqlEntityRecommendations.totalSavings = totalSavings;
                } else if ("migrationIssues".equals(fieldName)) {
                    List<SqlAssessmentMigrationIssue> migrationIssues
                        = reader.readArray(reader1 -> SqlAssessmentMigrationIssue.fromJson(reader1));
                    deserializedSqlEntityRecommendations.migrationIssues = migrationIssues;
                } else if ("skus".equals(fieldName)) {
                    List<SqlEntityRecommendationsSkusItem> skus
                        = reader.readArray(reader1 -> SqlEntityRecommendationsSkusItem.fromJson(reader1));
                    deserializedSqlEntityRecommendations.skus = skus;
                } else if ("shouldProvisionReplicas".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.shouldProvisionReplicas
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("skuReplicationMode".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.skuReplicationMode
                        = SkuReplicationMode.fromString(reader.getString());
                } else if ("migrationGuidelines".equals(fieldName)) {
                    List<SqlMigrationGuideline> migrationGuidelines
                        = reader.readArray(reader1 -> SqlMigrationGuideline.fromJson(reader1));
                    deserializedSqlEntityRecommendations.migrationGuidelines = migrationGuidelines;
                } else if ("recommendationReasonings".equals(fieldName)) {
                    List<SqlRecommendationReasoning> recommendationReasonings
                        = reader.readArray(reader1 -> SqlRecommendationReasoning.fromJson(reader1));
                    deserializedSqlEntityRecommendations.recommendationReasonings = recommendationReasonings;
                } else if ("migrationTargetPlatform".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.migrationTargetPlatform
                        = TargetType.fromString(reader.getString());
                } else if ("fallbackMachineAssessmentArmId".equals(fieldName)) {
                    deserializedSqlEntityRecommendations.fallbackMachineAssessmentArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlEntityRecommendations;
        });
    }
}
