// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Arc Monitoring settings.
 */
@Fluent
public final class AzureArcMonitoringSettings implements JsonSerializable<AzureArcMonitoringSettings> {
    /*
     * Logs volume settings.
     */
    private float logsVolumeInGB;

    /*
     * Number of alert rules settings.
     */
    private int alertRulesCount;

    /**
     * Creates an instance of AzureArcMonitoringSettings class.
     */
    public AzureArcMonitoringSettings() {
    }

    /**
     * Get the logsVolumeInGB property: Logs volume settings.
     * 
     * @return the logsVolumeInGB value.
     */
    public float logsVolumeInGB() {
        return this.logsVolumeInGB;
    }

    /**
     * Set the logsVolumeInGB property: Logs volume settings.
     * 
     * @param logsVolumeInGB the logsVolumeInGB value to set.
     * @return the AzureArcMonitoringSettings object itself.
     */
    public AzureArcMonitoringSettings withLogsVolumeInGB(float logsVolumeInGB) {
        this.logsVolumeInGB = logsVolumeInGB;
        return this;
    }

    /**
     * Get the alertRulesCount property: Number of alert rules settings.
     * 
     * @return the alertRulesCount value.
     */
    public int alertRulesCount() {
        return this.alertRulesCount;
    }

    /**
     * Set the alertRulesCount property: Number of alert rules settings.
     * 
     * @param alertRulesCount the alertRulesCount value to set.
     * @return the AzureArcMonitoringSettings object itself.
     */
    public AzureArcMonitoringSettings withAlertRulesCount(int alertRulesCount) {
        this.alertRulesCount = alertRulesCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("logsVolumeInGB", this.logsVolumeInGB);
        jsonWriter.writeIntField("alertRulesCount", this.alertRulesCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureArcMonitoringSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureArcMonitoringSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureArcMonitoringSettings.
     */
    public static AzureArcMonitoringSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureArcMonitoringSettings deserializedAzureArcMonitoringSettings = new AzureArcMonitoringSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logsVolumeInGB".equals(fieldName)) {
                    deserializedAzureArcMonitoringSettings.logsVolumeInGB = reader.getFloat();
                } else if ("alertRulesCount".equals(fieldName)) {
                    deserializedAzureArcMonitoringSettings.alertRulesCount = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureArcMonitoringSettings;
        });
    }
}
