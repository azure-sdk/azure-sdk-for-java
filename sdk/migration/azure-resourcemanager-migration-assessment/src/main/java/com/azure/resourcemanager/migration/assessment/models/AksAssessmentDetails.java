// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Data model of AKS Assessment Details.
 */
@Immutable
public final class AksAssessmentDetails extends AssessmentDetails {
    /*
     * Gets the number of web apps.
     */
    private int webAppCount;

    /*
     * Gets the number of web servers.
     */
    private int webServerCount;

    /*
     * Gets the number of machines.
     */
    private int machineCount;

    /*
     * Gets the total monthly cost.
     */
    private float totalMonthlyCost;

    /*
     * Gets assessment status.
     */
    private AssessmentStatus status;

    /*
     * Gets date and time when assessment was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Gets date and time when assessment was created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Gets Confidence score.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Gets last time when rates were queried.
     */
    private OffsetDateTime pricesTimestamp;

    /**
     * Creates an instance of AksAssessmentDetails class.
     */
    public AksAssessmentDetails() {
    }

    /**
     * Get the webAppCount property: Gets the number of web apps.
     * 
     * @return the webAppCount value.
     */
    public int webAppCount() {
        return this.webAppCount;
    }

    /**
     * Get the webServerCount property: Gets the number of web servers.
     * 
     * @return the webServerCount value.
     */
    public int webServerCount() {
        return this.webServerCount;
    }

    /**
     * Get the machineCount property: Gets the number of machines.
     * 
     * @return the machineCount value.
     */
    public int machineCount() {
        return this.machineCount;
    }

    /**
     * Get the totalMonthlyCost property: Gets the total monthly cost.
     * 
     * @return the totalMonthlyCost value.
     */
    public float totalMonthlyCost() {
        return this.totalMonthlyCost;
    }

    /**
     * Get the status property: Gets assessment status.
     * 
     * @return the status value.
     */
    @Override
    public AssessmentStatus status() {
        return this.status;
    }

    /**
     * Get the updatedTimestamp property: Gets date and time when assessment was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    @Override
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the createdTimestamp property: Gets date and time when assessment was created.
     * 
     * @return the createdTimestamp value.
     */
    @Override
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the confidenceRatingInPercentage property: Gets Confidence score.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    @Override
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the pricesTimestamp property: Gets last time when rates were queried.
     * 
     * @return the pricesTimestamp value.
     */
    @Override
    public OffsetDateTime pricesTimestamp() {
        return this.pricesTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksAssessmentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksAssessmentDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksAssessmentDetails.
     */
    public static AksAssessmentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksAssessmentDetails deserializedAksAssessmentDetails = new AksAssessmentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdTimestamp".equals(fieldName)) {
                    deserializedAksAssessmentDetails.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAksAssessmentDetails.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedAksAssessmentDetails.status = AssessmentStatus.fromString(reader.getString());
                } else if ("pricesTimestamp".equals(fieldName)) {
                    deserializedAksAssessmentDetails.pricesTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAksAssessmentDetails.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("webAppCount".equals(fieldName)) {
                    deserializedAksAssessmentDetails.webAppCount = reader.getInt();
                } else if ("webServerCount".equals(fieldName)) {
                    deserializedAksAssessmentDetails.webServerCount = reader.getInt();
                } else if ("machineCount".equals(fieldName)) {
                    deserializedAksAssessmentDetails.machineCount = reader.getInt();
                } else if ("totalMonthlyCost".equals(fieldName)) {
                    deserializedAksAssessmentDetails.totalMonthlyCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksAssessmentDetails;
        });
    }
}
