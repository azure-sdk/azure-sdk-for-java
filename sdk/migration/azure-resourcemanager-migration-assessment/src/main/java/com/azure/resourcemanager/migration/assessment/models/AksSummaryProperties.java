// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * ARM model of AKS Summary Properties.
 */
@Immutable
public final class AksSummaryProperties extends SummaryPropertiesBase {
    /*
     * Gets AKS assessment summary.
     */
    private AksAssessmentSummary aksAssessmentSummary;

    /*
     * Gets the confidence score.
     */
    private float confidenceScore;

    /*
     * Gets the monthly storage cost.
     */
    private float monthlyStorageCost;

    /*
     * Gets the monthly compute cost.
     */
    private float monthlyComputeCost;

    /*
     * Gets the cloud suitability summary for all entities in the assessment per target.
     */
    private Map<String, Map<String, Integer>> suitabilityPerTarget;

    /*
     * Gets the summary name.
     */
    private String summaryName;

    /*
     * Gets the assessment name.
     */
    private String assessmentName;

    /**
     * Creates an instance of AksSummaryProperties class.
     */
    public AksSummaryProperties() {
    }

    /**
     * Get the aksAssessmentSummary property: Gets AKS assessment summary.
     * 
     * @return the aksAssessmentSummary value.
     */
    public AksAssessmentSummary aksAssessmentSummary() {
        return this.aksAssessmentSummary;
    }

    /**
     * Get the confidenceScore property: Gets the confidence score.
     * 
     * @return the confidenceScore value.
     */
    @Override
    public float confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the monthlyStorageCost property: Gets the monthly storage cost.
     * 
     * @return the monthlyStorageCost value.
     */
    @Override
    public float monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Get the monthlyComputeCost property: Gets the monthly compute cost.
     * 
     * @return the monthlyComputeCost value.
     */
    @Override
    public float monthlyComputeCost() {
        return this.monthlyComputeCost;
    }

    /**
     * Get the suitabilityPerTarget property: Gets the cloud suitability summary for all entities in the assessment per
     * target.
     * 
     * @return the suitabilityPerTarget value.
     */
    @Override
    public Map<String, Map<String, Integer>> suitabilityPerTarget() {
        return this.suitabilityPerTarget;
    }

    /**
     * Get the summaryName property: Gets the summary name.
     * 
     * @return the summaryName value.
     */
    @Override
    public String summaryName() {
        return this.summaryName;
    }

    /**
     * Get the assessmentName property: Gets the assessment name.
     * 
     * @return the assessmentName value.
     */
    @Override
    public String assessmentName() {
        return this.assessmentName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (aksAssessmentSummary() != null) {
            aksAssessmentSummary().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksSummaryProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksSummaryProperties.
     */
    public static AksSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksSummaryProperties deserializedAksSummaryProperties = new AksSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessmentName".equals(fieldName)) {
                    deserializedAksSummaryProperties.assessmentName = reader.getString();
                } else if ("summaryName".equals(fieldName)) {
                    deserializedAksSummaryProperties.summaryName = reader.getString();
                } else if ("suitabilityPerTarget".equals(fieldName)) {
                    Map<String, Map<String, Integer>> suitabilityPerTarget
                        = reader.readMap(reader1 -> reader1.readMap(reader2 -> reader2.getInt()));
                    deserializedAksSummaryProperties.suitabilityPerTarget = suitabilityPerTarget;
                } else if ("monthlyComputeCost".equals(fieldName)) {
                    deserializedAksSummaryProperties.monthlyComputeCost = reader.getFloat();
                } else if ("monthlyStorageCost".equals(fieldName)) {
                    deserializedAksSummaryProperties.monthlyStorageCost = reader.getFloat();
                } else if ("confidenceScore".equals(fieldName)) {
                    deserializedAksSummaryProperties.confidenceScore = reader.getFloat();
                } else if ("aksAssessmentSummary".equals(fieldName)) {
                    deserializedAksSummaryProperties.aksAssessmentSummary = AksAssessmentSummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksSummaryProperties;
        });
    }
}
