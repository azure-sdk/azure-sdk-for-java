// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Shows the year-on-year cost overall.
 */
@Immutable
public final class YearOnYearEstimates implements JsonSerializable<YearOnYearEstimates> {
    /*
     * Year-on-Year on-premises cost.
     */
    private List<YearOnYearCost> onPremisesCost;

    /*
     * Year-on-Year Azure cost.
     */
    private List<YearOnYearCost> azureCost;

    /*
     * Year-on-Year savings.
     */
    private List<YearOnYearCost> savings;

    /*
     * Year-on-Year on-premises capex cost.
     */
    private List<YearOnYearCost> onPremisesCapexCost;

    /*
     * Year-on-Year on-premises opex cost.
     */
    private List<YearOnYearCost> onPremisesOpexCost;

    /*
     * Year-on-Year azure capex cost.
     */
    private List<YearOnYearCost> azureCapexCost;

    /*
     * Year-on-Year azure opex cost.
     */
    private List<YearOnYearCost> azureOpexCost;

    /*
     * Payback period.
     */
    private Integer paybackPeriod;

    /*
     * Year-on-Year azure arc enabled on-premises cost.
     */
    private List<YearOnYearCost> azureArcEnabledOnPremisesCost;

    /*
     * Year-on-Year azure with arc enabled on-premises cost.
     */
    private List<YearOnYearCost> futureCost;

    /*
     * Year-on-Year azure arc enabled on-premises esu cost of the remaining infra on-premises.
     */
    private List<YearOnYearCost> futureAzureArcEnabledOnPremisesEsuCost;

    /*
     * Year-on-Year on-premises esu cost of the remaining infra on-premises.
     */
    private List<YearOnYearCost> futureOnPremisesEsuCost;

    /*
     * Year-on-Year on-premises emissions estimates.
     */
    private List<YearOnYearEmissions> onPremisesEmissionsEstimates;

    /*
     * Year-on-Year Azure emissions estimates.
     */
    private List<YearOnYearEmissions> azureEmissionsEstimates;

    /**
     * Creates an instance of YearOnYearEstimates class.
     */
    public YearOnYearEstimates() {
    }

    /**
     * Get the onPremisesCost property: Year-on-Year on-premises cost.
     * 
     * @return the onPremisesCost value.
     */
    public List<YearOnYearCost> onPremisesCost() {
        return this.onPremisesCost;
    }

    /**
     * Get the azureCost property: Year-on-Year Azure cost.
     * 
     * @return the azureCost value.
     */
    public List<YearOnYearCost> azureCost() {
        return this.azureCost;
    }

    /**
     * Get the savings property: Year-on-Year savings.
     * 
     * @return the savings value.
     */
    public List<YearOnYearCost> savings() {
        return this.savings;
    }

    /**
     * Get the onPremisesCapexCost property: Year-on-Year on-premises capex cost.
     * 
     * @return the onPremisesCapexCost value.
     */
    public List<YearOnYearCost> onPremisesCapexCost() {
        return this.onPremisesCapexCost;
    }

    /**
     * Get the onPremisesOpexCost property: Year-on-Year on-premises opex cost.
     * 
     * @return the onPremisesOpexCost value.
     */
    public List<YearOnYearCost> onPremisesOpexCost() {
        return this.onPremisesOpexCost;
    }

    /**
     * Get the azureCapexCost property: Year-on-Year azure capex cost.
     * 
     * @return the azureCapexCost value.
     */
    public List<YearOnYearCost> azureCapexCost() {
        return this.azureCapexCost;
    }

    /**
     * Get the azureOpexCost property: Year-on-Year azure opex cost.
     * 
     * @return the azureOpexCost value.
     */
    public List<YearOnYearCost> azureOpexCost() {
        return this.azureOpexCost;
    }

    /**
     * Get the paybackPeriod property: Payback period.
     * 
     * @return the paybackPeriod value.
     */
    public Integer paybackPeriod() {
        return this.paybackPeriod;
    }

    /**
     * Get the azureArcEnabledOnPremisesCost property: Year-on-Year azure arc enabled on-premises cost.
     * 
     * @return the azureArcEnabledOnPremisesCost value.
     */
    public List<YearOnYearCost> azureArcEnabledOnPremisesCost() {
        return this.azureArcEnabledOnPremisesCost;
    }

    /**
     * Get the futureCost property: Year-on-Year azure with arc enabled on-premises cost.
     * 
     * @return the futureCost value.
     */
    public List<YearOnYearCost> futureCost() {
        return this.futureCost;
    }

    /**
     * Get the futureAzureArcEnabledOnPremisesEsuCost property: Year-on-Year azure arc enabled on-premises esu cost of
     * the remaining infra on-premises.
     * 
     * @return the futureAzureArcEnabledOnPremisesEsuCost value.
     */
    public List<YearOnYearCost> futureAzureArcEnabledOnPremisesEsuCost() {
        return this.futureAzureArcEnabledOnPremisesEsuCost;
    }

    /**
     * Get the futureOnPremisesEsuCost property: Year-on-Year on-premises esu cost of the remaining infra on-premises.
     * 
     * @return the futureOnPremisesEsuCost value.
     */
    public List<YearOnYearCost> futureOnPremisesEsuCost() {
        return this.futureOnPremisesEsuCost;
    }

    /**
     * Get the onPremisesEmissionsEstimates property: Year-on-Year on-premises emissions estimates.
     * 
     * @return the onPremisesEmissionsEstimates value.
     */
    public List<YearOnYearEmissions> onPremisesEmissionsEstimates() {
        return this.onPremisesEmissionsEstimates;
    }

    /**
     * Get the azureEmissionsEstimates property: Year-on-Year Azure emissions estimates.
     * 
     * @return the azureEmissionsEstimates value.
     */
    public List<YearOnYearEmissions> azureEmissionsEstimates() {
        return this.azureEmissionsEstimates;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (onPremisesCost() != null) {
            onPremisesCost().forEach(e -> e.validate());
        }
        if (azureCost() != null) {
            azureCost().forEach(e -> e.validate());
        }
        if (savings() != null) {
            savings().forEach(e -> e.validate());
        }
        if (onPremisesCapexCost() != null) {
            onPremisesCapexCost().forEach(e -> e.validate());
        }
        if (onPremisesOpexCost() != null) {
            onPremisesOpexCost().forEach(e -> e.validate());
        }
        if (azureCapexCost() != null) {
            azureCapexCost().forEach(e -> e.validate());
        }
        if (azureOpexCost() != null) {
            azureOpexCost().forEach(e -> e.validate());
        }
        if (azureArcEnabledOnPremisesCost() != null) {
            azureArcEnabledOnPremisesCost().forEach(e -> e.validate());
        }
        if (futureCost() != null) {
            futureCost().forEach(e -> e.validate());
        }
        if (futureAzureArcEnabledOnPremisesEsuCost() != null) {
            futureAzureArcEnabledOnPremisesEsuCost().forEach(e -> e.validate());
        }
        if (futureOnPremisesEsuCost() != null) {
            futureOnPremisesEsuCost().forEach(e -> e.validate());
        }
        if (onPremisesEmissionsEstimates() != null) {
            onPremisesEmissionsEstimates().forEach(e -> e.validate());
        }
        if (azureEmissionsEstimates() != null) {
            azureEmissionsEstimates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of YearOnYearEstimates from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of YearOnYearEstimates if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the YearOnYearEstimates.
     */
    public static YearOnYearEstimates fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            YearOnYearEstimates deserializedYearOnYearEstimates = new YearOnYearEstimates();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("onPremisesCost".equals(fieldName)) {
                    List<YearOnYearCost> onPremisesCost = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.onPremisesCost = onPremisesCost;
                } else if ("azureCost".equals(fieldName)) {
                    List<YearOnYearCost> azureCost = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.azureCost = azureCost;
                } else if ("savings".equals(fieldName)) {
                    List<YearOnYearCost> savings = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.savings = savings;
                } else if ("onPremisesCapexCost".equals(fieldName)) {
                    List<YearOnYearCost> onPremisesCapexCost
                        = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.onPremisesCapexCost = onPremisesCapexCost;
                } else if ("onPremisesOpexCost".equals(fieldName)) {
                    List<YearOnYearCost> onPremisesOpexCost
                        = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.onPremisesOpexCost = onPremisesOpexCost;
                } else if ("azureCapexCost".equals(fieldName)) {
                    List<YearOnYearCost> azureCapexCost = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.azureCapexCost = azureCapexCost;
                } else if ("azureOpexCost".equals(fieldName)) {
                    List<YearOnYearCost> azureOpexCost = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.azureOpexCost = azureOpexCost;
                } else if ("paybackPeriod".equals(fieldName)) {
                    deserializedYearOnYearEstimates.paybackPeriod = reader.getNullable(JsonReader::getInt);
                } else if ("azureArcEnabledOnPremisesCost".equals(fieldName)) {
                    List<YearOnYearCost> azureArcEnabledOnPremisesCost
                        = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.azureArcEnabledOnPremisesCost = azureArcEnabledOnPremisesCost;
                } else if ("futureCost".equals(fieldName)) {
                    List<YearOnYearCost> futureCost = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.futureCost = futureCost;
                } else if ("futureAzureArcEnabledOnPremisesEsuCost".equals(fieldName)) {
                    List<YearOnYearCost> futureAzureArcEnabledOnPremisesEsuCost
                        = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.futureAzureArcEnabledOnPremisesEsuCost
                        = futureAzureArcEnabledOnPremisesEsuCost;
                } else if ("futureOnPremisesEsuCost".equals(fieldName)) {
                    List<YearOnYearCost> futureOnPremisesEsuCost
                        = reader.readArray(reader1 -> YearOnYearCost.fromJson(reader1));
                    deserializedYearOnYearEstimates.futureOnPremisesEsuCost = futureOnPremisesEsuCost;
                } else if ("onPremisesEmissionsEstimates".equals(fieldName)) {
                    List<YearOnYearEmissions> onPremisesEmissionsEstimates
                        = reader.readArray(reader1 -> YearOnYearEmissions.fromJson(reader1));
                    deserializedYearOnYearEstimates.onPremisesEmissionsEstimates = onPremisesEmissionsEstimates;
                } else if ("azureEmissionsEstimates".equals(fieldName)) {
                    List<YearOnYearEmissions> azureEmissionsEstimates
                        = reader.readArray(reader1 -> YearOnYearEmissions.fromJson(reader1));
                    deserializedYearOnYearEstimates.azureEmissionsEstimates = azureEmissionsEstimates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedYearOnYearEstimates;
        });
    }
}
