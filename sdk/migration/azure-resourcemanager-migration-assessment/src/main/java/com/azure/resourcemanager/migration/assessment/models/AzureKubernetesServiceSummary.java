// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Shows Azure Kubernetes Service summary.
 */
@Immutable
public final class AzureKubernetesServiceSummary implements JsonSerializable<AzureKubernetesServiceSummary> {
    /*
     * Estimated cost by recommendation offer.
     */
    private List<EstimatedCostByOffer> estimatedCostByOffer;

    /*
     * Distribution by SKU.
     */
    private List<WebAppTargetSku> distributionBySku;

    /*
     * Distribution by application type.
     */
    private List<WebAppDistribution> distributionByApp;

    /**
     * Creates an instance of AzureKubernetesServiceSummary class.
     */
    public AzureKubernetesServiceSummary() {
    }

    /**
     * Get the estimatedCostByOffer property: Estimated cost by recommendation offer.
     * 
     * @return the estimatedCostByOffer value.
     */
    public List<EstimatedCostByOffer> estimatedCostByOffer() {
        return this.estimatedCostByOffer;
    }

    /**
     * Get the distributionBySku property: Distribution by SKU.
     * 
     * @return the distributionBySku value.
     */
    public List<WebAppTargetSku> distributionBySku() {
        return this.distributionBySku;
    }

    /**
     * Get the distributionByApp property: Distribution by application type.
     * 
     * @return the distributionByApp value.
     */
    public List<WebAppDistribution> distributionByApp() {
        return this.distributionByApp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (estimatedCostByOffer() != null) {
            estimatedCostByOffer().forEach(e -> e.validate());
        }
        if (distributionBySku() != null) {
            distributionBySku().forEach(e -> e.validate());
        }
        if (distributionByApp() != null) {
            distributionByApp().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureKubernetesServiceSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureKubernetesServiceSummary if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureKubernetesServiceSummary.
     */
    public static AzureKubernetesServiceSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureKubernetesServiceSummary deserializedAzureKubernetesServiceSummary
                = new AzureKubernetesServiceSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("estimatedCostByOffer".equals(fieldName)) {
                    List<EstimatedCostByOffer> estimatedCostByOffer
                        = reader.readArray(reader1 -> EstimatedCostByOffer.fromJson(reader1));
                    deserializedAzureKubernetesServiceSummary.estimatedCostByOffer = estimatedCostByOffer;
                } else if ("distributionBySku".equals(fieldName)) {
                    List<WebAppTargetSku> distributionBySku
                        = reader.readArray(reader1 -> WebAppTargetSku.fromJson(reader1));
                    deserializedAzureKubernetesServiceSummary.distributionBySku = distributionBySku;
                } else if ("distributionByApp".equals(fieldName)) {
                    List<WebAppDistribution> distributionByApp
                        = reader.readArray(reader1 -> WebAppDistribution.fromJson(reader1));
                    deserializedAzureKubernetesServiceSummary.distributionByApp = distributionByApp;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureKubernetesServiceSummary;
        });
    }
}
