// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Representation of a vsphere licence base.
 */
@Fluent
public class VsphereLicenseBase implements JsonSerializable<VsphereLicenseBase> {
    /*
     * Cost of a licence.
     */
    private float licenseCost;

    /*
     * Basic support cost.
     */
    private float basicSupportCost;

    /*
     * Production support cost.
     */
    private float productionSupportCost;

    /**
     * Creates an instance of VsphereLicenseBase class.
     */
    public VsphereLicenseBase() {
    }

    /**
     * Get the licenseCost property: Cost of a licence.
     * 
     * @return the licenseCost value.
     */
    public float licenseCost() {
        return this.licenseCost;
    }

    /**
     * Set the licenseCost property: Cost of a licence.
     * 
     * @param licenseCost the licenseCost value to set.
     * @return the VsphereLicenseBase object itself.
     */
    public VsphereLicenseBase withLicenseCost(float licenseCost) {
        this.licenseCost = licenseCost;
        return this;
    }

    /**
     * Get the basicSupportCost property: Basic support cost.
     * 
     * @return the basicSupportCost value.
     */
    public float basicSupportCost() {
        return this.basicSupportCost;
    }

    /**
     * Set the basicSupportCost property: Basic support cost.
     * 
     * @param basicSupportCost the basicSupportCost value to set.
     * @return the VsphereLicenseBase object itself.
     */
    public VsphereLicenseBase withBasicSupportCost(float basicSupportCost) {
        this.basicSupportCost = basicSupportCost;
        return this;
    }

    /**
     * Get the productionSupportCost property: Production support cost.
     * 
     * @return the productionSupportCost value.
     */
    public float productionSupportCost() {
        return this.productionSupportCost;
    }

    /**
     * Set the productionSupportCost property: Production support cost.
     * 
     * @param productionSupportCost the productionSupportCost value to set.
     * @return the VsphereLicenseBase object itself.
     */
    public VsphereLicenseBase withProductionSupportCost(float productionSupportCost) {
        this.productionSupportCost = productionSupportCost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("licenseCost", this.licenseCost);
        jsonWriter.writeFloatField("basicSupportCost", this.basicSupportCost);
        jsonWriter.writeFloatField("productionSupportCost", this.productionSupportCost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VsphereLicenseBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VsphereLicenseBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VsphereLicenseBase.
     */
    public static VsphereLicenseBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VsphereLicenseBase deserializedVsphereLicenseBase = new VsphereLicenseBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("licenseCost".equals(fieldName)) {
                    deserializedVsphereLicenseBase.licenseCost = reader.getFloat();
                } else if ("basicSupportCost".equals(fieldName)) {
                    deserializedVsphereLicenseBase.basicSupportCost = reader.getFloat();
                } else if ("productionSupportCost".equals(fieldName)) {
                    deserializedVsphereLicenseBase.productionSupportCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVsphereLicenseBase;
        });
    }
}
