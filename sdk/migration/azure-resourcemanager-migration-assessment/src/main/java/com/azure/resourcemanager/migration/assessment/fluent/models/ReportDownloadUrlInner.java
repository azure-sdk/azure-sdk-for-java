// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Download URL for assessment report.
 */
@Immutable
public final class ReportDownloadUrlInner implements JsonSerializable<ReportDownloadUrlInner> {
    /*
     * Hyperlink to download report.
     */
    private String businessCaseReportUrl;

    /*
     * Expiry date of download url.
     */
    private OffsetDateTime expirationTime;

    /**
     * Creates an instance of ReportDownloadUrlInner class.
     */
    public ReportDownloadUrlInner() {
    }

    /**
     * Get the businessCaseReportUrl property: Hyperlink to download report.
     * 
     * @return the businessCaseReportUrl value.
     */
    public String businessCaseReportUrl() {
        return this.businessCaseReportUrl;
    }

    /**
     * Get the expirationTime property: Expiry date of download url.
     * 
     * @return the expirationTime value.
     */
    public OffsetDateTime expirationTime() {
        return this.expirationTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReportDownloadUrlInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReportDownloadUrlInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReportDownloadUrlInner.
     */
    public static ReportDownloadUrlInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReportDownloadUrlInner deserializedReportDownloadUrlInner = new ReportDownloadUrlInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("businessCaseReportUrl".equals(fieldName)) {
                    deserializedReportDownloadUrlInner.businessCaseReportUrl = reader.getString();
                } else if ("expirationTime".equals(fieldName)) {
                    deserializedReportDownloadUrlInner.expirationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReportDownloadUrlInner;
        });
    }
}
