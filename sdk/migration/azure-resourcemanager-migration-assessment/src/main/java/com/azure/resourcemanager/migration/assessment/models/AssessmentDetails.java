// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Assessment details class.
 */
@Immutable
public final class AssessmentDetails implements JsonSerializable<AssessmentDetails> {
    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Last time when rates were queried.
     */
    private OffsetDateTime pricesTimestamp;

    /*
     * Date and Time when assessment was created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Date and Time when assessment was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Whether assessment is in valid state and all machines have been assessed.
     */
    private AssessmentStatus status;

    /**
     * Creates an instance of AssessmentDetails class.
     */
    public AssessmentDetails() {
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the pricesTimestamp property: Last time when rates were queried.
     * 
     * @return the pricesTimestamp value.
     */
    public OffsetDateTime pricesTimestamp() {
        return this.pricesTimestamp;
    }

    /**
     * Get the createdTimestamp property: Date and Time when assessment was created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Date and Time when assessment was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the status property: Whether assessment is in valid state and all machines have been assessed.
     * 
     * @return the status value.
     */
    public AssessmentStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentDetails.
     */
    public static AssessmentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentDetails deserializedAssessmentDetails = new AssessmentDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAssessmentDetails.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("pricesTimestamp".equals(fieldName)) {
                    deserializedAssessmentDetails.pricesTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessmentDetails.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessmentDetails.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedAssessmentDetails.status = AssessmentStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentDetails;
        });
    }
}
