// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Compute settings.
 */
@Fluent
public final class ComputeSettings implements JsonSerializable<ComputeSettings> {
    /*
     * Hyperthread core to memory ratio.
     */
    private float hyperthreadCoreToMemoryRatio;

    /*
     * Compute Price.
     */
    private float price;

    /*
     * SQL Server licensing settings.
     */
    private List<SqlServerLicensingSettings> sqlServerLicensing;

    /*
     * Windows Server licensing settings.
     */
    private WindowsServerLicensingSettings windowsServerLicensing;

    /*
     * Linux Rhel Server licensing settings.
     */
    private LinuxServerLicensingSettings rhelLinuxServerLicensing;

    /*
     * Linux Suse Server licensing settings.
     */
    private LinuxServerLicensingSettings suseLinuxServerLicensing;

    /*
     * Virtualization software settings.
     */
    private VirtualizationSoftwareSettings virtualizationSoftwareSettings;

    /**
     * Creates an instance of ComputeSettings class.
     */
    public ComputeSettings() {
    }

    /**
     * Get the hyperthreadCoreToMemoryRatio property: Hyperthread core to memory ratio.
     * 
     * @return the hyperthreadCoreToMemoryRatio value.
     */
    public float hyperthreadCoreToMemoryRatio() {
        return this.hyperthreadCoreToMemoryRatio;
    }

    /**
     * Set the hyperthreadCoreToMemoryRatio property: Hyperthread core to memory ratio.
     * 
     * @param hyperthreadCoreToMemoryRatio the hyperthreadCoreToMemoryRatio value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings withHyperthreadCoreToMemoryRatio(float hyperthreadCoreToMemoryRatio) {
        this.hyperthreadCoreToMemoryRatio = hyperthreadCoreToMemoryRatio;
        return this;
    }

    /**
     * Get the price property: Compute Price.
     * 
     * @return the price value.
     */
    public float price() {
        return this.price;
    }

    /**
     * Set the price property: Compute Price.
     * 
     * @param price the price value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings withPrice(float price) {
        this.price = price;
        return this;
    }

    /**
     * Get the sqlServerLicensing property: SQL Server licensing settings.
     * 
     * @return the sqlServerLicensing value.
     */
    public List<SqlServerLicensingSettings> sqlServerLicensing() {
        return this.sqlServerLicensing;
    }

    /**
     * Set the sqlServerLicensing property: SQL Server licensing settings.
     * 
     * @param sqlServerLicensing the sqlServerLicensing value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings withSqlServerLicensing(List<SqlServerLicensingSettings> sqlServerLicensing) {
        this.sqlServerLicensing = sqlServerLicensing;
        return this;
    }

    /**
     * Get the windowsServerLicensing property: Windows Server licensing settings.
     * 
     * @return the windowsServerLicensing value.
     */
    public WindowsServerLicensingSettings windowsServerLicensing() {
        return this.windowsServerLicensing;
    }

    /**
     * Set the windowsServerLicensing property: Windows Server licensing settings.
     * 
     * @param windowsServerLicensing the windowsServerLicensing value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings withWindowsServerLicensing(WindowsServerLicensingSettings windowsServerLicensing) {
        this.windowsServerLicensing = windowsServerLicensing;
        return this;
    }

    /**
     * Get the rhelLinuxServerLicensing property: Linux Rhel Server licensing settings.
     * 
     * @return the rhelLinuxServerLicensing value.
     */
    public LinuxServerLicensingSettings rhelLinuxServerLicensing() {
        return this.rhelLinuxServerLicensing;
    }

    /**
     * Set the rhelLinuxServerLicensing property: Linux Rhel Server licensing settings.
     * 
     * @param rhelLinuxServerLicensing the rhelLinuxServerLicensing value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings withRhelLinuxServerLicensing(LinuxServerLicensingSettings rhelLinuxServerLicensing) {
        this.rhelLinuxServerLicensing = rhelLinuxServerLicensing;
        return this;
    }

    /**
     * Get the suseLinuxServerLicensing property: Linux Suse Server licensing settings.
     * 
     * @return the suseLinuxServerLicensing value.
     */
    public LinuxServerLicensingSettings suseLinuxServerLicensing() {
        return this.suseLinuxServerLicensing;
    }

    /**
     * Set the suseLinuxServerLicensing property: Linux Suse Server licensing settings.
     * 
     * @param suseLinuxServerLicensing the suseLinuxServerLicensing value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings withSuseLinuxServerLicensing(LinuxServerLicensingSettings suseLinuxServerLicensing) {
        this.suseLinuxServerLicensing = suseLinuxServerLicensing;
        return this;
    }

    /**
     * Get the virtualizationSoftwareSettings property: Virtualization software settings.
     * 
     * @return the virtualizationSoftwareSettings value.
     */
    public VirtualizationSoftwareSettings virtualizationSoftwareSettings() {
        return this.virtualizationSoftwareSettings;
    }

    /**
     * Set the virtualizationSoftwareSettings property: Virtualization software settings.
     * 
     * @param virtualizationSoftwareSettings the virtualizationSoftwareSettings value to set.
     * @return the ComputeSettings object itself.
     */
    public ComputeSettings
        withVirtualizationSoftwareSettings(VirtualizationSoftwareSettings virtualizationSoftwareSettings) {
        this.virtualizationSoftwareSettings = virtualizationSoftwareSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sqlServerLicensing() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sqlServerLicensing in model ComputeSettings"));
        } else {
            sqlServerLicensing().forEach(e -> e.validate());
        }
        if (windowsServerLicensing() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property windowsServerLicensing in model ComputeSettings"));
        } else {
            windowsServerLicensing().validate();
        }
        if (rhelLinuxServerLicensing() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rhelLinuxServerLicensing in model ComputeSettings"));
        } else {
            rhelLinuxServerLicensing().validate();
        }
        if (suseLinuxServerLicensing() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property suseLinuxServerLicensing in model ComputeSettings"));
        } else {
            suseLinuxServerLicensing().validate();
        }
        if (virtualizationSoftwareSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualizationSoftwareSettings in model ComputeSettings"));
        } else {
            virtualizationSoftwareSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ComputeSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("hyperthreadCoreToMemoryRatio", this.hyperthreadCoreToMemoryRatio);
        jsonWriter.writeFloatField("price", this.price);
        jsonWriter.writeArrayField("sqlServerLicensing", this.sqlServerLicensing,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("windowsServerLicensing", this.windowsServerLicensing);
        jsonWriter.writeJsonField("rhelLinuxServerLicensing", this.rhelLinuxServerLicensing);
        jsonWriter.writeJsonField("suseLinuxServerLicensing", this.suseLinuxServerLicensing);
        jsonWriter.writeJsonField("virtualizationSoftwareSettings", this.virtualizationSoftwareSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComputeSettings.
     */
    public static ComputeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeSettings deserializedComputeSettings = new ComputeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hyperthreadCoreToMemoryRatio".equals(fieldName)) {
                    deserializedComputeSettings.hyperthreadCoreToMemoryRatio = reader.getFloat();
                } else if ("price".equals(fieldName)) {
                    deserializedComputeSettings.price = reader.getFloat();
                } else if ("sqlServerLicensing".equals(fieldName)) {
                    List<SqlServerLicensingSettings> sqlServerLicensing
                        = reader.readArray(reader1 -> SqlServerLicensingSettings.fromJson(reader1));
                    deserializedComputeSettings.sqlServerLicensing = sqlServerLicensing;
                } else if ("windowsServerLicensing".equals(fieldName)) {
                    deserializedComputeSettings.windowsServerLicensing
                        = WindowsServerLicensingSettings.fromJson(reader);
                } else if ("rhelLinuxServerLicensing".equals(fieldName)) {
                    deserializedComputeSettings.rhelLinuxServerLicensing
                        = LinuxServerLicensingSettings.fromJson(reader);
                } else if ("suseLinuxServerLicensing".equals(fieldName)) {
                    deserializedComputeSettings.suseLinuxServerLicensing
                        = LinuxServerLicensingSettings.fromJson(reader);
                } else if ("virtualizationSoftwareSettings".equals(fieldName)) {
                    deserializedComputeSettings.virtualizationSoftwareSettings
                        = VirtualizationSoftwareSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeSettings;
        });
    }
}
