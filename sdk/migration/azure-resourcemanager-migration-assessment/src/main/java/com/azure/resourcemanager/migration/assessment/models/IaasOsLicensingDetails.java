// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Iaas OS licensing details.
 */
@Immutable
public final class IaasOsLicensingDetails implements JsonSerializable<IaasOsLicensingDetails> {
    /*
     * The OS type.
     */
    private String osType;

    /*
     * The total cost.
     */
    private Float totalCost;

    /*
     * The decommission cost.
     */
    private Float decomissionCost;

    /**
     * Creates an instance of IaasOsLicensingDetails class.
     */
    public IaasOsLicensingDetails() {
    }

    /**
     * Get the osType property: The OS type.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Get the totalCost property: The total cost.
     * 
     * @return the totalCost value.
     */
    public Float totalCost() {
        return this.totalCost;
    }

    /**
     * Get the decomissionCost property: The decommission cost.
     * 
     * @return the decomissionCost value.
     */
    public Float decomissionCost() {
        return this.decomissionCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IaasOsLicensingDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IaasOsLicensingDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IaasOsLicensingDetails.
     */
    public static IaasOsLicensingDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IaasOsLicensingDetails deserializedIaasOsLicensingDetails = new IaasOsLicensingDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedIaasOsLicensingDetails.osType = reader.getString();
                } else if ("totalCost".equals(fieldName)) {
                    deserializedIaasOsLicensingDetails.totalCost = reader.getNullable(JsonReader::getFloat);
                } else if ("decomissionCost".equals(fieldName)) {
                    deserializedIaasOsLicensingDetails.decomissionCost = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIaasOsLicensingDetails;
        });
    }
}
