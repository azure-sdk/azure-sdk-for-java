// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL assessment properties class.
 */
@Fluent
public final class SqlAssessmentV3Properties implements JsonSerializable<SqlAssessmentV3Properties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets the scope of assessment.
     */
    private Scope scope;

    /*
     * Gets or sets the settings for the assessment.
     */
    private SqlAssessmentSettings settings;

    /*
     * Gets or sets the details of the assessment.
     */
    private AssessmentDetails details;

    /*
     * Gets or sets the machine assessment ARM ID for VM fallback.
     */
    private String fallbackMachineAssessmentArmId;

    /**
     * Creates an instance of SqlAssessmentV3Properties class.
     */
    public SqlAssessmentV3Properties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the scope property: Gets or sets the scope of assessment.
     * 
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Gets or sets the scope of assessment.
     * 
     * @param scope the scope value to set.
     * @return the SqlAssessmentV3Properties object itself.
     */
    public SqlAssessmentV3Properties withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the settings property: Gets or sets the settings for the assessment.
     * 
     * @return the settings value.
     */
    public SqlAssessmentSettings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Gets or sets the settings for the assessment.
     * 
     * @param settings the settings value to set.
     * @return the SqlAssessmentV3Properties object itself.
     */
    public SqlAssessmentV3Properties withSettings(SqlAssessmentSettings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the details property: Gets or sets the details of the assessment.
     * 
     * @return the details value.
     */
    public AssessmentDetails details() {
        return this.details;
    }

    /**
     * Set the details property: Gets or sets the details of the assessment.
     * 
     * @param details the details value to set.
     * @return the SqlAssessmentV3Properties object itself.
     */
    public SqlAssessmentV3Properties withDetails(AssessmentDetails details) {
        this.details = details;
        return this;
    }

    /**
     * Get the fallbackMachineAssessmentArmId property: Gets or sets the machine assessment ARM ID for VM fallback.
     * 
     * @return the fallbackMachineAssessmentArmId value.
     */
    public String fallbackMachineAssessmentArmId() {
        return this.fallbackMachineAssessmentArmId;
    }

    /**
     * Set the fallbackMachineAssessmentArmId property: Gets or sets the machine assessment ARM ID for VM fallback.
     * 
     * @param fallbackMachineAssessmentArmId the fallbackMachineAssessmentArmId value to set.
     * @return the SqlAssessmentV3Properties object itself.
     */
    public SqlAssessmentV3Properties withFallbackMachineAssessmentArmId(String fallbackMachineAssessmentArmId) {
        this.fallbackMachineAssessmentArmId = fallbackMachineAssessmentArmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scope() != null) {
            scope().validate();
        }
        if (settings() != null) {
            settings().validate();
        }
        if (details() != null) {
            details().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("scope", this.scope);
        jsonWriter.writeJsonField("settings", this.settings);
        jsonWriter.writeJsonField("details", this.details);
        jsonWriter.writeStringField("fallbackMachineAssessmentArmId", this.fallbackMachineAssessmentArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessmentV3Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessmentV3Properties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessmentV3Properties.
     */
    public static SqlAssessmentV3Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessmentV3Properties deserializedSqlAssessmentV3Properties = new SqlAssessmentV3Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedSqlAssessmentV3Properties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedSqlAssessmentV3Properties.scope = Scope.fromJson(reader);
                } else if ("settings".equals(fieldName)) {
                    deserializedSqlAssessmentV3Properties.settings = SqlAssessmentSettings.fromJson(reader);
                } else if ("details".equals(fieldName)) {
                    deserializedSqlAssessmentV3Properties.details = AssessmentDetails.fromJson(reader);
                } else if ("fallbackMachineAssessmentArmId".equals(fieldName)) {
                    deserializedSqlAssessmentV3Properties.fallbackMachineAssessmentArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessmentV3Properties;
        });
    }
}
