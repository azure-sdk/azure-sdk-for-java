// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * On-premise settings.
 */
@Fluent
public final class OnPremiseSettings implements JsonSerializable<OnPremiseSettings> {
    /*
     * Compute settings.
     */
    private ComputeSettings computeSettings;

    /*
     * Storage settings.
     */
    private StorageSettings storageSettings;

    /*
     * Network settings.
     */
    private NetworkSettings networkSettings;

    /*
     * Facility settings.
     */
    private FacilitySettings facilitySettings;

    /*
     * Labour settings.
     */
    private LaborSettings laborSettings;

    /*
     * Security settings.
     */
    private SecuritySettings securitySettings;

    /*
     * Management settings.
     */
    private ManagementSettings managementSettings;

    /**
     * Creates an instance of OnPremiseSettings class.
     */
    public OnPremiseSettings() {
    }

    /**
     * Get the computeSettings property: Compute settings.
     * 
     * @return the computeSettings value.
     */
    public ComputeSettings computeSettings() {
        return this.computeSettings;
    }

    /**
     * Set the computeSettings property: Compute settings.
     * 
     * @param computeSettings the computeSettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withComputeSettings(ComputeSettings computeSettings) {
        this.computeSettings = computeSettings;
        return this;
    }

    /**
     * Get the storageSettings property: Storage settings.
     * 
     * @return the storageSettings value.
     */
    public StorageSettings storageSettings() {
        return this.storageSettings;
    }

    /**
     * Set the storageSettings property: Storage settings.
     * 
     * @param storageSettings the storageSettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withStorageSettings(StorageSettings storageSettings) {
        this.storageSettings = storageSettings;
        return this;
    }

    /**
     * Get the networkSettings property: Network settings.
     * 
     * @return the networkSettings value.
     */
    public NetworkSettings networkSettings() {
        return this.networkSettings;
    }

    /**
     * Set the networkSettings property: Network settings.
     * 
     * @param networkSettings the networkSettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withNetworkSettings(NetworkSettings networkSettings) {
        this.networkSettings = networkSettings;
        return this;
    }

    /**
     * Get the facilitySettings property: Facility settings.
     * 
     * @return the facilitySettings value.
     */
    public FacilitySettings facilitySettings() {
        return this.facilitySettings;
    }

    /**
     * Set the facilitySettings property: Facility settings.
     * 
     * @param facilitySettings the facilitySettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withFacilitySettings(FacilitySettings facilitySettings) {
        this.facilitySettings = facilitySettings;
        return this;
    }

    /**
     * Get the laborSettings property: Labour settings.
     * 
     * @return the laborSettings value.
     */
    public LaborSettings laborSettings() {
        return this.laborSettings;
    }

    /**
     * Set the laborSettings property: Labour settings.
     * 
     * @param laborSettings the laborSettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withLaborSettings(LaborSettings laborSettings) {
        this.laborSettings = laborSettings;
        return this;
    }

    /**
     * Get the securitySettings property: Security settings.
     * 
     * @return the securitySettings value.
     */
    public SecuritySettings securitySettings() {
        return this.securitySettings;
    }

    /**
     * Set the securitySettings property: Security settings.
     * 
     * @param securitySettings the securitySettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withSecuritySettings(SecuritySettings securitySettings) {
        this.securitySettings = securitySettings;
        return this;
    }

    /**
     * Get the managementSettings property: Management settings.
     * 
     * @return the managementSettings value.
     */
    public ManagementSettings managementSettings() {
        return this.managementSettings;
    }

    /**
     * Set the managementSettings property: Management settings.
     * 
     * @param managementSettings the managementSettings value to set.
     * @return the OnPremiseSettings object itself.
     */
    public OnPremiseSettings withManagementSettings(ManagementSettings managementSettings) {
        this.managementSettings = managementSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (computeSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property computeSettings in model OnPremiseSettings"));
        } else {
            computeSettings().validate();
        }
        if (storageSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageSettings in model OnPremiseSettings"));
        } else {
            storageSettings().validate();
        }
        if (networkSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property networkSettings in model OnPremiseSettings"));
        } else {
            networkSettings().validate();
        }
        if (facilitySettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property facilitySettings in model OnPremiseSettings"));
        } else {
            facilitySettings().validate();
        }
        if (laborSettings() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property laborSettings in model OnPremiseSettings"));
        } else {
            laborSettings().validate();
        }
        if (securitySettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property securitySettings in model OnPremiseSettings"));
        } else {
            securitySettings().validate();
        }
        if (managementSettings() != null) {
            managementSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OnPremiseSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("computeSettings", this.computeSettings);
        jsonWriter.writeJsonField("storageSettings", this.storageSettings);
        jsonWriter.writeJsonField("networkSettings", this.networkSettings);
        jsonWriter.writeJsonField("facilitySettings", this.facilitySettings);
        jsonWriter.writeJsonField("laborSettings", this.laborSettings);
        jsonWriter.writeJsonField("securitySettings", this.securitySettings);
        jsonWriter.writeJsonField("managementSettings", this.managementSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnPremiseSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnPremiseSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OnPremiseSettings.
     */
    public static OnPremiseSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnPremiseSettings deserializedOnPremiseSettings = new OnPremiseSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computeSettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.computeSettings = ComputeSettings.fromJson(reader);
                } else if ("storageSettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.storageSettings = StorageSettings.fromJson(reader);
                } else if ("networkSettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.networkSettings = NetworkSettings.fromJson(reader);
                } else if ("facilitySettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.facilitySettings = FacilitySettings.fromJson(reader);
                } else if ("laborSettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.laborSettings = LaborSettings.fromJson(reader);
                } else if ("securitySettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.securitySettings = SecuritySettings.fromJson(reader);
                } else if ("managementSettings".equals(fieldName)) {
                    deserializedOnPremiseSettings.managementSettings = ManagementSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnPremiseSettings;
        });
    }
}
