// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Discovered entity light summary.
 */
@Fluent
public final class DiscoveredEntityLightSummary implements JsonSerializable<DiscoveredEntityLightSummary> {
    /*
     * Gets or sets the number of servers.
     */
    private int numberOfServers;

    /*
     * Gets or sets the number of web apps.
     */
    private int numberOfWebApps;

    /*
     * Gets or sets the number of machines.
     */
    private int numberOfMachines;

    /**
     * Creates an instance of DiscoveredEntityLightSummary class.
     */
    public DiscoveredEntityLightSummary() {
    }

    /**
     * Get the numberOfServers property: Gets or sets the number of servers.
     * 
     * @return the numberOfServers value.
     */
    public int numberOfServers() {
        return this.numberOfServers;
    }

    /**
     * Set the numberOfServers property: Gets or sets the number of servers.
     * 
     * @param numberOfServers the numberOfServers value to set.
     * @return the DiscoveredEntityLightSummary object itself.
     */
    public DiscoveredEntityLightSummary withNumberOfServers(int numberOfServers) {
        this.numberOfServers = numberOfServers;
        return this;
    }

    /**
     * Get the numberOfWebApps property: Gets or sets the number of web apps.
     * 
     * @return the numberOfWebApps value.
     */
    public int numberOfWebApps() {
        return this.numberOfWebApps;
    }

    /**
     * Set the numberOfWebApps property: Gets or sets the number of web apps.
     * 
     * @param numberOfWebApps the numberOfWebApps value to set.
     * @return the DiscoveredEntityLightSummary object itself.
     */
    public DiscoveredEntityLightSummary withNumberOfWebApps(int numberOfWebApps) {
        this.numberOfWebApps = numberOfWebApps;
        return this;
    }

    /**
     * Get the numberOfMachines property: Gets or sets the number of machines.
     * 
     * @return the numberOfMachines value.
     */
    public int numberOfMachines() {
        return this.numberOfMachines;
    }

    /**
     * Set the numberOfMachines property: Gets or sets the number of machines.
     * 
     * @param numberOfMachines the numberOfMachines value to set.
     * @return the DiscoveredEntityLightSummary object itself.
     */
    public DiscoveredEntityLightSummary withNumberOfMachines(int numberOfMachines) {
        this.numberOfMachines = numberOfMachines;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("numberOfServers", this.numberOfServers);
        jsonWriter.writeIntField("numberOfWebApps", this.numberOfWebApps);
        jsonWriter.writeIntField("numberOfMachines", this.numberOfMachines);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveredEntityLightSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveredEntityLightSummary if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoveredEntityLightSummary.
     */
    public static DiscoveredEntityLightSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveredEntityLightSummary deserializedDiscoveredEntityLightSummary = new DiscoveredEntityLightSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfServers".equals(fieldName)) {
                    deserializedDiscoveredEntityLightSummary.numberOfServers = reader.getInt();
                } else if ("numberOfWebApps".equals(fieldName)) {
                    deserializedDiscoveredEntityLightSummary.numberOfWebApps = reader.getInt();
                } else if ("numberOfMachines".equals(fieldName)) {
                    deserializedDiscoveredEntityLightSummary.numberOfMachines = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveredEntityLightSummary;
        });
    }
}
