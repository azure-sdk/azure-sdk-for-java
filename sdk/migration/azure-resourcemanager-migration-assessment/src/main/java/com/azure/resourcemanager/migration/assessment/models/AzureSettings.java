// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Azure settings for a business case.
 */
@Fluent
public final class AzureSettings implements JsonSerializable<AzureSettings> {
    /*
     * Gets or sets azure location.
     */
    private String targetLocation;

    /*
     * Gets azure Discount percentage.
     */
    private Float discountPercentage;

    /*
     * Business case Currency.
     */
    private BusinessCaseCurrency currency;

    /*
     * Migration Strategy.
     */
    private MigrationStrategy businessCaseType;

    /*
     * Workload discovery source.
     */
    private DiscoverySource workloadDiscoverySource;

    /*
     * Gets start time to use for performance.
     */
    private OffsetDateTime performanceDataStartTime;

    /*
     * Gets end time to use for performance.
     */
    private OffsetDateTime performanceDataEndTime;

    /*
     * Gets comfort factor.
     */
    private Float comfortFactor;

    /*
     * Gets utilization percentile for performance.
     */
    private Float performanceUtilizationPercentile;

    /*
     * Gets migration completion percentage per year.
     */
    private List<AzureSettingsPerYearMigrationCompletionPercentageItem> perYearMigrationCompletionPercentage;

    /*
     * Gets infrastructure growth rate.
     */
    private Float infrastructureGrowthRate;

    /*
     * Gets wACC percentage.
     */
    private Float wacc;

    /*
     * Gets network cost percentage.
     */
    private Float networkCostPercentage;

    /*
     * Gets IaaS labour cost percentage.
     */
    private Float iaasLaborCostPercentage;

    /*
     * Gets PaaS labour cost percentage.
     */
    private Float paasLaborCostPercentage;

    /*
     * Gets Avs labour cost percentage.
     */
    private Float avsLaborCostPercentage;

    /*
     * Gets the business case savings option type.
     */
    private SavingsOption savingsOption;

    /**
     * Creates an instance of AzureSettings class.
     */
    public AzureSettings() {
    }

    /**
     * Get the targetLocation property: Gets or sets azure location.
     * 
     * @return the targetLocation value.
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * Set the targetLocation property: Gets or sets azure location.
     * 
     * @param targetLocation the targetLocation value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withTargetLocation(String targetLocation) {
        this.targetLocation = targetLocation;
        return this;
    }

    /**
     * Get the discountPercentage property: Gets azure Discount percentage.
     * 
     * @return the discountPercentage value.
     */
    public Float discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Set the discountPercentage property: Gets azure Discount percentage.
     * 
     * @param discountPercentage the discountPercentage value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withDiscountPercentage(Float discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Get the currency property: Business case Currency.
     * 
     * @return the currency value.
     */
    public BusinessCaseCurrency currency() {
        return this.currency;
    }

    /**
     * Set the currency property: Business case Currency.
     * 
     * @param currency the currency value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withCurrency(BusinessCaseCurrency currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the businessCaseType property: Migration Strategy.
     * 
     * @return the businessCaseType value.
     */
    public MigrationStrategy businessCaseType() {
        return this.businessCaseType;
    }

    /**
     * Set the businessCaseType property: Migration Strategy.
     * 
     * @param businessCaseType the businessCaseType value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withBusinessCaseType(MigrationStrategy businessCaseType) {
        this.businessCaseType = businessCaseType;
        return this;
    }

    /**
     * Get the workloadDiscoverySource property: Workload discovery source.
     * 
     * @return the workloadDiscoverySource value.
     */
    public DiscoverySource workloadDiscoverySource() {
        return this.workloadDiscoverySource;
    }

    /**
     * Set the workloadDiscoverySource property: Workload discovery source.
     * 
     * @param workloadDiscoverySource the workloadDiscoverySource value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withWorkloadDiscoverySource(DiscoverySource workloadDiscoverySource) {
        this.workloadDiscoverySource = workloadDiscoverySource;
        return this;
    }

    /**
     * Get the performanceDataStartTime property: Gets start time to use for performance.
     * 
     * @return the performanceDataStartTime value.
     */
    public OffsetDateTime performanceDataStartTime() {
        return this.performanceDataStartTime;
    }

    /**
     * Set the performanceDataStartTime property: Gets start time to use for performance.
     * 
     * @param performanceDataStartTime the performanceDataStartTime value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withPerformanceDataStartTime(OffsetDateTime performanceDataStartTime) {
        this.performanceDataStartTime = performanceDataStartTime;
        return this;
    }

    /**
     * Get the performanceDataEndTime property: Gets end time to use for performance.
     * 
     * @return the performanceDataEndTime value.
     */
    public OffsetDateTime performanceDataEndTime() {
        return this.performanceDataEndTime;
    }

    /**
     * Set the performanceDataEndTime property: Gets end time to use for performance.
     * 
     * @param performanceDataEndTime the performanceDataEndTime value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withPerformanceDataEndTime(OffsetDateTime performanceDataEndTime) {
        this.performanceDataEndTime = performanceDataEndTime;
        return this;
    }

    /**
     * Get the comfortFactor property: Gets comfort factor.
     * 
     * @return the comfortFactor value.
     */
    public Float comfortFactor() {
        return this.comfortFactor;
    }

    /**
     * Set the comfortFactor property: Gets comfort factor.
     * 
     * @param comfortFactor the comfortFactor value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withComfortFactor(Float comfortFactor) {
        this.comfortFactor = comfortFactor;
        return this;
    }

    /**
     * Get the performanceUtilizationPercentile property: Gets utilization percentile for performance.
     * 
     * @return the performanceUtilizationPercentile value.
     */
    public Float performanceUtilizationPercentile() {
        return this.performanceUtilizationPercentile;
    }

    /**
     * Set the performanceUtilizationPercentile property: Gets utilization percentile for performance.
     * 
     * @param performanceUtilizationPercentile the performanceUtilizationPercentile value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withPerformanceUtilizationPercentile(Float performanceUtilizationPercentile) {
        this.performanceUtilizationPercentile = performanceUtilizationPercentile;
        return this;
    }

    /**
     * Get the perYearMigrationCompletionPercentage property: Gets migration completion percentage per year.
     * 
     * @return the perYearMigrationCompletionPercentage value.
     */
    public List<AzureSettingsPerYearMigrationCompletionPercentageItem> perYearMigrationCompletionPercentage() {
        return this.perYearMigrationCompletionPercentage;
    }

    /**
     * Set the perYearMigrationCompletionPercentage property: Gets migration completion percentage per year.
     * 
     * @param perYearMigrationCompletionPercentage the perYearMigrationCompletionPercentage value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withPerYearMigrationCompletionPercentage(
        List<AzureSettingsPerYearMigrationCompletionPercentageItem> perYearMigrationCompletionPercentage) {
        this.perYearMigrationCompletionPercentage = perYearMigrationCompletionPercentage;
        return this;
    }

    /**
     * Get the infrastructureGrowthRate property: Gets infrastructure growth rate.
     * 
     * @return the infrastructureGrowthRate value.
     */
    public Float infrastructureGrowthRate() {
        return this.infrastructureGrowthRate;
    }

    /**
     * Set the infrastructureGrowthRate property: Gets infrastructure growth rate.
     * 
     * @param infrastructureGrowthRate the infrastructureGrowthRate value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withInfrastructureGrowthRate(Float infrastructureGrowthRate) {
        this.infrastructureGrowthRate = infrastructureGrowthRate;
        return this;
    }

    /**
     * Get the wacc property: Gets wACC percentage.
     * 
     * @return the wacc value.
     */
    public Float wacc() {
        return this.wacc;
    }

    /**
     * Set the wacc property: Gets wACC percentage.
     * 
     * @param wacc the wacc value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withWacc(Float wacc) {
        this.wacc = wacc;
        return this;
    }

    /**
     * Get the networkCostPercentage property: Gets network cost percentage.
     * 
     * @return the networkCostPercentage value.
     */
    public Float networkCostPercentage() {
        return this.networkCostPercentage;
    }

    /**
     * Set the networkCostPercentage property: Gets network cost percentage.
     * 
     * @param networkCostPercentage the networkCostPercentage value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withNetworkCostPercentage(Float networkCostPercentage) {
        this.networkCostPercentage = networkCostPercentage;
        return this;
    }

    /**
     * Get the iaasLaborCostPercentage property: Gets IaaS labour cost percentage.
     * 
     * @return the iaasLaborCostPercentage value.
     */
    public Float iaasLaborCostPercentage() {
        return this.iaasLaborCostPercentage;
    }

    /**
     * Set the iaasLaborCostPercentage property: Gets IaaS labour cost percentage.
     * 
     * @param iaasLaborCostPercentage the iaasLaborCostPercentage value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withIaasLaborCostPercentage(Float iaasLaborCostPercentage) {
        this.iaasLaborCostPercentage = iaasLaborCostPercentage;
        return this;
    }

    /**
     * Get the paasLaborCostPercentage property: Gets PaaS labour cost percentage.
     * 
     * @return the paasLaborCostPercentage value.
     */
    public Float paasLaborCostPercentage() {
        return this.paasLaborCostPercentage;
    }

    /**
     * Set the paasLaborCostPercentage property: Gets PaaS labour cost percentage.
     * 
     * @param paasLaborCostPercentage the paasLaborCostPercentage value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withPaasLaborCostPercentage(Float paasLaborCostPercentage) {
        this.paasLaborCostPercentage = paasLaborCostPercentage;
        return this;
    }

    /**
     * Get the avsLaborCostPercentage property: Gets Avs labour cost percentage.
     * 
     * @return the avsLaborCostPercentage value.
     */
    public Float avsLaborCostPercentage() {
        return this.avsLaborCostPercentage;
    }

    /**
     * Set the avsLaborCostPercentage property: Gets Avs labour cost percentage.
     * 
     * @param avsLaborCostPercentage the avsLaborCostPercentage value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withAvsLaborCostPercentage(Float avsLaborCostPercentage) {
        this.avsLaborCostPercentage = avsLaborCostPercentage;
        return this;
    }

    /**
     * Get the savingsOption property: Gets the business case savings option type.
     * 
     * @return the savingsOption value.
     */
    public SavingsOption savingsOption() {
        return this.savingsOption;
    }

    /**
     * Set the savingsOption property: Gets the business case savings option type.
     * 
     * @param savingsOption the savingsOption value to set.
     * @return the AzureSettings object itself.
     */
    public AzureSettings withSavingsOption(SavingsOption savingsOption) {
        this.savingsOption = savingsOption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property targetLocation in model AzureSettings"));
        }
        if (currency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property currency in model AzureSettings"));
        }
        if (perYearMigrationCompletionPercentage() != null) {
            perYearMigrationCompletionPercentage().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetLocation", this.targetLocation);
        jsonWriter.writeStringField("currency", this.currency == null ? null : this.currency.toString());
        jsonWriter.writeNumberField("discountPercentage", this.discountPercentage);
        jsonWriter.writeStringField("businessCaseType",
            this.businessCaseType == null ? null : this.businessCaseType.toString());
        jsonWriter.writeStringField("workloadDiscoverySource",
            this.workloadDiscoverySource == null ? null : this.workloadDiscoverySource.toString());
        jsonWriter.writeStringField("performanceDataStartTime",
            this.performanceDataStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.performanceDataStartTime));
        jsonWriter.writeStringField("performanceDataEndTime",
            this.performanceDataEndTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.performanceDataEndTime));
        jsonWriter.writeNumberField("comfortFactor", this.comfortFactor);
        jsonWriter.writeNumberField("performanceUtilizationPercentile", this.performanceUtilizationPercentile);
        jsonWriter.writeArrayField("perYearMigrationCompletionPercentage", this.perYearMigrationCompletionPercentage,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("infrastructureGrowthRate", this.infrastructureGrowthRate);
        jsonWriter.writeNumberField("wacc", this.wacc);
        jsonWriter.writeNumberField("networkCostPercentage", this.networkCostPercentage);
        jsonWriter.writeNumberField("iaasLaborCostPercentage", this.iaasLaborCostPercentage);
        jsonWriter.writeNumberField("paasLaborCostPercentage", this.paasLaborCostPercentage);
        jsonWriter.writeNumberField("avsLaborCostPercentage", this.avsLaborCostPercentage);
        jsonWriter.writeStringField("savingsOption", this.savingsOption == null ? null : this.savingsOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureSettings.
     */
    public static AzureSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureSettings deserializedAzureSettings = new AzureSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetLocation".equals(fieldName)) {
                    deserializedAzureSettings.targetLocation = reader.getString();
                } else if ("currency".equals(fieldName)) {
                    deserializedAzureSettings.currency = BusinessCaseCurrency.fromString(reader.getString());
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedAzureSettings.discountPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("businessCaseType".equals(fieldName)) {
                    deserializedAzureSettings.businessCaseType = MigrationStrategy.fromString(reader.getString());
                } else if ("workloadDiscoverySource".equals(fieldName)) {
                    deserializedAzureSettings.workloadDiscoverySource = DiscoverySource.fromString(reader.getString());
                } else if ("performanceDataStartTime".equals(fieldName)) {
                    deserializedAzureSettings.performanceDataStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("performanceDataEndTime".equals(fieldName)) {
                    deserializedAzureSettings.performanceDataEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("comfortFactor".equals(fieldName)) {
                    deserializedAzureSettings.comfortFactor = reader.getNullable(JsonReader::getFloat);
                } else if ("performanceUtilizationPercentile".equals(fieldName)) {
                    deserializedAzureSettings.performanceUtilizationPercentile
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("perYearMigrationCompletionPercentage".equals(fieldName)) {
                    List<AzureSettingsPerYearMigrationCompletionPercentageItem> perYearMigrationCompletionPercentage
                        = reader.readArray(
                            reader1 -> AzureSettingsPerYearMigrationCompletionPercentageItem.fromJson(reader1));
                    deserializedAzureSettings.perYearMigrationCompletionPercentage
                        = perYearMigrationCompletionPercentage;
                } else if ("infrastructureGrowthRate".equals(fieldName)) {
                    deserializedAzureSettings.infrastructureGrowthRate = reader.getNullable(JsonReader::getFloat);
                } else if ("wacc".equals(fieldName)) {
                    deserializedAzureSettings.wacc = reader.getNullable(JsonReader::getFloat);
                } else if ("networkCostPercentage".equals(fieldName)) {
                    deserializedAzureSettings.networkCostPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("iaasLaborCostPercentage".equals(fieldName)) {
                    deserializedAzureSettings.iaasLaborCostPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("paasLaborCostPercentage".equals(fieldName)) {
                    deserializedAzureSettings.paasLaborCostPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("avsLaborCostPercentage".equals(fieldName)) {
                    deserializedAzureSettings.avsLaborCostPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("savingsOption".equals(fieldName)) {
                    deserializedAzureSettings.savingsOption = SavingsOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureSettings;
        });
    }
}
