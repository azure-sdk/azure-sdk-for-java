// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.migration.assessment.fluent.models.BusinessCaseInner;
import com.azure.resourcemanager.migration.assessment.fluent.models.CompareSummaryInner;
import com.azure.resourcemanager.migration.assessment.fluent.models.ReportDownloadUrlInner;

/**
 * An instance of this class provides access to all the operations defined in BusinessCaseOperationsClient.
 */
public interface BusinessCaseOperationsClient {
    /**
     * List BusinessCase resources by AssessmentProject.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a BusinessCase list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BusinessCaseInner> listByParent(String resourceGroupName, String projectName);

    /**
     * List BusinessCase resources by AssessmentProject.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a BusinessCase list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<BusinessCaseInner> listByParent(String resourceGroupName, String projectName, Context context);

    /**
     * Get a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a BusinessCase along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BusinessCaseInner> getWithResponse(String resourceGroupName, String projectName, String businessCaseName,
        Context context);

    /**
     * Get a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a BusinessCase.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BusinessCaseInner get(String resourceGroupName, String projectName, String businessCaseName);

    /**
     * Create a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of business case resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BusinessCaseInner>, BusinessCaseInner> beginCreate(String resourceGroupName,
        String projectName, String businessCaseName, BusinessCaseInner resource);

    /**
     * Create a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of business case resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<BusinessCaseInner>, BusinessCaseInner> beginCreate(String resourceGroupName,
        String projectName, String businessCaseName, BusinessCaseInner resource, Context context);

    /**
     * Create a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return business case resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BusinessCaseInner create(String resourceGroupName, String projectName, String businessCaseName,
        BusinessCaseInner resource);

    /**
     * Create a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return business case resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BusinessCaseInner create(String resourceGroupName, String projectName, String businessCaseName,
        BusinessCaseInner resource, Context context);

    /**
     * Delete a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String projectName, String businessCaseName,
        Context context);

    /**
     * Delete a BusinessCase.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String projectName, String businessCaseName);

    /**
     * Get Compare summary report for Business case.
     * 
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of compare summary class.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CompareSummaryInner>, CompareSummaryInner> beginCompareSummary(String resourceGroupName,
        String projectName, String businessCaseName, Object body);

    /**
     * Get Compare summary report for Business case.
     * 
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of compare summary class.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CompareSummaryInner>, CompareSummaryInner> beginCompareSummary(String resourceGroupName,
        String projectName, String businessCaseName, Object body, Context context);

    /**
     * Get Compare summary report for Business case.
     * 
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return compare summary class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CompareSummaryInner compareSummary(String resourceGroupName, String projectName, String businessCaseName,
        Object body);

    /**
     * Get Compare summary report for Business case.
     * 
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return compare summary class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CompareSummaryInner compareSummary(String resourceGroupName, String projectName, String businessCaseName,
        Object body, Context context);

    /**
     * Get download URL for the business case report.
     * 
     * Get the URL for downloading the business case in a report format.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the URL for downloading the business case in a report format.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReportDownloadUrlInner>, ReportDownloadUrlInner>
        beginGetReportDownloadUrl(String resourceGroupName, String projectName, String businessCaseName, Object body);

    /**
     * Get download URL for the business case report.
     * 
     * Get the URL for downloading the business case in a report format.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the URL for downloading the business case in a report format.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReportDownloadUrlInner>, ReportDownloadUrlInner> beginGetReportDownloadUrl(
        String resourceGroupName, String projectName, String businessCaseName, Object body, Context context);

    /**
     * Get download URL for the business case report.
     * 
     * Get the URL for downloading the business case in a report format.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the URL for downloading the business case in a report format.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReportDownloadUrlInner getReportDownloadUrl(String resourceGroupName, String projectName, String businessCaseName,
        Object body);

    /**
     * Get download URL for the business case report.
     * 
     * Get the URL for downloading the business case in a report format.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param businessCaseName Business case ARM name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the URL for downloading the business case in a report format.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReportDownloadUrlInner getReportDownloadUrl(String resourceGroupName, String projectName, String businessCaseName,
        Object body, Context context);
}
