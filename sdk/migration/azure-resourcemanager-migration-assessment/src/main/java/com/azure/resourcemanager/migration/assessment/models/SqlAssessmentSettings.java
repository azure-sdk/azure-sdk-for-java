// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SQL assessment settings class.
 */
@Fluent
public final class SqlAssessmentSettings implements JsonSerializable<SqlAssessmentSettings> {
    /*
     * Azure Location or Azure region where to which the machines will be migrated.
     */
    private String azureLocation;

    /*
     * Currency in which prices should be reported.
     */
    private AzureCurrency currency;

    /*
     * Percentage of buffer that user wants on performance metrics when recommending
     * Azure sizes.
     */
    private Float scalingFactor;

    /*
     * Custom discount percentage.
     */
    private Float discountPercentage;

    /*
     * Assessment sizing criterion.
     */
    private AssessmentSizingCriterion sizingCriterion;

    /*
     * Gets or sets the performance data.
     */
    private PerformanceData performanceData;

    /*
     * Gets or sets the savings settings.
     */
    private SavingsSettings savingsSettings;

    /*
     * Gets or sets the billing settings.
     */
    private BillingSettings billingSettings;

    /*
     * Gets or sets user configurable setting to display the environment type.
     */
    private EnvironmentType environmentType;

    /*
     * Gets or sets user configurable setting to display the azure hybrid use benefit.
     */
    private OsLicense osLicense;

    /*
     * Gets or sets the duration for which the entity (SQL, VMs) are up in the
     * on-premises environment.
     */
    private EntityUptime entityUptime;

    /*
     * Gets or sets SQL the preferred azure targets.
     */
    private List<AzureTarget> preferredTargets;

    /*
     * Gets or sets user configurable SQL managed instance settings.
     */
    private SqlMiSettingsV3 azureSqlManagedInstanceSettings;

    /*
     * Gets or sets user configurable SQL database settings.
     */
    private SqlDbSettingsV3 azureSqlDatabaseSettings;

    /*
     * Gets or sets user configurable SQL VM settings.
     */
    private SqlVmSettings azureSqlVmSettings;

    /*
     * Gets or sets user preference indicating intent of multi-subnet configuration.
     */
    private MultiSubnetIntent multiSubnetIntent;

    /*
     * Gets or sets user preference indicating intent of async commit mode.
     */
    private AsyncCommitModeIntent asyncCommitModeIntent;

    /*
     * Gets or sets a value indicating whether internet access is available.
     */
    private Boolean isInternetAccessAvailable;

    /*
     * Gets or sets the Azure Location or Azure region where to which the machines
     * will be migrated.
     */
    private AzureLocation disasterRecoveryLocation;

    /*
     * Gets or sets a value indicating whether HADR assessments needs to be created.
     */
    private Boolean enableHadrAssessment;

    /*
     * Gets or sets a value indicating azure security offering type.
     */
    private AzureSecurityOfferingType azureSecurityOfferingType;

    /*
     * SQL server license.
     */
    private SqlServerLicense sqlServerLicense;

    /**
     * Creates an instance of SqlAssessmentSettings class.
     */
    public SqlAssessmentSettings() {
    }

    /**
     * Get the azureLocation property: Azure Location or Azure region where to which the machines will be migrated.
     * 
     * @return the azureLocation value.
     */
    public String azureLocation() {
        return this.azureLocation;
    }

    /**
     * Set the azureLocation property: Azure Location or Azure region where to which the machines will be migrated.
     * 
     * @param azureLocation the azureLocation value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withAzureLocation(String azureLocation) {
        this.azureLocation = azureLocation;
        return this;
    }

    /**
     * Get the currency property: Currency in which prices should be reported.
     * 
     * @return the currency value.
     */
    public AzureCurrency currency() {
        return this.currency;
    }

    /**
     * Set the currency property: Currency in which prices should be reported.
     * 
     * @param currency the currency value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withCurrency(AzureCurrency currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the scalingFactor property: Percentage of buffer that user wants on performance metrics when recommending
     * Azure sizes.
     * 
     * @return the scalingFactor value.
     */
    public Float scalingFactor() {
        return this.scalingFactor;
    }

    /**
     * Set the scalingFactor property: Percentage of buffer that user wants on performance metrics when recommending
     * Azure sizes.
     * 
     * @param scalingFactor the scalingFactor value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withScalingFactor(Float scalingFactor) {
        this.scalingFactor = scalingFactor;
        return this;
    }

    /**
     * Get the discountPercentage property: Custom discount percentage.
     * 
     * @return the discountPercentage value.
     */
    public Float discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Set the discountPercentage property: Custom discount percentage.
     * 
     * @param discountPercentage the discountPercentage value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withDiscountPercentage(Float discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Get the sizingCriterion property: Assessment sizing criterion.
     * 
     * @return the sizingCriterion value.
     */
    public AssessmentSizingCriterion sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * Set the sizingCriterion property: Assessment sizing criterion.
     * 
     * @param sizingCriterion the sizingCriterion value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withSizingCriterion(AssessmentSizingCriterion sizingCriterion) {
        this.sizingCriterion = sizingCriterion;
        return this;
    }

    /**
     * Get the performanceData property: Gets or sets the performance data.
     * 
     * @return the performanceData value.
     */
    public PerformanceData performanceData() {
        return this.performanceData;
    }

    /**
     * Set the performanceData property: Gets or sets the performance data.
     * 
     * @param performanceData the performanceData value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withPerformanceData(PerformanceData performanceData) {
        this.performanceData = performanceData;
        return this;
    }

    /**
     * Get the savingsSettings property: Gets or sets the savings settings.
     * 
     * @return the savingsSettings value.
     */
    public SavingsSettings savingsSettings() {
        return this.savingsSettings;
    }

    /**
     * Set the savingsSettings property: Gets or sets the savings settings.
     * 
     * @param savingsSettings the savingsSettings value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withSavingsSettings(SavingsSettings savingsSettings) {
        this.savingsSettings = savingsSettings;
        return this;
    }

    /**
     * Get the billingSettings property: Gets or sets the billing settings.
     * 
     * @return the billingSettings value.
     */
    public BillingSettings billingSettings() {
        return this.billingSettings;
    }

    /**
     * Set the billingSettings property: Gets or sets the billing settings.
     * 
     * @param billingSettings the billingSettings value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withBillingSettings(BillingSettings billingSettings) {
        this.billingSettings = billingSettings;
        return this;
    }

    /**
     * Get the environmentType property: Gets or sets user configurable setting to display the environment type.
     * 
     * @return the environmentType value.
     */
    public EnvironmentType environmentType() {
        return this.environmentType;
    }

    /**
     * Set the environmentType property: Gets or sets user configurable setting to display the environment type.
     * 
     * @param environmentType the environmentType value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withEnvironmentType(EnvironmentType environmentType) {
        this.environmentType = environmentType;
        return this;
    }

    /**
     * Get the osLicense property: Gets or sets user configurable setting to display the azure hybrid use benefit.
     * 
     * @return the osLicense value.
     */
    public OsLicense osLicense() {
        return this.osLicense;
    }

    /**
     * Set the osLicense property: Gets or sets user configurable setting to display the azure hybrid use benefit.
     * 
     * @param osLicense the osLicense value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withOsLicense(OsLicense osLicense) {
        this.osLicense = osLicense;
        return this;
    }

    /**
     * Get the entityUptime property: Gets or sets the duration for which the entity (SQL, VMs) are up in the
     * on-premises environment.
     * 
     * @return the entityUptime value.
     */
    public EntityUptime entityUptime() {
        return this.entityUptime;
    }

    /**
     * Set the entityUptime property: Gets or sets the duration for which the entity (SQL, VMs) are up in the
     * on-premises environment.
     * 
     * @param entityUptime the entityUptime value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withEntityUptime(EntityUptime entityUptime) {
        this.entityUptime = entityUptime;
        return this;
    }

    /**
     * Get the preferredTargets property: Gets or sets SQL the preferred azure targets.
     * 
     * @return the preferredTargets value.
     */
    public List<AzureTarget> preferredTargets() {
        return this.preferredTargets;
    }

    /**
     * Set the preferredTargets property: Gets or sets SQL the preferred azure targets.
     * 
     * @param preferredTargets the preferredTargets value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withPreferredTargets(List<AzureTarget> preferredTargets) {
        this.preferredTargets = preferredTargets;
        return this;
    }

    /**
     * Get the azureSqlManagedInstanceSettings property: Gets or sets user configurable SQL managed instance settings.
     * 
     * @return the azureSqlManagedInstanceSettings value.
     */
    public SqlMiSettingsV3 azureSqlManagedInstanceSettings() {
        return this.azureSqlManagedInstanceSettings;
    }

    /**
     * Set the azureSqlManagedInstanceSettings property: Gets or sets user configurable SQL managed instance settings.
     * 
     * @param azureSqlManagedInstanceSettings the azureSqlManagedInstanceSettings value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withAzureSqlManagedInstanceSettings(SqlMiSettingsV3 azureSqlManagedInstanceSettings) {
        this.azureSqlManagedInstanceSettings = azureSqlManagedInstanceSettings;
        return this;
    }

    /**
     * Get the azureSqlDatabaseSettings property: Gets or sets user configurable SQL database settings.
     * 
     * @return the azureSqlDatabaseSettings value.
     */
    public SqlDbSettingsV3 azureSqlDatabaseSettings() {
        return this.azureSqlDatabaseSettings;
    }

    /**
     * Set the azureSqlDatabaseSettings property: Gets or sets user configurable SQL database settings.
     * 
     * @param azureSqlDatabaseSettings the azureSqlDatabaseSettings value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withAzureSqlDatabaseSettings(SqlDbSettingsV3 azureSqlDatabaseSettings) {
        this.azureSqlDatabaseSettings = azureSqlDatabaseSettings;
        return this;
    }

    /**
     * Get the azureSqlVmSettings property: Gets or sets user configurable SQL VM settings.
     * 
     * @return the azureSqlVmSettings value.
     */
    public SqlVmSettings azureSqlVmSettings() {
        return this.azureSqlVmSettings;
    }

    /**
     * Set the azureSqlVmSettings property: Gets or sets user configurable SQL VM settings.
     * 
     * @param azureSqlVmSettings the azureSqlVmSettings value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withAzureSqlVmSettings(SqlVmSettings azureSqlVmSettings) {
        this.azureSqlVmSettings = azureSqlVmSettings;
        return this;
    }

    /**
     * Get the multiSubnetIntent property: Gets or sets user preference indicating intent of multi-subnet configuration.
     * 
     * @return the multiSubnetIntent value.
     */
    public MultiSubnetIntent multiSubnetIntent() {
        return this.multiSubnetIntent;
    }

    /**
     * Set the multiSubnetIntent property: Gets or sets user preference indicating intent of multi-subnet configuration.
     * 
     * @param multiSubnetIntent the multiSubnetIntent value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withMultiSubnetIntent(MultiSubnetIntent multiSubnetIntent) {
        this.multiSubnetIntent = multiSubnetIntent;
        return this;
    }

    /**
     * Get the asyncCommitModeIntent property: Gets or sets user preference indicating intent of async commit mode.
     * 
     * @return the asyncCommitModeIntent value.
     */
    public AsyncCommitModeIntent asyncCommitModeIntent() {
        return this.asyncCommitModeIntent;
    }

    /**
     * Set the asyncCommitModeIntent property: Gets or sets user preference indicating intent of async commit mode.
     * 
     * @param asyncCommitModeIntent the asyncCommitModeIntent value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withAsyncCommitModeIntent(AsyncCommitModeIntent asyncCommitModeIntent) {
        this.asyncCommitModeIntent = asyncCommitModeIntent;
        return this;
    }

    /**
     * Get the isInternetAccessAvailable property: Gets or sets a value indicating whether internet access is available.
     * 
     * @return the isInternetAccessAvailable value.
     */
    public Boolean isInternetAccessAvailable() {
        return this.isInternetAccessAvailable;
    }

    /**
     * Set the isInternetAccessAvailable property: Gets or sets a value indicating whether internet access is available.
     * 
     * @param isInternetAccessAvailable the isInternetAccessAvailable value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withIsInternetAccessAvailable(Boolean isInternetAccessAvailable) {
        this.isInternetAccessAvailable = isInternetAccessAvailable;
        return this;
    }

    /**
     * Get the disasterRecoveryLocation property: Gets or sets the Azure Location or Azure region where to which the
     * machines
     * will be migrated.
     * 
     * @return the disasterRecoveryLocation value.
     */
    public AzureLocation disasterRecoveryLocation() {
        return this.disasterRecoveryLocation;
    }

    /**
     * Set the disasterRecoveryLocation property: Gets or sets the Azure Location or Azure region where to which the
     * machines
     * will be migrated.
     * 
     * @param disasterRecoveryLocation the disasterRecoveryLocation value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withDisasterRecoveryLocation(AzureLocation disasterRecoveryLocation) {
        this.disasterRecoveryLocation = disasterRecoveryLocation;
        return this;
    }

    /**
     * Get the enableHadrAssessment property: Gets or sets a value indicating whether HADR assessments needs to be
     * created.
     * 
     * @return the enableHadrAssessment value.
     */
    public Boolean enableHadrAssessment() {
        return this.enableHadrAssessment;
    }

    /**
     * Set the enableHadrAssessment property: Gets or sets a value indicating whether HADR assessments needs to be
     * created.
     * 
     * @param enableHadrAssessment the enableHadrAssessment value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withEnableHadrAssessment(Boolean enableHadrAssessment) {
        this.enableHadrAssessment = enableHadrAssessment;
        return this;
    }

    /**
     * Get the azureSecurityOfferingType property: Gets or sets a value indicating azure security offering type.
     * 
     * @return the azureSecurityOfferingType value.
     */
    public AzureSecurityOfferingType azureSecurityOfferingType() {
        return this.azureSecurityOfferingType;
    }

    /**
     * Set the azureSecurityOfferingType property: Gets or sets a value indicating azure security offering type.
     * 
     * @param azureSecurityOfferingType the azureSecurityOfferingType value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withAzureSecurityOfferingType(AzureSecurityOfferingType azureSecurityOfferingType) {
        this.azureSecurityOfferingType = azureSecurityOfferingType;
        return this;
    }

    /**
     * Get the sqlServerLicense property: SQL server license.
     * 
     * @return the sqlServerLicense value.
     */
    public SqlServerLicense sqlServerLicense() {
        return this.sqlServerLicense;
    }

    /**
     * Set the sqlServerLicense property: SQL server license.
     * 
     * @param sqlServerLicense the sqlServerLicense value to set.
     * @return the SqlAssessmentSettings object itself.
     */
    public SqlAssessmentSettings withSqlServerLicense(SqlServerLicense sqlServerLicense) {
        this.sqlServerLicense = sqlServerLicense;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (performanceData() != null) {
            performanceData().validate();
        }
        if (savingsSettings() != null) {
            savingsSettings().validate();
        }
        if (billingSettings() != null) {
            billingSettings().validate();
        }
        if (entityUptime() != null) {
            entityUptime().validate();
        }
        if (azureSqlManagedInstanceSettings() != null) {
            azureSqlManagedInstanceSettings().validate();
        }
        if (azureSqlDatabaseSettings() != null) {
            azureSqlDatabaseSettings().validate();
        }
        if (azureSqlVmSettings() != null) {
            azureSqlVmSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureLocation", this.azureLocation);
        jsonWriter.writeStringField("currency", this.currency == null ? null : this.currency.toString());
        jsonWriter.writeNumberField("scalingFactor", this.scalingFactor);
        jsonWriter.writeNumberField("discountPercentage", this.discountPercentage);
        jsonWriter.writeStringField("sizingCriterion",
            this.sizingCriterion == null ? null : this.sizingCriterion.toString());
        jsonWriter.writeJsonField("performanceData", this.performanceData);
        jsonWriter.writeJsonField("savingsSettings", this.savingsSettings);
        jsonWriter.writeJsonField("billingSettings", this.billingSettings);
        jsonWriter.writeStringField("environmentType",
            this.environmentType == null ? null : this.environmentType.toString());
        jsonWriter.writeStringField("osLicense", this.osLicense == null ? null : this.osLicense.toString());
        jsonWriter.writeJsonField("entityUptime", this.entityUptime);
        jsonWriter.writeArrayField("preferredTargets", this.preferredTargets,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeJsonField("azureSqlManagedInstanceSettings", this.azureSqlManagedInstanceSettings);
        jsonWriter.writeJsonField("azureSqlDatabaseSettings", this.azureSqlDatabaseSettings);
        jsonWriter.writeJsonField("azureSqlVmSettings", this.azureSqlVmSettings);
        jsonWriter.writeStringField("multiSubnetIntent",
            this.multiSubnetIntent == null ? null : this.multiSubnetIntent.toString());
        jsonWriter.writeStringField("asyncCommitModeIntent",
            this.asyncCommitModeIntent == null ? null : this.asyncCommitModeIntent.toString());
        jsonWriter.writeBooleanField("isInternetAccessAvailable", this.isInternetAccessAvailable);
        jsonWriter.writeStringField("disasterRecoveryLocation",
            this.disasterRecoveryLocation == null ? null : this.disasterRecoveryLocation.toString());
        jsonWriter.writeBooleanField("enableHadrAssessment", this.enableHadrAssessment);
        jsonWriter.writeStringField("azureSecurityOfferingType",
            this.azureSecurityOfferingType == null ? null : this.azureSecurityOfferingType.toString());
        jsonWriter.writeStringField("sqlServerLicense",
            this.sqlServerLicense == null ? null : this.sqlServerLicense.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessmentSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessmentSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessmentSettings.
     */
    public static SqlAssessmentSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessmentSettings deserializedSqlAssessmentSettings = new SqlAssessmentSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureLocation".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.azureLocation = reader.getString();
                } else if ("currency".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.currency = AzureCurrency.fromString(reader.getString());
                } else if ("scalingFactor".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.scalingFactor = reader.getNullable(JsonReader::getFloat);
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.discountPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("sizingCriterion".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.sizingCriterion
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else if ("performanceData".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.performanceData = PerformanceData.fromJson(reader);
                } else if ("savingsSettings".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.savingsSettings = SavingsSettings.fromJson(reader);
                } else if ("billingSettings".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.billingSettings = BillingSettings.fromJson(reader);
                } else if ("environmentType".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.environmentType = EnvironmentType.fromString(reader.getString());
                } else if ("osLicense".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.osLicense = OsLicense.fromString(reader.getString());
                } else if ("entityUptime".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.entityUptime = EntityUptime.fromJson(reader);
                } else if ("preferredTargets".equals(fieldName)) {
                    List<AzureTarget> preferredTargets
                        = reader.readArray(reader1 -> AzureTarget.fromString(reader1.getString()));
                    deserializedSqlAssessmentSettings.preferredTargets = preferredTargets;
                } else if ("azureSqlManagedInstanceSettings".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.azureSqlManagedInstanceSettings
                        = SqlMiSettingsV3.fromJson(reader);
                } else if ("azureSqlDatabaseSettings".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.azureSqlDatabaseSettings = SqlDbSettingsV3.fromJson(reader);
                } else if ("azureSqlVmSettings".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.azureSqlVmSettings = SqlVmSettings.fromJson(reader);
                } else if ("multiSubnetIntent".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.multiSubnetIntent
                        = MultiSubnetIntent.fromString(reader.getString());
                } else if ("asyncCommitModeIntent".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.asyncCommitModeIntent
                        = AsyncCommitModeIntent.fromString(reader.getString());
                } else if ("isInternetAccessAvailable".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.isInternetAccessAvailable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("disasterRecoveryLocation".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.disasterRecoveryLocation
                        = AzureLocation.fromString(reader.getString());
                } else if ("enableHadrAssessment".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.enableHadrAssessment = reader.getNullable(JsonReader::getBoolean);
                } else if ("azureSecurityOfferingType".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.azureSecurityOfferingType
                        = AzureSecurityOfferingType.fromString(reader.getString());
                } else if ("sqlServerLicense".equals(fieldName)) {
                    deserializedSqlAssessmentSettings.sqlServerLicense
                        = SqlServerLicense.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessmentSettings;
        });
    }
}
