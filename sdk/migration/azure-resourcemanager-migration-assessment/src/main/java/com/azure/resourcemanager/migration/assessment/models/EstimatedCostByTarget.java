// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Shows the estimated cost by target.
 */
@Immutable
public final class EstimatedCostByTarget implements JsonSerializable<EstimatedCostByTarget> {
    /*
     * Azure SQL MI cost.
     */
    private Float azureSqlMiCost;

    /*
     * Azure SQL DB cost.
     */
    private Float azureSqlDbCost;

    /*
     * Azure App Service cost.
     */
    private Float appServiceCost;

    /*
     * Azure App Service Containers cost.
     */
    private Float appServiceContainerCost;

    /*
     * Azure Kubernetes Service cost.
     */
    private Float azureKubernetesServiceCost;

    /**
     * Creates an instance of EstimatedCostByTarget class.
     */
    public EstimatedCostByTarget() {
    }

    /**
     * Get the azureSqlMiCost property: Azure SQL MI cost.
     * 
     * @return the azureSqlMiCost value.
     */
    public Float azureSqlMiCost() {
        return this.azureSqlMiCost;
    }

    /**
     * Get the azureSqlDbCost property: Azure SQL DB cost.
     * 
     * @return the azureSqlDbCost value.
     */
    public Float azureSqlDbCost() {
        return this.azureSqlDbCost;
    }

    /**
     * Get the appServiceCost property: Azure App Service cost.
     * 
     * @return the appServiceCost value.
     */
    public Float appServiceCost() {
        return this.appServiceCost;
    }

    /**
     * Get the appServiceContainerCost property: Azure App Service Containers cost.
     * 
     * @return the appServiceContainerCost value.
     */
    public Float appServiceContainerCost() {
        return this.appServiceContainerCost;
    }

    /**
     * Get the azureKubernetesServiceCost property: Azure Kubernetes Service cost.
     * 
     * @return the azureKubernetesServiceCost value.
     */
    public Float azureKubernetesServiceCost() {
        return this.azureKubernetesServiceCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EstimatedCostByTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EstimatedCostByTarget if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EstimatedCostByTarget.
     */
    public static EstimatedCostByTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EstimatedCostByTarget deserializedEstimatedCostByTarget = new EstimatedCostByTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureSqlMiCost".equals(fieldName)) {
                    deserializedEstimatedCostByTarget.azureSqlMiCost = reader.getNullable(JsonReader::getFloat);
                } else if ("azureSqlDbCost".equals(fieldName)) {
                    deserializedEstimatedCostByTarget.azureSqlDbCost = reader.getNullable(JsonReader::getFloat);
                } else if ("appServiceCost".equals(fieldName)) {
                    deserializedEstimatedCostByTarget.appServiceCost = reader.getNullable(JsonReader::getFloat);
                } else if ("appServiceContainerCost".equals(fieldName)) {
                    deserializedEstimatedCostByTarget.appServiceContainerCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("azureKubernetesServiceCost".equals(fieldName)) {
                    deserializedEstimatedCostByTarget.azureKubernetesServiceCost
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEstimatedCostByTarget;
        });
    }
}
