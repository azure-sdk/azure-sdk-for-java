// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL Server licensing settings.
 */
@Fluent
public final class SqlServerLicensingSettings implements JsonSerializable<SqlServerLicensingSettings> {
    /*
     * SQL Server version.
     */
    private SqlServerLicenseType version;

    /*
     * Licence cost.
     */
    private float licenseCost;

    /*
     * Software assurance (SA) cost.
     */
    private float softwareAssuranceCost;

    /**
     * Creates an instance of SqlServerLicensingSettings class.
     */
    public SqlServerLicensingSettings() {
    }

    /**
     * Get the version property: SQL Server version.
     * 
     * @return the version value.
     */
    public SqlServerLicenseType version() {
        return this.version;
    }

    /**
     * Set the version property: SQL Server version.
     * 
     * @param version the version value to set.
     * @return the SqlServerLicensingSettings object itself.
     */
    public SqlServerLicensingSettings withVersion(SqlServerLicenseType version) {
        this.version = version;
        return this;
    }

    /**
     * Get the licenseCost property: Licence cost.
     * 
     * @return the licenseCost value.
     */
    public float licenseCost() {
        return this.licenseCost;
    }

    /**
     * Set the licenseCost property: Licence cost.
     * 
     * @param licenseCost the licenseCost value to set.
     * @return the SqlServerLicensingSettings object itself.
     */
    public SqlServerLicensingSettings withLicenseCost(float licenseCost) {
        this.licenseCost = licenseCost;
        return this;
    }

    /**
     * Get the softwareAssuranceCost property: Software assurance (SA) cost.
     * 
     * @return the softwareAssuranceCost value.
     */
    public float softwareAssuranceCost() {
        return this.softwareAssuranceCost;
    }

    /**
     * Set the softwareAssuranceCost property: Software assurance (SA) cost.
     * 
     * @param softwareAssuranceCost the softwareAssuranceCost value to set.
     * @return the SqlServerLicensingSettings object itself.
     */
    public SqlServerLicensingSettings withSoftwareAssuranceCost(float softwareAssuranceCost) {
        this.softwareAssuranceCost = softwareAssuranceCost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (version() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property version in model SqlServerLicensingSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlServerLicensingSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version == null ? null : this.version.toString());
        jsonWriter.writeFloatField("licenseCost", this.licenseCost);
        jsonWriter.writeFloatField("softwareAssuranceCost", this.softwareAssuranceCost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServerLicensingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServerLicensingSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlServerLicensingSettings.
     */
    public static SqlServerLicensingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServerLicensingSettings deserializedSqlServerLicensingSettings = new SqlServerLicensingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedSqlServerLicensingSettings.version
                        = SqlServerLicenseType.fromString(reader.getString());
                } else if ("licenseCost".equals(fieldName)) {
                    deserializedSqlServerLicensingSettings.licenseCost = reader.getFloat();
                } else if ("softwareAssuranceCost".equals(fieldName)) {
                    deserializedSqlServerLicensingSettings.softwareAssuranceCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServerLicensingSettings;
        });
    }
}
