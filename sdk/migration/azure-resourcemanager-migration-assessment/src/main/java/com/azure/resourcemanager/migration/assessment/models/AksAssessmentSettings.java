// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of AKS Assessment Settings.
 */
@Fluent
public final class AksAssessmentSettings extends AssessmentSettings {
    /*
     * Gets or sets azure VM category.
     */
    private AzureVmCategory category;

    /*
     * Gets or sets savings options.
     */
    private SavingsOptions savingsOptions;

    /*
     * Gets or sets consolidation type.
     */
    private ConsolidationType consolidation;

    /*
     * Gets or sets pricing tier.
     */
    private PricingTier pricingTier;

    /**
     * Creates an instance of AksAssessmentSettings class.
     */
    public AksAssessmentSettings() {
    }

    /**
     * Get the category property: Gets or sets azure VM category.
     * 
     * @return the category value.
     */
    public AzureVmCategory category() {
        return this.category;
    }

    /**
     * Set the category property: Gets or sets azure VM category.
     * 
     * @param category the category value to set.
     * @return the AksAssessmentSettings object itself.
     */
    public AksAssessmentSettings withCategory(AzureVmCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get the savingsOptions property: Gets or sets savings options.
     * 
     * @return the savingsOptions value.
     */
    public SavingsOptions savingsOptions() {
        return this.savingsOptions;
    }

    /**
     * Set the savingsOptions property: Gets or sets savings options.
     * 
     * @param savingsOptions the savingsOptions value to set.
     * @return the AksAssessmentSettings object itself.
     */
    public AksAssessmentSettings withSavingsOptions(SavingsOptions savingsOptions) {
        this.savingsOptions = savingsOptions;
        return this;
    }

    /**
     * Get the consolidation property: Gets or sets consolidation type.
     * 
     * @return the consolidation value.
     */
    public ConsolidationType consolidation() {
        return this.consolidation;
    }

    /**
     * Set the consolidation property: Gets or sets consolidation type.
     * 
     * @param consolidation the consolidation value to set.
     * @return the AksAssessmentSettings object itself.
     */
    public AksAssessmentSettings withConsolidation(ConsolidationType consolidation) {
        this.consolidation = consolidation;
        return this;
    }

    /**
     * Get the pricingTier property: Gets or sets pricing tier.
     * 
     * @return the pricingTier value.
     */
    public PricingTier pricingTier() {
        return this.pricingTier;
    }

    /**
     * Set the pricingTier property: Gets or sets pricing tier.
     * 
     * @param pricingTier the pricingTier value to set.
     * @return the AksAssessmentSettings object itself.
     */
    public AksAssessmentSettings withPricingTier(PricingTier pricingTier) {
        this.pricingTier = pricingTier;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withAzureLocation(String azureLocation) {
        super.withAzureLocation(azureLocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withEnvironmentType(AzureEnvironmentType environmentType) {
        super.withEnvironmentType(environmentType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withLicensingProgram(LicensingProgram licensingProgram) {
        super.withLicensingProgram(licensingProgram);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withCurrency(AzureCurrency currency) {
        super.withCurrency(currency);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withDiscountPercentage(Float discountPercentage) {
        super.withDiscountPercentage(discountPercentage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withSizingCriteria(AssessmentSizingCriterion sizingCriteria) {
        super.withSizingCriteria(sizingCriteria);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withPerformanceData(PerfDataSettings performanceData) {
        super.withPerformanceData(performanceData);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentSettings withScalingFactor(Float scalingFactor) {
        super.withScalingFactor(scalingFactor);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (category() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property category in model AksAssessmentSettings"));
        }
        if (savingsOptions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property savingsOptions in model AksAssessmentSettings"));
        }
        if (consolidation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property consolidation in model AksAssessmentSettings"));
        }
        if (pricingTier() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property pricingTier in model AksAssessmentSettings"));
        }
        if (azureLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureLocation in model AksAssessmentSettings"));
        }
        if (environmentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property environmentType in model AksAssessmentSettings"));
        }
        if (licensingProgram() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property licensingProgram in model AksAssessmentSettings"));
        }
        if (currency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property currency in model AksAssessmentSettings"));
        }
        if (sizingCriteria() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sizingCriteria in model AksAssessmentSettings"));
        }
        if (performanceData() != null) {
            performanceData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AksAssessmentSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureLocation", azureLocation());
        jsonWriter.writeStringField("environmentType", environmentType() == null ? null : environmentType().toString());
        jsonWriter.writeStringField("licensingProgram",
            licensingProgram() == null ? null : licensingProgram().toString());
        jsonWriter.writeStringField("currency", currency() == null ? null : currency().toString());
        jsonWriter.writeStringField("sizingCriteria", sizingCriteria() == null ? null : sizingCriteria().toString());
        jsonWriter.writeNumberField("discountPercentage", discountPercentage());
        jsonWriter.writeJsonField("performanceData", performanceData());
        jsonWriter.writeNumberField("scalingFactor", scalingFactor());
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("savingsOptions",
            this.savingsOptions == null ? null : this.savingsOptions.toString());
        jsonWriter.writeStringField("consolidation", this.consolidation == null ? null : this.consolidation.toString());
        jsonWriter.writeStringField("pricingTier", this.pricingTier == null ? null : this.pricingTier.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksAssessmentSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksAssessmentSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksAssessmentSettings.
     */
    public static AksAssessmentSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksAssessmentSettings deserializedAksAssessmentSettings = new AksAssessmentSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureLocation".equals(fieldName)) {
                    deserializedAksAssessmentSettings.withAzureLocation(reader.getString());
                } else if ("environmentType".equals(fieldName)) {
                    deserializedAksAssessmentSettings
                        .withEnvironmentType(AzureEnvironmentType.fromString(reader.getString()));
                } else if ("licensingProgram".equals(fieldName)) {
                    deserializedAksAssessmentSettings
                        .withLicensingProgram(LicensingProgram.fromString(reader.getString()));
                } else if ("currency".equals(fieldName)) {
                    deserializedAksAssessmentSettings.withCurrency(AzureCurrency.fromString(reader.getString()));
                } else if ("sizingCriteria".equals(fieldName)) {
                    deserializedAksAssessmentSettings
                        .withSizingCriteria(AssessmentSizingCriterion.fromString(reader.getString()));
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedAksAssessmentSettings.withDiscountPercentage(reader.getNullable(JsonReader::getFloat));
                } else if ("performanceData".equals(fieldName)) {
                    deserializedAksAssessmentSettings.withPerformanceData(PerfDataSettings.fromJson(reader));
                } else if ("scalingFactor".equals(fieldName)) {
                    deserializedAksAssessmentSettings.withScalingFactor(reader.getNullable(JsonReader::getFloat));
                } else if ("category".equals(fieldName)) {
                    deserializedAksAssessmentSettings.category = AzureVmCategory.fromString(reader.getString());
                } else if ("savingsOptions".equals(fieldName)) {
                    deserializedAksAssessmentSettings.savingsOptions = SavingsOptions.fromString(reader.getString());
                } else if ("consolidation".equals(fieldName)) {
                    deserializedAksAssessmentSettings.consolidation = ConsolidationType.fromString(reader.getString());
                } else if ("pricingTier".equals(fieldName)) {
                    deserializedAksAssessmentSettings.pricingTier = PricingTier.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksAssessmentSettings;
        });
    }
}
