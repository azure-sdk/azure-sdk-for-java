// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SQL service tier.
 */
@Immutable
public final class SqlServiceTier implements JsonSerializable<SqlServiceTier> {
    /*
     * The service tier name.
     */
    private String serviceTierName;

    /*
     * The number of sql entities with this tier.
     */
    private Float serviceTierNumber;

    /**
     * Creates an instance of SqlServiceTier class.
     */
    public SqlServiceTier() {
    }

    /**
     * Get the serviceTierName property: The service tier name.
     * 
     * @return the serviceTierName value.
     */
    public String serviceTierName() {
        return this.serviceTierName;
    }

    /**
     * Get the serviceTierNumber property: The number of sql entities with this tier.
     * 
     * @return the serviceTierNumber value.
     */
    public Float serviceTierNumber() {
        return this.serviceTierNumber;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlServiceTier from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlServiceTier if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlServiceTier.
     */
    public static SqlServiceTier fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlServiceTier deserializedSqlServiceTier = new SqlServiceTier();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceTierName".equals(fieldName)) {
                    deserializedSqlServiceTier.serviceTierName = reader.getString();
                } else if ("serviceTierNumber".equals(fieldName)) {
                    deserializedSqlServiceTier.serviceTierNumber = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlServiceTier;
        });
    }
}
