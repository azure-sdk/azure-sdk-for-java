// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The savings details.
 */
@Immutable
public final class SavingsDetailsCommon implements JsonSerializable<SavingsDetailsCommon> {
    /*
     * The savings options.
     */
    private SavingsOptions savingOptions;

    /*
     * The sku cost details per azure offer type.
     */
    private List<SavingsDetailsCommonSavingsDetailItem> savingsDetail;

    /**
     * Creates an instance of SavingsDetailsCommon class.
     */
    public SavingsDetailsCommon() {
    }

    /**
     * Get the savingOptions property: The savings options.
     * 
     * @return the savingOptions value.
     */
    public SavingsOptions savingOptions() {
        return this.savingOptions;
    }

    /**
     * Get the savingsDetail property: The sku cost details per azure offer type.
     * 
     * @return the savingsDetail value.
     */
    public List<SavingsDetailsCommonSavingsDetailItem> savingsDetail() {
        return this.savingsDetail;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (savingsDetail() != null) {
            savingsDetail().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SavingsDetailsCommon from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SavingsDetailsCommon if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SavingsDetailsCommon.
     */
    public static SavingsDetailsCommon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SavingsDetailsCommon deserializedSavingsDetailsCommon = new SavingsDetailsCommon();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("savingOptions".equals(fieldName)) {
                    deserializedSavingsDetailsCommon.savingOptions = SavingsOptions.fromString(reader.getString());
                } else if ("savingsDetail".equals(fieldName)) {
                    List<SavingsDetailsCommonSavingsDetailItem> savingsDetail
                        = reader.readArray(reader1 -> SavingsDetailsCommonSavingsDetailItem.fromJson(reader1));
                    deserializedSavingsDetailsCommon.savingsDetail = savingsDetail;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSavingsDetailsCommon;
        });
    }
}
