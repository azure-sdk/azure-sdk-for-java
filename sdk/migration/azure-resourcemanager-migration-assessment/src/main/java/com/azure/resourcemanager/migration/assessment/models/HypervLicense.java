// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Representation of a licence.
 */
@Fluent
public final class HypervLicense implements JsonSerializable<HypervLicense> {
    /*
     * Cost of a licence.
     */
    private float licenseCost;

    /*
     * HyperV licence type.
     */
    private HyperVLicenseType licenseType;

    /**
     * Creates an instance of HypervLicense class.
     */
    public HypervLicense() {
    }

    /**
     * Get the licenseCost property: Cost of a licence.
     * 
     * @return the licenseCost value.
     */
    public float licenseCost() {
        return this.licenseCost;
    }

    /**
     * Set the licenseCost property: Cost of a licence.
     * 
     * @param licenseCost the licenseCost value to set.
     * @return the HypervLicense object itself.
     */
    public HypervLicense withLicenseCost(float licenseCost) {
        this.licenseCost = licenseCost;
        return this;
    }

    /**
     * Get the licenseType property: HyperV licence type.
     * 
     * @return the licenseType value.
     */
    public HyperVLicenseType licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: HyperV licence type.
     * 
     * @param licenseType the licenseType value to set.
     * @return the HypervLicense object itself.
     */
    public HypervLicense withLicenseType(HyperVLicenseType licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (licenseType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property licenseType in model HypervLicense"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HypervLicense.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("licenseCost", this.licenseCost);
        jsonWriter.writeStringField("licenseType", this.licenseType == null ? null : this.licenseType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HypervLicense from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HypervLicense if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HypervLicense.
     */
    public static HypervLicense fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HypervLicense deserializedHypervLicense = new HypervLicense();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("licenseCost".equals(fieldName)) {
                    deserializedHypervLicense.licenseCost = reader.getFloat();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedHypervLicense.licenseType = HyperVLicenseType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHypervLicense;
        });
    }
}
