// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The on premises PaaS cost.
 */
@Immutable
public final class CostDetails implements JsonSerializable<CostDetails> {
    /*
     * The storage cost.
     */
    private Float storageCost;

    /*
     * The compute cost.
     */
    private Float computeCost;

    /*
     * The IT labor cost.
     */
    private Float itLaborCost;

    /*
     * The network cost.
     */
    private Float networkCost;

    /*
     * The windows AhubSavings.
     */
    private Float ahubSavings;

    /*
     * The linux AhubSavings.
     */
    private Float linuxAhubSavings;

    /*
     * Security Cost.
     */
    private Float securityCost;

    /*
     * Management Cost Details.
     */
    private ManagementCostDetails managementCostDetails;

    /*
     * esu savings.
     */
    private Float esuSavings;

    /*
     * The facilities cost.
     */
    private Float facilitiesCost;

    /**
     * Creates an instance of CostDetails class.
     */
    public CostDetails() {
    }

    /**
     * Get the storageCost property: The storage cost.
     * 
     * @return the storageCost value.
     */
    public Float storageCost() {
        return this.storageCost;
    }

    /**
     * Get the computeCost property: The compute cost.
     * 
     * @return the computeCost value.
     */
    public Float computeCost() {
        return this.computeCost;
    }

    /**
     * Get the itLaborCost property: The IT labor cost.
     * 
     * @return the itLaborCost value.
     */
    public Float itLaborCost() {
        return this.itLaborCost;
    }

    /**
     * Get the networkCost property: The network cost.
     * 
     * @return the networkCost value.
     */
    public Float networkCost() {
        return this.networkCost;
    }

    /**
     * Get the ahubSavings property: The windows AhubSavings.
     * 
     * @return the ahubSavings value.
     */
    public Float ahubSavings() {
        return this.ahubSavings;
    }

    /**
     * Get the linuxAhubSavings property: The linux AhubSavings.
     * 
     * @return the linuxAhubSavings value.
     */
    public Float linuxAhubSavings() {
        return this.linuxAhubSavings;
    }

    /**
     * Get the securityCost property: Security Cost.
     * 
     * @return the securityCost value.
     */
    public Float securityCost() {
        return this.securityCost;
    }

    /**
     * Get the managementCostDetails property: Management Cost Details.
     * 
     * @return the managementCostDetails value.
     */
    public ManagementCostDetails managementCostDetails() {
        return this.managementCostDetails;
    }

    /**
     * Get the esuSavings property: esu savings.
     * 
     * @return the esuSavings value.
     */
    public Float esuSavings() {
        return this.esuSavings;
    }

    /**
     * Get the facilitiesCost property: The facilities cost.
     * 
     * @return the facilitiesCost value.
     */
    public Float facilitiesCost() {
        return this.facilitiesCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managementCostDetails() != null) {
            managementCostDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CostDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CostDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CostDetails.
     */
    public static CostDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CostDetails deserializedCostDetails = new CostDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageCost".equals(fieldName)) {
                    deserializedCostDetails.storageCost = reader.getNullable(JsonReader::getFloat);
                } else if ("computeCost".equals(fieldName)) {
                    deserializedCostDetails.computeCost = reader.getNullable(JsonReader::getFloat);
                } else if ("itLaborCost".equals(fieldName)) {
                    deserializedCostDetails.itLaborCost = reader.getNullable(JsonReader::getFloat);
                } else if ("networkCost".equals(fieldName)) {
                    deserializedCostDetails.networkCost = reader.getNullable(JsonReader::getFloat);
                } else if ("ahubSavings".equals(fieldName)) {
                    deserializedCostDetails.ahubSavings = reader.getNullable(JsonReader::getFloat);
                } else if ("linuxAhubSavings".equals(fieldName)) {
                    deserializedCostDetails.linuxAhubSavings = reader.getNullable(JsonReader::getFloat);
                } else if ("securityCost".equals(fieldName)) {
                    deserializedCostDetails.securityCost = reader.getNullable(JsonReader::getFloat);
                } else if ("managementCostDetails".equals(fieldName)) {
                    deserializedCostDetails.managementCostDetails = ManagementCostDetails.fromJson(reader);
                } else if ("esuSavings".equals(fieldName)) {
                    deserializedCostDetails.esuSavings = reader.getNullable(JsonReader::getFloat);
                } else if ("facilitiesCost".equals(fieldName)) {
                    deserializedCostDetails.facilitiesCost = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCostDetails;
        });
    }
}
