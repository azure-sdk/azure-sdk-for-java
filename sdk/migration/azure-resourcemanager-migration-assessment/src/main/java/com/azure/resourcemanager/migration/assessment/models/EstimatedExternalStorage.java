// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Estimated external storage.
 */
@Immutable
public final class EstimatedExternalStorage implements JsonSerializable<EstimatedExternalStorage> {
    /*
     * External storage type
     */
    private ExternalStorageType storageType;

    /*
     * Total storage allocation in GB
     */
    private Float totalStorageInGB;

    /*
     * Percent storage utilization
     */
    private Float storageUtilization;

    /*
     * Total storage cost
     */
    private Float totalStorageCost;

    /**
     * Creates an instance of EstimatedExternalStorage class.
     */
    public EstimatedExternalStorage() {
    }

    /**
     * Get the storageType property: External storage type.
     * 
     * @return the storageType value.
     */
    public ExternalStorageType storageType() {
        return this.storageType;
    }

    /**
     * Get the totalStorageInGB property: Total storage allocation in GB.
     * 
     * @return the totalStorageInGB value.
     */
    public Float totalStorageInGB() {
        return this.totalStorageInGB;
    }

    /**
     * Get the storageUtilization property: Percent storage utilization.
     * 
     * @return the storageUtilization value.
     */
    public Float storageUtilization() {
        return this.storageUtilization;
    }

    /**
     * Get the totalStorageCost property: Total storage cost.
     * 
     * @return the totalStorageCost value.
     */
    public Float totalStorageCost() {
        return this.totalStorageCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EstimatedExternalStorage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EstimatedExternalStorage if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EstimatedExternalStorage.
     */
    public static EstimatedExternalStorage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EstimatedExternalStorage deserializedEstimatedExternalStorage = new EstimatedExternalStorage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageType".equals(fieldName)) {
                    deserializedEstimatedExternalStorage.storageType
                        = ExternalStorageType.fromString(reader.getString());
                } else if ("totalStorageInGB".equals(fieldName)) {
                    deserializedEstimatedExternalStorage.totalStorageInGB = reader.getNullable(JsonReader::getFloat);
                } else if ("storageUtilization".equals(fieldName)) {
                    deserializedEstimatedExternalStorage.storageUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("totalStorageCost".equals(fieldName)) {
                    deserializedEstimatedExternalStorage.totalStorageCost = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEstimatedExternalStorage;
        });
    }
}
