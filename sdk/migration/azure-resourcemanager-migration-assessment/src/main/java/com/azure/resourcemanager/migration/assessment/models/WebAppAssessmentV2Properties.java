// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Web app assessment properties class.
 */
@Fluent
public final class WebAppAssessmentV2Properties extends AzureResourceProperties2 {
    /*
     * Gets or sets user configurable setting to display the environment type.
     */
    private EnvironmentType environmentType;

    /*
     * Gets or sets the duration for which the entity (Web app, VMs) are up in the
     * on-premises environment.
     */
    private EntityUptime entityUptime;

    /*
     * Gets or sets the Enterprise agreement subscription id.
     */
    private String eaSubscriptionId;

    /*
     * Gets or sets user configurable app service native settings.
     */
    private AppSvcNativeSettings appSvcNativeSettings;

    /*
     * Gets or sets user configurable app service container database settings.
     */
    private AppSvcContainerSettings appSvcContainerSettings;

    /*
     * Gets or sets user configurable discovered entity settings.
     */
    private DiscoveredEntityLightSummary discoveredEntityLightSummary;

    /*
     * Gets or sets a value indicating azure security offering type.
     */
    private AzureSecurityOfferingType azureSecurityOfferingType;

    /*
     * Reserved instance.
     */
    private AzureReservedInstance reservedInstance;

    /*
     * Gets the group type for the assessment.
     */
    private GroupType groupType;

    /*
     * Assessment type of the assessment.
     */
    private AssessmentType assessmentType;

    /*
     * Azure Location or Azure region where to which the machines will be migrated.
     */
    private String azureLocation;

    /*
     * Azure Offer Code.
     */
    private AzureOfferCode azureOfferCode;

    /*
     * Currency in which prices should be reported.
     */
    private AzureCurrency currency;

    /*
     * Percentage of buffer that user wants on performance metrics when recommending
     * Azure sizes.
     */
    private Float scalingFactor;

    /*
     * Percentile of the utilization data values to be considered while assessing
     * machines.
     */
    private Percentile percentile;

    /*
     * Time Range for which the historic utilization data should be considered for
     * assessment.
     */
    private TimeRange timeRange;

    /*
     * Gets or sets the start time to consider performance data for assessment.
     */
    private OffsetDateTime perfDataStartTime;

    /*
     * Gets or sets the end time to consider performance data for assessment.
     */
    private OffsetDateTime perfDataEndTime;

    /*
     * User configurable setting to display the Stage of Assessment.
     */
    private AssessmentStage stage;

    /*
     * Custom discount percentage.
     */
    private Float discountPercentage;

    /*
     * Assessment sizing criterion.
     */
    private AssessmentSizingCriterion sizingCriterion;

    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Last time when rates were queried.
     */
    private OffsetDateTime pricesTimestamp;

    /*
     * Date and Time when assessment was created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Date and Time when assessment was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Whether assessment is in valid state and all machines have been assessed.
     */
    private AssessmentStatus status;

    /*
     * Schema version.
     */
    private String schemaVersion;

    /*
     * The status of the last operation.
     */
    private ProvisioningState2 provisioningState;

    /**
     * Creates an instance of WebAppAssessmentV2Properties class.
     */
    public WebAppAssessmentV2Properties() {
    }

    /**
     * Get the environmentType property: Gets or sets user configurable setting to display the environment type.
     * 
     * @return the environmentType value.
     */
    public EnvironmentType environmentType() {
        return this.environmentType;
    }

    /**
     * Set the environmentType property: Gets or sets user configurable setting to display the environment type.
     * 
     * @param environmentType the environmentType value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withEnvironmentType(EnvironmentType environmentType) {
        this.environmentType = environmentType;
        return this;
    }

    /**
     * Get the entityUptime property: Gets or sets the duration for which the entity (Web app, VMs) are up in the
     * on-premises environment.
     * 
     * @return the entityUptime value.
     */
    public EntityUptime entityUptime() {
        return this.entityUptime;
    }

    /**
     * Set the entityUptime property: Gets or sets the duration for which the entity (Web app, VMs) are up in the
     * on-premises environment.
     * 
     * @param entityUptime the entityUptime value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withEntityUptime(EntityUptime entityUptime) {
        this.entityUptime = entityUptime;
        return this;
    }

    /**
     * Get the eaSubscriptionId property: Gets or sets the Enterprise agreement subscription id.
     * 
     * @return the eaSubscriptionId value.
     */
    public String eaSubscriptionId() {
        return this.eaSubscriptionId;
    }

    /**
     * Set the eaSubscriptionId property: Gets or sets the Enterprise agreement subscription id.
     * 
     * @param eaSubscriptionId the eaSubscriptionId value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withEaSubscriptionId(String eaSubscriptionId) {
        this.eaSubscriptionId = eaSubscriptionId;
        return this;
    }

    /**
     * Get the appSvcNativeSettings property: Gets or sets user configurable app service native settings.
     * 
     * @return the appSvcNativeSettings value.
     */
    public AppSvcNativeSettings appSvcNativeSettings() {
        return this.appSvcNativeSettings;
    }

    /**
     * Set the appSvcNativeSettings property: Gets or sets user configurable app service native settings.
     * 
     * @param appSvcNativeSettings the appSvcNativeSettings value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withAppSvcNativeSettings(AppSvcNativeSettings appSvcNativeSettings) {
        this.appSvcNativeSettings = appSvcNativeSettings;
        return this;
    }

    /**
     * Get the appSvcContainerSettings property: Gets or sets user configurable app service container database settings.
     * 
     * @return the appSvcContainerSettings value.
     */
    public AppSvcContainerSettings appSvcContainerSettings() {
        return this.appSvcContainerSettings;
    }

    /**
     * Set the appSvcContainerSettings property: Gets or sets user configurable app service container database settings.
     * 
     * @param appSvcContainerSettings the appSvcContainerSettings value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withAppSvcContainerSettings(AppSvcContainerSettings appSvcContainerSettings) {
        this.appSvcContainerSettings = appSvcContainerSettings;
        return this;
    }

    /**
     * Get the discoveredEntityLightSummary property: Gets or sets user configurable discovered entity settings.
     * 
     * @return the discoveredEntityLightSummary value.
     */
    public DiscoveredEntityLightSummary discoveredEntityLightSummary() {
        return this.discoveredEntityLightSummary;
    }

    /**
     * Set the discoveredEntityLightSummary property: Gets or sets user configurable discovered entity settings.
     * 
     * @param discoveredEntityLightSummary the discoveredEntityLightSummary value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties
        withDiscoveredEntityLightSummary(DiscoveredEntityLightSummary discoveredEntityLightSummary) {
        this.discoveredEntityLightSummary = discoveredEntityLightSummary;
        return this;
    }

    /**
     * Get the azureSecurityOfferingType property: Gets or sets a value indicating azure security offering type.
     * 
     * @return the azureSecurityOfferingType value.
     */
    public AzureSecurityOfferingType azureSecurityOfferingType() {
        return this.azureSecurityOfferingType;
    }

    /**
     * Set the azureSecurityOfferingType property: Gets or sets a value indicating azure security offering type.
     * 
     * @param azureSecurityOfferingType the azureSecurityOfferingType value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties
        withAzureSecurityOfferingType(AzureSecurityOfferingType azureSecurityOfferingType) {
        this.azureSecurityOfferingType = azureSecurityOfferingType;
        return this;
    }

    /**
     * Get the reservedInstance property: Reserved instance.
     * 
     * @return the reservedInstance value.
     */
    public AzureReservedInstance reservedInstance() {
        return this.reservedInstance;
    }

    /**
     * Set the reservedInstance property: Reserved instance.
     * 
     * @param reservedInstance the reservedInstance value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withReservedInstance(AzureReservedInstance reservedInstance) {
        this.reservedInstance = reservedInstance;
        return this;
    }

    /**
     * Get the groupType property: Gets the group type for the assessment.
     * 
     * @return the groupType value.
     */
    public GroupType groupType() {
        return this.groupType;
    }

    /**
     * Set the groupType property: Gets the group type for the assessment.
     * 
     * @param groupType the groupType value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withGroupType(GroupType groupType) {
        this.groupType = groupType;
        return this;
    }

    /**
     * Get the assessmentType property: Assessment type of the assessment.
     * 
     * @return the assessmentType value.
     */
    public AssessmentType assessmentType() {
        return this.assessmentType;
    }

    /**
     * Set the assessmentType property: Assessment type of the assessment.
     * 
     * @param assessmentType the assessmentType value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withAssessmentType(AssessmentType assessmentType) {
        this.assessmentType = assessmentType;
        return this;
    }

    /**
     * Get the azureLocation property: Azure Location or Azure region where to which the machines will be migrated.
     * 
     * @return the azureLocation value.
     */
    public String azureLocation() {
        return this.azureLocation;
    }

    /**
     * Set the azureLocation property: Azure Location or Azure region where to which the machines will be migrated.
     * 
     * @param azureLocation the azureLocation value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withAzureLocation(String azureLocation) {
        this.azureLocation = azureLocation;
        return this;
    }

    /**
     * Get the azureOfferCode property: Azure Offer Code.
     * 
     * @return the azureOfferCode value.
     */
    public AzureOfferCode azureOfferCode() {
        return this.azureOfferCode;
    }

    /**
     * Set the azureOfferCode property: Azure Offer Code.
     * 
     * @param azureOfferCode the azureOfferCode value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withAzureOfferCode(AzureOfferCode azureOfferCode) {
        this.azureOfferCode = azureOfferCode;
        return this;
    }

    /**
     * Get the currency property: Currency in which prices should be reported.
     * 
     * @return the currency value.
     */
    public AzureCurrency currency() {
        return this.currency;
    }

    /**
     * Set the currency property: Currency in which prices should be reported.
     * 
     * @param currency the currency value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withCurrency(AzureCurrency currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the scalingFactor property: Percentage of buffer that user wants on performance metrics when recommending
     * Azure sizes.
     * 
     * @return the scalingFactor value.
     */
    public Float scalingFactor() {
        return this.scalingFactor;
    }

    /**
     * Set the scalingFactor property: Percentage of buffer that user wants on performance metrics when recommending
     * Azure sizes.
     * 
     * @param scalingFactor the scalingFactor value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withScalingFactor(Float scalingFactor) {
        this.scalingFactor = scalingFactor;
        return this;
    }

    /**
     * Get the percentile property: Percentile of the utilization data values to be considered while assessing
     * machines.
     * 
     * @return the percentile value.
     */
    public Percentile percentile() {
        return this.percentile;
    }

    /**
     * Set the percentile property: Percentile of the utilization data values to be considered while assessing
     * machines.
     * 
     * @param percentile the percentile value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withPercentile(Percentile percentile) {
        this.percentile = percentile;
        return this;
    }

    /**
     * Get the timeRange property: Time Range for which the historic utilization data should be considered for
     * assessment.
     * 
     * @return the timeRange value.
     */
    public TimeRange timeRange() {
        return this.timeRange;
    }

    /**
     * Set the timeRange property: Time Range for which the historic utilization data should be considered for
     * assessment.
     * 
     * @param timeRange the timeRange value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withTimeRange(TimeRange timeRange) {
        this.timeRange = timeRange;
        return this;
    }

    /**
     * Get the perfDataStartTime property: Gets or sets the start time to consider performance data for assessment.
     * 
     * @return the perfDataStartTime value.
     */
    public OffsetDateTime perfDataStartTime() {
        return this.perfDataStartTime;
    }

    /**
     * Set the perfDataStartTime property: Gets or sets the start time to consider performance data for assessment.
     * 
     * @param perfDataStartTime the perfDataStartTime value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withPerfDataStartTime(OffsetDateTime perfDataStartTime) {
        this.perfDataStartTime = perfDataStartTime;
        return this;
    }

    /**
     * Get the perfDataEndTime property: Gets or sets the end time to consider performance data for assessment.
     * 
     * @return the perfDataEndTime value.
     */
    public OffsetDateTime perfDataEndTime() {
        return this.perfDataEndTime;
    }

    /**
     * Set the perfDataEndTime property: Gets or sets the end time to consider performance data for assessment.
     * 
     * @param perfDataEndTime the perfDataEndTime value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withPerfDataEndTime(OffsetDateTime perfDataEndTime) {
        this.perfDataEndTime = perfDataEndTime;
        return this;
    }

    /**
     * Get the stage property: User configurable setting to display the Stage of Assessment.
     * 
     * @return the stage value.
     */
    public AssessmentStage stage() {
        return this.stage;
    }

    /**
     * Get the discountPercentage property: Custom discount percentage.
     * 
     * @return the discountPercentage value.
     */
    public Float discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Set the discountPercentage property: Custom discount percentage.
     * 
     * @param discountPercentage the discountPercentage value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withDiscountPercentage(Float discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Get the sizingCriterion property: Assessment sizing criterion.
     * 
     * @return the sizingCriterion value.
     */
    public AssessmentSizingCriterion sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * Set the sizingCriterion property: Assessment sizing criterion.
     * 
     * @param sizingCriterion the sizingCriterion value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withSizingCriterion(AssessmentSizingCriterion sizingCriterion) {
        this.sizingCriterion = sizingCriterion;
        return this;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Set the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @param confidenceRatingInPercentage the confidenceRatingInPercentage value to set.
     * @return the WebAppAssessmentV2Properties object itself.
     */
    public WebAppAssessmentV2Properties withConfidenceRatingInPercentage(Float confidenceRatingInPercentage) {
        this.confidenceRatingInPercentage = confidenceRatingInPercentage;
        return this;
    }

    /**
     * Get the pricesTimestamp property: Last time when rates were queried.
     * 
     * @return the pricesTimestamp value.
     */
    public OffsetDateTime pricesTimestamp() {
        return this.pricesTimestamp;
    }

    /**
     * Get the createdTimestamp property: Date and Time when assessment was created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Date and Time when assessment was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the status property: Whether assessment is in valid state and all machines have been assessed.
     * 
     * @return the status value.
     */
    public AssessmentStatus status() {
        return this.status;
    }

    /**
     * Get the schemaVersion property: Schema version.
     * 
     * @return the schemaVersion value.
     */
    public String schemaVersion() {
        return this.schemaVersion;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState2 provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (entityUptime() != null) {
            entityUptime().validate();
        }
        if (appSvcNativeSettings() != null) {
            appSvcNativeSettings().validate();
        }
        if (appSvcContainerSettings() != null) {
            appSvcContainerSettings().validate();
        }
        if (discoveredEntityLightSummary() != null) {
            discoveredEntityLightSummary().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("environmentType",
            this.environmentType == null ? null : this.environmentType.toString());
        jsonWriter.writeJsonField("entityUptime", this.entityUptime);
        jsonWriter.writeStringField("eaSubscriptionId", this.eaSubscriptionId);
        jsonWriter.writeJsonField("appSvcNativeSettings", this.appSvcNativeSettings);
        jsonWriter.writeJsonField("appSvcContainerSettings", this.appSvcContainerSettings);
        jsonWriter.writeJsonField("discoveredEntityLightSummary", this.discoveredEntityLightSummary);
        jsonWriter.writeStringField("azureSecurityOfferingType",
            this.azureSecurityOfferingType == null ? null : this.azureSecurityOfferingType.toString());
        jsonWriter.writeStringField("reservedInstance",
            this.reservedInstance == null ? null : this.reservedInstance.toString());
        jsonWriter.writeStringField("groupType", this.groupType == null ? null : this.groupType.toString());
        jsonWriter.writeStringField("assessmentType",
            this.assessmentType == null ? null : this.assessmentType.toString());
        jsonWriter.writeStringField("azureLocation", this.azureLocation);
        jsonWriter.writeStringField("azureOfferCode",
            this.azureOfferCode == null ? null : this.azureOfferCode.toString());
        jsonWriter.writeStringField("currency", this.currency == null ? null : this.currency.toString());
        jsonWriter.writeNumberField("scalingFactor", this.scalingFactor);
        jsonWriter.writeStringField("percentile", this.percentile == null ? null : this.percentile.toString());
        jsonWriter.writeStringField("timeRange", this.timeRange == null ? null : this.timeRange.toString());
        jsonWriter.writeStringField("perfDataStartTime",
            this.perfDataStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.perfDataStartTime));
        jsonWriter.writeStringField("perfDataEndTime",
            this.perfDataEndTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.perfDataEndTime));
        jsonWriter.writeNumberField("discountPercentage", this.discountPercentage);
        jsonWriter.writeStringField("sizingCriterion",
            this.sizingCriterion == null ? null : this.sizingCriterion.toString());
        jsonWriter.writeNumberField("confidenceRatingInPercentage", this.confidenceRatingInPercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebAppAssessmentV2Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebAppAssessmentV2Properties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebAppAssessmentV2Properties.
     */
    public static WebAppAssessmentV2Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebAppAssessmentV2Properties deserializedWebAppAssessmentV2Properties = new WebAppAssessmentV2Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.provisioningState
                        = ProvisioningState2.fromString(reader.getString());
                } else if ("environmentType".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.environmentType
                        = EnvironmentType.fromString(reader.getString());
                } else if ("entityUptime".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.entityUptime = EntityUptime.fromJson(reader);
                } else if ("eaSubscriptionId".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.eaSubscriptionId = reader.getString();
                } else if ("appSvcNativeSettings".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.appSvcNativeSettings
                        = AppSvcNativeSettings.fromJson(reader);
                } else if ("appSvcContainerSettings".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.appSvcContainerSettings
                        = AppSvcContainerSettings.fromJson(reader);
                } else if ("discoveredEntityLightSummary".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.discoveredEntityLightSummary
                        = DiscoveredEntityLightSummary.fromJson(reader);
                } else if ("azureSecurityOfferingType".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.azureSecurityOfferingType
                        = AzureSecurityOfferingType.fromString(reader.getString());
                } else if ("reservedInstance".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.reservedInstance
                        = AzureReservedInstance.fromString(reader.getString());
                } else if ("groupType".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.groupType = GroupType.fromString(reader.getString());
                } else if ("assessmentType".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.assessmentType
                        = AssessmentType.fromString(reader.getString());
                } else if ("azureLocation".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.azureLocation = reader.getString();
                } else if ("azureOfferCode".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.azureOfferCode
                        = AzureOfferCode.fromString(reader.getString());
                } else if ("currency".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.currency = AzureCurrency.fromString(reader.getString());
                } else if ("scalingFactor".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.scalingFactor = reader.getNullable(JsonReader::getFloat);
                } else if ("percentile".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.percentile = Percentile.fromString(reader.getString());
                } else if ("timeRange".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.timeRange = TimeRange.fromString(reader.getString());
                } else if ("perfDataStartTime".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.perfDataStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("perfDataEndTime".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.perfDataEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("stage".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.stage = AssessmentStage.fromString(reader.getString());
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.discountPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("sizingCriterion".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.sizingCriterion
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("pricesTimestamp".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.pricesTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.status = AssessmentStatus.fromString(reader.getString());
                } else if ("schemaVersion".equals(fieldName)) {
                    deserializedWebAppAssessmentV2Properties.schemaVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebAppAssessmentV2Properties;
        });
    }
}
