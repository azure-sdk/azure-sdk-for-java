// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Management settings.
 */
@Fluent
public final class ManagementSettings implements JsonSerializable<ManagementSettings> {
    /*
     * HyperV Virtualization Management Settings.
     */
    private HypervVirtualizationManagementSettings hypervVirtualizationManagementSettings;

    /*
     * Third Party Management Settings.
     */
    private ThirdPartyManagementSettings thirdPartyManagementSettings;

    /*
     * Other Management Costs Settings.
     */
    private OtherManagementCostsSettings otherManagementCostsSettings;

    /**
     * Creates an instance of ManagementSettings class.
     */
    public ManagementSettings() {
    }

    /**
     * Get the hypervVirtualizationManagementSettings property: HyperV Virtualization Management Settings.
     * 
     * @return the hypervVirtualizationManagementSettings value.
     */
    public HypervVirtualizationManagementSettings hypervVirtualizationManagementSettings() {
        return this.hypervVirtualizationManagementSettings;
    }

    /**
     * Set the hypervVirtualizationManagementSettings property: HyperV Virtualization Management Settings.
     * 
     * @param hypervVirtualizationManagementSettings the hypervVirtualizationManagementSettings value to set.
     * @return the ManagementSettings object itself.
     */
    public ManagementSettings withHypervVirtualizationManagementSettings(
        HypervVirtualizationManagementSettings hypervVirtualizationManagementSettings) {
        this.hypervVirtualizationManagementSettings = hypervVirtualizationManagementSettings;
        return this;
    }

    /**
     * Get the thirdPartyManagementSettings property: Third Party Management Settings.
     * 
     * @return the thirdPartyManagementSettings value.
     */
    public ThirdPartyManagementSettings thirdPartyManagementSettings() {
        return this.thirdPartyManagementSettings;
    }

    /**
     * Set the thirdPartyManagementSettings property: Third Party Management Settings.
     * 
     * @param thirdPartyManagementSettings the thirdPartyManagementSettings value to set.
     * @return the ManagementSettings object itself.
     */
    public ManagementSettings
        withThirdPartyManagementSettings(ThirdPartyManagementSettings thirdPartyManagementSettings) {
        this.thirdPartyManagementSettings = thirdPartyManagementSettings;
        return this;
    }

    /**
     * Get the otherManagementCostsSettings property: Other Management Costs Settings.
     * 
     * @return the otherManagementCostsSettings value.
     */
    public OtherManagementCostsSettings otherManagementCostsSettings() {
        return this.otherManagementCostsSettings;
    }

    /**
     * Set the otherManagementCostsSettings property: Other Management Costs Settings.
     * 
     * @param otherManagementCostsSettings the otherManagementCostsSettings value to set.
     * @return the ManagementSettings object itself.
     */
    public ManagementSettings
        withOtherManagementCostsSettings(OtherManagementCostsSettings otherManagementCostsSettings) {
        this.otherManagementCostsSettings = otherManagementCostsSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hypervVirtualizationManagementSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hypervVirtualizationManagementSettings in model ManagementSettings"));
        } else {
            hypervVirtualizationManagementSettings().validate();
        }
        if (thirdPartyManagementSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property thirdPartyManagementSettings in model ManagementSettings"));
        } else {
            thirdPartyManagementSettings().validate();
        }
        if (otherManagementCostsSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property otherManagementCostsSettings in model ManagementSettings"));
        } else {
            otherManagementCostsSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagementSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hypervVirtualizationManagementSettings",
            this.hypervVirtualizationManagementSettings);
        jsonWriter.writeJsonField("thirdPartyManagementSettings", this.thirdPartyManagementSettings);
        jsonWriter.writeJsonField("otherManagementCostsSettings", this.otherManagementCostsSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagementSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagementSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagementSettings.
     */
    public static ManagementSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagementSettings deserializedManagementSettings = new ManagementSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hypervVirtualizationManagementSettings".equals(fieldName)) {
                    deserializedManagementSettings.hypervVirtualizationManagementSettings
                        = HypervVirtualizationManagementSettings.fromJson(reader);
                } else if ("thirdPartyManagementSettings".equals(fieldName)) {
                    deserializedManagementSettings.thirdPartyManagementSettings
                        = ThirdPartyManagementSettings.fromJson(reader);
                } else if ("otherManagementCostsSettings".equals(fieldName)) {
                    deserializedManagementSettings.otherManagementCostsSettings
                        = OtherManagementCostsSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagementSettings;
        });
    }
}
