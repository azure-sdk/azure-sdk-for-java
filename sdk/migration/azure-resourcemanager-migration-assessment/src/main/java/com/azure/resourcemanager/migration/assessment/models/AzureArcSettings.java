// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure arc settings for a business case.
 */
@Fluent
public final class AzureArcSettings implements JsonSerializable<AzureArcSettings> {
    /*
     * AzureArc state indicates whether to include azure arc related costs in on-premises or not.
     */
    private AzureArcState azureArcState;

    /*
     * Gets Azure arc labour cost percentage.
     */
    private Float laborCostPercentage;

    /*
     * Management settings.
     */
    private AzureArcManagementSettings managementSettings;

    /**
     * Creates an instance of AzureArcSettings class.
     */
    public AzureArcSettings() {
    }

    /**
     * Get the azureArcState property: AzureArc state indicates whether to include azure arc related costs in
     * on-premises or not.
     * 
     * @return the azureArcState value.
     */
    public AzureArcState azureArcState() {
        return this.azureArcState;
    }

    /**
     * Set the azureArcState property: AzureArc state indicates whether to include azure arc related costs in
     * on-premises or not.
     * 
     * @param azureArcState the azureArcState value to set.
     * @return the AzureArcSettings object itself.
     */
    public AzureArcSettings withAzureArcState(AzureArcState azureArcState) {
        this.azureArcState = azureArcState;
        return this;
    }

    /**
     * Get the laborCostPercentage property: Gets Azure arc labour cost percentage.
     * 
     * @return the laborCostPercentage value.
     */
    public Float laborCostPercentage() {
        return this.laborCostPercentage;
    }

    /**
     * Set the laborCostPercentage property: Gets Azure arc labour cost percentage.
     * 
     * @param laborCostPercentage the laborCostPercentage value to set.
     * @return the AzureArcSettings object itself.
     */
    public AzureArcSettings withLaborCostPercentage(Float laborCostPercentage) {
        this.laborCostPercentage = laborCostPercentage;
        return this;
    }

    /**
     * Get the managementSettings property: Management settings.
     * 
     * @return the managementSettings value.
     */
    public AzureArcManagementSettings managementSettings() {
        return this.managementSettings;
    }

    /**
     * Set the managementSettings property: Management settings.
     * 
     * @param managementSettings the managementSettings value to set.
     * @return the AzureArcSettings object itself.
     */
    public AzureArcSettings withManagementSettings(AzureArcManagementSettings managementSettings) {
        this.managementSettings = managementSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureArcState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property azureArcState in model AzureArcSettings"));
        }
        if (managementSettings() != null) {
            managementSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureArcSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureArcState", this.azureArcState == null ? null : this.azureArcState.toString());
        jsonWriter.writeNumberField("laborCostPercentage", this.laborCostPercentage);
        jsonWriter.writeJsonField("managementSettings", this.managementSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureArcSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureArcSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureArcSettings.
     */
    public static AzureArcSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureArcSettings deserializedAzureArcSettings = new AzureArcSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureArcState".equals(fieldName)) {
                    deserializedAzureArcSettings.azureArcState = AzureArcState.fromString(reader.getString());
                } else if ("laborCostPercentage".equals(fieldName)) {
                    deserializedAzureArcSettings.laborCostPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("managementSettings".equals(fieldName)) {
                    deserializedAzureArcSettings.managementSettings = AzureArcManagementSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureArcSettings;
        });
    }
}
