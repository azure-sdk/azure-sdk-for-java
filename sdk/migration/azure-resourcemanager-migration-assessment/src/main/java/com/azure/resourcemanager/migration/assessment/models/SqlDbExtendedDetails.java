// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The sql db source information.
 */
@Fluent
public final class SqlDbExtendedDetails implements JsonSerializable<SqlDbExtendedDetails> {
    /*
     * The linked availability group overview.
     */
    private SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview;

    /*
     * The product support status.
     */
    private ProductSupportStatus productSupportStatus;

    /*
     * the aggregated cache size of this database.
     */
    private Float bufferCacheSizeInMB;

    /*
     * The product support status.
     */
    private Boolean isDatabaseHighlyAvailable;

    /*
     * The product support status.
     */
    private Float databaseSizeInMB;

    /*
     * Database compatibility level.
     */
    private CompatibilityLevel compatibilityLevel;

    /*
     * The percentage of the total number of cores being utilized by the SQL database.
     */
    private Float percentageCoresUtilization;

    /*
     * The read throughput of the SQL database.
     */
    private Float megabytesPerSecondOfRead;

    /*
     * The write throughput of the SQL database.
     */
    private Float megabytesPerSecondOfWrite;

    /*
     * The read operations per second of the SQL database.
     */
    private Float numberOfReadOperationsPerSecond;

    /*
     * The write operations per second of the SQL database.
     */
    private Float numberOfWriteOperationsPerSecond;

    /*
     * Gets or sets the SQL version.
     */
    private String sqlVersion;

    /*
     * Gets or sets the SQL edition.
     */
    private String sqlEdition;

    /*
     * Gets or sets a value indicating whether the parent SQL instance is clustered or not.
     */
    private Boolean isClustered;

    /*
     * Gets or sets a value indicating whether the high availability is enabled or not.
     */
    private Boolean isHighAvailabilityEnabled;

    /**
     * Creates an instance of SqlDbExtendedDetails class.
     */
    public SqlDbExtendedDetails() {
    }

    /**
     * Get the linkedAvailabilityGroupOverview property: The linked availability group overview.
     * 
     * @return the linkedAvailabilityGroupOverview value.
     */
    public SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview() {
        return this.linkedAvailabilityGroupOverview;
    }

    /**
     * Get the productSupportStatus property: The product support status.
     * 
     * @return the productSupportStatus value.
     */
    public ProductSupportStatus productSupportStatus() {
        return this.productSupportStatus;
    }

    /**
     * Get the bufferCacheSizeInMB property: the aggregated cache size of this database.
     * 
     * @return the bufferCacheSizeInMB value.
     */
    public Float bufferCacheSizeInMB() {
        return this.bufferCacheSizeInMB;
    }

    /**
     * Get the isDatabaseHighlyAvailable property: The product support status.
     * 
     * @return the isDatabaseHighlyAvailable value.
     */
    public Boolean isDatabaseHighlyAvailable() {
        return this.isDatabaseHighlyAvailable;
    }

    /**
     * Get the databaseSizeInMB property: The product support status.
     * 
     * @return the databaseSizeInMB value.
     */
    public Float databaseSizeInMB() {
        return this.databaseSizeInMB;
    }

    /**
     * Get the compatibilityLevel property: Database compatibility level.
     * 
     * @return the compatibilityLevel value.
     */
    public CompatibilityLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Get the percentageCoresUtilization property: The percentage of the total number of cores being utilized by the
     * SQL database.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the megabytesPerSecondOfRead property: The read throughput of the SQL database.
     * 
     * @return the megabytesPerSecondOfRead value.
     */
    public Float megabytesPerSecondOfRead() {
        return this.megabytesPerSecondOfRead;
    }

    /**
     * Get the megabytesPerSecondOfWrite property: The write throughput of the SQL database.
     * 
     * @return the megabytesPerSecondOfWrite value.
     */
    public Float megabytesPerSecondOfWrite() {
        return this.megabytesPerSecondOfWrite;
    }

    /**
     * Get the numberOfReadOperationsPerSecond property: The read operations per second of the SQL database.
     * 
     * @return the numberOfReadOperationsPerSecond value.
     */
    public Float numberOfReadOperationsPerSecond() {
        return this.numberOfReadOperationsPerSecond;
    }

    /**
     * Get the numberOfWriteOperationsPerSecond property: The write operations per second of the SQL database.
     * 
     * @return the numberOfWriteOperationsPerSecond value.
     */
    public Float numberOfWriteOperationsPerSecond() {
        return this.numberOfWriteOperationsPerSecond;
    }

    /**
     * Get the sqlVersion property: Gets or sets the SQL version.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.sqlVersion;
    }

    /**
     * Set the sqlVersion property: Gets or sets the SQL version.
     * 
     * @param sqlVersion the sqlVersion value to set.
     * @return the SqlDbExtendedDetails object itself.
     */
    public SqlDbExtendedDetails withSqlVersion(String sqlVersion) {
        this.sqlVersion = sqlVersion;
        return this;
    }

    /**
     * Get the sqlEdition property: Gets or sets the SQL edition.
     * 
     * @return the sqlEdition value.
     */
    public String sqlEdition() {
        return this.sqlEdition;
    }

    /**
     * Set the sqlEdition property: Gets or sets the SQL edition.
     * 
     * @param sqlEdition the sqlEdition value to set.
     * @return the SqlDbExtendedDetails object itself.
     */
    public SqlDbExtendedDetails withSqlEdition(String sqlEdition) {
        this.sqlEdition = sqlEdition;
        return this;
    }

    /**
     * Get the isClustered property: Gets or sets a value indicating whether the parent SQL instance is clustered or
     * not.
     * 
     * @return the isClustered value.
     */
    public Boolean isClustered() {
        return this.isClustered;
    }

    /**
     * Set the isClustered property: Gets or sets a value indicating whether the parent SQL instance is clustered or
     * not.
     * 
     * @param isClustered the isClustered value to set.
     * @return the SqlDbExtendedDetails object itself.
     */
    public SqlDbExtendedDetails withIsClustered(Boolean isClustered) {
        this.isClustered = isClustered;
        return this;
    }

    /**
     * Get the isHighAvailabilityEnabled property: Gets or sets a value indicating whether the high availability is
     * enabled or not.
     * 
     * @return the isHighAvailabilityEnabled value.
     */
    public Boolean isHighAvailabilityEnabled() {
        return this.isHighAvailabilityEnabled;
    }

    /**
     * Set the isHighAvailabilityEnabled property: Gets or sets a value indicating whether the high availability is
     * enabled or not.
     * 
     * @param isHighAvailabilityEnabled the isHighAvailabilityEnabled value to set.
     * @return the SqlDbExtendedDetails object itself.
     */
    public SqlDbExtendedDetails withIsHighAvailabilityEnabled(Boolean isHighAvailabilityEnabled) {
        this.isHighAvailabilityEnabled = isHighAvailabilityEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkedAvailabilityGroupOverview() != null) {
            linkedAvailabilityGroupOverview().validate();
        }
        if (productSupportStatus() != null) {
            productSupportStatus().validate();
        }
        if (sqlVersion() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property sqlVersion in model SqlDbExtendedDetails"));
        }
        if (sqlEdition() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property sqlEdition in model SqlDbExtendedDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlDbExtendedDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sqlVersion", this.sqlVersion);
        jsonWriter.writeStringField("sqlEdition", this.sqlEdition);
        jsonWriter.writeBooleanField("isClustered", this.isClustered);
        jsonWriter.writeBooleanField("isHighAvailabilityEnabled", this.isHighAvailabilityEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDbExtendedDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDbExtendedDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlDbExtendedDetails.
     */
    public static SqlDbExtendedDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDbExtendedDetails deserializedSqlDbExtendedDetails = new SqlDbExtendedDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sqlVersion".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.sqlVersion = reader.getString();
                } else if ("sqlEdition".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.sqlEdition = reader.getString();
                } else if ("linkedAvailabilityGroupOverview".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.linkedAvailabilityGroupOverview
                        = SqlAvailabilityGroupDataOverview.fromJson(reader);
                } else if ("productSupportStatus".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.productSupportStatus = ProductSupportStatus.fromJson(reader);
                } else if ("bufferCacheSizeInMB".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.bufferCacheSizeInMB = reader.getNullable(JsonReader::getFloat);
                } else if ("isDatabaseHighlyAvailable".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.isDatabaseHighlyAvailable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("databaseSizeInMB".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.databaseSizeInMB = reader.getNullable(JsonReader::getFloat);
                } else if ("compatibilityLevel".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.compatibilityLevel
                        = CompatibilityLevel.fromString(reader.getString());
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfRead".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.megabytesPerSecondOfRead
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfWrite".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.megabytesPerSecondOfWrite
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfReadOperationsPerSecond".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.numberOfReadOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfWriteOperationsPerSecond".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.numberOfWriteOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("isClustered".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.isClustered = reader.getNullable(JsonReader::getBoolean);
                } else if ("isHighAvailabilityEnabled".equals(fieldName)) {
                    deserializedSqlDbExtendedDetails.isHighAvailabilityEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDbExtendedDetails;
        });
    }
}
