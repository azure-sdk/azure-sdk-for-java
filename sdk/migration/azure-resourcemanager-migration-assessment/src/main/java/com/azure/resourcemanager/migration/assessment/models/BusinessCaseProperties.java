// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Property bag for an
 * Microsoft.Azure.Migrate.BusinessCaseService.Api.V20220202_preview.Resources.BusinessCase
 * resource.
 */
@Fluent
public final class BusinessCaseProperties implements JsonSerializable<BusinessCaseProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Business case settings.
     */
    private Settings settings;

    /*
     * Business case state.
     */
    private BusinessCaseState state;

    /*
     * Gets the state of business case reports.
     */
    private List<ReportDetails> reportStatusDetails;

    /*
     * Gets the business case scope.
     */
    private BusinessCaseScope businessCaseScope;

    /**
     * Creates an instance of BusinessCaseProperties class.
     */
    public BusinessCaseProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the settings property: Business case settings.
     * 
     * @return the settings value.
     */
    public Settings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Business case settings.
     * 
     * @param settings the settings value to set.
     * @return the BusinessCaseProperties object itself.
     */
    public BusinessCaseProperties withSettings(Settings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the state property: Business case state.
     * 
     * @return the state value.
     */
    public BusinessCaseState state() {
        return this.state;
    }

    /**
     * Get the reportStatusDetails property: Gets the state of business case reports.
     * 
     * @return the reportStatusDetails value.
     */
    public List<ReportDetails> reportStatusDetails() {
        return this.reportStatusDetails;
    }

    /**
     * Get the businessCaseScope property: Gets the business case scope.
     * 
     * @return the businessCaseScope value.
     */
    public BusinessCaseScope businessCaseScope() {
        return this.businessCaseScope;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (settings() != null) {
            settings().validate();
        }
        if (reportStatusDetails() != null) {
            reportStatusDetails().forEach(e -> e.validate());
        }
        if (businessCaseScope() != null) {
            businessCaseScope().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("settings", this.settings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BusinessCaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BusinessCaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BusinessCaseProperties.
     */
    public static BusinessCaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BusinessCaseProperties deserializedBusinessCaseProperties = new BusinessCaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedBusinessCaseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("settings".equals(fieldName)) {
                    deserializedBusinessCaseProperties.settings = Settings.fromJson(reader);
                } else if ("state".equals(fieldName)) {
                    deserializedBusinessCaseProperties.state = BusinessCaseState.fromString(reader.getString());
                } else if ("reportStatusDetails".equals(fieldName)) {
                    List<ReportDetails> reportStatusDetails
                        = reader.readArray(reader1 -> ReportDetails.fromJson(reader1));
                    deserializedBusinessCaseProperties.reportStatusDetails = reportStatusDetails;
                } else if ("businessCaseScope".equals(fieldName)) {
                    deserializedBusinessCaseProperties.businessCaseScope = BusinessCaseScope.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBusinessCaseProperties;
        });
    }
}
