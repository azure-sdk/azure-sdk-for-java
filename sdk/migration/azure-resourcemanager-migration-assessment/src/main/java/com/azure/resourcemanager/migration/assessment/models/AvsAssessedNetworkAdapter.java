// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Second level object returned as part of AVS AssessedMachine REST resource.
 */
@Immutable
public final class AvsAssessedNetworkAdapter implements JsonSerializable<AvsAssessedNetworkAdapter> {
    /*
     * Mac address of the NIC.
     */
    private String macAddress;

    /*
     * IP V4 addresses for the machine.
     */
    private List<String> ipAddresses;

    /*
     * Gets the display name of the network adapter.
     */
    private String displayName;

    /*
     * Gets the name of the network adapter.
     */
    private String name;

    /*
     * Gets the Recieved data for Network Adapter in MB/s.
     * This value is
     * the percentile of historical data based on options selected in Assessment.
     */
    private Float megabytesPerSecondRecieved;

    /*
     * Gets the Transmitted data for Network Adapter in MB/s.
     * This value
     * is the percentile of historical data based on options selected in Assessment.
     */
    private Float megabytesPerSecondTransmitted;

    /**
     * Creates an instance of AvsAssessedNetworkAdapter class.
     */
    public AvsAssessedNetworkAdapter() {
    }

    /**
     * Get the macAddress property: Mac address of the NIC.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the ipAddresses property: IP V4 addresses for the machine.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the displayName property: Gets the display name of the network adapter.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the name property: Gets the name of the network adapter.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the megabytesPerSecondRecieved property: Gets the Recieved data for Network Adapter in MB/s.
     * This value is
     * the percentile of historical data based on options selected in Assessment.
     * 
     * @return the megabytesPerSecondRecieved value.
     */
    public Float megabytesPerSecondRecieved() {
        return this.megabytesPerSecondRecieved;
    }

    /**
     * Get the megabytesPerSecondTransmitted property: Gets the Transmitted data for Network Adapter in MB/s.
     * This value
     * is the percentile of historical data based on options selected in Assessment.
     * 
     * @return the megabytesPerSecondTransmitted value.
     */
    public Float megabytesPerSecondTransmitted() {
        return this.megabytesPerSecondTransmitted;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsAssessedNetworkAdapter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsAssessedNetworkAdapter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsAssessedNetworkAdapter.
     */
    public static AvsAssessedNetworkAdapter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsAssessedNetworkAdapter deserializedAvsAssessedNetworkAdapter = new AvsAssessedNetworkAdapter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("macAddress".equals(fieldName)) {
                    deserializedAvsAssessedNetworkAdapter.macAddress = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedAvsAssessedNetworkAdapter.ipAddresses = ipAddresses;
                } else if ("displayName".equals(fieldName)) {
                    deserializedAvsAssessedNetworkAdapter.displayName = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAvsAssessedNetworkAdapter.name = reader.getString();
                } else if ("megabytesPerSecondRecieved".equals(fieldName)) {
                    deserializedAvsAssessedNetworkAdapter.megabytesPerSecondRecieved
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondTransmitted".equals(fieldName)) {
                    deserializedAvsAssessedNetworkAdapter.megabytesPerSecondTransmitted
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsAssessedNetworkAdapter;
        });
    }
}
