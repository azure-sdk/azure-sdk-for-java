// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Labour settings.
 */
@Fluent
public final class LaborSettings implements JsonSerializable<LaborSettings> {
    /*
     * Physical servers per administrator.
     */
    private int physicalServersPerAdmin;

    /*
     * Virtual machines per administrator.
     */
    private int virtualMachinesPerAdmin;

    /*
     * Hourly administrator cost.
     */
    private float hourlyAdminCost;

    /**
     * Creates an instance of LaborSettings class.
     */
    public LaborSettings() {
    }

    /**
     * Get the physicalServersPerAdmin property: Physical servers per administrator.
     * 
     * @return the physicalServersPerAdmin value.
     */
    public int physicalServersPerAdmin() {
        return this.physicalServersPerAdmin;
    }

    /**
     * Set the physicalServersPerAdmin property: Physical servers per administrator.
     * 
     * @param physicalServersPerAdmin the physicalServersPerAdmin value to set.
     * @return the LaborSettings object itself.
     */
    public LaborSettings withPhysicalServersPerAdmin(int physicalServersPerAdmin) {
        this.physicalServersPerAdmin = physicalServersPerAdmin;
        return this;
    }

    /**
     * Get the virtualMachinesPerAdmin property: Virtual machines per administrator.
     * 
     * @return the virtualMachinesPerAdmin value.
     */
    public int virtualMachinesPerAdmin() {
        return this.virtualMachinesPerAdmin;
    }

    /**
     * Set the virtualMachinesPerAdmin property: Virtual machines per administrator.
     * 
     * @param virtualMachinesPerAdmin the virtualMachinesPerAdmin value to set.
     * @return the LaborSettings object itself.
     */
    public LaborSettings withVirtualMachinesPerAdmin(int virtualMachinesPerAdmin) {
        this.virtualMachinesPerAdmin = virtualMachinesPerAdmin;
        return this;
    }

    /**
     * Get the hourlyAdminCost property: Hourly administrator cost.
     * 
     * @return the hourlyAdminCost value.
     */
    public float hourlyAdminCost() {
        return this.hourlyAdminCost;
    }

    /**
     * Set the hourlyAdminCost property: Hourly administrator cost.
     * 
     * @param hourlyAdminCost the hourlyAdminCost value to set.
     * @return the LaborSettings object itself.
     */
    public LaborSettings withHourlyAdminCost(float hourlyAdminCost) {
        this.hourlyAdminCost = hourlyAdminCost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("physicalServersPerAdmin", this.physicalServersPerAdmin);
        jsonWriter.writeIntField("virtualMachinesPerAdmin", this.virtualMachinesPerAdmin);
        jsonWriter.writeFloatField("hourlyAdminCost", this.hourlyAdminCost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LaborSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LaborSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LaborSettings.
     */
    public static LaborSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LaborSettings deserializedLaborSettings = new LaborSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("physicalServersPerAdmin".equals(fieldName)) {
                    deserializedLaborSettings.physicalServersPerAdmin = reader.getInt();
                } else if ("virtualMachinesPerAdmin".equals(fieldName)) {
                    deserializedLaborSettings.virtualMachinesPerAdmin = reader.getInt();
                } else if ("hourlyAdminCost".equals(fieldName)) {
                    deserializedLaborSettings.hourlyAdminCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLaborSettings;
        });
    }
}
