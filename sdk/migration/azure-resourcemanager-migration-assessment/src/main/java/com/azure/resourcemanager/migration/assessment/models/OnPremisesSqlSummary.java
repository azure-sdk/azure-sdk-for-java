// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The on premises SQL summary.
 */
@Immutable
public final class OnPremisesSqlSummary implements JsonSerializable<OnPremisesSqlSummary> {
    /*
     * The number of SQL instances.
     */
    private Integer sqlInstances;

    /*
     * The number of SQL databases.
     */
    private Integer sqlDatabases;

    /*
     * Distribution by SQL version.
     */
    private List<SqlVersionDetails> distributionBySqlVersion;

    /*
     * The SQL on premises utilization insights.
     */
    private UtilizationData sqlOnPremisesUtilizationData;

    /*
     * Distribution by Sql Edition.
     */
    private List<DistributionByType> distributionBySqlEdition;

    /**
     * Creates an instance of OnPremisesSqlSummary class.
     */
    public OnPremisesSqlSummary() {
    }

    /**
     * Get the sqlInstances property: The number of SQL instances.
     * 
     * @return the sqlInstances value.
     */
    public Integer sqlInstances() {
        return this.sqlInstances;
    }

    /**
     * Get the sqlDatabases property: The number of SQL databases.
     * 
     * @return the sqlDatabases value.
     */
    public Integer sqlDatabases() {
        return this.sqlDatabases;
    }

    /**
     * Get the distributionBySqlVersion property: Distribution by SQL version.
     * 
     * @return the distributionBySqlVersion value.
     */
    public List<SqlVersionDetails> distributionBySqlVersion() {
        return this.distributionBySqlVersion;
    }

    /**
     * Get the sqlOnPremisesUtilizationData property: The SQL on premises utilization insights.
     * 
     * @return the sqlOnPremisesUtilizationData value.
     */
    public UtilizationData sqlOnPremisesUtilizationData() {
        return this.sqlOnPremisesUtilizationData;
    }

    /**
     * Get the distributionBySqlEdition property: Distribution by Sql Edition.
     * 
     * @return the distributionBySqlEdition value.
     */
    public List<DistributionByType> distributionBySqlEdition() {
        return this.distributionBySqlEdition;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (distributionBySqlVersion() != null) {
            distributionBySqlVersion().forEach(e -> e.validate());
        }
        if (sqlOnPremisesUtilizationData() != null) {
            sqlOnPremisesUtilizationData().validate();
        }
        if (distributionBySqlEdition() != null) {
            distributionBySqlEdition().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnPremisesSqlSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnPremisesSqlSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnPremisesSqlSummary.
     */
    public static OnPremisesSqlSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnPremisesSqlSummary deserializedOnPremisesSqlSummary = new OnPremisesSqlSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sqlInstances".equals(fieldName)) {
                    deserializedOnPremisesSqlSummary.sqlInstances = reader.getNullable(JsonReader::getInt);
                } else if ("sqlDatabases".equals(fieldName)) {
                    deserializedOnPremisesSqlSummary.sqlDatabases = reader.getNullable(JsonReader::getInt);
                } else if ("distributionBySqlVersion".equals(fieldName)) {
                    List<SqlVersionDetails> distributionBySqlVersion
                        = reader.readArray(reader1 -> SqlVersionDetails.fromJson(reader1));
                    deserializedOnPremisesSqlSummary.distributionBySqlVersion = distributionBySqlVersion;
                } else if ("sqlOnPremisesUtilizationData".equals(fieldName)) {
                    deserializedOnPremisesSqlSummary.sqlOnPremisesUtilizationData = UtilizationData.fromJson(reader);
                } else if ("distributionBySqlEdition".equals(fieldName)) {
                    List<DistributionByType> distributionBySqlEdition
                        = reader.readArray(reader1 -> DistributionByType.fromJson(reader1));
                    deserializedOnPremisesSqlSummary.distributionBySqlEdition = distributionBySqlEdition;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnPremisesSqlSummary;
        });
    }
}
