// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Assessed machine properties class.
 */
@Immutable
public final class MigrationTypeSummaries implements JsonSerializable<MigrationTypeSummaries> {
    /*
     * Gets the migration type.
     */
    private MigrationType migrationType;

    /*
     * Gets the Platform.
     */
    private MigrationPlatform platform;

    /*
     * Gets the readiness summary.
     */
    private List<MigrationTypeSummariesReadinessSummaryItem> readinessSummary;

    /**
     * Creates an instance of MigrationTypeSummaries class.
     */
    public MigrationTypeSummaries() {
    }

    /**
     * Get the migrationType property: Gets the migration type.
     * 
     * @return the migrationType value.
     */
    public MigrationType migrationType() {
        return this.migrationType;
    }

    /**
     * Get the platform property: Gets the Platform.
     * 
     * @return the platform value.
     */
    public MigrationPlatform platform() {
        return this.platform;
    }

    /**
     * Get the readinessSummary property: Gets the readiness summary.
     * 
     * @return the readinessSummary value.
     */
    public List<MigrationTypeSummariesReadinessSummaryItem> readinessSummary() {
        return this.readinessSummary;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (readinessSummary() != null) {
            readinessSummary().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationTypeSummaries from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationTypeSummaries if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationTypeSummaries.
     */
    public static MigrationTypeSummaries fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationTypeSummaries deserializedMigrationTypeSummaries = new MigrationTypeSummaries();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("migrationType".equals(fieldName)) {
                    deserializedMigrationTypeSummaries.migrationType = MigrationType.fromString(reader.getString());
                } else if ("platform".equals(fieldName)) {
                    deserializedMigrationTypeSummaries.platform = MigrationPlatform.fromString(reader.getString());
                } else if ("readinessSummary".equals(fieldName)) {
                    List<MigrationTypeSummariesReadinessSummaryItem> readinessSummary
                        = reader.readArray(reader1 -> MigrationTypeSummariesReadinessSummaryItem.fromJson(reader1));
                    deserializedMigrationTypeSummaries.readinessSummary = readinessSummary;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationTypeSummaries;
        });
    }
}
