// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Cores and Memory Compute Resource.
 */
@Immutable
public final class ComputeResource implements JsonSerializable<ComputeResource> {
    /*
     * Gets cores.
     */
    private float cores;

    /*
     * Gets memory.
     */
    private float memory;

    /**
     * Creates an instance of ComputeResource class.
     */
    public ComputeResource() {
    }

    /**
     * Get the cores property: Gets cores.
     * 
     * @return the cores value.
     */
    public float cores() {
        return this.cores;
    }

    /**
     * Get the memory property: Gets memory.
     * 
     * @return the memory value.
     */
    public float memory() {
        return this.memory;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComputeResource.
     */
    public static ComputeResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeResource deserializedComputeResource = new ComputeResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cores".equals(fieldName)) {
                    deserializedComputeResource.cores = reader.getFloat();
                } else if ("memory".equals(fieldName)) {
                    deserializedComputeResource.memory = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeResource;
        });
    }
}
