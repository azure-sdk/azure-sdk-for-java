// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.migration.assessment.fluent.WebAppServicePlanV2OperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.WebAppServicePlanV2Inner;
import com.azure.resourcemanager.migration.assessment.models.WebAppServicePlanV2ListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in WebAppServicePlanV2OperationsClient.
 */
public final class WebAppServicePlanV2OperationsClientImpl implements WebAppServicePlanV2OperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final WebAppServicePlanV2OperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final MigrationAssessmentManagementClientImpl client;

    /**
     * Initializes an instance of WebAppServicePlanV2OperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    WebAppServicePlanV2OperationsClientImpl(MigrationAssessmentManagementClientImpl client) {
        this.service = RestProxy.create(WebAppServicePlanV2OperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MigrationAssessmentManagementClientWebAppServicePlanV2Operations to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MigrationAssessmentM")
    public interface WebAppServicePlanV2OperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/webAppAssessments/{assessmentName}/webAppServicePlans")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebAppServicePlanV2ListResult>> listByWebAppAssessmentV2(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("$filter") String filter,
            @QueryParam("pageSize") Integer pageSize, @QueryParam("continuationToken") String continuationToken,
            @QueryParam("totalRecordCount") Integer totalRecordCount, @PathParam("projectName") String projectName,
            @PathParam("groupName") String groupName, @PathParam("assessmentName") String assessmentName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/webAppAssessments/{assessmentName}/webAppServicePlans/{webAppServicePlanName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebAppServicePlanV2Inner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("projectName") String projectName,
            @PathParam("groupName") String groupName, @PathParam("assessmentName") String assessmentName,
            @PathParam("webAppServicePlanName") String webAppServicePlanName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<WebAppServicePlanV2ListResult>> listByWebAppAssessmentV2Next(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param filter Filter query.
     * @param pageSize Optional parameter for page size.
     * @param continuationToken Optional parameter for continuation token.
     * @param totalRecordCount Total record count.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebAppServicePlanV2Inner>> listByWebAppAssessmentV2SinglePageAsync(
        String resourceGroupName, String projectName, String groupName, String assessmentName, String filter,
        Integer pageSize, String continuationToken, Integer totalRecordCount) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (projectName == null) {
            return Mono.error(new IllegalArgumentException("Parameter projectName is required and cannot be null."));
        }
        if (groupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupName is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByWebAppAssessmentV2(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, filter, pageSize,
                continuationToken, totalRecordCount, projectName, groupName, assessmentName, accept, context))
            .<PagedResponse<WebAppServicePlanV2Inner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param filter Filter query.
     * @param pageSize Optional parameter for page size.
     * @param continuationToken Optional parameter for continuation token.
     * @param totalRecordCount Total record count.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebAppServicePlanV2Inner>> listByWebAppAssessmentV2SinglePageAsync(
        String resourceGroupName, String projectName, String groupName, String assessmentName, String filter,
        Integer pageSize, String continuationToken, Integer totalRecordCount, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (projectName == null) {
            return Mono.error(new IllegalArgumentException("Parameter projectName is required and cannot be null."));
        }
        if (groupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupName is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByWebAppAssessmentV2(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, filter, pageSize, continuationToken,
                totalRecordCount, projectName, groupName, assessmentName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param filter Filter query.
     * @param pageSize Optional parameter for page size.
     * @param continuationToken Optional parameter for continuation token.
     * @param totalRecordCount Total record count.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WebAppServicePlanV2Inner> listByWebAppAssessmentV2Async(String resourceGroupName,
        String projectName, String groupName, String assessmentName, String filter, Integer pageSize,
        String continuationToken, Integer totalRecordCount) {
        return new PagedFlux<>(
            () -> listByWebAppAssessmentV2SinglePageAsync(resourceGroupName, projectName, groupName, assessmentName,
                filter, pageSize, continuationToken, totalRecordCount),
            nextLink -> listByWebAppAssessmentV2NextSinglePageAsync(nextLink));
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WebAppServicePlanV2Inner> listByWebAppAssessmentV2Async(String resourceGroupName,
        String projectName, String groupName, String assessmentName) {
        final String filter = null;
        final Integer pageSize = null;
        final String continuationToken = null;
        final Integer totalRecordCount = null;
        return new PagedFlux<>(
            () -> listByWebAppAssessmentV2SinglePageAsync(resourceGroupName, projectName, groupName, assessmentName,
                filter, pageSize, continuationToken, totalRecordCount),
            nextLink -> listByWebAppAssessmentV2NextSinglePageAsync(nextLink));
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param filter Filter query.
     * @param pageSize Optional parameter for page size.
     * @param continuationToken Optional parameter for continuation token.
     * @param totalRecordCount Total record count.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<WebAppServicePlanV2Inner> listByWebAppAssessmentV2Async(String resourceGroupName,
        String projectName, String groupName, String assessmentName, String filter, Integer pageSize,
        String continuationToken, Integer totalRecordCount, Context context) {
        return new PagedFlux<>(
            () -> listByWebAppAssessmentV2SinglePageAsync(resourceGroupName, projectName, groupName, assessmentName,
                filter, pageSize, continuationToken, totalRecordCount, context),
            nextLink -> listByWebAppAssessmentV2NextSinglePageAsync(nextLink, context));
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WebAppServicePlanV2Inner> listByWebAppAssessmentV2(String resourceGroupName,
        String projectName, String groupName, String assessmentName) {
        final String filter = null;
        final Integer pageSize = null;
        final String continuationToken = null;
        final Integer totalRecordCount = null;
        return new PagedIterable<>(listByWebAppAssessmentV2Async(resourceGroupName, projectName, groupName,
            assessmentName, filter, pageSize, continuationToken, totalRecordCount));
    }

    /**
     * List WebAppServicePlanV2 resources by WebAppAssessmentV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param filter Filter query.
     * @param pageSize Optional parameter for page size.
     * @param continuationToken Optional parameter for continuation token.
     * @param totalRecordCount Total record count.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WebAppServicePlanV2Inner> listByWebAppAssessmentV2(String resourceGroupName,
        String projectName, String groupName, String assessmentName, String filter, Integer pageSize,
        String continuationToken, Integer totalRecordCount, Context context) {
        return new PagedIterable<>(listByWebAppAssessmentV2Async(resourceGroupName, projectName, groupName,
            assessmentName, filter, pageSize, continuationToken, totalRecordCount, context));
    }

    /**
     * Get a WebAppServicePlanV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param webAppServicePlanName Web app service plan ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WebAppServicePlanV2 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebAppServicePlanV2Inner>> getWithResponseAsync(String resourceGroupName, String projectName,
        String groupName, String assessmentName, String webAppServicePlanName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (projectName == null) {
            return Mono.error(new IllegalArgumentException("Parameter projectName is required and cannot be null."));
        }
        if (groupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupName is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (webAppServicePlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter webAppServicePlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, projectName, groupName, assessmentName,
                webAppServicePlanName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a WebAppServicePlanV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param webAppServicePlanName Web app service plan ARM name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WebAppServicePlanV2 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<WebAppServicePlanV2Inner>> getWithResponseAsync(String resourceGroupName, String projectName,
        String groupName, String assessmentName, String webAppServicePlanName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (projectName == null) {
            return Mono.error(new IllegalArgumentException("Parameter projectName is required and cannot be null."));
        }
        if (groupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupName is required and cannot be null."));
        }
        if (assessmentName == null) {
            return Mono.error(new IllegalArgumentException("Parameter assessmentName is required and cannot be null."));
        }
        if (webAppServicePlanName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter webAppServicePlanName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, projectName, groupName, assessmentName, webAppServicePlanName, accept, context);
    }

    /**
     * Get a WebAppServicePlanV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param webAppServicePlanName Web app service plan ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WebAppServicePlanV2 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<WebAppServicePlanV2Inner> getAsync(String resourceGroupName, String projectName, String groupName,
        String assessmentName, String webAppServicePlanName) {
        return getWithResponseAsync(resourceGroupName, projectName, groupName, assessmentName, webAppServicePlanName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a WebAppServicePlanV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param webAppServicePlanName Web app service plan ARM name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WebAppServicePlanV2 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<WebAppServicePlanV2Inner> getWithResponse(String resourceGroupName, String projectName,
        String groupName, String assessmentName, String webAppServicePlanName, Context context) {
        return getWithResponseAsync(resourceGroupName, projectName, groupName, assessmentName, webAppServicePlanName,
            context).block();
    }

    /**
     * Get a WebAppServicePlanV2.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param projectName Assessment Project Name.
     * @param groupName Group ARM name.
     * @param assessmentName Web app Assessment arm name.
     * @param webAppServicePlanName Web app service plan ARM name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WebAppServicePlanV2.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebAppServicePlanV2Inner get(String resourceGroupName, String projectName, String groupName,
        String assessmentName, String webAppServicePlanName) {
        return getWithResponse(resourceGroupName, projectName, groupName, assessmentName, webAppServicePlanName,
            Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebAppServicePlanV2Inner>> listByWebAppAssessmentV2NextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByWebAppAssessmentV2Next(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<WebAppServicePlanV2Inner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WebAppServicePlanV2 list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<WebAppServicePlanV2Inner>> listByWebAppAssessmentV2NextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByWebAppAssessmentV2Next(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
