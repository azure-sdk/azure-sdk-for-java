// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Heterogeneous assessment summary properties class.
 */
@Immutable
public final class HeterogeneousAssessmentSummaryProperties
    implements JsonSerializable<HeterogeneousAssessmentSummaryProperties> {
    /*
     * The assessment name
     */
    private String assessmentName;

    /*
     * The summary type
     */
    private SummaryType summaryType;

    /*
     * Gets the migration type summaries.
     */
    private List<MigrationTypeSummaries> migrationPaths;

    /*
     * Gets the readiness summary.
     */
    private List<HeterogeneousAssessmentSummaryPropertiesReadinessSummaryItem> readinessSummary;

    /*
     * Gets the confidence score.
     */
    private Float confidenceScore;

    /*
     * Gets the cost components.
     */
    private List<CostComponent> costComponents;

    /*
     * Gets the saving component.
     */
    private List<SavingComponent> savingComponent;

    /**
     * Creates an instance of HeterogeneousAssessmentSummaryProperties class.
     */
    public HeterogeneousAssessmentSummaryProperties() {
    }

    /**
     * Get the assessmentName property: The assessment name.
     * 
     * @return the assessmentName value.
     */
    public String assessmentName() {
        return this.assessmentName;
    }

    /**
     * Get the summaryType property: The summary type.
     * 
     * @return the summaryType value.
     */
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the migrationPaths property: Gets the migration type summaries.
     * 
     * @return the migrationPaths value.
     */
    public List<MigrationTypeSummaries> migrationPaths() {
        return this.migrationPaths;
    }

    /**
     * Get the readinessSummary property: Gets the readiness summary.
     * 
     * @return the readinessSummary value.
     */
    public List<HeterogeneousAssessmentSummaryPropertiesReadinessSummaryItem> readinessSummary() {
        return this.readinessSummary;
    }

    /**
     * Get the confidenceScore property: Gets the confidence score.
     * 
     * @return the confidenceScore value.
     */
    public Float confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the costComponents property: Gets the cost components.
     * 
     * @return the costComponents value.
     */
    public List<CostComponent> costComponents() {
        return this.costComponents;
    }

    /**
     * Get the savingComponent property: Gets the saving component.
     * 
     * @return the savingComponent value.
     */
    public List<SavingComponent> savingComponent() {
        return this.savingComponent;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationPaths() != null) {
            migrationPaths().forEach(e -> e.validate());
        }
        if (readinessSummary() != null) {
            readinessSummary().forEach(e -> e.validate());
        }
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
        if (savingComponent() != null) {
            savingComponent().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HeterogeneousAssessmentSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HeterogeneousAssessmentSummaryProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HeterogeneousAssessmentSummaryProperties.
     */
    public static HeterogeneousAssessmentSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HeterogeneousAssessmentSummaryProperties deserializedHeterogeneousAssessmentSummaryProperties
                = new HeterogeneousAssessmentSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessmentName".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentSummaryProperties.assessmentName = reader.getString();
                } else if ("summaryType".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentSummaryProperties.summaryType
                        = SummaryType.fromString(reader.getString());
                } else if ("migrationPaths".equals(fieldName)) {
                    List<MigrationTypeSummaries> migrationPaths
                        = reader.readArray(reader1 -> MigrationTypeSummaries.fromJson(reader1));
                    deserializedHeterogeneousAssessmentSummaryProperties.migrationPaths = migrationPaths;
                } else if ("readinessSummary".equals(fieldName)) {
                    List<HeterogeneousAssessmentSummaryPropertiesReadinessSummaryItem> readinessSummary
                        = reader.readArray(
                            reader1 -> HeterogeneousAssessmentSummaryPropertiesReadinessSummaryItem.fromJson(reader1));
                    deserializedHeterogeneousAssessmentSummaryProperties.readinessSummary = readinessSummary;
                } else if ("confidenceScore".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentSummaryProperties.confidenceScore
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("costComponents".equals(fieldName)) {
                    List<CostComponent> costComponents = reader.readArray(reader1 -> CostComponent.fromJson(reader1));
                    deserializedHeterogeneousAssessmentSummaryProperties.costComponents = costComponents;
                } else if ("savingComponent".equals(fieldName)) {
                    List<SavingComponent> savingComponent
                        = reader.readArray(reader1 -> SavingComponent.fromJson(reader1));
                    deserializedHeterogeneousAssessmentSummaryProperties.savingComponent = savingComponent;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHeterogeneousAssessmentSummaryProperties;
        });
    }
}
