// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties of the assessment options.
 */
@Fluent
public final class SqlGraphAssessmentOptionsProperties
    implements JsonSerializable<SqlGraphAssessmentOptionsProperties> {
    /*
     * Gets or sets the edges.
     */
    private Map<String, SqlAssessmentOptionsOutboundEdgeGroup> edges;

    /**
     * Creates an instance of SqlGraphAssessmentOptionsProperties class.
     */
    public SqlGraphAssessmentOptionsProperties() {
    }

    /**
     * Get the edges property: Gets or sets the edges.
     * 
     * @return the edges value.
     */
    public Map<String, SqlAssessmentOptionsOutboundEdgeGroup> edges() {
        return this.edges;
    }

    /**
     * Set the edges property: Gets or sets the edges.
     * 
     * @param edges the edges value to set.
     * @return the SqlGraphAssessmentOptionsProperties object itself.
     */
    public SqlGraphAssessmentOptionsProperties withEdges(Map<String, SqlAssessmentOptionsOutboundEdgeGroup> edges) {
        this.edges = edges;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (edges() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property edges in model SqlGraphAssessmentOptionsProperties"));
        } else {
            edges().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlGraphAssessmentOptionsProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("edges", this.edges, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlGraphAssessmentOptionsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlGraphAssessmentOptionsProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlGraphAssessmentOptionsProperties.
     */
    public static SqlGraphAssessmentOptionsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlGraphAssessmentOptionsProperties deserializedSqlGraphAssessmentOptionsProperties
                = new SqlGraphAssessmentOptionsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("edges".equals(fieldName)) {
                    Map<String, SqlAssessmentOptionsOutboundEdgeGroup> edges
                        = reader.readMap(reader1 -> SqlAssessmentOptionsOutboundEdgeGroup.fromJson(reader1));
                    deserializedSqlGraphAssessmentOptionsProperties.edges = edges;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlGraphAssessmentOptionsProperties;
        });
    }
}
