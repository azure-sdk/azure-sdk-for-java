// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of an assessment.
 */
@Fluent
public final class HeterogeneousAssessmentProperties implements JsonSerializable<HeterogeneousAssessmentProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Arm id of partner assessments.
     */
    private List<String> assessmentArmIds;

    /*
     * Whether assessment is in valid state and all machines have been assessed.
     */
    private AssessmentStatus status;

    /*
     * Timestamp for the last successfully calculated summary for the assessment.
     */
    private OffsetDateTime lastCalculatedOn;

    /*
     * Confidence rating in percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Azure location for assessment.
     */
    private String azureLocation;

    /*
     * Sizing criterion for assessment.
     */
    private AssessmentSizingCriterion sizingCriterion;

    /*
     * Schema version.
     */
    private String schemaVersion;

    /**
     * Creates an instance of HeterogeneousAssessmentProperties class.
     */
    public HeterogeneousAssessmentProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the assessmentArmIds property: Arm id of partner assessments.
     * 
     * @return the assessmentArmIds value.
     */
    public List<String> assessmentArmIds() {
        return this.assessmentArmIds;
    }

    /**
     * Set the assessmentArmIds property: Arm id of partner assessments.
     * 
     * @param assessmentArmIds the assessmentArmIds value to set.
     * @return the HeterogeneousAssessmentProperties object itself.
     */
    public HeterogeneousAssessmentProperties withAssessmentArmIds(List<String> assessmentArmIds) {
        this.assessmentArmIds = assessmentArmIds;
        return this;
    }

    /**
     * Get the status property: Whether assessment is in valid state and all machines have been assessed.
     * 
     * @return the status value.
     */
    public AssessmentStatus status() {
        return this.status;
    }

    /**
     * Get the lastCalculatedOn property: Timestamp for the last successfully calculated summary for the assessment.
     * 
     * @return the lastCalculatedOn value.
     */
    public OffsetDateTime lastCalculatedOn() {
        return this.lastCalculatedOn;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence rating in percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the azureLocation property: Azure location for assessment.
     * 
     * @return the azureLocation value.
     */
    public String azureLocation() {
        return this.azureLocation;
    }

    /**
     * Get the sizingCriterion property: Sizing criterion for assessment.
     * 
     * @return the sizingCriterion value.
     */
    public AssessmentSizingCriterion sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * Get the schemaVersion property: Schema version.
     * 
     * @return the schemaVersion value.
     */
    public String schemaVersion() {
        return this.schemaVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("assessmentArmIds", this.assessmentArmIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HeterogeneousAssessmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HeterogeneousAssessmentProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HeterogeneousAssessmentProperties.
     */
    public static HeterogeneousAssessmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HeterogeneousAssessmentProperties deserializedHeterogeneousAssessmentProperties
                = new HeterogeneousAssessmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("assessmentArmIds".equals(fieldName)) {
                    List<String> assessmentArmIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedHeterogeneousAssessmentProperties.assessmentArmIds = assessmentArmIds;
                } else if ("status".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.status
                        = AssessmentStatus.fromString(reader.getString());
                } else if ("lastCalculatedOn".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.lastCalculatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("azureLocation".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.azureLocation = reader.getString();
                } else if ("sizingCriterion".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.sizingCriterion
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else if ("schemaVersion".equals(fieldName)) {
                    deserializedHeterogeneousAssessmentProperties.schemaVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHeterogeneousAssessmentProperties;
        });
    }
}
