// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Evaluated sql entity properties class.
 */
@Immutable
public final class EvaluatedSqlEntityProperties implements JsonSerializable<EvaluatedSqlEntityProperties> {
    /*
     * Server name.
     */
    private String serverName;

    /*
     * Activity state.
     */
    private String activityState;

    /*
     * SQL Server version.
     */
    private String sqlVersion;

    /*
     * SQL Server edition.
     */
    private String sqlEdition;

    /*
     * Recommended Azure target.
     */
    private String recommendedAzureTarget;

    /*
     * Qualifying offer.
     */
    private String qualifyingOffer;

    /*
     * Is SQL Instance ready for migration.
     */
    private String readyForMigration;

    /*
     * The virtualization type.
     */
    private String virtualizationType;

    /*
     * DB count in instance.
     */
    private Integer dbCount;

    /*
     * End of Support status.
     */
    private SupportabilityStatus supportStatus;

    /**
     * Creates an instance of EvaluatedSqlEntityProperties class.
     */
    public EvaluatedSqlEntityProperties() {
    }

    /**
     * Get the serverName property: Server name.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Get the activityState property: Activity state.
     * 
     * @return the activityState value.
     */
    public String activityState() {
        return this.activityState;
    }

    /**
     * Get the sqlVersion property: SQL Server version.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.sqlVersion;
    }

    /**
     * Get the sqlEdition property: SQL Server edition.
     * 
     * @return the sqlEdition value.
     */
    public String sqlEdition() {
        return this.sqlEdition;
    }

    /**
     * Get the recommendedAzureTarget property: Recommended Azure target.
     * 
     * @return the recommendedAzureTarget value.
     */
    public String recommendedAzureTarget() {
        return this.recommendedAzureTarget;
    }

    /**
     * Get the qualifyingOffer property: Qualifying offer.
     * 
     * @return the qualifyingOffer value.
     */
    public String qualifyingOffer() {
        return this.qualifyingOffer;
    }

    /**
     * Get the readyForMigration property: Is SQL Instance ready for migration.
     * 
     * @return the readyForMigration value.
     */
    public String readyForMigration() {
        return this.readyForMigration;
    }

    /**
     * Get the virtualizationType property: The virtualization type.
     * 
     * @return the virtualizationType value.
     */
    public String virtualizationType() {
        return this.virtualizationType;
    }

    /**
     * Get the dbCount property: DB count in instance.
     * 
     * @return the dbCount value.
     */
    public Integer dbCount() {
        return this.dbCount;
    }

    /**
     * Get the supportStatus property: End of Support status.
     * 
     * @return the supportStatus value.
     */
    public SupportabilityStatus supportStatus() {
        return this.supportStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluatedSqlEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluatedSqlEntityProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvaluatedSqlEntityProperties.
     */
    public static EvaluatedSqlEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvaluatedSqlEntityProperties deserializedEvaluatedSqlEntityProperties = new EvaluatedSqlEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverName".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.serverName = reader.getString();
                } else if ("activityState".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.activityState = reader.getString();
                } else if ("sqlVersion".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.sqlVersion = reader.getString();
                } else if ("sqlEdition".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.sqlEdition = reader.getString();
                } else if ("recommendedAzureTarget".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.recommendedAzureTarget = reader.getString();
                } else if ("qualifyingOffer".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.qualifyingOffer = reader.getString();
                } else if ("readyForMigration".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.readyForMigration = reader.getString();
                } else if ("virtualizationType".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.virtualizationType = reader.getString();
                } else if ("dbCount".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.dbCount = reader.getNullable(JsonReader::getInt);
                } else if ("supportStatus".equals(fieldName)) {
                    deserializedEvaluatedSqlEntityProperties.supportStatus
                        = SupportabilityStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvaluatedSqlEntityProperties;
        });
    }
}
