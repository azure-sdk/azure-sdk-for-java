// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The app type distribution.
 */
@Immutable
public final class WebAppDistribution implements JsonSerializable<WebAppDistribution> {
    /*
     * WebApp type.
     */
    private WebAppTypes webAppType;

    /*
     * The cost details.
     */
    private Float numberOfWebApps;

    /**
     * Creates an instance of WebAppDistribution class.
     */
    public WebAppDistribution() {
    }

    /**
     * Get the webAppType property: WebApp type.
     * 
     * @return the webAppType value.
     */
    public WebAppTypes webAppType() {
        return this.webAppType;
    }

    /**
     * Get the numberOfWebApps property: The cost details.
     * 
     * @return the numberOfWebApps value.
     */
    public Float numberOfWebApps() {
        return this.numberOfWebApps;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebAppDistribution from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebAppDistribution if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebAppDistribution.
     */
    public static WebAppDistribution fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebAppDistribution deserializedWebAppDistribution = new WebAppDistribution();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("webAppType".equals(fieldName)) {
                    deserializedWebAppDistribution.webAppType = WebAppTypes.fromString(reader.getString());
                } else if ("numberOfWebApps".equals(fieldName)) {
                    deserializedWebAppDistribution.numberOfWebApps = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebAppDistribution;
        });
    }
}
