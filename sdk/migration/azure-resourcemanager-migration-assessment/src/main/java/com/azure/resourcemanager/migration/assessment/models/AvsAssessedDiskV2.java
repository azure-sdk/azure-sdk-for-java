// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AVS assessed disk web model class.
 */
@Immutable
public final class AvsAssessedDiskV2 implements JsonSerializable<AvsAssessedDiskV2> {
    /*
     * Gets the ID of the disk.
     */
    private String name;

    /*
     * Gets the display name of the disk.
     */
    private String displayName;

    /*
     * Gigabytes Provisioned for a disk in private data center.
     */
    private Float gigabytesProvisioned;

    /*
     * Disk Read Throughput in MB/s.
     */
    private Float megabytesPerSecondOfRead;

    /*
     * Disk Write Throughput in MB/s.
     */
    private Float megabytesPerSecondOfWrite;

    /*
     * Read Operations per second.
     */
    private Float numberOfReadOperationsPerSecond;

    /*
     * Write Operations per second.
     */
    private Float numberOfWriteOperationsPerSecond;

    /*
     * Associated storage Type recommended for Disk.
     */
    private ExternalStorageType assessedExternalStorageType;

    /*
     * Estimated Disk Size in GB.
     */
    private Float estimatedDiskSizeInGB;

    /**
     * Creates an instance of AvsAssessedDiskV2 class.
     */
    public AvsAssessedDiskV2() {
    }

    /**
     * Get the name property: Gets the ID of the disk.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the displayName property: Gets the display name of the disk.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the gigabytesProvisioned property: Gigabytes Provisioned for a disk in private data center.
     * 
     * @return the gigabytesProvisioned value.
     */
    public Float gigabytesProvisioned() {
        return this.gigabytesProvisioned;
    }

    /**
     * Get the megabytesPerSecondOfRead property: Disk Read Throughput in MB/s.
     * 
     * @return the megabytesPerSecondOfRead value.
     */
    public Float megabytesPerSecondOfRead() {
        return this.megabytesPerSecondOfRead;
    }

    /**
     * Get the megabytesPerSecondOfWrite property: Disk Write Throughput in MB/s.
     * 
     * @return the megabytesPerSecondOfWrite value.
     */
    public Float megabytesPerSecondOfWrite() {
        return this.megabytesPerSecondOfWrite;
    }

    /**
     * Get the numberOfReadOperationsPerSecond property: Read Operations per second.
     * 
     * @return the numberOfReadOperationsPerSecond value.
     */
    public Float numberOfReadOperationsPerSecond() {
        return this.numberOfReadOperationsPerSecond;
    }

    /**
     * Get the numberOfWriteOperationsPerSecond property: Write Operations per second.
     * 
     * @return the numberOfWriteOperationsPerSecond value.
     */
    public Float numberOfWriteOperationsPerSecond() {
        return this.numberOfWriteOperationsPerSecond;
    }

    /**
     * Get the assessedExternalStorageType property: Associated storage Type recommended for Disk.
     * 
     * @return the assessedExternalStorageType value.
     */
    public ExternalStorageType assessedExternalStorageType() {
        return this.assessedExternalStorageType;
    }

    /**
     * Get the estimatedDiskSizeInGB property: Estimated Disk Size in GB.
     * 
     * @return the estimatedDiskSizeInGB value.
     */
    public Float estimatedDiskSizeInGB() {
        return this.estimatedDiskSizeInGB;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsAssessedDiskV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsAssessedDiskV2 if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsAssessedDiskV2.
     */
    public static AvsAssessedDiskV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsAssessedDiskV2 deserializedAvsAssessedDiskV2 = new AvsAssessedDiskV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.displayName = reader.getString();
                } else if ("gigabytesProvisioned".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.gigabytesProvisioned = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfRead".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.megabytesPerSecondOfRead = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfWrite".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.megabytesPerSecondOfWrite = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfReadOperationsPerSecond".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.numberOfReadOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfWriteOperationsPerSecond".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.numberOfWriteOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("assessedExternalStorageType".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.assessedExternalStorageType
                        = ExternalStorageType.fromString(reader.getString());
                } else if ("estimatedDiskSizeInGB".equals(fieldName)) {
                    deserializedAvsAssessedDiskV2.estimatedDiskSizeInGB = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsAssessedDiskV2;
        });
    }
}
