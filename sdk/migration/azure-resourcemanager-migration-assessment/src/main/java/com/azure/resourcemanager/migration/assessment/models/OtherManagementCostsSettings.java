// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Other Management Costs Settings.
 */
@Fluent
public final class OtherManagementCostsSettings implements JsonSerializable<OtherManagementCostsSettings> {
    /*
     * Monitoring Cost Per Server Per Year.
     */
    private float monitoringCostPerServerPerYear;

    /*
     * Patching Cost Per Server Per Year.
     */
    private float patchingCostPerServerPerYear;

    /*
     * Data Protection Cost Per Server Per Year.
     */
    private float dataProtectionCostPerServerPerYear;

    /**
     * Creates an instance of OtherManagementCostsSettings class.
     */
    public OtherManagementCostsSettings() {
    }

    /**
     * Get the monitoringCostPerServerPerYear property: Monitoring Cost Per Server Per Year.
     * 
     * @return the monitoringCostPerServerPerYear value.
     */
    public float monitoringCostPerServerPerYear() {
        return this.monitoringCostPerServerPerYear;
    }

    /**
     * Set the monitoringCostPerServerPerYear property: Monitoring Cost Per Server Per Year.
     * 
     * @param monitoringCostPerServerPerYear the monitoringCostPerServerPerYear value to set.
     * @return the OtherManagementCostsSettings object itself.
     */
    public OtherManagementCostsSettings withMonitoringCostPerServerPerYear(float monitoringCostPerServerPerYear) {
        this.monitoringCostPerServerPerYear = monitoringCostPerServerPerYear;
        return this;
    }

    /**
     * Get the patchingCostPerServerPerYear property: Patching Cost Per Server Per Year.
     * 
     * @return the patchingCostPerServerPerYear value.
     */
    public float patchingCostPerServerPerYear() {
        return this.patchingCostPerServerPerYear;
    }

    /**
     * Set the patchingCostPerServerPerYear property: Patching Cost Per Server Per Year.
     * 
     * @param patchingCostPerServerPerYear the patchingCostPerServerPerYear value to set.
     * @return the OtherManagementCostsSettings object itself.
     */
    public OtherManagementCostsSettings withPatchingCostPerServerPerYear(float patchingCostPerServerPerYear) {
        this.patchingCostPerServerPerYear = patchingCostPerServerPerYear;
        return this;
    }

    /**
     * Get the dataProtectionCostPerServerPerYear property: Data Protection Cost Per Server Per Year.
     * 
     * @return the dataProtectionCostPerServerPerYear value.
     */
    public float dataProtectionCostPerServerPerYear() {
        return this.dataProtectionCostPerServerPerYear;
    }

    /**
     * Set the dataProtectionCostPerServerPerYear property: Data Protection Cost Per Server Per Year.
     * 
     * @param dataProtectionCostPerServerPerYear the dataProtectionCostPerServerPerYear value to set.
     * @return the OtherManagementCostsSettings object itself.
     */
    public OtherManagementCostsSettings
        withDataProtectionCostPerServerPerYear(float dataProtectionCostPerServerPerYear) {
        this.dataProtectionCostPerServerPerYear = dataProtectionCostPerServerPerYear;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("monitoringCostPerServerPerYear", this.monitoringCostPerServerPerYear);
        jsonWriter.writeFloatField("patchingCostPerServerPerYear", this.patchingCostPerServerPerYear);
        jsonWriter.writeFloatField("dataProtectionCostPerServerPerYear", this.dataProtectionCostPerServerPerYear);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OtherManagementCostsSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OtherManagementCostsSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OtherManagementCostsSettings.
     */
    public static OtherManagementCostsSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OtherManagementCostsSettings deserializedOtherManagementCostsSettings = new OtherManagementCostsSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("monitoringCostPerServerPerYear".equals(fieldName)) {
                    deserializedOtherManagementCostsSettings.monitoringCostPerServerPerYear = reader.getFloat();
                } else if ("patchingCostPerServerPerYear".equals(fieldName)) {
                    deserializedOtherManagementCostsSettings.patchingCostPerServerPerYear = reader.getFloat();
                } else if ("dataProtectionCostPerServerPerYear".equals(fieldName)) {
                    deserializedOtherManagementCostsSettings.dataProtectionCostPerServerPerYear = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOtherManagementCostsSettings;
        });
    }
}
