// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Azure Iaas sql server summary.
 */
@Immutable
public final class AzureIaasSqlSummary implements JsonSerializable<AzureIaasSqlSummary> {
    /*
     * Total SQL entities.
     */
    private Integer totalSqlEntities;

    /*
     * Suitable SQL entities.
     */
    private Integer suitableSqlEntities;

    /*
     * The on premises PaaS cost.
     */
    private CostDetails azureSqlCostDetails;

    /*
     * Estimated cost.
     */
    private Float estimatedCost;

    /*
     * OS licensing cost.
     */
    private Float osLicensingCost;

    /*
     * Estimated cost by offer.
     */
    private List<EstimatedCostByOffer> estimatedCostByRecommendedOffer;

    /*
     * The recommended VM family summary.
     */
    private List<RecommendedVmFamilySummary> recommendedVmFamilySummary;

    /*
     * The cost by storage type.
     */
    private List<CostByStorageType> costByStorageType;

    /**
     * Creates an instance of AzureIaasSqlSummary class.
     */
    public AzureIaasSqlSummary() {
    }

    /**
     * Get the totalSqlEntities property: Total SQL entities.
     * 
     * @return the totalSqlEntities value.
     */
    public Integer totalSqlEntities() {
        return this.totalSqlEntities;
    }

    /**
     * Get the suitableSqlEntities property: Suitable SQL entities.
     * 
     * @return the suitableSqlEntities value.
     */
    public Integer suitableSqlEntities() {
        return this.suitableSqlEntities;
    }

    /**
     * Get the azureSqlCostDetails property: The on premises PaaS cost.
     * 
     * @return the azureSqlCostDetails value.
     */
    public CostDetails azureSqlCostDetails() {
        return this.azureSqlCostDetails;
    }

    /**
     * Get the estimatedCost property: Estimated cost.
     * 
     * @return the estimatedCost value.
     */
    public Float estimatedCost() {
        return this.estimatedCost;
    }

    /**
     * Get the osLicensingCost property: OS licensing cost.
     * 
     * @return the osLicensingCost value.
     */
    public Float osLicensingCost() {
        return this.osLicensingCost;
    }

    /**
     * Get the estimatedCostByRecommendedOffer property: Estimated cost by offer.
     * 
     * @return the estimatedCostByRecommendedOffer value.
     */
    public List<EstimatedCostByOffer> estimatedCostByRecommendedOffer() {
        return this.estimatedCostByRecommendedOffer;
    }

    /**
     * Get the recommendedVmFamilySummary property: The recommended VM family summary.
     * 
     * @return the recommendedVmFamilySummary value.
     */
    public List<RecommendedVmFamilySummary> recommendedVmFamilySummary() {
        return this.recommendedVmFamilySummary;
    }

    /**
     * Get the costByStorageType property: The cost by storage type.
     * 
     * @return the costByStorageType value.
     */
    public List<CostByStorageType> costByStorageType() {
        return this.costByStorageType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureSqlCostDetails() != null) {
            azureSqlCostDetails().validate();
        }
        if (estimatedCostByRecommendedOffer() != null) {
            estimatedCostByRecommendedOffer().forEach(e -> e.validate());
        }
        if (recommendedVmFamilySummary() != null) {
            recommendedVmFamilySummary().forEach(e -> e.validate());
        }
        if (costByStorageType() != null) {
            costByStorageType().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureIaasSqlSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureIaasSqlSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureIaasSqlSummary.
     */
    public static AzureIaasSqlSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureIaasSqlSummary deserializedAzureIaasSqlSummary = new AzureIaasSqlSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalSqlEntities".equals(fieldName)) {
                    deserializedAzureIaasSqlSummary.totalSqlEntities = reader.getNullable(JsonReader::getInt);
                } else if ("suitableSqlEntities".equals(fieldName)) {
                    deserializedAzureIaasSqlSummary.suitableSqlEntities = reader.getNullable(JsonReader::getInt);
                } else if ("azureSqlCostDetails".equals(fieldName)) {
                    deserializedAzureIaasSqlSummary.azureSqlCostDetails = CostDetails.fromJson(reader);
                } else if ("estimatedCost".equals(fieldName)) {
                    deserializedAzureIaasSqlSummary.estimatedCost = reader.getNullable(JsonReader::getFloat);
                } else if ("osLicensingCost".equals(fieldName)) {
                    deserializedAzureIaasSqlSummary.osLicensingCost = reader.getNullable(JsonReader::getFloat);
                } else if ("estimatedCostByRecommendedOffer".equals(fieldName)) {
                    List<EstimatedCostByOffer> estimatedCostByRecommendedOffer
                        = reader.readArray(reader1 -> EstimatedCostByOffer.fromJson(reader1));
                    deserializedAzureIaasSqlSummary.estimatedCostByRecommendedOffer = estimatedCostByRecommendedOffer;
                } else if ("recommendedVmFamilySummary".equals(fieldName)) {
                    List<RecommendedVmFamilySummary> recommendedVmFamilySummary
                        = reader.readArray(reader1 -> RecommendedVmFamilySummary.fromJson(reader1));
                    deserializedAzureIaasSqlSummary.recommendedVmFamilySummary = recommendedVmFamilySummary;
                } else if ("costByStorageType".equals(fieldName)) {
                    List<CostByStorageType> costByStorageType
                        = reader.readArray(reader1 -> CostByStorageType.fromJson(reader1));
                    deserializedAzureIaasSqlSummary.costByStorageType = costByStorageType;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureIaasSqlSummary;
        });
    }
}
