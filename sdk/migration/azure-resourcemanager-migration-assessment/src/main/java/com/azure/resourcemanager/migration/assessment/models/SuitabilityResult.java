// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Data model of Suitability Result.
 */
@Immutable
public final class SuitabilityResult implements JsonSerializable<SuitabilityResult> {
    /*
     * Gets readiness.
     */
    private Readiness readiness;

    /*
     * Gets suitability.
     */
    private Suitability suitability;

    /*
     * Gets list of failed Checks.
     */
    private List<Check> failedChecks;

    /*
     * Gets suggested migration tool.
     */
    private SuggestedMigrationTool suggestedMigrationTool;

    /**
     * Creates an instance of SuitabilityResult class.
     */
    public SuitabilityResult() {
    }

    /**
     * Get the readiness property: Gets readiness.
     * 
     * @return the readiness value.
     */
    public Readiness readiness() {
        return this.readiness;
    }

    /**
     * Get the suitability property: Gets suitability.
     * 
     * @return the suitability value.
     */
    public Suitability suitability() {
        return this.suitability;
    }

    /**
     * Get the failedChecks property: Gets list of failed Checks.
     * 
     * @return the failedChecks value.
     */
    public List<Check> failedChecks() {
        return this.failedChecks;
    }

    /**
     * Get the suggestedMigrationTool property: Gets suggested migration tool.
     * 
     * @return the suggestedMigrationTool value.
     */
    public SuggestedMigrationTool suggestedMigrationTool() {
        return this.suggestedMigrationTool;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (failedChecks() != null) {
            failedChecks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SuitabilityResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SuitabilityResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SuitabilityResult.
     */
    public static SuitabilityResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SuitabilityResult deserializedSuitabilityResult = new SuitabilityResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("readiness".equals(fieldName)) {
                    deserializedSuitabilityResult.readiness = Readiness.fromString(reader.getString());
                } else if ("suitability".equals(fieldName)) {
                    deserializedSuitabilityResult.suitability = Suitability.fromString(reader.getString());
                } else if ("failedChecks".equals(fieldName)) {
                    List<Check> failedChecks = reader.readArray(reader1 -> Check.fromJson(reader1));
                    deserializedSuitabilityResult.failedChecks = failedChecks;
                } else if ("suggestedMigrationTool".equals(fieldName)) {
                    deserializedSuitabilityResult.suggestedMigrationTool
                        = SuggestedMigrationTool.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSuitabilityResult;
        });
    }
}
