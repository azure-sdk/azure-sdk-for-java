// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The sql machine extended details.
 */
@Immutable
public final class SqlMachineExtendedDetails implements JsonSerializable<SqlMachineExtendedDetails> {
    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /*
     * Gets or sets the BIOS GUID for the machine.
     */
    private String biosGuid;

    /*
     * Gets or sets the FQDN for the machine.
     */
    private String fqdn;

    /*
     * Gets the product support status related details.
     */
    private ProductSupportStatus productSupportStatus;

    /*
     * Gets the list of data disks that were assessed as part of this assessment.
     */
    private List<AssessedSqlDiskDataV3> disks;

    /*
     * Gets the list of network adapters that were assessed as part of this assessment.
     */
    private List<AssessedSqlNetworkAdaptersV3> networkAdapters;

    /*
     * Boot type of machine discovered in private data center.
     */
    private MachineBootType bootType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemName;

    /*
     * Operating system version as reported by datacenter management solution.
     */
    private String operatingSystemVersion;

    /*
     * Operating system architecture as reported by datacenter management solution.
     */
    private GuestOperatingSystemArchitecture operatingSystemArchitecture;

    /*
     * Description for the machine.
     */
    private String description;

    /*
     * Megabytes of memory found allocated for the machine in private data center.
     */
    private Float megabytesOfMemory;

    /*
     * Number of CPU cores found on the machine.
     */
    private Integer numberOfCores;

    /*
     * Percentile of Percentage of Cores Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageCoresUtilization;

    /*
     * Percentile of Percentage of Memory Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageMemoryUtilization;

    /**
     * Creates an instance of SqlMachineExtendedDetails class.
     */
    public SqlMachineExtendedDetails() {
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the biosGuid property: Gets or sets the BIOS GUID for the machine.
     * 
     * @return the biosGuid value.
     */
    public String biosGuid() {
        return this.biosGuid;
    }

    /**
     * Get the fqdn property: Gets or sets the FQDN for the machine.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the productSupportStatus property: Gets the product support status related details.
     * 
     * @return the productSupportStatus value.
     */
    public ProductSupportStatus productSupportStatus() {
        return this.productSupportStatus;
    }

    /**
     * Get the disks property: Gets the list of data disks that were assessed as part of this assessment.
     * 
     * @return the disks value.
     */
    public List<AssessedSqlDiskDataV3> disks() {
        return this.disks;
    }

    /**
     * Get the networkAdapters property: Gets the list of network adapters that were assessed as part of this
     * assessment.
     * 
     * @return the networkAdapters value.
     */
    public List<AssessedSqlNetworkAdaptersV3> networkAdapters() {
        return this.networkAdapters;
    }

    /**
     * Get the bootType property: Boot type of machine discovered in private data center.
     * 
     * @return the bootType value.
     */
    public MachineBootType bootType() {
        return this.bootType;
    }

    /**
     * Get the operatingSystemType property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemType value.
     */
    public String operatingSystemType() {
        return this.operatingSystemType;
    }

    /**
     * Get the operatingSystemName property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemName value.
     */
    public String operatingSystemName() {
        return this.operatingSystemName;
    }

    /**
     * Get the operatingSystemVersion property: Operating system version as reported by datacenter management solution.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Get the operatingSystemArchitecture property: Operating system architecture as reported by datacenter management
     * solution.
     * 
     * @return the operatingSystemArchitecture value.
     */
    public GuestOperatingSystemArchitecture operatingSystemArchitecture() {
        return this.operatingSystemArchitecture;
    }

    /**
     * Get the description property: Description for the machine.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the megabytesOfMemory property: Megabytes of memory found allocated for the machine in private data center.
     * 
     * @return the megabytesOfMemory value.
     */
    public Float megabytesOfMemory() {
        return this.megabytesOfMemory;
    }

    /**
     * Get the numberOfCores property: Number of CPU cores found on the machine.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Get the percentageCoresUtilization property: Percentile of Percentage of Cores Utilized noted during time period
     * T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the percentageMemoryUtilization property: Percentile of Percentage of Memory Utilized noted during time
     * period T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageMemoryUtilization value.
     */
    public Float percentageMemoryUtilization() {
        return this.percentageMemoryUtilization;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productSupportStatus() != null) {
            productSupportStatus().validate();
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (networkAdapters() != null) {
            networkAdapters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlMachineExtendedDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlMachineExtendedDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlMachineExtendedDetails.
     */
    public static SqlMachineExtendedDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlMachineExtendedDetails deserializedSqlMachineExtendedDetails = new SqlMachineExtendedDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.displayName = reader.getString();
                } else if ("biosGuid".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.biosGuid = reader.getString();
                } else if ("fqdn".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.fqdn = reader.getString();
                } else if ("productSupportStatus".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.productSupportStatus = ProductSupportStatus.fromJson(reader);
                } else if ("disks".equals(fieldName)) {
                    List<AssessedSqlDiskDataV3> disks
                        = reader.readArray(reader1 -> AssessedSqlDiskDataV3.fromJson(reader1));
                    deserializedSqlMachineExtendedDetails.disks = disks;
                } else if ("networkAdapters".equals(fieldName)) {
                    List<AssessedSqlNetworkAdaptersV3> networkAdapters
                        = reader.readArray(reader1 -> AssessedSqlNetworkAdaptersV3.fromJson(reader1));
                    deserializedSqlMachineExtendedDetails.networkAdapters = networkAdapters;
                } else if ("bootType".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.bootType = MachineBootType.fromString(reader.getString());
                } else if ("operatingSystemType".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.operatingSystemType = reader.getString();
                } else if ("operatingSystemName".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.operatingSystemName = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.operatingSystemVersion = reader.getString();
                } else if ("operatingSystemArchitecture".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.operatingSystemArchitecture
                        = GuestOperatingSystemArchitecture.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.description = reader.getString();
                } else if ("megabytesOfMemory".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.megabytesOfMemory = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.numberOfCores = reader.getNullable(JsonReader::getInt);
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageMemoryUtilization".equals(fieldName)) {
                    deserializedSqlMachineExtendedDetails.percentageMemoryUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlMachineExtendedDetails;
        });
    }
}
