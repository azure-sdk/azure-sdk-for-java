// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Check or Rule for Suitability Analysis.
 */
@Immutable
public final class Check implements JsonSerializable<Check> {
    /*
     * Gets name.
     */
    private String name;

    /*
     * Gets behavior or check result.
     */
    private CheckResult behavior;

    /*
     * Gets description.
     */
    private String description;

    /*
     * Gets cause.
     */
    private String cause;

    /*
     * Gets recommendation.
     */
    private String recommendation;

    /*
     * Gets more information about check or rule.
     */
    private MoreInfo moreInfo;

    /**
     * Creates an instance of Check class.
     */
    public Check() {
    }

    /**
     * Get the name property: Gets name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the behavior property: Gets behavior or check result.
     * 
     * @return the behavior value.
     */
    public CheckResult behavior() {
        return this.behavior;
    }

    /**
     * Get the description property: Gets description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the cause property: Gets cause.
     * 
     * @return the cause value.
     */
    public String cause() {
        return this.cause;
    }

    /**
     * Get the recommendation property: Gets recommendation.
     * 
     * @return the recommendation value.
     */
    public String recommendation() {
        return this.recommendation;
    }

    /**
     * Get the moreInfo property: Gets more information about check or rule.
     * 
     * @return the moreInfo value.
     */
    public MoreInfo moreInfo() {
        return this.moreInfo;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (moreInfo() != null) {
            moreInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Check from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Check if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Check.
     */
    public static Check fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Check deserializedCheck = new Check();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCheck.name = reader.getString();
                } else if ("behavior".equals(fieldName)) {
                    deserializedCheck.behavior = CheckResult.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedCheck.description = reader.getString();
                } else if ("cause".equals(fieldName)) {
                    deserializedCheck.cause = reader.getString();
                } else if ("recommendation".equals(fieldName)) {
                    deserializedCheck.recommendation = reader.getString();
                } else if ("moreInfo".equals(fieldName)) {
                    deserializedCheck.moreInfo = MoreInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheck;
        });
    }
}
