// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Service Pack Insight.
 */
@Immutable
public final class ServicePackInsight implements JsonSerializable<ServicePackInsight> {
    /*
     * Unknown support.
     */
    private Integer unknownServicePack;

    /*
     * Patched Service Pack Insight.
     */
    private Integer patched;

    /*
     * Unpatched Service Pack Insight.
     */
    private Integer unpatched;

    /**
     * Creates an instance of ServicePackInsight class.
     */
    public ServicePackInsight() {
    }

    /**
     * Get the unknownServicePack property: Unknown support.
     * 
     * @return the unknownServicePack value.
     */
    public Integer unknownServicePack() {
        return this.unknownServicePack;
    }

    /**
     * Get the patched property: Patched Service Pack Insight.
     * 
     * @return the patched value.
     */
    public Integer patched() {
        return this.patched;
    }

    /**
     * Get the unpatched property: Unpatched Service Pack Insight.
     * 
     * @return the unpatched value.
     */
    public Integer unpatched() {
        return this.unpatched;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServicePackInsight from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServicePackInsight if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServicePackInsight.
     */
    public static ServicePackInsight fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServicePackInsight deserializedServicePackInsight = new ServicePackInsight();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unknownServicePack".equals(fieldName)) {
                    deserializedServicePackInsight.unknownServicePack = reader.getNullable(JsonReader::getInt);
                } else if ("patched".equals(fieldName)) {
                    deserializedServicePackInsight.patched = reader.getNullable(JsonReader::getInt);
                } else if ("unpatched".equals(fieldName)) {
                    deserializedServicePackInsight.unpatched = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServicePackInsight;
        });
    }
}
