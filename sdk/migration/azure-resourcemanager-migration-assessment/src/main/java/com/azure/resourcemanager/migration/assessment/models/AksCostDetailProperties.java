// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ARM model of AKS Cost Detail Properties.
 */
@Immutable
public final class AksCostDetailProperties extends NodePool {
    /*
     * Gets pod approximate monthly cost.
     */
    private float podApproxMonthlyCost;

    /*
     * Gets monthly cost.
     */
    private float monthlyCost;

    /*
     * Gets pod count.
     */
    private int podCount;

    /*
     * Gets node count.
     */
    private int nodeCount;

    /*
     * Gets arm sku name.
     */
    private String armSkuName;

    /*
     * Gets os type.
     */
    private OSType osType;

    /*
     * Gets mode.
     */
    private NodePoolMode mode;

    /*
     * Gets cluster name.
     */
    private String clusterName;

    /*
     * Gets name.
     */
    private String name;

    /*
     * Gets id.
     */
    private String id;

    /**
     * Creates an instance of AksCostDetailProperties class.
     */
    public AksCostDetailProperties() {
    }

    /**
     * Get the podApproxMonthlyCost property: Gets pod approximate monthly cost.
     * 
     * @return the podApproxMonthlyCost value.
     */
    @Override
    public float podApproxMonthlyCost() {
        return this.podApproxMonthlyCost;
    }

    /**
     * Get the monthlyCost property: Gets monthly cost.
     * 
     * @return the monthlyCost value.
     */
    @Override
    public float monthlyCost() {
        return this.monthlyCost;
    }

    /**
     * Get the podCount property: Gets pod count.
     * 
     * @return the podCount value.
     */
    @Override
    public int podCount() {
        return this.podCount;
    }

    /**
     * Get the nodeCount property: Gets node count.
     * 
     * @return the nodeCount value.
     */
    @Override
    public int nodeCount() {
        return this.nodeCount;
    }

    /**
     * Get the armSkuName property: Gets arm sku name.
     * 
     * @return the armSkuName value.
     */
    @Override
    public String armSkuName() {
        return this.armSkuName;
    }

    /**
     * Get the osType property: Gets os type.
     * 
     * @return the osType value.
     */
    @Override
    public OSType osType() {
        return this.osType;
    }

    /**
     * Get the mode property: Gets mode.
     * 
     * @return the mode value.
     */
    @Override
    public NodePoolMode mode() {
        return this.mode;
    }

    /**
     * Get the clusterName property: Gets cluster name.
     * 
     * @return the clusterName value.
     */
    @Override
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Get the name property: Gets name.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Gets id.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksCostDetailProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksCostDetailProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksCostDetailProperties.
     */
    public static AksCostDetailProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksCostDetailProperties deserializedAksCostDetailProperties = new AksCostDetailProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAksCostDetailProperties.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAksCostDetailProperties.name = reader.getString();
                } else if ("clusterName".equals(fieldName)) {
                    deserializedAksCostDetailProperties.clusterName = reader.getString();
                } else if ("mode".equals(fieldName)) {
                    deserializedAksCostDetailProperties.mode = NodePoolMode.fromString(reader.getString());
                } else if ("osType".equals(fieldName)) {
                    deserializedAksCostDetailProperties.osType = OSType.fromString(reader.getString());
                } else if ("armSkuName".equals(fieldName)) {
                    deserializedAksCostDetailProperties.armSkuName = reader.getString();
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedAksCostDetailProperties.nodeCount = reader.getInt();
                } else if ("podCount".equals(fieldName)) {
                    deserializedAksCostDetailProperties.podCount = reader.getInt();
                } else if ("monthlyCost".equals(fieldName)) {
                    deserializedAksCostDetailProperties.monthlyCost = reader.getFloat();
                } else if ("podApproxMonthlyCost".equals(fieldName)) {
                    deserializedAksCostDetailProperties.podApproxMonthlyCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksCostDetailProperties;
        });
    }
}
