// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Evaluated web app properties class.
 */
@Fluent
public final class EvaluatedWebAppProperties implements JsonSerializable<EvaluatedWebAppProperties> {
    /*
     * Recommended Azure target.
     */
    private String recommendedAzureTarget;

    /*
     * Recommended Azure SKU name.
     */
    private String recommendedAzureSkuName;

    /*
     * Recommended Azure SKU size.
     */
    private String recommendedAzureSkuSize;

    /*
     * The server name.
     */
    private String serverName;

    /*
     * The workload.
     */
    private String workload;

    /*
     * The activity state.
     */
    private String activityState;

    /*
     * Is machine ready for migration.
     */
    private String readyForMigration;

    /**
     * Creates an instance of EvaluatedWebAppProperties class.
     */
    public EvaluatedWebAppProperties() {
    }

    /**
     * Get the recommendedAzureTarget property: Recommended Azure target.
     * 
     * @return the recommendedAzureTarget value.
     */
    public String recommendedAzureTarget() {
        return this.recommendedAzureTarget;
    }

    /**
     * Set the recommendedAzureTarget property: Recommended Azure target.
     * 
     * @param recommendedAzureTarget the recommendedAzureTarget value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withRecommendedAzureTarget(String recommendedAzureTarget) {
        this.recommendedAzureTarget = recommendedAzureTarget;
        return this;
    }

    /**
     * Get the recommendedAzureSkuName property: Recommended Azure SKU name.
     * 
     * @return the recommendedAzureSkuName value.
     */
    public String recommendedAzureSkuName() {
        return this.recommendedAzureSkuName;
    }

    /**
     * Set the recommendedAzureSkuName property: Recommended Azure SKU name.
     * 
     * @param recommendedAzureSkuName the recommendedAzureSkuName value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withRecommendedAzureSkuName(String recommendedAzureSkuName) {
        this.recommendedAzureSkuName = recommendedAzureSkuName;
        return this;
    }

    /**
     * Get the recommendedAzureSkuSize property: Recommended Azure SKU size.
     * 
     * @return the recommendedAzureSkuSize value.
     */
    public String recommendedAzureSkuSize() {
        return this.recommendedAzureSkuSize;
    }

    /**
     * Set the recommendedAzureSkuSize property: Recommended Azure SKU size.
     * 
     * @param recommendedAzureSkuSize the recommendedAzureSkuSize value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withRecommendedAzureSkuSize(String recommendedAzureSkuSize) {
        this.recommendedAzureSkuSize = recommendedAzureSkuSize;
        return this;
    }

    /**
     * Get the serverName property: The server name.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: The server name.
     * 
     * @param serverName the serverName value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the workload property: The workload.
     * 
     * @return the workload value.
     */
    public String workload() {
        return this.workload;
    }

    /**
     * Set the workload property: The workload.
     * 
     * @param workload the workload value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withWorkload(String workload) {
        this.workload = workload;
        return this;
    }

    /**
     * Get the activityState property: The activity state.
     * 
     * @return the activityState value.
     */
    public String activityState() {
        return this.activityState;
    }

    /**
     * Set the activityState property: The activity state.
     * 
     * @param activityState the activityState value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withActivityState(String activityState) {
        this.activityState = activityState;
        return this;
    }

    /**
     * Get the readyForMigration property: Is machine ready for migration.
     * 
     * @return the readyForMigration value.
     */
    public String readyForMigration() {
        return this.readyForMigration;
    }

    /**
     * Set the readyForMigration property: Is machine ready for migration.
     * 
     * @param readyForMigration the readyForMigration value to set.
     * @return the EvaluatedWebAppProperties object itself.
     */
    public EvaluatedWebAppProperties withReadyForMigration(String readyForMigration) {
        this.readyForMigration = readyForMigration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recommendedAzureTarget", this.recommendedAzureTarget);
        jsonWriter.writeStringField("recommendedAzureSkuName", this.recommendedAzureSkuName);
        jsonWriter.writeStringField("recommendedAzureSkuSize", this.recommendedAzureSkuSize);
        jsonWriter.writeStringField("serverName", this.serverName);
        jsonWriter.writeStringField("workload", this.workload);
        jsonWriter.writeStringField("activityState", this.activityState);
        jsonWriter.writeStringField("readyForMigration", this.readyForMigration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluatedWebAppProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluatedWebAppProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvaluatedWebAppProperties.
     */
    public static EvaluatedWebAppProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvaluatedWebAppProperties deserializedEvaluatedWebAppProperties = new EvaluatedWebAppProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendedAzureTarget".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.recommendedAzureTarget = reader.getString();
                } else if ("recommendedAzureSkuName".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.recommendedAzureSkuName = reader.getString();
                } else if ("recommendedAzureSkuSize".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.recommendedAzureSkuSize = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.serverName = reader.getString();
                } else if ("workload".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.workload = reader.getString();
                } else if ("activityState".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.activityState = reader.getString();
                } else if ("readyForMigration".equals(fieldName)) {
                    deserializedEvaluatedWebAppProperties.readyForMigration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvaluatedWebAppProperties;
        });
    }
}
