// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Base ARM model of ARM properties for assessment options.
 */
@Immutable
public class OptionsArmPropertiesBase implements JsonSerializable<OptionsArmPropertiesBase> {
    /*
     * Gets the mapping of Assessment Options in graph representation.
     */
    private Map<String, Map<String, List<String>>> edges;

    /**
     * Creates an instance of OptionsArmPropertiesBase class.
     */
    public OptionsArmPropertiesBase() {
    }

    /**
     * Get the edges property: Gets the mapping of Assessment Options in graph representation.
     * 
     * @return the edges value.
     */
    public Map<String, Map<String, List<String>>> edges() {
        return this.edges;
    }

    /**
     * Set the edges property: Gets the mapping of Assessment Options in graph representation.
     * 
     * @param edges the edges value to set.
     * @return the OptionsArmPropertiesBase object itself.
     */
    OptionsArmPropertiesBase withEdges(Map<String, Map<String, List<String>>> edges) {
        this.edges = edges;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OptionsArmPropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OptionsArmPropertiesBase if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OptionsArmPropertiesBase.
     */
    public static OptionsArmPropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OptionsArmPropertiesBase deserializedOptionsArmPropertiesBase = new OptionsArmPropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("edges".equals(fieldName)) {
                    Map<String, Map<String, List<String>>> edges = reader.readMap(
                        reader1 -> reader1.readMap(reader2 -> reader2.readArray(reader3 -> reader3.getString())));
                    deserializedOptionsArmPropertiesBase.edges = edges;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOptionsArmPropertiesBase;
        });
    }
}
