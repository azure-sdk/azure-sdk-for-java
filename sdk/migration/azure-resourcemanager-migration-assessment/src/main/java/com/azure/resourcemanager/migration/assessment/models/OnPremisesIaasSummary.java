// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The on premises IAAS summary.
 */
@Immutable
public final class OnPremisesIaasSummary implements JsonSerializable<OnPremisesIaasSummary> {
    /*
     * The number of servers.
     */
    private Integer servers;

    /*
     * The number of cores.
     */
    private Integer cores;

    /*
     * Total memory in GB.
     */
    private Float memoryGb;

    /*
     * The CPU utilization.
     */
    private Float cpuUtilization;

    /*
     * The memory utilization.
     */
    private Float memoryUtilization;

    /*
     * The storage utilization.
     */
    private Float storageUtilization;

    /*
     * The on premises PaaS cost.
     */
    private CostDetails onPremisesIaasCostDetails;

    /*
     * The on premises PaaS cost.
     */
    private CostDetails onPremisesIaasCostForDecommissioned;

    /*
     * The OS licensing details.
     */
    private List<IaasOsLicensingDetails> osLicensingDetails;

    /*
     * The distribution by operating system.
     */
    private List<DistributionByOperatingSystem> distributionByOperatingSystem;

    /*
     * The SQL on premises utilization insights.
     */
    private UtilizationData onPremisesUtilizationData;

    /*
     * The distribution by virtualization.
     */
    private List<DistributionByVirtualization> distributionByVirtualization;

    /*
     * Iaas OS Support Status Distribution.
     */
    private SupportStatusDistribution iaasOsSupportStatusDistribution;

    /*
     * Iaas Sql Support Status Distribution.
     */
    private SupportStatusDistribution iaasSqlSupportStatusDistribution;

    /*
     * OS Service Pack Insight.
     */
    private ServicePackInsight osServicePackInsight;

    /*
     * Sql Service Pack Insight.
     */
    private ServicePackInsight sqlServicePackInsight;

    /*
     * Distribution by Operating System Version.
     */
    private List<DistributionByType> distributionByOperatingSystemVersion;

    /*
     * Distribution by Sql Version.
     */
    private List<DistributionByType> distributionBySqlVersion;

    /*
     * Distribution by Sql Edition.
     */
    private List<DistributionByType> distributionBySqlEdition;

    /**
     * Creates an instance of OnPremisesIaasSummary class.
     */
    public OnPremisesIaasSummary() {
    }

    /**
     * Get the servers property: The number of servers.
     * 
     * @return the servers value.
     */
    public Integer servers() {
        return this.servers;
    }

    /**
     * Get the cores property: The number of cores.
     * 
     * @return the cores value.
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Get the memoryGb property: Total memory in GB.
     * 
     * @return the memoryGb value.
     */
    public Float memoryGb() {
        return this.memoryGb;
    }

    /**
     * Get the cpuUtilization property: The CPU utilization.
     * 
     * @return the cpuUtilization value.
     */
    public Float cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Get the memoryUtilization property: The memory utilization.
     * 
     * @return the memoryUtilization value.
     */
    public Float memoryUtilization() {
        return this.memoryUtilization;
    }

    /**
     * Get the storageUtilization property: The storage utilization.
     * 
     * @return the storageUtilization value.
     */
    public Float storageUtilization() {
        return this.storageUtilization;
    }

    /**
     * Get the onPremisesIaasCostDetails property: The on premises PaaS cost.
     * 
     * @return the onPremisesIaasCostDetails value.
     */
    public CostDetails onPremisesIaasCostDetails() {
        return this.onPremisesIaasCostDetails;
    }

    /**
     * Get the onPremisesIaasCostForDecommissioned property: The on premises PaaS cost.
     * 
     * @return the onPremisesIaasCostForDecommissioned value.
     */
    public CostDetails onPremisesIaasCostForDecommissioned() {
        return this.onPremisesIaasCostForDecommissioned;
    }

    /**
     * Get the osLicensingDetails property: The OS licensing details.
     * 
     * @return the osLicensingDetails value.
     */
    public List<IaasOsLicensingDetails> osLicensingDetails() {
        return this.osLicensingDetails;
    }

    /**
     * Get the distributionByOperatingSystem property: The distribution by operating system.
     * 
     * @return the distributionByOperatingSystem value.
     */
    public List<DistributionByOperatingSystem> distributionByOperatingSystem() {
        return this.distributionByOperatingSystem;
    }

    /**
     * Get the onPremisesUtilizationData property: The SQL on premises utilization insights.
     * 
     * @return the onPremisesUtilizationData value.
     */
    public UtilizationData onPremisesUtilizationData() {
        return this.onPremisesUtilizationData;
    }

    /**
     * Get the distributionByVirtualization property: The distribution by virtualization.
     * 
     * @return the distributionByVirtualization value.
     */
    public List<DistributionByVirtualization> distributionByVirtualization() {
        return this.distributionByVirtualization;
    }

    /**
     * Get the iaasOsSupportStatusDistribution property: Iaas OS Support Status Distribution.
     * 
     * @return the iaasOsSupportStatusDistribution value.
     */
    public SupportStatusDistribution iaasOsSupportStatusDistribution() {
        return this.iaasOsSupportStatusDistribution;
    }

    /**
     * Get the iaasSqlSupportStatusDistribution property: Iaas Sql Support Status Distribution.
     * 
     * @return the iaasSqlSupportStatusDistribution value.
     */
    public SupportStatusDistribution iaasSqlSupportStatusDistribution() {
        return this.iaasSqlSupportStatusDistribution;
    }

    /**
     * Get the osServicePackInsight property: OS Service Pack Insight.
     * 
     * @return the osServicePackInsight value.
     */
    public ServicePackInsight osServicePackInsight() {
        return this.osServicePackInsight;
    }

    /**
     * Get the sqlServicePackInsight property: Sql Service Pack Insight.
     * 
     * @return the sqlServicePackInsight value.
     */
    public ServicePackInsight sqlServicePackInsight() {
        return this.sqlServicePackInsight;
    }

    /**
     * Get the distributionByOperatingSystemVersion property: Distribution by Operating System Version.
     * 
     * @return the distributionByOperatingSystemVersion value.
     */
    public List<DistributionByType> distributionByOperatingSystemVersion() {
        return this.distributionByOperatingSystemVersion;
    }

    /**
     * Get the distributionBySqlVersion property: Distribution by Sql Version.
     * 
     * @return the distributionBySqlVersion value.
     */
    public List<DistributionByType> distributionBySqlVersion() {
        return this.distributionBySqlVersion;
    }

    /**
     * Get the distributionBySqlEdition property: Distribution by Sql Edition.
     * 
     * @return the distributionBySqlEdition value.
     */
    public List<DistributionByType> distributionBySqlEdition() {
        return this.distributionBySqlEdition;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (onPremisesIaasCostDetails() != null) {
            onPremisesIaasCostDetails().validate();
        }
        if (onPremisesIaasCostForDecommissioned() != null) {
            onPremisesIaasCostForDecommissioned().validate();
        }
        if (osLicensingDetails() != null) {
            osLicensingDetails().forEach(e -> e.validate());
        }
        if (distributionByOperatingSystem() != null) {
            distributionByOperatingSystem().forEach(e -> e.validate());
        }
        if (onPremisesUtilizationData() != null) {
            onPremisesUtilizationData().validate();
        }
        if (distributionByVirtualization() != null) {
            distributionByVirtualization().forEach(e -> e.validate());
        }
        if (iaasOsSupportStatusDistribution() != null) {
            iaasOsSupportStatusDistribution().validate();
        }
        if (iaasSqlSupportStatusDistribution() != null) {
            iaasSqlSupportStatusDistribution().validate();
        }
        if (osServicePackInsight() != null) {
            osServicePackInsight().validate();
        }
        if (sqlServicePackInsight() != null) {
            sqlServicePackInsight().validate();
        }
        if (distributionByOperatingSystemVersion() != null) {
            distributionByOperatingSystemVersion().forEach(e -> e.validate());
        }
        if (distributionBySqlVersion() != null) {
            distributionBySqlVersion().forEach(e -> e.validate());
        }
        if (distributionBySqlEdition() != null) {
            distributionBySqlEdition().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnPremisesIaasSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnPremisesIaasSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnPremisesIaasSummary.
     */
    public static OnPremisesIaasSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnPremisesIaasSummary deserializedOnPremisesIaasSummary = new OnPremisesIaasSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("servers".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.servers = reader.getNullable(JsonReader::getInt);
                } else if ("cores".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.cores = reader.getNullable(JsonReader::getInt);
                } else if ("memoryGb".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.memoryGb = reader.getNullable(JsonReader::getFloat);
                } else if ("cpuUtilization".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.cpuUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("memoryUtilization".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.memoryUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("storageUtilization".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.storageUtilization = reader.getNullable(JsonReader::getFloat);
                } else if ("onPremisesIaasCostDetails".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.onPremisesIaasCostDetails = CostDetails.fromJson(reader);
                } else if ("onPremisesIaasCostForDecommissioned".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.onPremisesIaasCostForDecommissioned
                        = CostDetails.fromJson(reader);
                } else if ("osLicensingDetails".equals(fieldName)) {
                    List<IaasOsLicensingDetails> osLicensingDetails
                        = reader.readArray(reader1 -> IaasOsLicensingDetails.fromJson(reader1));
                    deserializedOnPremisesIaasSummary.osLicensingDetails = osLicensingDetails;
                } else if ("distributionByOperatingSystem".equals(fieldName)) {
                    List<DistributionByOperatingSystem> distributionByOperatingSystem
                        = reader.readArray(reader1 -> DistributionByOperatingSystem.fromJson(reader1));
                    deserializedOnPremisesIaasSummary.distributionByOperatingSystem = distributionByOperatingSystem;
                } else if ("onPremisesUtilizationData".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.onPremisesUtilizationData = UtilizationData.fromJson(reader);
                } else if ("distributionByVirtualization".equals(fieldName)) {
                    List<DistributionByVirtualization> distributionByVirtualization
                        = reader.readArray(reader1 -> DistributionByVirtualization.fromJson(reader1));
                    deserializedOnPremisesIaasSummary.distributionByVirtualization = distributionByVirtualization;
                } else if ("iaasOsSupportStatusDistribution".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.iaasOsSupportStatusDistribution
                        = SupportStatusDistribution.fromJson(reader);
                } else if ("iaasSqlSupportStatusDistribution".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.iaasSqlSupportStatusDistribution
                        = SupportStatusDistribution.fromJson(reader);
                } else if ("osServicePackInsight".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.osServicePackInsight = ServicePackInsight.fromJson(reader);
                } else if ("sqlServicePackInsight".equals(fieldName)) {
                    deserializedOnPremisesIaasSummary.sqlServicePackInsight = ServicePackInsight.fromJson(reader);
                } else if ("distributionByOperatingSystemVersion".equals(fieldName)) {
                    List<DistributionByType> distributionByOperatingSystemVersion
                        = reader.readArray(reader1 -> DistributionByType.fromJson(reader1));
                    deserializedOnPremisesIaasSummary.distributionByOperatingSystemVersion
                        = distributionByOperatingSystemVersion;
                } else if ("distributionBySqlVersion".equals(fieldName)) {
                    List<DistributionByType> distributionBySqlVersion
                        = reader.readArray(reader1 -> DistributionByType.fromJson(reader1));
                    deserializedOnPremisesIaasSummary.distributionBySqlVersion = distributionBySqlVersion;
                } else if ("distributionBySqlEdition".equals(fieldName)) {
                    List<DistributionByType> distributionBySqlEdition
                        = reader.readArray(reader1 -> DistributionByType.fromJson(reader1));
                    deserializedOnPremisesIaasSummary.distributionBySqlEdition = distributionBySqlEdition;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnPremisesIaasSummary;
        });
    }
}
