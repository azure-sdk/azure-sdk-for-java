// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the Machine Assessment V2 Summary.
 */
@Immutable
public final class AvsAssessmentSummaryPropertiesV2 implements JsonSerializable<AvsAssessmentSummaryPropertiesV2> {
    /*
     * The summary type
     */
    private SummaryType summaryType;

    /*
     * The summary name
     */
    private String summaryName;

    /*
     * The source details list.
     */
    private List<SourceDetails> sources;

    /*
     * The target details list.
     */
    private List<TargetDetails> targets;

    /*
     * The target source mapping.
     */
    private List<TargetSourcePair> targetSourceMapping;

    /*
     * The cost components.
     */
    private List<CostDetailsCommon> costComponents;

    /*
     * The cost components.
     */
    private List<SavingsDetailsCommon> savingsComponents;

    /*
     * Gets or sets the Assessment cloud suitability.
     */
    private CloudSuitability suitability;

    /*
     * Gets or sets the Assessment suitability explanation.
     */
    private AzureAvsSuitabilityExplanation suitabilityExplanation;

    /*
     * Recommended number of nodes.
     */
    private Integer numberOfNodes;

    /*
     * Predicted CPU utilization.
     */
    private Float cpuUtilization;

    /*
     * Predicted RAM utilization.
     */
    private Float ramUtilization;

    /*
     * Predicted storage utilization.
     */
    private Float storageUtilization;

    /*
     * Predicted total CPU cores used.
     */
    private Float totalCpuCores;

    /*
     * Predicted total RAM used in GB.
     */
    private Float totalRamInGB;

    /*
     * Predicted total Storage used in GB.
     */
    private Float totalStorageInGB;

    /*
     * Estimated AVS SKU for Assessment.
     */
    private List<AvsEstimatedNode> avsEstimatedNodes;

    /*
     * Estimated External Storage for Assessment.
     */
    private List<AvsEstimatedExternalStorage> avsEstimatedExternalStorages;

    /*
     * Estimated External Storage for Assessment.
     */
    private List<AvsEstimatedNetwork> avsEstimatedNetworks;

    /*
     * Limiting factor.
     */
    private String limitingFactor;

    /**
     * Creates an instance of AvsAssessmentSummaryPropertiesV2 class.
     */
    public AvsAssessmentSummaryPropertiesV2() {
    }

    /**
     * Get the summaryType property: The summary type.
     * 
     * @return the summaryType value.
     */
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the summaryName property: The summary name.
     * 
     * @return the summaryName value.
     */
    public String summaryName() {
        return this.summaryName;
    }

    /**
     * Get the sources property: The source details list.
     * 
     * @return the sources value.
     */
    public List<SourceDetails> sources() {
        return this.sources;
    }

    /**
     * Get the targets property: The target details list.
     * 
     * @return the targets value.
     */
    public List<TargetDetails> targets() {
        return this.targets;
    }

    /**
     * Get the targetSourceMapping property: The target source mapping.
     * 
     * @return the targetSourceMapping value.
     */
    public List<TargetSourcePair> targetSourceMapping() {
        return this.targetSourceMapping;
    }

    /**
     * Get the costComponents property: The cost components.
     * 
     * @return the costComponents value.
     */
    public List<CostDetailsCommon> costComponents() {
        return this.costComponents;
    }

    /**
     * Get the savingsComponents property: The cost components.
     * 
     * @return the savingsComponents value.
     */
    public List<SavingsDetailsCommon> savingsComponents() {
        return this.savingsComponents;
    }

    /**
     * Get the suitability property: Gets or sets the Assessment cloud suitability.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Get the suitabilityExplanation property: Gets or sets the Assessment suitability explanation.
     * 
     * @return the suitabilityExplanation value.
     */
    public AzureAvsSuitabilityExplanation suitabilityExplanation() {
        return this.suitabilityExplanation;
    }

    /**
     * Get the numberOfNodes property: Recommended number of nodes.
     * 
     * @return the numberOfNodes value.
     */
    public Integer numberOfNodes() {
        return this.numberOfNodes;
    }

    /**
     * Get the cpuUtilization property: Predicted CPU utilization.
     * 
     * @return the cpuUtilization value.
     */
    public Float cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Get the ramUtilization property: Predicted RAM utilization.
     * 
     * @return the ramUtilization value.
     */
    public Float ramUtilization() {
        return this.ramUtilization;
    }

    /**
     * Get the storageUtilization property: Predicted storage utilization.
     * 
     * @return the storageUtilization value.
     */
    public Float storageUtilization() {
        return this.storageUtilization;
    }

    /**
     * Get the totalCpuCores property: Predicted total CPU cores used.
     * 
     * @return the totalCpuCores value.
     */
    public Float totalCpuCores() {
        return this.totalCpuCores;
    }

    /**
     * Get the totalRamInGB property: Predicted total RAM used in GB.
     * 
     * @return the totalRamInGB value.
     */
    public Float totalRamInGB() {
        return this.totalRamInGB;
    }

    /**
     * Get the totalStorageInGB property: Predicted total Storage used in GB.
     * 
     * @return the totalStorageInGB value.
     */
    public Float totalStorageInGB() {
        return this.totalStorageInGB;
    }

    /**
     * Get the avsEstimatedNodes property: Estimated AVS SKU for Assessment.
     * 
     * @return the avsEstimatedNodes value.
     */
    public List<AvsEstimatedNode> avsEstimatedNodes() {
        return this.avsEstimatedNodes;
    }

    /**
     * Get the avsEstimatedExternalStorages property: Estimated External Storage for Assessment.
     * 
     * @return the avsEstimatedExternalStorages value.
     */
    public List<AvsEstimatedExternalStorage> avsEstimatedExternalStorages() {
        return this.avsEstimatedExternalStorages;
    }

    /**
     * Get the avsEstimatedNetworks property: Estimated External Storage for Assessment.
     * 
     * @return the avsEstimatedNetworks value.
     */
    public List<AvsEstimatedNetwork> avsEstimatedNetworks() {
        return this.avsEstimatedNetworks;
    }

    /**
     * Get the limitingFactor property: Limiting factor.
     * 
     * @return the limitingFactor value.
     */
    public String limitingFactor() {
        return this.limitingFactor;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sources() != null) {
            sources().forEach(e -> e.validate());
        }
        if (targets() != null) {
            targets().forEach(e -> e.validate());
        }
        if (targetSourceMapping() != null) {
            targetSourceMapping().forEach(e -> e.validate());
        }
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
        if (savingsComponents() != null) {
            savingsComponents().forEach(e -> e.validate());
        }
        if (avsEstimatedNodes() != null) {
            avsEstimatedNodes().forEach(e -> e.validate());
        }
        if (avsEstimatedExternalStorages() != null) {
            avsEstimatedExternalStorages().forEach(e -> e.validate());
        }
        if (avsEstimatedNetworks() != null) {
            avsEstimatedNetworks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsAssessmentSummaryPropertiesV2 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsAssessmentSummaryPropertiesV2 if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsAssessmentSummaryPropertiesV2.
     */
    public static AvsAssessmentSummaryPropertiesV2 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsAssessmentSummaryPropertiesV2 deserializedAvsAssessmentSummaryPropertiesV2
                = new AvsAssessmentSummaryPropertiesV2();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summaryType".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.summaryType
                        = SummaryType.fromString(reader.getString());
                } else if ("summaryName".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.summaryName = reader.getString();
                } else if ("sources".equals(fieldName)) {
                    List<SourceDetails> sources = reader.readArray(reader1 -> SourceDetails.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.sources = sources;
                } else if ("targets".equals(fieldName)) {
                    List<TargetDetails> targets = reader.readArray(reader1 -> TargetDetails.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.targets = targets;
                } else if ("targetSourceMapping".equals(fieldName)) {
                    List<TargetSourcePair> targetSourceMapping
                        = reader.readArray(reader1 -> TargetSourcePair.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.targetSourceMapping = targetSourceMapping;
                } else if ("costComponents".equals(fieldName)) {
                    List<CostDetailsCommon> costComponents
                        = reader.readArray(reader1 -> CostDetailsCommon.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.costComponents = costComponents;
                } else if ("savingsComponents".equals(fieldName)) {
                    List<SavingsDetailsCommon> savingsComponents
                        = reader.readArray(reader1 -> SavingsDetailsCommon.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.savingsComponents = savingsComponents;
                } else if ("suitability".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.suitability
                        = CloudSuitability.fromString(reader.getString());
                } else if ("suitabilityExplanation".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.suitabilityExplanation
                        = AzureAvsSuitabilityExplanation.fromString(reader.getString());
                } else if ("numberOfNodes".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.numberOfNodes = reader.getNullable(JsonReader::getInt);
                } else if ("cpuUtilization".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.cpuUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("ramUtilization".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.ramUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("storageUtilization".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.storageUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("totalCpuCores".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.totalCpuCores
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("totalRamInGB".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.totalRamInGB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("totalStorageInGB".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.totalStorageInGB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("avsEstimatedNodes".equals(fieldName)) {
                    List<AvsEstimatedNode> avsEstimatedNodes
                        = reader.readArray(reader1 -> AvsEstimatedNode.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.avsEstimatedNodes = avsEstimatedNodes;
                } else if ("avsEstimatedExternalStorages".equals(fieldName)) {
                    List<AvsEstimatedExternalStorage> avsEstimatedExternalStorages
                        = reader.readArray(reader1 -> AvsEstimatedExternalStorage.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.avsEstimatedExternalStorages
                        = avsEstimatedExternalStorages;
                } else if ("avsEstimatedNetworks".equals(fieldName)) {
                    List<AvsEstimatedNetwork> avsEstimatedNetworks
                        = reader.readArray(reader1 -> AvsEstimatedNetwork.fromJson(reader1));
                    deserializedAvsAssessmentSummaryPropertiesV2.avsEstimatedNetworks = avsEstimatedNetworks;
                } else if ("limitingFactor".equals(fieldName)) {
                    deserializedAvsAssessmentSummaryPropertiesV2.limitingFactor = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsAssessmentSummaryPropertiesV2;
        });
    }
}
