// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Web App.
 */
@Immutable
public class WebApp implements JsonSerializable<WebApp> {
    /*
     * Gets discovery arm id.
     */
    private String discoveryArmId;

    /*
     * Gets display name.
     */
    private String displayName;

    /*
     * Gets web server arm id.
     */
    private String webServerArmId;

    /*
     * Gets web server display name.
     */
    private String webServerDisplayName;

    /*
     * Gets machine arm id.
     */
    private String machineArmId;

    /*
     * Gets machine display name.
     */
    private String machineDisplayName;

    /*
     * Gets web app type.
     */
    private WebAppType webAppType;

    /**
     * Creates an instance of WebApp class.
     */
    public WebApp() {
    }

    /**
     * Get the discoveryArmId property: Gets discovery arm id.
     * 
     * @return the discoveryArmId value.
     */
    public String discoveryArmId() {
        return this.discoveryArmId;
    }

    /**
     * Set the discoveryArmId property: Gets discovery arm id.
     * 
     * @param discoveryArmId the discoveryArmId value to set.
     * @return the WebApp object itself.
     */
    WebApp withDiscoveryArmId(String discoveryArmId) {
        this.discoveryArmId = discoveryArmId;
        return this;
    }

    /**
     * Get the displayName property: Gets display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Gets display name.
     * 
     * @param displayName the displayName value to set.
     * @return the WebApp object itself.
     */
    WebApp withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the webServerArmId property: Gets web server arm id.
     * 
     * @return the webServerArmId value.
     */
    public String webServerArmId() {
        return this.webServerArmId;
    }

    /**
     * Set the webServerArmId property: Gets web server arm id.
     * 
     * @param webServerArmId the webServerArmId value to set.
     * @return the WebApp object itself.
     */
    WebApp withWebServerArmId(String webServerArmId) {
        this.webServerArmId = webServerArmId;
        return this;
    }

    /**
     * Get the webServerDisplayName property: Gets web server display name.
     * 
     * @return the webServerDisplayName value.
     */
    public String webServerDisplayName() {
        return this.webServerDisplayName;
    }

    /**
     * Set the webServerDisplayName property: Gets web server display name.
     * 
     * @param webServerDisplayName the webServerDisplayName value to set.
     * @return the WebApp object itself.
     */
    WebApp withWebServerDisplayName(String webServerDisplayName) {
        this.webServerDisplayName = webServerDisplayName;
        return this;
    }

    /**
     * Get the machineArmId property: Gets machine arm id.
     * 
     * @return the machineArmId value.
     */
    public String machineArmId() {
        return this.machineArmId;
    }

    /**
     * Set the machineArmId property: Gets machine arm id.
     * 
     * @param machineArmId the machineArmId value to set.
     * @return the WebApp object itself.
     */
    WebApp withMachineArmId(String machineArmId) {
        this.machineArmId = machineArmId;
        return this;
    }

    /**
     * Get the machineDisplayName property: Gets machine display name.
     * 
     * @return the machineDisplayName value.
     */
    public String machineDisplayName() {
        return this.machineDisplayName;
    }

    /**
     * Set the machineDisplayName property: Gets machine display name.
     * 
     * @param machineDisplayName the machineDisplayName value to set.
     * @return the WebApp object itself.
     */
    WebApp withMachineDisplayName(String machineDisplayName) {
        this.machineDisplayName = machineDisplayName;
        return this;
    }

    /**
     * Get the webAppType property: Gets web app type.
     * 
     * @return the webAppType value.
     */
    public WebAppType webAppType() {
        return this.webAppType;
    }

    /**
     * Set the webAppType property: Gets web app type.
     * 
     * @param webAppType the webAppType value to set.
     * @return the WebApp object itself.
     */
    WebApp withWebAppType(WebAppType webAppType) {
        this.webAppType = webAppType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebApp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebApp if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebApp.
     */
    public static WebApp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebApp deserializedWebApp = new WebApp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("discoveryArmId".equals(fieldName)) {
                    deserializedWebApp.discoveryArmId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedWebApp.displayName = reader.getString();
                } else if ("webServerArmId".equals(fieldName)) {
                    deserializedWebApp.webServerArmId = reader.getString();
                } else if ("webServerDisplayName".equals(fieldName)) {
                    deserializedWebApp.webServerDisplayName = reader.getString();
                } else if ("machineArmId".equals(fieldName)) {
                    deserializedWebApp.machineArmId = reader.getString();
                } else if ("machineDisplayName".equals(fieldName)) {
                    deserializedWebApp.machineDisplayName = reader.getString();
                } else if ("webAppType".equals(fieldName)) {
                    deserializedWebApp.webAppType = WebAppType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebApp;
        });
    }
}
