// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Assessed Web Application Properties.
 */
@Fluent
public final class AssessedWebApplicationProperties implements JsonSerializable<AssessedWebApplicationProperties> {
    /*
     * The workload type
     */
    private MigrateWorkloadType workloadType;

    /*
     * The linkages list.
     */
    private List<Linkages> linkages;

    /*
     * The recommendation list.
     */
    private List<AssessedWebApplicationPropertiesRecommendationsItem> recommendations;

    /*
     * Recommendation Result of assessed webapp.
     */
    private RecommendationResult recommendationResult;

    /*
     * Type of assessed webapp.
     */
    private WebServerType webAppType;

    /**
     * Creates an instance of AssessedWebApplicationProperties class.
     */
    public AssessedWebApplicationProperties() {
    }

    /**
     * Get the workloadType property: The workload type.
     * 
     * @return the workloadType value.
     */
    public MigrateWorkloadType workloadType() {
        return this.workloadType;
    }

    /**
     * Get the linkages property: The linkages list.
     * 
     * @return the linkages value.
     */
    public List<Linkages> linkages() {
        return this.linkages;
    }

    /**
     * Get the recommendations property: The recommendation list.
     * 
     * @return the recommendations value.
     */
    public List<AssessedWebApplicationPropertiesRecommendationsItem> recommendations() {
        return this.recommendations;
    }

    /**
     * Get the recommendationResult property: Recommendation Result of assessed webapp.
     * 
     * @return the recommendationResult value.
     */
    public RecommendationResult recommendationResult() {
        return this.recommendationResult;
    }

    /**
     * Set the recommendationResult property: Recommendation Result of assessed webapp.
     * 
     * @param recommendationResult the recommendationResult value to set.
     * @return the AssessedWebApplicationProperties object itself.
     */
    public AssessedWebApplicationProperties withRecommendationResult(RecommendationResult recommendationResult) {
        this.recommendationResult = recommendationResult;
        return this;
    }

    /**
     * Get the webAppType property: Type of assessed webapp.
     * 
     * @return the webAppType value.
     */
    public WebServerType webAppType() {
        return this.webAppType;
    }

    /**
     * Set the webAppType property: Type of assessed webapp.
     * 
     * @param webAppType the webAppType value to set.
     * @return the AssessedWebApplicationProperties object itself.
     */
    public AssessedWebApplicationProperties withWebAppType(WebServerType webAppType) {
        this.webAppType = webAppType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkages() != null) {
            linkages().forEach(e -> e.validate());
        }
        if (recommendations() != null) {
            recommendations().forEach(e -> e.validate());
        }
        if (recommendationResult() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property recommendationResult in model AssessedWebApplicationProperties"));
        } else {
            recommendationResult().validate();
        }
        if (webAppType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property webAppType in model AssessedWebApplicationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AssessedWebApplicationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recommendationResult", this.recommendationResult);
        jsonWriter.writeStringField("webAppType", this.webAppType == null ? null : this.webAppType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedWebApplicationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedWebApplicationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessedWebApplicationProperties.
     */
    public static AssessedWebApplicationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedWebApplicationProperties deserializedAssessedWebApplicationProperties
                = new AssessedWebApplicationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendationResult".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.recommendationResult
                        = RecommendationResult.fromJson(reader);
                } else if ("webAppType".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.webAppType
                        = WebServerType.fromString(reader.getString());
                } else if ("workloadType".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.workloadType
                        = MigrateWorkloadType.fromString(reader.getString());
                } else if ("linkages".equals(fieldName)) {
                    List<Linkages> linkages = reader.readArray(reader1 -> Linkages.fromJson(reader1));
                    deserializedAssessedWebApplicationProperties.linkages = linkages;
                } else if ("recommendations".equals(fieldName)) {
                    List<AssessedWebApplicationPropertiesRecommendationsItem> recommendations = reader
                        .readArray(reader1 -> AssessedWebApplicationPropertiesRecommendationsItem.fromJson(reader1));
                    deserializedAssessedWebApplicationProperties.recommendations = recommendations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedWebApplicationProperties;
        });
    }
}
