// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ARM model of Assessed Web Application Properties.
 */
@Immutable
public final class AssessedWebApplicationProperties extends AssessedWebApp {
    /*
     * Gets recommendation result.
     */
    private RecommendationResult recommendationResult;

    /*
     * Gets suitability result.
     */
    private SuitabilityResult suitabilityResult;

    /*
     * Gets web app type.
     */
    private WebAppType webAppType;

    /*
     * Gets machine display name.
     */
    private String machineDisplayName;

    /*
     * Gets machine arm id.
     */
    private String machineArmId;

    /*
     * Gets web server display name.
     */
    private String webServerDisplayName;

    /*
     * Gets web server arm id.
     */
    private String webServerArmId;

    /*
     * Gets display name.
     */
    private String displayName;

    /*
     * Gets discovery arm id.
     */
    private String discoveryArmId;

    /**
     * Creates an instance of AssessedWebApplicationProperties class.
     */
    public AssessedWebApplicationProperties() {
    }

    /**
     * Get the recommendationResult property: Gets recommendation result.
     * 
     * @return the recommendationResult value.
     */
    @Override
    public RecommendationResult recommendationResult() {
        return this.recommendationResult;
    }

    /**
     * Get the suitabilityResult property: Gets suitability result.
     * 
     * @return the suitabilityResult value.
     */
    @Override
    public SuitabilityResult suitabilityResult() {
        return this.suitabilityResult;
    }

    /**
     * Get the webAppType property: Gets web app type.
     * 
     * @return the webAppType value.
     */
    @Override
    public WebAppType webAppType() {
        return this.webAppType;
    }

    /**
     * Get the machineDisplayName property: Gets machine display name.
     * 
     * @return the machineDisplayName value.
     */
    @Override
    public String machineDisplayName() {
        return this.machineDisplayName;
    }

    /**
     * Get the machineArmId property: Gets machine arm id.
     * 
     * @return the machineArmId value.
     */
    @Override
    public String machineArmId() {
        return this.machineArmId;
    }

    /**
     * Get the webServerDisplayName property: Gets web server display name.
     * 
     * @return the webServerDisplayName value.
     */
    @Override
    public String webServerDisplayName() {
        return this.webServerDisplayName;
    }

    /**
     * Get the webServerArmId property: Gets web server arm id.
     * 
     * @return the webServerArmId value.
     */
    @Override
    public String webServerArmId() {
        return this.webServerArmId;
    }

    /**
     * Get the displayName property: Gets display name.
     * 
     * @return the displayName value.
     */
    @Override
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the discoveryArmId property: Gets discovery arm id.
     * 
     * @return the discoveryArmId value.
     */
    @Override
    public String discoveryArmId() {
        return this.discoveryArmId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (suitabilityResult() != null) {
            suitabilityResult().validate();
        }
        if (recommendationResult() != null) {
            recommendationResult().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedWebApplicationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedWebApplicationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessedWebApplicationProperties.
     */
    public static AssessedWebApplicationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedWebApplicationProperties deserializedAssessedWebApplicationProperties
                = new AssessedWebApplicationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("discoveryArmId".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.discoveryArmId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.displayName = reader.getString();
                } else if ("webServerArmId".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.webServerArmId = reader.getString();
                } else if ("webServerDisplayName".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.webServerDisplayName = reader.getString();
                } else if ("machineArmId".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.machineArmId = reader.getString();
                } else if ("machineDisplayName".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.machineDisplayName = reader.getString();
                } else if ("webAppType".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.webAppType = WebAppType.fromString(reader.getString());
                } else if ("suitabilityResult".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.suitabilityResult = SuitabilityResult.fromJson(reader);
                } else if ("recommendationResult".equals(fieldName)) {
                    deserializedAssessedWebApplicationProperties.recommendationResult
                        = RecommendationResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedWebApplicationProperties;
        });
    }
}
