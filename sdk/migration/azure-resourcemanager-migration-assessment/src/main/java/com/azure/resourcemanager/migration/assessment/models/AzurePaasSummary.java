// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Shows the PaaS Azure summary.
 */
@Immutable
public final class AzurePaasSummary implements JsonSerializable<AzurePaasSummary> {
    /*
     * Number of Sql instances.
     */
    private Integer totalSqlEntities;

    /*
     * Suitable Sql instances.
     */
    private Integer suitableSqlEntities;

    /*
     * Number of web applications.
     */
    private Integer totalWebApps;

    /*
     * Suitable web applications.
     */
    private Integer suitableWebApps;

    /*
     * Number of cores.
     */
    private Integer cores;

    /*
     * Memory Utilization.
     */
    private Float memory;

    /*
     * Storage Utilization.
     */
    private Float storage;

    /*
     * Shows the estimated cost by target.
     */
    private EstimatedCostByTarget estimatedCostByTarget;

    /*
     * estimated SQL Server licensing cost.
     */
    private Float estimatedSqlServerLicensingCost;

    /*
     * Shows the Azure SQL details.
     */
    private AzureSqlSummary azureSqlSummary;

    /*
     * Shows Azure App Service summary.
     */
    private AzureAppServiceSummary azureAppServiceSummary;

    /*
     * Shows Azure App Service Container summary.
     */
    private AzureAppServiceContainerSummary azureAppServiceContainerSummary;

    /*
     * Shows Azure Kubernetes Service summary.
     */
    private AzureKubernetesServiceSummary azureKubernetesServiceSummary;

    /*
     * The on premises PaaS cost.
     */
    private CostDetails totalAzurePaasCost;

    /**
     * Creates an instance of AzurePaasSummary class.
     */
    public AzurePaasSummary() {
    }

    /**
     * Get the totalSqlEntities property: Number of Sql instances.
     * 
     * @return the totalSqlEntities value.
     */
    public Integer totalSqlEntities() {
        return this.totalSqlEntities;
    }

    /**
     * Get the suitableSqlEntities property: Suitable Sql instances.
     * 
     * @return the suitableSqlEntities value.
     */
    public Integer suitableSqlEntities() {
        return this.suitableSqlEntities;
    }

    /**
     * Get the totalWebApps property: Number of web applications.
     * 
     * @return the totalWebApps value.
     */
    public Integer totalWebApps() {
        return this.totalWebApps;
    }

    /**
     * Get the suitableWebApps property: Suitable web applications.
     * 
     * @return the suitableWebApps value.
     */
    public Integer suitableWebApps() {
        return this.suitableWebApps;
    }

    /**
     * Get the cores property: Number of cores.
     * 
     * @return the cores value.
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Get the memory property: Memory Utilization.
     * 
     * @return the memory value.
     */
    public Float memory() {
        return this.memory;
    }

    /**
     * Get the storage property: Storage Utilization.
     * 
     * @return the storage value.
     */
    public Float storage() {
        return this.storage;
    }

    /**
     * Get the estimatedCostByTarget property: Shows the estimated cost by target.
     * 
     * @return the estimatedCostByTarget value.
     */
    public EstimatedCostByTarget estimatedCostByTarget() {
        return this.estimatedCostByTarget;
    }

    /**
     * Get the estimatedSqlServerLicensingCost property: estimated SQL Server licensing cost.
     * 
     * @return the estimatedSqlServerLicensingCost value.
     */
    public Float estimatedSqlServerLicensingCost() {
        return this.estimatedSqlServerLicensingCost;
    }

    /**
     * Get the azureSqlSummary property: Shows the Azure SQL details.
     * 
     * @return the azureSqlSummary value.
     */
    public AzureSqlSummary azureSqlSummary() {
        return this.azureSqlSummary;
    }

    /**
     * Get the azureAppServiceSummary property: Shows Azure App Service summary.
     * 
     * @return the azureAppServiceSummary value.
     */
    public AzureAppServiceSummary azureAppServiceSummary() {
        return this.azureAppServiceSummary;
    }

    /**
     * Get the azureAppServiceContainerSummary property: Shows Azure App Service Container summary.
     * 
     * @return the azureAppServiceContainerSummary value.
     */
    public AzureAppServiceContainerSummary azureAppServiceContainerSummary() {
        return this.azureAppServiceContainerSummary;
    }

    /**
     * Get the azureKubernetesServiceSummary property: Shows Azure Kubernetes Service summary.
     * 
     * @return the azureKubernetesServiceSummary value.
     */
    public AzureKubernetesServiceSummary azureKubernetesServiceSummary() {
        return this.azureKubernetesServiceSummary;
    }

    /**
     * Get the totalAzurePaasCost property: The on premises PaaS cost.
     * 
     * @return the totalAzurePaasCost value.
     */
    public CostDetails totalAzurePaasCost() {
        return this.totalAzurePaasCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (estimatedCostByTarget() != null) {
            estimatedCostByTarget().validate();
        }
        if (azureSqlSummary() != null) {
            azureSqlSummary().validate();
        }
        if (azureAppServiceSummary() != null) {
            azureAppServiceSummary().validate();
        }
        if (azureAppServiceContainerSummary() != null) {
            azureAppServiceContainerSummary().validate();
        }
        if (azureKubernetesServiceSummary() != null) {
            azureKubernetesServiceSummary().validate();
        }
        if (totalAzurePaasCost() != null) {
            totalAzurePaasCost().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzurePaasSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzurePaasSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzurePaasSummary.
     */
    public static AzurePaasSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzurePaasSummary deserializedAzurePaasSummary = new AzurePaasSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalSqlEntities".equals(fieldName)) {
                    deserializedAzurePaasSummary.totalSqlEntities = reader.getNullable(JsonReader::getInt);
                } else if ("suitableSqlEntities".equals(fieldName)) {
                    deserializedAzurePaasSummary.suitableSqlEntities = reader.getNullable(JsonReader::getInt);
                } else if ("totalWebApps".equals(fieldName)) {
                    deserializedAzurePaasSummary.totalWebApps = reader.getNullable(JsonReader::getInt);
                } else if ("suitableWebApps".equals(fieldName)) {
                    deserializedAzurePaasSummary.suitableWebApps = reader.getNullable(JsonReader::getInt);
                } else if ("cores".equals(fieldName)) {
                    deserializedAzurePaasSummary.cores = reader.getNullable(JsonReader::getInt);
                } else if ("memory".equals(fieldName)) {
                    deserializedAzurePaasSummary.memory = reader.getNullable(JsonReader::getFloat);
                } else if ("storage".equals(fieldName)) {
                    deserializedAzurePaasSummary.storage = reader.getNullable(JsonReader::getFloat);
                } else if ("estimatedCostByTarget".equals(fieldName)) {
                    deserializedAzurePaasSummary.estimatedCostByTarget = EstimatedCostByTarget.fromJson(reader);
                } else if ("estimatedSqlServerLicensingCost".equals(fieldName)) {
                    deserializedAzurePaasSummary.estimatedSqlServerLicensingCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("azureSqlSummary".equals(fieldName)) {
                    deserializedAzurePaasSummary.azureSqlSummary = AzureSqlSummary.fromJson(reader);
                } else if ("azureAppServiceSummary".equals(fieldName)) {
                    deserializedAzurePaasSummary.azureAppServiceSummary = AzureAppServiceSummary.fromJson(reader);
                } else if ("azureAppServiceContainerSummary".equals(fieldName)) {
                    deserializedAzurePaasSummary.azureAppServiceContainerSummary
                        = AzureAppServiceContainerSummary.fromJson(reader);
                } else if ("azureKubernetesServiceSummary".equals(fieldName)) {
                    deserializedAzurePaasSummary.azureKubernetesServiceSummary
                        = AzureKubernetesServiceSummary.fromJson(reader);
                } else if ("totalAzurePaasCost".equals(fieldName)) {
                    deserializedAzurePaasSummary.totalAzurePaasCost = CostDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzurePaasSummary;
        });
    }
}
