// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base data model of Assessment Settings.
 */
@Fluent
public class AssessmentSettings implements JsonSerializable<AssessmentSettings> {
    /*
     * Gets or sets azure location.
     */
    private String azureLocation;

    /*
     * Gets or sets environment type.
     */
    private AzureEnvironmentType environmentType;

    /*
     * Gets or sets licensing program.
     */
    private LicensingProgram licensingProgram;

    /*
     * Gets or sets currency.
     */
    private AzureCurrency currency;

    /*
     * Gets or sets discount percentage.
     */
    private Float discountPercentage;

    /*
     * Gets or sets sizing criteria.
     */
    private AssessmentSizingCriterion sizingCriteria;

    /*
     * Gets or sets performance data settings.
     */
    private PerfDataSettings performanceData;

    /*
     * Gets or sets scaling factor.
     */
    private Float scalingFactor;

    /**
     * Creates an instance of AssessmentSettings class.
     */
    public AssessmentSettings() {
    }

    /**
     * Get the azureLocation property: Gets or sets azure location.
     * 
     * @return the azureLocation value.
     */
    public String azureLocation() {
        return this.azureLocation;
    }

    /**
     * Set the azureLocation property: Gets or sets azure location.
     * 
     * @param azureLocation the azureLocation value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withAzureLocation(String azureLocation) {
        this.azureLocation = azureLocation;
        return this;
    }

    /**
     * Get the environmentType property: Gets or sets environment type.
     * 
     * @return the environmentType value.
     */
    public AzureEnvironmentType environmentType() {
        return this.environmentType;
    }

    /**
     * Set the environmentType property: Gets or sets environment type.
     * 
     * @param environmentType the environmentType value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withEnvironmentType(AzureEnvironmentType environmentType) {
        this.environmentType = environmentType;
        return this;
    }

    /**
     * Get the licensingProgram property: Gets or sets licensing program.
     * 
     * @return the licensingProgram value.
     */
    public LicensingProgram licensingProgram() {
        return this.licensingProgram;
    }

    /**
     * Set the licensingProgram property: Gets or sets licensing program.
     * 
     * @param licensingProgram the licensingProgram value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withLicensingProgram(LicensingProgram licensingProgram) {
        this.licensingProgram = licensingProgram;
        return this;
    }

    /**
     * Get the currency property: Gets or sets currency.
     * 
     * @return the currency value.
     */
    public AzureCurrency currency() {
        return this.currency;
    }

    /**
     * Set the currency property: Gets or sets currency.
     * 
     * @param currency the currency value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withCurrency(AzureCurrency currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get the discountPercentage property: Gets or sets discount percentage.
     * 
     * @return the discountPercentage value.
     */
    public Float discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Set the discountPercentage property: Gets or sets discount percentage.
     * 
     * @param discountPercentage the discountPercentage value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withDiscountPercentage(Float discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Get the sizingCriteria property: Gets or sets sizing criteria.
     * 
     * @return the sizingCriteria value.
     */
    public AssessmentSizingCriterion sizingCriteria() {
        return this.sizingCriteria;
    }

    /**
     * Set the sizingCriteria property: Gets or sets sizing criteria.
     * 
     * @param sizingCriteria the sizingCriteria value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withSizingCriteria(AssessmentSizingCriterion sizingCriteria) {
        this.sizingCriteria = sizingCriteria;
        return this;
    }

    /**
     * Get the performanceData property: Gets or sets performance data settings.
     * 
     * @return the performanceData value.
     */
    public PerfDataSettings performanceData() {
        return this.performanceData;
    }

    /**
     * Set the performanceData property: Gets or sets performance data settings.
     * 
     * @param performanceData the performanceData value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withPerformanceData(PerfDataSettings performanceData) {
        this.performanceData = performanceData;
        return this;
    }

    /**
     * Get the scalingFactor property: Gets or sets scaling factor.
     * 
     * @return the scalingFactor value.
     */
    public Float scalingFactor() {
        return this.scalingFactor;
    }

    /**
     * Set the scalingFactor property: Gets or sets scaling factor.
     * 
     * @param scalingFactor the scalingFactor value to set.
     * @return the AssessmentSettings object itself.
     */
    public AssessmentSettings withScalingFactor(Float scalingFactor) {
        this.scalingFactor = scalingFactor;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureLocation in model AssessmentSettings"));
        }
        if (environmentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property environmentType in model AssessmentSettings"));
        }
        if (licensingProgram() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property licensingProgram in model AssessmentSettings"));
        }
        if (currency() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property currency in model AssessmentSettings"));
        }
        if (sizingCriteria() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sizingCriteria in model AssessmentSettings"));
        }
        if (performanceData() != null) {
            performanceData().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AssessmentSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureLocation", this.azureLocation);
        jsonWriter.writeStringField("environmentType",
            this.environmentType == null ? null : this.environmentType.toString());
        jsonWriter.writeStringField("licensingProgram",
            this.licensingProgram == null ? null : this.licensingProgram.toString());
        jsonWriter.writeStringField("currency", this.currency == null ? null : this.currency.toString());
        jsonWriter.writeStringField("sizingCriteria",
            this.sizingCriteria == null ? null : this.sizingCriteria.toString());
        jsonWriter.writeNumberField("discountPercentage", this.discountPercentage);
        jsonWriter.writeJsonField("performanceData", this.performanceData);
        jsonWriter.writeNumberField("scalingFactor", this.scalingFactor);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessmentSettings.
     */
    public static AssessmentSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentSettings deserializedAssessmentSettings = new AssessmentSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureLocation".equals(fieldName)) {
                    deserializedAssessmentSettings.azureLocation = reader.getString();
                } else if ("environmentType".equals(fieldName)) {
                    deserializedAssessmentSettings.environmentType
                        = AzureEnvironmentType.fromString(reader.getString());
                } else if ("licensingProgram".equals(fieldName)) {
                    deserializedAssessmentSettings.licensingProgram = LicensingProgram.fromString(reader.getString());
                } else if ("currency".equals(fieldName)) {
                    deserializedAssessmentSettings.currency = AzureCurrency.fromString(reader.getString());
                } else if ("sizingCriteria".equals(fieldName)) {
                    deserializedAssessmentSettings.sizingCriteria
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else if ("discountPercentage".equals(fieldName)) {
                    deserializedAssessmentSettings.discountPercentage = reader.getNullable(JsonReader::getFloat);
                } else if ("performanceData".equals(fieldName)) {
                    deserializedAssessmentSettings.performanceData = PerfDataSettings.fromJson(reader);
                } else if ("scalingFactor".equals(fieldName)) {
                    deserializedAssessmentSettings.scalingFactor = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentSettings;
        });
    }
}
