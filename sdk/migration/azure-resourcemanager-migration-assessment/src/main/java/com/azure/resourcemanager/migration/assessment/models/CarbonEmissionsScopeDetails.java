// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of carbon emissions scope.
 */
@Immutable
public final class CarbonEmissionsScopeDetails implements JsonSerializable<CarbonEmissionsScopeDetails> {
    /*
     * The compute emissions in metric tons of CO2 equivalent (MTCO2e).
     */
    private float compute;

    /*
     * The storage emissions in metric tons of CO2 equivalent (MTCO2e).
     */
    private float storage;

    /**
     * Creates an instance of CarbonEmissionsScopeDetails class.
     */
    public CarbonEmissionsScopeDetails() {
    }

    /**
     * Get the compute property: The compute emissions in metric tons of CO2 equivalent (MTCO2e).
     * 
     * @return the compute value.
     */
    public float compute() {
        return this.compute;
    }

    /**
     * Get the storage property: The storage emissions in metric tons of CO2 equivalent (MTCO2e).
     * 
     * @return the storage value.
     */
    public float storage() {
        return this.storage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CarbonEmissionsScopeDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CarbonEmissionsScopeDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CarbonEmissionsScopeDetails.
     */
    public static CarbonEmissionsScopeDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CarbonEmissionsScopeDetails deserializedCarbonEmissionsScopeDetails = new CarbonEmissionsScopeDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("compute".equals(fieldName)) {
                    deserializedCarbonEmissionsScopeDetails.compute = reader.getFloat();
                } else if ("storage".equals(fieldName)) {
                    deserializedCarbonEmissionsScopeDetails.storage = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCarbonEmissionsScopeDetails;
        });
    }
}
