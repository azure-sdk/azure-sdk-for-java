// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A class that represents the outbound edges from a given node.
 */
@Fluent
public final class AksAssessmentOptionsOutboundEdgeGroup
    implements JsonSerializable<AksAssessmentOptionsOutboundEdgeGroup> {
    /*
     * Gets or sets the Azure VM Category.
     */
    private List<AzureVmCategory> categories;

    /*
     * Gets or sets the Consolidation Type.
     */
    private List<ConsolidationType> consolidations;

    /*
     * Gets or sets the Pricing Tier.
     */
    private List<PricingTier> tiers;

    /*
     * Gets or sets the Azure Locations.
     */
    private List<AzureLocation> targetLocations;

    /*
     * Gets or sets the Azure Currency.
     */
    private List<AzureCurrency> currencies;

    /*
     * Gets or sets the Assessment Savings Options.
     */
    private List<SavingsOptions> savingsOptions;

    /*
     * Gets or sets the Licensing Program.
     */
    private List<LicensingProgram> licensingProgram;

    /**
     * Creates an instance of AksAssessmentOptionsOutboundEdgeGroup class.
     */
    public AksAssessmentOptionsOutboundEdgeGroup() {
    }

    /**
     * Get the categories property: Gets or sets the Azure VM Category.
     * 
     * @return the categories value.
     */
    public List<AzureVmCategory> categories() {
        return this.categories;
    }

    /**
     * Set the categories property: Gets or sets the Azure VM Category.
     * 
     * @param categories the categories value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withCategories(List<AzureVmCategory> categories) {
        this.categories = categories;
        return this;
    }

    /**
     * Get the consolidations property: Gets or sets the Consolidation Type.
     * 
     * @return the consolidations value.
     */
    public List<ConsolidationType> consolidations() {
        return this.consolidations;
    }

    /**
     * Set the consolidations property: Gets or sets the Consolidation Type.
     * 
     * @param consolidations the consolidations value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withConsolidations(List<ConsolidationType> consolidations) {
        this.consolidations = consolidations;
        return this;
    }

    /**
     * Get the tiers property: Gets or sets the Pricing Tier.
     * 
     * @return the tiers value.
     */
    public List<PricingTier> tiers() {
        return this.tiers;
    }

    /**
     * Set the tiers property: Gets or sets the Pricing Tier.
     * 
     * @param tiers the tiers value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withTiers(List<PricingTier> tiers) {
        this.tiers = tiers;
        return this;
    }

    /**
     * Get the targetLocations property: Gets or sets the Azure Locations.
     * 
     * @return the targetLocations value.
     */
    public List<AzureLocation> targetLocations() {
        return this.targetLocations;
    }

    /**
     * Set the targetLocations property: Gets or sets the Azure Locations.
     * 
     * @param targetLocations the targetLocations value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withTargetLocations(List<AzureLocation> targetLocations) {
        this.targetLocations = targetLocations;
        return this;
    }

    /**
     * Get the currencies property: Gets or sets the Azure Currency.
     * 
     * @return the currencies value.
     */
    public List<AzureCurrency> currencies() {
        return this.currencies;
    }

    /**
     * Set the currencies property: Gets or sets the Azure Currency.
     * 
     * @param currencies the currencies value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withCurrencies(List<AzureCurrency> currencies) {
        this.currencies = currencies;
        return this;
    }

    /**
     * Get the savingsOptions property: Gets or sets the Assessment Savings Options.
     * 
     * @return the savingsOptions value.
     */
    public List<SavingsOptions> savingsOptions() {
        return this.savingsOptions;
    }

    /**
     * Set the savingsOptions property: Gets or sets the Assessment Savings Options.
     * 
     * @param savingsOptions the savingsOptions value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withSavingsOptions(List<SavingsOptions> savingsOptions) {
        this.savingsOptions = savingsOptions;
        return this;
    }

    /**
     * Get the licensingProgram property: Gets or sets the Licensing Program.
     * 
     * @return the licensingProgram value.
     */
    public List<LicensingProgram> licensingProgram() {
        return this.licensingProgram;
    }

    /**
     * Set the licensingProgram property: Gets or sets the Licensing Program.
     * 
     * @param licensingProgram the licensingProgram value to set.
     * @return the AksAssessmentOptionsOutboundEdgeGroup object itself.
     */
    public AksAssessmentOptionsOutboundEdgeGroup withLicensingProgram(List<LicensingProgram> licensingProgram) {
        this.licensingProgram = licensingProgram;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (categories() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property categories in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
        if (consolidations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property consolidations in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
        if (tiers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tiers in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
        if (targetLocations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetLocations in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
        if (currencies() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property currencies in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
        if (savingsOptions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property savingsOptions in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
        if (licensingProgram() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property licensingProgram in model AksAssessmentOptionsOutboundEdgeGroup"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AksAssessmentOptionsOutboundEdgeGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("categories", this.categories,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("consolidations", this.consolidations,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("tiers", this.tiers,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("targetLocations", this.targetLocations,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("currencies", this.currencies,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("savingsOptions", this.savingsOptions,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("licensingProgram", this.licensingProgram,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksAssessmentOptionsOutboundEdgeGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksAssessmentOptionsOutboundEdgeGroup if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksAssessmentOptionsOutboundEdgeGroup.
     */
    public static AksAssessmentOptionsOutboundEdgeGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksAssessmentOptionsOutboundEdgeGroup deserializedAksAssessmentOptionsOutboundEdgeGroup
                = new AksAssessmentOptionsOutboundEdgeGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("categories".equals(fieldName)) {
                    List<AzureVmCategory> categories
                        = reader.readArray(reader1 -> AzureVmCategory.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.categories = categories;
                } else if ("consolidations".equals(fieldName)) {
                    List<ConsolidationType> consolidations
                        = reader.readArray(reader1 -> ConsolidationType.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.consolidations = consolidations;
                } else if ("tiers".equals(fieldName)) {
                    List<PricingTier> tiers = reader.readArray(reader1 -> PricingTier.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.tiers = tiers;
                } else if ("targetLocations".equals(fieldName)) {
                    List<AzureLocation> targetLocations
                        = reader.readArray(reader1 -> AzureLocation.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.targetLocations = targetLocations;
                } else if ("currencies".equals(fieldName)) {
                    List<AzureCurrency> currencies
                        = reader.readArray(reader1 -> AzureCurrency.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.currencies = currencies;
                } else if ("savingsOptions".equals(fieldName)) {
                    List<SavingsOptions> savingsOptions
                        = reader.readArray(reader1 -> SavingsOptions.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.savingsOptions = savingsOptions;
                } else if ("licensingProgram".equals(fieldName)) {
                    List<LicensingProgram> licensingProgram
                        = reader.readArray(reader1 -> LicensingProgram.fromString(reader1.getString()));
                    deserializedAksAssessmentOptionsOutboundEdgeGroup.licensingProgram = licensingProgram;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksAssessmentOptionsOutboundEdgeGroup;
        });
    }
}
