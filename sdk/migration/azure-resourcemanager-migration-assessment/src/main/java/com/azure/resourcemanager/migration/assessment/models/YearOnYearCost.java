// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Year on Year cost.
 */
@Fluent
public final class YearOnYearCost implements JsonSerializable<YearOnYearCost> {
    /*
     * Year value.
     */
    private Year year;

    /*
     * Cost for the specified year.
     */
    private Float cost;

    /**
     * Creates an instance of YearOnYearCost class.
     */
    public YearOnYearCost() {
    }

    /**
     * Get the year property: Year value.
     * 
     * @return the year value.
     */
    public Year year() {
        return this.year;
    }

    /**
     * Set the year property: Year value.
     * 
     * @param year the year value to set.
     * @return the YearOnYearCost object itself.
     */
    public YearOnYearCost withYear(Year year) {
        this.year = year;
        return this;
    }

    /**
     * Get the cost property: Cost for the specified year.
     * 
     * @return the cost value.
     */
    public Float cost() {
        return this.cost;
    }

    /**
     * Set the cost property: Cost for the specified year.
     * 
     * @param cost the cost value to set.
     * @return the YearOnYearCost object itself.
     */
    public YearOnYearCost withCost(Float cost) {
        this.cost = cost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (year() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property year in model YearOnYearCost"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(YearOnYearCost.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("year", this.year == null ? null : this.year.toString());
        jsonWriter.writeNumberField("cost", this.cost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of YearOnYearCost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of YearOnYearCost if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the YearOnYearCost.
     */
    public static YearOnYearCost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            YearOnYearCost deserializedYearOnYearCost = new YearOnYearCost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("year".equals(fieldName)) {
                    deserializedYearOnYearCost.year = Year.fromString(reader.getString());
                } else if ("cost".equals(fieldName)) {
                    deserializedYearOnYearCost.cost = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedYearOnYearCost;
        });
    }
}
