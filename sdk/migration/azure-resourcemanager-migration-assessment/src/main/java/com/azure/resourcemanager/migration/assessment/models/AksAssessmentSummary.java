// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Data model of AKS Assessment Summary.
 */
@Immutable
public final class AksAssessmentSummary implements JsonSerializable<AksAssessmentSummary> {
    /*
     * Gets SKU summary.
     */
    private Map<String, SummaryDetails> skuSummary;

    /*
     * Gets web app summary.
     */
    private Map<String, SummaryDetails> webAppSummary;

    /*
     * Gets web server summary.
     */
    private Map<String, Integer> webServerSummary;

    /*
     * Gets the number of web apps.
     */
    private int webAppCount;

    /*
     * Gets the number of web servers.
     */
    private int webServerCount;

    /*
     * Gets the number of machines.
     */
    private int machineCount;

    /*
     * Gets the total monthly cost.
     */
    private float totalMonthlyCost;

    /**
     * Creates an instance of AksAssessmentSummary class.
     */
    public AksAssessmentSummary() {
    }

    /**
     * Get the skuSummary property: Gets SKU summary.
     * 
     * @return the skuSummary value.
     */
    public Map<String, SummaryDetails> skuSummary() {
        return this.skuSummary;
    }

    /**
     * Get the webAppSummary property: Gets web app summary.
     * 
     * @return the webAppSummary value.
     */
    public Map<String, SummaryDetails> webAppSummary() {
        return this.webAppSummary;
    }

    /**
     * Get the webServerSummary property: Gets web server summary.
     * 
     * @return the webServerSummary value.
     */
    public Map<String, Integer> webServerSummary() {
        return this.webServerSummary;
    }

    /**
     * Get the webAppCount property: Gets the number of web apps.
     * 
     * @return the webAppCount value.
     */
    public int webAppCount() {
        return this.webAppCount;
    }

    /**
     * Get the webServerCount property: Gets the number of web servers.
     * 
     * @return the webServerCount value.
     */
    public int webServerCount() {
        return this.webServerCount;
    }

    /**
     * Get the machineCount property: Gets the number of machines.
     * 
     * @return the machineCount value.
     */
    public int machineCount() {
        return this.machineCount;
    }

    /**
     * Get the totalMonthlyCost property: Gets the total monthly cost.
     * 
     * @return the totalMonthlyCost value.
     */
    public float totalMonthlyCost() {
        return this.totalMonthlyCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (skuSummary() != null) {
            skuSummary().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (webAppSummary() != null) {
            webAppSummary().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksAssessmentSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksAssessmentSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksAssessmentSummary.
     */
    public static AksAssessmentSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksAssessmentSummary deserializedAksAssessmentSummary = new AksAssessmentSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("skuSummary".equals(fieldName)) {
                    Map<String, SummaryDetails> skuSummary
                        = reader.readMap(reader1 -> SummaryDetails.fromJson(reader1));
                    deserializedAksAssessmentSummary.skuSummary = skuSummary;
                } else if ("webAppSummary".equals(fieldName)) {
                    Map<String, SummaryDetails> webAppSummary
                        = reader.readMap(reader1 -> SummaryDetails.fromJson(reader1));
                    deserializedAksAssessmentSummary.webAppSummary = webAppSummary;
                } else if ("webServerSummary".equals(fieldName)) {
                    Map<String, Integer> webServerSummary = reader.readMap(reader1 -> reader1.getInt());
                    deserializedAksAssessmentSummary.webServerSummary = webServerSummary;
                } else if ("webAppCount".equals(fieldName)) {
                    deserializedAksAssessmentSummary.webAppCount = reader.getInt();
                } else if ("webServerCount".equals(fieldName)) {
                    deserializedAksAssessmentSummary.webServerCount = reader.getInt();
                } else if ("machineCount".equals(fieldName)) {
                    deserializedAksAssessmentSummary.machineCount = reader.getInt();
                } else if ("totalMonthlyCost".equals(fieldName)) {
                    deserializedAksAssessmentSummary.totalMonthlyCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksAssessmentSummary;
        });
    }
}
