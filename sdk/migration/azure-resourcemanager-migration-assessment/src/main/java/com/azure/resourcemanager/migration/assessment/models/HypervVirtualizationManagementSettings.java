// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * HyperV Virtualization Management Settings.
 */
@Fluent
public final class HypervVirtualizationManagementSettings
    implements JsonSerializable<HypervVirtualizationManagementSettings> {
    /*
     * Number of physical cores per licence.
     */
    private int numberOfPhysicalCoresPerLicense;

    /*
     * Software Assurance Cost.
     */
    private float softwareAssuranceCost;

    /*
     * Licence and support list.
     */
    private List<HypervLicense> licenseAndSupportList;

    /**
     * Creates an instance of HypervVirtualizationManagementSettings class.
     */
    public HypervVirtualizationManagementSettings() {
    }

    /**
     * Get the numberOfPhysicalCoresPerLicense property: Number of physical cores per licence.
     * 
     * @return the numberOfPhysicalCoresPerLicense value.
     */
    public int numberOfPhysicalCoresPerLicense() {
        return this.numberOfPhysicalCoresPerLicense;
    }

    /**
     * Set the numberOfPhysicalCoresPerLicense property: Number of physical cores per licence.
     * 
     * @param numberOfPhysicalCoresPerLicense the numberOfPhysicalCoresPerLicense value to set.
     * @return the HypervVirtualizationManagementSettings object itself.
     */
    public HypervVirtualizationManagementSettings
        withNumberOfPhysicalCoresPerLicense(int numberOfPhysicalCoresPerLicense) {
        this.numberOfPhysicalCoresPerLicense = numberOfPhysicalCoresPerLicense;
        return this;
    }

    /**
     * Get the softwareAssuranceCost property: Software Assurance Cost.
     * 
     * @return the softwareAssuranceCost value.
     */
    public float softwareAssuranceCost() {
        return this.softwareAssuranceCost;
    }

    /**
     * Set the softwareAssuranceCost property: Software Assurance Cost.
     * 
     * @param softwareAssuranceCost the softwareAssuranceCost value to set.
     * @return the HypervVirtualizationManagementSettings object itself.
     */
    public HypervVirtualizationManagementSettings withSoftwareAssuranceCost(float softwareAssuranceCost) {
        this.softwareAssuranceCost = softwareAssuranceCost;
        return this;
    }

    /**
     * Get the licenseAndSupportList property: Licence and support list.
     * 
     * @return the licenseAndSupportList value.
     */
    public List<HypervLicense> licenseAndSupportList() {
        return this.licenseAndSupportList;
    }

    /**
     * Set the licenseAndSupportList property: Licence and support list.
     * 
     * @param licenseAndSupportList the licenseAndSupportList value to set.
     * @return the HypervVirtualizationManagementSettings object itself.
     */
    public HypervVirtualizationManagementSettings withLicenseAndSupportList(List<HypervLicense> licenseAndSupportList) {
        this.licenseAndSupportList = licenseAndSupportList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (licenseAndSupportList() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property licenseAndSupportList in model HypervVirtualizationManagementSettings"));
        } else {
            licenseAndSupportList().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HypervVirtualizationManagementSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("numberOfPhysicalCoresPerLicense", this.numberOfPhysicalCoresPerLicense);
        jsonWriter.writeFloatField("softwareAssuranceCost", this.softwareAssuranceCost);
        jsonWriter.writeArrayField("licenseAndSupportList", this.licenseAndSupportList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HypervVirtualizationManagementSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HypervVirtualizationManagementSettings if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HypervVirtualizationManagementSettings.
     */
    public static HypervVirtualizationManagementSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HypervVirtualizationManagementSettings deserializedHypervVirtualizationManagementSettings
                = new HypervVirtualizationManagementSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfPhysicalCoresPerLicense".equals(fieldName)) {
                    deserializedHypervVirtualizationManagementSettings.numberOfPhysicalCoresPerLicense
                        = reader.getInt();
                } else if ("softwareAssuranceCost".equals(fieldName)) {
                    deserializedHypervVirtualizationManagementSettings.softwareAssuranceCost = reader.getFloat();
                } else if ("licenseAndSupportList".equals(fieldName)) {
                    List<HypervLicense> licenseAndSupportList
                        = reader.readArray(reader1 -> HypervLicense.fromJson(reader1));
                    deserializedHypervVirtualizationManagementSettings.licenseAndSupportList = licenseAndSupportList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHypervVirtualizationManagementSettings;
        });
    }
}
