// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Target specific result.
 */
@Fluent
public final class TargetSpecificResult implements JsonSerializable<TargetSpecificResult> {
    /*
     * Gets or sets the assessment result.
     */
    private AssessmentResult assessmentResult;

    /*
     * Gets or sets the web app migration issues.
     */
    private List<WebAppMigrationIssues> migrationIssues;

    /**
     * Creates an instance of TargetSpecificResult class.
     */
    public TargetSpecificResult() {
    }

    /**
     * Get the assessmentResult property: Gets or sets the assessment result.
     * 
     * @return the assessmentResult value.
     */
    public AssessmentResult assessmentResult() {
        return this.assessmentResult;
    }

    /**
     * Set the assessmentResult property: Gets or sets the assessment result.
     * 
     * @param assessmentResult the assessmentResult value to set.
     * @return the TargetSpecificResult object itself.
     */
    public TargetSpecificResult withAssessmentResult(AssessmentResult assessmentResult) {
        this.assessmentResult = assessmentResult;
        return this;
    }

    /**
     * Get the migrationIssues property: Gets or sets the web app migration issues.
     * 
     * @return the migrationIssues value.
     */
    public List<WebAppMigrationIssues> migrationIssues() {
        return this.migrationIssues;
    }

    /**
     * Set the migrationIssues property: Gets or sets the web app migration issues.
     * 
     * @param migrationIssues the migrationIssues value to set.
     * @return the TargetSpecificResult object itself.
     */
    public TargetSpecificResult withMigrationIssues(List<WebAppMigrationIssues> migrationIssues) {
        this.migrationIssues = migrationIssues;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (assessmentResult() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property assessmentResult in model TargetSpecificResult"));
        } else {
            assessmentResult().validate();
        }
        if (migrationIssues() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property migrationIssues in model TargetSpecificResult"));
        } else {
            migrationIssues().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetSpecificResult.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("assessmentResult", this.assessmentResult);
        jsonWriter.writeArrayField("migrationIssues", this.migrationIssues,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetSpecificResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetSpecificResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetSpecificResult.
     */
    public static TargetSpecificResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetSpecificResult deserializedTargetSpecificResult = new TargetSpecificResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessmentResult".equals(fieldName)) {
                    deserializedTargetSpecificResult.assessmentResult = AssessmentResult.fromJson(reader);
                } else if ("migrationIssues".equals(fieldName)) {
                    List<WebAppMigrationIssues> migrationIssues
                        = reader.readArray(reader1 -> WebAppMigrationIssues.fromJson(reader1));
                    deserializedTargetSpecificResult.migrationIssues = migrationIssues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetSpecificResult;
        });
    }
}
