// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * WebApp assessment summary resource properties.
 */
@Immutable
public final class WebAppSummaryProperties implements JsonSerializable<WebAppSummaryProperties> {
    /*
     * The summary type
     */
    private SummaryType summaryType;

    /*
     * The summary name
     */
    private String summaryName;

    /*
     * The source details list.
     */
    private List<SourceDetails> sources;

    /*
     * The target details list.
     */
    private List<TargetDetails> targets;

    /*
     * The target source mapping.
     */
    private List<TargetSourcePair> targetSourceMapping;

    /*
     * The cost components.
     */
    private List<CostDetailsCommon> costComponents;

    /*
     * The cost components.
     */
    private List<SavingsDetailsCommon> savingsComponents;

    /*
     * Light summary of the discovered entity.
     */
    private DiscoveredEntityLightSummary discoveredEntityLightSummary;

    /**
     * Creates an instance of WebAppSummaryProperties class.
     */
    public WebAppSummaryProperties() {
    }

    /**
     * Get the summaryType property: The summary type.
     * 
     * @return the summaryType value.
     */
    public SummaryType summaryType() {
        return this.summaryType;
    }

    /**
     * Get the summaryName property: The summary name.
     * 
     * @return the summaryName value.
     */
    public String summaryName() {
        return this.summaryName;
    }

    /**
     * Get the sources property: The source details list.
     * 
     * @return the sources value.
     */
    public List<SourceDetails> sources() {
        return this.sources;
    }

    /**
     * Get the targets property: The target details list.
     * 
     * @return the targets value.
     */
    public List<TargetDetails> targets() {
        return this.targets;
    }

    /**
     * Get the targetSourceMapping property: The target source mapping.
     * 
     * @return the targetSourceMapping value.
     */
    public List<TargetSourcePair> targetSourceMapping() {
        return this.targetSourceMapping;
    }

    /**
     * Get the costComponents property: The cost components.
     * 
     * @return the costComponents value.
     */
    public List<CostDetailsCommon> costComponents() {
        return this.costComponents;
    }

    /**
     * Get the savingsComponents property: The cost components.
     * 
     * @return the savingsComponents value.
     */
    public List<SavingsDetailsCommon> savingsComponents() {
        return this.savingsComponents;
    }

    /**
     * Get the discoveredEntityLightSummary property: Light summary of the discovered entity.
     * 
     * @return the discoveredEntityLightSummary value.
     */
    public DiscoveredEntityLightSummary discoveredEntityLightSummary() {
        return this.discoveredEntityLightSummary;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sources() != null) {
            sources().forEach(e -> e.validate());
        }
        if (targets() != null) {
            targets().forEach(e -> e.validate());
        }
        if (targetSourceMapping() != null) {
            targetSourceMapping().forEach(e -> e.validate());
        }
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
        if (savingsComponents() != null) {
            savingsComponents().forEach(e -> e.validate());
        }
        if (discoveredEntityLightSummary() != null) {
            discoveredEntityLightSummary().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebAppSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebAppSummaryProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebAppSummaryProperties.
     */
    public static WebAppSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebAppSummaryProperties deserializedWebAppSummaryProperties = new WebAppSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("summaryType".equals(fieldName)) {
                    deserializedWebAppSummaryProperties.summaryType = SummaryType.fromString(reader.getString());
                } else if ("summaryName".equals(fieldName)) {
                    deserializedWebAppSummaryProperties.summaryName = reader.getString();
                } else if ("sources".equals(fieldName)) {
                    List<SourceDetails> sources = reader.readArray(reader1 -> SourceDetails.fromJson(reader1));
                    deserializedWebAppSummaryProperties.sources = sources;
                } else if ("targets".equals(fieldName)) {
                    List<TargetDetails> targets = reader.readArray(reader1 -> TargetDetails.fromJson(reader1));
                    deserializedWebAppSummaryProperties.targets = targets;
                } else if ("targetSourceMapping".equals(fieldName)) {
                    List<TargetSourcePair> targetSourceMapping
                        = reader.readArray(reader1 -> TargetSourcePair.fromJson(reader1));
                    deserializedWebAppSummaryProperties.targetSourceMapping = targetSourceMapping;
                } else if ("costComponents".equals(fieldName)) {
                    List<CostDetailsCommon> costComponents
                        = reader.readArray(reader1 -> CostDetailsCommon.fromJson(reader1));
                    deserializedWebAppSummaryProperties.costComponents = costComponents;
                } else if ("savingsComponents".equals(fieldName)) {
                    List<SavingsDetailsCommon> savingsComponents
                        = reader.readArray(reader1 -> SavingsDetailsCommon.fromJson(reader1));
                    deserializedWebAppSummaryProperties.savingsComponents = savingsComponents;
                } else if ("discoveredEntityLightSummary".equals(fieldName)) {
                    deserializedWebAppSummaryProperties.discoveredEntityLightSummary
                        = DiscoveredEntityLightSummary.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebAppSummaryProperties;
        });
    }
}
