// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ARM model of AKS Cluster Properties.
 */
@Immutable
public final class AksClusterProperties implements JsonSerializable<AksClusterProperties> {
    /*
     * Gets list of node pools.
     */
    private List<NodePool> nodePools;

    /*
     * Gets region.
     */
    private String region;

    /*
     * Gets user node pool count.
     */
    private int userNodePoolCount;

    /*
     * Gets user node count.
     */
    private int userNodeCount;

    /*
     * Gets system node pool count.
     */
    private int systemNodePoolCount;

    /*
     * Gets system node count.
     */
    private int systemNodeCount;

    /*
     * Gets pod count.
     */
    private int podCount;

    /*
     * Gets monthly cost.
     */
    private float monthlyCost;

    /**
     * Creates an instance of AksClusterProperties class.
     */
    public AksClusterProperties() {
    }

    /**
     * Get the nodePools property: Gets list of node pools.
     * 
     * @return the nodePools value.
     */
    public List<NodePool> nodePools() {
        return this.nodePools;
    }

    /**
     * Get the region property: Gets region.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Get the userNodePoolCount property: Gets user node pool count.
     * 
     * @return the userNodePoolCount value.
     */
    public int userNodePoolCount() {
        return this.userNodePoolCount;
    }

    /**
     * Get the userNodeCount property: Gets user node count.
     * 
     * @return the userNodeCount value.
     */
    public int userNodeCount() {
        return this.userNodeCount;
    }

    /**
     * Get the systemNodePoolCount property: Gets system node pool count.
     * 
     * @return the systemNodePoolCount value.
     */
    public int systemNodePoolCount() {
        return this.systemNodePoolCount;
    }

    /**
     * Get the systemNodeCount property: Gets system node count.
     * 
     * @return the systemNodeCount value.
     */
    public int systemNodeCount() {
        return this.systemNodeCount;
    }

    /**
     * Get the podCount property: Gets pod count.
     * 
     * @return the podCount value.
     */
    public int podCount() {
        return this.podCount;
    }

    /**
     * Get the monthlyCost property: Gets monthly cost.
     * 
     * @return the monthlyCost value.
     */
    public float monthlyCost() {
        return this.monthlyCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodePools() != null) {
            nodePools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksClusterProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksClusterProperties.
     */
    public static AksClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksClusterProperties deserializedAksClusterProperties = new AksClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodePools".equals(fieldName)) {
                    List<NodePool> nodePools = reader.readArray(reader1 -> NodePool.fromJson(reader1));
                    deserializedAksClusterProperties.nodePools = nodePools;
                } else if ("region".equals(fieldName)) {
                    deserializedAksClusterProperties.region = reader.getString();
                } else if ("userNodePoolCount".equals(fieldName)) {
                    deserializedAksClusterProperties.userNodePoolCount = reader.getInt();
                } else if ("userNodeCount".equals(fieldName)) {
                    deserializedAksClusterProperties.userNodeCount = reader.getInt();
                } else if ("systemNodePoolCount".equals(fieldName)) {
                    deserializedAksClusterProperties.systemNodePoolCount = reader.getInt();
                } else if ("systemNodeCount".equals(fieldName)) {
                    deserializedAksClusterProperties.systemNodeCount = reader.getInt();
                } else if ("podCount".equals(fieldName)) {
                    deserializedAksClusterProperties.podCount = reader.getInt();
                } else if ("monthlyCost".equals(fieldName)) {
                    deserializedAksClusterProperties.monthlyCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksClusterProperties;
        });
    }
}
