// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Shows the discovered servers by virtualization platform.
 */
@Immutable
public final class ServersDiscovered implements JsonSerializable<ServersDiscovered> {
    /*
     * Number of servers on VMWare.
     */
    private Integer vmWare;

    /*
     * Number of servers on HyperV.
     */
    private Integer hyperV;

    /*
     * Number of physical servers.
     */
    private Integer physical;

    /*
     * Number of servers whose virtualization is unknown.
     */
    private Integer notApplicable;

    /**
     * Creates an instance of ServersDiscovered class.
     */
    public ServersDiscovered() {
    }

    /**
     * Get the vmWare property: Number of servers on VMWare.
     * 
     * @return the vmWare value.
     */
    public Integer vmWare() {
        return this.vmWare;
    }

    /**
     * Get the hyperV property: Number of servers on HyperV.
     * 
     * @return the hyperV value.
     */
    public Integer hyperV() {
        return this.hyperV;
    }

    /**
     * Get the physical property: Number of physical servers.
     * 
     * @return the physical value.
     */
    public Integer physical() {
        return this.physical;
    }

    /**
     * Get the notApplicable property: Number of servers whose virtualization is unknown.
     * 
     * @return the notApplicable value.
     */
    public Integer notApplicable() {
        return this.notApplicable;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServersDiscovered from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServersDiscovered if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServersDiscovered.
     */
    public static ServersDiscovered fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServersDiscovered deserializedServersDiscovered = new ServersDiscovered();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmWare".equals(fieldName)) {
                    deserializedServersDiscovered.vmWare = reader.getNullable(JsonReader::getInt);
                } else if ("hyperV".equals(fieldName)) {
                    deserializedServersDiscovered.hyperV = reader.getNullable(JsonReader::getInt);
                } else if ("physical".equals(fieldName)) {
                    deserializedServersDiscovered.physical = reader.getNullable(JsonReader::getInt);
                } else if ("notApplicable".equals(fieldName)) {
                    deserializedServersDiscovered.notApplicable = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServersDiscovered;
        });
    }
}
