// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Management Cost Details.
 */
@Immutable
public final class ManagementCostDetails implements JsonSerializable<ManagementCostDetails> {
    /*
     * Management Cost.
     */
    private Float managementCost;

    /*
     * Management Cost Components.
     */
    private List<ManagementCostComponent> managementCostComponents;

    /**
     * Creates an instance of ManagementCostDetails class.
     */
    public ManagementCostDetails() {
    }

    /**
     * Get the managementCost property: Management Cost.
     * 
     * @return the managementCost value.
     */
    public Float managementCost() {
        return this.managementCost;
    }

    /**
     * Get the managementCostComponents property: Management Cost Components.
     * 
     * @return the managementCostComponents value.
     */
    public List<ManagementCostComponent> managementCostComponents() {
        return this.managementCostComponents;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managementCostComponents() != null) {
            managementCostComponents().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagementCostDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagementCostDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagementCostDetails.
     */
    public static ManagementCostDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagementCostDetails deserializedManagementCostDetails = new ManagementCostDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managementCost".equals(fieldName)) {
                    deserializedManagementCostDetails.managementCost = reader.getNullable(JsonReader::getFloat);
                } else if ("managementCostComponents".equals(fieldName)) {
                    List<ManagementCostComponent> managementCostComponents
                        = reader.readArray(reader1 -> ManagementCostComponent.fromJson(reader1));
                    deserializedManagementCostDetails.managementCostComponents = managementCostComponents;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagementCostDetails;
        });
    }
}
