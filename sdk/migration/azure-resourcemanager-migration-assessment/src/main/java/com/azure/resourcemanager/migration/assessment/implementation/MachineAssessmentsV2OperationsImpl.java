// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migration.assessment.fluent.MachineAssessmentsV2OperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.DownloadUrlInner;
import com.azure.resourcemanager.migration.assessment.fluent.models.MachineAssessmentV2Inner;
import com.azure.resourcemanager.migration.assessment.models.DownloadUrl;
import com.azure.resourcemanager.migration.assessment.models.MachineAssessmentV2;
import com.azure.resourcemanager.migration.assessment.models.MachineAssessmentsV2Operations;

public final class MachineAssessmentsV2OperationsImpl implements MachineAssessmentsV2Operations {
    private static final ClientLogger LOGGER = new ClientLogger(MachineAssessmentsV2OperationsImpl.class);

    private final MachineAssessmentsV2OperationsClient innerClient;

    private final com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager;

    public MachineAssessmentsV2OperationsImpl(MachineAssessmentsV2OperationsClient innerClient,
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<MachineAssessmentV2> listByParent(String resourceGroupName, String projectName) {
        PagedIterable<MachineAssessmentV2Inner> inner
            = this.serviceClient().listByParent(resourceGroupName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MachineAssessmentV2Impl(inner1, this.manager()));
    }

    public PagedIterable<MachineAssessmentV2> listByParent(String resourceGroupName, String projectName,
        Context context) {
        PagedIterable<MachineAssessmentV2Inner> inner
            = this.serviceClient().listByParent(resourceGroupName, projectName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MachineAssessmentV2Impl(inner1, this.manager()));
    }

    public Response<MachineAssessmentV2> getWithResponse(String resourceGroupName, String projectName,
        String assessmentName, Context context) {
        Response<MachineAssessmentV2Inner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, projectName, assessmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MachineAssessmentV2Impl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MachineAssessmentV2 get(String resourceGroupName, String projectName, String assessmentName) {
        MachineAssessmentV2Inner inner = this.serviceClient().get(resourceGroupName, projectName, assessmentName);
        if (inner != null) {
            return new MachineAssessmentV2Impl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String projectName, String assessmentName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, projectName, assessmentName, context);
    }

    public void delete(String resourceGroupName, String projectName, String assessmentName) {
        this.serviceClient().delete(resourceGroupName, projectName, assessmentName);
    }

    public DownloadUrl downloadUrl(String resourceGroupName, String projectName, String assessmentName, Object body) {
        DownloadUrlInner inner = this.serviceClient().downloadUrl(resourceGroupName, projectName, assessmentName, body);
        if (inner != null) {
            return new DownloadUrlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DownloadUrl downloadUrl(String resourceGroupName, String projectName, String assessmentName, Object body,
        Context context) {
        DownloadUrlInner inner
            = this.serviceClient().downloadUrl(resourceGroupName, projectName, assessmentName, body, context);
        if (inner != null) {
            return new DownloadUrlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MachineAssessmentV2 getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, assessmentName, Context.NONE).getValue();
    }

    public Response<MachineAssessmentV2> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, assessmentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, projectName, assessmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String assessmentName = ResourceManagerUtils.getValueFromIdByName(id, "assessments");
        if (assessmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessments'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, projectName, assessmentName, context);
    }

    private MachineAssessmentsV2OperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager() {
        return this.serviceManager;
    }

    public MachineAssessmentV2Impl define(String name) {
        return new MachineAssessmentV2Impl(name, this.manager());
    }
}
