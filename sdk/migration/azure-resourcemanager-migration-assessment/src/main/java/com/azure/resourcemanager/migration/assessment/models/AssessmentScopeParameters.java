// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Assessment Scope Parameters.
 */
@Fluent
public final class AssessmentScopeParameters implements JsonSerializable<AssessmentScopeParameters> {
    /*
     * Gets or sets the server group id.
     */
    private String serverGroupId;

    /**
     * Creates an instance of AssessmentScopeParameters class.
     */
    public AssessmentScopeParameters() {
    }

    /**
     * Get the serverGroupId property: Gets or sets the server group id.
     * 
     * @return the serverGroupId value.
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }

    /**
     * Set the serverGroupId property: Gets or sets the server group id.
     * 
     * @param serverGroupId the serverGroupId value to set.
     * @return the AssessmentScopeParameters object itself.
     */
    public AssessmentScopeParameters withServerGroupId(String serverGroupId) {
        this.serverGroupId = serverGroupId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverGroupId", this.serverGroupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentScopeParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentScopeParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentScopeParameters.
     */
    public static AssessmentScopeParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentScopeParameters deserializedAssessmentScopeParameters = new AssessmentScopeParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverGroupId".equals(fieldName)) {
                    deserializedAssessmentScopeParameters.serverGroupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentScopeParameters;
        });
    }
}
