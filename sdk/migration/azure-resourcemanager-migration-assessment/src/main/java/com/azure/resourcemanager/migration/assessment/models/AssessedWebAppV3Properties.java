// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of an assessed web app.
 */
@Fluent
public final class AssessedWebAppV3Properties implements JsonSerializable<AssessedWebAppV3Properties> {
    /*
     * The workload type
     */
    private MigrateWorkloadType workloadType;

    /*
     * The linkages list.
     */
    private List<Linkages> linkages;

    /*
     * The recommendation list.
     */
    private List<AssessedWebAppV3PropertiesRecommendationsItem> recommendations;

    /*
     * Timestamp of the assessment creation.
     */
    private String createdTimestamp;

    /*
     * Timestamp of the assessment last updated.
     */
    private String updatedTimestamp;

    /*
     * Type of assessed webapp.
     */
    private WebServerType webAppType;

    /**
     * Creates an instance of AssessedWebAppV3Properties class.
     */
    public AssessedWebAppV3Properties() {
    }

    /**
     * Get the workloadType property: The workload type.
     * 
     * @return the workloadType value.
     */
    public MigrateWorkloadType workloadType() {
        return this.workloadType;
    }

    /**
     * Get the linkages property: The linkages list.
     * 
     * @return the linkages value.
     */
    public List<Linkages> linkages() {
        return this.linkages;
    }

    /**
     * Get the recommendations property: The recommendation list.
     * 
     * @return the recommendations value.
     */
    public List<AssessedWebAppV3PropertiesRecommendationsItem> recommendations() {
        return this.recommendations;
    }

    /**
     * Get the createdTimestamp property: Timestamp of the assessment creation.
     * 
     * @return the createdTimestamp value.
     */
    public String createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Set the createdTimestamp property: Timestamp of the assessment creation.
     * 
     * @param createdTimestamp the createdTimestamp value to set.
     * @return the AssessedWebAppV3Properties object itself.
     */
    public AssessedWebAppV3Properties withCreatedTimestamp(String createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    /**
     * Get the updatedTimestamp property: Timestamp of the assessment last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public String updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Set the updatedTimestamp property: Timestamp of the assessment last updated.
     * 
     * @param updatedTimestamp the updatedTimestamp value to set.
     * @return the AssessedWebAppV3Properties object itself.
     */
    public AssessedWebAppV3Properties withUpdatedTimestamp(String updatedTimestamp) {
        this.updatedTimestamp = updatedTimestamp;
        return this;
    }

    /**
     * Get the webAppType property: Type of assessed webapp.
     * 
     * @return the webAppType value.
     */
    public WebServerType webAppType() {
        return this.webAppType;
    }

    /**
     * Set the webAppType property: Type of assessed webapp.
     * 
     * @param webAppType the webAppType value to set.
     * @return the AssessedWebAppV3Properties object itself.
     */
    public AssessedWebAppV3Properties withWebAppType(WebServerType webAppType) {
        this.webAppType = webAppType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkages() != null) {
            linkages().forEach(e -> e.validate());
        }
        if (recommendations() != null) {
            recommendations().forEach(e -> e.validate());
        }
        if (createdTimestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property createdTimestamp in model AssessedWebAppV3Properties"));
        }
        if (updatedTimestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property updatedTimestamp in model AssessedWebAppV3Properties"));
        }
        if (webAppType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property webAppType in model AssessedWebAppV3Properties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AssessedWebAppV3Properties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdTimestamp", this.createdTimestamp);
        jsonWriter.writeStringField("updatedTimestamp", this.updatedTimestamp);
        jsonWriter.writeStringField("webAppType", this.webAppType == null ? null : this.webAppType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedWebAppV3Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedWebAppV3Properties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessedWebAppV3Properties.
     */
    public static AssessedWebAppV3Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedWebAppV3Properties deserializedAssessedWebAppV3Properties = new AssessedWebAppV3Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessedWebAppV3Properties.createdTimestamp = reader.getString();
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessedWebAppV3Properties.updatedTimestamp = reader.getString();
                } else if ("webAppType".equals(fieldName)) {
                    deserializedAssessedWebAppV3Properties.webAppType = WebServerType.fromString(reader.getString());
                } else if ("workloadType".equals(fieldName)) {
                    deserializedAssessedWebAppV3Properties.workloadType
                        = MigrateWorkloadType.fromString(reader.getString());
                } else if ("linkages".equals(fieldName)) {
                    List<Linkages> linkages = reader.readArray(reader1 -> Linkages.fromJson(reader1));
                    deserializedAssessedWebAppV3Properties.linkages = linkages;
                } else if ("recommendations".equals(fieldName)) {
                    List<AssessedWebAppV3PropertiesRecommendationsItem> recommendations
                        = reader.readArray(reader1 -> AssessedWebAppV3PropertiesRecommendationsItem.fromJson(reader1));
                    deserializedAssessedWebAppV3Properties.recommendations = recommendations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedWebAppV3Properties;
        });
    }
}
