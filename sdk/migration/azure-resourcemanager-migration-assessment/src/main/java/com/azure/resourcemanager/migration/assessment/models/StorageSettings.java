// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Storage settings.
 */
@Fluent
public final class StorageSettings implements JsonSerializable<StorageSettings> {
    /*
     * Cost per gigabyte per year.
     */
    private float costPerGbPerYear;

    /*
     * Maintenance cost percentage.
     */
    private float maintainanceCostPercentageToAcquisitionCost;

    /**
     * Creates an instance of StorageSettings class.
     */
    public StorageSettings() {
    }

    /**
     * Get the costPerGbPerYear property: Cost per gigabyte per year.
     * 
     * @return the costPerGbPerYear value.
     */
    public float costPerGbPerYear() {
        return this.costPerGbPerYear;
    }

    /**
     * Set the costPerGbPerYear property: Cost per gigabyte per year.
     * 
     * @param costPerGbPerYear the costPerGbPerYear value to set.
     * @return the StorageSettings object itself.
     */
    public StorageSettings withCostPerGbPerYear(float costPerGbPerYear) {
        this.costPerGbPerYear = costPerGbPerYear;
        return this;
    }

    /**
     * Get the maintainanceCostPercentageToAcquisitionCost property: Maintenance cost percentage.
     * 
     * @return the maintainanceCostPercentageToAcquisitionCost value.
     */
    public float maintainanceCostPercentageToAcquisitionCost() {
        return this.maintainanceCostPercentageToAcquisitionCost;
    }

    /**
     * Set the maintainanceCostPercentageToAcquisitionCost property: Maintenance cost percentage.
     * 
     * @param maintainanceCostPercentageToAcquisitionCost the maintainanceCostPercentageToAcquisitionCost value to set.
     * @return the StorageSettings object itself.
     */
    public StorageSettings
        withMaintainanceCostPercentageToAcquisitionCost(float maintainanceCostPercentageToAcquisitionCost) {
        this.maintainanceCostPercentageToAcquisitionCost = maintainanceCostPercentageToAcquisitionCost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("costPerGbPerYear", this.costPerGbPerYear);
        jsonWriter.writeFloatField("maintainanceCostPercentageToAcquisitionCost",
            this.maintainanceCostPercentageToAcquisitionCost);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageSettings.
     */
    public static StorageSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageSettings deserializedStorageSettings = new StorageSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("costPerGbPerYear".equals(fieldName)) {
                    deserializedStorageSettings.costPerGbPerYear = reader.getFloat();
                } else if ("maintainanceCostPercentageToAcquisitionCost".equals(fieldName)) {
                    deserializedStorageSettings.maintainanceCostPercentageToAcquisitionCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageSettings;
        });
    }
}
