// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of carbon emissions.
 */
@Immutable
public final class CarbonEmissionsDetails implements JsonSerializable<CarbonEmissionsDetails> {
    /*
     * Scope 1 emissions in metric tons of CO2 equivalent (MTCO2e).
     */
    private CarbonEmissionsScopeDetails scope1;

    /*
     * Scope 2 emissions in metric tons of CO2 equivalent (MTCO2e).
     */
    private CarbonEmissionsScopeDetails scope2;

    /*
     * Scope 3 emissions in metric tons of CO2 equivalent (MTCO2e).
     */
    private CarbonEmissionsScopeDetails scope3;

    /**
     * Creates an instance of CarbonEmissionsDetails class.
     */
    public CarbonEmissionsDetails() {
    }

    /**
     * Get the scope1 property: Scope 1 emissions in metric tons of CO2 equivalent (MTCO2e).
     * 
     * @return the scope1 value.
     */
    public CarbonEmissionsScopeDetails scope1() {
        return this.scope1;
    }

    /**
     * Get the scope2 property: Scope 2 emissions in metric tons of CO2 equivalent (MTCO2e).
     * 
     * @return the scope2 value.
     */
    public CarbonEmissionsScopeDetails scope2() {
        return this.scope2;
    }

    /**
     * Get the scope3 property: Scope 3 emissions in metric tons of CO2 equivalent (MTCO2e).
     * 
     * @return the scope3 value.
     */
    public CarbonEmissionsScopeDetails scope3() {
        return this.scope3;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scope1() != null) {
            scope1().validate();
        }
        if (scope2() != null) {
            scope2().validate();
        }
        if (scope3() != null) {
            scope3().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CarbonEmissionsDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CarbonEmissionsDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CarbonEmissionsDetails.
     */
    public static CarbonEmissionsDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CarbonEmissionsDetails deserializedCarbonEmissionsDetails = new CarbonEmissionsDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope1".equals(fieldName)) {
                    deserializedCarbonEmissionsDetails.scope1 = CarbonEmissionsScopeDetails.fromJson(reader);
                } else if ("scope2".equals(fieldName)) {
                    deserializedCarbonEmissionsDetails.scope2 = CarbonEmissionsScopeDetails.fromJson(reader);
                } else if ("scope3".equals(fieldName)) {
                    deserializedCarbonEmissionsDetails.scope3 = CarbonEmissionsScopeDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCarbonEmissionsDetails;
        });
    }
}
