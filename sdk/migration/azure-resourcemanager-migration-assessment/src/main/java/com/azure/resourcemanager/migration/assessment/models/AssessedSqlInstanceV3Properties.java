// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Assessed SQL instance properties web model.
 */
@Immutable
public final class AssessedSqlInstanceV3Properties implements JsonSerializable<AssessedSqlInstanceV3Properties> {
    /*
     * The workload type
     */
    private MigrateWorkloadType workloadType;

    /*
     * The linkages list.
     */
    private List<Linkages> linkages;

    /*
     * The recommendation list.
     */
    private List<SqlEntityRecommendations> recommendations;

    /*
     * The sql instance extended details.
     */
    private SqlInstanceExtendedDetails extendedDetails;

    /*
     * When was assessed SQL instance first created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * When was assessed SQL instance last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /**
     * Creates an instance of AssessedSqlInstanceV3Properties class.
     */
    public AssessedSqlInstanceV3Properties() {
    }

    /**
     * Get the workloadType property: The workload type.
     * 
     * @return the workloadType value.
     */
    public MigrateWorkloadType workloadType() {
        return this.workloadType;
    }

    /**
     * Get the linkages property: The linkages list.
     * 
     * @return the linkages value.
     */
    public List<Linkages> linkages() {
        return this.linkages;
    }

    /**
     * Get the recommendations property: The recommendation list.
     * 
     * @return the recommendations value.
     */
    public List<SqlEntityRecommendations> recommendations() {
        return this.recommendations;
    }

    /**
     * Get the extendedDetails property: The sql instance extended details.
     * 
     * @return the extendedDetails value.
     */
    public SqlInstanceExtendedDetails extendedDetails() {
        return this.extendedDetails;
    }

    /**
     * Get the createdTimestamp property: When was assessed SQL instance first created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: When was assessed SQL instance last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linkages() != null) {
            linkages().forEach(e -> e.validate());
        }
        if (recommendations() != null) {
            recommendations().forEach(e -> e.validate());
        }
        if (extendedDetails() != null) {
            extendedDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlInstanceV3Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlInstanceV3Properties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlInstanceV3Properties.
     */
    public static AssessedSqlInstanceV3Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlInstanceV3Properties deserializedAssessedSqlInstanceV3Properties
                = new AssessedSqlInstanceV3Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workloadType".equals(fieldName)) {
                    deserializedAssessedSqlInstanceV3Properties.workloadType
                        = MigrateWorkloadType.fromString(reader.getString());
                } else if ("linkages".equals(fieldName)) {
                    List<Linkages> linkages = reader.readArray(reader1 -> Linkages.fromJson(reader1));
                    deserializedAssessedSqlInstanceV3Properties.linkages = linkages;
                } else if ("recommendations".equals(fieldName)) {
                    List<SqlEntityRecommendations> recommendations
                        = reader.readArray(reader1 -> SqlEntityRecommendations.fromJson(reader1));
                    deserializedAssessedSqlInstanceV3Properties.recommendations = recommendations;
                } else if ("extendedDetails".equals(fieldName)) {
                    deserializedAssessedSqlInstanceV3Properties.extendedDetails
                        = SqlInstanceExtendedDetails.fromJson(reader);
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessedSqlInstanceV3Properties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessedSqlInstanceV3Properties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlInstanceV3Properties;
        });
    }
}
