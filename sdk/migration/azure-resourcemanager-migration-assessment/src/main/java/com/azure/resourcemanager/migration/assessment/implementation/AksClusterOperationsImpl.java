// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migration.assessment.fluent.AksClusterOperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.AksClusterInner;
import com.azure.resourcemanager.migration.assessment.models.AksCluster;
import com.azure.resourcemanager.migration.assessment.models.AksClusterOperations;

public final class AksClusterOperationsImpl implements AksClusterOperations {
    private static final ClientLogger LOGGER = new ClientLogger(AksClusterOperationsImpl.class);

    private final AksClusterOperationsClient innerClient;

    private final com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager;

    public AksClusterOperationsImpl(AksClusterOperationsClient innerClient,
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AksCluster> listByParent(String resourceGroupName, String projectName, String assessmentName) {
        PagedIterable<AksClusterInner> inner
            = this.serviceClient().listByParent(resourceGroupName, projectName, assessmentName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AksClusterImpl(inner1, this.manager()));
    }

    public PagedIterable<AksCluster> listByParent(String resourceGroupName, String projectName, String assessmentName,
        Context context) {
        PagedIterable<AksClusterInner> inner
            = this.serviceClient().listByParent(resourceGroupName, projectName, assessmentName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AksClusterImpl(inner1, this.manager()));
    }

    public Response<AksCluster> getWithResponse(String resourceGroupName, String projectName, String assessmentName,
        String clusterName, Context context) {
        Response<AksClusterInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, projectName, assessmentName, clusterName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AksClusterImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AksCluster get(String resourceGroupName, String projectName, String assessmentName, String clusterName) {
        AksClusterInner inner = this.serviceClient().get(resourceGroupName, projectName, assessmentName, clusterName);
        if (inner != null) {
            return new AksClusterImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private AksClusterOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager() {
        return this.serviceManager;
    }
}
