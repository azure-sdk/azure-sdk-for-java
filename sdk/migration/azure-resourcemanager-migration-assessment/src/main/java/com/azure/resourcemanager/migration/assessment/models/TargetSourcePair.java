// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Target source pair.
 */
@Immutable
public final class TargetSourcePair implements JsonSerializable<TargetSourcePair> {
    /*
     * The source name.
     */
    private AssessmentSource sourceRef;

    /*
     * The target name.
     */
    private AzureTarget targetRef;

    /*
     * The count of a type of source.
     */
    private Integer sourceCount;

    /*
     * The count of a type of target.
     */
    private Integer targetCount;

    /*
     * The migration details.
     */
    private MigrationDetails migrationDetails;

    /*
     * The management details.
     */
    private List<ManagementDetails> managementDetails;

    /*
     * The cost details.
     */
    private List<CostDetailsCommon> costDetails;

    /*
     * The savings details.
     */
    private List<SavingsDetailsCommon> savingsDetails;

    /*
     * The confidence score.
     */
    private Double confidenceScore;

    /**
     * Creates an instance of TargetSourcePair class.
     */
    public TargetSourcePair() {
    }

    /**
     * Get the sourceRef property: The source name.
     * 
     * @return the sourceRef value.
     */
    public AssessmentSource sourceRef() {
        return this.sourceRef;
    }

    /**
     * Get the targetRef property: The target name.
     * 
     * @return the targetRef value.
     */
    public AzureTarget targetRef() {
        return this.targetRef;
    }

    /**
     * Get the sourceCount property: The count of a type of source.
     * 
     * @return the sourceCount value.
     */
    public Integer sourceCount() {
        return this.sourceCount;
    }

    /**
     * Get the targetCount property: The count of a type of target.
     * 
     * @return the targetCount value.
     */
    public Integer targetCount() {
        return this.targetCount;
    }

    /**
     * Get the migrationDetails property: The migration details.
     * 
     * @return the migrationDetails value.
     */
    public MigrationDetails migrationDetails() {
        return this.migrationDetails;
    }

    /**
     * Get the managementDetails property: The management details.
     * 
     * @return the managementDetails value.
     */
    public List<ManagementDetails> managementDetails() {
        return this.managementDetails;
    }

    /**
     * Get the costDetails property: The cost details.
     * 
     * @return the costDetails value.
     */
    public List<CostDetailsCommon> costDetails() {
        return this.costDetails;
    }

    /**
     * Get the savingsDetails property: The savings details.
     * 
     * @return the savingsDetails value.
     */
    public List<SavingsDetailsCommon> savingsDetails() {
        return this.savingsDetails;
    }

    /**
     * Get the confidenceScore property: The confidence score.
     * 
     * @return the confidenceScore value.
     */
    public Double confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationDetails() != null) {
            migrationDetails().validate();
        }
        if (managementDetails() != null) {
            managementDetails().forEach(e -> e.validate());
        }
        if (costDetails() != null) {
            costDetails().forEach(e -> e.validate());
        }
        if (savingsDetails() != null) {
            savingsDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetSourcePair from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetSourcePair if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetSourcePair.
     */
    public static TargetSourcePair fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetSourcePair deserializedTargetSourcePair = new TargetSourcePair();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceRef".equals(fieldName)) {
                    deserializedTargetSourcePair.sourceRef = AssessmentSource.fromString(reader.getString());
                } else if ("targetRef".equals(fieldName)) {
                    deserializedTargetSourcePair.targetRef = AzureTarget.fromString(reader.getString());
                } else if ("sourceCount".equals(fieldName)) {
                    deserializedTargetSourcePair.sourceCount = reader.getNullable(JsonReader::getInt);
                } else if ("targetCount".equals(fieldName)) {
                    deserializedTargetSourcePair.targetCount = reader.getNullable(JsonReader::getInt);
                } else if ("migrationDetails".equals(fieldName)) {
                    deserializedTargetSourcePair.migrationDetails = MigrationDetails.fromJson(reader);
                } else if ("managementDetails".equals(fieldName)) {
                    List<ManagementDetails> managementDetails
                        = reader.readArray(reader1 -> ManagementDetails.fromJson(reader1));
                    deserializedTargetSourcePair.managementDetails = managementDetails;
                } else if ("costDetails".equals(fieldName)) {
                    List<CostDetailsCommon> costDetails
                        = reader.readArray(reader1 -> CostDetailsCommon.fromJson(reader1));
                    deserializedTargetSourcePair.costDetails = costDetails;
                } else if ("savingsDetails".equals(fieldName)) {
                    List<SavingsDetailsCommon> savingsDetails
                        = reader.readArray(reader1 -> SavingsDetailsCommon.fromJson(reader1));
                    deserializedTargetSourcePair.savingsDetails = savingsDetails;
                } else if ("confidenceScore".equals(fieldName)) {
                    deserializedTargetSourcePair.confidenceScore = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetSourcePair;
        });
    }
}
