// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Data model of Node Pool.
 */
@Immutable
public class NodePool implements JsonSerializable<NodePool> {
    /*
     * Gets id.
     */
    private String id;

    /*
     * Gets name.
     */
    private String name;

    /*
     * Gets cluster name.
     */
    private String clusterName;

    /*
     * Gets mode.
     */
    private NodePoolMode mode;

    /*
     * Gets os type.
     */
    private OSType osType;

    /*
     * Gets arm sku name.
     */
    private String armSkuName;

    /*
     * Gets node count.
     */
    private int nodeCount;

    /*
     * Gets pod count.
     */
    private int podCount;

    /*
     * Gets monthly cost.
     */
    private float monthlyCost;

    /*
     * Gets pod approximate monthly cost.
     */
    private float podApproxMonthlyCost;

    /**
     * Creates an instance of NodePool class.
     */
    public NodePool() {
    }

    /**
     * Get the id property: Gets id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Gets id.
     * 
     * @param id the id value to set.
     * @return the NodePool object itself.
     */
    NodePool withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Gets name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets name.
     * 
     * @param name the name value to set.
     * @return the NodePool object itself.
     */
    NodePool withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the clusterName property: Gets cluster name.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Set the clusterName property: Gets cluster name.
     * 
     * @param clusterName the clusterName value to set.
     * @return the NodePool object itself.
     */
    NodePool withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }

    /**
     * Get the mode property: Gets mode.
     * 
     * @return the mode value.
     */
    public NodePoolMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Gets mode.
     * 
     * @param mode the mode value to set.
     * @return the NodePool object itself.
     */
    NodePool withMode(NodePoolMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the osType property: Gets os type.
     * 
     * @return the osType value.
     */
    public OSType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Gets os type.
     * 
     * @param osType the osType value to set.
     * @return the NodePool object itself.
     */
    NodePool withOsType(OSType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the armSkuName property: Gets arm sku name.
     * 
     * @return the armSkuName value.
     */
    public String armSkuName() {
        return this.armSkuName;
    }

    /**
     * Set the armSkuName property: Gets arm sku name.
     * 
     * @param armSkuName the armSkuName value to set.
     * @return the NodePool object itself.
     */
    NodePool withArmSkuName(String armSkuName) {
        this.armSkuName = armSkuName;
        return this;
    }

    /**
     * Get the nodeCount property: Gets node count.
     * 
     * @return the nodeCount value.
     */
    public int nodeCount() {
        return this.nodeCount;
    }

    /**
     * Set the nodeCount property: Gets node count.
     * 
     * @param nodeCount the nodeCount value to set.
     * @return the NodePool object itself.
     */
    NodePool withNodeCount(int nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }

    /**
     * Get the podCount property: Gets pod count.
     * 
     * @return the podCount value.
     */
    public int podCount() {
        return this.podCount;
    }

    /**
     * Set the podCount property: Gets pod count.
     * 
     * @param podCount the podCount value to set.
     * @return the NodePool object itself.
     */
    NodePool withPodCount(int podCount) {
        this.podCount = podCount;
        return this;
    }

    /**
     * Get the monthlyCost property: Gets monthly cost.
     * 
     * @return the monthlyCost value.
     */
    public float monthlyCost() {
        return this.monthlyCost;
    }

    /**
     * Set the monthlyCost property: Gets monthly cost.
     * 
     * @param monthlyCost the monthlyCost value to set.
     * @return the NodePool object itself.
     */
    NodePool withMonthlyCost(float monthlyCost) {
        this.monthlyCost = monthlyCost;
        return this;
    }

    /**
     * Get the podApproxMonthlyCost property: Gets pod approximate monthly cost.
     * 
     * @return the podApproxMonthlyCost value.
     */
    public float podApproxMonthlyCost() {
        return this.podApproxMonthlyCost;
    }

    /**
     * Set the podApproxMonthlyCost property: Gets pod approximate monthly cost.
     * 
     * @param podApproxMonthlyCost the podApproxMonthlyCost value to set.
     * @return the NodePool object itself.
     */
    NodePool withPodApproxMonthlyCost(float podApproxMonthlyCost) {
        this.podApproxMonthlyCost = podApproxMonthlyCost;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodePool from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodePool if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NodePool.
     */
    public static NodePool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodePool deserializedNodePool = new NodePool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNodePool.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNodePool.name = reader.getString();
                } else if ("clusterName".equals(fieldName)) {
                    deserializedNodePool.clusterName = reader.getString();
                } else if ("mode".equals(fieldName)) {
                    deserializedNodePool.mode = NodePoolMode.fromString(reader.getString());
                } else if ("osType".equals(fieldName)) {
                    deserializedNodePool.osType = OSType.fromString(reader.getString());
                } else if ("armSkuName".equals(fieldName)) {
                    deserializedNodePool.armSkuName = reader.getString();
                } else if ("nodeCount".equals(fieldName)) {
                    deserializedNodePool.nodeCount = reader.getInt();
                } else if ("podCount".equals(fieldName)) {
                    deserializedNodePool.podCount = reader.getInt();
                } else if ("monthlyCost".equals(fieldName)) {
                    deserializedNodePool.monthlyCost = reader.getFloat();
                } else if ("podApproxMonthlyCost".equals(fieldName)) {
                    deserializedNodePool.podApproxMonthlyCost = reader.getFloat();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodePool;
        });
    }
}
