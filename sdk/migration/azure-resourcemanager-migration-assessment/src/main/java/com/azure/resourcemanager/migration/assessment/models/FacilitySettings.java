// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Facility settings.
 */
@Fluent
public final class FacilitySettings implements JsonSerializable<FacilitySettings> {
    /*
     * The facilities cost.
     */
    private Float facilitiesCostPerKwh;

    /**
     * Creates an instance of FacilitySettings class.
     */
    public FacilitySettings() {
    }

    /**
     * Get the facilitiesCostPerKwh property: The facilities cost.
     * 
     * @return the facilitiesCostPerKwh value.
     */
    public Float facilitiesCostPerKwh() {
        return this.facilitiesCostPerKwh;
    }

    /**
     * Set the facilitiesCostPerKwh property: The facilities cost.
     * 
     * @param facilitiesCostPerKwh the facilitiesCostPerKwh value to set.
     * @return the FacilitySettings object itself.
     */
    public FacilitySettings withFacilitiesCostPerKwh(Float facilitiesCostPerKwh) {
        this.facilitiesCostPerKwh = facilitiesCostPerKwh;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("facilitiesCostPerKwh", this.facilitiesCostPerKwh);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FacilitySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FacilitySettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FacilitySettings.
     */
    public static FacilitySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FacilitySettings deserializedFacilitySettings = new FacilitySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("facilitiesCostPerKwh".equals(fieldName)) {
                    deserializedFacilitySettings.facilitiesCostPerKwh = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFacilitySettings;
        });
    }
}
