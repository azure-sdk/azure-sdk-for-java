// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Business case report details.
 */
@Immutable
public final class ReportDetails implements JsonSerializable<ReportDetails> {
    /*
     * Report type.
     */
    private ReportType reportType;

    /*
     * Report status.
     */
    private ReportStatus reportStatus;

    /**
     * Creates an instance of ReportDetails class.
     */
    public ReportDetails() {
    }

    /**
     * Get the reportType property: Report type.
     * 
     * @return the reportType value.
     */
    public ReportType reportType() {
        return this.reportType;
    }

    /**
     * Get the reportStatus property: Report status.
     * 
     * @return the reportStatus value.
     */
    public ReportStatus reportStatus() {
        return this.reportStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReportDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReportDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReportDetails.
     */
    public static ReportDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReportDetails deserializedReportDetails = new ReportDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reportType".equals(fieldName)) {
                    deserializedReportDetails.reportType = ReportType.fromString(reader.getString());
                } else if ("reportStatus".equals(fieldName)) {
                    deserializedReportDetails.reportStatus = ReportStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReportDetails;
        });
    }
}
