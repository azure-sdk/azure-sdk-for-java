// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Linkages details.
 */
@Immutable
public final class Linkages implements JsonSerializable<Linkages> {
    /*
     * The workload name
     */
    private String workloadName;

    /*
     * The linkage type.
     */
    private LinkageType linkageType;

    /*
     * The linkage kind.
     */
    private LinkageKind kind;

    /*
     * The arm id.
     */
    private String armId;

    /**
     * Creates an instance of Linkages class.
     */
    public Linkages() {
    }

    /**
     * Get the workloadName property: The workload name.
     * 
     * @return the workloadName value.
     */
    public String workloadName() {
        return this.workloadName;
    }

    /**
     * Get the linkageType property: The linkage type.
     * 
     * @return the linkageType value.
     */
    public LinkageType linkageType() {
        return this.linkageType;
    }

    /**
     * Get the kind property: The linkage kind.
     * 
     * @return the kind value.
     */
    public LinkageKind kind() {
        return this.kind;
    }

    /**
     * Get the armId property: The arm id.
     * 
     * @return the armId value.
     */
    public String armId() {
        return this.armId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Linkages from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Linkages if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Linkages.
     */
    public static Linkages fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Linkages deserializedLinkages = new Linkages();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workloadName".equals(fieldName)) {
                    deserializedLinkages.workloadName = reader.getString();
                } else if ("linkageType".equals(fieldName)) {
                    deserializedLinkages.linkageType = LinkageType.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedLinkages.kind = LinkageKind.fromString(reader.getString());
                } else if ("armId".equals(fieldName)) {
                    deserializedLinkages.armId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkages;
        });
    }
}
