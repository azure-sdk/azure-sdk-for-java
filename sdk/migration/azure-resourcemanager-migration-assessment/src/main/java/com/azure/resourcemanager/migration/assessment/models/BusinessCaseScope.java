// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Business case scope.
 */
@Immutable
public final class BusinessCaseScope implements JsonSerializable<BusinessCaseScope> {
    /*
     * Scope type.
     */
    private ScopeType scopeType;

    /*
     * ARG query.
     */
    private String azureResourceGraphQuery;

    /**
     * Creates an instance of BusinessCaseScope class.
     */
    public BusinessCaseScope() {
    }

    /**
     * Get the scopeType property: Scope type.
     * 
     * @return the scopeType value.
     */
    public ScopeType scopeType() {
        return this.scopeType;
    }

    /**
     * Get the azureResourceGraphQuery property: ARG query.
     * 
     * @return the azureResourceGraphQuery value.
     */
    public String azureResourceGraphQuery() {
        return this.azureResourceGraphQuery;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BusinessCaseScope from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BusinessCaseScope if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BusinessCaseScope.
     */
    public static BusinessCaseScope fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BusinessCaseScope deserializedBusinessCaseScope = new BusinessCaseScope();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scopeType".equals(fieldName)) {
                    deserializedBusinessCaseScope.scopeType = ScopeType.fromString(reader.getString());
                } else if ("azureResourceGraphQuery".equals(fieldName)) {
                    deserializedBusinessCaseScope.azureResourceGraphQuery = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBusinessCaseScope;
        });
    }
}
