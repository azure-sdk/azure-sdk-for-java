// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Assessed network adapter data for normalized contract for sql machines.
 */
@Fluent
public final class AssessedSqlNetworkAdaptersV3 implements JsonSerializable<AssessedSqlNetworkAdaptersV3> {
    /*
     * The disk name.
     */
    private String name;

    /*
     * Gets the net gigabytes transmitted per month.
     */
    private Float netGigabytesTransmittedPerMonth;

    /*
     * Gets the mac address.
     */
    private String macAddress;

    /*
     * Gets the ip addresses.
     */
    private List<String> ipAddresses;

    /*
     * Gets the megabytes per second received.
     */
    private Float megabytesPerSecondRecieved;

    /*
     * Gets the megabytes per second transmitted.
     */
    private Float megabytesPerSecondTransmitted;

    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /**
     * Creates an instance of AssessedSqlNetworkAdaptersV3 class.
     */
    public AssessedSqlNetworkAdaptersV3() {
    }

    /**
     * Get the name property: The disk name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the netGigabytesTransmittedPerMonth property: Gets the net gigabytes transmitted per month.
     * 
     * @return the netGigabytesTransmittedPerMonth value.
     */
    public Float netGigabytesTransmittedPerMonth() {
        return this.netGigabytesTransmittedPerMonth;
    }

    /**
     * Set the netGigabytesTransmittedPerMonth property: Gets the net gigabytes transmitted per month.
     * 
     * @param netGigabytesTransmittedPerMonth the netGigabytesTransmittedPerMonth value to set.
     * @return the AssessedSqlNetworkAdaptersV3 object itself.
     */
    public AssessedSqlNetworkAdaptersV3 withNetGigabytesTransmittedPerMonth(Float netGigabytesTransmittedPerMonth) {
        this.netGigabytesTransmittedPerMonth = netGigabytesTransmittedPerMonth;
        return this;
    }

    /**
     * Get the macAddress property: Gets the mac address.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Set the macAddress property: Gets the mac address.
     * 
     * @param macAddress the macAddress value to set.
     * @return the AssessedSqlNetworkAdaptersV3 object itself.
     */
    public AssessedSqlNetworkAdaptersV3 withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }

    /**
     * Get the ipAddresses property: Gets the ip addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the megabytesPerSecondRecieved property: Gets the megabytes per second received.
     * 
     * @return the megabytesPerSecondRecieved value.
     */
    public Float megabytesPerSecondRecieved() {
        return this.megabytesPerSecondRecieved;
    }

    /**
     * Set the megabytesPerSecondRecieved property: Gets the megabytes per second received.
     * 
     * @param megabytesPerSecondRecieved the megabytesPerSecondRecieved value to set.
     * @return the AssessedSqlNetworkAdaptersV3 object itself.
     */
    public AssessedSqlNetworkAdaptersV3 withMegabytesPerSecondRecieved(Float megabytesPerSecondRecieved) {
        this.megabytesPerSecondRecieved = megabytesPerSecondRecieved;
        return this;
    }

    /**
     * Get the megabytesPerSecondTransmitted property: Gets the megabytes per second transmitted.
     * 
     * @return the megabytesPerSecondTransmitted value.
     */
    public Float megabytesPerSecondTransmitted() {
        return this.megabytesPerSecondTransmitted;
    }

    /**
     * Set the megabytesPerSecondTransmitted property: Gets the megabytes per second transmitted.
     * 
     * @param megabytesPerSecondTransmitted the megabytesPerSecondTransmitted value to set.
     * @return the AssessedSqlNetworkAdaptersV3 object itself.
     */
    public AssessedSqlNetworkAdaptersV3 withMegabytesPerSecondTransmitted(Float megabytesPerSecondTransmitted) {
        this.megabytesPerSecondTransmitted = megabytesPerSecondTransmitted;
        return this;
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("netGigabytesTransmittedPerMonth", this.netGigabytesTransmittedPerMonth);
        jsonWriter.writeStringField("macAddress", this.macAddress);
        jsonWriter.writeNumberField("megabytesPerSecondRecieved", this.megabytesPerSecondRecieved);
        jsonWriter.writeNumberField("megabytesPerSecondTransmitted", this.megabytesPerSecondTransmitted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlNetworkAdaptersV3 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlNetworkAdaptersV3 if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlNetworkAdaptersV3.
     */
    public static AssessedSqlNetworkAdaptersV3 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlNetworkAdaptersV3 deserializedAssessedSqlNetworkAdaptersV3 = new AssessedSqlNetworkAdaptersV3();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAssessedSqlNetworkAdaptersV3.name = reader.getString();
                } else if ("netGigabytesTransmittedPerMonth".equals(fieldName)) {
                    deserializedAssessedSqlNetworkAdaptersV3.netGigabytesTransmittedPerMonth
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("macAddress".equals(fieldName)) {
                    deserializedAssessedSqlNetworkAdaptersV3.macAddress = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessedSqlNetworkAdaptersV3.ipAddresses = ipAddresses;
                } else if ("megabytesPerSecondRecieved".equals(fieldName)) {
                    deserializedAssessedSqlNetworkAdaptersV3.megabytesPerSecondRecieved
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondTransmitted".equals(fieldName)) {
                    deserializedAssessedSqlNetworkAdaptersV3.megabytesPerSecondTransmitted
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedSqlNetworkAdaptersV3.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlNetworkAdaptersV3;
        });
    }
}
