// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ARM model of AKS Assessment Properties.
 */
@Fluent
public final class AksAssessmentProperties extends AssessmentPropertiesBase {
    /*
     * Gets or sets AKS Assessment Settings.
     */
    private AksAssessmentSettings settings;

    /*
     * Gets AKS Assessment Details.
     */
    private AksAssessmentDetails details;

    /*
     * Gets the provisioning state.
     */
    private ProvisioningStatus provisioningState;

    /**
     * Creates an instance of AksAssessmentProperties class.
     */
    public AksAssessmentProperties() {
    }

    /**
     * Get the settings property: Gets or sets AKS Assessment Settings.
     * 
     * @return the settings value.
     */
    public AksAssessmentSettings settings() {
        return this.settings;
    }

    /**
     * Set the settings property: Gets or sets AKS Assessment Settings.
     * 
     * @param settings the settings value to set.
     * @return the AksAssessmentProperties object itself.
     */
    public AksAssessmentProperties withSettings(AksAssessmentSettings settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Get the details property: Gets AKS Assessment Details.
     * 
     * @return the details value.
     */
    public AksAssessmentDetails details() {
        return this.details;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AksAssessmentProperties withScope(AssessmentScopeParameters scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (settings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property settings in model AksAssessmentProperties"));
        } else {
            settings().validate();
        }
        if (details() != null) {
            details().validate();
        }
        if (scope() != null) {
            scope().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AksAssessmentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("scope", scope());
        jsonWriter.writeJsonField("settings", this.settings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AksAssessmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AksAssessmentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AksAssessmentProperties.
     */
    public static AksAssessmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AksAssessmentProperties deserializedAksAssessmentProperties = new AksAssessmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAksAssessmentProperties.provisioningState
                        = ProvisioningStatus.fromString(reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedAksAssessmentProperties.withScope(AssessmentScopeParameters.fromJson(reader));
                } else if ("settings".equals(fieldName)) {
                    deserializedAksAssessmentProperties.settings = AksAssessmentSettings.fromJson(reader);
                } else if ("details".equals(fieldName)) {
                    deserializedAksAssessmentProperties.details = AksAssessmentDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAksAssessmentProperties;
        });
    }
}
