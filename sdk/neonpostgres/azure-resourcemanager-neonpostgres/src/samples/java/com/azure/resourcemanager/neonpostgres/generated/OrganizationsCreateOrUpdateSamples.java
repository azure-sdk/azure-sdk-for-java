// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.resourcemanager.neonpostgres.models.CompanyDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import com.azure.resourcemanager.neonpostgres.models.OrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.PartnerOrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import com.azure.resourcemanager.neonpostgres.models.UserDetails;
import com.azure.resourcemanager.neonpostgres.models.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.models.ProjectProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations CreateOrUpdate.
 */
public final class OrganizationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-03-01-preview/Organizations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to NeonPostgresManager.
     */
    public static void
        organizationsCreateOrUpdateMaximumSet(com.azure.resourcemanager.neonpostgres.NeonPostgresManager manager) {
        manager.organizations()
            .define("testOrg123")
            .withRegion("mxlsmperqlxtaalsunpleuta")
            .withExistingResourceGroup("rgneon")
            .withTags(mapOf("key9495", "fakeTokenPlaceholder"))
            .withProperties(new OrganizationProperties()
                .withMarketplaceDetails(new MarketplaceDetails().withSubscriptionId("olwmihml")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new OfferDetails().withPublisherId("wxfrcxidpruciyy")
                        .withOfferId("mg")
                        .withPlanId("ddjcvdyflljaoyfvdnunqgecfhtz")
                        .withPlanName("uciiaiirecatgizjitryrfcxlsrll")
                        .withTermUnit("vljoeixsyfqnilhy")
                        .withTermId("spwiydyzbdi")))
                .withUserDetails(new UserDetails().withFirstName("zoqvvuxxyldsfswe")
                    .withLastName("rzvayulpqh")
                    .withEmailAddress("test@microsoft.com")
                    .withUpn("nbh")
                    .withPhoneNumber("lxxghuhwknsivwcrkug"))
                .withCompanyDetails(new CompanyDetails().withCompanyName("bdplqyy")
                    .withCountry("wdtegxupoepgebaudbdi")
                    .withOfficeAddress("aqxujkkctyhsefilbcvlo")
                    .withBusinessPhone("nshcjawuxfzplbzeyjbd")
                    .withDomain("jxnqzzdhtguhtuouqhx")
                    .withNumberOfEmployees(15L))
                .withPartnerOrganizationProperties(
                    new PartnerOrganizationProperties().withOrganizationId("yneivfklykgwuqnfzsphgtgbvqew")
                        .withOrganizationName("test-entity")
                        .withSingleSignOnProperties(new SingleSignOnProperties()
                            .withSingleSignOnState(SingleSignOnStates.INITIAL)
                            .withEnterpriseAppId("jstu")
                            .withSingleSignOnUrl("rduuuystfxtrjaxjbrslrsqxajtou")
                            .withAadDomains(Arrays.asList("xwcoekddrjlvwogssbfrv"))))
                .withProjectProperties(new ProjectProperties().withEntityName("test-entity")
                    .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                    .withRegionId("cpnssldzuftdqgjdaqzjayqujpb")
                    .withStorage(3L)
                    .withPgVersion(1)
                    .withBranch(new BranchProperties().withEntityName("test-entity")
                        .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                        .withProjectId("vtdzaxdiwnzvq")
                        .withParentId("test-id")
                        .withRoleName("imfhfgfpamibgcgibgxor")
                        .withDatabaseName("xargveemydmqrdtjcdhf")
                        .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("test-entity")
                            .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                            .withBranchId("iecxepxhnzhjzeiguki")
                            .withPermissions(Arrays.asList("ddwmkyztotgspcbetfokelddpmq"))
                            .withIsSuperUser(true)))
                        .withDatabases(Arrays.asList(new NeonDatabaseProperties().withEntityName("test-entity")
                            .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                            .withBranchId("zoaopvqitcgjdmsllgzdbrb")
                            .withOwnerName("cutdyjupbqghhxfkmsslzvmjwa")))
                        .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("test-entity")
                            .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                            .withProjectId("fhfdyuiaaftqormerayks")
                            .withBranchId("oejenjawxexhuotsxodbl")
                            .withEndpointType(EndpointType.READ_ONLY))))
                    .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("test-entity")
                        .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                        .withBranchId("iecxepxhnzhjzeiguki")
                        .withPermissions(Arrays.asList("ddwmkyztotgspcbetfokelddpmq"))
                        .withIsSuperUser(true)))
                    .withDatabases(Arrays.asList(new NeonDatabaseProperties().withEntityName("test-entity")
                        .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                        .withBranchId("zoaopvqitcgjdmsllgzdbrb")
                        .withOwnerName("cutdyjupbqghhxfkmsslzvmjwa")))
                    .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("test-entity")
                        .withAttributes(Arrays.asList(new Attributes().withName("ioyjfywmt").withValue("sfbpcr")))
                        .withProjectId("fhfdyuiaaftqormerayks")
                        .withBranchId("oejenjawxexhuotsxodbl")
                        .withEndpointType(EndpointType.READ_ONLY)))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
