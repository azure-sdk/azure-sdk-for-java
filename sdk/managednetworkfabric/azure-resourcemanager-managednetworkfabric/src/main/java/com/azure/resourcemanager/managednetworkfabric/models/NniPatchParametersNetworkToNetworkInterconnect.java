// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Configuration used to setup CE-PE connectivity. */
@Fluent
public final class NniPatchParametersNetworkToNetworkInterconnect {
    /*
     * Multi Protocol Border Gateway Protocol configuration. This BGP configuration enables exchange of routes using
     * mp-BGP for multiple isolation domains with single peering.
     */
    @JsonProperty(value = "layer3Configuration")
    private NniPatchParametersNetworkToNetworkInterconnectLayer3Configuration layer3Configuration;

    /** Creates an instance of NniPatchParametersNetworkToNetworkInterconnect class. */
    public NniPatchParametersNetworkToNetworkInterconnect() {
    }

    /**
     * Get the layer3Configuration property: Multi Protocol Border Gateway Protocol configuration. This BGP
     * configuration enables exchange of routes using mp-BGP for multiple isolation domains with single peering.
     *
     * @return the layer3Configuration value.
     */
    public NniPatchParametersNetworkToNetworkInterconnectLayer3Configuration layer3Configuration() {
        return this.layer3Configuration;
    }

    /**
     * Set the layer3Configuration property: Multi Protocol Border Gateway Protocol configuration. This BGP
     * configuration enables exchange of routes using mp-BGP for multiple isolation domains with single peering.
     *
     * @param layer3Configuration the layer3Configuration value to set.
     * @return the NniPatchParametersNetworkToNetworkInterconnect object itself.
     */
    public NniPatchParametersNetworkToNetworkInterconnect withLayer3Configuration(
        NniPatchParametersNetworkToNetworkInterconnectLayer3Configuration layer3Configuration) {
        this.layer3Configuration = layer3Configuration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (layer3Configuration() != null) {
            layer3Configuration().validate();
        }
    }
}
