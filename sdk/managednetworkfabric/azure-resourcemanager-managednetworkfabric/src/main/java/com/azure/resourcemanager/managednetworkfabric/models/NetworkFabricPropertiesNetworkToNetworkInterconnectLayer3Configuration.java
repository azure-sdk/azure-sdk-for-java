// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Multi Protocol Border Gateway Protocol configuration. This BGP configuration enables exchange of routes using mp-BGP
 * for multiple isolation domains with single peering.
 */
@Fluent
public final class NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration
    extends MpBgpPatchableProperties {
    /*
     * VLAN for CE/PE Layer 3 connectivity.Example : 501
     */
    @JsonProperty(value = "vlanId")
    private Integer vlanId;

    /*
     * ASN of CE devices for CE/PE connectivity. Default value is 65001.
     */
    @JsonProperty(value = "fabricAsn")
    private Integer fabricAsn;

    /** Creates an instance of NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration class. */
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration() {
    }

    /**
     * Get the vlanId property: VLAN for CE/PE Layer 3 connectivity.Example : 501.
     *
     * @return the vlanId value.
     */
    public Integer vlanId() {
        return this.vlanId;
    }

    /**
     * Set the vlanId property: VLAN for CE/PE Layer 3 connectivity.Example : 501.
     *
     * @param vlanId the vlanId value to set.
     * @return the NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration object itself.
     */
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withVlanId(Integer vlanId) {
        this.vlanId = vlanId;
        return this;
    }

    /**
     * Get the fabricAsn property: ASN of CE devices for CE/PE connectivity. Default value is 65001.
     *
     * @return the fabricAsn value.
     */
    public Integer fabricAsn() {
        return this.fabricAsn;
    }

    /**
     * Set the fabricAsn property: ASN of CE devices for CE/PE connectivity. Default value is 65001.
     *
     * @param fabricAsn the fabricAsn value to set.
     * @return the NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration object itself.
     */
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withFabricAsn(Integer fabricAsn) {
        this.fabricAsn = fabricAsn;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withRouterId(String routerId) {
        super.withRouterId(routerId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withPeerAsn(Integer peerAsn) {
        super.withPeerAsn(peerAsn);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withPrimaryIpv4Prefix(
        String primaryIpv4Prefix) {
        super.withPrimaryIpv4Prefix(primaryIpv4Prefix);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withPrimaryIpv6Prefix(
        String primaryIpv6Prefix) {
        super.withPrimaryIpv6Prefix(primaryIpv6Prefix);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withSecondaryIpv4Prefix(
        String secondaryIpv4Prefix) {
        super.withSecondaryIpv4Prefix(secondaryIpv4Prefix);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesNetworkToNetworkInterconnectLayer3Configuration withSecondaryIpv6Prefix(
        String secondaryIpv6Prefix) {
        super.withSecondaryIpv6Prefix(secondaryIpv6Prefix);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
