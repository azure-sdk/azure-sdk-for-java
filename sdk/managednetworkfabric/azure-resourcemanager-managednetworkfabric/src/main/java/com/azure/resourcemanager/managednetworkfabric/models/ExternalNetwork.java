// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetworkfabric.fluent.models.ExternalNetworkInner;
import java.util.List;

/** An immutable client-side representation of ExternalNetwork. */
public interface ExternalNetwork {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the mtu property: Maximum Transmission Unit (MTU) for the ExternalNetwork.
     *
     * @return the mtu value.
     */
    Integer mtu();

    /**
     * Gets the vlanId property: vlanId. Example: 1001.
     *
     * @return the vlanId value.
     */
    Integer vlanId();

    /**
     * Gets the fabricAsn property: fabricASN. Example: 65048.
     *
     * @return the fabricAsn value.
     */
    Integer fabricAsn();

    /**
     * Gets the peerAsn property: peerASN. Example: 65047.
     *
     * @return the peerAsn value.
     */
    Integer peerAsn();

    /**
     * Gets the bfdConfiguration property: BFD configuration properties.
     *
     * @return the bfdConfiguration value.
     */
    ExternalNetworkPropertiesBfdConfiguration bfdConfiguration();

    /**
     * Gets the disabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the disabledOnResources value.
     */
    List<String> disabledOnResources();

    /**
     * Gets the bgpDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the bgpDisabledOnResources value.
     */
    List<String> bgpDisabledOnResources();

    /**
     * Gets the bfdDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the bfdDisabledOnResources value.
     */
    List<String> bfdDisabledOnResources();

    /**
     * Gets the administrativeState property: administrativeState of the network interface. Example: up | down.
     *
     * @return the administrativeState value.
     */
    String administrativeState();

    /**
     * Gets the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the primaryIpv4Prefix property: IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the primaryIpv4Prefix value.
     */
    String primaryIpv4Prefix();

    /**
     * Gets the primaryIpv6Prefix property: IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the primaryIpv6Prefix value.
     */
    String primaryIpv6Prefix();

    /**
     * Gets the secondaryIpv4Prefix property: Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value
     * is 172.23.1.2/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the secondaryIpv4Prefix value.
     */
    String secondaryIpv4Prefix();

    /**
     * Gets the secondaryIpv6Prefix property: Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value
     * is 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards.
     * Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1
     * and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the secondaryIpv6Prefix value.
     */
    String secondaryIpv6Prefix();

    /**
     * Gets the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    String annotation();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.managednetworkfabric.fluent.models.ExternalNetworkInner object.
     *
     * @return the inner object.
     */
    ExternalNetworkInner innerModel();

    /** The entirety of the ExternalNetwork definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The ExternalNetwork definition stages. */
    interface DefinitionStages {
        /** The first stage of the ExternalNetwork definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the ExternalNetwork definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, l3IsolationDomainName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param l3IsolationDomainName Name of the L3IsolationDomain.
             * @return the next definition stage.
             */
            WithCreate withExistingL3IsolationDomain(String resourceGroupName, String l3IsolationDomainName);
        }
        /**
         * The stage of the ExternalNetwork definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithMtu,
                DefinitionStages.WithVlanId,
                DefinitionStages.WithFabricAsn,
                DefinitionStages.WithPeerAsn,
                DefinitionStages.WithBfdConfiguration,
                DefinitionStages.WithAdministrativeState,
                DefinitionStages.WithPrimaryIpv4Prefix,
                DefinitionStages.WithPrimaryIpv6Prefix,
                DefinitionStages.WithSecondaryIpv4Prefix,
                DefinitionStages.WithSecondaryIpv6Prefix,
                DefinitionStages.WithAnnotation {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ExternalNetwork create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ExternalNetwork create(Context context);
        }
        /** The stage of the ExternalNetwork definition allowing to specify mtu. */
        interface WithMtu {
            /**
             * Specifies the mtu property: Maximum Transmission Unit (MTU) for the ExternalNetwork..
             *
             * @param mtu Maximum Transmission Unit (MTU) for the ExternalNetwork.
             * @return the next definition stage.
             */
            WithCreate withMtu(Integer mtu);
        }
        /** The stage of the ExternalNetwork definition allowing to specify vlanId. */
        interface WithVlanId {
            /**
             * Specifies the vlanId property: vlanId. Example: 1001..
             *
             * @param vlanId vlanId. Example: 1001.
             * @return the next definition stage.
             */
            WithCreate withVlanId(Integer vlanId);
        }
        /** The stage of the ExternalNetwork definition allowing to specify fabricAsn. */
        interface WithFabricAsn {
            /**
             * Specifies the fabricAsn property: fabricASN. Example: 65048..
             *
             * @param fabricAsn fabricASN. Example: 65048.
             * @return the next definition stage.
             */
            WithCreate withFabricAsn(Integer fabricAsn);
        }
        /** The stage of the ExternalNetwork definition allowing to specify peerAsn. */
        interface WithPeerAsn {
            /**
             * Specifies the peerAsn property: peerASN. Example: 65047..
             *
             * @param peerAsn peerASN. Example: 65047.
             * @return the next definition stage.
             */
            WithCreate withPeerAsn(Integer peerAsn);
        }
        /** The stage of the ExternalNetwork definition allowing to specify bfdConfiguration. */
        interface WithBfdConfiguration {
            /**
             * Specifies the bfdConfiguration property: BFD configuration properties.
             *
             * @param bfdConfiguration BFD configuration properties.
             * @return the next definition stage.
             */
            WithCreate withBfdConfiguration(ExternalNetworkPropertiesBfdConfiguration bfdConfiguration);
        }
        /** The stage of the ExternalNetwork definition allowing to specify administrativeState. */
        interface WithAdministrativeState {
            /**
             * Specifies the administrativeState property: administrativeState of the network interface. Example: up |
             * down..
             *
             * @param administrativeState administrativeState of the network interface. Example: up | down.
             * @return the next definition stage.
             */
            WithCreate withAdministrativeState(String administrativeState);
        }
        /** The stage of the ExternalNetwork definition allowing to specify primaryIpv4Prefix. */
        interface WithPrimaryIpv4Prefix {
            /**
             * Specifies the primaryIpv4Prefix property: IPv4 Address Prefix of CE-PE interconnect links. Default value
             * is 172.23.1.0/31. The values can be specified at the time of creation or can be updated afterwards. Any
             * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on
             * CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B
             * interfaces..
             *
             * @param primaryIpv4Prefix IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.23.1.0/31.
             *     The values can be specified at the time of creation or can be updated afterwards. Any update to the
             *     values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2
             *     for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B
             *     interfaces.
             * @return the next definition stage.
             */
            WithCreate withPrimaryIpv4Prefix(String primaryIpv4Prefix);
        }
        /** The stage of the ExternalNetwork definition allowing to specify primaryIpv6Prefix. */
        interface WithPrimaryIpv6Prefix {
            /**
             * Specifies the primaryIpv6Prefix property: IPv6 Address Prefix of CE-PE interconnect links. Default value
             * is 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated
             * afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be
             * configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and
             * PE2 for Option B interfaces..
             *
             * @param primaryIpv6Prefix IPv6 Address Prefix of CE-PE interconnect links. Default value is
             *     3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated
             *     afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are
             *     to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on
             *     PE1 and PE2 for Option B interfaces.
             * @return the next definition stage.
             */
            WithCreate withPrimaryIpv6Prefix(String primaryIpv6Prefix);
        }
        /** The stage of the ExternalNetwork definition allowing to specify secondaryIpv4Prefix. */
        interface WithSecondaryIpv4Prefix {
            /**
             * Specifies the secondaryIpv4Prefix property: Secondary IPv4 Address Prefix of CE-PE interconnect links.
             * Default value is 172.23.1.2/31. The values can be specified at the time of creation or can be updated
             * afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be
             * configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and
             * PE2 for Option B interfaces..
             *
             * @param secondaryIpv4Prefix Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is
             *     172.23.1.2/31. The values can be specified at the time of creation or can be updated afterwards. Any
             *     update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured
             *     on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for
             *     Option B interfaces.
             * @return the next definition stage.
             */
            WithCreate withSecondaryIpv4Prefix(String secondaryIpv4Prefix);
        }
        /** The stage of the ExternalNetwork definition allowing to specify secondaryIpv6Prefix. */
        interface WithSecondaryIpv6Prefix {
            /**
             * Specifies the secondaryIpv6Prefix property: Secondary IPv6 Address Prefix of CE-PE interconnect links.
             * Default value is 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be
             * updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs
             * are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on
             * PE1 and PE2 for Option B interfaces..
             *
             * @param secondaryIpv6Prefix Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is
             *     3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated
             *     afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are
             *     to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on
             *     PE1 and PE2 for Option B interfaces.
             * @return the next definition stage.
             */
            WithCreate withSecondaryIpv6Prefix(String secondaryIpv6Prefix);
        }
        /** The stage of the ExternalNetwork definition allowing to specify annotation. */
        interface WithAnnotation {
            /**
             * Specifies the annotation property: Switch configuration description..
             *
             * @param annotation Switch configuration description.
             * @return the next definition stage.
             */
            WithCreate withAnnotation(String annotation);
        }
    }
    /**
     * Begins update for the ExternalNetwork resource.
     *
     * @return the stage of resource update.
     */
    ExternalNetwork.Update update();

    /** The template for ExternalNetwork update. */
    interface Update {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ExternalNetwork apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ExternalNetwork apply(Context context);
    }
    /** The ExternalNetwork update stages. */
    interface UpdateStages {
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ExternalNetwork refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ExternalNetwork refresh(Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Executes update operation to enable or disable administrative State for externalNetwork.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateAdminState(UpdateAdministrativeState body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>Executes update operation to enable or disable administrative State for externalNetwork.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateAdminState(UpdateAdministrativeState body, Context context);

    /**
     * Executes BGP state update operation to the underlying resources.
     *
     * <p>Update BGP for externalNetwork.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateBgpState(UpdateAdministrativeState body);

    /**
     * Executes BGP state update operation to the underlying resources.
     *
     * <p>Update BGP for externalNetwork.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateBgpState(UpdateAdministrativeState body, Context context);

    /**
     * Execute BfdForBgp update operation to the underlying resources.
     *
     * <p>Update BfdForBgp for externalNetwork.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateBfdForBgpState(UpdateAdministrativeState body);

    /**
     * Execute BfdForBgp update operation to the underlying resources.
     *
     * <p>Update BfdForBgp for externalNetwork.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateBfdForBgpState(UpdateAdministrativeState body, Context context);

    /**
     * Executes clearIpv6Neighbors table operation to the underlying resources.
     *
     * <p>clearIpv6Neighbors for externalNetwork.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearIpv6Neighbors(EnableDisableOnResources body);

    /**
     * Executes clearIpv6Neighbors table operation to the underlying resources.
     *
     * <p>clearIpv6Neighbors for externalNetwork.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearIpv6Neighbors(EnableDisableOnResources body, Context context);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>clearArpEntries for externalNetwork.
     *
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearArpEntries(EnableDisableOnResources body);

    /**
     * Implements the operation to the underlying resources.
     *
     * <p>clearArpEntries for externalNetwork.
     *
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void clearArpEntries(EnableDisableOnResources body, Context context);
}
