// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Configuration for workload vpn. */
@Fluent
public final class NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration
    extends WorkloadVpnPatchableProperties {
    /*
     * Indicates configuration state. Example: enabled | disabled.
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private EnabledDisabledState state;

    /*
     * Peering option list.
     */
    @JsonProperty(value = "peeringOption")
    private PeeringOption peeringOption;

    /*
     * option A properties object
     */
    @JsonProperty(value = "optionAProperties")
    private OptionAProperties optionAProperties;

    /** Creates an instance of NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration class. */
    public NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration() {
    }

    /**
     * Get the state property: Indicates configuration state. Example: enabled | disabled.
     *
     * @return the state value.
     */
    public EnabledDisabledState state() {
        return this.state;
    }

    /**
     * Get the peeringOption property: Peering option list.
     *
     * @return the peeringOption value.
     */
    public PeeringOption peeringOption() {
        return this.peeringOption;
    }

    /**
     * Set the peeringOption property: Peering option list.
     *
     * @param peeringOption the peeringOption value to set.
     * @return the NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration object itself.
     */
    public NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration withPeeringOption(
        PeeringOption peeringOption) {
        this.peeringOption = peeringOption;
        return this;
    }

    /**
     * Get the optionAProperties property: option A properties object.
     *
     * @return the optionAProperties value.
     */
    public OptionAProperties optionAProperties() {
        return this.optionAProperties;
    }

    /**
     * Set the optionAProperties property: option A properties object.
     *
     * @param optionAProperties the optionAProperties value to set.
     * @return the NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration object itself.
     */
    public NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration withOptionAProperties(
        OptionAProperties optionAProperties) {
        this.optionAProperties = optionAProperties;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration withOptionBProperties(
        OptionBProperties optionBProperties) {
        super.withOptionBProperties(optionBProperties);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (optionAProperties() != null) {
            optionAProperties().validate();
        }
    }
}
