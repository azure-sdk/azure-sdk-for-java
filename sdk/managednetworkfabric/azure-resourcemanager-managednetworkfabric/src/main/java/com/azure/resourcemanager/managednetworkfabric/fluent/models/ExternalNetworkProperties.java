// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPropertiesBfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** ExternalNetworkProperties define the resource properties. */
@Fluent
public final class ExternalNetworkProperties extends AnnotationResource {
    /*
     * Maximum Transmission Unit (MTU) for the ExternalNetwork.
     */
    @JsonProperty(value = "mtu")
    private Integer mtu;

    /*
     * vlanId. Example: 1001.
     */
    @JsonProperty(value = "vlanId")
    private Integer vlanId;

    /*
     * fabricASN. Example: 65048.
     */
    @JsonProperty(value = "fabricASN")
    private Integer fabricAsn;

    /*
     * peerASN. Example: 65047.
     */
    @JsonProperty(value = "peerASN")
    private Integer peerAsn;

    /*
     * BFD configuration properties
     */
    @JsonProperty(value = "bfdConfiguration")
    private ExternalNetworkPropertiesBfdConfiguration bfdConfiguration;

    /*
     * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
     */
    @JsonProperty(value = "disabledOnResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> disabledOnResources;

    /*
     * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
     */
    @JsonProperty(value = "bgpDisabledOnResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> bgpDisabledOnResources;

    /*
     * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
     */
    @JsonProperty(value = "bfdDisabledOnResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> bfdDisabledOnResources;

    /*
     * administrativeState of the network interface. Example: up | down.
     */
    @JsonProperty(value = "administrativeState")
    private String administrativeState;

    /*
     * Gets the provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.23.1.0/31. The values can be specified at
     * the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt
     * traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs
     * are to be configured on PE1 and PE2 for Option B interfaces.
     */
    @JsonProperty(value = "primaryIpv4Prefix")
    private String primaryIpv4Prefix;

    /*
     * IPv6 Address Prefix of CE-PE interconnect links. Default value is 3FFE:FFFF:0:CD30::a1/126. The values can be
     * specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may
     * disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and
     * 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     */
    @JsonProperty(value = "primaryIpv6Prefix")
    private String primaryIpv6Prefix;

    /*
     * Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.23.1.2/31. The values can be
     * specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may
     * disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and
     * 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     */
    @JsonProperty(value = "secondaryIpv4Prefix")
    private String secondaryIpv4Prefix;

    /*
     * Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is 3FFE:FFFF:0:CD30::a1/126. The values
     * can be specified at the time of creation or can be updated afterwards. Any update to the values
     * post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B
     * interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     */
    @JsonProperty(value = "secondaryIpv6Prefix")
    private String secondaryIpv6Prefix;

    /** Creates an instance of ExternalNetworkProperties class. */
    public ExternalNetworkProperties() {
    }

    /**
     * Get the mtu property: Maximum Transmission Unit (MTU) for the ExternalNetwork.
     *
     * @return the mtu value.
     */
    public Integer mtu() {
        return this.mtu;
    }

    /**
     * Set the mtu property: Maximum Transmission Unit (MTU) for the ExternalNetwork.
     *
     * @param mtu the mtu value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withMtu(Integer mtu) {
        this.mtu = mtu;
        return this;
    }

    /**
     * Get the vlanId property: vlanId. Example: 1001.
     *
     * @return the vlanId value.
     */
    public Integer vlanId() {
        return this.vlanId;
    }

    /**
     * Set the vlanId property: vlanId. Example: 1001.
     *
     * @param vlanId the vlanId value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withVlanId(Integer vlanId) {
        this.vlanId = vlanId;
        return this;
    }

    /**
     * Get the fabricAsn property: fabricASN. Example: 65048.
     *
     * @return the fabricAsn value.
     */
    public Integer fabricAsn() {
        return this.fabricAsn;
    }

    /**
     * Set the fabricAsn property: fabricASN. Example: 65048.
     *
     * @param fabricAsn the fabricAsn value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withFabricAsn(Integer fabricAsn) {
        this.fabricAsn = fabricAsn;
        return this;
    }

    /**
     * Get the peerAsn property: peerASN. Example: 65047.
     *
     * @return the peerAsn value.
     */
    public Integer peerAsn() {
        return this.peerAsn;
    }

    /**
     * Set the peerAsn property: peerASN. Example: 65047.
     *
     * @param peerAsn the peerAsn value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withPeerAsn(Integer peerAsn) {
        this.peerAsn = peerAsn;
        return this;
    }

    /**
     * Get the bfdConfiguration property: BFD configuration properties.
     *
     * @return the bfdConfiguration value.
     */
    public ExternalNetworkPropertiesBfdConfiguration bfdConfiguration() {
        return this.bfdConfiguration;
    }

    /**
     * Set the bfdConfiguration property: BFD configuration properties.
     *
     * @param bfdConfiguration the bfdConfiguration value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withBfdConfiguration(ExternalNetworkPropertiesBfdConfiguration bfdConfiguration) {
        this.bfdConfiguration = bfdConfiguration;
        return this;
    }

    /**
     * Get the disabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the disabledOnResources value.
     */
    public List<String> disabledOnResources() {
        return this.disabledOnResources;
    }

    /**
     * Get the bgpDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the bgpDisabledOnResources value.
     */
    public List<String> bgpDisabledOnResources() {
        return this.bgpDisabledOnResources;
    }

    /**
     * Get the bfdDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the bfdDisabledOnResources value.
     */
    public List<String> bfdDisabledOnResources() {
        return this.bfdDisabledOnResources;
    }

    /**
     * Get the administrativeState property: administrativeState of the network interface. Example: up | down.
     *
     * @return the administrativeState value.
     */
    public String administrativeState() {
        return this.administrativeState;
    }

    /**
     * Set the administrativeState property: administrativeState of the network interface. Example: up | down.
     *
     * @param administrativeState the administrativeState value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withAdministrativeState(String administrativeState) {
        this.administrativeState = administrativeState;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the primaryIpv4Prefix property: IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the primaryIpv4Prefix value.
     */
    public String primaryIpv4Prefix() {
        return this.primaryIpv4Prefix;
    }

    /**
     * Set the primaryIpv4Prefix property: IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param primaryIpv4Prefix the primaryIpv4Prefix value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withPrimaryIpv4Prefix(String primaryIpv4Prefix) {
        this.primaryIpv4Prefix = primaryIpv4Prefix;
        return this;
    }

    /**
     * Get the primaryIpv6Prefix property: IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the primaryIpv6Prefix value.
     */
    public String primaryIpv6Prefix() {
        return this.primaryIpv6Prefix;
    }

    /**
     * Set the primaryIpv6Prefix property: IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param primaryIpv6Prefix the primaryIpv6Prefix value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withPrimaryIpv6Prefix(String primaryIpv6Prefix) {
        this.primaryIpv6Prefix = primaryIpv6Prefix;
        return this;
    }

    /**
     * Get the secondaryIpv4Prefix property: Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.2/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the secondaryIpv4Prefix value.
     */
    public String secondaryIpv4Prefix() {
        return this.secondaryIpv4Prefix;
    }

    /**
     * Set the secondaryIpv4Prefix property: Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.2/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param secondaryIpv4Prefix the secondaryIpv4Prefix value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withSecondaryIpv4Prefix(String secondaryIpv4Prefix) {
        this.secondaryIpv4Prefix = secondaryIpv4Prefix;
        return this;
    }

    /**
     * Get the secondaryIpv6Prefix property: Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the secondaryIpv6Prefix value.
     */
    public String secondaryIpv6Prefix() {
        return this.secondaryIpv6Prefix;
    }

    /**
     * Set the secondaryIpv6Prefix property: Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param secondaryIpv6Prefix the secondaryIpv6Prefix value to set.
     * @return the ExternalNetworkProperties object itself.
     */
    public ExternalNetworkProperties withSecondaryIpv6Prefix(String secondaryIpv6Prefix) {
        this.secondaryIpv6Prefix = secondaryIpv6Prefix;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExternalNetworkProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (bfdConfiguration() != null) {
            bfdConfiguration().validate();
        }
    }
}
