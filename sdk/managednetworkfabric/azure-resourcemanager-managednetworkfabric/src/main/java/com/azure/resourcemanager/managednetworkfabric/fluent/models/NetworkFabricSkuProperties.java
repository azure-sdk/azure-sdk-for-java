// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** NetworkFabricSkuProperties define the resource properties. */
@Fluent
public final class NetworkFabricSkuProperties {
    /*
     * Maximum number of compute racks available for this Network Fabric SKU.
     */
    @JsonProperty(value = "maxComputeRacks", required = true)
    private int maxComputeRacks;

    /*
     * List of the names for the NetworkRackSKus of type Aggregation available for this SKU.
     */
    @JsonProperty(value = "supportedAggregationRackSkus")
    private List<String> supportedAggregationRackSkus;

    /*
     * List of the names for the NetworkRackSKus of type Compute available for this SKU.
     */
    @JsonProperty(value = "supportedComputeRackSkus")
    private List<String> supportedComputeRackSkus;

    /*
     * Gets the provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of NetworkFabricSkuProperties class. */
    public NetworkFabricSkuProperties() {
    }

    /**
     * Get the maxComputeRacks property: Maximum number of compute racks available for this Network Fabric SKU.
     *
     * @return the maxComputeRacks value.
     */
    public int maxComputeRacks() {
        return this.maxComputeRacks;
    }

    /**
     * Set the maxComputeRacks property: Maximum number of compute racks available for this Network Fabric SKU.
     *
     * @param maxComputeRacks the maxComputeRacks value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withMaxComputeRacks(int maxComputeRacks) {
        this.maxComputeRacks = maxComputeRacks;
        return this;
    }

    /**
     * Get the supportedAggregationRackSkus property: List of the names for the NetworkRackSKus of type Aggregation
     * available for this SKU.
     *
     * @return the supportedAggregationRackSkus value.
     */
    public List<String> supportedAggregationRackSkus() {
        return this.supportedAggregationRackSkus;
    }

    /**
     * Set the supportedAggregationRackSkus property: List of the names for the NetworkRackSKus of type Aggregation
     * available for this SKU.
     *
     * @param supportedAggregationRackSkus the supportedAggregationRackSkus value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withSupportedAggregationRackSkus(List<String> supportedAggregationRackSkus) {
        this.supportedAggregationRackSkus = supportedAggregationRackSkus;
        return this;
    }

    /**
     * Get the supportedComputeRackSkus property: List of the names for the NetworkRackSKus of type Compute available
     * for this SKU.
     *
     * @return the supportedComputeRackSkus value.
     */
    public List<String> supportedComputeRackSkus() {
        return this.supportedComputeRackSkus;
    }

    /**
     * Set the supportedComputeRackSkus property: List of the names for the NetworkRackSKus of type Compute available
     * for this SKU.
     *
     * @param supportedComputeRackSkus the supportedComputeRackSkus value to set.
     * @return the NetworkFabricSkuProperties object itself.
     */
    public NetworkFabricSkuProperties withSupportedComputeRackSkus(List<String> supportedComputeRackSkus) {
        this.supportedComputeRackSkus = supportedComputeRackSkus;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
