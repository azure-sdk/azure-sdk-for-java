// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetworkfabric.models.AnnotationResource;
import com.azure.resourcemanager.managednetworkfabric.models.EnabledDisabledState;
import com.azure.resourcemanager.managednetworkfabric.models.L3IsolationDomainPropertiesExternal;
import com.azure.resourcemanager.managednetworkfabric.models.L3IsolationDomainPropertiesInternal;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** L3IsolationDomainProperties define the resource properties. */
@Fluent
public final class L3IsolationDomainProperties extends AnnotationResource {
    /*
     * Network Fabric ARM resource id.
     */
    @JsonProperty(value = "networkFabricId")
    private String networkFabricId;

    /*
     * L3 Isolation Domain description.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Internal configuration.
     */
    @JsonProperty(value = "internal")
    private L3IsolationDomainPropertiesInternal internal;

    /*
     * External configuration.
     */
    @JsonProperty(value = "external")
    private L3IsolationDomainPropertiesExternal external;

    /*
     * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
     */
    @JsonProperty(value = "disabledOnResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> disabledOnResources;

    /*
     * state. Example: Enabled | Disabled.
     */
    @JsonProperty(value = "administrativeState", access = JsonProperty.Access.WRITE_ONLY)
    private EnabledDisabledState administrativeState;

    /*
     * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
     */
    @JsonProperty(value = "optionBDisabledOnResources", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> optionBDisabledOnResources;

    /*
     * Gets the provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of L3IsolationDomainProperties class. */
    public L3IsolationDomainProperties() {
    }

    /**
     * Get the networkFabricId property: Network Fabric ARM resource id.
     *
     * @return the networkFabricId value.
     */
    public String networkFabricId() {
        return this.networkFabricId;
    }

    /**
     * Set the networkFabricId property: Network Fabric ARM resource id.
     *
     * @param networkFabricId the networkFabricId value to set.
     * @return the L3IsolationDomainProperties object itself.
     */
    public L3IsolationDomainProperties withNetworkFabricId(String networkFabricId) {
        this.networkFabricId = networkFabricId;
        return this;
    }

    /**
     * Get the description property: L3 Isolation Domain description.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: L3 Isolation Domain description.
     *
     * @param description the description value to set.
     * @return the L3IsolationDomainProperties object itself.
     */
    public L3IsolationDomainProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the internal property: Internal configuration.
     *
     * @return the internal value.
     */
    public L3IsolationDomainPropertiesInternal internal() {
        return this.internal;
    }

    /**
     * Set the internal property: Internal configuration.
     *
     * @param internal the internal value to set.
     * @return the L3IsolationDomainProperties object itself.
     */
    public L3IsolationDomainProperties withInternal(L3IsolationDomainPropertiesInternal internal) {
        this.internal = internal;
        return this;
    }

    /**
     * Get the external property: External configuration.
     *
     * @return the external value.
     */
    public L3IsolationDomainPropertiesExternal external() {
        return this.external;
    }

    /**
     * Set the external property: External configuration.
     *
     * @param external the external value to set.
     * @return the L3IsolationDomainProperties object itself.
     */
    public L3IsolationDomainProperties withExternal(L3IsolationDomainPropertiesExternal external) {
        this.external = external;
        return this;
    }

    /**
     * Get the disabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the disabledOnResources value.
     */
    public List<String> disabledOnResources() {
        return this.disabledOnResources;
    }

    /**
     * Get the administrativeState property: state. Example: Enabled | Disabled.
     *
     * @return the administrativeState value.
     */
    public EnabledDisabledState administrativeState() {
        return this.administrativeState;
    }

    /**
     * Get the optionBDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be
     * either entire NetworkFabric or NetworkRack.
     *
     * @return the optionBDisabledOnResources value.
     */
    public List<String> optionBDisabledOnResources() {
        return this.optionBDisabledOnResources;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public L3IsolationDomainProperties withAnnotation(String annotation) {
        super.withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (internal() != null) {
            internal().validate();
        }
        if (external() != null) {
            external().validate();
        }
    }
}
