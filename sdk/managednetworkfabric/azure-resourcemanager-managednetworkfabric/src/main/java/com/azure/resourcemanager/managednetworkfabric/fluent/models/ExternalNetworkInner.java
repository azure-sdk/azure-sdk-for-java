// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetworkfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetworkfabric.models.ExternalNetworkPropertiesBfdConfiguration;
import com.azure.resourcemanager.managednetworkfabric.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Defines the ExternalNetwork item. */
@Fluent
public final class ExternalNetworkInner extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private ExternalNetworkProperties innerProperties = new ExternalNetworkProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of ExternalNetworkInner class. */
    public ExternalNetworkInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private ExternalNetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the mtu property: Maximum Transmission Unit (MTU) for the ExternalNetwork.
     *
     * @return the mtu value.
     */
    public Integer mtu() {
        return this.innerProperties() == null ? null : this.innerProperties().mtu();
    }

    /**
     * Set the mtu property: Maximum Transmission Unit (MTU) for the ExternalNetwork.
     *
     * @param mtu the mtu value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withMtu(Integer mtu) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withMtu(mtu);
        return this;
    }

    /**
     * Get the vlanId property: vlanId. Example: 1001.
     *
     * @return the vlanId value.
     */
    public Integer vlanId() {
        return this.innerProperties() == null ? null : this.innerProperties().vlanId();
    }

    /**
     * Set the vlanId property: vlanId. Example: 1001.
     *
     * @param vlanId the vlanId value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withVlanId(Integer vlanId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withVlanId(vlanId);
        return this;
    }

    /**
     * Get the fabricAsn property: fabricASN. Example: 65048.
     *
     * @return the fabricAsn value.
     */
    public Integer fabricAsn() {
        return this.innerProperties() == null ? null : this.innerProperties().fabricAsn();
    }

    /**
     * Set the fabricAsn property: fabricASN. Example: 65048.
     *
     * @param fabricAsn the fabricAsn value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withFabricAsn(Integer fabricAsn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withFabricAsn(fabricAsn);
        return this;
    }

    /**
     * Get the peerAsn property: peerASN. Example: 65047.
     *
     * @return the peerAsn value.
     */
    public Integer peerAsn() {
        return this.innerProperties() == null ? null : this.innerProperties().peerAsn();
    }

    /**
     * Set the peerAsn property: peerASN. Example: 65047.
     *
     * @param peerAsn the peerAsn value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withPeerAsn(Integer peerAsn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withPeerAsn(peerAsn);
        return this;
    }

    /**
     * Get the bfdConfiguration property: BFD configuration properties.
     *
     * @return the bfdConfiguration value.
     */
    public ExternalNetworkPropertiesBfdConfiguration bfdConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().bfdConfiguration();
    }

    /**
     * Set the bfdConfiguration property: BFD configuration properties.
     *
     * @param bfdConfiguration the bfdConfiguration value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withBfdConfiguration(ExternalNetworkPropertiesBfdConfiguration bfdConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withBfdConfiguration(bfdConfiguration);
        return this;
    }

    /**
     * Get the disabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the disabledOnResources value.
     */
    public List<String> disabledOnResources() {
        return this.innerProperties() == null ? null : this.innerProperties().disabledOnResources();
    }

    /**
     * Get the bgpDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the bgpDisabledOnResources value.
     */
    public List<String> bgpDisabledOnResources() {
        return this.innerProperties() == null ? null : this.innerProperties().bgpDisabledOnResources();
    }

    /**
     * Get the bfdDisabledOnResources property: List of resources the L2 Isolation Domain is disabled on. Can be either
     * entire NetworkFabric or NetworkRack.
     *
     * @return the bfdDisabledOnResources value.
     */
    public List<String> bfdDisabledOnResources() {
        return this.innerProperties() == null ? null : this.innerProperties().bfdDisabledOnResources();
    }

    /**
     * Get the administrativeState property: administrativeState of the network interface. Example: up | down.
     *
     * @return the administrativeState value.
     */
    public String administrativeState() {
        return this.innerProperties() == null ? null : this.innerProperties().administrativeState();
    }

    /**
     * Set the administrativeState property: administrativeState of the network interface. Example: up | down.
     *
     * @param administrativeState the administrativeState value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withAdministrativeState(String administrativeState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withAdministrativeState(administrativeState);
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the primaryIpv4Prefix property: IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the primaryIpv4Prefix value.
     */
    public String primaryIpv4Prefix() {
        return this.innerProperties() == null ? null : this.innerProperties().primaryIpv4Prefix();
    }

    /**
     * Set the primaryIpv4Prefix property: IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param primaryIpv4Prefix the primaryIpv4Prefix value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withPrimaryIpv4Prefix(String primaryIpv4Prefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withPrimaryIpv4Prefix(primaryIpv4Prefix);
        return this;
    }

    /**
     * Get the primaryIpv6Prefix property: IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the primaryIpv6Prefix value.
     */
    public String primaryIpv6Prefix() {
        return this.innerProperties() == null ? null : this.innerProperties().primaryIpv6Prefix();
    }

    /**
     * Set the primaryIpv6Prefix property: IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param primaryIpv6Prefix the primaryIpv6Prefix value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withPrimaryIpv6Prefix(String primaryIpv6Prefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withPrimaryIpv6Prefix(primaryIpv6Prefix);
        return this;
    }

    /**
     * Get the secondaryIpv4Prefix property: Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.2/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the secondaryIpv4Prefix value.
     */
    public String secondaryIpv4Prefix() {
        return this.innerProperties() == null ? null : this.innerProperties().secondaryIpv4Prefix();
    }

    /**
     * Set the secondaryIpv4Prefix property: Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is
     * 172.23.1.2/31. The values can be specified at the time of creation or can be updated afterwards. Any update to
     * the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for
     * Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param secondaryIpv4Prefix the secondaryIpv4Prefix value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withSecondaryIpv4Prefix(String secondaryIpv4Prefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withSecondaryIpv4Prefix(secondaryIpv4Prefix);
        return this;
    }

    /**
     * Get the secondaryIpv6Prefix property: Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @return the secondaryIpv6Prefix value.
     */
    public String secondaryIpv6Prefix() {
        return this.innerProperties() == null ? null : this.innerProperties().secondaryIpv6Prefix();
    }

    /**
     * Set the secondaryIpv6Prefix property: Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is
     * 3FFE:FFFF:0:CD30::a1/126. The values can be specified at the time of creation or can be updated afterwards. Any
     * update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and
     * CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
     *
     * @param secondaryIpv6Prefix the secondaryIpv6Prefix value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withSecondaryIpv6Prefix(String secondaryIpv6Prefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withSecondaryIpv6Prefix(secondaryIpv6Prefix);
        return this;
    }

    /**
     * Get the annotation property: Switch configuration description.
     *
     * @return the annotation value.
     */
    public String annotation() {
        return this.innerProperties() == null ? null : this.innerProperties().annotation();
    }

    /**
     * Set the annotation property: Switch configuration description.
     *
     * @param annotation the annotation value to set.
     * @return the ExternalNetworkInner object itself.
     */
    public ExternalNetworkInner withAnnotation(String annotation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExternalNetworkProperties();
        }
        this.innerProperties().withAnnotation(annotation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model ExternalNetworkInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExternalNetworkInner.class);
}
