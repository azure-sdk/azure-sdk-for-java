// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redisenterprise.models.ClientProtocol;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of a Database on a RedisEnterprise cluster. */
@Fluent
public final class DatabaseProperties {
    /*
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is
     * TLS-encrypted.
     */
    @JsonProperty(value = "clientProtocol")
    private ClientProtocol clientProtocol;

    /*
     * Redis eviction policy - default is VolatileLRU
     */
    @JsonProperty(value = "evictionPolicy", required = true)
    private EvictionPolicy evictionPolicy;

    /*
     * Port number for the database to listen on. The only valid value currently, is 10000. Other values may be valid
     * in the future.
     */
    @JsonProperty(value = "port", required = true)
    private int port;

    /*
     * Provisioning state of the database
     */
    @JsonProperty(value = "provisioningState", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Persistence settings
     */
    @JsonProperty(value = "persistence", required = true)
    private Persistence persistence;

    /** Creates an instance of DatabaseProperties class. */
    public DatabaseProperties() {
    }

    /**
     * Get the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @return the clientProtocol value.
     */
    public ClientProtocol clientProtocol() {
        return this.clientProtocol;
    }

    /**
     * Set the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @param clientProtocol the clientProtocol value to set.
     * @return the DatabaseProperties object itself.
     */
    public DatabaseProperties withClientProtocol(ClientProtocol clientProtocol) {
        this.clientProtocol = clientProtocol;
        return this;
    }

    /**
     * Get the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     *
     * @return the evictionPolicy value.
     */
    public EvictionPolicy evictionPolicy() {
        return this.evictionPolicy;
    }

    /**
     * Set the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     *
     * @param evictionPolicy the evictionPolicy value to set.
     * @return the DatabaseProperties object itself.
     */
    public DatabaseProperties withEvictionPolicy(EvictionPolicy evictionPolicy) {
        this.evictionPolicy = evictionPolicy;
        return this;
    }

    /**
     * Get the port property: Port number for the database to listen on. The only valid value currently, is 10000. Other
     * values may be valid in the future.
     *
     * @return the port value.
     */
    public int port() {
        return this.port;
    }

    /**
     * Set the port property: Port number for the database to listen on. The only valid value currently, is 10000. Other
     * values may be valid in the future.
     *
     * @param port the port value to set.
     * @return the DatabaseProperties object itself.
     */
    public DatabaseProperties withPort(int port) {
        this.port = port;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the database.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the persistence property: Persistence settings.
     *
     * @return the persistence value.
     */
    public Persistence persistence() {
        return this.persistence;
    }

    /**
     * Set the persistence property: Persistence settings.
     *
     * @param persistence the persistence value to set.
     * @return the DatabaseProperties object itself.
     */
    public DatabaseProperties withPersistence(Persistence persistence) {
        this.persistence = persistence;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (evictionPolicy() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property evictionPolicy in model DatabaseProperties"));
        }
        if (persistence() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property persistence in model DatabaseProperties"));
        } else {
            persistence().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabaseProperties.class);
}
