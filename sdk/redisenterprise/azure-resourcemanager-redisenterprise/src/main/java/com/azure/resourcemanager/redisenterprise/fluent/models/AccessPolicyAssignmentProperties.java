// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.redisenterprise.models.AccessPolicyAssignmentPropertiesUser;
import java.io.IOException;

/**
 * Redis Enterprise database access policy assignment properties
 * 
 * Properties of Redis Enterprise database access policy assignment.
 */
@Fluent
public final class AccessPolicyAssignmentProperties implements JsonSerializable<AccessPolicyAssignmentProperties> {
    /*
     * Name of access policy under specific access policy assignment.
     */
    private String accessPolicyName;

    /*
     * The user associated with the access policy.
     */
    private AccessPolicyAssignmentPropertiesUser user;

    /**
     * Creates an instance of AccessPolicyAssignmentProperties class.
     */
    public AccessPolicyAssignmentProperties() {
    }

    /**
     * Get the accessPolicyName property: Name of access policy under specific access policy assignment.
     * 
     * @return the accessPolicyName value.
     */
    public String accessPolicyName() {
        return this.accessPolicyName;
    }

    /**
     * Set the accessPolicyName property: Name of access policy under specific access policy assignment.
     * 
     * @param accessPolicyName the accessPolicyName value to set.
     * @return the AccessPolicyAssignmentProperties object itself.
     */
    public AccessPolicyAssignmentProperties withAccessPolicyName(String accessPolicyName) {
        this.accessPolicyName = accessPolicyName;
        return this;
    }

    /**
     * Get the user property: The user associated with the access policy.
     * 
     * @return the user value.
     */
    public AccessPolicyAssignmentPropertiesUser user() {
        return this.user;
    }

    /**
     * Set the user property: The user associated with the access policy.
     * 
     * @param user the user value to set.
     * @return the AccessPolicyAssignmentProperties object itself.
     */
    public AccessPolicyAssignmentProperties withUser(AccessPolicyAssignmentPropertiesUser user) {
        this.user = user;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (user() != null) {
            user().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessPolicyName", this.accessPolicyName);
        jsonWriter.writeJsonField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessPolicyAssignmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessPolicyAssignmentProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessPolicyAssignmentProperties.
     */
    public static AccessPolicyAssignmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessPolicyAssignmentProperties deserializedAccessPolicyAssignmentProperties
                = new AccessPolicyAssignmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessPolicyName".equals(fieldName)) {
                    deserializedAccessPolicyAssignmentProperties.accessPolicyName = reader.getString();
                } else if ("user".equals(fieldName)) {
                    deserializedAccessPolicyAssignmentProperties.user
                        = AccessPolicyAssignmentPropertiesUser.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessPolicyAssignmentProperties;
        });
    }
}
