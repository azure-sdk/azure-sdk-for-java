// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Proxy resource for getting status of a long running operation. */
@Immutable
public final class OperationStatusResultInner {
    /*
     * ID of the long running operation
     */
    @JsonProperty(value = "id", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * Name of the async operation
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * Current status of the operation. E.g. 'Succeeded', or 'Failed'
     */
    @JsonProperty(value = "status", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /*
     * Progress of the operation, if known
     */
    @JsonProperty(value = "percentComplete", access = JsonProperty.Access.WRITE_ONLY)
    private Object percentComplete;

    /*
     * Resource ID of the resource if known
     */
    @JsonProperty(value = "resourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceId;

    /*
     * Start time if known
     */
    @JsonProperty(value = "startTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startTime;

    /*
     * End time if known
     */
    @JsonProperty(value = "endTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endTime;

    /*
     * Status of child operations if known
     */
    @JsonProperty(value = "operations", access = JsonProperty.Access.WRITE_ONLY)
    private List<OperationStatusResultInner> operations;

    /*
     * Error details if known
     */
    @JsonProperty(value = "errorDetail", access = JsonProperty.Access.WRITE_ONLY)
    private ManagementError errorDetail;

    /** Creates an instance of OperationStatusResultInner class. */
    public OperationStatusResultInner() {
    }

    /**
     * Get the id property: ID of the long running operation.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the async operation.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the status property: Current status of the operation. E.g. 'Succeeded', or 'Failed'.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the percentComplete property: Progress of the operation, if known.
     *
     * @return the percentComplete value.
     */
    public Object percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the resourceId property: Resource ID of the resource if known.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the startTime property: Start time if known.
     *
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: End time if known.
     *
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the operations property: Status of child operations if known.
     *
     * @return the operations value.
     */
    public List<OperationStatusResultInner> operations() {
        return this.operations;
    }

    /**
     * Get the errorDetail property: Error details if known.
     *
     * @return the errorDetail value.
     */
    public ManagementError errorDetail() {
        return this.errorDetail;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operations() != null) {
            operations().forEach(e -> e.validate());
        }
    }
}
