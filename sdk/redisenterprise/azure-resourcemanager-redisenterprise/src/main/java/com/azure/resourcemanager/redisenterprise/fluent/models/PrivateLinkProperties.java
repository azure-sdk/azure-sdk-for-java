// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of a private link. */
@Fluent
public final class PrivateLinkProperties {
    /*
     * The private link resource group id.
     */
    @JsonProperty(value = "groupId", required = true)
    private String groupId;

    /*
     * The private link resource required member names.
     */
    @JsonProperty(value = "requiredMembers", required = true)
    private List<String> requiredMembers;

    /*
     * The private link resource Private link DNS zone name.
     */
    @JsonProperty(value = "requiredZoneNames", required = true)
    private List<String> requiredZoneNames;

    /*
     * The provisioning state of the private link
     */
    @JsonProperty(value = "provisioningState", required = true)
    private ProvisioningState provisioningState;

    /** Creates an instance of PrivateLinkProperties class. */
    public PrivateLinkProperties() {
    }

    /**
     * Get the groupId property: The private link resource group id.
     *
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: The private link resource group id.
     *
     * @param groupId the groupId value to set.
     * @return the PrivateLinkProperties object itself.
     */
    public PrivateLinkProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the requiredMembers property: The private link resource required member names.
     *
     * @return the requiredMembers value.
     */
    public List<String> requiredMembers() {
        return this.requiredMembers;
    }

    /**
     * Set the requiredMembers property: The private link resource required member names.
     *
     * @param requiredMembers the requiredMembers value to set.
     * @return the PrivateLinkProperties object itself.
     */
    public PrivateLinkProperties withRequiredMembers(List<String> requiredMembers) {
        this.requiredMembers = requiredMembers;
        return this;
    }

    /**
     * Get the requiredZoneNames property: The private link resource Private link DNS zone name.
     *
     * @return the requiredZoneNames value.
     */
    public List<String> requiredZoneNames() {
        return this.requiredZoneNames;
    }

    /**
     * Set the requiredZoneNames property: The private link resource Private link DNS zone name.
     *
     * @param requiredZoneNames the requiredZoneNames value to set.
     * @return the PrivateLinkProperties object itself.
     */
    public PrivateLinkProperties withRequiredZoneNames(List<String> requiredZoneNames) {
        this.requiredZoneNames = requiredZoneNames;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the private link.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioning state of the private link.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the PrivateLinkProperties object itself.
     */
    public PrivateLinkProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (groupId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property groupId in model PrivateLinkProperties"));
        }
        if (requiredMembers() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property requiredMembers in model PrivateLinkProperties"));
        }
        if (requiredZoneNames() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property requiredZoneNames in model PrivateLinkProperties"));
        }
        if (provisioningState() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property provisioningState in model PrivateLinkProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrivateLinkProperties.class);
}
