// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redisenterprise.fluent.models.DatabaseInner;

/** An immutable client-side representation of Database. */
public interface Database {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @return the clientProtocol value.
     */
    ClientProtocol clientProtocol();

    /**
     * Gets the port property: Port number for the database to listen on. E.g. 10000.
     *
     * @return the port value.
     */
    Integer port();

    /**
     * Gets the provisioningState property: Provisioning state of the database.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the persistence property: Persistence settings.
     *
     * @return the persistence value.
     */
    Persistence persistence();

    /**
     * Gets the inner com.azure.resourcemanager.redisenterprise.fluent.models.DatabaseInner object.
     *
     * @return the inner object.
     */
    DatabaseInner innerModel();

    /** The entirety of the Database definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The Database definition stages. */
    interface DefinitionStages {
        /** The first stage of the Database definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the Database definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, clusterName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param clusterName Name of cluster.
             * @return the next definition stage.
             */
            WithCreate withExistingRedisEnterprise(String resourceGroupName, String clusterName);
        }
        /**
         * The stage of the Database definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithClientProtocol, DefinitionStages.WithPort, DefinitionStages.WithPersistence {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Database create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Database create(Context context);
        }
        /** The stage of the Database definition allowing to specify clientProtocol. */
        interface WithClientProtocol {
            /**
             * Specifies the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or
             * plaintext redis protocols. Default is TLS-encrypted..
             *
             * @param clientProtocol Specifies whether redis clients can connect using TLS-encrypted or plaintext redis
             *     protocols. Default is TLS-encrypted.
             * @return the next definition stage.
             */
            WithCreate withClientProtocol(ClientProtocol clientProtocol);
        }
        /** The stage of the Database definition allowing to specify port. */
        interface WithPort {
            /**
             * Specifies the port property: Port number for the database to listen on. E.g. 10000..
             *
             * @param port Port number for the database to listen on. E.g. 10000.
             * @return the next definition stage.
             */
            WithCreate withPort(Integer port);
        }
        /** The stage of the Database definition allowing to specify persistence. */
        interface WithPersistence {
            /**
             * Specifies the persistence property: Persistence settings.
             *
             * @param persistence Persistence settings.
             * @return the next definition stage.
             */
            WithCreate withPersistence(Persistence persistence);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Database refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Database refresh(Context context);

    /**
     * Exports RDB file(s).
     *
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void exportRdb(ExportParameters body);

    /**
     * Exports RDB file(s).
     *
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void exportRdb(ExportParameters body, Context context);

    /**
     * Forcibly unlinks one or more databases from a replication group.
     *
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void forceUnlink(ForceUnlinkParameters body);

    /**
     * Forcibly unlinks one or more databases from a replication group.
     *
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void forceUnlink(ForceUnlinkParameters body, Context context);

    /**
     * Forcibly flushes data from all databases in a replication group.
     *
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void fush(FlushParameters body);

    /**
     * Forcibly flushes data from all databases in a replication group.
     *
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void fush(FlushParameters body, Context context);

    /**
     * Imports RDB file(s).
     *
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void importRdb(ImportParameters body);

    /**
     * Imports RDB file(s).
     *
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void importRdb(ImportParameters body, Context context);

    /**
     * Retrieves the access keys for the RedisEnterprise database.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis Enterprise access keys response along with {@link Response}.
     */
    Response<AccessKeys> listKeysWithResponse(Context context);

    /**
     * Retrieves the access keys for the RedisEnterprise database.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis Enterprise access keys response.
     */
    AccessKeys listKeys();

    /**
     * Regenerates an access key for the RedisEnterprise database.
     *
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis Enterprise access keys response.
     */
    AccessKeys regenerateKey(RegenerateKeyParameters body);

    /**
     * Regenerates an access key for the RedisEnterprise database.
     *
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis Enterprise access keys response.
     */
    AccessKeys regenerateKey(RegenerateKeyParameters body, Context context);
}
