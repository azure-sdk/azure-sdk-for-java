// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redisenterprise.fluent.models.DatabaseInner;
import com.azure.resourcemanager.redisenterprise.models.AccessKeys;
import com.azure.resourcemanager.redisenterprise.models.ClientProtocol;
import com.azure.resourcemanager.redisenterprise.models.Database;
import com.azure.resourcemanager.redisenterprise.models.DatabaseCreateOrUpdate;
import com.azure.resourcemanager.redisenterprise.models.ExportParameters;
import com.azure.resourcemanager.redisenterprise.models.FlushParameters;
import com.azure.resourcemanager.redisenterprise.models.ForceUnlinkParameters;
import com.azure.resourcemanager.redisenterprise.models.ImportParameters;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.azure.resourcemanager.redisenterprise.models.ProvisioningState;
import com.azure.resourcemanager.redisenterprise.models.RegenerateKeyParameters;

public final class DatabaseImpl implements Database, Database.Definition {
    private DatabaseInner innerObject;

    private final com.azure.resourcemanager.redisenterprise.RedisEnterpriseManager serviceManager;

    DatabaseImpl(
        DatabaseInner innerObject, com.azure.resourcemanager.redisenterprise.RedisEnterpriseManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ClientProtocol clientProtocol() {
        return this.innerModel().clientProtocol();
    }

    public Integer port() {
        return this.innerModel().port();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Persistence persistence() {
        return this.innerModel().persistence();
    }

    public DatabaseInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.redisenterprise.RedisEnterpriseManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private String databaseName;

    private DatabaseCreateOrUpdate createResource;

    public DatabaseImpl withExistingRedisEnterprise(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    public Database create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .create(resourceGroupName, clusterName, databaseName, createResource, Context.NONE);
        return this;
    }

    public Database create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .create(resourceGroupName, clusterName, databaseName, createResource, context);
        return this;
    }

    DatabaseImpl(String name, com.azure.resourcemanager.redisenterprise.RedisEnterpriseManager serviceManager) {
        this.innerObject = new DatabaseInner();
        this.serviceManager = serviceManager;
        this.databaseName = name;
        this.createResource = new DatabaseCreateOrUpdate();
    }

    public Database refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .getWithResponse(resourceGroupName, clusterName, databaseName, Context.NONE)
                .getValue();
        return this;
    }

    public Database refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDatabases()
                .getWithResponse(resourceGroupName, clusterName, databaseName, context)
                .getValue();
        return this;
    }

    public void exportRdb(ExportParameters body) {
        serviceManager.databases().exportRdb(resourceGroupName, clusterName, databaseName, body);
    }

    public void exportRdb(ExportParameters body, Context context) {
        serviceManager.databases().exportRdb(resourceGroupName, clusterName, databaseName, body, context);
    }

    public void forceUnlink(ForceUnlinkParameters body) {
        serviceManager.databases().forceUnlink(resourceGroupName, clusterName, databaseName, body);
    }

    public void forceUnlink(ForceUnlinkParameters body, Context context) {
        serviceManager.databases().forceUnlink(resourceGroupName, clusterName, databaseName, body, context);
    }

    public void fush(FlushParameters body) {
        serviceManager.databases().fush(resourceGroupName, clusterName, databaseName, body);
    }

    public void fush(FlushParameters body, Context context) {
        serviceManager.databases().fush(resourceGroupName, clusterName, databaseName, body, context);
    }

    public void importRdb(ImportParameters body) {
        serviceManager.databases().importRdb(resourceGroupName, clusterName, databaseName, body);
    }

    public void importRdb(ImportParameters body, Context context) {
        serviceManager.databases().importRdb(resourceGroupName, clusterName, databaseName, body, context);
    }

    public Response<AccessKeys> listKeysWithResponse(Context context) {
        return serviceManager.databases().listKeysWithResponse(resourceGroupName, clusterName, databaseName, context);
    }

    public AccessKeys listKeys() {
        return serviceManager.databases().listKeys(resourceGroupName, clusterName, databaseName);
    }

    public AccessKeys regenerateKey(RegenerateKeyParameters body) {
        return serviceManager.databases().regenerateKey(resourceGroupName, clusterName, databaseName, body);
    }

    public AccessKeys regenerateKey(RegenerateKeyParameters body, Context context) {
        return serviceManager.databases().regenerateKey(resourceGroupName, clusterName, databaseName, body, context);
    }

    public DatabaseImpl withClientProtocol(ClientProtocol clientProtocol) {
        this.createResource.withClientProtocol(clientProtocol);
        return this;
    }

    public DatabaseImpl withPort(Integer port) {
        this.createResource.withPort(port);
        return this;
    }

    public DatabaseImpl withPersistence(Persistence persistence) {
        this.createResource.withPersistence(persistence);
        return this;
    }
}
