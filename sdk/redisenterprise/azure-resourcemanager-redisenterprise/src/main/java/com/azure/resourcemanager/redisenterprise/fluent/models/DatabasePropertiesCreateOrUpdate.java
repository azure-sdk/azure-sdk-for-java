// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redisenterprise.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redisenterprise.models.ClientProtocol;
import com.azure.resourcemanager.redisenterprise.models.EvictionPolicy;
import com.azure.resourcemanager.redisenterprise.models.Persistence;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of a Database on a RedisEnterprise cluster. */
@Fluent
public final class DatabasePropertiesCreateOrUpdate {
    /*
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is
     * TLS-encrypted.
     */
    @JsonProperty(value = "clientProtocol")
    private ClientProtocol clientProtocol;

    /*
     * Redis eviction policy - default is VolatileLRU
     */
    @JsonProperty(value = "evictionPolicy")
    private EvictionPolicy evictionPolicy;

    /*
     * Port number for the database to listen on. E.g. 10000.
     */
    @JsonProperty(value = "port")
    private Integer port;

    /*
     * Persistence settings
     */
    @JsonProperty(value = "persistence", required = true)
    private Persistence persistence;

    /** Creates an instance of DatabasePropertiesCreateOrUpdate class. */
    public DatabasePropertiesCreateOrUpdate() {
    }

    /**
     * Get the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @return the clientProtocol value.
     */
    public ClientProtocol clientProtocol() {
        return this.clientProtocol;
    }

    /**
     * Set the clientProtocol property: Specifies whether redis clients can connect using TLS-encrypted or plaintext
     * redis protocols. Default is TLS-encrypted.
     *
     * @param clientProtocol the clientProtocol value to set.
     * @return the DatabasePropertiesCreateOrUpdate object itself.
     */
    public DatabasePropertiesCreateOrUpdate withClientProtocol(ClientProtocol clientProtocol) {
        this.clientProtocol = clientProtocol;
        return this;
    }

    /**
     * Get the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     *
     * @return the evictionPolicy value.
     */
    public EvictionPolicy evictionPolicy() {
        return this.evictionPolicy;
    }

    /**
     * Set the evictionPolicy property: Redis eviction policy - default is VolatileLRU.
     *
     * @param evictionPolicy the evictionPolicy value to set.
     * @return the DatabasePropertiesCreateOrUpdate object itself.
     */
    public DatabasePropertiesCreateOrUpdate withEvictionPolicy(EvictionPolicy evictionPolicy) {
        this.evictionPolicy = evictionPolicy;
        return this;
    }

    /**
     * Get the port property: Port number for the database to listen on. E.g. 10000.
     *
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: Port number for the database to listen on. E.g. 10000.
     *
     * @param port the port value to set.
     * @return the DatabasePropertiesCreateOrUpdate object itself.
     */
    public DatabasePropertiesCreateOrUpdate withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the persistence property: Persistence settings.
     *
     * @return the persistence value.
     */
    public Persistence persistence() {
        return this.persistence;
    }

    /**
     * Set the persistence property: Persistence settings.
     *
     * @param persistence the persistence value to set.
     * @return the DatabasePropertiesCreateOrUpdate object itself.
     */
    public DatabasePropertiesCreateOrUpdate withPersistence(Persistence persistence) {
        this.persistence = persistence;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (persistence() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property persistence in model DatabasePropertiesCreateOrUpdate"));
        } else {
            persistence().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabasePropertiesCreateOrUpdate.class);
}
