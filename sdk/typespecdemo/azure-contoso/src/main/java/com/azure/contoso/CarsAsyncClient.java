// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.contoso;

import com.azure.contoso.implementation.CarsImpl;
import com.azure.contoso.models.Car;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous ServiceClientClient type.
 */
@ServiceClient(builder = ServiceClientClientBuilder.class, isAsync = true)
public final class CarsAsyncClient {
    @Generated
    private final CarsImpl serviceClient;

    /**
     * Initializes an instance of CarsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    CarsAsyncClient(CarsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetch a Car by its id.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     numberOfDoors: int (Required)
     * }
     * }</pre>
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param carId The id of the vehicle.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a car along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String workspaceName, String carId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(workspaceName, carId, requestOptions);
    }

    /**
     * Create or Update a Car.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     numberOfDoors: int (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     numberOfDoors: int (Required)
     * }
     * }</pre>
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param carId The id of the vehicle.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a car along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateWithResponse(String workspaceName, String carId,
        BinaryData resource, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'createOrUpdate' is 'application/merge-patch+json' and
        // stream-style-serialization is not enabled
        return this.serviceClient.createOrUpdateWithResponseAsync(workspaceName, carId, resource, requestOptions);
    }

    /**
     * List all Cars.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     numberOfDoors: int (Required)
     * }
     * }</pre>
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Car items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(String workspaceName, RequestOptions requestOptions) {
        return this.serviceClient.listAsync(workspaceName, requestOptions);
    }

    /**
     * Fetch a Car by its id.
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param carId The id of the vehicle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a car on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Car> get(String workspaceName, String carId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(workspaceName, carId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(Car.class));
    }

    /**
     * List all Cars.
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Car items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Car> list(String workspaceName) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = list(workspaceName, requestOptions);
        return PagedFlux.create(() -> (continuationToken, pageSize) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationToken == null) ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationToken).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, Car>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(), pagedResponse.getValue().stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(Car.class)).collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
