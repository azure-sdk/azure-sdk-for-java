// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.contoso;

import com.azure.contoso.implementation.MotorcyclesImpl;
import com.azure.contoso.models.Motorcycle;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous ServiceClientClient type.
 */
@ServiceClient(builder = ServiceClientClientBuilder.class)
public final class MotorcyclesClient {
    @Generated
    private final MotorcyclesImpl serviceClient;

    /**
     * Initializes an instance of MotorcyclesClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    MotorcyclesClient(MotorcyclesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetch a Motorcycle by its id.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     hasEngineBars: boolean (Required)
     * }
     * }</pre>
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param motorcycleId The id of the motorcycle.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a motorcycle along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String workspaceName, String motorcycleId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWithResponse(workspaceName, motorcycleId, requestOptions);
    }

    /**
     * Create or Update a Motorcycle.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     hasEngineBars: boolean (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     hasEngineBars: boolean (Required)
     * }
     * }</pre>
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param motorcycleId The id of the motorcycle.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a motorcycle along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrUpdateWithResponse(String workspaceName, String motorcycleId,
        BinaryData resource, RequestOptions requestOptions) {
        // Convenience API is not generated, as operation 'createOrUpdate' is 'application/merge-patch+json' and
        // stream-style-serialization is not enabled
        return this.serviceClient.createOrUpdateWithResponse(workspaceName, motorcycleId, resource, requestOptions);
    }

    /**
     * List all Motorcycle.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     vehicleKind: String(Car/Motorcycle) (Required)
     *     hasEngineBars: boolean (Required)
     * }
     * }</pre>
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Motorcycle items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String workspaceName, RequestOptions requestOptions) {
        return this.serviceClient.list(workspaceName, requestOptions);
    }

    /**
     * Fetch a Motorcycle by its id.
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @param motorcycleId The id of the motorcycle.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a motorcycle.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Motorcycle get(String workspaceName, String motorcycleId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(workspaceName, motorcycleId, requestOptions).getValue().toObject(Motorcycle.class);
    }

    /**
     * List all Motorcycle.
     * 
     * @param workspaceName The name of the Vehicle Workspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Motorcycle items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Motorcycle> list(String workspaceName) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.list(workspaceName, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(Motorcycle.class));
    }
}
