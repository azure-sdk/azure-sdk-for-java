// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisionPayload;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.Schedule;
import com.azure.resourcemanager.computeschedule.models.SubmitCreateRequest;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubmitCreateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubmitCreateRequest model = BinaryData.fromString(
            "{\"schedule\":{\"deadline\":\"2021-07-18T17:10:22Z\",\"deadLine\":\"2021-02-25T06:26:56Z\",\"timezone\":\"uouq\",\"timeZone\":\"rwzwbng\",\"deadlineType\":\"InitiateAt\"},\"resourceConfigParameters\":{\"baseProfile\":\"nwui\",\"resourceOverrides\":[\"zxufiz\"],\"resourceCount\":1448961060,\"resourcePrefix\":\"y\"},\"executionParameters\":{\"optimizationPreference\":\"Availability\",\"retryPolicy\":{\"retryCount\":778150976,\"retryWindowInMinutes\":1323604242}},\"correlationid\":\"wdzuhtymwisd\"}")
            .toObject(SubmitCreateRequest.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T17:10:22Z"), model.schedule().deadline());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T06:26:56Z"), model.schedule().deadLine());
        Assertions.assertEquals("uouq", model.schedule().timezone());
        Assertions.assertEquals("rwzwbng", model.schedule().timeZone());
        Assertions.assertEquals(DeadlineType.INITIATE_AT, model.schedule().deadlineType());
        Assertions.assertEquals("nwui", model.resourceConfigParameters().baseProfile());
        Assertions.assertEquals("zxufiz", model.resourceConfigParameters().resourceOverrides().get(0));
        Assertions.assertEquals(1448961060, model.resourceConfigParameters().resourceCount());
        Assertions.assertEquals("y", model.resourceConfigParameters().resourcePrefix());
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(778150976, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1323604242, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("wdzuhtymwisd", model.correlationid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubmitCreateRequest model = new SubmitCreateRequest()
            .withSchedule(new Schedule().withDeadline(OffsetDateTime.parse("2021-07-18T17:10:22Z"))
                .withDeadLine(OffsetDateTime.parse("2021-02-25T06:26:56Z"))
                .withTimezone("uouq")
                .withTimeZone("rwzwbng")
                .withDeadlineType(DeadlineType.INITIATE_AT))
            .withResourceConfigParameters(new ResourceProvisionPayload().withBaseProfile("nwui")
                .withResourceOverrides(Arrays.asList("zxufiz"))
                .withResourceCount(1448961060)
                .withResourcePrefix("y"))
            .withExecutionParameters(
                new ExecutionParameters().withOptimizationPreference(OptimizationPreference.AVAILABILITY)
                    .withRetryPolicy(new RetryPolicy().withRetryCount(778150976).withRetryWindowInMinutes(1323604242)))
            .withCorrelationid("wdzuhtymwisd");
        model = BinaryData.fromObject(model).toObject(SubmitCreateRequest.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-18T17:10:22Z"), model.schedule().deadline());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-25T06:26:56Z"), model.schedule().deadLine());
        Assertions.assertEquals("uouq", model.schedule().timezone());
        Assertions.assertEquals("rwzwbng", model.schedule().timeZone());
        Assertions.assertEquals(DeadlineType.INITIATE_AT, model.schedule().deadlineType());
        Assertions.assertEquals("nwui", model.resourceConfigParameters().baseProfile());
        Assertions.assertEquals("zxufiz", model.resourceConfigParameters().resourceOverrides().get(0));
        Assertions.assertEquals(1448961060, model.resourceConfigParameters().resourceCount());
        Assertions.assertEquals("y", model.resourceConfigParameters().resourcePrefix());
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(778150976, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1323604242, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("wdzuhtymwisd", model.correlationid());
    }
}
