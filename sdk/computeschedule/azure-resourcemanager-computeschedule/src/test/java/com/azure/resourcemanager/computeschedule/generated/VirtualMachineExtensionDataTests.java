// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.VirtualMachineExtensionData;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineExtensionDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineExtensionData model = BinaryData.fromString(
            "{\"name\":\"qabnmoc\",\"location\":\"ysh\",\"properties\":{},\"tags\":{\"gpbtoqcjmklj\":\"fblj\",\"qajzyulpkudjkr\":\"vbqid\",\"e\":\"khbzhfepgzg\",\"scpai\":\"zloc\"}}")
            .toObject(VirtualMachineExtensionData.class);
        Assertions.assertEquals("qabnmoc", model.name());
        Assertions.assertEquals("ysh", model.location());
        Assertions.assertEquals("fblj", model.tags().get("gpbtoqcjmklj"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineExtensionData model = new VirtualMachineExtensionData().withName("qabnmoc")
            .withLocation("ysh")
            .withProperties(mapOf())
            .withTags(mapOf("gpbtoqcjmklj", "fblj", "qajzyulpkudjkr", "vbqid", "e", "khbzhfepgzg", "scpai", "zloc"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineExtensionData.class);
        Assertions.assertEquals("qabnmoc", model.name());
        Assertions.assertEquals("ysh", model.location());
        Assertions.assertEquals("fblj", model.tags().get("gpbtoqcjmklj"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
