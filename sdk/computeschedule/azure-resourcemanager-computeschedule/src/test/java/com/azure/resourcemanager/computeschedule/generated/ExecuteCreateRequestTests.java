// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ExecuteCreateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisionPayload;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.VirtualMachineExtensionData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteCreateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteCreateRequest model = BinaryData.fromString(
            "{\"resourceConfigParameters\":{\"baseProfile\":\"datqxhocdgeabl\",\"resourceOverrides\":[\"uticndvkaozwyif\",\"yhxhu\",\"okftyxolniwpwcuk\"],\"vmExtensions\":[{\"name\":\"giawx\",\"location\":\"ryplwckbasyypn\",\"properties\":{},\"tags\":{\"nqgoulzndli\":\"gcbacphejkot\",\"dgak\":\"wyqkgfgibm\"}},{\"name\":\"qsrxybzqqed\",\"location\":\"tbciqfouflmm\",\"properties\":{},\"tags\":{\"wtmutduq\":\"modmglougpb\",\"spwgcuertumkdosv\":\"ta\",\"bbjfddgmbmbexp\":\"whbmd\"}},{\"name\":\"bhtqqrolfpfpsa\",\"location\":\"bquxigjy\",\"properties\":{},\"tags\":{\"s\":\"aoyfhrtxilnerkuj\",\"juvf\":\"l\",\"jkcpr\":\"awrlyx\"}},{\"name\":\"nwbxgjvtbvpyssz\",\"location\":\"rujqg\",\"properties\":{},\"tags\":{\"bngui\":\"ouqfprwz\"}}],\"resourceCount\":1015054859,\"resourcePrefix\":\"uizga\"},\"executionParameters\":{\"optimizationPreference\":\"Availability\",\"retryPolicy\":{\"retryCount\":1325323583,\"retryWindowInMinutes\":935270600}},\"correlationid\":\"fihrfi\"}")
            .toObject(ExecuteCreateRequest.class);
        Assertions.assertEquals("datqxhocdgeabl", model.resourceConfigParameters().baseProfile());
        Assertions.assertEquals("uticndvkaozwyif", model.resourceConfigParameters().resourceOverrides().get(0));
        Assertions.assertEquals("giawx", model.resourceConfigParameters().vmExtensions().get(0).name());
        Assertions.assertEquals("ryplwckbasyypn", model.resourceConfigParameters().vmExtensions().get(0).location());
        Assertions.assertEquals("gcbacphejkot",
            model.resourceConfigParameters().vmExtensions().get(0).tags().get("nqgoulzndli"));
        Assertions.assertEquals(1015054859, model.resourceConfigParameters().resourceCount());
        Assertions.assertEquals("uizga", model.resourceConfigParameters().resourcePrefix());
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(1325323583, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(935270600, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("fihrfi", model.correlationid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteCreateRequest model
            = new ExecuteCreateRequest()
                .withResourceConfigParameters(
                    new ResourceProvisionPayload().withBaseProfile("datqxhocdgeabl")
                        .withResourceOverrides(Arrays.asList("uticndvkaozwyif", "yhxhu", "okftyxolniwpwcuk"))
                        .withVmExtensions(Arrays.asList(
                            new VirtualMachineExtensionData().withName("giawx")
                                .withLocation("ryplwckbasyypn")
                                .withProperties(mapOf())
                                .withTags(mapOf("nqgoulzndli", "gcbacphejkot", "dgak", "wyqkgfgibm")),
                            new VirtualMachineExtensionData().withName("qsrxybzqqed")
                                .withLocation("tbciqfouflmm")
                                .withProperties(mapOf())
                                .withTags(mapOf("wtmutduq", "modmglougpb", "spwgcuertumkdosv", "ta", "bbjfddgmbmbexp",
                                    "whbmd")),
                            new VirtualMachineExtensionData().withName("bhtqqrolfpfpsa")
                                .withLocation("bquxigjy")
                                .withProperties(mapOf())
                                .withTags(mapOf("s", "aoyfhrtxilnerkuj", "juvf", "l", "jkcpr", "awrlyx")),
                            new VirtualMachineExtensionData().withName("nwbxgjvtbvpyssz")
                                .withLocation("rujqg")
                                .withProperties(mapOf())
                                .withTags(mapOf("bngui", "ouqfprwz"))))
                        .withResourceCount(1015054859)
                        .withResourcePrefix("uizga"))
                .withExecutionParameters(new ExecutionParameters()
                    .withOptimizationPreference(OptimizationPreference.AVAILABILITY)
                    .withRetryPolicy(new RetryPolicy().withRetryCount(1325323583).withRetryWindowInMinutes(935270600)))
                .withCorrelationid("fihrfi");
        model = BinaryData.fromObject(model).toObject(ExecuteCreateRequest.class);
        Assertions.assertEquals("datqxhocdgeabl", model.resourceConfigParameters().baseProfile());
        Assertions.assertEquals("uticndvkaozwyif", model.resourceConfigParameters().resourceOverrides().get(0));
        Assertions.assertEquals("giawx", model.resourceConfigParameters().vmExtensions().get(0).name());
        Assertions.assertEquals("ryplwckbasyypn", model.resourceConfigParameters().vmExtensions().get(0).location());
        Assertions.assertEquals("gcbacphejkot",
            model.resourceConfigParameters().vmExtensions().get(0).tags().get("nqgoulzndli"));
        Assertions.assertEquals(1015054859, model.resourceConfigParameters().resourceCount());
        Assertions.assertEquals("uizga", model.resourceConfigParameters().resourcePrefix());
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(1325323583, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(935270600, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("fihrfi", model.correlationid());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
