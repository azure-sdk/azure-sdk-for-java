// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisionPayload;
import com.azure.resourcemanager.computeschedule.models.VirtualMachineExtensionData;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceProvisionPayloadTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceProvisionPayload model = BinaryData.fromString(
            "{\"baseProfile\":\"vzwdzuhtymwis\",\"resourceOverrides\":[\"thwxmnteiwaopvkm\",\"jcmmxdcufufsrp\",\"mzidnsezcxtb\"],\"vmExtensions\":[{\"name\":\"fycc\",\"location\":\"ewmdw\",\"properties\":{},\"tags\":{\"boo\":\"ac\",\"ypyqrimzinp\":\"flnrosfqpteehzz\"}},{\"name\":\"swjdkirso\",\"location\":\"qxhcrmn\",\"properties\":{},\"tags\":{\"ifiyipjxsqwpgrj\":\"ckwhds\"}}],\"resourceCount\":1493964267,\"resourcePrefix\":\"orcjxvsnby\"}")
            .toObject(ResourceProvisionPayload.class);
        Assertions.assertEquals("vzwdzuhtymwis", model.baseProfile());
        Assertions.assertEquals("thwxmnteiwaopvkm", model.resourceOverrides().get(0));
        Assertions.assertEquals("fycc", model.vmExtensions().get(0).name());
        Assertions.assertEquals("ewmdw", model.vmExtensions().get(0).location());
        Assertions.assertEquals("ac", model.vmExtensions().get(0).tags().get("boo"));
        Assertions.assertEquals(1493964267, model.resourceCount());
        Assertions.assertEquals("orcjxvsnby", model.resourcePrefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceProvisionPayload model = new ResourceProvisionPayload().withBaseProfile("vzwdzuhtymwis")
            .withResourceOverrides(Arrays.asList("thwxmnteiwaopvkm", "jcmmxdcufufsrp", "mzidnsezcxtb"))
            .withVmExtensions(Arrays.asList(
                new VirtualMachineExtensionData().withName("fycc")
                    .withLocation("ewmdw")
                    .withProperties(mapOf())
                    .withTags(mapOf("boo", "ac", "ypyqrimzinp", "flnrosfqpteehzz")),
                new VirtualMachineExtensionData().withName("swjdkirso")
                    .withLocation("qxhcrmn")
                    .withProperties(mapOf())
                    .withTags(mapOf("ifiyipjxsqwpgrj", "ckwhds"))))
            .withResourceCount(1493964267)
            .withResourcePrefix("orcjxvsnby");
        model = BinaryData.fromObject(model).toObject(ResourceProvisionPayload.class);
        Assertions.assertEquals("vzwdzuhtymwis", model.baseProfile());
        Assertions.assertEquals("thwxmnteiwaopvkm", model.resourceOverrides().get(0));
        Assertions.assertEquals("fycc", model.vmExtensions().get(0).name());
        Assertions.assertEquals("ewmdw", model.vmExtensions().get(0).location());
        Assertions.assertEquals("ac", model.vmExtensions().get(0).tags().get("boo"));
        Assertions.assertEquals(1493964267, model.resourceCount());
        Assertions.assertEquals("orcjxvsnby", model.resourcePrefix());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
