// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ExecuteDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.Resources;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExecuteDeallocateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteDeallocateRequest model = BinaryData.fromString(
            "{\"executionParameters\":{\"optimizationPreference\":\"CostAvailabilityBalanced\",\"retryPolicy\":{\"retryCount\":149639561,\"retryWindowInMinutes\":698730323}},\"resources\":{\"ids\":[\"vtz\",\"kufubljo\",\"xqeofjaeqjhqjba\"]},\"correlationid\":\"v\"}")
            .toObject(ExecuteDeallocateRequest.class);
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(149639561, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(698730323, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("vtz", model.resources().ids().get(0));
        Assertions.assertEquals("v", model.correlationid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteDeallocateRequest model = new ExecuteDeallocateRequest()
            .withExecutionParameters(
                new ExecutionParameters().withOptimizationPreference(OptimizationPreference.COST_AVAILABILITY_BALANCED)
                    .withRetryPolicy(new RetryPolicy().withRetryCount(149639561).withRetryWindowInMinutes(698730323)))
            .withResources(new Resources().withIds(Arrays.asList("vtz", "kufubljo", "xqeofjaeqjhqjba")))
            .withCorrelationid("v");
        model = BinaryData.fromObject(model).toObject(ExecuteDeallocateRequest.class);
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(149639561, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(698730323, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("vtz", model.resources().ids().get(0));
        Assertions.assertEquals("v", model.correlationid());
    }
}
