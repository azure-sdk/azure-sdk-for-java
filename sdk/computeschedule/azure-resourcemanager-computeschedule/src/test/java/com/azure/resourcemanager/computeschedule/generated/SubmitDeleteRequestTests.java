// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.Resources;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.Schedule;
import com.azure.resourcemanager.computeschedule.models.SubmitDeleteRequest;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubmitDeleteRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubmitDeleteRequest model = BinaryData.fromString(
            "{\"schedule\":{\"deadline\":\"2021-10-29T21:44:59Z\",\"deadLine\":\"2021-06-08T12:42:14Z\",\"timezone\":\"nteiwaopv\",\"timeZone\":\"ijcmmx\",\"deadlineType\":\"InitiateAt\"},\"executionParameters\":{\"optimizationPreference\":\"Availability\",\"retryPolicy\":{\"retryCount\":763181495,\"retryWindowInMinutes\":2065467415}},\"resources\":{\"ids\":[\"mzidnsezcxtb\",\"sgfyccsnew\"]},\"correlationid\":\"wzjeiach\",\"forceDeletion\":false}")
            .toObject(SubmitDeleteRequest.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T21:44:59Z"), model.schedule().deadline());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-08T12:42:14Z"), model.schedule().deadLine());
        Assertions.assertEquals("nteiwaopv", model.schedule().timezone());
        Assertions.assertEquals("ijcmmx", model.schedule().timeZone());
        Assertions.assertEquals(DeadlineType.INITIATE_AT, model.schedule().deadlineType());
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(763181495, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(2065467415, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("mzidnsezcxtb", model.resources().ids().get(0));
        Assertions.assertEquals("wzjeiach", model.correlationid());
        Assertions.assertFalse(model.forceDeletion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubmitDeleteRequest model = new SubmitDeleteRequest()
            .withSchedule(new Schedule().withDeadline(OffsetDateTime.parse("2021-10-29T21:44:59Z"))
                .withDeadLine(OffsetDateTime.parse("2021-06-08T12:42:14Z"))
                .withTimezone("nteiwaopv")
                .withTimeZone("ijcmmx")
                .withDeadlineType(DeadlineType.INITIATE_AT))
            .withExecutionParameters(
                new ExecutionParameters().withOptimizationPreference(OptimizationPreference.AVAILABILITY)
                    .withRetryPolicy(new RetryPolicy().withRetryCount(763181495).withRetryWindowInMinutes(2065467415)))
            .withResources(new Resources().withIds(Arrays.asList("mzidnsezcxtb", "sgfyccsnew")))
            .withCorrelationid("wzjeiach")
            .withForceDeletion(false);
        model = BinaryData.fromObject(model).toObject(SubmitDeleteRequest.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T21:44:59Z"), model.schedule().deadline());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-08T12:42:14Z"), model.schedule().deadLine());
        Assertions.assertEquals("nteiwaopv", model.schedule().timezone());
        Assertions.assertEquals("ijcmmx", model.schedule().timeZone());
        Assertions.assertEquals(DeadlineType.INITIATE_AT, model.schedule().deadlineType());
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(763181495, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(2065467415, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("mzidnsezcxtb", model.resources().ids().get(0));
        Assertions.assertEquals("wzjeiach", model.correlationid());
        Assertions.assertFalse(model.forceDeletion());
    }
}
