// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * struct for VMExtension data.
 */
@Fluent
public final class VirtualMachineExtensionData implements JsonSerializable<VirtualMachineExtensionData> {
    /*
     * name of VM extension
     */
    private String name;

    /*
     * location of VM extension
     */
    private String location;

    /*
     * properties for VM extension e.g. publisher, version etc, value can dynamic int32,string, bool etc.
     */
    private Map<String, BinaryData> properties;

    /*
     * Resource tags for creates/updates
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of VirtualMachineExtensionData class.
     */
    public VirtualMachineExtensionData() {
    }

    /**
     * Get the name property: name of VM extension.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: name of VM extension.
     * 
     * @param name the name value to set.
     * @return the VirtualMachineExtensionData object itself.
     */
    public VirtualMachineExtensionData withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the location property: location of VM extension.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: location of VM extension.
     * 
     * @param location the location value to set.
     * @return the VirtualMachineExtensionData object itself.
     */
    public VirtualMachineExtensionData withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the properties property: properties for VM extension e.g. publisher, version etc, value can dynamic
     * int32,string, bool etc.
     * 
     * @return the properties value.
     */
    public Map<String, BinaryData> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: properties for VM extension e.g. publisher, version etc, value can dynamic
     * int32,string, bool etc.
     * 
     * @param properties the properties value to set.
     * @return the VirtualMachineExtensionData object itself.
     */
    public VirtualMachineExtensionData withProperties(Map<String, BinaryData> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the tags property: Resource tags for creates/updates.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags for creates/updates.
     * 
     * @param tags the tags value to set.
     * @return the VirtualMachineExtensionData object itself.
     */
    public VirtualMachineExtensionData withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model VirtualMachineExtensionData"));
        }
        if (properties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property properties in model VirtualMachineExtensionData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineExtensionData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("properties", this.properties,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineExtensionData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineExtensionData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineExtensionData.
     */
    public static VirtualMachineExtensionData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineExtensionData deserializedVirtualMachineExtensionData = new VirtualMachineExtensionData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedVirtualMachineExtensionData.name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    Map<String, BinaryData> properties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedVirtualMachineExtensionData.properties = properties;
                } else if ("location".equals(fieldName)) {
                    deserializedVirtualMachineExtensionData.location = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVirtualMachineExtensionData.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineExtensionData;
        });
    }
}
