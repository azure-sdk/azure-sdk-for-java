// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The schedule details for the user request.
 */
@Fluent
public final class Schedule implements JsonSerializable<Schedule> {
    /*
     * The deadline for the operation
     */
    private OffsetDateTime deadline;

    /*
     * The timezone for the operation
     */
    private String timezone;

    /*
     * The deadlinetype of the operation, this can either be InitiateAt or CompleteBy
     */
    private DeadlineType deadlineType;

    /**
     * Creates an instance of Schedule class.
     */
    public Schedule() {
    }

    /**
     * Get the deadline property: The deadline for the operation.
     * 
     * @return the deadline value.
     */
    public OffsetDateTime deadline() {
        return this.deadline;
    }

    /**
     * Set the deadline property: The deadline for the operation.
     * 
     * @param deadline the deadline value to set.
     * @return the Schedule object itself.
     */
    public Schedule withDeadline(OffsetDateTime deadline) {
        this.deadline = deadline;
        return this;
    }

    /**
     * Get the timezone property: The timezone for the operation.
     * 
     * @return the timezone value.
     */
    public String timezone() {
        return this.timezone;
    }

    /**
     * Set the timezone property: The timezone for the operation.
     * 
     * @param timezone the timezone value to set.
     * @return the Schedule object itself.
     */
    public Schedule withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get the deadlineType property: The deadlinetype of the operation, this can either be InitiateAt or CompleteBy.
     * 
     * @return the deadlineType value.
     */
    public DeadlineType deadlineType() {
        return this.deadlineType;
    }

    /**
     * Set the deadlineType property: The deadlinetype of the operation, this can either be InitiateAt or CompleteBy.
     * 
     * @param deadlineType the deadlineType value to set.
     * @return the Schedule object itself.
     */
    public Schedule withDeadlineType(DeadlineType deadlineType) {
        this.deadlineType = deadlineType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deadline() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property deadline in model Schedule"));
        }
        if (timezone() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property timezone in model Schedule"));
        }
        if (deadlineType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property deadlineType in model Schedule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Schedule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deadline",
            this.deadline == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.deadline));
        jsonWriter.writeStringField("timezone", this.timezone);
        jsonWriter.writeStringField("deadlineType", this.deadlineType == null ? null : this.deadlineType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Schedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Schedule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Schedule.
     */
    public static Schedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Schedule deserializedSchedule = new Schedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deadline".equals(fieldName)) {
                    deserializedSchedule.deadline = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("timezone".equals(fieldName)) {
                    deserializedSchedule.timezone = reader.getString();
                } else if ("deadlineType".equals(fieldName)) {
                    deserializedSchedule.deadlineType = DeadlineType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedule;
        });
    }
}
