// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Resource creation data model.
 */
@Fluent
public final class ResourceProvisionPayload implements JsonSerializable<ResourceProvisionPayload> {
    /*
     * baseProfile, Resource properties that common across all resources
     */
    private String baseProfile;

    /*
     * resourceOverrides, properties per resource that needs to be overwritted from baseProfile
     */
    private List<String> resourceOverrides;

    /*
     * vmExtensions, array of Virtual machine extensions to be added to all the VMs created in this request
     */
    private List<VirtualMachineExtensionData> vmExtensions;

    /*
     * Number of resources to be created
     */
    private int resourceCount;

    /*
     * if resourceOverrides doesn't contain "name", service will create name based of prefix and ResourceCount e.g.
     * resourceprefix-0,resourceprefix-1..
     */
    private String resourcePrefix;

    /**
     * Creates an instance of ResourceProvisionPayload class.
     */
    public ResourceProvisionPayload() {
    }

    /**
     * Get the baseProfile property: baseProfile, Resource properties that common across all resources.
     * 
     * @return the baseProfile value.
     */
    public String baseProfile() {
        return this.baseProfile;
    }

    /**
     * Set the baseProfile property: baseProfile, Resource properties that common across all resources.
     * 
     * @param baseProfile the baseProfile value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withBaseProfile(String baseProfile) {
        this.baseProfile = baseProfile;
        return this;
    }

    /**
     * Get the resourceOverrides property: resourceOverrides, properties per resource that needs to be overwritted from
     * baseProfile.
     * 
     * @return the resourceOverrides value.
     */
    public List<String> resourceOverrides() {
        return this.resourceOverrides;
    }

    /**
     * Set the resourceOverrides property: resourceOverrides, properties per resource that needs to be overwritted from
     * baseProfile.
     * 
     * @param resourceOverrides the resourceOverrides value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withResourceOverrides(List<String> resourceOverrides) {
        this.resourceOverrides = resourceOverrides;
        return this;
    }

    /**
     * Get the vmExtensions property: vmExtensions, array of Virtual machine extensions to be added to all the VMs
     * created in this request.
     * 
     * @return the vmExtensions value.
     */
    public List<VirtualMachineExtensionData> vmExtensions() {
        return this.vmExtensions;
    }

    /**
     * Set the vmExtensions property: vmExtensions, array of Virtual machine extensions to be added to all the VMs
     * created in this request.
     * 
     * @param vmExtensions the vmExtensions value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withVmExtensions(List<VirtualMachineExtensionData> vmExtensions) {
        this.vmExtensions = vmExtensions;
        return this;
    }

    /**
     * Get the resourceCount property: Number of resources to be created.
     * 
     * @return the resourceCount value.
     */
    public int resourceCount() {
        return this.resourceCount;
    }

    /**
     * Set the resourceCount property: Number of resources to be created.
     * 
     * @param resourceCount the resourceCount value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withResourceCount(int resourceCount) {
        this.resourceCount = resourceCount;
        return this;
    }

    /**
     * Get the resourcePrefix property: if resourceOverrides doesn't contain "name", service will create name based of
     * prefix and ResourceCount e.g. resourceprefix-0,resourceprefix-1..
     * 
     * @return the resourcePrefix value.
     */
    public String resourcePrefix() {
        return this.resourcePrefix;
    }

    /**
     * Set the resourcePrefix property: if resourceOverrides doesn't contain "name", service will create name based of
     * prefix and ResourceCount e.g. resourceprefix-0,resourceprefix-1..
     * 
     * @param resourcePrefix the resourcePrefix value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withResourcePrefix(String resourcePrefix) {
        this.resourcePrefix = resourcePrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmExtensions() != null) {
            vmExtensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("resourceCount", this.resourceCount);
        jsonWriter.writeStringField("baseProfile", this.baseProfile);
        jsonWriter.writeArrayField("resourceOverrides", this.resourceOverrides,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vmExtensions", this.vmExtensions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourcePrefix", this.resourcePrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProvisionPayload from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProvisionPayload if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceProvisionPayload.
     */
    public static ResourceProvisionPayload fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProvisionPayload deserializedResourceProvisionPayload = new ResourceProvisionPayload();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceCount".equals(fieldName)) {
                    deserializedResourceProvisionPayload.resourceCount = reader.getInt();
                } else if ("baseProfile".equals(fieldName)) {
                    deserializedResourceProvisionPayload.baseProfile = reader.getString();
                } else if ("resourceOverrides".equals(fieldName)) {
                    List<String> resourceOverrides = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProvisionPayload.resourceOverrides = resourceOverrides;
                } else if ("vmExtensions".equals(fieldName)) {
                    List<VirtualMachineExtensionData> vmExtensions
                        = reader.readArray(reader1 -> VirtualMachineExtensionData.fromJson(reader1));
                    deserializedResourceProvisionPayload.vmExtensions = vmExtensions;
                } else if ("resourcePrefix".equals(fieldName)) {
                    deserializedResourceProvisionPayload.resourcePrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProvisionPayload;
        });
    }
}
