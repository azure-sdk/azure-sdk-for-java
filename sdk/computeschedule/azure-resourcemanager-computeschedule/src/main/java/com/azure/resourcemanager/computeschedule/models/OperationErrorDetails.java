// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * This defines a list of operation errors associated with a unique operationId.
 */
@Immutable
public final class OperationErrorDetails implements JsonSerializable<OperationErrorDetails> {
    /*
     * The error code of the operation
     */
    private String errorCode;

    /*
     * The error details of the operation
     */
    private String errorDetails;

    /*
     * The timestamp of the error occurence
     */
    private OffsetDateTime timestamp;

    /*
     * The compute operationid of the Start/Deallocate/Hibernate request
     */
    private String azureOperationName;

    /**
     * Creates an instance of OperationErrorDetails class.
     */
    private OperationErrorDetails() {
    }

    /**
     * Get the errorCode property: The error code of the operation.
     * 
     * @return the errorCode value.
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorDetails property: The error details of the operation.
     * 
     * @return the errorDetails value.
     */
    public String errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the timestamp property: The timestamp of the error occurence.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the azureOperationName property: The compute operationid of the Start/Deallocate/Hibernate request.
     * 
     * @return the azureOperationName value.
     */
    public String azureOperationName() {
        return this.azureOperationName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errorCode() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property errorCode in model OperationErrorDetails"));
        }
        if (errorDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property errorDetails in model OperationErrorDetails"));
        }
        if (timestamp() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property timestamp in model OperationErrorDetails"));
        }
        if (azureOperationName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureOperationName in model OperationErrorDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OperationErrorDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorDetails", this.errorDetails);
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("azureOperationName", this.azureOperationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationErrorDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationErrorDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperationErrorDetails.
     */
    public static OperationErrorDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationErrorDetails deserializedOperationErrorDetails = new OperationErrorDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedOperationErrorDetails.errorCode = reader.getString();
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedOperationErrorDetails.errorDetails = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedOperationErrorDetails.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("azureOperationName".equals(fieldName)) {
                    deserializedOperationErrorDetails.azureOperationName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationErrorDetails;
        });
    }
}
