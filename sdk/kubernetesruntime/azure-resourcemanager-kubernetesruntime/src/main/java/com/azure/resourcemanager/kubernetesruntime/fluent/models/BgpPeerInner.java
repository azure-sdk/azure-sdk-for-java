// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A BgpPeer resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters).
 */
@Fluent
public final class BgpPeerInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private BgpPeerProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of BgpPeerInner class.
     */
    public BgpPeerInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private BgpPeerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the myAsn property: My ASN.
     * 
     * @return the myAsn value.
     */
    public Integer myAsn() {
        return this.innerProperties() == null ? null : this.innerProperties().myAsn();
    }

    /**
     * Set the myAsn property: My ASN.
     * 
     * @param myAsn the myAsn value to set.
     * @return the BgpPeerInner object itself.
     */
    public BgpPeerInner withMyAsn(Integer myAsn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BgpPeerProperties();
        }
        this.innerProperties().withMyAsn(myAsn);
        return this;
    }

    /**
     * Get the peerAsn property: Peer ASN.
     * 
     * @return the peerAsn value.
     */
    public Integer peerAsn() {
        return this.innerProperties() == null ? null : this.innerProperties().peerAsn();
    }

    /**
     * Set the peerAsn property: Peer ASN.
     * 
     * @param peerAsn the peerAsn value to set.
     * @return the BgpPeerInner object itself.
     */
    public BgpPeerInner withPeerAsn(Integer peerAsn) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BgpPeerProperties();
        }
        this.innerProperties().withPeerAsn(peerAsn);
        return this;
    }

    /**
     * Get the peerAddress property: Peer Address.
     * 
     * @return the peerAddress value.
     */
    public String peerAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().peerAddress();
    }

    /**
     * Set the peerAddress property: Peer Address.
     * 
     * @param peerAddress the peerAddress value to set.
     * @return the BgpPeerInner object itself.
     */
    public BgpPeerInner withPeerAddress(String peerAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new BgpPeerProperties();
        }
        this.innerProperties().withPeerAddress(peerAddress);
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
