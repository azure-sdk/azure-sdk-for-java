// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesruntime.models.AccessMode;
import com.azure.resourcemanager.kubernetesruntime.models.DataResilienceTier;
import com.azure.resourcemanager.kubernetesruntime.models.FailoverTier;
import com.azure.resourcemanager.kubernetesruntime.models.PerformanceTier;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import com.azure.resourcemanager.kubernetesruntime.models.StorageClassTypeProperties;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeBindingMode;
import com.azure.resourcemanager.kubernetesruntime.models.VolumeExpansion;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Details of the StorageClass StorageClass.
 */
@Fluent
public final class StorageClassProperties {
    /*
     * Volume can be expanded or not
     */
    @JsonProperty(value = "allowVolumeExpansion")
    private VolumeExpansion allowVolumeExpansion;

    /*
     * Additional mount options
     */
    @JsonProperty(value = "mountOptions")
    private List<String> mountOptions;

    /*
     * Provisioner name
     */
    @JsonProperty(value = "provisioner")
    private String provisioner;

    /*
     * Binding mode of volumes: Immediate, WaitForFirstConsumer
     */
    @JsonProperty(value = "volumeBindingMode")
    private VolumeBindingMode volumeBindingMode;

    /*
     * The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]
     */
    @JsonProperty(value = "accessModes")
    private List<AccessMode> accessModes;

    /*
     * Allow single data node failure
     */
    @JsonProperty(value = "dataResilience")
    private DataResilienceTier dataResilience;

    /*
     * Failover speed: NA, Slow, Fast
     */
    @JsonProperty(value = "failoverSpeed")
    private FailoverTier failoverSpeed;

    /*
     * Limitations of the storage class
     */
    @JsonProperty(value = "limitations")
    private List<String> limitations;

    /*
     * Performance tier
     */
    @JsonProperty(value = "performance")
    private PerformanceTier performance;

    /*
     * Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use
     */
    @JsonProperty(value = "priority")
    private Long priority;

    /*
     * Properties of the StorageClass
     */
    @JsonProperty(value = "typeProperties", required = true)
    private StorageClassTypeProperties typeProperties;

    /*
     * Resource provision state
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of StorageClassProperties class.
     */
    public StorageClassProperties() {
    }

    /**
     * Get the allowVolumeExpansion property: Volume can be expanded or not.
     * 
     * @return the allowVolumeExpansion value.
     */
    public VolumeExpansion allowVolumeExpansion() {
        return this.allowVolumeExpansion;
    }

    /**
     * Set the allowVolumeExpansion property: Volume can be expanded or not.
     * 
     * @param allowVolumeExpansion the allowVolumeExpansion value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withAllowVolumeExpansion(VolumeExpansion allowVolumeExpansion) {
        this.allowVolumeExpansion = allowVolumeExpansion;
        return this;
    }

    /**
     * Get the mountOptions property: Additional mount options.
     * 
     * @return the mountOptions value.
     */
    public List<String> mountOptions() {
        return this.mountOptions;
    }

    /**
     * Set the mountOptions property: Additional mount options.
     * 
     * @param mountOptions the mountOptions value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withMountOptions(List<String> mountOptions) {
        this.mountOptions = mountOptions;
        return this;
    }

    /**
     * Get the provisioner property: Provisioner name.
     * 
     * @return the provisioner value.
     */
    public String provisioner() {
        return this.provisioner;
    }

    /**
     * Set the provisioner property: Provisioner name.
     * 
     * @param provisioner the provisioner value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withProvisioner(String provisioner) {
        this.provisioner = provisioner;
        return this;
    }

    /**
     * Get the volumeBindingMode property: Binding mode of volumes: Immediate, WaitForFirstConsumer.
     * 
     * @return the volumeBindingMode value.
     */
    public VolumeBindingMode volumeBindingMode() {
        return this.volumeBindingMode;
    }

    /**
     * Set the volumeBindingMode property: Binding mode of volumes: Immediate, WaitForFirstConsumer.
     * 
     * @param volumeBindingMode the volumeBindingMode value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withVolumeBindingMode(VolumeBindingMode volumeBindingMode) {
        this.volumeBindingMode = volumeBindingMode;
        return this;
    }

    /**
     * Get the accessModes property: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
     * 
     * @return the accessModes value.
     */
    public List<AccessMode> accessModes() {
        return this.accessModes;
    }

    /**
     * Set the accessModes property: The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce].
     * 
     * @param accessModes the accessModes value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withAccessModes(List<AccessMode> accessModes) {
        this.accessModes = accessModes;
        return this;
    }

    /**
     * Get the dataResilience property: Allow single data node failure.
     * 
     * @return the dataResilience value.
     */
    public DataResilienceTier dataResilience() {
        return this.dataResilience;
    }

    /**
     * Set the dataResilience property: Allow single data node failure.
     * 
     * @param dataResilience the dataResilience value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withDataResilience(DataResilienceTier dataResilience) {
        this.dataResilience = dataResilience;
        return this;
    }

    /**
     * Get the failoverSpeed property: Failover speed: NA, Slow, Fast.
     * 
     * @return the failoverSpeed value.
     */
    public FailoverTier failoverSpeed() {
        return this.failoverSpeed;
    }

    /**
     * Set the failoverSpeed property: Failover speed: NA, Slow, Fast.
     * 
     * @param failoverSpeed the failoverSpeed value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withFailoverSpeed(FailoverTier failoverSpeed) {
        this.failoverSpeed = failoverSpeed;
        return this;
    }

    /**
     * Get the limitations property: Limitations of the storage class.
     * 
     * @return the limitations value.
     */
    public List<String> limitations() {
        return this.limitations;
    }

    /**
     * Set the limitations property: Limitations of the storage class.
     * 
     * @param limitations the limitations value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withLimitations(List<String> limitations) {
        this.limitations = limitations;
        return this;
    }

    /**
     * Get the performance property: Performance tier.
     * 
     * @return the performance value.
     */
    public PerformanceTier performance() {
        return this.performance;
    }

    /**
     * Set the performance property: Performance tier.
     * 
     * @param performance the performance value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withPerformance(PerformanceTier performance) {
        this.performance = performance;
        return this;
    }

    /**
     * Get the priority property: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1:
     * Never use.
     * 
     * @return the priority value.
     */
    public Long priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Selection priority when multiple storage classes meet the criteria. 0: Highest, -1:
     * Never use.
     * 
     * @param priority the priority value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withPriority(Long priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the typeProperties property: Properties of the StorageClass.
     * 
     * @return the typeProperties value.
     */
    public StorageClassTypeProperties typeProperties() {
        return this.typeProperties;
    }

    /**
     * Set the typeProperties property: Properties of the StorageClass.
     * 
     * @param typeProperties the typeProperties value to set.
     * @return the StorageClassProperties object itself.
     */
    public StorageClassProperties withTypeProperties(StorageClassTypeProperties typeProperties) {
        this.typeProperties = typeProperties;
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (typeProperties() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property typeProperties in model StorageClassProperties"));
        } else {
            typeProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageClassProperties.class);
}
