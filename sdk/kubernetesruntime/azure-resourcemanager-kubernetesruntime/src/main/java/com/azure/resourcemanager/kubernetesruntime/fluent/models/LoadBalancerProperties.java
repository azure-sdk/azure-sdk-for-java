// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.kubernetesruntime.models.AdvertiseMode;
import com.azure.resourcemanager.kubernetesruntime.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Details of the LoadBalancer.
 */
@Fluent
public final class LoadBalancerProperties {
    /*
     * IP Range
     */
    @JsonProperty(value = "addresses", required = true)
    private List<String> addresses;

    /*
     * A dynamic label mapping to select related services. For instance, if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     */
    @JsonProperty(value = "serviceSelector")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> serviceSelector;

    /*
     * Advertise Mode
     */
    @JsonProperty(value = "advertiseMode", required = true)
    private AdvertiseMode advertiseMode;

    /*
     * Resource provision state
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of LoadBalancerProperties class.
     */
    public LoadBalancerProperties() {
    }

    /**
     * Get the addresses property: IP Range.
     * 
     * @return the addresses value.
     */
    public List<String> addresses() {
        return this.addresses;
    }

    /**
     * Set the addresses property: IP Range.
     * 
     * @param addresses the addresses value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withAddresses(List<String> addresses) {
        this.addresses = addresses;
        return this;
    }

    /**
     * Get the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @return the serviceSelector value.
     */
    public Map<String, String> serviceSelector() {
        return this.serviceSelector;
    }

    /**
     * Set the serviceSelector property: A dynamic label mapping to select related services. For instance, if you want
     * to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
     * 
     * @param serviceSelector the serviceSelector value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withServiceSelector(Map<String, String> serviceSelector) {
        this.serviceSelector = serviceSelector;
        return this;
    }

    /**
     * Get the advertiseMode property: Advertise Mode.
     * 
     * @return the advertiseMode value.
     */
    public AdvertiseMode advertiseMode() {
        return this.advertiseMode;
    }

    /**
     * Set the advertiseMode property: Advertise Mode.
     * 
     * @param advertiseMode the advertiseMode value to set.
     * @return the LoadBalancerProperties object itself.
     */
    public LoadBalancerProperties withAdvertiseMode(AdvertiseMode advertiseMode) {
        this.advertiseMode = advertiseMode;
        return this;
    }

    /**
     * Get the provisioningState property: Resource provision state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (addresses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property addresses in model LoadBalancerProperties"));
        }
        if (advertiseMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property advertiseMode in model LoadBalancerProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoadBalancerProperties.class);
}
