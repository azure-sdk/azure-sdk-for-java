// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The properties of NFS StorageClass.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("NFS")
@Fluent
public final class NfsStorageClassTypeProperties extends StorageClassTypeProperties {
    /*
     * NFS Server
     */
    @JsonProperty(value = "server", required = true)
    private String server;

    /*
     * NFS share
     */
    @JsonProperty(value = "share", required = true)
    private String share;

    /*
     * Sub directory under share. If the sub directory doesn't exist, driver will create it
     */
    @JsonProperty(value = "subDir")
    private String subDir;

    /*
     * Mounted folder permissions. Default is 0. If set as non-zero, driver will perform `chmod` after mount
     */
    @JsonProperty(value = "mountPermissions")
    private String mountPermissions;

    /*
     * The action to take when a NFS volume is deleted. Default is Delete
     */
    @JsonProperty(value = "onDelete")
    private NfsDirectoryActionOnVolumeDeletion onDelete;

    /**
     * Creates an instance of NfsStorageClassTypeProperties class.
     */
    public NfsStorageClassTypeProperties() {
    }

    /**
     * Get the server property: NFS Server.
     * 
     * @return the server value.
     */
    public String server() {
        return this.server;
    }

    /**
     * Set the server property: NFS Server.
     * 
     * @param server the server value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withServer(String server) {
        this.server = server;
        return this;
    }

    /**
     * Get the share property: NFS share.
     * 
     * @return the share value.
     */
    public String share() {
        return this.share;
    }

    /**
     * Set the share property: NFS share.
     * 
     * @param share the share value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withShare(String share) {
        this.share = share;
        return this;
    }

    /**
     * Get the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @return the subDir value.
     */
    public String subDir() {
        return this.subDir;
    }

    /**
     * Set the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @param subDir the subDir value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withSubDir(String subDir) {
        this.subDir = subDir;
        return this;
    }

    /**
     * Get the mountPermissions property: Mounted folder permissions. Default is 0. If set as non-zero, driver will
     * perform `chmod` after mount.
     * 
     * @return the mountPermissions value.
     */
    public String mountPermissions() {
        return this.mountPermissions;
    }

    /**
     * Set the mountPermissions property: Mounted folder permissions. Default is 0. If set as non-zero, driver will
     * perform `chmod` after mount.
     * 
     * @param mountPermissions the mountPermissions value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withMountPermissions(String mountPermissions) {
        this.mountPermissions = mountPermissions;
        return this;
    }

    /**
     * Get the onDelete property: The action to take when a NFS volume is deleted. Default is Delete.
     * 
     * @return the onDelete value.
     */
    public NfsDirectoryActionOnVolumeDeletion onDelete() {
        return this.onDelete;
    }

    /**
     * Set the onDelete property: The action to take when a NFS volume is deleted. Default is Delete.
     * 
     * @param onDelete the onDelete value to set.
     * @return the NfsStorageClassTypeProperties object itself.
     */
    public NfsStorageClassTypeProperties withOnDelete(NfsDirectoryActionOnVolumeDeletion onDelete) {
        this.onDelete = onDelete;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (server() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property server in model NfsStorageClassTypeProperties"));
        }
        if (share() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property share in model NfsStorageClassTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NfsStorageClassTypeProperties.class);
}
