// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The model for update a storageClass.
 */
@Fluent
public final class StorageClassTypePropertiesUpdate {
    /*
     * The backing storageclass used to create new storageclass
     */
    @JsonProperty(value = "backingStorageClassName")
    private String backingStorageClassName;

    /*
     * Azure Storage Account Name
     */
    @JsonProperty(value = "azureStorageAccountName")
    private String azureStorageAccountName;

    /*
     * Azure Storage Account Key
     */
    @JsonProperty(value = "azureStorageAccountKey")
    private String azureStorageAccountKey;

    /*
     * NFS Server
     */
    @JsonProperty(value = "server")
    private String server;

    /*
     * NFS share
     */
    @JsonProperty(value = "share")
    private String share;

    /*
     * Sub directory under share. If the sub directory doesn't exist, driver will create it
     */
    @JsonProperty(value = "subDir")
    private String subDir;

    /*
     * Mounted folder permissions. Default is 0. If set as non-zero, driver will perform `chmod` after mount
     */
    @JsonProperty(value = "mountPermissions")
    private String mountPermissions;

    /*
     * The action to take when a NFS volume is deleted. Default is Delete
     */
    @JsonProperty(value = "onDelete")
    private NfsDirectoryActionOnVolumeDeletion onDelete;

    /*
     * SMB Source
     */
    @JsonProperty(value = "source")
    private String source;

    /*
     * Server username
     */
    @JsonProperty(value = "username")
    private String username;

    /*
     * Server password
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Server domain
     */
    @JsonProperty(value = "domain")
    private String domain;

    /**
     * Creates an instance of StorageClassTypePropertiesUpdate class.
     */
    public StorageClassTypePropertiesUpdate() {
    }

    /**
     * Get the backingStorageClassName property: The backing storageclass used to create new storageclass.
     * 
     * @return the backingStorageClassName value.
     */
    public String backingStorageClassName() {
        return this.backingStorageClassName;
    }

    /**
     * Set the backingStorageClassName property: The backing storageclass used to create new storageclass.
     * 
     * @param backingStorageClassName the backingStorageClassName value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withBackingStorageClassName(String backingStorageClassName) {
        this.backingStorageClassName = backingStorageClassName;
        return this;
    }

    /**
     * Get the azureStorageAccountName property: Azure Storage Account Name.
     * 
     * @return the azureStorageAccountName value.
     */
    public String azureStorageAccountName() {
        return this.azureStorageAccountName;
    }

    /**
     * Set the azureStorageAccountName property: Azure Storage Account Name.
     * 
     * @param azureStorageAccountName the azureStorageAccountName value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withAzureStorageAccountName(String azureStorageAccountName) {
        this.azureStorageAccountName = azureStorageAccountName;
        return this;
    }

    /**
     * Get the azureStorageAccountKey property: Azure Storage Account Key.
     * 
     * @return the azureStorageAccountKey value.
     */
    public String azureStorageAccountKey() {
        return this.azureStorageAccountKey;
    }

    /**
     * Set the azureStorageAccountKey property: Azure Storage Account Key.
     * 
     * @param azureStorageAccountKey the azureStorageAccountKey value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withAzureStorageAccountKey(String azureStorageAccountKey) {
        this.azureStorageAccountKey = azureStorageAccountKey;
        return this;
    }

    /**
     * Get the server property: NFS Server.
     * 
     * @return the server value.
     */
    public String server() {
        return this.server;
    }

    /**
     * Set the server property: NFS Server.
     * 
     * @param server the server value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withServer(String server) {
        this.server = server;
        return this;
    }

    /**
     * Get the share property: NFS share.
     * 
     * @return the share value.
     */
    public String share() {
        return this.share;
    }

    /**
     * Set the share property: NFS share.
     * 
     * @param share the share value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withShare(String share) {
        this.share = share;
        return this;
    }

    /**
     * Get the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @return the subDir value.
     */
    public String subDir() {
        return this.subDir;
    }

    /**
     * Set the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @param subDir the subDir value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withSubDir(String subDir) {
        this.subDir = subDir;
        return this;
    }

    /**
     * Get the mountPermissions property: Mounted folder permissions. Default is 0. If set as non-zero, driver will
     * perform `chmod` after mount.
     * 
     * @return the mountPermissions value.
     */
    public String mountPermissions() {
        return this.mountPermissions;
    }

    /**
     * Set the mountPermissions property: Mounted folder permissions. Default is 0. If set as non-zero, driver will
     * perform `chmod` after mount.
     * 
     * @param mountPermissions the mountPermissions value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withMountPermissions(String mountPermissions) {
        this.mountPermissions = mountPermissions;
        return this;
    }

    /**
     * Get the onDelete property: The action to take when a NFS volume is deleted. Default is Delete.
     * 
     * @return the onDelete value.
     */
    public NfsDirectoryActionOnVolumeDeletion onDelete() {
        return this.onDelete;
    }

    /**
     * Set the onDelete property: The action to take when a NFS volume is deleted. Default is Delete.
     * 
     * @param onDelete the onDelete value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withOnDelete(NfsDirectoryActionOnVolumeDeletion onDelete) {
        this.onDelete = onDelete;
        return this;
    }

    /**
     * Get the source property: SMB Source.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: SMB Source.
     * 
     * @param source the source value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the username property: Server username.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Server username.
     * 
     * @param username the username value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Server password.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Server password.
     * 
     * @param password the password value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the domain property: Server domain.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Server domain.
     * 
     * @param domain the domain value to set.
     * @return the StorageClassTypePropertiesUpdate object itself.
     */
    public StorageClassTypePropertiesUpdate withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
