// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kubernetesruntime.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The properties of SMB StorageClass.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("SMB")
@Fluent
public final class SmbStorageClassTypeProperties extends StorageClassTypeProperties {
    /*
     * SMB Source
     */
    @JsonProperty(value = "source", required = true)
    private String source;

    /*
     * Sub directory under share. If the sub directory doesn't exist, driver will create it
     */
    @JsonProperty(value = "subDir")
    private String subDir;

    /*
     * Server username
     */
    @JsonProperty(value = "username")
    private String username;

    /*
     * Server password
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Server domain
     */
    @JsonProperty(value = "domain")
    private String domain;

    /**
     * Creates an instance of SmbStorageClassTypeProperties class.
     */
    public SmbStorageClassTypeProperties() {
    }

    /**
     * Get the source property: SMB Source.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: SMB Source.
     * 
     * @param source the source value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    public SmbStorageClassTypeProperties withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @return the subDir value.
     */
    public String subDir() {
        return this.subDir;
    }

    /**
     * Set the subDir property: Sub directory under share. If the sub directory doesn't exist, driver will create it.
     * 
     * @param subDir the subDir value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    public SmbStorageClassTypeProperties withSubDir(String subDir) {
        this.subDir = subDir;
        return this;
    }

    /**
     * Get the username property: Server username.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Server username.
     * 
     * @param username the username value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    public SmbStorageClassTypeProperties withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Server password.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Server password.
     * 
     * @param password the password value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    public SmbStorageClassTypeProperties withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the domain property: Server domain.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Server domain.
     * 
     * @param domain the domain value to set.
     * @return the SmbStorageClassTypeProperties object itself.
     */
    public SmbStorageClassTypeProperties withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (source() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property source in model SmbStorageClassTypeProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SmbStorageClassTypeProperties.class);
}
