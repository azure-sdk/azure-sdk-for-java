// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionObject;
import com.azure.resourcemanager.hybridonboarding.models.ProvisioningState;
import com.azure.resourcemanager.hybridonboarding.models.ScenarioProfileObject;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The properties of Extension Manager resource.
 */
@Fluent
public final class ExtensionManagerProperties {
    /*
     * Provisioning state of Extension Manager resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * ARM ID of the custom location resource deployed on the Onboarding Appliance
     */
    @JsonProperty(value = "extendedLocation", required = true)
    private String extendedLocation;

    /*
     * ARM ID of the host associated with the extended location
     */
    @JsonProperty(value = "hostResourceId", access = JsonProperty.Access.WRITE_ONLY)
    private String hostResourceId;

    /*
     * Scenario profile of the extension manager resource.
     */
    @JsonProperty(value = "scenarioProfile")
    private List<ScenarioProfileObject> scenarioProfile;

    /*
     * Extension profile of the extension manager resource
     */
    @JsonProperty(value = "extensionProfile", access = JsonProperty.Access.WRITE_ONLY)
    private List<ExtensionObject> extensionProfile;

    /**
     * Creates an instance of ExtensionManagerProperties class.
     */
    public ExtensionManagerProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state of Extension Manager resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the extendedLocation property: ARM ID of the custom location resource deployed on the Onboarding Appliance.
     * 
     * @return the extendedLocation value.
     */
    public String extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: ARM ID of the custom location resource deployed on the Onboarding Appliance.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the ExtensionManagerProperties object itself.
     */
    public ExtensionManagerProperties withExtendedLocation(String extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the hostResourceId property: ARM ID of the host associated with the extended location.
     * 
     * @return the hostResourceId value.
     */
    public String hostResourceId() {
        return this.hostResourceId;
    }

    /**
     * Get the scenarioProfile property: Scenario profile of the extension manager resource.
     * 
     * @return the scenarioProfile value.
     */
    public List<ScenarioProfileObject> scenarioProfile() {
        return this.scenarioProfile;
    }

    /**
     * Set the scenarioProfile property: Scenario profile of the extension manager resource.
     * 
     * @param scenarioProfile the scenarioProfile value to set.
     * @return the ExtensionManagerProperties object itself.
     */
    public ExtensionManagerProperties withScenarioProfile(List<ScenarioProfileObject> scenarioProfile) {
        this.scenarioProfile = scenarioProfile;
        return this;
    }

    /**
     * Get the extensionProfile property: Extension profile of the extension manager resource.
     * 
     * @return the extensionProfile value.
     */
    public List<ExtensionObject> extensionProfile() {
        return this.extensionProfile;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedLocation() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property extendedLocation in model ExtensionManagerProperties"));
        }
        if (scenarioProfile() != null) {
            scenarioProfile().forEach(e -> e.validate());
        }
        if (extensionProfile() != null) {
            extensionProfile().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExtensionManagerProperties.class);
}
