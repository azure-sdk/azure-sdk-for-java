// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Properties of a Extension Manager that can be patched.
 */
@Fluent
public final class ExtensionManagerPatch {
    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> tags;

    /*
     * Managed Identity of extension manager resource
     */
    @JsonProperty(value = "identity")
    private ManagedIdentityUpdate identity;

    /**
     * Creates an instance of ExtensionManagerPatch class.
     */
    public ExtensionManagerPatch() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the ExtensionManagerPatch object itself.
     */
    public ExtensionManagerPatch withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the identity property: Managed Identity of extension manager resource.
     * 
     * @return the identity value.
     */
    public ManagedIdentityUpdate identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed Identity of extension manager resource.
     * 
     * @param identity the identity value to set.
     * @return the ExtensionManagerPatch object itself.
     */
    public ExtensionManagerPatch withIdentity(ManagedIdentityUpdate identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }
}
