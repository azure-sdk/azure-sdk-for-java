// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridonboarding.fluent.ExtensionManagersClient;
import com.azure.resourcemanager.hybridonboarding.fluent.models.ExtensionManagerInner;
import com.azure.resourcemanager.hybridonboarding.models.AddCustomLocationDetails;
import com.azure.resourcemanager.hybridonboarding.models.DisableExtensionsRequestDetails;
import com.azure.resourcemanager.hybridonboarding.models.EnableExtensionsRequestDetails;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionManager;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionManagers;
import com.azure.resourcemanager.hybridonboarding.models.RemoveCustomLocationDetails;
import java.util.List;

public final class ExtensionManagersImpl implements ExtensionManagers {
    private static final ClientLogger LOGGER = new ClientLogger(ExtensionManagersImpl.class);

    private final ExtensionManagersClient innerClient;

    private final com.azure.resourcemanager.hybridonboarding.HybridonboardingManager serviceManager;

    public ExtensionManagersImpl(ExtensionManagersClient innerClient,
        com.azure.resourcemanager.hybridonboarding.HybridonboardingManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ExtensionManager> list() {
        PagedIterable<ExtensionManagerInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionManagerImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionManager> list(Context context) {
        PagedIterable<ExtensionManagerInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionManagerImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionManager> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ExtensionManagerInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionManagerImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionManager> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ExtensionManagerInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionManagerImpl(inner1, this.manager()));
    }

    public Response<ExtensionManager> getByResourceGroupWithResponse(String resourceGroupName,
        String extensionManagerName, Context context) {
        Response<ExtensionManagerInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, extensionManagerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ExtensionManagerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExtensionManager getByResourceGroup(String resourceGroupName, String extensionManagerName) {
        ExtensionManagerInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, extensionManagerName);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String extensionManagerName) {
        this.serviceClient().delete(resourceGroupName, extensionManagerName);
    }

    public void delete(String resourceGroupName, String extensionManagerName, Context context) {
        this.serviceClient().delete(resourceGroupName, extensionManagerName, context);
    }

    public ExtensionManager addCustomLocation(String resourceGroupName, String extensionManagerName,
        List<AddCustomLocationDetails> body) {
        ExtensionManagerInner inner
            = this.serviceClient().addCustomLocation(resourceGroupName, extensionManagerName, body);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager addCustomLocation(String resourceGroupName, String extensionManagerName,
        List<AddCustomLocationDetails> body, Context context) {
        ExtensionManagerInner inner
            = this.serviceClient().addCustomLocation(resourceGroupName, extensionManagerName, body, context);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager disableExtensions(String resourceGroupName, String extensionManagerName,
        List<DisableExtensionsRequestDetails> body) {
        ExtensionManagerInner inner
            = this.serviceClient().disableExtensions(resourceGroupName, extensionManagerName, body);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager disableExtensions(String resourceGroupName, String extensionManagerName,
        List<DisableExtensionsRequestDetails> body, Context context) {
        ExtensionManagerInner inner
            = this.serviceClient().disableExtensions(resourceGroupName, extensionManagerName, body, context);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager enableExtensions(String resourceGroupName, String extensionManagerName,
        List<EnableExtensionsRequestDetails> body) {
        ExtensionManagerInner inner
            = this.serviceClient().enableExtensions(resourceGroupName, extensionManagerName, body);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager enableExtensions(String resourceGroupName, String extensionManagerName,
        List<EnableExtensionsRequestDetails> body, Context context) {
        ExtensionManagerInner inner
            = this.serviceClient().enableExtensions(resourceGroupName, extensionManagerName, body, context);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager removeCustomLocation(String resourceGroupName, String extensionManagerName,
        List<RemoveCustomLocationDetails> body) {
        ExtensionManagerInner inner
            = this.serviceClient().removeCustomLocation(resourceGroupName, extensionManagerName, body);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager removeCustomLocation(String resourceGroupName, String extensionManagerName,
        List<RemoveCustomLocationDetails> body, Context context) {
        ExtensionManagerInner inner
            = this.serviceClient().removeCustomLocation(resourceGroupName, extensionManagerName, body, context);
        if (inner != null) {
            return new ExtensionManagerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExtensionManager getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String extensionManagerName = ResourceManagerUtils.getValueFromIdByName(id, "extensionManagers");
        if (extensionManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'extensionManagers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, extensionManagerName, Context.NONE).getValue();
    }

    public Response<ExtensionManager> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String extensionManagerName = ResourceManagerUtils.getValueFromIdByName(id, "extensionManagers");
        if (extensionManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'extensionManagers'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, extensionManagerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String extensionManagerName = ResourceManagerUtils.getValueFromIdByName(id, "extensionManagers");
        if (extensionManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'extensionManagers'.", id)));
        }
        this.delete(resourceGroupName, extensionManagerName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String extensionManagerName = ResourceManagerUtils.getValueFromIdByName(id, "extensionManagers");
        if (extensionManagerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'extensionManagers'.", id)));
        }
        this.delete(resourceGroupName, extensionManagerName, context);
    }

    private ExtensionManagersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridonboarding.HybridonboardingManager manager() {
        return this.serviceManager;
    }

    public ExtensionManagerImpl define(String name) {
        return new ExtensionManagerImpl(name, this.manager());
    }
}
