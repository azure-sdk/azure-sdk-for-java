// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Request body for removing custom location from extension.
 */
@Fluent
public final class RemoveCustomLocationDetails {
    /*
     * Name of the extension
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * ARM ID of the custom location
     */
    @JsonProperty(value = "customLocationId", required = true)
    private String customLocationId;

    /**
     * Creates an instance of RemoveCustomLocationDetails class.
     */
    public RemoveCustomLocationDetails() {
    }

    /**
     * Get the name property: Name of the extension.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the extension.
     * 
     * @param name the name value to set.
     * @return the RemoveCustomLocationDetails object itself.
     */
    public RemoveCustomLocationDetails withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the customLocationId property: ARM ID of the custom location.
     * 
     * @return the customLocationId value.
     */
    public String customLocationId() {
        return this.customLocationId;
    }

    /**
     * Set the customLocationId property: ARM ID of the custom location.
     * 
     * @param customLocationId the customLocationId value to set.
     * @return the RemoveCustomLocationDetails object itself.
     */
    public RemoveCustomLocationDetails withCustomLocationId(String customLocationId) {
        this.customLocationId = customLocationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property name in model RemoveCustomLocationDetails"));
        }
        if (customLocationId() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property customLocationId in model RemoveCustomLocationDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RemoveCustomLocationDetails.class);
}
