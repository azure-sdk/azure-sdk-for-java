// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridonboarding.fluent.models.ExtensionManagerInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of ExtensionManager.
 */
public interface ExtensionManager {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the identity property: Managed Identity of extension manager resource.
     * 
     * @return the identity value.
     */
    ManagedIdentity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: Provisioning state of Extension Manager resource.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the extendedLocation property: ARM ID of the custom location resource deployed on the Onboarding Appliance.
     * 
     * @return the extendedLocation value.
     */
    String extendedLocation();

    /**
     * Gets the hostResourceId property: ARM ID of the host associated with the extended location.
     * 
     * @return the hostResourceId value.
     */
    String hostResourceId();

    /**
     * Gets the scenarioProfile property: Scenario profile of the extension manager resource.
     * 
     * @return the scenarioProfile value.
     */
    List<ScenarioProfileObject> scenarioProfile();

    /**
     * Gets the extensionProfile property: Extension profile of the extension manager resource.
     * 
     * @return the extensionProfile value.
     */
    List<ExtensionObject> extensionProfile();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.hybridonboarding.fluent.models.ExtensionManagerInner object.
     * 
     * @return the inner object.
     */
    ExtensionManagerInner innerModel();

    /**
     * The entirety of the ExtensionManager definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithIdentity, DefinitionStages.WithCreate {
    }

    /**
     * The ExtensionManager definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the ExtensionManager definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the ExtensionManager definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the ExtensionManager definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithIdentity withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the ExtensionManager definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: Managed Identity of extension manager resource.
             * 
             * @param identity Managed Identity of extension manager resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(ManagedIdentity identity);
        }

        /**
         * The stage of the ExtensionManager definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithExtendedLocation,
            DefinitionStages.WithScenarioProfile {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            ExtensionManager create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ExtensionManager create(Context context);
        }

        /**
         * The stage of the ExtensionManager definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ExtensionManager definition allowing to specify extendedLocation.
         */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: ARM ID of the custom location resource deployed on the
             * Onboarding Appliance.
             * 
             * @param extendedLocation ARM ID of the custom location resource deployed on the Onboarding Appliance.
             * @return the next definition stage.
             */
            WithCreate withExtendedLocation(String extendedLocation);
        }

        /**
         * The stage of the ExtensionManager definition allowing to specify scenarioProfile.
         */
        interface WithScenarioProfile {
            /**
             * Specifies the scenarioProfile property: Scenario profile of the extension manager resource..
             * 
             * @param scenarioProfile Scenario profile of the extension manager resource.
             * @return the next definition stage.
             */
            WithCreate withScenarioProfile(List<ScenarioProfileObject> scenarioProfile);
        }
    }

    /**
     * Begins update for the ExtensionManager resource.
     * 
     * @return the stage of resource update.
     */
    ExtensionManager.Update update();

    /**
     * The template for ExtensionManager update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithIdentity {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        ExtensionManager apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ExtensionManager apply(Context context);
    }

    /**
     * The ExtensionManager update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ExtensionManager update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ExtensionManager update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: Managed Identity of extension manager resource.
             * 
             * @param identity Managed Identity of extension manager resource.
             * @return the next definition stage.
             */
            Update withIdentity(ManagedIdentityUpdate identity);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    ExtensionManager refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ExtensionManager refresh(Context context);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager addCustomLocation(List<AddCustomLocationDetails> body);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager addCustomLocation(List<AddCustomLocationDetails> body, Context context);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager disableExtensions(List<DisableExtensionsRequestDetails> body);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager disableExtensions(List<DisableExtensionsRequestDetails> body, Context context);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager enableExtensions(List<EnableExtensionsRequestDetails> body);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager enableExtensions(List<EnableExtensionsRequestDetails> body, Context context);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager removeCustomLocation(List<RemoveCustomLocationDetails> body);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager removeCustomLocation(List<RemoveCustomLocationDetails> body, Context context);
}
