// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridonboarding.fluent.models.ExtensionManagerInner;
import com.azure.resourcemanager.hybridonboarding.models.AddCustomLocationDetails;
import com.azure.resourcemanager.hybridonboarding.models.DisableExtensionsRequestDetails;
import com.azure.resourcemanager.hybridonboarding.models.EnableExtensionsRequestDetails;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionManagerPatch;
import com.azure.resourcemanager.hybridonboarding.models.RemoveCustomLocationDetails;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in ExtensionManagersClient.
 */
public interface ExtensionManagersClient {
    /**
     * List ExtensionManager resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExtensionManagerInner> list();

    /**
     * List ExtensionManager resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExtensionManagerInner> list(Context context);

    /**
     * List ExtensionManager resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExtensionManagerInner> listByResourceGroup(String resourceGroupName);

    /**
     * List ExtensionManager resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExtensionManagerInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExtensionManager along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ExtensionManagerInner> getByResourceGroupWithResponse(String resourceGroupName,
        String extensionManagerName, Context context);

    /**
     * Get a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExtensionManager.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner getByResourceGroup(String resourceGroupName, String extensionManagerName);

    /**
     * Create a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginCreateOrUpdate(String resourceGroupName,
        String extensionManagerName, ExtensionManagerInner resource);

    /**
     * Create a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginCreateOrUpdate(String resourceGroupName,
        String extensionManagerName, ExtensionManagerInner resource, Context context);

    /**
     * Create a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner createOrUpdate(String resourceGroupName, String extensionManagerName,
        ExtensionManagerInner resource);

    /**
     * Create a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner createOrUpdate(String resourceGroupName, String extensionManagerName,
        ExtensionManagerInner resource, Context context);

    /**
     * Update a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginUpdate(String resourceGroupName,
        String extensionManagerName, ExtensionManagerPatch properties);

    /**
     * Update a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginUpdate(String resourceGroupName,
        String extensionManagerName, ExtensionManagerPatch properties, Context context);

    /**
     * Update a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner update(String resourceGroupName, String extensionManagerName,
        ExtensionManagerPatch properties);

    /**
     * Update a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner update(String resourceGroupName, String extensionManagerName,
        ExtensionManagerPatch properties, Context context);

    /**
     * Delete a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String extensionManagerName);

    /**
     * Delete a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String extensionManagerName,
        Context context);

    /**
     * Delete a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String extensionManagerName);

    /**
     * Delete a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String extensionManagerName, Context context);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginAddCustomLocation(
        String resourceGroupName, String extensionManagerName, List<AddCustomLocationDetails> body);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginAddCustomLocation(
        String resourceGroupName, String extensionManagerName, List<AddCustomLocationDetails> body, Context context);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner addCustomLocation(String resourceGroupName, String extensionManagerName,
        List<AddCustomLocationDetails> body);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner addCustomLocation(String resourceGroupName, String extensionManagerName,
        List<AddCustomLocationDetails> body, Context context);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginDisableExtensions(
        String resourceGroupName, String extensionManagerName, List<DisableExtensionsRequestDetails> body);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginDisableExtensions(
        String resourceGroupName, String extensionManagerName, List<DisableExtensionsRequestDetails> body,
        Context context);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner disableExtensions(String resourceGroupName, String extensionManagerName,
        List<DisableExtensionsRequestDetails> body);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner disableExtensions(String resourceGroupName, String extensionManagerName,
        List<DisableExtensionsRequestDetails> body, Context context);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginEnableExtensions(String resourceGroupName,
        String extensionManagerName, List<EnableExtensionsRequestDetails> body);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginEnableExtensions(String resourceGroupName,
        String extensionManagerName, List<EnableExtensionsRequestDetails> body, Context context);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner enableExtensions(String resourceGroupName, String extensionManagerName,
        List<EnableExtensionsRequestDetails> body);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner enableExtensions(String resourceGroupName, String extensionManagerName,
        List<EnableExtensionsRequestDetails> body, Context context);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginRemoveCustomLocation(
        String resourceGroupName, String extensionManagerName, List<RemoveCustomLocationDetails> body);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExtensionManagerInner>, ExtensionManagerInner> beginRemoveCustomLocation(
        String resourceGroupName, String extensionManagerName, List<RemoveCustomLocationDetails> body, Context context);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner removeCustomLocation(String resourceGroupName, String extensionManagerName,
        List<RemoveCustomLocationDetails> body);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExtensionManagerInner removeCustomLocation(String resourceGroupName, String extensionManagerName,
        List<RemoveCustomLocationDetails> body, Context context);
}
