// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionObject;
import com.azure.resourcemanager.hybridonboarding.models.ManagedIdentity;
import com.azure.resourcemanager.hybridonboarding.models.ProvisioningState;
import com.azure.resourcemanager.hybridonboarding.models.ScenarioProfileObject;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Extension Manager Resource.
 */
@Fluent
public final class ExtensionManagerInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    @JsonProperty(value = "properties")
    private ExtensionManagerProperties innerProperties;

    /*
     * Managed Identity of extension manager resource
     */
    @JsonProperty(value = "identity", required = true)
    private ManagedIdentity identity;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of ExtensionManagerInner class.
     */
    public ExtensionManagerInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private ExtensionManagerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: Managed Identity of extension manager resource.
     * 
     * @return the identity value.
     */
    public ManagedIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed Identity of extension manager resource.
     * 
     * @param identity the identity value to set.
     * @return the ExtensionManagerInner object itself.
     */
    public ExtensionManagerInner withIdentity(ManagedIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExtensionManagerInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExtensionManagerInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of Extension Manager resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the extendedLocation property: ARM ID of the custom location resource deployed on the Onboarding Appliance.
     * 
     * @return the extendedLocation value.
     */
    public String extendedLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().extendedLocation();
    }

    /**
     * Set the extendedLocation property: ARM ID of the custom location resource deployed on the Onboarding Appliance.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the ExtensionManagerInner object itself.
     */
    public ExtensionManagerInner withExtendedLocation(String extendedLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExtensionManagerProperties();
        }
        this.innerProperties().withExtendedLocation(extendedLocation);
        return this;
    }

    /**
     * Get the hostResourceId property: ARM ID of the host associated with the extended location.
     * 
     * @return the hostResourceId value.
     */
    public String hostResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().hostResourceId();
    }

    /**
     * Get the scenarioProfile property: Scenario profile of the extension manager resource.
     * 
     * @return the scenarioProfile value.
     */
    public List<ScenarioProfileObject> scenarioProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().scenarioProfile();
    }

    /**
     * Set the scenarioProfile property: Scenario profile of the extension manager resource.
     * 
     * @param scenarioProfile the scenarioProfile value to set.
     * @return the ExtensionManagerInner object itself.
     */
    public ExtensionManagerInner withScenarioProfile(List<ScenarioProfileObject> scenarioProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExtensionManagerProperties();
        }
        this.innerProperties().withScenarioProfile(scenarioProfile);
        return this;
    }

    /**
     * Get the extensionProfile property: Extension profile of the extension manager resource.
     * 
     * @return the extensionProfile value.
     */
    public List<ExtensionObject> extensionProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().extensionProfile();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property identity in model ExtensionManagerInner"));
        } else {
            identity().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExtensionManagerInner.class);
}
