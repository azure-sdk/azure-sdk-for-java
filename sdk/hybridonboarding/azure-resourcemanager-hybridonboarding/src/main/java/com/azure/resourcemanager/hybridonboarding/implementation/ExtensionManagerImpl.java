// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridonboarding.fluent.models.ExtensionManagerInner;
import com.azure.resourcemanager.hybridonboarding.models.AddCustomLocationDetails;
import com.azure.resourcemanager.hybridonboarding.models.DisableExtensionsRequestDetails;
import com.azure.resourcemanager.hybridonboarding.models.EnableExtensionsRequestDetails;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionManager;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionManagerPatch;
import com.azure.resourcemanager.hybridonboarding.models.ExtensionObject;
import com.azure.resourcemanager.hybridonboarding.models.ManagedIdentity;
import com.azure.resourcemanager.hybridonboarding.models.ManagedIdentityUpdate;
import com.azure.resourcemanager.hybridonboarding.models.ProvisioningState;
import com.azure.resourcemanager.hybridonboarding.models.RemoveCustomLocationDetails;
import com.azure.resourcemanager.hybridonboarding.models.ScenarioProfileObject;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ExtensionManagerImpl
    implements ExtensionManager, ExtensionManager.Definition, ExtensionManager.Update {
    private ExtensionManagerInner innerObject;

    private final com.azure.resourcemanager.hybridonboarding.HybridonboardingManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public String hostResourceId() {
        return this.innerModel().hostResourceId();
    }

    public List<ScenarioProfileObject> scenarioProfile() {
        List<ScenarioProfileObject> inner = this.innerModel().scenarioProfile();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<ExtensionObject> extensionProfile() {
        List<ExtensionObject> inner = this.innerModel().extensionProfile();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ExtensionManagerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybridonboarding.HybridonboardingManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String extensionManagerName;

    private ExtensionManagerPatch updateProperties;

    public ExtensionManagerImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ExtensionManager create() {
        this.innerObject = serviceManager.serviceClient().getExtensionManagers().createOrUpdate(resourceGroupName,
            extensionManagerName, this.innerModel(), Context.NONE);
        return this;
    }

    public ExtensionManager create(Context context) {
        this.innerObject = serviceManager.serviceClient().getExtensionManagers().createOrUpdate(resourceGroupName,
            extensionManagerName, this.innerModel(), context);
        return this;
    }

    ExtensionManagerImpl(String name,
        com.azure.resourcemanager.hybridonboarding.HybridonboardingManager serviceManager) {
        this.innerObject = new ExtensionManagerInner();
        this.serviceManager = serviceManager;
        this.extensionManagerName = name;
    }

    public ExtensionManagerImpl update() {
        this.updateProperties = new ExtensionManagerPatch();
        return this;
    }

    public ExtensionManager apply() {
        this.innerObject = serviceManager.serviceClient().getExtensionManagers().update(resourceGroupName,
            extensionManagerName, updateProperties, Context.NONE);
        return this;
    }

    public ExtensionManager apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getExtensionManagers().update(resourceGroupName,
            extensionManagerName, updateProperties, context);
        return this;
    }

    ExtensionManagerImpl(ExtensionManagerInner innerObject,
        com.azure.resourcemanager.hybridonboarding.HybridonboardingManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.extensionManagerName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "extensionManagers");
    }

    public ExtensionManager refresh() {
        this.innerObject = serviceManager.serviceClient().getExtensionManagers()
            .getByResourceGroupWithResponse(resourceGroupName, extensionManagerName, Context.NONE).getValue();
        return this;
    }

    public ExtensionManager refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getExtensionManagers()
            .getByResourceGroupWithResponse(resourceGroupName, extensionManagerName, context).getValue();
        return this;
    }

    public ExtensionManager addCustomLocation(List<AddCustomLocationDetails> body) {
        return serviceManager.extensionManagers().addCustomLocation(resourceGroupName, extensionManagerName, body);
    }

    public ExtensionManager addCustomLocation(List<AddCustomLocationDetails> body, Context context) {
        return serviceManager.extensionManagers().addCustomLocation(resourceGroupName, extensionManagerName, body,
            context);
    }

    public ExtensionManager disableExtensions(List<DisableExtensionsRequestDetails> body) {
        return serviceManager.extensionManagers().disableExtensions(resourceGroupName, extensionManagerName, body);
    }

    public ExtensionManager disableExtensions(List<DisableExtensionsRequestDetails> body, Context context) {
        return serviceManager.extensionManagers().disableExtensions(resourceGroupName, extensionManagerName, body,
            context);
    }

    public ExtensionManager enableExtensions(List<EnableExtensionsRequestDetails> body) {
        return serviceManager.extensionManagers().enableExtensions(resourceGroupName, extensionManagerName, body);
    }

    public ExtensionManager enableExtensions(List<EnableExtensionsRequestDetails> body, Context context) {
        return serviceManager.extensionManagers().enableExtensions(resourceGroupName, extensionManagerName, body,
            context);
    }

    public ExtensionManager removeCustomLocation(List<RemoveCustomLocationDetails> body) {
        return serviceManager.extensionManagers().removeCustomLocation(resourceGroupName, extensionManagerName, body);
    }

    public ExtensionManager removeCustomLocation(List<RemoveCustomLocationDetails> body, Context context) {
        return serviceManager.extensionManagers().removeCustomLocation(resourceGroupName, extensionManagerName, body,
            context);
    }

    public ExtensionManagerImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ExtensionManagerImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ExtensionManagerImpl withIdentity(ManagedIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ExtensionManagerImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public ExtensionManagerImpl withExtendedLocation(String extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public ExtensionManagerImpl withScenarioProfile(List<ScenarioProfileObject> scenarioProfile) {
        this.innerModel().withScenarioProfile(scenarioProfile);
        return this;
    }

    public ExtensionManagerImpl withIdentity(ManagedIdentityUpdate identity) {
        this.updateProperties.withIdentity(identity);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
