// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.util.List;

/**
 * Resource collection API of ExtensionManagers.
 */
public interface ExtensionManagers {
    /**
     * List ExtensionManager resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ExtensionManager> list();

    /**
     * List ExtensionManager resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ExtensionManager> list(Context context);

    /**
     * List ExtensionManager resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ExtensionManager> listByResourceGroup(String resourceGroupName);

    /**
     * List ExtensionManager resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ExtensionManager list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ExtensionManager> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExtensionManager along with {@link Response}.
     */
    Response<ExtensionManager> getByResourceGroupWithResponse(String resourceGroupName, String extensionManagerName,
        Context context);

    /**
     * Get a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExtensionManager.
     */
    ExtensionManager getByResourceGroup(String resourceGroupName, String extensionManagerName);

    /**
     * Delete a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String extensionManagerName);

    /**
     * Delete a ExtensionManager.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String extensionManagerName, Context context);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager addCustomLocation(String resourceGroupName, String extensionManagerName,
        List<AddCustomLocationDetails> body);

    /**
     * Add a new custom location on extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager addCustomLocation(String resourceGroupName, String extensionManagerName,
        List<AddCustomLocationDetails> body, Context context);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager disableExtensions(String resourceGroupName, String extensionManagerName,
        List<DisableExtensionsRequestDetails> body);

    /**
     * Disable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager disableExtensions(String resourceGroupName, String extensionManagerName,
        List<DisableExtensionsRequestDetails> body, Context context);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager enableExtensions(String resourceGroupName, String extensionManagerName,
        List<EnableExtensionsRequestDetails> body);

    /**
     * Enable extension(s) on the extension manager resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager enableExtensions(String resourceGroupName, String extensionManagerName,
        List<EnableExtensionsRequestDetails> body, Context context);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager removeCustomLocation(String resourceGroupName, String extensionManagerName,
        List<RemoveCustomLocationDetails> body);

    /**
     * Remove a custom location from extension(s).
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param extensionManagerName Extension Manager resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return extension Manager Resource.
     */
    ExtensionManager removeCustomLocation(String resourceGroupName, String extensionManagerName,
        List<RemoveCustomLocationDetails> body, Context context);

    /**
     * Get a ExtensionManager.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExtensionManager along with {@link Response}.
     */
    ExtensionManager getById(String id);

    /**
     * Get a ExtensionManager.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ExtensionManager along with {@link Response}.
     */
    Response<ExtensionManager> getByIdWithResponse(String id, Context context);

    /**
     * Delete a ExtensionManager.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a ExtensionManager.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ExtensionManager resource.
     * 
     * @param name resource name.
     * @return the first stage of the new ExtensionManager definition.
     */
    ExtensionManager.DefinitionStages.Blank define(String name);
}
