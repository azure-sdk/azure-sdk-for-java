// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Extension object inside the extension profile.
 */
@Fluent
public final class ExtensionObject {
    /*
     * Name of the extension
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * List of custom locations associated with the extension. All entries will be unique.
     */
    @JsonProperty(value = "customLocations", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> customLocations;

    /*
     * Flag to enable/disable the extension
     */
    @JsonProperty(value = "state", required = true)
    private ExtensionState state;

    /*
     * Configuration settings, as name-value pairs for configuring this extension.
     */
    @JsonProperty(value = "configurationSettings")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> configurationSettings;

    /*
     * Configuration settings that are sensitive, as name-value pairs for configuring this extension.
     */
    @JsonProperty(value = "configurationProtectedSettings")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> configurationProtectedSettings;

    /**
     * Creates an instance of ExtensionObject class.
     */
    public ExtensionObject() {
    }

    /**
     * Get the name property: Name of the extension.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the extension.
     * 
     * @param name the name value to set.
     * @return the ExtensionObject object itself.
     */
    public ExtensionObject withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the customLocations property: List of custom locations associated with the extension. All entries will be
     * unique.
     * 
     * @return the customLocations value.
     */
    public List<String> customLocations() {
        return this.customLocations;
    }

    /**
     * Get the state property: Flag to enable/disable the extension.
     * 
     * @return the state value.
     */
    public ExtensionState state() {
        return this.state;
    }

    /**
     * Set the state property: Flag to enable/disable the extension.
     * 
     * @param state the state value to set.
     * @return the ExtensionObject object itself.
     */
    public ExtensionObject withState(ExtensionState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the configurationSettings property: Configuration settings, as name-value pairs for configuring this
     * extension.
     * 
     * @return the configurationSettings value.
     */
    public Map<String, String> configurationSettings() {
        return this.configurationSettings;
    }

    /**
     * Set the configurationSettings property: Configuration settings, as name-value pairs for configuring this
     * extension.
     * 
     * @param configurationSettings the configurationSettings value to set.
     * @return the ExtensionObject object itself.
     */
    public ExtensionObject withConfigurationSettings(Map<String, String> configurationSettings) {
        this.configurationSettings = configurationSettings;
        return this;
    }

    /**
     * Get the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this extension.
     * 
     * @return the configurationProtectedSettings value.
     */
    public Map<String, String> configurationProtectedSettings() {
        return this.configurationProtectedSettings;
    }

    /**
     * Set the configurationProtectedSettings property: Configuration settings that are sensitive, as name-value pairs
     * for configuring this extension.
     * 
     * @param configurationProtectedSettings the configurationProtectedSettings value to set.
     * @return the ExtensionObject object itself.
     */
    public ExtensionObject withConfigurationProtectedSettings(Map<String, String> configurationProtectedSettings) {
        this.configurationProtectedSettings = configurationProtectedSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property name in model ExtensionObject"));
        }
        if (state() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property state in model ExtensionObject"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExtensionObject.class);
}
