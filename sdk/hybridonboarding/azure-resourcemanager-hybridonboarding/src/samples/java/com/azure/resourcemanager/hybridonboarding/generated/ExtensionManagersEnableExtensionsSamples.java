// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridonboarding.generated;

import com.azure.resourcemanager.hybridonboarding.models.EnableExtensionsRequestDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ExtensionManagers EnableExtensions.
 */
public final class ExtensionManagersEnableExtensionsSamples {
    /*
     * x-ms-original-file:
     * specification/hybridonboarding/resource-manager/Microsoft.HybridOnboarding/preview/2024-06-01-preview/examples/
     * ExtensionManagers_EnableExtensions_MaximumSet_Gen.json
     */
    /**
     * Sample code: ExtensionManagers_EnableExtensions.
     * 
     * @param manager Entry point to HybridonboardingManager.
     */
    public static void
        extensionManagersEnableExtensions(com.azure.resourcemanager.hybridonboarding.HybridonboardingManager manager) {
        manager.extensionManagers().enableExtensions("rgopenapi", "3_i_f_s____G_-W-__U__s-I_hmYGs4-_KRian-wD1bn_-u__D",
            Arrays.asList(new EnableExtensionsRequestDetails().withName("wjkxpmgaubnhkhpxtapwknpxns")
                .withConfigurationSettings(mapOf("key1121", "fakeTokenPlaceholder"))
                .withConfigurationProtectedSettings(mapOf("key8624", "fakeTokenPlaceholder"))),
            com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
