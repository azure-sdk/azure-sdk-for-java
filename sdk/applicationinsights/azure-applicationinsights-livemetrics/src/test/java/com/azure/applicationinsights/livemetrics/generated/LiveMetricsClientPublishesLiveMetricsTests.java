// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.generated;

import com.azure.applicationinsights.livemetrics.models.CollectionConfigurationInfo;
import com.azure.applicationinsights.livemetrics.models.DerivedMetricInfo;
import com.azure.applicationinsights.livemetrics.models.DocumentFilterConjunctionGroupInfo;
import com.azure.applicationinsights.livemetrics.models.DocumentStreamInfo;
import com.azure.applicationinsights.livemetrics.models.Exception;
import com.azure.applicationinsights.livemetrics.models.FilterConjunctionGroupInfo;
import com.azure.applicationinsights.livemetrics.models.FilterInfo;
import com.azure.applicationinsights.livemetrics.models.KeyValuePairStringString;
import com.azure.applicationinsights.livemetrics.models.MetricPoint;
import com.azure.applicationinsights.livemetrics.models.MonitoringDataPoint;
import com.azure.applicationinsights.livemetrics.models.PredicateType;
import com.azure.applicationinsights.livemetrics.models.Request;
import com.azure.applicationinsights.livemetrics.models.TelemetryType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class LiveMetricsClientPublishesLiveMetricsTests extends LiveMetricsClientTestBase {
    @Test
    @Disabled
    public void testLiveMetricsClientPublishesLiveMetricsTests() {
        // method invocation
        CollectionConfigurationInfo response
            = liveMetricsClient
                .publish("4473b98e-c70d-4220-b57c-2984c2a0e5cd", "1::bu8uyb2wr89ycvvn0iznpa4a9ufqax76::2::",
                    638422471817023700L,
                    Arrays
                        .asList(new MonitoringDataPoint("2.1.0.42", 5, "server-pc-name", "", "SERVER-PC-NAME",
                            "41112328328b4edb9aa777aa6d675186", false, true)
                            .setTimestamp(OffsetDateTime.parse("2024-02-01T21:36:30.5717105Z"))
                            .setMetrics(Arrays.asList(new MetricPoint("\\ApplicationInsights\\Requests/Sec", 0.9989, 1),
                                new MetricPoint("\\ApplicationInsights\\Request Duration", 2.266, 1), new MetricPoint(
                                    "\\ApplicationInsights\\Requests Failed/Sec", 0.0, 1),
                                new MetricPoint("\\ApplicationInsights\\Requests Succeeded/Sec", 0.9989, 1),
                                new MetricPoint("\\ApplicationInsights\\Dependency Calls/Sec", 0.0, 1), new MetricPoint(
                                    "\\ApplicationInsights\\Dependency Call Duration", 0.0, 0),
                                new MetricPoint("\\ApplicationInsights\\Dependency Calls Failed/Sec", 0.0, 1),
                                new MetricPoint("\\ApplicationInsights\\Dependency Calls Succeeded/Sec", 0.0, 1),
                                new MetricPoint("\\ApplicationInsights\\Exceptions/Sec", 0.0, 1), new MetricPoint(
                                    "\\ASP.NET Applications(__Total__)\\Requests In Application Queue", 0.0, 1),
                                new MetricPoint("\\Memory\\Committed Bytes", 1.9902644224E10, 1),
                                new MetricPoint("\\Processor(_Total)\\% Processor Time", 54.738, 1)))
                            .setDocuments(
                                Arrays
                                    .asList(
                                        new Exception()
                                            .setProperties(Arrays.asList(
                                                new KeyValuePairStringString("fakeTokenPlaceholder", "UserPropValue2"),
                                                new KeyValuePairStringString("fakeTokenPlaceholder",
                                                    "true"),
                                                new KeyValuePairStringString("fakeTokenPlaceholder", "UserPropValue1")))
                                            .setExceptionType("System.ArgumentNullException")
                                            .setExceptionMessage(
                                                "Value cannot be null.\r\nParameter name: This exception has properties"),
                                        new Request()
                                            .setProperties(Arrays
                                                .asList(new KeyValuePairStringString("fakeTokenPlaceholder", "true")))
                                            .setName("GET Home/blablabla")
                                            .setUrl("http://40.78.109.134/Home/blablabla")
                                            .setResponseCode("fakeTokenPlaceholder")
                                            .setDuration("PT0.0010105S")))));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "eTag"
        Assertions.assertEquals("1::bu8uyb2wr89ycvvn0iznpa4a9ufqax76::2::", response.getETag());
        // verify property "metrics"
        List<DerivedMetricInfo> responseMetrics = response.getMetrics();
        Assertions.assertEquals(0, responseMetrics.size());
        // verify property "documentStreams"
        List<DocumentStreamInfo> responseDocumentStreams = response.getDocumentStreams();
        DocumentStreamInfo responseDocumentStreamsFirstItem = responseDocumentStreams.iterator().next();
        Assertions.assertNotNull(responseDocumentStreamsFirstItem);
        Assertions.assertEquals("all-types-default", responseDocumentStreamsFirstItem.getId());
        List<DocumentFilterConjunctionGroupInfo> responseDocumentStreamsFirstItemDocumentFilterGroups
            = responseDocumentStreamsFirstItem.getDocumentFilterGroups();
        DocumentFilterConjunctionGroupInfo responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem
            = responseDocumentStreamsFirstItemDocumentFilterGroups.iterator().next();
        Assertions.assertNotNull(responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem);
        Assertions.assertEquals(TelemetryType.REQUEST,
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem.getTelemetryType());
        FilterConjunctionGroupInfo responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFilters
            = responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem.getFilters();
        Assertions.assertNotNull(responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFilters);
        List<FilterInfo> responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFilters
            = responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFilters.getFilters();
        FilterInfo responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem
            = responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFilters.iterator().next();
        Assertions.assertNotNull(responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem);
        Assertions.assertEquals("Success",
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem.getFieldName());
        Assertions.assertEquals(PredicateType.EQUAL,
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem.getPredicate());
        Assertions.assertEquals("false",
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem.getComparand());
    }
}
