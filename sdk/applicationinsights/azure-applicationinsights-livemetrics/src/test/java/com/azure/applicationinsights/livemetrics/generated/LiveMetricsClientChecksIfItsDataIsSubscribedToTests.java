// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.generated;

import com.azure.applicationinsights.livemetrics.models.AggregationType;
import com.azure.applicationinsights.livemetrics.models.CollectionConfigurationInfo;
import com.azure.applicationinsights.livemetrics.models.DerivedMetricInfo;
import com.azure.applicationinsights.livemetrics.models.DocumentFilterConjunctionGroupInfo;
import com.azure.applicationinsights.livemetrics.models.DocumentStreamInfo;
import com.azure.applicationinsights.livemetrics.models.FilterConjunctionGroupInfo;
import com.azure.applicationinsights.livemetrics.models.FilterInfo;
import com.azure.applicationinsights.livemetrics.models.MonitoringDataPoint;
import com.azure.applicationinsights.livemetrics.models.PredicateType;
import com.azure.applicationinsights.livemetrics.models.QuotaConfigurationInfo;
import com.azure.applicationinsights.livemetrics.models.TelemetryType;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class LiveMetricsClientChecksIfItsDataIsSubscribedToTests extends LiveMetricsClientTestBase {
    @Test
    @Disabled
    public void testLiveMetricsClientChecksIfItsDataIsSubscribedToTests() {
        // method invocation
        CollectionConfigurationInfo response = liveMetricsClient.isSubscribed("4473b98e-c70d-4220-b57c-2984c2a0e5cd",
            638422471817023700L, "SERVER-PC-NAME", "server-pc-name", "41112328328b4edb9aa777aa6d675186",
            "server-role-name", "5", "1::bu8uyb2wr89ycvvn0iznpa4a9ufqax76::2::",
            new MonitoringDataPoint("2.21.0-429", 5, "server-pc-name", "", "SERVER-PC-NAME",
                "41112328328b4edb9aa777aa6d675186", false, true)
                .setTimestamp(OffsetDateTime.parse("2024-02-01T21:36:32.5717105Z")));

        // response assertion
        Assertions.assertNotNull(response);
        // verify property "eTag"
        Assertions.assertEquals("1::bu8uyb2wr89ycvvn0iznpa4a9ufqax76::2::", response.getETag());
        // verify property "metrics"
        List<DerivedMetricInfo> responseMetrics = response.getMetrics();
        DerivedMetricInfo responseMetricsFirstItem = responseMetrics.iterator().next();
        Assertions.assertNotNull(responseMetricsFirstItem);
        Assertions.assertEquals("141.8a7513a4", responseMetricsFirstItem.getId());
        Assertions.assertEquals("Request", responseMetricsFirstItem.getTelemetryType());
        List<FilterConjunctionGroupInfo> responseMetricsFirstItemFilterGroups
            = responseMetricsFirstItem.getFilterGroups();
        FilterConjunctionGroupInfo responseMetricsFirstItemFilterGroupsFirstItem
            = responseMetricsFirstItemFilterGroups.iterator().next();
        Assertions.assertNotNull(responseMetricsFirstItemFilterGroupsFirstItem);
        List<FilterInfo> responseMetricsFirstItemFilterGroupsFirstItemFilters
            = responseMetricsFirstItemFilterGroupsFirstItem.getFilters();
        FilterInfo responseMetricsFirstItemFilterGroupsFirstItemFiltersFirstItem
            = responseMetricsFirstItemFilterGroupsFirstItemFilters.iterator().next();
        Assertions.assertNotNull(responseMetricsFirstItemFilterGroupsFirstItemFiltersFirstItem);
        Assertions.assertEquals("Duration",
            responseMetricsFirstItemFilterGroupsFirstItemFiltersFirstItem.getFieldName());
        Assertions.assertEquals(PredicateType.GREATER_THAN,
            responseMetricsFirstItemFilterGroupsFirstItemFiltersFirstItem.getPredicate());
        Assertions.assertEquals("0.0:0:10",
            responseMetricsFirstItemFilterGroupsFirstItemFiltersFirstItem.getComparand());
        Assertions.assertEquals("Duration", responseMetricsFirstItem.getProjection());
        Assertions.assertEquals(AggregationType.AVG, responseMetricsFirstItem.getAggregation());
        Assertions.assertEquals(AggregationType.AVG, responseMetricsFirstItem.getBackEndAggregation());
        // verify property "documentStreams"
        List<DocumentStreamInfo> responseDocumentStreams = response.getDocumentStreams();
        DocumentStreamInfo responseDocumentStreamsFirstItem = responseDocumentStreams.iterator().next();
        Assertions.assertNotNull(responseDocumentStreamsFirstItem);
        Assertions.assertEquals("200.ecb0e7dd", responseDocumentStreamsFirstItem.getId());
        List<DocumentFilterConjunctionGroupInfo> responseDocumentStreamsFirstItemDocumentFilterGroups
            = responseDocumentStreamsFirstItem.getDocumentFilterGroups();
        DocumentFilterConjunctionGroupInfo responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem
            = responseDocumentStreamsFirstItemDocumentFilterGroups.iterator().next();
        Assertions.assertNotNull(responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem);
        Assertions.assertEquals(TelemetryType.REQUEST,
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem.getTelemetryType());
        FilterConjunctionGroupInfo responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFilters
            = responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItem.getFilters();
        Assertions.assertNotNull(responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFilters);
        List<FilterInfo> responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFilters
            = responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFilters.getFilters();
        FilterInfo responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem
            = responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFilters.iterator().next();
        Assertions.assertNotNull(responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem);
        Assertions.assertEquals("Success",
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem.getFieldName());
        Assertions.assertEquals(PredicateType.EQUAL,
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem.getPredicate());
        Assertions.assertEquals("False",
            responseDocumentStreamsFirstItemDocumentFilterGroupsFirstItemFiltersFiltersFirstItem.getComparand());
        // verify property "quotaInfo"
        QuotaConfigurationInfo responseQuotaInfo = response.getQuotaInfo();
        Assertions.assertNotNull(responseQuotaInfo);
        Assertions.assertEquals(200.0D, responseQuotaInfo.getInitialQuota());
        Assertions.assertEquals(200.0, responseQuotaInfo.getMaxQuota());
        Assertions.assertEquals(200.0, responseQuotaInfo.getQuotaAccrualRatePerSec());
    }
}
