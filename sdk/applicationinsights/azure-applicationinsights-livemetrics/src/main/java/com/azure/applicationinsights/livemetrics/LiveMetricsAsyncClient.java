// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics;

import com.azure.applicationinsights.livemetrics.implementation.LiveMetricsClientImpl;
import com.azure.applicationinsights.livemetrics.models.CollectionConfigurationInfo;
import com.azure.applicationinsights.livemetrics.models.MonitoringDataPoint;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous LiveMetricsClient type.
 */
@ServiceClient(builder = LiveMetricsClientBuilder.class, isAsync = true)
public final class LiveMetricsAsyncClient {
    @Generated
    private final LiveMetricsClientImpl serviceClient;

    /**
     * Initializes an instance of LiveMetricsAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    LiveMetricsAsyncClient(LiveMetricsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>x-ms-qps-transmission-time</td><td>Long</td><td>No</td><td>Timestamp when the client transmits the
     * metrics and documents to Live Metrics. A 8-byte long type of ticks.</td></tr>
     * <tr><td>x-ms-qps-machine-name</td><td>String</td><td>No</td><td>Computer name where Application Insights SDK
     * lives. Live Metrics uses machine name with instance name as a backup.</td></tr>
     * <tr><td>x-ms-qps-instance-name</td><td>String</td><td>No</td><td>Service instance name where Application Insights
     * SDK lives. Live Metrics uses machine name with instance name as a backup.</td></tr>
     * <tr><td>x-ms-qps-stream-id</td><td>String</td><td>No</td><td>Identifies an Application Insights SDK as trusted
     * agent to report metrics and documents.</td></tr>
     * <tr><td>x-ms-qps-role-name</td><td>String</td><td>No</td><td>Cloud role name of the service.</td></tr>
     * <tr><td>x-ms-qps-invariant-version</td><td>String</td><td>No</td><td>Version/generation of the data contract
     * (MonitoringDataPoint) between the client and Live Metrics.</td></tr>
     * <tr><td>x-ms-qps-configuration-etag</td><td>String</td><td>No</td><td>An encoded string that indicates whether
     * the collection configuration is changed.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     Version: String (Required)
     *     InvariantVersion: int (Required)
     *     Instance: String (Required)
     *     RoleName: String (Required)
     *     MachineName: String (Required)
     *     StreamId: String (Required)
     *     Timestamp: OffsetDateTime (Optional)
     *     TransmissionTime: OffsetDateTime (Optional)
     *     IsWebApp: boolean (Required)
     *     PerformanceCollectionSupported: boolean (Required)
     *     Metrics (Optional): [
     *          (Optional){
     *             Name: String (Required)
     *             Value: double (Required)
     *             Weight: int (Required)
     *         }
     *     ]
     *     Documents (Optional): [
     *          (Optional){
     *             DocumentType: String(Request/RemoteDependency/Exception/Event/Trace/Unknown) (Required)
     *             DocumentStreamIds (Optional): [
     *                 String (Optional)
     *             ]
     *             Properties (Optional): [
     *                  (Optional){
     *                     key: String (Required)
     *                     value: String (Required)
     *                 }
     *             ]
     *         }
     *     ]
     *     TopCpuProcesses (Optional): [
     *          (Optional){
     *             ProcessName: String (Required)
     *             CpuPercentage: int (Required)
     *         }
     *     ]
     *     CollectionConfigurationErrors (Optional): [
     *          (Optional){
     *             CollectionConfigurationErrorType: String(Unknown/PerformanceCounterParsing/PerformanceCounterUnexpected/PerformanceCounterDuplicateIds/DocumentStreamDuplicateIds/DocumentStreamFailureToCreate/DocumentStreamFailureToCreateFilterUnexpected/MetricDuplicateIds/MetricTelemetryTypeUnsupported/MetricFailureToCreate/MetricFailureToCreateFilterUnexpected/FilterFailureToCreateUnexpected/CollectionConfigurationFailureToCreateUnexpected) (Required)
     *             Message: String (Required)
     *             FullException: String (Required)
     *             Data (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ETag: String (Required)
     *     Metrics (Required): [
     *          (Required){
     *             Id: String (Required)
     *             TelemetryType: String (Required)
     *             FilterGroups (Required): [
     *                  (Required){
     *                     Filters (Required): [
     *                          (Required){
     *                             FieldName: String (Required)
     *                             Predicate: String(Equal/NotEqual/LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual/Contains/DoesNotContain) (Required)
     *                             Comparand: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             Projection: String (Required)
     *             Aggregation: String(Avg/Sum/Min/Max) (Required)
     *             BackEndAggregation: String(Avg/Sum/Min/Max) (Required)
     *         }
     *     ]
     *     DocumentStreams (Required): [
     *          (Required){
     *             Id: String (Required)
     *             DocumentFilterGroups (Required): [
     *                  (Required){
     *                     TelemetryType: String(Request/Dependency/Exception/Event/Metric/PerformanceCounter/Trace) (Required)
     *                     Filters (Required): (recursive schema, see Filters above)
     *                 }
     *             ]
     *         }
     *     ]
     *     QuotaInfo (Optional): {
     *         InitialQuota: Double (Optional)
     *         MaxQuota: double (Required)
     *         QuotaAccrualRatePerSec: double (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> isSubscribedWithResponse(String ikey, RequestOptions requestOptions) {
        return this.serviceClient.isSubscribedWithResponseAsync(ikey, requestOptions);
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>x-ms-qps-configuration-etag</td><td>String</td><td>No</td><td>An encoded string that indicates whether
     * the collection configuration is changed.</td></tr>
     * <tr><td>x-ms-qps-transmission-time</td><td>Long</td><td>No</td><td>Timestamp when the client transmits the
     * metrics and documents to Live Metrics. A 8-byte long type of ticks.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Optional){
     *         Version: String (Required)
     *         InvariantVersion: int (Required)
     *         Instance: String (Required)
     *         RoleName: String (Required)
     *         MachineName: String (Required)
     *         StreamId: String (Required)
     *         Timestamp: OffsetDateTime (Optional)
     *         TransmissionTime: OffsetDateTime (Optional)
     *         IsWebApp: boolean (Required)
     *         PerformanceCollectionSupported: boolean (Required)
     *         Metrics (Optional): [
     *              (Optional){
     *                 Name: String (Required)
     *                 Value: double (Required)
     *                 Weight: int (Required)
     *             }
     *         ]
     *         Documents (Optional): [
     *              (Optional){
     *                 DocumentType: String(Request/RemoteDependency/Exception/Event/Trace/Unknown) (Required)
     *                 DocumentStreamIds (Optional): [
     *                     String (Optional)
     *                 ]
     *                 Properties (Optional): [
     *                      (Optional){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         TopCpuProcesses (Optional): [
     *              (Optional){
     *                 ProcessName: String (Required)
     *                 CpuPercentage: int (Required)
     *             }
     *         ]
     *         CollectionConfigurationErrors (Optional): [
     *              (Optional){
     *                 CollectionConfigurationErrorType: String(Unknown/PerformanceCounterParsing/PerformanceCounterUnexpected/PerformanceCounterDuplicateIds/DocumentStreamDuplicateIds/DocumentStreamFailureToCreate/DocumentStreamFailureToCreateFilterUnexpected/MetricDuplicateIds/MetricTelemetryTypeUnsupported/MetricFailureToCreate/MetricFailureToCreateFilterUnexpected/FilterFailureToCreateUnexpected/CollectionConfigurationFailureToCreateUnexpected) (Required)
     *                 Message: String (Required)
     *                 FullException: String (Required)
     *                 Data (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ETag: String (Required)
     *     Metrics (Required): [
     *          (Required){
     *             Id: String (Required)
     *             TelemetryType: String (Required)
     *             FilterGroups (Required): [
     *                  (Required){
     *                     Filters (Required): [
     *                          (Required){
     *                             FieldName: String (Required)
     *                             Predicate: String(Equal/NotEqual/LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual/Contains/DoesNotContain) (Required)
     *                             Comparand: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             Projection: String (Required)
     *             Aggregation: String(Avg/Sum/Min/Max) (Required)
     *             BackEndAggregation: String(Avg/Sum/Min/Max) (Required)
     *         }
     *     ]
     *     DocumentStreams (Required): [
     *          (Required){
     *             Id: String (Required)
     *             DocumentFilterGroups (Required): [
     *                  (Required){
     *                     TelemetryType: String(Request/Dependency/Exception/Event/Metric/PerformanceCounter/Trace) (Required)
     *                     Filters (Required): (recursive schema, see Filters above)
     *                 }
     *             ]
     *         }
     *     ]
     *     QuotaInfo (Optional): {
     *         InitialQuota: Double (Optional)
     *         MaxQuota: double (Required)
     *         QuotaAccrualRatePerSec: double (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> publishWithResponse(String ikey, RequestOptions requestOptions) {
        return this.serviceClient.publishWithResponseAsync(ikey, requestOptions);
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> isSubscribed(String ikey, Long transmissionTime, String machineName,
        String instanceName, String streamId, String roleName, String invariantVersion, String configurationEtag,
        MonitoringDataPoint monitoringDataPoint) {
        // Generated convenience method for isSubscribedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (transmissionTime != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-transmission-time"),
                String.valueOf(transmissionTime));
        }
        if (machineName != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-machine-name"), machineName);
        }
        if (instanceName != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-instance-name"), instanceName);
        }
        if (streamId != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-stream-id"), streamId);
        }
        if (roleName != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-role-name"), roleName);
        }
        if (invariantVersion != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-invariant-version"), invariantVersion);
        }
        if (configurationEtag != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-configuration-etag"), configurationEtag);
        }
        if (monitoringDataPoint != null) {
            requestOptions.setBody(BinaryData.fromObject(monitoringDataPoint));
        }
        return isSubscribedWithResponse(ikey, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CollectionConfigurationInfo.class));
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> isSubscribed(String ikey) {
        // Generated convenience method for isSubscribedWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return isSubscribedWithResponse(ikey, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CollectionConfigurationInfo.class));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> publish(String ikey, String configurationEtag, Long transmissionTime,
        List<MonitoringDataPoint> monitoringDataPoints) {
        // Generated convenience method for publishWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (configurationEtag != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-configuration-etag"), configurationEtag);
        }
        if (transmissionTime != null) {
            requestOptions.setHeader(HttpHeaderName.fromString("x-ms-qps-transmission-time"),
                String.valueOf(transmissionTime));
        }
        if (monitoringDataPoints != null) {
            requestOptions.setBody(BinaryData.fromObject(monitoringDataPoints));
        }
        return publishWithResponse(ikey, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CollectionConfigurationInfo.class));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> publish(String ikey) {
        // Generated convenience method for publishWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return publishWithResponse(ikey, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CollectionConfigurationInfo.class));
    }
}
