// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A metric configuration set by UX to scope the metrics it's interested in.
 */
@Immutable
public final class DerivedMetricInfo implements JsonSerializable<DerivedMetricInfo> {
    /*
     * metric configuration identifier.
     */
    @Generated
    private final String id;

    /*
     * Telemetry type.
     */
    @Generated
    private final String telemetryType;

    /*
     * A collection of filters to scope metrics that UX needs.
     */
    @Generated
    private final List<FilterConjunctionGroupInfo> filterGroups;

    /*
     * Telemetry's metric dimension whose value is to be aggregated. Example values: Duration, Count(),...
     */
    @Generated
    private final String projection;

    /*
     * Aggregation type. This is the aggregation done from everything within a single server.
     */
    @Generated
    private final AggregationType aggregation;

    /*
     * Aggregation type. This Aggregation is done across the values for all the servers taken together.
     */
    @Generated
    private final AggregationType backEndAggregation;

    /**
     * Creates an instance of DerivedMetricInfo class.
     * 
     * @param id the id value to set.
     * @param telemetryType the telemetryType value to set.
     * @param filterGroups the filterGroups value to set.
     * @param projection the projection value to set.
     * @param aggregation the aggregation value to set.
     * @param backEndAggregation the backEndAggregation value to set.
     */
    @Generated
    private DerivedMetricInfo(String id, String telemetryType, List<FilterConjunctionGroupInfo> filterGroups,
        String projection, AggregationType aggregation, AggregationType backEndAggregation) {
        this.id = id;
        this.telemetryType = telemetryType;
        this.filterGroups = filterGroups;
        this.projection = projection;
        this.aggregation = aggregation;
        this.backEndAggregation = backEndAggregation;
    }

    /**
     * Get the id property: metric configuration identifier.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the telemetryType property: Telemetry type.
     * 
     * @return the telemetryType value.
     */
    @Generated
    public String getTelemetryType() {
        return this.telemetryType;
    }

    /**
     * Get the filterGroups property: A collection of filters to scope metrics that UX needs.
     * 
     * @return the filterGroups value.
     */
    @Generated
    public List<FilterConjunctionGroupInfo> getFilterGroups() {
        return this.filterGroups;
    }

    /**
     * Get the projection property: Telemetry's metric dimension whose value is to be aggregated. Example values:
     * Duration, Count(),...
     * 
     * @return the projection value.
     */
    @Generated
    public String getProjection() {
        return this.projection;
    }

    /**
     * Get the aggregation property: Aggregation type. This is the aggregation done from everything within a single
     * server.
     * 
     * @return the aggregation value.
     */
    @Generated
    public AggregationType getAggregation() {
        return this.aggregation;
    }

    /**
     * Get the backEndAggregation property: Aggregation type. This Aggregation is done across the values for all the
     * servers taken together.
     * 
     * @return the backEndAggregation value.
     */
    @Generated
    public AggregationType getBackEndAggregation() {
        return this.backEndAggregation;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("Id", this.id);
        jsonWriter.writeStringField("TelemetryType", this.telemetryType);
        jsonWriter.writeArrayField("FilterGroups", this.filterGroups, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("Projection", this.projection);
        jsonWriter.writeStringField("Aggregation", this.aggregation == null ? null : this.aggregation.toString());
        jsonWriter.writeStringField("BackEndAggregation",
            this.backEndAggregation == null ? null : this.backEndAggregation.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DerivedMetricInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DerivedMetricInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DerivedMetricInfo.
     */
    @Generated
    public static DerivedMetricInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String telemetryType = null;
            List<FilterConjunctionGroupInfo> filterGroups = null;
            String projection = null;
            AggregationType aggregation = null;
            AggregationType backEndAggregation = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("TelemetryType".equals(fieldName)) {
                    telemetryType = reader.getString();
                } else if ("FilterGroups".equals(fieldName)) {
                    filterGroups = reader.readArray(reader1 -> FilterConjunctionGroupInfo.fromJson(reader1));
                } else if ("Projection".equals(fieldName)) {
                    projection = reader.getString();
                } else if ("Aggregation".equals(fieldName)) {
                    aggregation = AggregationType.fromString(reader.getString());
                } else if ("BackEndAggregation".equals(fieldName)) {
                    backEndAggregation = AggregationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new DerivedMetricInfo(id, telemetryType, filterGroups, projection, aggregation, backEndAggregation);
        });
    }
}
