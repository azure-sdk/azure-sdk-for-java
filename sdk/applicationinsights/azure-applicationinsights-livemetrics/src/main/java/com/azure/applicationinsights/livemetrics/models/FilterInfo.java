// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A filter set on UX.
 */
@Immutable
public final class FilterInfo implements JsonSerializable<FilterInfo> {
    /*
     * dimension name of the filter
     */
    @Generated
    private final String fieldName;

    /*
     * Operator of the filter
     */
    @Generated
    private final PredicateType predicate;

    /*
     * Comparand of the filter
     */
    @Generated
    private final String comparand;

    /**
     * Creates an instance of FilterInfo class.
     * 
     * @param fieldName the fieldName value to set.
     * @param predicate the predicate value to set.
     * @param comparand the comparand value to set.
     */
    @Generated
    private FilterInfo(String fieldName, PredicateType predicate, String comparand) {
        this.fieldName = fieldName;
        this.predicate = predicate;
        this.comparand = comparand;
    }

    /**
     * Get the fieldName property: dimension name of the filter.
     * 
     * @return the fieldName value.
     */
    @Generated
    public String getFieldName() {
        return this.fieldName;
    }

    /**
     * Get the predicate property: Operator of the filter.
     * 
     * @return the predicate value.
     */
    @Generated
    public PredicateType getPredicate() {
        return this.predicate;
    }

    /**
     * Get the comparand property: Comparand of the filter.
     * 
     * @return the comparand value.
     */
    @Generated
    public String getComparand() {
        return this.comparand;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("FieldName", this.fieldName);
        jsonWriter.writeStringField("Predicate", this.predicate == null ? null : this.predicate.toString());
        jsonWriter.writeStringField("Comparand", this.comparand);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterInfo.
     */
    @Generated
    public static FilterInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fieldName = null;
            PredicateType predicate = null;
            String comparand = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("FieldName".equals(jsonFieldName)) {
                    fieldName = reader.getString();
                } else if ("Predicate".equals(jsonFieldName)) {
                    predicate = PredicateType.fromString(reader.getString());
                } else if ("Comparand".equals(jsonFieldName)) {
                    comparand = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new FilterInfo(fieldName, predicate, comparand);
        });
    }
}
