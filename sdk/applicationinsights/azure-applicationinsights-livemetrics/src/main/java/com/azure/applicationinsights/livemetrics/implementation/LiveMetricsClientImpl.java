// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.implementation;

import com.azure.applicationinsights.livemetrics.LiveMetricsServiceVersion;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the LiveMetricsClient type.
 */
public final class LiveMetricsClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LiveMetricsClientService service;

    /**
     * The endpoint of the Live Metrics service.
     */
    private final String endpoint;

    /**
     * Gets The endpoint of the Live Metrics service.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final LiveMetricsServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public LiveMetricsServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of LiveMetricsClient client.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param serviceVersion Service version.
     */
    public LiveMetricsClientImpl(String endpoint, LiveMetricsServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of LiveMetricsClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The endpoint of the Live Metrics service.
     * @param serviceVersion Service version.
     */
    public LiveMetricsClientImpl(HttpPipeline httpPipeline, String endpoint, LiveMetricsServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of LiveMetricsClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The endpoint of the Live Metrics service.
     * @param serviceVersion Service version.
     */
    public LiveMetricsClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        LiveMetricsServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(LiveMetricsClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for LiveMetricsClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "LiveMetricsClient")
    public interface LiveMetricsClientService {
        @Post("/QuickPulseService.svc/ping")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> isSubscribed(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/QuickPulseService.svc/ping")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> isSubscribedSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/QuickPulseService.svc/post")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> publish(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/QuickPulseService.svc/post")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> publishSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>x-ms-qps-transmission-time</td><td>Long</td><td>No</td><td>Timestamp when the client transmits the
     * metrics and documents to Live Metrics. A 8-byte long type of ticks.</td></tr>
     * <tr><td>x-ms-qps-machine-name</td><td>String</td><td>No</td><td>Computer name where Application Insights SDK
     * lives. Live Metrics uses machine name with instance name as a backup.</td></tr>
     * <tr><td>x-ms-qps-instance-name</td><td>String</td><td>No</td><td>Service instance name where Application Insights
     * SDK lives. Live Metrics uses machine name with instance name as a backup.</td></tr>
     * <tr><td>x-ms-qps-stream-id</td><td>String</td><td>No</td><td>Identifies an Application Insights SDK as trusted
     * agent to report metrics and documents.</td></tr>
     * <tr><td>x-ms-qps-role-name</td><td>String</td><td>No</td><td>Cloud role name of the service.</td></tr>
     * <tr><td>x-ms-qps-invariant-version</td><td>String</td><td>No</td><td>Version/generation of the data contract
     * (MonitoringDataPoint) between the client and Live Metrics.</td></tr>
     * <tr><td>x-ms-qps-configuration-etag</td><td>String</td><td>No</td><td>An encoded string that indicates whether
     * the collection configuration is changed.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     Version: String (Required)
     *     InvariantVersion: int (Required)
     *     Instance: String (Required)
     *     RoleName: String (Required)
     *     MachineName: String (Required)
     *     StreamId: String (Required)
     *     Timestamp: OffsetDateTime (Optional)
     *     TransmissionTime: OffsetDateTime (Optional)
     *     IsWebApp: boolean (Required)
     *     PerformanceCollectionSupported: boolean (Required)
     *     Metrics (Optional): [
     *          (Optional){
     *             Name: String (Required)
     *             Value: double (Required)
     *             Weight: int (Required)
     *         }
     *     ]
     *     Documents (Optional): [
     *          (Optional){
     *             DocumentType: String(Request/RemoteDependency/Exception/Event/Trace/Unknown) (Required)
     *             DocumentStreamIds (Optional): [
     *                 String (Optional)
     *             ]
     *             Properties (Optional): [
     *                  (Optional){
     *                     key: String (Required)
     *                     value: String (Required)
     *                 }
     *             ]
     *         }
     *     ]
     *     TopCpuProcesses (Optional): [
     *          (Optional){
     *             ProcessName: String (Required)
     *             CpuPercentage: int (Required)
     *         }
     *     ]
     *     CollectionConfigurationErrors (Optional): [
     *          (Optional){
     *             CollectionConfigurationErrorType: String(Unknown/PerformanceCounterParsing/PerformanceCounterUnexpected/PerformanceCounterDuplicateIds/DocumentStreamDuplicateIds/DocumentStreamFailureToCreate/DocumentStreamFailureToCreateFilterUnexpected/MetricDuplicateIds/MetricTelemetryTypeUnsupported/MetricFailureToCreate/MetricFailureToCreateFilterUnexpected/FilterFailureToCreateUnexpected/CollectionConfigurationFailureToCreateUnexpected) (Required)
     *             Message: String (Required)
     *             FullException: String (Required)
     *             Data (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ETag: String (Required)
     *     Metrics (Required): [
     *          (Required){
     *             Id: String (Required)
     *             TelemetryType: String (Required)
     *             FilterGroups (Required): [
     *                  (Required){
     *                     Filters (Required): [
     *                          (Required){
     *                             FieldName: String (Required)
     *                             Predicate: String(Equal/NotEqual/LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual/Contains/DoesNotContain) (Required)
     *                             Comparand: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             Projection: String (Required)
     *             Aggregation: String(Avg/Sum/Min/Max) (Required)
     *             BackEndAggregation: String(Avg/Sum/Min/Max) (Required)
     *         }
     *     ]
     *     DocumentStreams (Required): [
     *          (Required){
     *             Id: String (Required)
     *             DocumentFilterGroups (Required): [
     *                  (Required){
     *                     TelemetryType: String(Request/Dependency/Exception/Event/Metric/PerformanceCounter/Trace) (Required)
     *                     Filters (Required): (recursive schema, see Filters above)
     *                 }
     *             ]
     *         }
     *     ]
     *     QuotaInfo (Optional): {
     *         InitialQuota: Double (Optional)
     *         MaxQuota: double (Required)
     *         QuotaAccrualRatePerSec: double (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> isSubscribedWithResponseAsync(String ikey, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.isSubscribed(this.getEndpoint(),
            this.getServiceVersion().getVersion(), ikey, accept, requestOptionsLocal, context));
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>x-ms-qps-transmission-time</td><td>Long</td><td>No</td><td>Timestamp when the client transmits the
     * metrics and documents to Live Metrics. A 8-byte long type of ticks.</td></tr>
     * <tr><td>x-ms-qps-machine-name</td><td>String</td><td>No</td><td>Computer name where Application Insights SDK
     * lives. Live Metrics uses machine name with instance name as a backup.</td></tr>
     * <tr><td>x-ms-qps-instance-name</td><td>String</td><td>No</td><td>Service instance name where Application Insights
     * SDK lives. Live Metrics uses machine name with instance name as a backup.</td></tr>
     * <tr><td>x-ms-qps-stream-id</td><td>String</td><td>No</td><td>Identifies an Application Insights SDK as trusted
     * agent to report metrics and documents.</td></tr>
     * <tr><td>x-ms-qps-role-name</td><td>String</td><td>No</td><td>Cloud role name of the service.</td></tr>
     * <tr><td>x-ms-qps-invariant-version</td><td>String</td><td>No</td><td>Version/generation of the data contract
     * (MonitoringDataPoint) between the client and Live Metrics.</td></tr>
     * <tr><td>x-ms-qps-configuration-etag</td><td>String</td><td>No</td><td>An encoded string that indicates whether
     * the collection configuration is changed.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     Version: String (Required)
     *     InvariantVersion: int (Required)
     *     Instance: String (Required)
     *     RoleName: String (Required)
     *     MachineName: String (Required)
     *     StreamId: String (Required)
     *     Timestamp: OffsetDateTime (Optional)
     *     TransmissionTime: OffsetDateTime (Optional)
     *     IsWebApp: boolean (Required)
     *     PerformanceCollectionSupported: boolean (Required)
     *     Metrics (Optional): [
     *          (Optional){
     *             Name: String (Required)
     *             Value: double (Required)
     *             Weight: int (Required)
     *         }
     *     ]
     *     Documents (Optional): [
     *          (Optional){
     *             DocumentType: String(Request/RemoteDependency/Exception/Event/Trace/Unknown) (Required)
     *             DocumentStreamIds (Optional): [
     *                 String (Optional)
     *             ]
     *             Properties (Optional): [
     *                  (Optional){
     *                     key: String (Required)
     *                     value: String (Required)
     *                 }
     *             ]
     *         }
     *     ]
     *     TopCpuProcesses (Optional): [
     *          (Optional){
     *             ProcessName: String (Required)
     *             CpuPercentage: int (Required)
     *         }
     *     ]
     *     CollectionConfigurationErrors (Optional): [
     *          (Optional){
     *             CollectionConfigurationErrorType: String(Unknown/PerformanceCounterParsing/PerformanceCounterUnexpected/PerformanceCounterDuplicateIds/DocumentStreamDuplicateIds/DocumentStreamFailureToCreate/DocumentStreamFailureToCreateFilterUnexpected/MetricDuplicateIds/MetricTelemetryTypeUnsupported/MetricFailureToCreate/MetricFailureToCreateFilterUnexpected/FilterFailureToCreateUnexpected/CollectionConfigurationFailureToCreateUnexpected) (Required)
     *             Message: String (Required)
     *             FullException: String (Required)
     *             Data (Required): [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ETag: String (Required)
     *     Metrics (Required): [
     *          (Required){
     *             Id: String (Required)
     *             TelemetryType: String (Required)
     *             FilterGroups (Required): [
     *                  (Required){
     *                     Filters (Required): [
     *                          (Required){
     *                             FieldName: String (Required)
     *                             Predicate: String(Equal/NotEqual/LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual/Contains/DoesNotContain) (Required)
     *                             Comparand: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             Projection: String (Required)
     *             Aggregation: String(Avg/Sum/Min/Max) (Required)
     *             BackEndAggregation: String(Avg/Sum/Min/Max) (Required)
     *         }
     *     ]
     *     DocumentStreams (Required): [
     *          (Required){
     *             Id: String (Required)
     *             DocumentFilterGroups (Required): [
     *                  (Required){
     *                     TelemetryType: String(Request/Dependency/Exception/Event/Metric/PerformanceCounter/Trace) (Required)
     *                     Filters (Required): (recursive schema, see Filters above)
     *                 }
     *             ]
     *         }
     *     ]
     *     QuotaInfo (Optional): {
     *         InitialQuota: Double (Optional)
     *         MaxQuota: double (Required)
     *         QuotaAccrualRatePerSec: double (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> isSubscribedWithResponse(String ikey, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.isSubscribedSync(this.getEndpoint(), this.getServiceVersion().getVersion(), ikey, accept,
            requestOptionsLocal, Context.NONE);
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>x-ms-qps-configuration-etag</td><td>String</td><td>No</td><td>An encoded string that indicates whether
     * the collection configuration is changed.</td></tr>
     * <tr><td>x-ms-qps-transmission-time</td><td>Long</td><td>No</td><td>Timestamp when the client transmits the
     * metrics and documents to Live Metrics. A 8-byte long type of ticks.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Optional){
     *         Version: String (Required)
     *         InvariantVersion: int (Required)
     *         Instance: String (Required)
     *         RoleName: String (Required)
     *         MachineName: String (Required)
     *         StreamId: String (Required)
     *         Timestamp: OffsetDateTime (Optional)
     *         TransmissionTime: OffsetDateTime (Optional)
     *         IsWebApp: boolean (Required)
     *         PerformanceCollectionSupported: boolean (Required)
     *         Metrics (Optional): [
     *              (Optional){
     *                 Name: String (Required)
     *                 Value: double (Required)
     *                 Weight: int (Required)
     *             }
     *         ]
     *         Documents (Optional): [
     *              (Optional){
     *                 DocumentType: String(Request/RemoteDependency/Exception/Event/Trace/Unknown) (Required)
     *                 DocumentStreamIds (Optional): [
     *                     String (Optional)
     *                 ]
     *                 Properties (Optional): [
     *                      (Optional){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         TopCpuProcesses (Optional): [
     *              (Optional){
     *                 ProcessName: String (Required)
     *                 CpuPercentage: int (Required)
     *             }
     *         ]
     *         CollectionConfigurationErrors (Optional): [
     *              (Optional){
     *                 CollectionConfigurationErrorType: String(Unknown/PerformanceCounterParsing/PerformanceCounterUnexpected/PerformanceCounterDuplicateIds/DocumentStreamDuplicateIds/DocumentStreamFailureToCreate/DocumentStreamFailureToCreateFilterUnexpected/MetricDuplicateIds/MetricTelemetryTypeUnsupported/MetricFailureToCreate/MetricFailureToCreateFilterUnexpected/FilterFailureToCreateUnexpected/CollectionConfigurationFailureToCreateUnexpected) (Required)
     *                 Message: String (Required)
     *                 FullException: String (Required)
     *                 Data (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ETag: String (Required)
     *     Metrics (Required): [
     *          (Required){
     *             Id: String (Required)
     *             TelemetryType: String (Required)
     *             FilterGroups (Required): [
     *                  (Required){
     *                     Filters (Required): [
     *                          (Required){
     *                             FieldName: String (Required)
     *                             Predicate: String(Equal/NotEqual/LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual/Contains/DoesNotContain) (Required)
     *                             Comparand: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             Projection: String (Required)
     *             Aggregation: String(Avg/Sum/Min/Max) (Required)
     *             BackEndAggregation: String(Avg/Sum/Min/Max) (Required)
     *         }
     *     ]
     *     DocumentStreams (Required): [
     *          (Required){
     *             Id: String (Required)
     *             DocumentFilterGroups (Required): [
     *                  (Required){
     *                     TelemetryType: String(Request/Dependency/Exception/Event/Metric/PerformanceCounter/Trace) (Required)
     *                     Filters (Required): (recursive schema, see Filters above)
     *                 }
     *             ]
     *         }
     *     ]
     *     QuotaInfo (Optional): {
     *         InitialQuota: Double (Optional)
     *         MaxQuota: double (Required)
     *         QuotaAccrualRatePerSec: double (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> publishWithResponseAsync(String ikey, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return FluxUtil.withContext(context -> service.publish(this.getEndpoint(),
            this.getServiceVersion().getVersion(), ikey, accept, requestOptionsLocal, context));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * <tr><td>x-ms-qps-configuration-etag</td><td>String</td><td>No</td><td>An encoded string that indicates whether
     * the collection configuration is changed.</td></tr>
     * <tr><td>x-ms-qps-transmission-time</td><td>Long</td><td>No</td><td>Timestamp when the client transmits the
     * metrics and documents to Live Metrics. A 8-byte long type of ticks.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Optional){
     *         Version: String (Required)
     *         InvariantVersion: int (Required)
     *         Instance: String (Required)
     *         RoleName: String (Required)
     *         MachineName: String (Required)
     *         StreamId: String (Required)
     *         Timestamp: OffsetDateTime (Optional)
     *         TransmissionTime: OffsetDateTime (Optional)
     *         IsWebApp: boolean (Required)
     *         PerformanceCollectionSupported: boolean (Required)
     *         Metrics (Optional): [
     *              (Optional){
     *                 Name: String (Required)
     *                 Value: double (Required)
     *                 Weight: int (Required)
     *             }
     *         ]
     *         Documents (Optional): [
     *              (Optional){
     *                 DocumentType: String(Request/RemoteDependency/Exception/Event/Trace/Unknown) (Required)
     *                 DocumentStreamIds (Optional): [
     *                     String (Optional)
     *                 ]
     *                 Properties (Optional): [
     *                      (Optional){
     *                         key: String (Required)
     *                         value: String (Required)
     *                     }
     *                 ]
     *             }
     *         ]
     *         TopCpuProcesses (Optional): [
     *              (Optional){
     *                 ProcessName: String (Required)
     *                 CpuPercentage: int (Required)
     *             }
     *         ]
     *         CollectionConfigurationErrors (Optional): [
     *              (Optional){
     *                 CollectionConfigurationErrorType: String(Unknown/PerformanceCounterParsing/PerformanceCounterUnexpected/PerformanceCounterDuplicateIds/DocumentStreamDuplicateIds/DocumentStreamFailureToCreate/DocumentStreamFailureToCreateFilterUnexpected/MetricDuplicateIds/MetricTelemetryTypeUnsupported/MetricFailureToCreate/MetricFailureToCreateFilterUnexpected/FilterFailureToCreateUnexpected/CollectionConfigurationFailureToCreateUnexpected) (Required)
     *                 Message: String (Required)
     *                 FullException: String (Required)
     *                 Data (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *     }
     * ]
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     ETag: String (Required)
     *     Metrics (Required): [
     *          (Required){
     *             Id: String (Required)
     *             TelemetryType: String (Required)
     *             FilterGroups (Required): [
     *                  (Required){
     *                     Filters (Required): [
     *                          (Required){
     *                             FieldName: String (Required)
     *                             Predicate: String(Equal/NotEqual/LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual/Contains/DoesNotContain) (Required)
     *                             Comparand: String (Required)
     *                         }
     *                     ]
     *                 }
     *             ]
     *             Projection: String (Required)
     *             Aggregation: String(Avg/Sum/Min/Max) (Required)
     *             BackEndAggregation: String(Avg/Sum/Min/Max) (Required)
     *         }
     *     ]
     *     DocumentStreams (Required): [
     *          (Required){
     *             Id: String (Required)
     *             DocumentFilterGroups (Required): [
     *                  (Required){
     *                     TelemetryType: String(Request/Dependency/Exception/Event/Metric/PerformanceCounter/Trace) (Required)
     *                     Filters (Required): (recursive schema, see Filters above)
     *                 }
     *             ]
     *         }
     *     ]
     *     QuotaInfo (Optional): {
     *         InitialQuota: Double (Optional)
     *         MaxQuota: double (Required)
     *         QuotaAccrualRatePerSec: double (Required)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> publishWithResponse(String ikey, RequestOptions requestOptions) {
        final String accept = "application/json";
        RequestOptions requestOptionsLocal = requestOptions == null ? new RequestOptions() : requestOptions;
        requestOptionsLocal.addRequestCallback(requestLocal -> {
            if (requestLocal.getBody() != null && requestLocal.getHeaders().get(HttpHeaderName.CONTENT_TYPE) == null) {
                requestLocal.getHeaders().set(HttpHeaderName.CONTENT_TYPE, "application/json");
            }
        });
        return service.publishSync(this.getEndpoint(), this.getServiceVersion().getVersion(), ikey, accept,
            requestOptionsLocal, Context.NONE);
    }
}
