// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Monitoring data point coming from the client, which includes metrics, documents and other metadata info.
 */
@Fluent
public final class MonitoringDataPoint implements JsonSerializable<MonitoringDataPoint> {
    /*
     * Application Insights SDK version.
     */
    @Generated
    private final String version;

    /*
     * Version/generation of the data contract (MonitoringDataPoint) between SDK and Live Metrics.
     */
    @Generated
    private final int invariantVersion;

    /*
     * Service instance name where Application Insights SDK lives.
     */
    @Generated
    private final String instance;

    /*
     * Service role name.
     */
    @Generated
    private final String roleName;

    /*
     * Computer name where Application Insights SDK lives.
     */
    @Generated
    private final String machineName;

    /*
     * Identifies an Application Insights SDK as a trusted agent to report metrics and documents.
     */
    @Generated
    private final String streamId;

    /*
     * Data point generation timestamp.
     */
    @Generated
    private OffsetDateTime timestamp;

    /*
     * Timestamp when the client transmits the metrics and documents to Live Metrics.
     */
    @Generated
    private OffsetDateTime transmissionTime;

    /*
     * True if the current application is an Azure Web App.
     */
    @Generated
    private final boolean isWebApp;

    /*
     * True if performance counters collection is supported.
     */
    @Generated
    private final boolean performanceCollectionSupported;

    /*
     * An array of metric data points.
     */
    @Generated
    private List<MetricPoint> metrics;

    /*
     * An array of documents of a specific type {Request}, {RemoteDependency}, {Exception}, {Event}, or {Trace}
     */
    @Generated
    private List<DocumentIngress> documents;

    /*
     * An array of top cpu consumption data point.
     */
    @Generated
    private List<ProcessCpuData> topCpuProcesses;

    /*
     * An array of error while SDK parses and applies the {CollectionConfigurationInfo} provided by Live Metrics.
     */
    @Generated
    private List<CollectionConfigurationError> collectionConfigurationErrors;

    /**
     * Creates an instance of MonitoringDataPoint class.
     * 
     * @param version the version value to set.
     * @param invariantVersion the invariantVersion value to set.
     * @param instance the instance value to set.
     * @param roleName the roleName value to set.
     * @param machineName the machineName value to set.
     * @param streamId the streamId value to set.
     * @param isWebApp the isWebApp value to set.
     * @param performanceCollectionSupported the performanceCollectionSupported value to set.
     */
    @Generated
    public MonitoringDataPoint(String version, int invariantVersion, String instance, String roleName,
        String machineName, String streamId, boolean isWebApp, boolean performanceCollectionSupported) {
        this.version = version;
        this.invariantVersion = invariantVersion;
        this.instance = instance;
        this.roleName = roleName;
        this.machineName = machineName;
        this.streamId = streamId;
        this.isWebApp = isWebApp;
        this.performanceCollectionSupported = performanceCollectionSupported;
    }

    /**
     * Get the version property: Application Insights SDK version.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the invariantVersion property: Version/generation of the data contract (MonitoringDataPoint) between SDK and
     * Live Metrics.
     * 
     * @return the invariantVersion value.
     */
    @Generated
    public int getInvariantVersion() {
        return this.invariantVersion;
    }

    /**
     * Get the instance property: Service instance name where Application Insights SDK lives.
     * 
     * @return the instance value.
     */
    @Generated
    public String getInstance() {
        return this.instance;
    }

    /**
     * Get the roleName property: Service role name.
     * 
     * @return the roleName value.
     */
    @Generated
    public String getRoleName() {
        return this.roleName;
    }

    /**
     * Get the machineName property: Computer name where Application Insights SDK lives.
     * 
     * @return the machineName value.
     */
    @Generated
    public String getMachineName() {
        return this.machineName;
    }

    /**
     * Get the streamId property: Identifies an Application Insights SDK as a trusted agent to report metrics and
     * documents.
     * 
     * @return the streamId value.
     */
    @Generated
    public String getStreamId() {
        return this.streamId;
    }

    /**
     * Get the timestamp property: Data point generation timestamp.
     * 
     * @return the timestamp value.
     */
    @Generated
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: Data point generation timestamp.
     * 
     * @param timestamp the timestamp value to set.
     * @return the MonitoringDataPoint object itself.
     */
    @Generated
    public MonitoringDataPoint setTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the transmissionTime property: Timestamp when the client transmits the metrics and documents to Live Metrics.
     * 
     * @return the transmissionTime value.
     */
    @Generated
    public OffsetDateTime getTransmissionTime() {
        return this.transmissionTime;
    }

    /**
     * Set the transmissionTime property: Timestamp when the client transmits the metrics and documents to Live Metrics.
     * 
     * @param transmissionTime the transmissionTime value to set.
     * @return the MonitoringDataPoint object itself.
     */
    @Generated
    public MonitoringDataPoint setTransmissionTime(OffsetDateTime transmissionTime) {
        this.transmissionTime = transmissionTime;
        return this;
    }

    /**
     * Get the isWebApp property: True if the current application is an Azure Web App.
     * 
     * @return the isWebApp value.
     */
    @Generated
    public boolean isWebApp() {
        return this.isWebApp;
    }

    /**
     * Get the performanceCollectionSupported property: True if performance counters collection is supported.
     * 
     * @return the performanceCollectionSupported value.
     */
    @Generated
    public boolean isPerformanceCollectionSupported() {
        return this.performanceCollectionSupported;
    }

    /**
     * Get the metrics property: An array of metric data points.
     * 
     * @return the metrics value.
     */
    @Generated
    public List<MetricPoint> getMetrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: An array of metric data points.
     * 
     * @param metrics the metrics value to set.
     * @return the MonitoringDataPoint object itself.
     */
    @Generated
    public MonitoringDataPoint setMetrics(List<MetricPoint> metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the documents property: An array of documents of a specific type {Request}, {RemoteDependency}, {Exception},
     * {Event}, or {Trace}.
     * 
     * @return the documents value.
     */
    @Generated
    public List<DocumentIngress> getDocuments() {
        return this.documents;
    }

    /**
     * Set the documents property: An array of documents of a specific type {Request}, {RemoteDependency}, {Exception},
     * {Event}, or {Trace}.
     * 
     * @param documents the documents value to set.
     * @return the MonitoringDataPoint object itself.
     */
    @Generated
    public MonitoringDataPoint setDocuments(List<DocumentIngress> documents) {
        this.documents = documents;
        return this;
    }

    /**
     * Get the topCpuProcesses property: An array of top cpu consumption data point.
     * 
     * @return the topCpuProcesses value.
     */
    @Generated
    public List<ProcessCpuData> getTopCpuProcesses() {
        return this.topCpuProcesses;
    }

    /**
     * Set the topCpuProcesses property: An array of top cpu consumption data point.
     * 
     * @param topCpuProcesses the topCpuProcesses value to set.
     * @return the MonitoringDataPoint object itself.
     */
    @Generated
    public MonitoringDataPoint setTopCpuProcesses(List<ProcessCpuData> topCpuProcesses) {
        this.topCpuProcesses = topCpuProcesses;
        return this;
    }

    /**
     * Get the collectionConfigurationErrors property: An array of error while SDK parses and applies the
     * {CollectionConfigurationInfo} provided by Live Metrics.
     * 
     * @return the collectionConfigurationErrors value.
     */
    @Generated
    public List<CollectionConfigurationError> getCollectionConfigurationErrors() {
        return this.collectionConfigurationErrors;
    }

    /**
     * Set the collectionConfigurationErrors property: An array of error while SDK parses and applies the
     * {CollectionConfigurationInfo} provided by Live Metrics.
     * 
     * @param collectionConfigurationErrors the collectionConfigurationErrors value to set.
     * @return the MonitoringDataPoint object itself.
     */
    @Generated
    public MonitoringDataPoint
        setCollectionConfigurationErrors(List<CollectionConfigurationError> collectionConfigurationErrors) {
        this.collectionConfigurationErrors = collectionConfigurationErrors;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("Version", this.version);
        jsonWriter.writeIntField("InvariantVersion", this.invariantVersion);
        jsonWriter.writeStringField("Instance", this.instance);
        jsonWriter.writeStringField("RoleName", this.roleName);
        jsonWriter.writeStringField("MachineName", this.machineName);
        jsonWriter.writeStringField("StreamId", this.streamId);
        jsonWriter.writeBooleanField("IsWebApp", this.isWebApp);
        jsonWriter.writeBooleanField("PerformanceCollectionSupported", this.performanceCollectionSupported);
        jsonWriter.writeStringField("Timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("TransmissionTime",
            this.transmissionTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.transmissionTime));
        jsonWriter.writeArrayField("Metrics", this.metrics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("Documents", this.documents, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("TopCpuProcesses", this.topCpuProcesses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("CollectionConfigurationErrors", this.collectionConfigurationErrors,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitoringDataPoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitoringDataPoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitoringDataPoint.
     */
    @Generated
    public static MonitoringDataPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String version = null;
            int invariantVersion = 0;
            String instance = null;
            String roleName = null;
            String machineName = null;
            String streamId = null;
            boolean isWebApp = false;
            boolean performanceCollectionSupported = false;
            OffsetDateTime timestamp = null;
            OffsetDateTime transmissionTime = null;
            List<MetricPoint> metrics = null;
            List<DocumentIngress> documents = null;
            List<ProcessCpuData> topCpuProcesses = null;
            List<CollectionConfigurationError> collectionConfigurationErrors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("InvariantVersion".equals(fieldName)) {
                    invariantVersion = reader.getInt();
                } else if ("Instance".equals(fieldName)) {
                    instance = reader.getString();
                } else if ("RoleName".equals(fieldName)) {
                    roleName = reader.getString();
                } else if ("MachineName".equals(fieldName)) {
                    machineName = reader.getString();
                } else if ("StreamId".equals(fieldName)) {
                    streamId = reader.getString();
                } else if ("IsWebApp".equals(fieldName)) {
                    isWebApp = reader.getBoolean();
                } else if ("PerformanceCollectionSupported".equals(fieldName)) {
                    performanceCollectionSupported = reader.getBoolean();
                } else if ("Timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("TransmissionTime".equals(fieldName)) {
                    transmissionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("Metrics".equals(fieldName)) {
                    metrics = reader.readArray(reader1 -> MetricPoint.fromJson(reader1));
                } else if ("Documents".equals(fieldName)) {
                    documents = reader.readArray(reader1 -> DocumentIngress.fromJson(reader1));
                } else if ("TopCpuProcesses".equals(fieldName)) {
                    topCpuProcesses = reader.readArray(reader1 -> ProcessCpuData.fromJson(reader1));
                } else if ("CollectionConfigurationErrors".equals(fieldName)) {
                    collectionConfigurationErrors
                        = reader.readArray(reader1 -> CollectionConfigurationError.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            MonitoringDataPoint deserializedMonitoringDataPoint = new MonitoringDataPoint(version, invariantVersion,
                instance, roleName, machineName, streamId, isWebApp, performanceCollectionSupported);
            deserializedMonitoringDataPoint.timestamp = timestamp;
            deserializedMonitoringDataPoint.transmissionTime = transmissionTime;
            deserializedMonitoringDataPoint.metrics = metrics;
            deserializedMonitoringDataPoint.documents = documents;
            deserializedMonitoringDataPoint.topCpuProcesses = topCpuProcesses;
            deserializedMonitoringDataPoint.collectionConfigurationErrors = collectionConfigurationErrors;

            return deserializedMonitoringDataPoint;
        });
    }
}
