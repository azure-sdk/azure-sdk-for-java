// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents the collection configuration - a customizable description of performance counters, metrics, and full
 * telemetry documents to be collected by the client SDK.
 */
@Immutable
public final class CollectionConfigurationInfo implements JsonSerializable<CollectionConfigurationInfo> {
    /*
     * An encoded string that indicates whether the collection configuration is changed.
     */
    @Generated
    private final String eTag;

    /*
     * An array of metric configuration info.
     */
    @Generated
    private final List<DerivedMetricInfo> metrics;

    /*
     * An array of document stream configuration info.
     */
    @Generated
    private final List<DocumentStreamInfo> documentStreams;

    /*
     * Controls document quotas to be sent to Live Metrics.
     */
    @Generated
    private QuotaConfigurationInfo quotaInfo;

    /**
     * Creates an instance of CollectionConfigurationInfo class.
     * 
     * @param eTag the eTag value to set.
     * @param metrics the metrics value to set.
     * @param documentStreams the documentStreams value to set.
     */
    @Generated
    private CollectionConfigurationInfo(String eTag, List<DerivedMetricInfo> metrics,
        List<DocumentStreamInfo> documentStreams) {
        this.eTag = eTag;
        this.metrics = metrics;
        this.documentStreams = documentStreams;
    }

    /**
     * Get the eTag property: An encoded string that indicates whether the collection configuration is changed.
     * 
     * @return the eTag value.
     */
    @Generated
    public String getETag() {
        return this.eTag;
    }

    /**
     * Get the metrics property: An array of metric configuration info.
     * 
     * @return the metrics value.
     */
    @Generated
    public List<DerivedMetricInfo> getMetrics() {
        return this.metrics;
    }

    /**
     * Get the documentStreams property: An array of document stream configuration info.
     * 
     * @return the documentStreams value.
     */
    @Generated
    public List<DocumentStreamInfo> getDocumentStreams() {
        return this.documentStreams;
    }

    /**
     * Get the quotaInfo property: Controls document quotas to be sent to Live Metrics.
     * 
     * @return the quotaInfo value.
     */
    @Generated
    public QuotaConfigurationInfo getQuotaInfo() {
        return this.quotaInfo;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ETag", this.eTag);
        jsonWriter.writeArrayField("Metrics", this.metrics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("DocumentStreams", this.documentStreams,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("QuotaInfo", this.quotaInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectionConfigurationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectionConfigurationInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CollectionConfigurationInfo.
     */
    @Generated
    public static CollectionConfigurationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String eTag = null;
            List<DerivedMetricInfo> metrics = null;
            List<DocumentStreamInfo> documentStreams = null;
            QuotaConfigurationInfo quotaInfo = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ETag".equals(fieldName)) {
                    eTag = reader.getString();
                } else if ("Metrics".equals(fieldName)) {
                    metrics = reader.readArray(reader1 -> DerivedMetricInfo.fromJson(reader1));
                } else if ("DocumentStreams".equals(fieldName)) {
                    documentStreams = reader.readArray(reader1 -> DocumentStreamInfo.fromJson(reader1));
                } else if ("QuotaInfo".equals(fieldName)) {
                    quotaInfo = QuotaConfigurationInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            CollectionConfigurationInfo deserializedCollectionConfigurationInfo
                = new CollectionConfigurationInfo(eTag, metrics, documentStreams);
            deserializedCollectionConfigurationInfo.quotaInfo = quotaInfo;

            return deserializedCollectionConfigurationInfo;
        });
    }
}
