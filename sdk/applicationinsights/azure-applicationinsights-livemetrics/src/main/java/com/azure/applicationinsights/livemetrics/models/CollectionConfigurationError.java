// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.applicationinsights.livemetrics.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents an error while SDK parses and applies an instance of CollectionConfigurationInfo.
 */
@Immutable
public final class CollectionConfigurationError implements JsonSerializable<CollectionConfigurationError> {
    /*
     * Error type.
     */
    @Generated
    private final CollectionConfigurationErrorType collectionConfigurationErrorType;

    /*
     * Error message.
     */
    @Generated
    private final String message;

    /*
     * Exception that led to the creation of the configuration error.
     */
    @Generated
    private final String fullException;

    /*
     * Custom properties to add more information to the error.
     */
    @Generated
    private final List<KeyValuePairStringString> data;

    /**
     * Creates an instance of CollectionConfigurationError class.
     * 
     * @param collectionConfigurationErrorType the collectionConfigurationErrorType value to set.
     * @param message the message value to set.
     * @param fullException the fullException value to set.
     * @param data the data value to set.
     */
    @Generated
    public CollectionConfigurationError(CollectionConfigurationErrorType collectionConfigurationErrorType,
        String message, String fullException, List<KeyValuePairStringString> data) {
        this.collectionConfigurationErrorType = collectionConfigurationErrorType;
        this.message = message;
        this.fullException = fullException;
        this.data = data;
    }

    /**
     * Get the collectionConfigurationErrorType property: Error type.
     * 
     * @return the collectionConfigurationErrorType value.
     */
    @Generated
    public CollectionConfigurationErrorType getCollectionConfigurationErrorType() {
        return this.collectionConfigurationErrorType;
    }

    /**
     * Get the message property: Error message.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the fullException property: Exception that led to the creation of the configuration error.
     * 
     * @return the fullException value.
     */
    @Generated
    public String getFullException() {
        return this.fullException;
    }

    /**
     * Get the data property: Custom properties to add more information to the error.
     * 
     * @return the data value.
     */
    @Generated
    public List<KeyValuePairStringString> getData() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("CollectionConfigurationErrorType",
            this.collectionConfigurationErrorType == null ? null : this.collectionConfigurationErrorType.toString());
        jsonWriter.writeStringField("Message", this.message);
        jsonWriter.writeStringField("FullException", this.fullException);
        jsonWriter.writeArrayField("Data", this.data, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectionConfigurationError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectionConfigurationError if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CollectionConfigurationError.
     */
    @Generated
    public static CollectionConfigurationError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectionConfigurationErrorType collectionConfigurationErrorType = null;
            String message = null;
            String fullException = null;
            List<KeyValuePairStringString> data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("CollectionConfigurationErrorType".equals(fieldName)) {
                    collectionConfigurationErrorType = CollectionConfigurationErrorType.fromString(reader.getString());
                } else if ("Message".equals(fieldName)) {
                    message = reader.getString();
                } else if ("FullException".equals(fieldName)) {
                    fullException = reader.getString();
                } else if ("Data".equals(fieldName)) {
                    data = reader.readArray(reader1 -> KeyValuePairStringString.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new CollectionConfigurationError(collectionConfigurationErrorType, message, fullException, data);
        });
    }
}
