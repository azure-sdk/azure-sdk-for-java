// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.containerinstance.generated.models.AzureFileVolume;
import com.azure.resourcemanager.containerinstance.generated.models.ConfidentialComputeProperties;
import com.azure.resourcemanager.containerinstance.generated.models.Container;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupDiagnostics;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupIpAddressType;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupNetworkProtocol;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupPriority;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupRestartPolicy;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupSku;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerPort;
import com.azure.resourcemanager.containerinstance.generated.models.DeploymentExtensionSpec;
import com.azure.resourcemanager.containerinstance.generated.models.EncryptionProperties;
import com.azure.resourcemanager.containerinstance.generated.models.GpuResource;
import com.azure.resourcemanager.containerinstance.generated.models.GpuSku;
import com.azure.resourcemanager.containerinstance.generated.models.IpAddress;
import com.azure.resourcemanager.containerinstance.generated.models.LogAnalytics;
import com.azure.resourcemanager.containerinstance.generated.models.LogAnalyticsLogType;
import com.azure.resourcemanager.containerinstance.generated.models.OperatingSystemTypes;
import com.azure.resourcemanager.containerinstance.generated.models.Port;
import com.azure.resourcemanager.containerinstance.generated.models.ResourceRequests;
import com.azure.resourcemanager.containerinstance.generated.models.ResourceRequirements;
import com.azure.resourcemanager.containerinstance.generated.models.SecurityContextCapabilitiesDefinition;
import com.azure.resourcemanager.containerinstance.generated.models.SecurityContextDefinition;
import com.azure.resourcemanager.containerinstance.generated.models.Volume;
import com.azure.resourcemanager.containerinstance.generated.models.VolumeMount;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ContainerGroupProfiles CreateOrUpdate.
 */
public final class ContainerGroupProfilesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/containerinstance/resource-manager/Microsoft.ContainerInstance/preview/2024-05-01-preview/examples/
     * ContainerGroupProfileCreateOrUpdate_CreateConfidential.json
     */
    /**
     * Sample code: ConfidentialContainerGroupProfile.
     * 
     * @param manager Entry point to ContainerInstanceManager.
     */
    public static void confidentialContainerGroupProfile(
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager) {
        manager.containerGroupProfiles()
            .define("demo1")
            .withRegion("westeurope")
            .withExistingResourceGroup("demo")
            .withContainers(
                Arrays
                    .asList(
                        new Container().withName("accdemo")
                            .withImage("confiimage")
                            .withCommand(Arrays.asList())
                            .withPorts(Arrays.asList(new ContainerPort().withPort(8000)))
                            .withEnvironmentVariables(Arrays.asList())
                            .withResources(new ResourceRequirements()
                                .withRequests(new ResourceRequests().withMemoryInGB(1.5).withCpu(1.0)))
                            .withSecurityContext(new SecurityContextDefinition().withPrivileged(false)
                                .withCapabilities(new SecurityContextCapabilitiesDefinition()
                                    .withAdd(Arrays.asList("CAP_NET_ADMIN"))))))
            .withOsType(OperatingSystemTypes.LINUX)
            .withZones(Arrays.asList("1"))
            .withImageRegistryCredentials(Arrays.asList())
            .withIpAddress(new IpAddress()
                .withPorts(Arrays.asList(new Port().withProtocol(ContainerGroupNetworkProtocol.TCP).withPort(8000)))
                .withType(ContainerGroupIpAddressType.PUBLIC))
            .withSku(ContainerGroupSku.CONFIDENTIAL)
            .withConfidentialComputeProperties(new ConfidentialComputeProperties().withCcePolicy(
                "eyJhbGxvd19hbGwiOiB0cnVlLCAiY29udGFpbmVycyI6IHsibGVuZ3RoIjogMCwgImVsZW1lbnRzIjogbnVsbH19"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerinstance/resource-manager/Microsoft.ContainerInstance/preview/2024-05-01-preview/examples/
     * ContainerGroupProfileCreateOrUpdate_EncryptionProperties.json
     */
    /**
     * Sample code: ContainerGroupProfileWithEncryptionProperties.
     * 
     * @param manager Entry point to ContainerInstanceManager.
     */
    public static void containerGroupProfileWithEncryptionProperties(
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager) {
        manager.containerGroupProfiles()
            .define("demo1")
            .withRegion("eastus2")
            .withExistingResourceGroup("demo")
            .withContainers(
                Arrays.asList(new Container().withName("demo1")
                    .withImage("nginx")
                    .withCommand(Arrays.asList())
                    .withPorts(Arrays.asList(new ContainerPort().withPort(80)))
                    .withEnvironmentVariables(Arrays.asList())
                    .withResources(new ResourceRequirements()
                        .withRequests(new ResourceRequests().withMemoryInGB(1.5).withCpu(1.0)))))
            .withOsType(OperatingSystemTypes.LINUX)
            .withZones(Arrays.asList("1"))
            .withImageRegistryCredentials(Arrays.asList())
            .withIpAddress(new IpAddress()
                .withPorts(Arrays.asList(new Port().withProtocol(ContainerGroupNetworkProtocol.TCP).withPort(80)))
                .withType(ContainerGroupIpAddressType.PUBLIC))
            .withEncryptionProperties(new EncryptionProperties()
                .withVaultBaseUrl("https://testkeyvault.vault.azure.net")
                .withKeyName("fakeTokenPlaceholder")
                .withKeyVersion("fakeTokenPlaceholder")
                .withIdentity(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/test-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/container-group-identity"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerinstance/resource-manager/Microsoft.ContainerInstance/preview/2024-05-01-preview/examples/
     * ContainerGroupProfileCreateOrUpdate_Extensions.json
     */
    /**
     * Sample code: ContainerGroupProfileCreateWithExtensions.
     * 
     * @param manager Entry point to ContainerInstanceManager.
     */
    public static void containerGroupProfileCreateWithExtensions(
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager) throws IOException {
        manager.containerGroupProfiles()
            .define("demo1")
            .withRegion("eastus2")
            .withExistingResourceGroup("demo")
            .withContainers(
                Arrays.asList(new Container().withName("demo1")
                    .withImage("nginx")
                    .withCommand(Arrays.asList())
                    .withPorts(Arrays.asList(new ContainerPort().withPort(80)))
                    .withEnvironmentVariables(Arrays.asList())
                    .withResources(new ResourceRequirements()
                        .withRequests(new ResourceRequests().withMemoryInGB(1.5).withCpu(1.0)))))
            .withOsType(OperatingSystemTypes.LINUX)
            .withZones(Arrays.asList("1"))
            .withImageRegistryCredentials(Arrays.asList())
            .withIpAddress(new IpAddress()
                .withPorts(Arrays.asList(new Port().withProtocol(ContainerGroupNetworkProtocol.TCP).withPort(80)))
                .withType(ContainerGroupIpAddressType.PRIVATE))
            .withExtensions(Arrays.asList(
                new DeploymentExtensionSpec().withName("kube-proxy")
                    .withExtensionType("kube-proxy")
                    .withVersion("1.0")
                    .withSettings(SerializerFactory.createDefaultManagementSerializerAdapter()
                        .deserialize("{\"clusterCidr\":\"10.240.0.0/16\",\"kubeVersion\":\"v1.9.10\"}", Object.class,
                            SerializerEncoding.JSON))
                    .withProtectedSettings(SerializerFactory.createDefaultManagementSerializerAdapter()
                        .deserialize("{\"kubeConfig\":\"<kubeconfig encoded string>\"}", Object.class,
                            SerializerEncoding.JSON)),
                new DeploymentExtensionSpec().withName("vk-realtime-metrics")
                    .withExtensionType("realtime-metrics")
                    .withVersion("1.0")))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerinstance/resource-manager/Microsoft.ContainerInstance/preview/2024-05-01-preview/examples/
     * ContainerGroupProfilesCreateOrUpdate.json
     */
    /**
     * Sample code: ContainerGroupProfilesCreateOrUpdate.
     * 
     * @param manager Entry point to ContainerInstanceManager.
     */
    public static void containerGroupProfilesCreateOrUpdate(
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager) throws IOException {
        manager.containerGroupProfiles()
            .define("demo1")
            .withRegion("west us")
            .withExistingResourceGroup("demo")
            .withContainers(Arrays.asList(new Container().withName("demo1")
                .withImage("nginx")
                .withCommand(Arrays.asList())
                .withPorts(Arrays.asList(new ContainerPort().withPort(80)))
                .withEnvironmentVariables(Arrays.asList())
                .withResources(new ResourceRequirements().withRequests(new ResourceRequests().withMemoryInGB(1.5)
                    .withCpu(1.0)
                    .withGpu(new GpuResource().withCount(1).withSku(GpuSku.K80))))
                .withVolumeMounts(Arrays.asList(
                    new VolumeMount().withName("volume1").withMountPath("/mnt/volume1").withReadOnly(false),
                    new VolumeMount().withName("volume2").withMountPath("/mnt/volume2").withReadOnly(false),
                    new VolumeMount().withName("volume3").withMountPath("/mnt/volume3").withReadOnly(true)))))
            .withOsType(OperatingSystemTypes.LINUX)
            .withZones(Arrays.asList("1"))
            .withImageRegistryCredentials(Arrays.asList())
            .withIpAddress(new IpAddress()
                .withPorts(Arrays.asList(new Port().withProtocol(ContainerGroupNetworkProtocol.TCP).withPort(80)))
                .withType(ContainerGroupIpAddressType.PUBLIC))
            .withVolumes(Arrays.asList(
                new Volume().withName("volume1")
                    .withAzureFile(new AzureFileVolume().withShareName("shareName")
                        .withStorageAccountName("accountName")
                        .withStorageAccountKey("fakeTokenPlaceholder")),
                new Volume().withName("volume2")
                    .withEmptyDir(SerializerFactory.createDefaultManagementSerializerAdapter()
                        .deserialize("{}", Object.class, SerializerEncoding.JSON)),
                new Volume().withName("volume3")
                    .withSecret(mapOf("secretKey1", "fakeTokenPlaceholder", "secretKey2", "fakeTokenPlaceholder"))))
            .withDiagnostics(new ContainerGroupDiagnostics().withLogAnalytics(new LogAnalytics()
                .withWorkspaceId("workspaceid")
                .withWorkspaceKey("fakeTokenPlaceholder")
                .withLogType(LogAnalyticsLogType.CONTAINER_INSIGHTS)
                .withMetadata(mapOf("pod-uuid", "test-metadata-value"))
                .withWorkspaceResourceId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/microsoft.operationalinsights/workspaces/workspace")))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/containerinstance/resource-manager/Microsoft.ContainerInstance/preview/2024-05-01-preview/examples/
     * ContainerGroupsProfileCreateOrUpdate_CreatePriority.json
     */
    /**
     * Sample code: ContainerGroupsCreateWithPriority.
     * 
     * @param manager Entry point to ContainerInstanceManager.
     */
    public static void containerGroupsCreateWithPriority(
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager) {
        manager.containerGroupProfiles()
            .define("demo1")
            .withRegion("eastus")
            .withExistingResourceGroup("demo")
            .withContainers(
                Arrays.asList(new Container().withName("test-container-001")
                    .withImage("alpine:latest")
                    .withCommand(Arrays.asList("/bin/sh", "-c", "sleep 10"))
                    .withResources(new ResourceRequirements()
                        .withRequests(new ResourceRequests().withMemoryInGB(1.0).withCpu(1.0)))))
            .withOsType(OperatingSystemTypes.LINUX)
            .withRestartPolicy(ContainerGroupRestartPolicy.NEVER)
            .withSku(ContainerGroupSku.STANDARD)
            .withPriority(ContainerGroupPriority.SPOT)
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
