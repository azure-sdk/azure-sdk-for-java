// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The access control levels of the identities.
 */
@Fluent
public final class IdentityAcls implements JsonSerializable<IdentityAcls> {
    /*
     * The default access level.
     */
    private IdentityAccessLevel defaultAccess;

    /*
     * The access control levels for each identity.
     */
    private List<IdentityAccessControl> acls;

    /**
     * Creates an instance of IdentityAcls class.
     */
    public IdentityAcls() {
    }

    /**
     * Get the defaultAccess property: The default access level.
     * 
     * @return the defaultAccess value.
     */
    public IdentityAccessLevel defaultAccess() {
        return this.defaultAccess;
    }

    /**
     * Set the defaultAccess property: The default access level.
     * 
     * @param defaultAccess the defaultAccess value to set.
     * @return the IdentityAcls object itself.
     */
    public IdentityAcls withDefaultAccess(IdentityAccessLevel defaultAccess) {
        this.defaultAccess = defaultAccess;
        return this;
    }

    /**
     * Get the acls property: The access control levels for each identity.
     * 
     * @return the acls value.
     */
    public List<IdentityAccessControl> acls() {
        return this.acls;
    }

    /**
     * Set the acls property: The access control levels for each identity.
     * 
     * @param acls the acls value to set.
     * @return the IdentityAcls object itself.
     */
    public IdentityAcls withAcls(List<IdentityAccessControl> acls) {
        this.acls = acls;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (acls() != null) {
            acls().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("defaultAccess", this.defaultAccess == null ? null : this.defaultAccess.toString());
        jsonWriter.writeArrayField("acls", this.acls, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentityAcls from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentityAcls if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IdentityAcls.
     */
    public static IdentityAcls fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdentityAcls deserializedIdentityAcls = new IdentityAcls();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultAccess".equals(fieldName)) {
                    deserializedIdentityAcls.defaultAccess = IdentityAccessLevel.fromString(reader.getString());
                } else if ("acls".equals(fieldName)) {
                    List<IdentityAccessControl> acls
                        = reader.readArray(reader1 -> IdentityAccessControl.fromJson(reader1));
                    deserializedIdentityAcls.acls = acls;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentityAcls;
        });
    }
}
