// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.NGroupInner;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupProfileStub;
import com.azure.resourcemanager.containerinstance.generated.models.ElasticProfile;
import com.azure.resourcemanager.containerinstance.generated.models.NGroup;
import com.azure.resourcemanager.containerinstance.generated.models.NGroupIdentity;
import com.azure.resourcemanager.containerinstance.generated.models.NGroupProvisioningState;
import com.azure.resourcemanager.containerinstance.generated.models.PlacementProfile;
import com.azure.resourcemanager.containerinstance.generated.models.UpdateProfile;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class NGroupImpl implements NGroup, NGroup.Definition, NGroup.Update {
    private NGroupInner innerObject;

    private final com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public NGroupIdentity identity() {
        return this.innerModel().identity();
    }

    public List<String> zones() {
        List<String> inner = this.innerModel().zones();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String location() {
        return this.innerModel().location();
    }

    public ElasticProfile elasticProfile() {
        return this.innerModel().elasticProfile();
    }

    public PlacementProfile placementProfile() {
        return this.innerModel().placementProfile();
    }

    public List<ContainerGroupProfileStub> containerGroupProfiles() {
        List<ContainerGroupProfileStub> inner = this.innerModel().containerGroupProfiles();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public NGroupProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public UpdateProfile updateProfile() {
        return this.innerModel().updateProfile();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NGroupInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String ngroupsName;

    public NGroupImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NGroup create() {
        this.innerObject = serviceManager.serviceClient()
            .getNGroups()
            .createOrUpdate(resourceGroupName, ngroupsName, this.innerModel(), Context.NONE);
        return this;
    }

    public NGroup create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNGroups()
            .createOrUpdate(resourceGroupName, ngroupsName, this.innerModel(), context);
        return this;
    }

    NGroupImpl(String name,
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager) {
        this.innerObject = new NGroupInner();
        this.serviceManager = serviceManager;
        this.ngroupsName = name;
    }

    public NGroupImpl update() {
        return this;
    }

    public NGroup apply() {
        this.innerObject = serviceManager.serviceClient()
            .getNGroups()
            .update(resourceGroupName, ngroupsName, this.innerModel(), Context.NONE);
        return this;
    }

    public NGroup apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNGroups()
            .update(resourceGroupName, ngroupsName, this.innerModel(), context);
        return this;
    }

    NGroupImpl(NGroupInner innerObject,
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.ngroupsName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "ngroups");
    }

    public NGroup refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getNGroups()
            .getByResourceGroupWithResponse(resourceGroupName, ngroupsName, Context.NONE)
            .getValue();
        return this;
    }

    public NGroup refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNGroups()
            .getByResourceGroupWithResponse(resourceGroupName, ngroupsName, context)
            .getValue();
        return this;
    }

    public void start() {
        serviceManager.nGroups().start(resourceGroupName, ngroupsName);
    }

    public void start(Context context) {
        serviceManager.nGroups().start(resourceGroupName, ngroupsName, context);
    }

    public Response<Void> stopWithResponse(Context context) {
        return serviceManager.nGroups().stopWithResponse(resourceGroupName, ngroupsName, context);
    }

    public void stop() {
        serviceManager.nGroups().stop(resourceGroupName, ngroupsName);
    }

    public void restart() {
        serviceManager.nGroups().restart(resourceGroupName, ngroupsName);
    }

    public void restart(Context context) {
        serviceManager.nGroups().restart(resourceGroupName, ngroupsName, context);
    }

    public NGroupImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NGroupImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NGroupImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public NGroupImpl withIdentity(NGroupIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public NGroupImpl withZones(List<String> zones) {
        this.innerModel().withZones(zones);
        return this;
    }

    public NGroupImpl withElasticProfile(ElasticProfile elasticProfile) {
        this.innerModel().withElasticProfile(elasticProfile);
        return this;
    }

    public NGroupImpl withPlacementProfile(PlacementProfile placementProfile) {
        this.innerModel().withPlacementProfile(placementProfile);
        return this;
    }

    public NGroupImpl withContainerGroupProfiles(List<ContainerGroupProfileStub> containerGroupProfiles) {
        this.innerModel().withContainerGroupProfiles(containerGroupProfiles);
        return this;
    }

    public NGroupImpl withUpdateProfile(UpdateProfile updateProfile) {
        this.innerModel().withUpdateProfile(updateProfile);
        return this;
    }
}
