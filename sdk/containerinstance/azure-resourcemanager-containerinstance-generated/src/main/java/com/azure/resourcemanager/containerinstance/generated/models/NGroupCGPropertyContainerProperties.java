// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * container properties.
 */
@Fluent
public final class NGroupCGPropertyContainerProperties
    implements JsonSerializable<NGroupCGPropertyContainerProperties> {
    /*
     * The volumeMounts property.
     */
    private List<VolumeMount> volumeMounts;

    /**
     * Creates an instance of NGroupCGPropertyContainerProperties class.
     */
    public NGroupCGPropertyContainerProperties() {
    }

    /**
     * Get the volumeMounts property: The volumeMounts property.
     * 
     * @return the volumeMounts value.
     */
    public List<VolumeMount> volumeMounts() {
        return this.volumeMounts;
    }

    /**
     * Set the volumeMounts property: The volumeMounts property.
     * 
     * @param volumeMounts the volumeMounts value to set.
     * @return the NGroupCGPropertyContainerProperties object itself.
     */
    public NGroupCGPropertyContainerProperties withVolumeMounts(List<VolumeMount> volumeMounts) {
        this.volumeMounts = volumeMounts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (volumeMounts() != null) {
            volumeMounts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("volumeMounts", this.volumeMounts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NGroupCGPropertyContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NGroupCGPropertyContainerProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NGroupCGPropertyContainerProperties.
     */
    public static NGroupCGPropertyContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NGroupCGPropertyContainerProperties deserializedNGroupCGPropertyContainerProperties
                = new NGroupCGPropertyContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("volumeMounts".equals(fieldName)) {
                    List<VolumeMount> volumeMounts = reader.readArray(reader1 -> VolumeMount.fromJson(reader1));
                    deserializedNGroupCGPropertyContainerProperties.volumeMounts = volumeMounts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNGroupCGPropertyContainerProperties;
        });
    }
}
