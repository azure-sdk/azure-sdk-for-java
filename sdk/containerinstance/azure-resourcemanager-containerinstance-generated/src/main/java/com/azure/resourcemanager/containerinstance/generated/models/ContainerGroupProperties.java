// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupPropertiesProperties;
import java.io.IOException;
import java.util.List;

/**
 * The container group properties.
 */
@Fluent
public class ContainerGroupProperties implements JsonSerializable<ContainerGroupProperties> {
    /*
     * The identity of the container group, if configured.
     */
    private ContainerGroupIdentity identity;

    /*
     * The container group properties
     */
    private ContainerGroupPropertiesProperties innerProperties = new ContainerGroupPropertiesProperties();

    /**
     * Creates an instance of ContainerGroupProperties class.
     */
    public ContainerGroupProperties() {
    }

    /**
     * Get the identity property: The identity of the container group, if configured.
     * 
     * @return the identity value.
     */
    public ContainerGroupIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the container group, if configured.
     * 
     * @param identity the identity value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withIdentity(ContainerGroupIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The container group properties.
     * 
     * @return the innerProperties value.
     */
    private ContainerGroupPropertiesProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Set the innerProperties property: The container group properties.
     * 
     * @param innerProperties the innerProperties value to set.
     * @return the ContainerGroupProperties object itself.
     */
    ContainerGroupProperties withInnerProperties(ContainerGroupPropertiesProperties innerProperties) {
        this.innerProperties = innerProperties;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the container group. This only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the secretReferences property: The secret references that will be referenced within the container group.
     * 
     * @return the secretReferences value.
     */
    public List<SecretReference> secretReferences() {
        return this.innerProperties() == null ? null : this.innerProperties().secretReferences();
    }

    /**
     * Set the secretReferences property: The secret references that will be referenced within the container group.
     * 
     * @param secretReferences the secretReferences value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withSecretReferences(List<SecretReference> secretReferences) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withSecretReferences(secretReferences);
        return this;
    }

    /**
     * Get the containers property: The containers within the container group.
     * 
     * @return the containers value.
     */
    public List<Container> containers() {
        return this.innerProperties() == null ? null : this.innerProperties().containers();
    }

    /**
     * Set the containers property: The containers within the container group.
     * 
     * @param containers the containers value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withContainers(List<Container> containers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withContainers(containers);
        return this;
    }

    /**
     * Get the imageRegistryCredentials property: The image registry credentials by which the container group is created
     * from.
     * 
     * @return the imageRegistryCredentials value.
     */
    public List<ImageRegistryCredential> imageRegistryCredentials() {
        return this.innerProperties() == null ? null : this.innerProperties().imageRegistryCredentials();
    }

    /**
     * Set the imageRegistryCredentials property: The image registry credentials by which the container group is created
     * from.
     * 
     * @param imageRegistryCredentials the imageRegistryCredentials value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties
        withImageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withImageRegistryCredentials(imageRegistryCredentials);
        return this;
    }

    /**
     * Get the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @return the restartPolicy value.
     */
    public ContainerGroupRestartPolicy restartPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().restartPolicy();
    }

    /**
     * Set the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @param restartPolicy the restartPolicy value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withRestartPolicy(ContainerGroupRestartPolicy restartPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withRestartPolicy(restartPolicy);
        return this;
    }

    /**
     * Get the ipAddress property: The IP address type of the container group.
     * 
     * @return the ipAddress value.
     */
    public IpAddress ipAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAddress();
    }

    /**
     * Set the ipAddress property: The IP address type of the container group.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withIpAddress(IpAddress ipAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withIpAddress(ipAddress);
        return this;
    }

    /**
     * Get the osType property: The operating system type required by the containers in the container group.
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: The operating system type required by the containers in the container group.
     * 
     * @param osType the osType value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withOsType(OperatingSystemTypes osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @return the volumes value.
     */
    public List<Volume> volumes() {
        return this.innerProperties() == null ? null : this.innerProperties().volumes();
    }

    /**
     * Set the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @param volumes the volumes value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withVolumes(List<Volume> volumes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withVolumes(volumes);
        return this;
    }

    /**
     * Get the instanceView property: The instance view of the container group. Only valid in response.
     * 
     * @return the instanceView value.
     */
    public ContainerGroupPropertiesInstanceView instanceView() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceView();
    }

    /**
     * Get the diagnostics property: The diagnostic information for a container group.
     * 
     * @return the diagnostics value.
     */
    public ContainerGroupDiagnostics diagnostics() {
        return this.innerProperties() == null ? null : this.innerProperties().diagnostics();
    }

    /**
     * Set the diagnostics property: The diagnostic information for a container group.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withDiagnostics(ContainerGroupDiagnostics diagnostics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Get the subnetIds property: The subnet resource IDs for a container group.
     * 
     * @return the subnetIds value.
     */
    public List<ContainerGroupSubnetId> subnetIds() {
        return this.innerProperties() == null ? null : this.innerProperties().subnetIds();
    }

    /**
     * Set the subnetIds property: The subnet resource IDs for a container group.
     * 
     * @param subnetIds the subnetIds value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withSubnetIds(List<ContainerGroupSubnetId> subnetIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withSubnetIds(subnetIds);
        return this;
    }

    /**
     * Get the dnsConfig property: The DNS config information for a container group.
     * 
     * @return the dnsConfig value.
     */
    public DnsConfiguration dnsConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsConfig();
    }

    /**
     * Set the dnsConfig property: The DNS config information for a container group.
     * 
     * @param dnsConfig the dnsConfig value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withDnsConfig(DnsConfiguration dnsConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withDnsConfig(dnsConfig);
        return this;
    }

    /**
     * Get the sku property: The SKU for a container group.
     * 
     * @return the sku value.
     */
    public ContainerGroupSku sku() {
        return this.innerProperties() == null ? null : this.innerProperties().sku();
    }

    /**
     * Set the sku property: The SKU for a container group.
     * 
     * @param sku the sku value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withSku(ContainerGroupSku sku) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withSku(sku);
        return this;
    }

    /**
     * Get the encryptionProperties property: The encryption properties for a container group.
     * 
     * @return the encryptionProperties value.
     */
    public EncryptionProperties encryptionProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().encryptionProperties();
    }

    /**
     * Set the encryptionProperties property: The encryption properties for a container group.
     * 
     * @param encryptionProperties the encryptionProperties value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withEncryptionProperties(EncryptionProperties encryptionProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withEncryptionProperties(encryptionProperties);
        return this;
    }

    /**
     * Get the initContainers property: The init containers for a container group.
     * 
     * @return the initContainers value.
     */
    public List<InitContainerDefinition> initContainers() {
        return this.innerProperties() == null ? null : this.innerProperties().initContainers();
    }

    /**
     * Set the initContainers property: The init containers for a container group.
     * 
     * @param initContainers the initContainers value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withInitContainers(List<InitContainerDefinition> initContainers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withInitContainers(initContainers);
        return this;
    }

    /**
     * Get the extensions property: extensions used by virtual kubelet.
     * 
     * @return the extensions value.
     */
    public List<DeploymentExtensionSpec> extensions() {
        return this.innerProperties() == null ? null : this.innerProperties().extensions();
    }

    /**
     * Set the extensions property: extensions used by virtual kubelet.
     * 
     * @param extensions the extensions value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withExtensions(List<DeploymentExtensionSpec> extensions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withExtensions(extensions);
        return this;
    }

    /**
     * Get the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @return the confidentialComputeProperties value.
     */
    public ConfidentialComputeProperties confidentialComputeProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().confidentialComputeProperties();
    }

    /**
     * Set the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @param confidentialComputeProperties the confidentialComputeProperties value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties
        withConfidentialComputeProperties(ConfidentialComputeProperties confidentialComputeProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withConfidentialComputeProperties(confidentialComputeProperties);
        return this;
    }

    /**
     * Get the priority property: The priority of the container group.
     * 
     * @return the priority value.
     */
    public ContainerGroupPriority priority() {
        return this.innerProperties() == null ? null : this.innerProperties().priority();
    }

    /**
     * Set the priority property: The priority of the container group.
     * 
     * @param priority the priority value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withPriority(ContainerGroupPriority priority) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withPriority(priority);
        return this;
    }

    /**
     * Get the identityAcls property: The access control levels of the identities.
     * 
     * @return the identityAcls value.
     */
    public IdentityAcls identityAcls() {
        return this.innerProperties() == null ? null : this.innerProperties().identityAcls();
    }

    /**
     * Set the identityAcls property: The access control levels of the identities.
     * 
     * @param identityAcls the identityAcls value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withIdentityAcls(IdentityAcls identityAcls) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupPropertiesProperties();
        }
        this.innerProperties().withIdentityAcls(identityAcls);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model ContainerGroupProperties"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContainerGroupProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerGroupProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerGroupProperties.
     */
    public static ContainerGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerGroupProperties deserializedContainerGroupProperties = new ContainerGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedContainerGroupProperties.innerProperties
                        = ContainerGroupPropertiesProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedContainerGroupProperties.identity = ContainerGroupIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerGroupProperties;
        });
    }
}
