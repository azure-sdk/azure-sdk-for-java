// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerinstance.generated.fluent.NGroupsClient;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.NGroupInner;
import com.azure.resourcemanager.containerinstance.generated.models.NGroup;
import com.azure.resourcemanager.containerinstance.generated.models.NGroups;

public final class NGroupsImpl implements NGroups {
    private static final ClientLogger LOGGER = new ClientLogger(NGroupsImpl.class);

    private final NGroupsClient innerClient;

    private final com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager;

    public NGroupsImpl(NGroupsClient innerClient,
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<NGroup> getByResourceGroupWithResponse(String resourceGroupName, String ngroupsName,
        Context context) {
        Response<NGroupInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, ngroupsName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new NGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NGroup getByResourceGroup(String resourceGroupName, String ngroupsName) {
        NGroupInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, ngroupsName);
        if (inner != null) {
            return new NGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String ngroupsName) {
        this.serviceClient().delete(resourceGroupName, ngroupsName);
    }

    public void delete(String resourceGroupName, String ngroupsName, Context context) {
        this.serviceClient().delete(resourceGroupName, ngroupsName, context);
    }

    public void start(String resourceGroupName, String ngroupsName) {
        this.serviceClient().start(resourceGroupName, ngroupsName);
    }

    public void start(String resourceGroupName, String ngroupsName, Context context) {
        this.serviceClient().start(resourceGroupName, ngroupsName, context);
    }

    public Response<Void> stopWithResponse(String resourceGroupName, String ngroupsName, Context context) {
        return this.serviceClient().stopWithResponse(resourceGroupName, ngroupsName, context);
    }

    public void stop(String resourceGroupName, String ngroupsName) {
        this.serviceClient().stop(resourceGroupName, ngroupsName);
    }

    public void restart(String resourceGroupName, String ngroupsName) {
        this.serviceClient().restart(resourceGroupName, ngroupsName);
    }

    public void restart(String resourceGroupName, String ngroupsName, Context context) {
        this.serviceClient().restart(resourceGroupName, ngroupsName, context);
    }

    public PagedIterable<NGroup> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<NGroup> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<NGroupInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<NGroup> list() {
        PagedIterable<NGroupInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<NGroup> list(Context context) {
        PagedIterable<NGroupInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NGroupImpl(inner1, this.manager()));
    }

    public NGroup getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ngroupsName = ResourceManagerUtils.getValueFromIdByName(id, "ngroups");
        if (ngroupsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ngroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, ngroupsName, Context.NONE).getValue();
    }

    public Response<NGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ngroupsName = ResourceManagerUtils.getValueFromIdByName(id, "ngroups");
        if (ngroupsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ngroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, ngroupsName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ngroupsName = ResourceManagerUtils.getValueFromIdByName(id, "ngroups");
        if (ngroupsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ngroups'.", id)));
        }
        this.delete(resourceGroupName, ngroupsName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ngroupsName = ResourceManagerUtils.getValueFromIdByName(id, "ngroups");
        if (ngroupsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'ngroups'.", id)));
        }
        this.delete(resourceGroupName, ngroupsName, context);
    }

    private NGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager() {
        return this.serviceManager;
    }

    public NGroupImpl define(String name) {
        return new NGroupImpl(name, this.manager());
    }
}
