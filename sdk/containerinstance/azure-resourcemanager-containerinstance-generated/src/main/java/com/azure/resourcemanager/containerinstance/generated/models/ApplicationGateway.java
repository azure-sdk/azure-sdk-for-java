// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Application Gateway the CG profile will use to interact with CGs in a backend pool.
 */
@Fluent
public final class ApplicationGateway implements JsonSerializable<ApplicationGateway> {
    /*
     * The Application Gateway ARM resource Id.
     */
    private String resource;

    /*
     * List of Application Gateway Backend Address Pools.
     */
    private List<ApplicationGatewayBackendAddressPool> backendAddressPools;

    /**
     * Creates an instance of ApplicationGateway class.
     */
    public ApplicationGateway() {
    }

    /**
     * Get the resource property: The Application Gateway ARM resource Id.
     * 
     * @return the resource value.
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Set the resource property: The Application Gateway ARM resource Id.
     * 
     * @param resource the resource value to set.
     * @return the ApplicationGateway object itself.
     */
    public ApplicationGateway withResource(String resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the backendAddressPools property: List of Application Gateway Backend Address Pools.
     * 
     * @return the backendAddressPools value.
     */
    public List<ApplicationGatewayBackendAddressPool> backendAddressPools() {
        return this.backendAddressPools;
    }

    /**
     * Set the backendAddressPools property: List of Application Gateway Backend Address Pools.
     * 
     * @param backendAddressPools the backendAddressPools value to set.
     * @return the ApplicationGateway object itself.
     */
    public ApplicationGateway withBackendAddressPools(List<ApplicationGatewayBackendAddressPool> backendAddressPools) {
        this.backendAddressPools = backendAddressPools;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backendAddressPools() != null) {
            backendAddressPools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resource", this.resource);
        jsonWriter.writeArrayField("backendAddressPools", this.backendAddressPools,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationGateway from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationGateway if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationGateway.
     */
    public static ApplicationGateway fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationGateway deserializedApplicationGateway = new ApplicationGateway();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resource".equals(fieldName)) {
                    deserializedApplicationGateway.resource = reader.getString();
                } else if ("backendAddressPools".equals(fieldName)) {
                    List<ApplicationGatewayBackendAddressPool> backendAddressPools
                        = reader.readArray(reader1 -> ApplicationGatewayBackendAddressPool.fromJson(reader1));
                    deserializedApplicationGateway.backendAddressPools = backendAddressPools;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationGateway;
        });
    }
}
