// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupProfileStub;
import com.azure.resourcemanager.containerinstance.generated.models.ElasticProfile;
import com.azure.resourcemanager.containerinstance.generated.models.NGroupProvisioningState;
import com.azure.resourcemanager.containerinstance.generated.models.PlacementProfile;
import com.azure.resourcemanager.containerinstance.generated.models.UpdateProfile;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of the NGroups resource.
 */
@Fluent
public final class NGroupProperties implements JsonSerializable<NGroupProperties> {
    /*
     * The elastic profile.
     */
    private ElasticProfile elasticProfile;

    /*
     * Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities
     * provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g.,
     * distributing CGs across fault domains.
     */
    private PlacementProfile placementProfile;

    /*
     * The Container Group Profiles that could be used in the NGroups resource.
     */
    private List<ContainerGroupProfileStub> containerGroupProfiles;

    /*
     * The provisioning state, which only appears in the response.
     */
    private NGroupProvisioningState provisioningState;

    /*
     * Used by the customer to specify the way to update the Container Groups in NGroup.
     */
    private UpdateProfile updateProfile;

    /**
     * Creates an instance of NGroupProperties class.
     */
    public NGroupProperties() {
    }

    /**
     * Get the elasticProfile property: The elastic profile.
     * 
     * @return the elasticProfile value.
     */
    public ElasticProfile elasticProfile() {
        return this.elasticProfile;
    }

    /**
     * Set the elasticProfile property: The elastic profile.
     * 
     * @param elasticProfile the elasticProfile value to set.
     * @return the NGroupProperties object itself.
     */
    public NGroupProperties withElasticProfile(ElasticProfile elasticProfile) {
        this.elasticProfile = elasticProfile;
        return this;
    }

    /**
     * Get the placementProfile property: Provides options w.r.t allocation and management w.r.t certain placement
     * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for
     * high availability scenarios. E.g., distributing CGs across fault domains.
     * 
     * @return the placementProfile value.
     */
    public PlacementProfile placementProfile() {
        return this.placementProfile;
    }

    /**
     * Set the placementProfile property: Provides options w.r.t allocation and management w.r.t certain placement
     * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for
     * high availability scenarios. E.g., distributing CGs across fault domains.
     * 
     * @param placementProfile the placementProfile value to set.
     * @return the NGroupProperties object itself.
     */
    public NGroupProperties withPlacementProfile(PlacementProfile placementProfile) {
        this.placementProfile = placementProfile;
        return this;
    }

    /**
     * Get the containerGroupProfiles property: The Container Group Profiles that could be used in the NGroups resource.
     * 
     * @return the containerGroupProfiles value.
     */
    public List<ContainerGroupProfileStub> containerGroupProfiles() {
        return this.containerGroupProfiles;
    }

    /**
     * Set the containerGroupProfiles property: The Container Group Profiles that could be used in the NGroups resource.
     * 
     * @param containerGroupProfiles the containerGroupProfiles value to set.
     * @return the NGroupProperties object itself.
     */
    public NGroupProperties withContainerGroupProfiles(List<ContainerGroupProfileStub> containerGroupProfiles) {
        this.containerGroupProfiles = containerGroupProfiles;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public NGroupProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the updateProfile property: Used by the customer to specify the way to update the Container Groups in NGroup.
     * 
     * @return the updateProfile value.
     */
    public UpdateProfile updateProfile() {
        return this.updateProfile;
    }

    /**
     * Set the updateProfile property: Used by the customer to specify the way to update the Container Groups in NGroup.
     * 
     * @param updateProfile the updateProfile value to set.
     * @return the NGroupProperties object itself.
     */
    public NGroupProperties withUpdateProfile(UpdateProfile updateProfile) {
        this.updateProfile = updateProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (elasticProfile() != null) {
            elasticProfile().validate();
        }
        if (placementProfile() != null) {
            placementProfile().validate();
        }
        if (containerGroupProfiles() != null) {
            containerGroupProfiles().forEach(e -> e.validate());
        }
        if (updateProfile() != null) {
            updateProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("elasticProfile", this.elasticProfile);
        jsonWriter.writeJsonField("placementProfile", this.placementProfile);
        jsonWriter.writeArrayField("containerGroupProfiles", this.containerGroupProfiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("updateProfile", this.updateProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NGroupProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NGroupProperties.
     */
    public static NGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NGroupProperties deserializedNGroupProperties = new NGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("elasticProfile".equals(fieldName)) {
                    deserializedNGroupProperties.elasticProfile = ElasticProfile.fromJson(reader);
                } else if ("placementProfile".equals(fieldName)) {
                    deserializedNGroupProperties.placementProfile = PlacementProfile.fromJson(reader);
                } else if ("containerGroupProfiles".equals(fieldName)) {
                    List<ContainerGroupProfileStub> containerGroupProfiles
                        = reader.readArray(reader1 -> ContainerGroupProfileStub.fromJson(reader1));
                    deserializedNGroupProperties.containerGroupProfiles = containerGroupProfiles;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNGroupProperties.provisioningState
                        = NGroupProvisioningState.fromString(reader.getString());
                } else if ("updateProfile".equals(fieldName)) {
                    deserializedNGroupProperties.updateProfile = UpdateProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNGroupProperties;
        });
    }
}
