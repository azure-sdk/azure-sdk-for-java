// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupProfileInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of ContainerGroupProfile.
 */
public interface ContainerGroupProfile {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the zones property: The zones for the container group.
     * 
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the containers property: The containers within the container group.
     * 
     * @return the containers value.
     */
    List<Container> containers();

    /**
     * Gets the imageRegistryCredentials property: The image registry credentials by which the container group is
     * created from.
     * 
     * @return the imageRegistryCredentials value.
     */
    List<ImageRegistryCredential> imageRegistryCredentials();

    /**
     * Gets the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @return the restartPolicy value.
     */
    ContainerGroupRestartPolicy restartPolicy();

    /**
     * Gets the ipAddress property: The IP address type of the container group.
     * 
     * @return the ipAddress value.
     */
    IpAddress ipAddress();

    /**
     * Gets the osType property: The operating system type required by the containers in the container group.
     * 
     * @return the osType value.
     */
    OperatingSystemTypes osType();

    /**
     * Gets the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @return the volumes value.
     */
    List<Volume> volumes();

    /**
     * Gets the diagnostics property: The diagnostic information for a container group.
     * 
     * @return the diagnostics value.
     */
    ContainerGroupDiagnostics diagnostics();

    /**
     * Gets the sku property: The SKU for a container group.
     * 
     * @return the sku value.
     */
    ContainerGroupSku sku();

    /**
     * Gets the encryptionProperties property: The encryption properties for a container group.
     * 
     * @return the encryptionProperties value.
     */
    EncryptionProperties encryptionProperties();

    /**
     * Gets the initContainers property: The init containers for a container group.
     * 
     * @return the initContainers value.
     */
    List<InitContainerDefinition> initContainers();

    /**
     * Gets the extensions property: extensions used by virtual kubelet.
     * 
     * @return the extensions value.
     */
    List<DeploymentExtensionSpec> extensions();

    /**
     * Gets the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @return the confidentialComputeProperties value.
     */
    ConfidentialComputeProperties confidentialComputeProperties();

    /**
     * Gets the priority property: The priority of the container group.
     * 
     * @return the priority value.
     */
    ContainerGroupPriority priority();

    /**
     * Gets the revision property: The container group profile current revision number. This only appears in the
     * response.
     * 
     * @return the revision value.
     */
    Integer revision();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupProfileInner
     * object.
     * 
     * @return the inner object.
     */
    ContainerGroupProfileInner innerModel();

    /**
     * The entirety of the ContainerGroupProfile definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithLocation, DefinitionStages.WithResourceGroup,
        DefinitionStages.WithContainers, DefinitionStages.WithOsType, DefinitionStages.WithCreate {
    }

    /**
     * The ContainerGroupProfile definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the ContainerGroupProfile definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithContainers withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify containers.
         */
        interface WithContainers {
            /**
             * Specifies the containers property: The containers within the container group..
             * 
             * @param containers The containers within the container group.
             * @return the next definition stage.
             */
            WithOsType withContainers(List<Container> containers);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify osType.
         */
        interface WithOsType {
            /**
             * Specifies the osType property: The operating system type required by the containers in the container
             * group..
             * 
             * @param osType The operating system type required by the containers in the container group.
             * @return the next definition stage.
             */
            WithCreate withOsType(OperatingSystemTypes osType);
        }

        /**
         * The stage of the ContainerGroupProfile definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithZones,
            DefinitionStages.WithImageRegistryCredentials, DefinitionStages.WithRestartPolicy,
            DefinitionStages.WithIpAddress, DefinitionStages.WithVolumes, DefinitionStages.WithDiagnostics,
            DefinitionStages.WithSku, DefinitionStages.WithEncryptionProperties, DefinitionStages.WithInitContainers,
            DefinitionStages.WithExtensions, DefinitionStages.WithConfidentialComputeProperties,
            DefinitionStages.WithPriority {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            ContainerGroupProfile create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ContainerGroupProfile create(Context context);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify zones.
         */
        interface WithZones {
            /**
             * Specifies the zones property: The zones for the container group..
             * 
             * @param zones The zones for the container group.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify imageRegistryCredentials.
         */
        interface WithImageRegistryCredentials {
            /**
             * Specifies the imageRegistryCredentials property: The image registry credentials by which the container
             * group is created from..
             * 
             * @param imageRegistryCredentials The image registry credentials by which the container group is created
             * from.
             * @return the next definition stage.
             */
            WithCreate withImageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify restartPolicy.
         */
        interface WithRestartPolicy {
            /**
             * Specifies the restartPolicy property: Restart policy for all containers within the container group.
             * - `Always` Always restart
             * - `OnFailure` Restart on failure
             * - `Never` Never restart
             * .
             * 
             * @param restartPolicy Restart policy for all containers within the container group.
             * - `Always` Always restart
             * - `OnFailure` Restart on failure
             * - `Never` Never restart.
             * @return the next definition stage.
             */
            WithCreate withRestartPolicy(ContainerGroupRestartPolicy restartPolicy);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify ipAddress.
         */
        interface WithIpAddress {
            /**
             * Specifies the ipAddress property: The IP address type of the container group..
             * 
             * @param ipAddress The IP address type of the container group.
             * @return the next definition stage.
             */
            WithCreate withIpAddress(IpAddress ipAddress);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify volumes.
         */
        interface WithVolumes {
            /**
             * Specifies the volumes property: The list of volumes that can be mounted by containers in this container
             * group..
             * 
             * @param volumes The list of volumes that can be mounted by containers in this container group.
             * @return the next definition stage.
             */
            WithCreate withVolumes(List<Volume> volumes);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify diagnostics.
         */
        interface WithDiagnostics {
            /**
             * Specifies the diagnostics property: The diagnostic information for a container group..
             * 
             * @param diagnostics The diagnostic information for a container group.
             * @return the next definition stage.
             */
            WithCreate withDiagnostics(ContainerGroupDiagnostics diagnostics);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU for a container group..
             * 
             * @param sku The SKU for a container group.
             * @return the next definition stage.
             */
            WithCreate withSku(ContainerGroupSku sku);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify encryptionProperties.
         */
        interface WithEncryptionProperties {
            /**
             * Specifies the encryptionProperties property: The encryption properties for a container group..
             * 
             * @param encryptionProperties The encryption properties for a container group.
             * @return the next definition stage.
             */
            WithCreate withEncryptionProperties(EncryptionProperties encryptionProperties);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify initContainers.
         */
        interface WithInitContainers {
            /**
             * Specifies the initContainers property: The init containers for a container group..
             * 
             * @param initContainers The init containers for a container group.
             * @return the next definition stage.
             */
            WithCreate withInitContainers(List<InitContainerDefinition> initContainers);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify extensions.
         */
        interface WithExtensions {
            /**
             * Specifies the extensions property: extensions used by virtual kubelet.
             * 
             * @param extensions extensions used by virtual kubelet.
             * @return the next definition stage.
             */
            WithCreate withExtensions(List<DeploymentExtensionSpec> extensions);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify confidentialComputeProperties.
         */
        interface WithConfidentialComputeProperties {
            /**
             * Specifies the confidentialComputeProperties property: The properties for confidential container group.
             * 
             * @param confidentialComputeProperties The properties for confidential container group.
             * @return the next definition stage.
             */
            WithCreate withConfidentialComputeProperties(ConfidentialComputeProperties confidentialComputeProperties);
        }

        /**
         * The stage of the ContainerGroupProfile definition allowing to specify priority.
         */
        interface WithPriority {
            /**
             * Specifies the priority property: The priority of the container group..
             * 
             * @param priority The priority of the container group.
             * @return the next definition stage.
             */
            WithCreate withPriority(ContainerGroupPriority priority);
        }
    }

    /**
     * Begins update for the ContainerGroupProfile resource.
     * 
     * @return the stage of resource update.
     */
    ContainerGroupProfile.Update update();

    /**
     * The template for ContainerGroupProfile update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        ContainerGroupProfile apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ContainerGroupProfile apply(Context context);
    }

    /**
     * The ContainerGroupProfile update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ContainerGroupProfile update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    ContainerGroupProfile refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ContainerGroupProfile refresh(Context context);
}
