// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This profile allows the customers to customize the rolling update.
 */
@Fluent
public final class UpdateProfileRollingUpdateProfile implements JsonSerializable<UpdateProfileRollingUpdateProfile> {
    /*
     * Maximum percentage of total Container Groups which can be updated simultaneously by rolling update in one batch.
     */
    private Integer maxBatchPercent;

    /*
     * Maximum percentage of the updated Container Groups which can be in unhealthy state after each batch is updated.
     */
    private Integer maxUnhealthyPercent;

    /*
     * The wait time between batches after completing the one batch of the rolling update and starting the next batch.
     * The time duration should be specified in ISO 8601 format for duration.
     */
    private String pauseTimeBetweenBatches;

    /*
     * Default is false. If set to true, the CGs will be updated in-place instead of creating new CG and deleting old
     * ones.
     */
    private Boolean inPlaceUpdate;

    /**
     * Creates an instance of UpdateProfileRollingUpdateProfile class.
     */
    public UpdateProfileRollingUpdateProfile() {
    }

    /**
     * Get the maxBatchPercent property: Maximum percentage of total Container Groups which can be updated
     * simultaneously by rolling update in one batch.
     * 
     * @return the maxBatchPercent value.
     */
    public Integer maxBatchPercent() {
        return this.maxBatchPercent;
    }

    /**
     * Set the maxBatchPercent property: Maximum percentage of total Container Groups which can be updated
     * simultaneously by rolling update in one batch.
     * 
     * @param maxBatchPercent the maxBatchPercent value to set.
     * @return the UpdateProfileRollingUpdateProfile object itself.
     */
    public UpdateProfileRollingUpdateProfile withMaxBatchPercent(Integer maxBatchPercent) {
        this.maxBatchPercent = maxBatchPercent;
        return this;
    }

    /**
     * Get the maxUnhealthyPercent property: Maximum percentage of the updated Container Groups which can be in
     * unhealthy state after each batch is updated.
     * 
     * @return the maxUnhealthyPercent value.
     */
    public Integer maxUnhealthyPercent() {
        return this.maxUnhealthyPercent;
    }

    /**
     * Set the maxUnhealthyPercent property: Maximum percentage of the updated Container Groups which can be in
     * unhealthy state after each batch is updated.
     * 
     * @param maxUnhealthyPercent the maxUnhealthyPercent value to set.
     * @return the UpdateProfileRollingUpdateProfile object itself.
     */
    public UpdateProfileRollingUpdateProfile withMaxUnhealthyPercent(Integer maxUnhealthyPercent) {
        this.maxUnhealthyPercent = maxUnhealthyPercent;
        return this;
    }

    /**
     * Get the pauseTimeBetweenBatches property: The wait time between batches after completing the one batch of the
     * rolling update and starting the next batch. The time duration should be specified in ISO 8601 format for
     * duration.
     * 
     * @return the pauseTimeBetweenBatches value.
     */
    public String pauseTimeBetweenBatches() {
        return this.pauseTimeBetweenBatches;
    }

    /**
     * Set the pauseTimeBetweenBatches property: The wait time between batches after completing the one batch of the
     * rolling update and starting the next batch. The time duration should be specified in ISO 8601 format for
     * duration.
     * 
     * @param pauseTimeBetweenBatches the pauseTimeBetweenBatches value to set.
     * @return the UpdateProfileRollingUpdateProfile object itself.
     */
    public UpdateProfileRollingUpdateProfile withPauseTimeBetweenBatches(String pauseTimeBetweenBatches) {
        this.pauseTimeBetweenBatches = pauseTimeBetweenBatches;
        return this;
    }

    /**
     * Get the inPlaceUpdate property: Default is false. If set to true, the CGs will be updated in-place instead of
     * creating new CG and deleting old ones.
     * 
     * @return the inPlaceUpdate value.
     */
    public Boolean inPlaceUpdate() {
        return this.inPlaceUpdate;
    }

    /**
     * Set the inPlaceUpdate property: Default is false. If set to true, the CGs will be updated in-place instead of
     * creating new CG and deleting old ones.
     * 
     * @param inPlaceUpdate the inPlaceUpdate value to set.
     * @return the UpdateProfileRollingUpdateProfile object itself.
     */
    public UpdateProfileRollingUpdateProfile withInPlaceUpdate(Boolean inPlaceUpdate) {
        this.inPlaceUpdate = inPlaceUpdate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxBatchPercent", this.maxBatchPercent);
        jsonWriter.writeNumberField("maxUnhealthyPercent", this.maxUnhealthyPercent);
        jsonWriter.writeStringField("pauseTimeBetweenBatches", this.pauseTimeBetweenBatches);
        jsonWriter.writeBooleanField("inPlaceUpdate", this.inPlaceUpdate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateProfileRollingUpdateProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateProfileRollingUpdateProfile if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateProfileRollingUpdateProfile.
     */
    public static UpdateProfileRollingUpdateProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateProfileRollingUpdateProfile deserializedUpdateProfileRollingUpdateProfile
                = new UpdateProfileRollingUpdateProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxBatchPercent".equals(fieldName)) {
                    deserializedUpdateProfileRollingUpdateProfile.maxBatchPercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxUnhealthyPercent".equals(fieldName)) {
                    deserializedUpdateProfileRollingUpdateProfile.maxUnhealthyPercent
                        = reader.getNullable(JsonReader::getInt);
                } else if ("pauseTimeBetweenBatches".equals(fieldName)) {
                    deserializedUpdateProfileRollingUpdateProfile.pauseTimeBetweenBatches = reader.getString();
                } else if ("inPlaceUpdate".equals(fieldName)) {
                    deserializedUpdateProfileRollingUpdateProfile.inPlaceUpdate
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateProfileRollingUpdateProfile;
        });
    }
}
