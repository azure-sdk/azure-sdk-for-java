// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerinstance.generated.fluent.NGroupsClient;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.NGroupInner;
import com.azure.resourcemanager.containerinstance.generated.models.NGroupsListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in NGroupsClient.
 */
public final class NGroupsClientImpl implements NGroupsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NGroupsService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerInstanceManagementClientImpl client;

    /**
     * Initializes an instance of NGroupsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    NGroupsClientImpl(ContainerInstanceManagementClientImpl client) {
        this.service = RestProxy.create(NGroupsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerInstanceManagementClientNGroups to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ContainerInstanceMan")
    public interface NGroupsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NGroupInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") NGroupInner nGroup, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") NGroupInner nGroup, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/start")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> start(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/stop")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> stop(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups/{ngroupsName}/restart")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restart(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ngroupsName") String ngroupsName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/ngroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NGroupsListResult>> listByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/ngroups")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NGroupsListResult>> list(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NGroupsListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NGroupsListResult>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NGroupInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String ngroupsName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    this.client.getApiVersion(), resourceGroupName, ngroupsName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NGroupInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String ngroupsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getApiVersion(), resourceGroupName, ngroupsName, accept, context);
    }

    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NGroupInner> getByResourceGroupAsync(String resourceGroupName, String ngroupsName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, ngroupsName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NGroupInner> getByResourceGroupWithResponse(String resourceGroupName, String ngroupsName,
        Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, ngroupsName, context).block();
    }

    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NGroupInner getByResourceGroup(String resourceGroupName, String ngroupsName) {
        return getByResourceGroupWithResponse(resourceGroupName, ngroupsName, Context.NONE).getValue();
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (nGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter nGroup is required and cannot be null."));
        } else {
            nGroup.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, ngroupsName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), nGroup, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (nGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter nGroup is required and cannot be null."));
        } else {
            nGroup.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), resourceGroupName, ngroupsName,
            this.client.getApiVersion(), this.client.getSubscriptionId(), nGroup, accept, context);
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NGroupInner>, NGroupInner> beginCreateOrUpdateAsync(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, ngroupsName, nGroup);
        return this.client.<NGroupInner, NGroupInner>getLroResult(mono, this.client.getHttpPipeline(),
            NGroupInner.class, NGroupInner.class, this.client.getContext());
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NGroupInner>, NGroupInner> beginCreateOrUpdateAsync(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, ngroupsName, nGroup, context);
        return this.client.<NGroupInner, NGroupInner>getLroResult(mono, this.client.getHttpPipeline(),
            NGroupInner.class, NGroupInner.class, context);
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NGroupInner>, NGroupInner> beginCreateOrUpdate(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, ngroupsName, nGroup).getSyncPoller();
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NGroupInner>, NGroupInner> beginCreateOrUpdate(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup, Context context) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, ngroupsName, nGroup, context).getSyncPoller();
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NGroupInner> createOrUpdateAsync(String resourceGroupName, String ngroupsName, NGroupInner nGroup) {
        return beginCreateOrUpdateAsync(resourceGroupName, ngroupsName, nGroup).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NGroupInner> createOrUpdateAsync(String resourceGroupName, String ngroupsName, NGroupInner nGroup,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, ngroupsName, nGroup, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NGroupInner createOrUpdate(String resourceGroupName, String ngroupsName, NGroupInner nGroup) {
        return createOrUpdateAsync(resourceGroupName, ngroupsName, nGroup).block();
    }

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NGroupInner createOrUpdate(String resourceGroupName, String ngroupsName, NGroupInner nGroup,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, ngroupsName, nGroup, context).block();
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (nGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter nGroup is required and cannot be null."));
        } else {
            nGroup.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), resourceGroupName, ngroupsName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), nGroup, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (nGroup == null) {
            return Mono.error(new IllegalArgumentException("Parameter nGroup is required and cannot be null."));
        } else {
            nGroup.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), resourceGroupName, ngroupsName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), nGroup, accept, context);
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NGroupInner>, NGroupInner> beginUpdateAsync(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, ngroupsName, nGroup);
        return this.client.<NGroupInner, NGroupInner>getLroResult(mono, this.client.getHttpPipeline(),
            NGroupInner.class, NGroupInner.class, this.client.getContext());
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<NGroupInner>, NGroupInner> beginUpdateAsync(String resourceGroupName,
        String ngroupsName, NGroupInner nGroup, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, ngroupsName, nGroup, context);
        return this.client.<NGroupInner, NGroupInner>getLroResult(mono, this.client.getHttpPipeline(),
            NGroupInner.class, NGroupInner.class, context);
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NGroupInner>, NGroupInner> beginUpdate(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup) {
        return this.beginUpdateAsync(resourceGroupName, ngroupsName, nGroup).getSyncPoller();
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<NGroupInner>, NGroupInner> beginUpdate(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup, Context context) {
        return this.beginUpdateAsync(resourceGroupName, ngroupsName, nGroup, context).getSyncPoller();
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NGroupInner> updateAsync(String resourceGroupName, String ngroupsName, NGroupInner nGroup) {
        return beginUpdateAsync(resourceGroupName, ngroupsName, nGroup).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NGroupInner> updateAsync(String resourceGroupName, String ngroupsName, NGroupInner nGroup,
        Context context) {
        return beginUpdateAsync(resourceGroupName, ngroupsName, nGroup, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NGroupInner update(String resourceGroupName, String ngroupsName, NGroupInner nGroup) {
        return updateAsync(resourceGroupName, ngroupsName, nGroup).block();
    }

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NGroupInner update(String resourceGroupName, String ngroupsName, NGroupInner nGroup, Context context) {
        return updateAsync(resourceGroupName, ngroupsName, nGroup, context).block();
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String ngroupsName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), resourceGroupName, ngroupsName,
                this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String ngroupsName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), resourceGroupName, ngroupsName, this.client.getApiVersion(),
            this.client.getSubscriptionId(), accept, context);
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String ngroupsName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, ngroupsName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String ngroupsName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, ngroupsName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String ngroupsName) {
        return this.beginDeleteAsync(resourceGroupName, ngroupsName).getSyncPoller();
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String ngroupsName,
        Context context) {
        return this.beginDeleteAsync(resourceGroupName, ngroupsName, context).getSyncPoller();
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String ngroupsName) {
        return beginDeleteAsync(resourceGroupName, ngroupsName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String ngroupsName, Context context) {
        return beginDeleteAsync(resourceGroupName, ngroupsName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String ngroupsName) {
        deleteAsync(resourceGroupName, ngroupsName).block();
    }

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String ngroupsName, Context context) {
        deleteAsync(resourceGroupName, ngroupsName, context).block();
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(String resourceGroupName, String ngroupsName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.start(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), resourceGroupName, ngroupsName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startWithResponseAsync(String resourceGroupName, String ngroupsName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.start(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(),
            resourceGroupName, ngroupsName, accept, context);
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginStartAsync(String resourceGroupName, String ngroupsName) {
        Mono<Response<Flux<ByteBuffer>>> mono = startWithResponseAsync(resourceGroupName, ngroupsName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginStartAsync(String resourceGroupName, String ngroupsName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = startWithResponseAsync(resourceGroupName, ngroupsName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String ngroupsName) {
        return this.beginStartAsync(resourceGroupName, ngroupsName).getSyncPoller();
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String ngroupsName,
        Context context) {
        return this.beginStartAsync(resourceGroupName, ngroupsName, context).getSyncPoller();
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startAsync(String resourceGroupName, String ngroupsName) {
        return beginStartAsync(resourceGroupName, ngroupsName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> startAsync(String resourceGroupName, String ngroupsName, Context context) {
        return beginStartAsync(resourceGroupName, ngroupsName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void start(String resourceGroupName, String ngroupsName) {
        startAsync(resourceGroupName, ngroupsName).block();
    }

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void start(String resourceGroupName, String ngroupsName, Context context) {
        startAsync(resourceGroupName, ngroupsName, context).block();
    }

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> stopWithResponseAsync(String resourceGroupName, String ngroupsName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.stop(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), resourceGroupName, ngroupsName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> stopWithResponseAsync(String resourceGroupName, String ngroupsName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.stop(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(),
            resourceGroupName, ngroupsName, accept, context);
    }

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> stopAsync(String resourceGroupName, String ngroupsName) {
        return stopWithResponseAsync(resourceGroupName, ngroupsName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> stopWithResponse(String resourceGroupName, String ngroupsName, Context context) {
        return stopWithResponseAsync(resourceGroupName, ngroupsName, context).block();
    }

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stop(String resourceGroupName, String ngroupsName) {
        stopWithResponse(resourceGroupName, ngroupsName, Context.NONE);
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(String resourceGroupName, String ngroupsName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.restart(this.client.getEndpoint(), this.client.getSubscriptionId(),
                this.client.getApiVersion(), resourceGroupName, ngroupsName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(String resourceGroupName, String ngroupsName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (ngroupsName == null) {
            return Mono.error(new IllegalArgumentException("Parameter ngroupsName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.restart(this.client.getEndpoint(), this.client.getSubscriptionId(), this.client.getApiVersion(),
            resourceGroupName, ngroupsName, accept, context);
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestartAsync(String resourceGroupName, String ngroupsName) {
        Mono<Response<Flux<ByteBuffer>>> mono = restartWithResponseAsync(resourceGroupName, ngroupsName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginRestartAsync(String resourceGroupName, String ngroupsName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = restartWithResponseAsync(resourceGroupName, ngroupsName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroupName, String ngroupsName) {
        return this.beginRestartAsync(resourceGroupName, ngroupsName).getSyncPoller();
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroupName, String ngroupsName,
        Context context) {
        return this.beginRestartAsync(resourceGroupName, ngroupsName, context).getSyncPoller();
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartAsync(String resourceGroupName, String ngroupsName) {
        return beginRestartAsync(resourceGroupName, ngroupsName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartAsync(String resourceGroupName, String ngroupsName, Context context) {
        return beginRestartAsync(resourceGroupName, ngroupsName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroupName, String ngroupsName) {
        restartAsync(resourceGroupName, ngroupsName).block();
    }

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroupName, String ngroupsName, Context context) {
        restartAsync(resourceGroupName, ngroupsName, context).block();
    }

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<NGroupInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listByResourceGroupSinglePageAsync(String resourceGroupName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NGroupInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NGroupInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NGroupInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NGroupInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<NGroupInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(), accept,
                context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NGroupInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NGroupInner> listAsync(Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NGroupInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NGroupInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NGroups list response that contains the NGroups properties along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<NGroupInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NGroups list response that contains the NGroups properties along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listByResourceGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NGroups list response that contains the NGroups properties along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<NGroupInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NGroups list response that contains the NGroups properties along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NGroupInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
