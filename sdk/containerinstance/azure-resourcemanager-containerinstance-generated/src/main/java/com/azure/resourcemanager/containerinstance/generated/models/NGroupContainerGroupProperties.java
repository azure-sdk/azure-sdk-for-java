// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Container Group properties which can be set while creating or updating the NGroups.
 */
@Fluent
public final class NGroupContainerGroupProperties implements JsonSerializable<NGroupContainerGroupProperties> {
    /*
     * Contains information about Virtual Network Subnet ARM Resource
     */
    private List<ContainerGroupSubnetId> subnetIds;

    /*
     * Contains information about the volumes that can be mounted by Containers in the Container Groups.
     */
    private List<NGroupCGPropertyVolume> volumes;

    /*
     * Contains information about Container which can be set while creating or updating the NGroups.
     */
    private List<NGroupCGPropertyContainer> containers;

    /**
     * Creates an instance of NGroupContainerGroupProperties class.
     */
    public NGroupContainerGroupProperties() {
    }

    /**
     * Get the subnetIds property: Contains information about Virtual Network Subnet ARM Resource.
     * 
     * @return the subnetIds value.
     */
    public List<ContainerGroupSubnetId> subnetIds() {
        return this.subnetIds;
    }

    /**
     * Set the subnetIds property: Contains information about Virtual Network Subnet ARM Resource.
     * 
     * @param subnetIds the subnetIds value to set.
     * @return the NGroupContainerGroupProperties object itself.
     */
    public NGroupContainerGroupProperties withSubnetIds(List<ContainerGroupSubnetId> subnetIds) {
        this.subnetIds = subnetIds;
        return this;
    }

    /**
     * Get the volumes property: Contains information about the volumes that can be mounted by Containers in the
     * Container Groups.
     * 
     * @return the volumes value.
     */
    public List<NGroupCGPropertyVolume> volumes() {
        return this.volumes;
    }

    /**
     * Set the volumes property: Contains information about the volumes that can be mounted by Containers in the
     * Container Groups.
     * 
     * @param volumes the volumes value to set.
     * @return the NGroupContainerGroupProperties object itself.
     */
    public NGroupContainerGroupProperties withVolumes(List<NGroupCGPropertyVolume> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * Get the containers property: Contains information about Container which can be set while creating or updating the
     * NGroups.
     * 
     * @return the containers value.
     */
    public List<NGroupCGPropertyContainer> containers() {
        return this.containers;
    }

    /**
     * Set the containers property: Contains information about Container which can be set while creating or updating the
     * NGroups.
     * 
     * @param containers the containers value to set.
     * @return the NGroupContainerGroupProperties object itself.
     */
    public NGroupContainerGroupProperties withContainers(List<NGroupCGPropertyContainer> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetIds() != null) {
            subnetIds().forEach(e -> e.validate());
        }
        if (volumes() != null) {
            volumes().forEach(e -> e.validate());
        }
        if (containers() != null) {
            containers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("subnetIds", this.subnetIds, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("volumes", this.volumes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("containers", this.containers, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NGroupContainerGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NGroupContainerGroupProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NGroupContainerGroupProperties.
     */
    public static NGroupContainerGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NGroupContainerGroupProperties deserializedNGroupContainerGroupProperties
                = new NGroupContainerGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetIds".equals(fieldName)) {
                    List<ContainerGroupSubnetId> subnetIds
                        = reader.readArray(reader1 -> ContainerGroupSubnetId.fromJson(reader1));
                    deserializedNGroupContainerGroupProperties.subnetIds = subnetIds;
                } else if ("volumes".equals(fieldName)) {
                    List<NGroupCGPropertyVolume> volumes
                        = reader.readArray(reader1 -> NGroupCGPropertyVolume.fromJson(reader1));
                    deserializedNGroupContainerGroupProperties.volumes = volumes;
                } else if ("containers".equals(fieldName)) {
                    List<NGroupCGPropertyContainer> containers
                        = reader.readArray(reader1 -> NGroupCGPropertyContainer.fromJson(reader1));
                    deserializedNGroupContainerGroupProperties.containers = containers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNGroupContainerGroupProperties;
        });
    }
}
