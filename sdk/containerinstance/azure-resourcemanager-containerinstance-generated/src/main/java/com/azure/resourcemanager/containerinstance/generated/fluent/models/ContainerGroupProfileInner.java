// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerinstance.generated.models.ConfidentialComputeProperties;
import com.azure.resourcemanager.containerinstance.generated.models.Container;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupDiagnostics;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupPriority;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupRestartPolicy;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupSku;
import com.azure.resourcemanager.containerinstance.generated.models.DeploymentExtensionSpec;
import com.azure.resourcemanager.containerinstance.generated.models.EncryptionProperties;
import com.azure.resourcemanager.containerinstance.generated.models.ImageRegistryCredential;
import com.azure.resourcemanager.containerinstance.generated.models.InitContainerDefinition;
import com.azure.resourcemanager.containerinstance.generated.models.IpAddress;
import com.azure.resourcemanager.containerinstance.generated.models.OperatingSystemTypes;
import com.azure.resourcemanager.containerinstance.generated.models.SecurityContextDefinition;
import com.azure.resourcemanager.containerinstance.generated.models.Volume;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * container group profile object.
 */
@Fluent
public final class ContainerGroupProfileInner extends Resource {
    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The container group profile properties
     */
    private ContainerGroupProfileProperties innerProperties;

    /*
     * The zones for the container group.
     */
    private List<String> zones;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ContainerGroupProfileInner class.
     */
    public ContainerGroupProfileInner() {
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: The container group profile properties.
     * 
     * @return the innerProperties value.
     */
    private ContainerGroupProfileProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the zones property: The zones for the container group.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: The zones for the container group.
     * 
     * @param zones the zones value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContainerGroupProfileInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContainerGroupProfileInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the sku property: The SKU for a container group.
     * 
     * @return the sku value.
     */
    public ContainerGroupSku sku() {
        return this.innerProperties() == null ? null : this.innerProperties().sku();
    }

    /**
     * Set the sku property: The SKU for a container group.
     * 
     * @param sku the sku value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withSku(ContainerGroupSku sku) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withSku(sku);
        return this;
    }

    /**
     * Get the encryptionProperties property: The encryption properties for a container group.
     * 
     * @return the encryptionProperties value.
     */
    public EncryptionProperties encryptionProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().encryptionProperties();
    }

    /**
     * Set the encryptionProperties property: The encryption properties for a container group.
     * 
     * @param encryptionProperties the encryptionProperties value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withEncryptionProperties(EncryptionProperties encryptionProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withEncryptionProperties(encryptionProperties);
        return this;
    }

    /**
     * Get the containers property: The containers within the container group.
     * 
     * @return the containers value.
     */
    public List<Container> containers() {
        return this.innerProperties() == null ? null : this.innerProperties().containers();
    }

    /**
     * Set the containers property: The containers within the container group.
     * 
     * @param containers the containers value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withContainers(List<Container> containers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withContainers(containers);
        return this;
    }

    /**
     * Get the initContainers property: The init containers for a container group.
     * 
     * @return the initContainers value.
     */
    public List<InitContainerDefinition> initContainers() {
        return this.innerProperties() == null ? null : this.innerProperties().initContainers();
    }

    /**
     * Set the initContainers property: The init containers for a container group.
     * 
     * @param initContainers the initContainers value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withInitContainers(List<InitContainerDefinition> initContainers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withInitContainers(initContainers);
        return this;
    }

    /**
     * Get the extensions property: extensions used by virtual kubelet.
     * 
     * @return the extensions value.
     */
    public List<DeploymentExtensionSpec> extensions() {
        return this.innerProperties() == null ? null : this.innerProperties().extensions();
    }

    /**
     * Set the extensions property: extensions used by virtual kubelet.
     * 
     * @param extensions the extensions value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withExtensions(List<DeploymentExtensionSpec> extensions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withExtensions(extensions);
        return this;
    }

    /**
     * Get the imageRegistryCredentials property: The image registry credentials by which the container group is created
     * from.
     * 
     * @return the imageRegistryCredentials value.
     */
    public List<ImageRegistryCredential> imageRegistryCredentials() {
        return this.innerProperties() == null ? null : this.innerProperties().imageRegistryCredentials();
    }

    /**
     * Set the imageRegistryCredentials property: The image registry credentials by which the container group is created
     * from.
     * 
     * @param imageRegistryCredentials the imageRegistryCredentials value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner
        withImageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withImageRegistryCredentials(imageRegistryCredentials);
        return this;
    }

    /**
     * Get the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @return the restartPolicy value.
     */
    public ContainerGroupRestartPolicy restartPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().restartPolicy();
    }

    /**
     * Set the restartPolicy property: Restart policy for all containers within the container group.
     * - `Always` Always restart
     * - `OnFailure` Restart on failure
     * - `Never` Never restart.
     * 
     * @param restartPolicy the restartPolicy value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withRestartPolicy(ContainerGroupRestartPolicy restartPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withRestartPolicy(restartPolicy);
        return this;
    }

    /**
     * Get the shutdownGracePeriod property: Shutdown grace period for containers in a container group.
     * 
     * @return the shutdownGracePeriod value.
     */
    public OffsetDateTime shutdownGracePeriod() {
        return this.innerProperties() == null ? null : this.innerProperties().shutdownGracePeriod();
    }

    /**
     * Set the shutdownGracePeriod property: Shutdown grace period for containers in a container group.
     * 
     * @param shutdownGracePeriod the shutdownGracePeriod value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withShutdownGracePeriod(OffsetDateTime shutdownGracePeriod) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withShutdownGracePeriod(shutdownGracePeriod);
        return this;
    }

    /**
     * Get the ipAddress property: The IP address type of the container group.
     * 
     * @return the ipAddress value.
     */
    public IpAddress ipAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAddress();
    }

    /**
     * Set the ipAddress property: The IP address type of the container group.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withIpAddress(IpAddress ipAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withIpAddress(ipAddress);
        return this;
    }

    /**
     * Get the timeToLive property: Post completion time to live for containers of a CG.
     * 
     * @return the timeToLive value.
     */
    public OffsetDateTime timeToLive() {
        return this.innerProperties() == null ? null : this.innerProperties().timeToLive();
    }

    /**
     * Set the timeToLive property: Post completion time to live for containers of a CG.
     * 
     * @param timeToLive the timeToLive value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withTimeToLive(OffsetDateTime timeToLive) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withTimeToLive(timeToLive);
        return this;
    }

    /**
     * Get the osType property: The operating system type required by the containers in the container group.
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: The operating system type required by the containers in the container group.
     * 
     * @param osType the osType value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withOsType(OperatingSystemTypes osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @return the volumes value.
     */
    public List<Volume> volumes() {
        return this.innerProperties() == null ? null : this.innerProperties().volumes();
    }

    /**
     * Set the volumes property: The list of volumes that can be mounted by containers in this container group.
     * 
     * @param volumes the volumes value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withVolumes(List<Volume> volumes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withVolumes(volumes);
        return this;
    }

    /**
     * Get the diagnostics property: The diagnostic information for a container group.
     * 
     * @return the diagnostics value.
     */
    public ContainerGroupDiagnostics diagnostics() {
        return this.innerProperties() == null ? null : this.innerProperties().diagnostics();
    }

    /**
     * Set the diagnostics property: The diagnostic information for a container group.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withDiagnostics(ContainerGroupDiagnostics diagnostics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Get the priority property: The priority of the container group.
     * 
     * @return the priority value.
     */
    public ContainerGroupPriority priority() {
        return this.innerProperties() == null ? null : this.innerProperties().priority();
    }

    /**
     * Set the priority property: The priority of the container group.
     * 
     * @param priority the priority value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withPriority(ContainerGroupPriority priority) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withPriority(priority);
        return this;
    }

    /**
     * Get the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @return the confidentialComputeProperties value.
     */
    public ConfidentialComputeProperties confidentialComputeProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().confidentialComputeProperties();
    }

    /**
     * Set the confidentialComputeProperties property: The properties for confidential container group.
     * 
     * @param confidentialComputeProperties the confidentialComputeProperties value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner
        withConfidentialComputeProperties(ConfidentialComputeProperties confidentialComputeProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withConfidentialComputeProperties(confidentialComputeProperties);
        return this;
    }

    /**
     * Get the securityContext property: The container security properties.
     * 
     * @return the securityContext value.
     */
    public SecurityContextDefinition securityContext() {
        return this.innerProperties() == null ? null : this.innerProperties().securityContext();
    }

    /**
     * Set the securityContext property: The container security properties.
     * 
     * @param securityContext the securityContext value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withSecurityContext(SecurityContextDefinition securityContext) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withSecurityContext(securityContext);
        return this;
    }

    /**
     * Get the revision property: Container group profile current revision number.
     * 
     * @return the revision value.
     */
    public Long revision() {
        return this.innerProperties() == null ? null : this.innerProperties().revision();
    }

    /**
     * Set the revision property: Container group profile current revision number.
     * 
     * @param revision the revision value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withRevision(Long revision) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withRevision(revision);
        return this;
    }

    /**
     * Get the registeredRevisions property: Registered revisions are calculated at request time based off the records
     * in the table logs.
     * 
     * @return the registeredRevisions value.
     */
    public List<Long> registeredRevisions() {
        return this.innerProperties() == null ? null : this.innerProperties().registeredRevisions();
    }

    /**
     * Set the registeredRevisions property: Registered revisions are calculated at request time based off the records
     * in the table logs.
     * 
     * @param registeredRevisions the registeredRevisions value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withRegisteredRevisions(List<Long> registeredRevisions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withRegisteredRevisions(registeredRevisions);
        return this;
    }

    /**
     * Get the useKrypton property: Gets or sets Krypton use property.
     * 
     * @return the useKrypton value.
     */
    public Boolean useKrypton() {
        return this.innerProperties() == null ? null : this.innerProperties().useKrypton();
    }

    /**
     * Set the useKrypton property: Gets or sets Krypton use property.
     * 
     * @param useKrypton the useKrypton value to set.
     * @return the ContainerGroupProfileInner object itself.
     */
    public ContainerGroupProfileInner withUseKrypton(Boolean useKrypton) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ContainerGroupProfileProperties();
        }
        this.innerProperties().withUseKrypton(useKrypton);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerGroupProfileInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerGroupProfileInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerGroupProfileInner.
     */
    public static ContainerGroupProfileInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerGroupProfileInner deserializedContainerGroupProfileInner = new ContainerGroupProfileInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedContainerGroupProfileInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedContainerGroupProfileInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedContainerGroupProfileInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedContainerGroupProfileInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedContainerGroupProfileInner.withTags(tags);
                } else if ("systemData".equals(fieldName)) {
                    deserializedContainerGroupProfileInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedContainerGroupProfileInner.innerProperties
                        = ContainerGroupProfileProperties.fromJson(reader);
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedContainerGroupProfileInner.zones = zones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerGroupProfileInner;
        });
    }
}
