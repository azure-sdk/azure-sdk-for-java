// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * LoadBalancer the CG profile will use to interact with CGs in a backend pool.
 */
@Fluent
public final class LoadBalancer implements JsonSerializable<LoadBalancer> {
    /*
     * List of Load Balancer Backend Address Pools.
     */
    private List<LoadBalancerBackendAddressPool> backendAddressPools;

    /**
     * Creates an instance of LoadBalancer class.
     */
    public LoadBalancer() {
    }

    /**
     * Get the backendAddressPools property: List of Load Balancer Backend Address Pools.
     * 
     * @return the backendAddressPools value.
     */
    public List<LoadBalancerBackendAddressPool> backendAddressPools() {
        return this.backendAddressPools;
    }

    /**
     * Set the backendAddressPools property: List of Load Balancer Backend Address Pools.
     * 
     * @param backendAddressPools the backendAddressPools value to set.
     * @return the LoadBalancer object itself.
     */
    public LoadBalancer withBackendAddressPools(List<LoadBalancerBackendAddressPool> backendAddressPools) {
        this.backendAddressPools = backendAddressPools;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backendAddressPools() != null) {
            backendAddressPools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("backendAddressPools", this.backendAddressPools,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancer.
     */
    public static LoadBalancer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancer deserializedLoadBalancer = new LoadBalancer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backendAddressPools".equals(fieldName)) {
                    List<LoadBalancerBackendAddressPool> backendAddressPools
                        = reader.readArray(reader1 -> LoadBalancerBackendAddressPool.fromJson(reader1));
                    deserializedLoadBalancer.backendAddressPools = backendAddressPools;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancer;
        });
    }
}
