// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.containerinstance.generated.fluent.CGProfileOperationsClient;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupProfileInner;
import com.azure.resourcemanager.containerinstance.generated.models.CGProfileOperations;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupProfile;

public final class CGProfileOperationsImpl implements CGProfileOperations {
    private static final ClientLogger LOGGER = new ClientLogger(CGProfileOperationsImpl.class);

    private final CGProfileOperationsClient innerClient;

    private final com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager;

    public CGProfileOperationsImpl(CGProfileOperationsClient innerClient,
        com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ContainerGroupProfile> getByResourceGroupWithResponse(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        Response<ContainerGroupProfileInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, containerGroupProfileName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ContainerGroupProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerGroupProfile getByResourceGroup(String resourceGroupName, String containerGroupProfileName) {
        ContainerGroupProfileInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, containerGroupProfileName);
        if (inner != null) {
            return new ContainerGroupProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String containerGroupProfileName) {
        this.serviceClient().delete(resourceGroupName, containerGroupProfileName);
    }

    public void delete(String resourceGroupName, String containerGroupProfileName, Context context) {
        this.serviceClient().delete(resourceGroupName, containerGroupProfileName, context);
    }

    public PagedIterable<ContainerGroupProfile> listAllRevisions(String resourceGroupName,
        String containerGroupProfileName) {
        PagedIterable<ContainerGroupProfileInner> inner
            = this.serviceClient().listAllRevisions(resourceGroupName, containerGroupProfileName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ContainerGroupProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<ContainerGroupProfile> listAllRevisions(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        PagedIterable<ContainerGroupProfileInner> inner
            = this.serviceClient().listAllRevisions(resourceGroupName, containerGroupProfileName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ContainerGroupProfileImpl(inner1, this.manager()));
    }

    public Response<ContainerGroupProfile> getByRevisionNumberWithResponse(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber, Context context) {
        Response<ContainerGroupProfileInner> inner = this.serviceClient()
            .getByRevisionNumberWithResponse(resourceGroupName, containerGroupProfileName, revisionNumber, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ContainerGroupProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ContainerGroupProfile getByRevisionNumber(String resourceGroupName, String containerGroupProfileName,
        String revisionNumber) {
        ContainerGroupProfileInner inner
            = this.serviceClient().getByRevisionNumber(resourceGroupName, containerGroupProfileName, revisionNumber);
        if (inner != null) {
            return new ContainerGroupProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ContainerGroupProfile getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupProfileName = ResourceManagerUtils.getValueFromIdByName(id, "containerGroupProfiles");
        if (containerGroupProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'containerGroupProfiles'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, containerGroupProfileName, Context.NONE)
            .getValue();
    }

    public Response<ContainerGroupProfile> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupProfileName = ResourceManagerUtils.getValueFromIdByName(id, "containerGroupProfiles");
        if (containerGroupProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'containerGroupProfiles'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, containerGroupProfileName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupProfileName = ResourceManagerUtils.getValueFromIdByName(id, "containerGroupProfiles");
        if (containerGroupProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'containerGroupProfiles'.", id)));
        }
        this.delete(resourceGroupName, containerGroupProfileName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String containerGroupProfileName = ResourceManagerUtils.getValueFromIdByName(id, "containerGroupProfiles");
        if (containerGroupProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'containerGroupProfiles'.", id)));
        }
        this.delete(resourceGroupName, containerGroupProfileName, context);
    }

    private CGProfileOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.containerinstance.generated.ContainerInstanceManager manager() {
        return this.serviceManager;
    }

    public ContainerGroupProfileImpl define(String name) {
        return new ContainerGroupProfileImpl(name, this.manager());
    }
}
