// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A secret reference.
 */
@Fluent
public final class SecretReference implements JsonSerializable<SecretReference> {
    /*
     * The identifier of the secret reference
     */
    private String name;

    /*
     * The ARM resource id of the managed identity that has access to the secret in the key vault
     */
    private String identity;

    /*
     * The URI to the secret in key vault
     */
    private String secretReferenceUri;

    /**
     * Creates an instance of SecretReference class.
     */
    public SecretReference() {
    }

    /**
     * Get the name property: The identifier of the secret reference.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The identifier of the secret reference.
     * 
     * @param name the name value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the identity property: The ARM resource id of the managed identity that has access to the secret in the key
     * vault.
     * 
     * @return the identity value.
     */
    public String identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The ARM resource id of the managed identity that has access to the secret in the key
     * vault.
     * 
     * @param identity the identity value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withIdentity(String identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the secretReferenceUri property: The URI to the secret in key vault.
     * 
     * @return the secretReferenceUri value.
     */
    public String secretReferenceUri() {
        return this.secretReferenceUri;
    }

    /**
     * Set the secretReferenceUri property: The URI to the secret in key vault.
     * 
     * @param secretReferenceUri the secretReferenceUri value to set.
     * @return the SecretReference object itself.
     */
    public SecretReference withSecretReferenceUri(String secretReferenceUri) {
        this.secretReferenceUri = secretReferenceUri;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model SecretReference"));
        }
        if (identity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property identity in model SecretReference"));
        }
        if (secretReferenceUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property secretReferenceUri in model SecretReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecretReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("identity", this.identity);
        jsonWriter.writeStringField("secretReferenceUri", this.secretReferenceUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecretReference.
     */
    public static SecretReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretReference deserializedSecretReference = new SecretReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSecretReference.name = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedSecretReference.identity = reader.getString();
                } else if ("secretReferenceUri".equals(fieldName)) {
                    deserializedSecretReference.secretReferenceUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretReference;
        });
    }
}
