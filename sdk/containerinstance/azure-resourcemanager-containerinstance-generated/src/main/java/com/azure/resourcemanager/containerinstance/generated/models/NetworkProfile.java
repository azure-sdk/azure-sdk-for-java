// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A network profile for network settings of a ContainerGroupProfile. Used to manage load balancer and application
 * gateway backend pools, specifically updating the IP addresses of CGs within the backend pool.
 */
@Fluent
public final class NetworkProfile implements JsonSerializable<NetworkProfile> {
    /*
     * LoadBalancer the CG profile will use to interact with CGs in a backend pool
     */
    private LoadBalancer loadBalancer;

    /*
     * Application Gateway the CG profile will use to interact with CGs in a backend pool
     */
    private ApplicationGateway applicationGateway;

    /**
     * Creates an instance of NetworkProfile class.
     */
    public NetworkProfile() {
    }

    /**
     * Get the loadBalancer property: LoadBalancer the CG profile will use to interact with CGs in a backend pool.
     * 
     * @return the loadBalancer value.
     */
    public LoadBalancer loadBalancer() {
        return this.loadBalancer;
    }

    /**
     * Set the loadBalancer property: LoadBalancer the CG profile will use to interact with CGs in a backend pool.
     * 
     * @param loadBalancer the loadBalancer value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withLoadBalancer(LoadBalancer loadBalancer) {
        this.loadBalancer = loadBalancer;
        return this;
    }

    /**
     * Get the applicationGateway property: Application Gateway the CG profile will use to interact with CGs in a
     * backend pool.
     * 
     * @return the applicationGateway value.
     */
    public ApplicationGateway applicationGateway() {
        return this.applicationGateway;
    }

    /**
     * Set the applicationGateway property: Application Gateway the CG profile will use to interact with CGs in a
     * backend pool.
     * 
     * @param applicationGateway the applicationGateway value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withApplicationGateway(ApplicationGateway applicationGateway) {
        this.applicationGateway = applicationGateway;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loadBalancer() != null) {
            loadBalancer().validate();
        }
        if (applicationGateway() != null) {
            applicationGateway().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("loadBalancer", this.loadBalancer);
        jsonWriter.writeJsonField("applicationGateway", this.applicationGateway);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkProfile.
     */
    public static NetworkProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkProfile deserializedNetworkProfile = new NetworkProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("loadBalancer".equals(fieldName)) {
                    deserializedNetworkProfile.loadBalancer = LoadBalancer.fromJson(reader);
                } else if ("applicationGateway".equals(fieldName)) {
                    deserializedNetworkProfile.applicationGateway = ApplicationGateway.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkProfile;
        });
    }
}
