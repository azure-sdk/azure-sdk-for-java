// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupProfileStub;
import com.azure.resourcemanager.containerinstance.generated.models.ElasticProfile;
import com.azure.resourcemanager.containerinstance.generated.models.NGroupIdentity;
import com.azure.resourcemanager.containerinstance.generated.models.NGroupProvisioningState;
import com.azure.resourcemanager.containerinstance.generated.models.PlacementProfile;
import com.azure.resourcemanager.containerinstance.generated.models.UpdateProfile;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Describes the NGroups resource.
 */
@Fluent
public final class NGroupInner extends Resource {
    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * Describes the properties of the NGroups resource.
     */
    private NGroupProperties innerProperties;

    /*
     * The identity of the NGroup, if configured.
     */
    private NGroupIdentity identity;

    /*
     * The NGroups zones. NOTE: Availability zones can only be set when you create the scale set
     */
    private List<String> zones;

    /*
     * The geo-location where the resource lives
     */
    private String location;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of NGroupInner class.
     */
    public NGroupInner() {
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Describes the properties of the NGroups resource.
     * 
     * @return the innerProperties value.
     */
    private NGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: The identity of the NGroup, if configured.
     * 
     * @return the identity value.
     */
    public NGroupIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the NGroup, if configured.
     * 
     * @param identity the identity value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withIdentity(NGroupIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the zones property: The NGroups zones. NOTE: Availability zones can only be set when you create the scale
     * set.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: The NGroups zones. NOTE: Availability zones can only be set when you create the scale
     * set.
     * 
     * @param zones the zones value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The geo-location where the resource lives.
     * 
     * @param location the location value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NGroupInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the elasticProfile property: The elastic profile.
     * 
     * @return the elasticProfile value.
     */
    public ElasticProfile elasticProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().elasticProfile();
    }

    /**
     * Set the elasticProfile property: The elastic profile.
     * 
     * @param elasticProfile the elasticProfile value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withElasticProfile(ElasticProfile elasticProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NGroupProperties();
        }
        this.innerProperties().withElasticProfile(elasticProfile);
        return this;
    }

    /**
     * Get the placementProfile property: Provides options w.r.t allocation and management w.r.t certain placement
     * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for
     * high availability scenarios. E.g., distributing CGs across fault domains.
     * 
     * @return the placementProfile value.
     */
    public PlacementProfile placementProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().placementProfile();
    }

    /**
     * Set the placementProfile property: Provides options w.r.t allocation and management w.r.t certain placement
     * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for
     * high availability scenarios. E.g., distributing CGs across fault domains.
     * 
     * @param placementProfile the placementProfile value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withPlacementProfile(PlacementProfile placementProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NGroupProperties();
        }
        this.innerProperties().withPlacementProfile(placementProfile);
        return this;
    }

    /**
     * Get the containerGroupProfiles property: The Container Group Profiles that could be used in the NGroups resource.
     * 
     * @return the containerGroupProfiles value.
     */
    public List<ContainerGroupProfileStub> containerGroupProfiles() {
        return this.innerProperties() == null ? null : this.innerProperties().containerGroupProfiles();
    }

    /**
     * Set the containerGroupProfiles property: The Container Group Profiles that could be used in the NGroups resource.
     * 
     * @param containerGroupProfiles the containerGroupProfiles value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withContainerGroupProfiles(List<ContainerGroupProfileStub> containerGroupProfiles) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NGroupProperties();
        }
        this.innerProperties().withContainerGroupProfiles(containerGroupProfiles);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public NGroupProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the updateProfile property: Used by the customer to specify the way to update the Container Groups in NGroup.
     * 
     * @return the updateProfile value.
     */
    public UpdateProfile updateProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().updateProfile();
    }

    /**
     * Set the updateProfile property: Used by the customer to specify the way to update the Container Groups in NGroup.
     * 
     * @param updateProfile the updateProfile value to set.
     * @return the NGroupInner object itself.
     */
    public NGroupInner withUpdateProfile(UpdateProfile updateProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new NGroupProperties();
        }
        this.innerProperties().withUpdateProfile(updateProfile);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NGroupInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NGroupInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NGroupInner.
     */
    public static NGroupInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NGroupInner deserializedNGroupInner = new NGroupInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedNGroupInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedNGroupInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNGroupInner.type = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedNGroupInner.withTags(tags);
                } else if ("systemData".equals(fieldName)) {
                    deserializedNGroupInner.systemData = SystemData.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedNGroupInner.innerProperties = NGroupProperties.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedNGroupInner.identity = NGroupIdentity.fromJson(reader);
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedNGroupInner.zones = zones;
                } else if ("location".equals(fieldName)) {
                    deserializedNGroupInner.location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNGroupInner;
        });
    }
}
