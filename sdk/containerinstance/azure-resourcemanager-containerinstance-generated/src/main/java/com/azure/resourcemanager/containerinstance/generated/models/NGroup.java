// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.NGroupInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of NGroup.
 */
public interface NGroup {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the identity property: The identity of the NGroup, if configured.
     * 
     * @return the identity value.
     */
    NGroupIdentity identity();

    /**
     * Gets the zones property: The NGroups zones. NOTE: Availability zones can only be set when you create the scale
     * set.
     * 
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the elasticProfile property: The elastic profile.
     * 
     * @return the elasticProfile value.
     */
    ElasticProfile elasticProfile();

    /**
     * Gets the placementProfile property: Provides options w.r.t allocation and management w.r.t certain placement
     * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically used for
     * high availability scenarios. E.g., distributing CGs across fault domains.
     * 
     * @return the placementProfile value.
     */
    PlacementProfile placementProfile();

    /**
     * Gets the containerGroupProfiles property: The Container Group Profiles that could be used in the NGroups
     * resource.
     * 
     * @return the containerGroupProfiles value.
     */
    List<ContainerGroupProfileStub> containerGroupProfiles();

    /**
     * Gets the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    NGroupProvisioningState provisioningState();

    /**
     * Gets the updateProfile property: Used by the customer to specify the way to update the Container Groups in
     * NGroup.
     * 
     * @return the updateProfile value.
     */
    UpdateProfile updateProfile();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.containerinstance.generated.fluent.models.NGroupInner object.
     * 
     * @return the inner object.
     */
    NGroupInner innerModel();

    /**
     * The entirety of the NGroup definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The NGroup definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the NGroup definition.
         */
        interface Blank extends WithResourceGroup {
        }

        /**
         * The stage of the NGroup definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the NGroup definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation, DefinitionStages.WithTags, DefinitionStages.WithIdentity,
            DefinitionStages.WithZones, DefinitionStages.WithElasticProfile, DefinitionStages.WithPlacementProfile,
            DefinitionStages.WithContainerGroupProfiles, DefinitionStages.WithUpdateProfile {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            NGroup create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NGroup create(Context context);
        }

        /**
         * The stage of the NGroup definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }

        /**
         * The stage of the NGroup definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the NGroup definition allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the NGroup, if configured..
             * 
             * @param identity The identity of the NGroup, if configured.
             * @return the next definition stage.
             */
            WithCreate withIdentity(NGroupIdentity identity);
        }

        /**
         * The stage of the NGroup definition allowing to specify zones.
         */
        interface WithZones {
            /**
             * Specifies the zones property: The NGroups zones. NOTE: Availability zones can only be set when you create
             * the scale set.
             * 
             * @param zones The NGroups zones. NOTE: Availability zones can only be set when you create the scale set.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }

        /**
         * The stage of the NGroup definition allowing to specify elasticProfile.
         */
        interface WithElasticProfile {
            /**
             * Specifies the elasticProfile property: The elastic profile..
             * 
             * @param elasticProfile The elastic profile.
             * @return the next definition stage.
             */
            WithCreate withElasticProfile(ElasticProfile elasticProfile);
        }

        /**
         * The stage of the NGroup definition allowing to specify placementProfile.
         */
        interface WithPlacementProfile {
            /**
             * Specifies the placementProfile property: Provides options w.r.t allocation and management w.r.t certain
             * placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are
             * typically used for high availability scenarios. E.g., distributing CGs across fault domains..
             * 
             * @param placementProfile Provides options w.r.t allocation and management w.r.t certain placement
             * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically
             * used for high availability scenarios. E.g., distributing CGs across fault domains.
             * @return the next definition stage.
             */
            WithCreate withPlacementProfile(PlacementProfile placementProfile);
        }

        /**
         * The stage of the NGroup definition allowing to specify containerGroupProfiles.
         */
        interface WithContainerGroupProfiles {
            /**
             * Specifies the containerGroupProfiles property: The Container Group Profiles that could be used in the
             * NGroups resource..
             * 
             * @param containerGroupProfiles The Container Group Profiles that could be used in the NGroups resource.
             * @return the next definition stage.
             */
            WithCreate withContainerGroupProfiles(List<ContainerGroupProfileStub> containerGroupProfiles);
        }

        /**
         * The stage of the NGroup definition allowing to specify updateProfile.
         */
        interface WithUpdateProfile {
            /**
             * Specifies the updateProfile property: Used by the customer to specify the way to update the Container
             * Groups in NGroup..
             * 
             * @param updateProfile Used by the customer to specify the way to update the Container Groups in NGroup.
             * @return the next definition stage.
             */
            WithCreate withUpdateProfile(UpdateProfile updateProfile);
        }
    }

    /**
     * Begins update for the NGroup resource.
     * 
     * @return the stage of resource update.
     */
    NGroup.Update update();

    /**
     * The template for NGroup update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithIdentity, UpdateStages.WithZones,
        UpdateStages.WithElasticProfile, UpdateStages.WithPlacementProfile, UpdateStages.WithContainerGroupProfiles,
        UpdateStages.WithUpdateProfile {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        NGroup apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NGroup apply(Context context);
    }

    /**
     * The NGroup update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the NGroup update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the NGroup update allowing to specify identity.
         */
        interface WithIdentity {
            /**
             * Specifies the identity property: The identity of the NGroup, if configured..
             * 
             * @param identity The identity of the NGroup, if configured.
             * @return the next definition stage.
             */
            Update withIdentity(NGroupIdentity identity);
        }

        /**
         * The stage of the NGroup update allowing to specify zones.
         */
        interface WithZones {
            /**
             * Specifies the zones property: The NGroups zones. NOTE: Availability zones can only be set when you create
             * the scale set.
             * 
             * @param zones The NGroups zones. NOTE: Availability zones can only be set when you create the scale set.
             * @return the next definition stage.
             */
            Update withZones(List<String> zones);
        }

        /**
         * The stage of the NGroup update allowing to specify elasticProfile.
         */
        interface WithElasticProfile {
            /**
             * Specifies the elasticProfile property: The elastic profile..
             * 
             * @param elasticProfile The elastic profile.
             * @return the next definition stage.
             */
            Update withElasticProfile(ElasticProfile elasticProfile);
        }

        /**
         * The stage of the NGroup update allowing to specify placementProfile.
         */
        interface WithPlacementProfile {
            /**
             * Specifies the placementProfile property: Provides options w.r.t allocation and management w.r.t certain
             * placement policies. These utilize capabilities provided by the underlying Azure infrastructure. They are
             * typically used for high availability scenarios. E.g., distributing CGs across fault domains..
             * 
             * @param placementProfile Provides options w.r.t allocation and management w.r.t certain placement
             * policies. These utilize capabilities provided by the underlying Azure infrastructure. They are typically
             * used for high availability scenarios. E.g., distributing CGs across fault domains.
             * @return the next definition stage.
             */
            Update withPlacementProfile(PlacementProfile placementProfile);
        }

        /**
         * The stage of the NGroup update allowing to specify containerGroupProfiles.
         */
        interface WithContainerGroupProfiles {
            /**
             * Specifies the containerGroupProfiles property: The Container Group Profiles that could be used in the
             * NGroups resource..
             * 
             * @param containerGroupProfiles The Container Group Profiles that could be used in the NGroups resource.
             * @return the next definition stage.
             */
            Update withContainerGroupProfiles(List<ContainerGroupProfileStub> containerGroupProfiles);
        }

        /**
         * The stage of the NGroup update allowing to specify updateProfile.
         */
        interface WithUpdateProfile {
            /**
             * Specifies the updateProfile property: Used by the customer to specify the way to update the Container
             * Groups in NGroup..
             * 
             * @param updateProfile Used by the customer to specify the way to update the Container Groups in NGroup.
             * @return the next definition stage.
             */
            Update withUpdateProfile(UpdateProfile updateProfile);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    NGroup refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NGroup refresh(Context context);

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> stopWithResponse(Context context);

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart();

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(Context context);
}
