// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.NGroupInner;

/**
 * An instance of this class provides access to all the operations defined in NGroupsClient.
 */
public interface NGroupsClient {
    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NGroupInner> getByResourceGroupWithResponse(String resourceGroupName, String ngroupsName, Context context);

    /**
     * NGroups GET REST API
     * 
     * Get the properties of the specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NGroupInner getByResourceGroup(String resourceGroupName, String ngroupsName);

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NGroupInner>, NGroupInner> beginCreateOrUpdate(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup);

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NGroupInner>, NGroupInner> beginCreateOrUpdate(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup, Context context);

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NGroupInner createOrUpdate(String resourceGroupName, String ngroupsName, NGroupInner nGroup);

    /**
     * NGroup PUT REST API
     * 
     * Create or update a NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NGroupInner createOrUpdate(String resourceGroupName, String ngroupsName, NGroupInner nGroup, Context context);

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NGroupInner>, NGroupInner> beginUpdate(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup);

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NGroupInner>, NGroupInner> beginUpdate(String resourceGroupName, String ngroupsName,
        NGroupInner nGroup, Context context);

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NGroupInner update(String resourceGroupName, String ngroupsName, NGroupInner nGroup);

    /**
     * NGroups PATCH REST API
     * 
     * Update a specified NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param nGroup The NGroup object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes the NGroups resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NGroupInner update(String resourceGroupName, String ngroupsName, NGroupInner nGroup, Context context);

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String ngroupsName);

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String ngroupsName, Context context);

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String ngroupsName);

    /**
     * NGroups Delete REST API
     * 
     * Deletes the NGroups resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String ngroupsName, Context context);

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String ngroupsName);

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String ngroupsName, Context context);

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String ngroupsName);

    /**
     * Starts all container groups in the specified NGroups resource.
     * 
     * Starts all container groups in the specified NGroups resource. Compute resources will be allocated and billing
     * will start.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String ngroupsName, Context context);

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> stopWithResponse(String resourceGroupName, String ngroupsName, Context context);

    /**
     * Stops all container groups in the specified NGroups resource.
     * 
     * Stops all container groups in the specified NGroups resource. Compute resources will be deallocated and billing
     * will stop.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stop(String resourceGroupName, String ngroupsName);

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroupName, String ngroupsName);

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroupName, String ngroupsName, Context context);

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroupName, String ngroupsName);

    /**
     * Restarts all container groups in the specified NGroups resource.
     * 
     * Restarts all container groups in the specified NGroups resource in place. If container image has updates, new
     * image will be downloaded.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ngroupsName The NGroups name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroupName, String ngroupsName, Context context);

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NGroupInner> listByResourceGroup(String resourceGroupName);

    /**
     * GET NGroups under a resource group REST API.
     * 
     * Gets a list of all NGroups resources under a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NGroupInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NGroupInner> list();

    /**
     * List NGroups in a subscription.
     * 
     * Gets a list of all NGroups resources under a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all NGroups resources under a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NGroupInner> list(Context context);
}
