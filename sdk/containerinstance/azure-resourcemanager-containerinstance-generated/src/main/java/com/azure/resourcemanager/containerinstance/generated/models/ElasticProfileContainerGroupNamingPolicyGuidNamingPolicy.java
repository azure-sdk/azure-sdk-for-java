// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy model.
 */
@Fluent
public final class ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy
    implements JsonSerializable<ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy> {
    /*
     * The prefix can be used when there are tooling limitations (e.g. on the Azure portal where CGs from multiple
     * NGroups exist in the same RG). The prefix with the suffixed resource name must still follow Azure resource naming
     * guidelines.
     */
    private String prefix;

    /**
     * Creates an instance of ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy class.
     */
    public ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy() {
    }

    /**
     * Get the prefix property: The prefix can be used when there are tooling limitations (e.g. on the Azure portal
     * where CGs from multiple NGroups exist in the same RG). The prefix with the suffixed resource name must still
     * follow Azure resource naming guidelines.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: The prefix can be used when there are tooling limitations (e.g. on the Azure portal
     * where CGs from multiple NGroups exist in the same RG). The prefix with the suffixed resource name must still
     * follow Azure resource naming guidelines.
     * 
     * @param prefix the prefix value to set.
     * @return the ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy object itself.
     */
    public ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy.
     */
    public static ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy deserializedElasticProfileContainerGroupNamingPolicyGuidNamingPolicy
                = new ElasticProfileContainerGroupNamingPolicyGuidNamingPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedElasticProfileContainerGroupNamingPolicyGuidNamingPolicy.prefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticProfileContainerGroupNamingPolicyGuidNamingPolicy;
        });
    }
}
