// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provides options w.r.t allocation and management w.r.t certain placement policies. These utilize capabilities
 * provided by the underlying Azure infrastructure. They are typically used for high availability scenarios. E.g.,
 * distributing CGs across fault domains.
 */
@Fluent
public final class PlacementProfile implements JsonSerializable<PlacementProfile> {
    /*
     * The number of fault domains to be used to spread CGs in the NGroups resource. This can only be specified during
     * NGroup creation and is immutable after that.
     */
    private Integer faultDomainCount;

    /**
     * Creates an instance of PlacementProfile class.
     */
    public PlacementProfile() {
    }

    /**
     * Get the faultDomainCount property: The number of fault domains to be used to spread CGs in the NGroups resource.
     * This can only be specified during NGroup creation and is immutable after that.
     * 
     * @return the faultDomainCount value.
     */
    public Integer faultDomainCount() {
        return this.faultDomainCount;
    }

    /**
     * Set the faultDomainCount property: The number of fault domains to be used to spread CGs in the NGroups resource.
     * This can only be specified during NGroup creation and is immutable after that.
     * 
     * @param faultDomainCount the faultDomainCount value to set.
     * @return the PlacementProfile object itself.
     */
    public PlacementProfile withFaultDomainCount(Integer faultDomainCount) {
        this.faultDomainCount = faultDomainCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("faultDomainCount", this.faultDomainCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementProfile.
     */
    public static PlacementProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementProfile deserializedPlacementProfile = new PlacementProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("faultDomainCount".equals(fieldName)) {
                    deserializedPlacementProfile.faultDomainCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementProfile;
        });
    }
}
