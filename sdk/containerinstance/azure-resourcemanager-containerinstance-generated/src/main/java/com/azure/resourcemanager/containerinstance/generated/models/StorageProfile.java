// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Storage profile for storage related settings of a container group profile.
 */
@Fluent
public final class StorageProfile implements JsonSerializable<StorageProfile> {
    /*
     * The fileShares property.
     */
    private List<FileShare> fileShares;

    /**
     * Creates an instance of StorageProfile class.
     */
    public StorageProfile() {
    }

    /**
     * Get the fileShares property: The fileShares property.
     * 
     * @return the fileShares value.
     */
    public List<FileShare> fileShares() {
        return this.fileShares;
    }

    /**
     * Set the fileShares property: The fileShares property.
     * 
     * @param fileShares the fileShares value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withFileShares(List<FileShare> fileShares) {
        this.fileShares = fileShares;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fileShares() != null) {
            fileShares().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("fileShares", this.fileShares, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageProfile.
     */
    public static StorageProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageProfile deserializedStorageProfile = new StorageProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileShares".equals(fieldName)) {
                    List<FileShare> fileShares = reader.readArray(reader1 -> FileShare.fromJson(reader1));
                    deserializedStorageProfile.fileShares = fileShares;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageProfile;
        });
    }
}
