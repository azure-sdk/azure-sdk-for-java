// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.containerinstance.generated.fluent.CGProfileOperationsClient;
import com.azure.resourcemanager.containerinstance.generated.fluent.models.ContainerGroupProfileInner;
import com.azure.resourcemanager.containerinstance.generated.models.CGProfileOperationsCreateOrUpdateResponse;
import com.azure.resourcemanager.containerinstance.generated.models.CGProfileOperationsUpdateResponse;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupProfileListResult;
import com.azure.resourcemanager.containerinstance.generated.models.ContainerGroupProfilePatch;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in CGProfileOperationsClient.
 */
public final class CGProfileOperationsClientImpl implements CGProfileOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final CGProfileOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final ContainerInstanceManagementClientImpl client;

    /**
     * Initializes an instance of CGProfileOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    CGProfileOperationsClientImpl(ContainerInstanceManagementClientImpl client) {
        this.service = RestProxy.create(CGProfileOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ContainerInstanceManagementClientCGProfileOperations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ContainerInstanceMan")
    public interface CGProfileOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<CGProfileOperationsCreateOrUpdateResponse> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ContainerGroupProfileInner containerGroupProfile,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<CGProfileOperationsUpdateResponse> update(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ContainerGroupProfilePatch properties, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileInner>> getByResourceGroup(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}/revisions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileListResult>> listAllRevisions(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroupProfiles/{containerGroupProfileName}/revisions/{revisionNumber}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileInner>> getByRevisionNumber(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("containerGroupProfileName") String containerGroupProfileName,
            @QueryParam("api-version") String apiVersion, @PathParam("revisionNumber") String revisionNumber,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ContainerGroupProfileListResult>> listAllRevisionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Create or Update a ContainerGroupProfile
     * 
     * Create a CGProfile if it doesn't exist or update an existing CGProfile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param containerGroupProfile The ContainerGroupProfile object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CGProfileOperationsCreateOrUpdateResponse> createOrUpdateWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfileInner containerGroupProfile) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (containerGroupProfile == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter containerGroupProfile is required and cannot be null."));
        } else {
            containerGroupProfile.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, containerGroupProfileName, this.client.getApiVersion(), containerGroupProfile,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or Update a ContainerGroupProfile
     * 
     * Create a CGProfile if it doesn't exist or update an existing CGProfile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param containerGroupProfile The ContainerGroupProfile object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CGProfileOperationsCreateOrUpdateResponse> createOrUpdateWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfileInner containerGroupProfile, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (containerGroupProfile == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter containerGroupProfile is required and cannot be null."));
        } else {
            containerGroupProfile.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            containerGroupProfileName, this.client.getApiVersion(), containerGroupProfile, accept, context);
    }

    /**
     * Create or Update a ContainerGroupProfile
     * 
     * Create a CGProfile if it doesn't exist or update an existing CGProfile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param containerGroupProfile The ContainerGroupProfile object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ContainerGroupProfileInner> createOrUpdateAsync(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfileInner containerGroupProfile) {
        return createOrUpdateWithResponseAsync(resourceGroupName, containerGroupProfileName, containerGroupProfile)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create or Update a ContainerGroupProfile
     * 
     * Create a CGProfile if it doesn't exist or update an existing CGProfile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param containerGroupProfile The ContainerGroupProfile object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CGProfileOperationsCreateOrUpdateResponse createOrUpdateWithResponse(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfileInner containerGroupProfile, Context context) {
        return createOrUpdateWithResponseAsync(resourceGroupName, containerGroupProfileName, containerGroupProfile,
            context).block();
    }

    /**
     * Create or Update a ContainerGroupProfile
     * 
     * Create a CGProfile if it doesn't exist or update an existing CGProfile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param containerGroupProfile The ContainerGroupProfile object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContainerGroupProfileInner createOrUpdate(String resourceGroupName, String containerGroupProfileName,
        ContainerGroupProfileInner containerGroupProfile) {
        return createOrUpdateWithResponse(resourceGroupName, containerGroupProfileName, containerGroupProfile,
            Context.NONE).getValue();
    }

    /**
     * Container group profile PATCH REST API.
     * 
     * Update a specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param properties The container group profile properties that need to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CGProfileOperationsUpdateResponse> updateWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfilePatch properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, containerGroupProfileName, this.client.getApiVersion(), properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Container group profile PATCH REST API.
     * 
     * Update a specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param properties The container group profile properties that need to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CGProfileOperationsUpdateResponse> updateWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfilePatch properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            containerGroupProfileName, this.client.getApiVersion(), properties, accept, context);
    }

    /**
     * Container group profile PATCH REST API.
     * 
     * Update a specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param properties The container group profile properties that need to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ContainerGroupProfileInner> updateAsync(String resourceGroupName, String containerGroupProfileName,
        ContainerGroupProfilePatch properties) {
        return updateWithResponseAsync(resourceGroupName, containerGroupProfileName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Container group profile PATCH REST API.
     * 
     * Update a specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param properties The container group profile properties that need to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CGProfileOperationsUpdateResponse updateWithResponse(String resourceGroupName,
        String containerGroupProfileName, ContainerGroupProfilePatch properties, Context context) {
        return updateWithResponseAsync(resourceGroupName, containerGroupProfileName, properties, context).block();
    }

    /**
     * Container group profile PATCH REST API.
     * 
     * Update a specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param properties The container group profile properties that need to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return container group profile object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContainerGroupProfileInner update(String resourceGroupName, String containerGroupProfileName,
        ContainerGroupProfilePatch properties) {
        return updateWithResponse(resourceGroupName, containerGroupProfileName, properties, Context.NONE).getValue();
    }

    /**
     * Display information about a specified ContainerGroupProfile.
     * 
     * Get the properties of the specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified container group profile along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerGroupProfileInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    this.client.getApiVersion(), resourceGroupName, containerGroupProfileName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Display information about a specified ContainerGroupProfile.
     * 
     * Get the properties of the specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified container group profile along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerGroupProfileInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByResourceGroup(this.client.getEndpoint(), this.client.getSubscriptionId(),
            this.client.getApiVersion(), resourceGroupName, containerGroupProfileName, accept, context);
    }

    /**
     * Display information about a specified ContainerGroupProfile.
     * 
     * Get the properties of the specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified container group profile on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ContainerGroupProfileInner> getByResourceGroupAsync(String resourceGroupName,
        String containerGroupProfileName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, containerGroupProfileName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Display information about a specified ContainerGroupProfile.
     * 
     * Get the properties of the specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified container group profile along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ContainerGroupProfileInner> getByResourceGroupWithResponse(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, containerGroupProfileName, context).block();
    }

    /**
     * Display information about a specified ContainerGroupProfile.
     * 
     * Get the properties of the specified container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified container group profile.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContainerGroupProfileInner getByResourceGroup(String resourceGroupName, String containerGroupProfileName) {
        return getByResourceGroupWithResponse(resourceGroupName, containerGroupProfileName, Context.NONE).getValue();
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, containerGroupProfileName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            containerGroupProfileName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String containerGroupProfileName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, containerGroupProfileName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, containerGroupProfileName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String containerGroupProfileName) {
        return this.beginDeleteAsync(resourceGroupName, containerGroupProfileName).getSyncPoller();
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String containerGroupProfileName,
        Context context) {
        return this.beginDeleteAsync(resourceGroupName, containerGroupProfileName, context).getSyncPoller();
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String containerGroupProfileName) {
        return beginDeleteAsync(resourceGroupName, containerGroupProfileName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String containerGroupProfileName, Context context) {
        return beginDeleteAsync(resourceGroupName, containerGroupProfileName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String containerGroupProfileName) {
        deleteAsync(resourceGroupName, containerGroupProfileName).block();
    }

    /**
     * Container group profile DELETE REST API.
     * 
     * Deletes a container group profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String containerGroupProfileName, Context context) {
        deleteAsync(resourceGroupName, containerGroupProfileName, context).block();
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsSinglePageAsync(String resourceGroupName,
        String containerGroupProfileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllRevisions(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, containerGroupProfileName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<ContainerGroupProfileInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsSinglePageAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listAllRevisions(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
                containerGroupProfileName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ContainerGroupProfileInner> listAllRevisionsAsync(String resourceGroupName,
        String containerGroupProfileName) {
        return new PagedFlux<>(() -> listAllRevisionsSinglePageAsync(resourceGroupName, containerGroupProfileName),
            nextLink -> listAllRevisionsNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ContainerGroupProfileInner> listAllRevisionsAsync(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        return new PagedFlux<>(
            () -> listAllRevisionsSinglePageAsync(resourceGroupName, containerGroupProfileName, context),
            nextLink -> listAllRevisionsNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ContainerGroupProfileInner> listAllRevisions(String resourceGroupName,
        String containerGroupProfileName) {
        return new PagedIterable<>(listAllRevisionsAsync(resourceGroupName, containerGroupProfileName));
    }

    /**
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group.
     * 
     * Get a list of all the revisions of the specified container group profile in the given subscription and resource
     * group. This operation returns properties of each revision of the specified container group profile including
     * containers, image registry credentials, restart policy, IP address type, OS type volumes, revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all the revisions of the specified container group profile in the given subscription and
     * resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ContainerGroupProfileInner> listAllRevisions(String resourceGroupName,
        String containerGroupProfileName, Context context) {
        return new PagedIterable<>(listAllRevisionsAsync(resourceGroupName, containerGroupProfileName, context));
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param revisionNumber The revision number of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerGroupProfileInner>> getByRevisionNumberWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (revisionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter revisionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByRevisionNumber(this.client.getEndpoint(),
                this.client.getSubscriptionId(), resourceGroupName, containerGroupProfileName,
                this.client.getApiVersion(), revisionNumber, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param revisionNumber The revision number of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerGroupProfileInner>> getByRevisionNumberWithResponseAsync(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (containerGroupProfileName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter containerGroupProfileName is required and cannot be null."));
        }
        if (revisionNumber == null) {
            return Mono.error(new IllegalArgumentException("Parameter revisionNumber is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getByRevisionNumber(this.client.getEndpoint(), this.client.getSubscriptionId(),
            resourceGroupName, containerGroupProfileName, this.client.getApiVersion(), revisionNumber, accept, context);
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param revisionNumber The revision number of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ContainerGroupProfileInner> getByRevisionNumberAsync(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber) {
        return getByRevisionNumberWithResponseAsync(resourceGroupName, containerGroupProfileName, revisionNumber)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param revisionNumber The revision number of the container group profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ContainerGroupProfileInner> getByRevisionNumberWithResponse(String resourceGroupName,
        String containerGroupProfileName, String revisionNumber, Context context) {
        return getByRevisionNumberWithResponseAsync(resourceGroupName, containerGroupProfileName, revisionNumber,
            context).block();
    }

    /**
     * Get the properties of the specified revision of the container group profile.
     * 
     * Gets the properties of the specified revision of the container group profile in the given subscription and
     * resource group. The operation returns the properties of container group profile including containers, image
     * registry credentials, restart policy, IP address type, OS type, volumes, current revision number, etc.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerGroupProfileName ContainerGroupProfile name.
     * @param revisionNumber The revision number of the container group profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the properties of the specified revision of the container group profile in the given subscription and
     * resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContainerGroupProfileInner getByRevisionNumber(String resourceGroupName, String containerGroupProfileName,
        String revisionNumber) {
        return getByRevisionNumberWithResponse(resourceGroupName, containerGroupProfileName, revisionNumber,
            Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container group profile list response along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listAllRevisionsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ContainerGroupProfileInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container group profile list response along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ContainerGroupProfileInner>> listAllRevisionsNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listAllRevisionsNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
