// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerinstance.generated.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the elastic profile of the NGroup.
 */
@Fluent
public final class ElasticProfile implements JsonSerializable<ElasticProfile> {
    /*
     * The desiredCount property.
     */
    private Integer desiredCount;

    /*
     * Flag that indicates whether desiredCount should be maintained when customer deletes SPECIFIC container groups
     * (CGs) from the NGroups. In this case, new CGs will be created by NGroup to compensate for the specific deleted
     * ones.
     */
    private Boolean maintainDesiredCount;

    /*
     * Container Groups are named on a generic guid based naming scheme/policy. Customer can modify naming policy to add
     * prefix to CG names during scale out operation.
     */
    private ElasticProfileContainerGroupNamingPolicy containerGroupNamingPolicy;

    /**
     * Creates an instance of ElasticProfile class.
     */
    public ElasticProfile() {
    }

    /**
     * Get the desiredCount property: The desiredCount property.
     * 
     * @return the desiredCount value.
     */
    public Integer desiredCount() {
        return this.desiredCount;
    }

    /**
     * Set the desiredCount property: The desiredCount property.
     * 
     * @param desiredCount the desiredCount value to set.
     * @return the ElasticProfile object itself.
     */
    public ElasticProfile withDesiredCount(Integer desiredCount) {
        this.desiredCount = desiredCount;
        return this;
    }

    /**
     * Get the maintainDesiredCount property: Flag that indicates whether desiredCount should be maintained when
     * customer deletes SPECIFIC container groups (CGs) from the NGroups. In this case, new CGs will be created by
     * NGroup to compensate for the specific deleted ones.
     * 
     * @return the maintainDesiredCount value.
     */
    public Boolean maintainDesiredCount() {
        return this.maintainDesiredCount;
    }

    /**
     * Set the maintainDesiredCount property: Flag that indicates whether desiredCount should be maintained when
     * customer deletes SPECIFIC container groups (CGs) from the NGroups. In this case, new CGs will be created by
     * NGroup to compensate for the specific deleted ones.
     * 
     * @param maintainDesiredCount the maintainDesiredCount value to set.
     * @return the ElasticProfile object itself.
     */
    public ElasticProfile withMaintainDesiredCount(Boolean maintainDesiredCount) {
        this.maintainDesiredCount = maintainDesiredCount;
        return this;
    }

    /**
     * Get the containerGroupNamingPolicy property: Container Groups are named on a generic guid based naming
     * scheme/policy. Customer can modify naming policy to add prefix to CG names during scale out operation.
     * 
     * @return the containerGroupNamingPolicy value.
     */
    public ElasticProfileContainerGroupNamingPolicy containerGroupNamingPolicy() {
        return this.containerGroupNamingPolicy;
    }

    /**
     * Set the containerGroupNamingPolicy property: Container Groups are named on a generic guid based naming
     * scheme/policy. Customer can modify naming policy to add prefix to CG names during scale out operation.
     * 
     * @param containerGroupNamingPolicy the containerGroupNamingPolicy value to set.
     * @return the ElasticProfile object itself.
     */
    public ElasticProfile
        withContainerGroupNamingPolicy(ElasticProfileContainerGroupNamingPolicy containerGroupNamingPolicy) {
        this.containerGroupNamingPolicy = containerGroupNamingPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerGroupNamingPolicy() != null) {
            containerGroupNamingPolicy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("desiredCount", this.desiredCount);
        jsonWriter.writeBooleanField("maintainDesiredCount", this.maintainDesiredCount);
        jsonWriter.writeJsonField("containerGroupNamingPolicy", this.containerGroupNamingPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElasticProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElasticProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ElasticProfile.
     */
    public static ElasticProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElasticProfile deserializedElasticProfile = new ElasticProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("desiredCount".equals(fieldName)) {
                    deserializedElasticProfile.desiredCount = reader.getNullable(JsonReader::getInt);
                } else if ("maintainDesiredCount".equals(fieldName)) {
                    deserializedElasticProfile.maintainDesiredCount = reader.getNullable(JsonReader::getBoolean);
                } else if ("containerGroupNamingPolicy".equals(fieldName)) {
                    deserializedElasticProfile.containerGroupNamingPolicy
                        = ElasticProfileContainerGroupNamingPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElasticProfile;
        });
    }
}
