// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservices.fluent.DeletedVaultsClient;
import com.azure.resourcemanager.recoveryservices.fluent.models.DeletedVaultInner;
import com.azure.resourcemanager.recoveryservices.fluent.models.OperationResourceInner;
import com.azure.resourcemanager.recoveryservices.models.DeletedVaultList;
import com.azure.resourcemanager.recoveryservices.models.DeletedVaultUndeleteInput;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DeletedVaultsClient.
 */
public final class DeletedVaultsClientImpl implements DeletedVaultsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DeletedVaultsService service;

    /**
     * The service client containing this operation class.
     */
    private final RecoveryServicesManagementClientImpl client;

    /**
     * Initializes an instance of DeletedVaultsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DeletedVaultsClientImpl(RecoveryServicesManagementClientImpl client) {
        this.service
            = RestProxy.create(DeletedVaultsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for RecoveryServicesManagementClientDeletedVaults to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "RecoveryServicesMana")
    public interface DeletedVaultsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedVaultList>> listBySubscriptionId(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedVaultInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @PathParam("deletedVaultName") String deletedVaultName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/undelete")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> undelete(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @PathParam("deletedVaultName") String deletedVaultName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DeletedVaultUndeleteInput undeleteInput,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationResourceInner>> getOperationStatus(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("location") String location,
            @PathParam("deletedVaultName") String deletedVaultName, @PathParam("operationId") String operationId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedVaultList>> listBySubscriptionIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List of all DeletedVaults in the subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedVaultInner>> listBySubscriptionIdSinglePageAsync(String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscriptionId(this.client.getEndpoint(),
                this.client.getSubscriptionId(), location, this.client.getApiVersion(), accept, context))
            .<PagedResponse<DeletedVaultInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List of all DeletedVaults in the subscription.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedVaultInner>> listBySubscriptionIdSinglePageAsync(String location,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscriptionId(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List of all DeletedVaults in the subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeletedVaultInner> listBySubscriptionIdAsync(String location) {
        return new PagedFlux<>(() -> listBySubscriptionIdSinglePageAsync(location),
            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));
    }

    /**
     * List of all DeletedVaults in the subscription.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeletedVaultInner> listBySubscriptionIdAsync(String location, Context context) {
        return new PagedFlux<>(() -> listBySubscriptionIdSinglePageAsync(location, context),
            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink, context));
    }

    /**
     * List of all DeletedVaults in the subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedVaultInner> listBySubscriptionId(String location) {
        return new PagedIterable<>(listBySubscriptionIdAsync(location));
    }

    /**
     * List of all DeletedVaults in the subscription.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedVaultInner> listBySubscriptionId(String location, Context context) {
        return new PagedIterable<>(listBySubscriptionIdAsync(location, context));
    }

    /**
     * Get the DeletedVault details.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedVault details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeletedVaultInner>> getWithResponseAsync(String location, String deletedVaultName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (deletedVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deletedVaultName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
                deletedVaultName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the DeletedVault details.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedVault details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeletedVaultInner>> getWithResponseAsync(String location, String deletedVaultName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (deletedVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deletedVaultName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), location, deletedVaultName,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the DeletedVault details.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedVault details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeletedVaultInner> getAsync(String location, String deletedVaultName) {
        return getWithResponseAsync(location, deletedVaultName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the DeletedVault details.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedVault details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeletedVaultInner> getWithResponse(String location, String deletedVaultName, Context context) {
        return getWithResponseAsync(location, deletedVaultName, context).block();
    }

    /**
     * Get the DeletedVault details.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DeletedVault details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedVaultInner get(String location, String deletedVaultName) {
        return getWithResponse(location, deletedVaultName, Context.NONE).getValue();
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deletedVault information as returned by the resource provider along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> undeleteWithResponseAsync(String location, String deletedVaultName,
        DeletedVaultUndeleteInput undeleteInput) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (deletedVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deletedVaultName is required and cannot be null."));
        }
        if (undeleteInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter undeleteInput is required and cannot be null."));
        } else {
            undeleteInput.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.undelete(this.client.getEndpoint(), this.client.getSubscriptionId(),
                location, deletedVaultName, this.client.getApiVersion(), undeleteInput, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deletedVault information as returned by the resource provider along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> undeleteWithResponseAsync(String location, String deletedVaultName,
        DeletedVaultUndeleteInput undeleteInput, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (deletedVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deletedVaultName is required and cannot be null."));
        }
        if (undeleteInput == null) {
            return Mono.error(new IllegalArgumentException("Parameter undeleteInput is required and cannot be null."));
        } else {
            undeleteInput.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.undelete(this.client.getEndpoint(), this.client.getSubscriptionId(), location, deletedVaultName,
            this.client.getApiVersion(), undeleteInput, accept, context);
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of deletedVault information as returned by the resource provider.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndeleteAsync(String location,
        String deletedVaultName, DeletedVaultUndeleteInput undeleteInput) {
        Mono<Response<Flux<ByteBuffer>>> mono = undeleteWithResponseAsync(location, deletedVaultName, undeleteInput);
        return this.client.<DeletedVaultInner, DeletedVaultInner>getLroResult(mono, this.client.getHttpPipeline(),
            DeletedVaultInner.class, DeletedVaultInner.class, this.client.getContext());
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of deletedVault information as returned by the resource provider.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndeleteAsync(String location,
        String deletedVaultName, DeletedVaultUndeleteInput undeleteInput, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = undeleteWithResponseAsync(location, deletedVaultName, undeleteInput, context);
        return this.client.<DeletedVaultInner, DeletedVaultInner>getLroResult(mono, this.client.getHttpPipeline(),
            DeletedVaultInner.class, DeletedVaultInner.class, context);
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of deletedVault information as returned by the resource provider.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndelete(String location,
        String deletedVaultName, DeletedVaultUndeleteInput undeleteInput) {
        return this.beginUndeleteAsync(location, deletedVaultName, undeleteInput).getSyncPoller();
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of deletedVault information as returned by the resource provider.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndelete(String location,
        String deletedVaultName, DeletedVaultUndeleteInput undeleteInput, Context context) {
        return this.beginUndeleteAsync(location, deletedVaultName, undeleteInput, context).getSyncPoller();
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deletedVault information as returned by the resource provider on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeletedVaultInner> undeleteAsync(String location, String deletedVaultName,
        DeletedVaultUndeleteInput undeleteInput) {
        return beginUndeleteAsync(location, deletedVaultName, undeleteInput).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deletedVault information as returned by the resource provider on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeletedVaultInner> undeleteAsync(String location, String deletedVaultName,
        DeletedVaultUndeleteInput undeleteInput, Context context) {
        return beginUndeleteAsync(location, deletedVaultName, undeleteInput, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deletedVault information as returned by the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedVaultInner undelete(String location, String deletedVaultName,
        DeletedVaultUndeleteInput undeleteInput) {
        return undeleteAsync(location, deletedVaultName, undeleteInput).block();
    }

    /**
     * Undelete the DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param undeleteInput Undelete input.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return deletedVault information as returned by the resource provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedVaultInner undelete(String location, String deletedVaultName, DeletedVaultUndeleteInput undeleteInput,
        Context context) {
        return undeleteAsync(location, deletedVaultName, undeleteInput, context).block();
    }

    /**
     * Gets the operation status for a DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param operationId The ID of an ongoing async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status for a DeletedVault along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationResourceInner>> getOperationStatusWithResponseAsync(String location,
        String deletedVaultName, String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (deletedVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deletedVaultName is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.getOperationStatus(this.client.getEndpoint(), this.client.getSubscriptionId(),
                    location, deletedVaultName, operationId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the operation status for a DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param operationId The ID of an ongoing async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status for a DeletedVault along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationResourceInner>> getOperationStatusWithResponseAsync(String location,
        String deletedVaultName, String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (deletedVaultName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter deletedVaultName is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getOperationStatus(this.client.getEndpoint(), this.client.getSubscriptionId(), location,
            deletedVaultName, operationId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the operation status for a DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param operationId The ID of an ongoing async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status for a DeletedVault on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationResourceInner> getOperationStatusAsync(String location, String deletedVaultName,
        String operationId) {
        return getOperationStatusWithResponseAsync(location, deletedVaultName, operationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the operation status for a DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param operationId The ID of an ongoing async operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status for a DeletedVault along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationResourceInner> getOperationStatusWithResponse(String location, String deletedVaultName,
        String operationId, Context context) {
        return getOperationStatusWithResponseAsync(location, deletedVaultName, operationId, context).block();
    }

    /**
     * Gets the operation status for a DeletedVault.
     * 
     * @param location The name of the Azure region.
     * @param deletedVaultName The name of the deleted recovery services vault.
     * @param operationId The ID of an ongoing async operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status for a DeletedVault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationResourceInner getOperationStatus(String location, String deletedVaultName, String operationId) {
        return getOperationStatusWithResponse(location, deletedVaultName, operationId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedVaultInner>> listBySubscriptionIdNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeletedVaultInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedVaultInner>> listBySubscriptionIdNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
