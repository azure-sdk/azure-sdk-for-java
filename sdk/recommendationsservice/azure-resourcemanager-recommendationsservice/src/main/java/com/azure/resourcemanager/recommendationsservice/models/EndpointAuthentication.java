// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Service endpoints authentication details.
 */
@Fluent
public final class EndpointAuthentication implements JsonSerializable<EndpointAuthentication> {
    /*
     * AAD tenant ID.
     */
    private String aadTenantId;

    /*
     * AAD principal ID.
     */
    private String principalId;

    /*
     * AAD principal type.
     */
    private PrincipalType principalType;

    /**
     * Creates an instance of EndpointAuthentication class.
     */
    public EndpointAuthentication() {
    }

    /**
     * Get the aadTenantId property: AAD tenant ID.
     * 
     * @return the aadTenantId value.
     */
    public String aadTenantId() {
        return this.aadTenantId;
    }

    /**
     * Set the aadTenantId property: AAD tenant ID.
     * 
     * @param aadTenantId the aadTenantId value to set.
     * @return the EndpointAuthentication object itself.
     */
    public EndpointAuthentication withAadTenantId(String aadTenantId) {
        this.aadTenantId = aadTenantId;
        return this;
    }

    /**
     * Get the principalId property: AAD principal ID.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: AAD principal ID.
     * 
     * @param principalId the principalId value to set.
     * @return the EndpointAuthentication object itself.
     */
    public EndpointAuthentication withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the principalType property: AAD principal type.
     * 
     * @return the principalType value.
     */
    public PrincipalType principalType() {
        return this.principalType;
    }

    /**
     * Set the principalType property: AAD principal type.
     * 
     * @param principalType the principalType value to set.
     * @return the EndpointAuthentication object itself.
     */
    public EndpointAuthentication withPrincipalType(PrincipalType principalType) {
        this.principalType = principalType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aadTenantID", this.aadTenantId);
        jsonWriter.writeStringField("principalID", this.principalId);
        jsonWriter.writeStringField("principalType", this.principalType == null ? null : this.principalType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointAuthentication if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointAuthentication.
     */
    public static EndpointAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointAuthentication deserializedEndpointAuthentication = new EndpointAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aadTenantID".equals(fieldName)) {
                    deserializedEndpointAuthentication.aadTenantId = reader.getString();
                } else if ("principalID".equals(fieldName)) {
                    deserializedEndpointAuthentication.principalId = reader.getString();
                } else if ("principalType".equals(fieldName)) {
                    deserializedEndpointAuthentication.principalType = PrincipalType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointAuthentication;
        });
    }
}
