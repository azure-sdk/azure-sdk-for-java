// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Account resource properties.
 */
@Fluent
public final class AccountResourceProperties implements JsonSerializable<AccountResourceProperties> {
    /*
     * Account configuration. This can only be set at RecommendationsService Account creation.
     */
    private AccountConfiguration configuration;

    /*
     * The list of service endpoints authentication details.
     */
    private List<EndpointAuthentication> endpointAuthentications;

    /*
     * The list of CORS details.
     */
    private List<CorsRule> cors;

    /*
     * Connection string to write Accounts reports to.
     */
    private String reportsConnectionString;

    /*
     * The resource provisioning state.
     */
    private String provisioningState;

    /**
     * Creates an instance of AccountResourceProperties class.
     */
    public AccountResourceProperties() {
    }

    /**
     * Get the configuration property: Account configuration. This can only be set at RecommendationsService Account
     * creation.
     * 
     * @return the configuration value.
     */
    public AccountConfiguration configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Account configuration. This can only be set at RecommendationsService Account
     * creation.
     * 
     * @param configuration the configuration value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withConfiguration(AccountConfiguration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * Get the endpointAuthentications property: The list of service endpoints authentication details.
     * 
     * @return the endpointAuthentications value.
     */
    public List<EndpointAuthentication> endpointAuthentications() {
        return this.endpointAuthentications;
    }

    /**
     * Set the endpointAuthentications property: The list of service endpoints authentication details.
     * 
     * @param endpointAuthentications the endpointAuthentications value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withEndpointAuthentications(List<EndpointAuthentication> endpointAuthentications) {
        this.endpointAuthentications = endpointAuthentications;
        return this;
    }

    /**
     * Get the cors property: The list of CORS details.
     * 
     * @return the cors value.
     */
    public List<CorsRule> cors() {
        return this.cors;
    }

    /**
     * Set the cors property: The list of CORS details.
     * 
     * @param cors the cors value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withCors(List<CorsRule> cors) {
        this.cors = cors;
        return this;
    }

    /**
     * Get the reportsConnectionString property: Connection string to write Accounts reports to.
     * 
     * @return the reportsConnectionString value.
     */
    public String reportsConnectionString() {
        return this.reportsConnectionString;
    }

    /**
     * Set the reportsConnectionString property: Connection string to write Accounts reports to.
     * 
     * @param reportsConnectionString the reportsConnectionString value to set.
     * @return the AccountResourceProperties object itself.
     */
    public AccountResourceProperties withReportsConnectionString(String reportsConnectionString) {
        this.reportsConnectionString = reportsConnectionString;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointAuthentications() != null) {
            endpointAuthentications().forEach(e -> e.validate());
        }
        if (cors() != null) {
            cors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configuration", this.configuration == null ? null : this.configuration.toString());
        jsonWriter.writeArrayField("endpointAuthentications", this.endpointAuthentications,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("cors", this.cors, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("reportsConnectionString", this.reportsConnectionString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountResourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountResourceProperties.
     */
    public static AccountResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountResourceProperties deserializedAccountResourceProperties = new AccountResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configuration".equals(fieldName)) {
                    deserializedAccountResourceProperties.configuration
                        = AccountConfiguration.fromString(reader.getString());
                } else if ("endpointAuthentications".equals(fieldName)) {
                    List<EndpointAuthentication> endpointAuthentications
                        = reader.readArray(reader1 -> EndpointAuthentication.fromJson(reader1));
                    deserializedAccountResourceProperties.endpointAuthentications = endpointAuthentications;
                } else if ("cors".equals(fieldName)) {
                    List<CorsRule> cors = reader.readArray(reader1 -> CorsRule.fromJson(reader1));
                    deserializedAccountResourceProperties.cors = cors;
                } else if ("reportsConnectionString".equals(fieldName)) {
                    deserializedAccountResourceProperties.reportsConnectionString = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAccountResourceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountResourceProperties;
        });
    }
}
