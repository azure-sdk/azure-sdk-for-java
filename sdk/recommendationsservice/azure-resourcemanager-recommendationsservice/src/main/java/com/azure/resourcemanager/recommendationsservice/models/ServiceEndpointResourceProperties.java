// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ServiceEndpoint resource properties.
 */
@Fluent
public final class ServiceEndpointResourceProperties implements JsonSerializable<ServiceEndpointResourceProperties> {
    /*
     * ServiceEndpoint pre-allocated capacity controls the maximum requests-per-second allowed for that endpoint. Only
     * applicable when Account configuration is Capacity.
     */
    private Integer preAllocatedCapacity;

    /*
     * The paired location that will be used by this ServiceEndpoint.
     */
    private String pairedLocation;

    /*
     * The URL where the ServiceEndpoint API is accessible at.
     */
    private String url;

    /*
     * The resource provisioning state.
     */
    private String provisioningState;

    /**
     * Creates an instance of ServiceEndpointResourceProperties class.
     */
    public ServiceEndpointResourceProperties() {
    }

    /**
     * Get the preAllocatedCapacity property: ServiceEndpoint pre-allocated capacity controls the maximum
     * requests-per-second allowed for that endpoint. Only applicable when Account configuration is Capacity.
     * 
     * @return the preAllocatedCapacity value.
     */
    public Integer preAllocatedCapacity() {
        return this.preAllocatedCapacity;
    }

    /**
     * Set the preAllocatedCapacity property: ServiceEndpoint pre-allocated capacity controls the maximum
     * requests-per-second allowed for that endpoint. Only applicable when Account configuration is Capacity.
     * 
     * @param preAllocatedCapacity the preAllocatedCapacity value to set.
     * @return the ServiceEndpointResourceProperties object itself.
     */
    public ServiceEndpointResourceProperties withPreAllocatedCapacity(Integer preAllocatedCapacity) {
        this.preAllocatedCapacity = preAllocatedCapacity;
        return this;
    }

    /**
     * Get the pairedLocation property: The paired location that will be used by this ServiceEndpoint.
     * 
     * @return the pairedLocation value.
     */
    public String pairedLocation() {
        return this.pairedLocation;
    }

    /**
     * Get the url property: The URL where the ServiceEndpoint API is accessible at.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("preAllocatedCapacity", this.preAllocatedCapacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceEndpointResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceEndpointResourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceEndpointResourceProperties.
     */
    public static ServiceEndpointResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceEndpointResourceProperties deserializedServiceEndpointResourceProperties
                = new ServiceEndpointResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("preAllocatedCapacity".equals(fieldName)) {
                    deserializedServiceEndpointResourceProperties.preAllocatedCapacity
                        = reader.getNullable(JsonReader::getInt);
                } else if ("pairedLocation".equals(fieldName)) {
                    deserializedServiceEndpointResourceProperties.pairedLocation = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedServiceEndpointResourceProperties.url = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedServiceEndpointResourceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceEndpointResourceProperties;
        });
    }
}
