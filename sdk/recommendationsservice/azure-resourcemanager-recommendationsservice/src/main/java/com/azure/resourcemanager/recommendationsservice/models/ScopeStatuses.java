// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Scope statuses.
 */
@Fluent
public final class ScopeStatuses implements JsonSerializable<ScopeStatuses> {
    /*
     * The scope that the statuses refers to.
     */
    private String scope;

    /*
     * Scope stage statuses.
     */
    private List<StageStatus> statuses;

    /**
     * Creates an instance of ScopeStatuses class.
     */
    public ScopeStatuses() {
    }

    /**
     * Get the scope property: The scope that the statuses refers to.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope that the statuses refers to.
     * 
     * @param scope the scope value to set.
     * @return the ScopeStatuses object itself.
     */
    public ScopeStatuses withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the statuses property: Scope stage statuses.
     * 
     * @return the statuses value.
     */
    public List<StageStatus> statuses() {
        return this.statuses;
    }

    /**
     * Set the statuses property: Scope stage statuses.
     * 
     * @param statuses the statuses value to set.
     * @return the ScopeStatuses object itself.
     */
    public ScopeStatuses withStatuses(List<StageStatus> statuses) {
        this.statuses = statuses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeArrayField("statuses", this.statuses, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScopeStatuses from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScopeStatuses if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScopeStatuses.
     */
    public static ScopeStatuses fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScopeStatuses deserializedScopeStatuses = new ScopeStatuses();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedScopeStatuses.scope = reader.getString();
                } else if ("statuses".equals(fieldName)) {
                    List<StageStatus> statuses = reader.readArray(reader1 -> StageStatus.fromJson(reader1));
                    deserializedScopeStatuses.statuses = statuses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScopeStatuses;
        });
    }
}
