// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Stage status.
 */
@Fluent
public final class StageStatus implements JsonSerializable<StageStatus> {
    /*
     * The stage name.
     */
    private String stage;

    /*
     * The status of the stage.
     */
    private String status;

    /*
     * The time of the status.
     */
    private OffsetDateTime time;

    /**
     * Creates an instance of StageStatus class.
     */
    public StageStatus() {
    }

    /**
     * Get the stage property: The stage name.
     * 
     * @return the stage value.
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Set the stage property: The stage name.
     * 
     * @param stage the stage value to set.
     * @return the StageStatus object itself.
     */
    public StageStatus withStage(String stage) {
        this.stage = stage;
        return this;
    }

    /**
     * Get the status property: The status of the stage.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the stage.
     * 
     * @param status the status value to set.
     * @return the StageStatus object itself.
     */
    public StageStatus withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the time property: The time of the status.
     * 
     * @return the time value.
     */
    public OffsetDateTime time() {
        return this.time;
    }

    /**
     * Set the time property: The time of the status.
     * 
     * @param time the time value to set.
     * @return the StageStatus object itself.
     */
    public StageStatus withTime(OffsetDateTime time) {
        this.time = time;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stage", this.stage);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("time",
            this.time == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.time));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StageStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StageStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StageStatus.
     */
    public static StageStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StageStatus deserializedStageStatus = new StageStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stage".equals(fieldName)) {
                    deserializedStageStatus.stage = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedStageStatus.status = reader.getString();
                } else if ("time".equals(fieldName)) {
                    deserializedStageStatus.time = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStageStatus;
        });
    }
}
