// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.recommendationsservice.models.ScopeStatuses;
import java.io.IOException;
import java.util.List;

/**
 * Account status.
 */
@Fluent
public final class AccountStatusInner implements JsonSerializable<AccountStatusInner> {
    /*
     * The list of scopes statuses.
     */
    private List<ScopeStatuses> scopesStatuses;

    /**
     * Creates an instance of AccountStatusInner class.
     */
    public AccountStatusInner() {
    }

    /**
     * Get the scopesStatuses property: The list of scopes statuses.
     * 
     * @return the scopesStatuses value.
     */
    public List<ScopeStatuses> scopesStatuses() {
        return this.scopesStatuses;
    }

    /**
     * Set the scopesStatuses property: The list of scopes statuses.
     * 
     * @param scopesStatuses the scopesStatuses value to set.
     * @return the AccountStatusInner object itself.
     */
    public AccountStatusInner withScopesStatuses(List<ScopeStatuses> scopesStatuses) {
        this.scopesStatuses = scopesStatuses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scopesStatuses() != null) {
            scopesStatuses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scopesStatuses", this.scopesStatuses,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountStatusInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountStatusInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountStatusInner.
     */
    public static AccountStatusInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountStatusInner deserializedAccountStatusInner = new AccountStatusInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scopesStatuses".equals(fieldName)) {
                    List<ScopeStatuses> scopesStatuses = reader.readArray(reader1 -> ScopeStatuses.fromJson(reader1));
                    deserializedAccountStatusInner.scopesStatuses = scopesStatuses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountStatusInner;
        });
    }
}
