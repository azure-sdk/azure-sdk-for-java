// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Modeling resource properties.
 */
@Fluent
public final class ModelingResourceProperties implements JsonSerializable<ModelingResourceProperties> {
    /*
     * Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling
     * creation.
     */
    private ModelingFeatures features;

    /*
     * Modeling frequency controls the modeling compute frequency.
     */
    private ModelingFrequency frequency;

    /*
     * Modeling size controls the maximum supported input data size.
     */
    private ModelingSize size;

    /*
     * The configuration to raw CDM data to be used as Modeling resource input.
     */
    private ModelingInputData inputData;

    /*
     * The resource provisioning state.
     */
    private String provisioningState;

    /**
     * Creates an instance of ModelingResourceProperties class.
     */
    public ModelingResourceProperties() {
    }

    /**
     * Get the features property: Modeling features controls the set of supported scenarios\models being computed. This
     * can only be set at Modeling creation.
     * 
     * @return the features value.
     */
    public ModelingFeatures features() {
        return this.features;
    }

    /**
     * Set the features property: Modeling features controls the set of supported scenarios\models being computed. This
     * can only be set at Modeling creation.
     * 
     * @param features the features value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withFeatures(ModelingFeatures features) {
        this.features = features;
        return this;
    }

    /**
     * Get the frequency property: Modeling frequency controls the modeling compute frequency.
     * 
     * @return the frequency value.
     */
    public ModelingFrequency frequency() {
        return this.frequency;
    }

    /**
     * Set the frequency property: Modeling frequency controls the modeling compute frequency.
     * 
     * @param frequency the frequency value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withFrequency(ModelingFrequency frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get the size property: Modeling size controls the maximum supported input data size.
     * 
     * @return the size value.
     */
    public ModelingSize size() {
        return this.size;
    }

    /**
     * Set the size property: Modeling size controls the maximum supported input data size.
     * 
     * @param size the size value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withSize(ModelingSize size) {
        this.size = size;
        return this;
    }

    /**
     * Get the inputData property: The configuration to raw CDM data to be used as Modeling resource input.
     * 
     * @return the inputData value.
     */
    public ModelingInputData inputData() {
        return this.inputData;
    }

    /**
     * Set the inputData property: The configuration to raw CDM data to be used as Modeling resource input.
     * 
     * @param inputData the inputData value to set.
     * @return the ModelingResourceProperties object itself.
     */
    public ModelingResourceProperties withInputData(ModelingInputData inputData) {
        this.inputData = inputData;
        return this;
    }

    /**
     * Get the provisioningState property: The resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputData() != null) {
            inputData().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("features", this.features == null ? null : this.features.toString());
        jsonWriter.writeStringField("frequency", this.frequency == null ? null : this.frequency.toString());
        jsonWriter.writeStringField("size", this.size == null ? null : this.size.toString());
        jsonWriter.writeJsonField("inputData", this.inputData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModelingResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModelingResourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ModelingResourceProperties.
     */
    public static ModelingResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModelingResourceProperties deserializedModelingResourceProperties = new ModelingResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("features".equals(fieldName)) {
                    deserializedModelingResourceProperties.features = ModelingFeatures.fromString(reader.getString());
                } else if ("frequency".equals(fieldName)) {
                    deserializedModelingResourceProperties.frequency = ModelingFrequency.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedModelingResourceProperties.size = ModelingSize.fromString(reader.getString());
                } else if ("inputData".equals(fieldName)) {
                    deserializedModelingResourceProperties.inputData = ModelingInputData.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedModelingResourceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModelingResourceProperties;
        });
    }
}
