// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recommendationsservice.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The configuration to raw CDM data to be used as Modeling resource input.
 */
@Fluent
public final class ModelingInputData implements JsonSerializable<ModelingInputData> {
    /*
     * Connection string to raw input data.
     */
    private String connectionString;

    /**
     * Creates an instance of ModelingInputData class.
     */
    public ModelingInputData() {
    }

    /**
     * Get the connectionString property: Connection string to raw input data.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: Connection string to raw input data.
     * 
     * @param connectionString the connectionString value to set.
     * @return the ModelingInputData object itself.
     */
    public ModelingInputData withConnectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("connectionString", this.connectionString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ModelingInputData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ModelingInputData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ModelingInputData.
     */
    public static ModelingInputData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ModelingInputData deserializedModelingInputData = new ModelingInputData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionString".equals(fieldName)) {
                    deserializedModelingInputData.connectionString = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedModelingInputData;
        });
    }
}
