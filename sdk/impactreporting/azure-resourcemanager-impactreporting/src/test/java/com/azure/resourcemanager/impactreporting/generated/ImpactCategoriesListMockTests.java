// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.impactreporting.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.impactreporting.ImpactReportingManager;
import com.azure.resourcemanager.impactreporting.models.ImpactCategory;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ImpactCategoriesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"categoryId\":\"bhqwalmuzyoxa\",\"parentCategoryId\":\"dkzjancuxrh\",\"description\":\"bavxbniwdjswzt\",\"requiredImpactProperties\":[{\"name\":\"pgn\",\"allowedValues\":[\"x\"]}]},\"id\":\"zxbzpfzabglc\",\"name\":\"hxw\",\"type\":\"ctyqik\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ImpactReportingManager manager = ImpactReportingManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ImpactCategory> response
            = manager.impactCategories().list("edckzywbiexzfey", "eaxib", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bhqwalmuzyoxa", response.iterator().next().properties().categoryId());
        Assertions.assertEquals("dkzjancuxrh", response.iterator().next().properties().parentCategoryId());
        Assertions.assertEquals("bavxbniwdjswzt", response.iterator().next().properties().description());
        Assertions.assertEquals("pgn",
            response.iterator().next().properties().requiredImpactProperties().get(0).name());
        Assertions.assertEquals("x",
            response.iterator().next().properties().requiredImpactProperties().get(0).allowedValues().get(0));
    }
}
