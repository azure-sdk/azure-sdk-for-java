// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"biqtgdq\",\"serviceTypeName\":\"hm\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"drizetpwbr\",\"placementConstraints\":\"llibphbqzmizak\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"kjpdnjzhajo\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"hjlmu\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"xprimrsop\"}],\"serviceLoadMetrics\":[{\"name\":\"cjmeislstvasy\",\"weight\":\"Zero\",\"primaryDefaultLoad\":936242066,\"secondaryDefaultLoad\":2139579132,\"defaultLoad\":1824653896}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Low\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"zolbaemwmdxmebw\":\"uzboyjathw\",\"a\":\"scjpahlxv\",\"xnmwmqtibxyijddt\":\"f\",\"ekpndzaapmudq\":\"qcttadijaeukmrsi\"},\"location\":\"qwigpibudqwyxe\",\"id\":\"ybpmzznrtffyaq\",\"name\":\"tmhheioqa\",\"type\":\"hvseufuqyrx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ServiceResource response = manager.services()
            .getWithResponse("smkss", "h", "iftxfkf", "egprhptil", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("llibphbqzmizak", response.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("kjpdnjzhajo", response.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("cjmeislstvasy", response.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.ZERO,
            response.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(936242066, response.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(2139579132, response.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1824653896, response.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, response.properties().defaultMoveCost());
        Assertions.assertEquals("hm", response.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.properties().servicePackageActivationMode());
        Assertions.assertEquals("drizetpwbr", response.properties().serviceDnsName());
        Assertions.assertEquals("uzboyjathw", response.tags().get("zolbaemwmdxmebw"));
        Assertions.assertEquals("qwigpibudqwyxe", response.location());
    }
}
