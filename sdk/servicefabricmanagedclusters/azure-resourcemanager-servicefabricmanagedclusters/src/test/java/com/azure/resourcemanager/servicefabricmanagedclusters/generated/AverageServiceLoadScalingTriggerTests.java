// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AverageServiceLoadScalingTrigger;
import org.junit.jupiter.api.Assertions;

public final class AverageServiceLoadScalingTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AverageServiceLoadScalingTrigger model = BinaryData.fromString(
            "{\"kind\":\"AverageServiceLoadTrigger\",\"metricName\":\"sxyawjoyaqcs\",\"lowerLoadThreshold\":69.56505476233119,\"upperLoadThreshold\":24.450997223606173,\"scaleInterval\":\"iidzyexzne\",\"useOnlyPrimaryLoad\":false}")
            .toObject(AverageServiceLoadScalingTrigger.class);
        Assertions.assertEquals("sxyawjoyaqcs", model.metricName());
        Assertions.assertEquals(69.56505476233119, model.lowerLoadThreshold());
        Assertions.assertEquals(24.450997223606173, model.upperLoadThreshold());
        Assertions.assertEquals("iidzyexzne", model.scaleInterval());
        Assertions.assertEquals(false, model.useOnlyPrimaryLoad());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AverageServiceLoadScalingTrigger model = new AverageServiceLoadScalingTrigger().withMetricName("sxyawjoyaqcs")
            .withLowerLoadThreshold(69.56505476233119)
            .withUpperLoadThreshold(24.450997223606173)
            .withScaleInterval("iidzyexzne")
            .withUseOnlyPrimaryLoad(false);
        model = BinaryData.fromObject(model).toObject(AverageServiceLoadScalingTrigger.class);
        Assertions.assertEquals("sxyawjoyaqcs", model.metricName());
        Assertions.assertEquals(69.56505476233119, model.lowerLoadThreshold());
        Assertions.assertEquals(24.450997223606173, model.upperLoadThreshold());
        Assertions.assertEquals("iidzyexzne", model.scaleInterval());
        Assertions.assertEquals(false, model.useOnlyPrimaryLoad());
    }
}
