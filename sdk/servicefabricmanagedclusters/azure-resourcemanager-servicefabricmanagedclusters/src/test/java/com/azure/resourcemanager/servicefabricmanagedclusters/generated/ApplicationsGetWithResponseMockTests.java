// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"srhnjivo\",\"version\":\"tnovqfzgemjdftul\",\"parameters\":{\"u\":\"duceamtmc\",\"jw\":\"m\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":303130680,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":173191465,\"maxPercentUnhealthyPartitionsPerService\":1027122144,\"maxPercentUnhealthyReplicasPerPartition\":2110240419},\"serviceTypeHealthPolicyMap\":{\"msvpkjpr\":{\"maxPercentUnhealthyServices\":1563475651,\"maxPercentUnhealthyPartitionsPerService\":1605221592,\"maxPercentUnhealthyReplicasPerPartition\":2133935833},\"fz\":{\"maxPercentUnhealthyServices\":967300246,\"maxPercentUnhealthyPartitionsPerService\":592293204,\"maxPercentUnhealthyReplicasPerPartition\":955806064},\"x\":{\"maxPercentUnhealthyServices\":497380476,\"maxPercentUnhealthyPartitionsPerService\":1927018830,\"maxPercentUnhealthyReplicasPerPartition\":1842771027}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"eydbsd\",\"healthCheckStableDuration\":\"hmkxmaehvbb\",\"healthCheckRetryTimeout\":\"uripltfnhtba\",\"upgradeTimeout\":\"kgxywr\",\"upgradeDomainTimeout\":\"kpyklyhp\"},\"instanceCloseDelayDuration\":5013302124238656420,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":3601533238047965493,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"ibthostgktstvd\",\"principalId\":\"eclze\"}]},\"tags\":{\"odqkdlwwqfb\":\"cvhzlhp\",\"lmbtxhwgfwsrt\":\"mlkxtrqjfs\",\"kh\":\"wcoezbrhub\"},\"identity\":{\"principalId\":\"goo\",\"tenantId\":\"kqfqjbvl\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ayjkqa\":{\"principalId\":\"uiqtqzfavy\",\"clientId\":\"qqybarye\"}}},\"location\":\"gzslesjcbhernnti\",\"id\":\"djc\",\"name\":\"bquwrbehw\",\"type\":\"gohbuffkmrq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApplicationResource response = manager.applications()
            .getWithResponse("pxehuwrykqga", "fmviklby", "vkhbejdznx", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cvhzlhp", response.tags().get("odqkdlwwqfb"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("gzslesjcbhernnti", response.location());
        Assertions.assertEquals("tnovqfzgemjdftul", response.version());
        Assertions.assertEquals("duceamtmc", response.parameters().get("u"));
        Assertions.assertEquals(true, response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(303130680,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(173191465,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1027122144,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2110240419,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1563475651,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("msvpkjpr")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1605221592,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("msvpkjpr")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2133935833,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("msvpkjpr")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("eydbsd",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("hmkxmaehvbb",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("uripltfnhtba",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("kgxywr", response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("kpyklyhp",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(5013302124238656420L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(3601533238047965493L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("ibthostgktstvd", response.managedIdentities().get(0).name());
        Assertions.assertEquals("eclze", response.managedIdentities().get(0).principalId());
    }
}
