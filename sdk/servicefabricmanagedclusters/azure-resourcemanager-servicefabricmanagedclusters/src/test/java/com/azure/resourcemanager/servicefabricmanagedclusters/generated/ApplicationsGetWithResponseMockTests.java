// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"kkqfqjbvle\",\"version\":\"fmluiqtqzfavyvn\",\"parameters\":{\"euayjkqabqgzsles\":\"bar\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":2098917747,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":211422779,\"maxPercentUnhealthyPartitionsPerService\":1126547162,\"maxPercentUnhealthyReplicasPerPartition\":1426151715},\"serviceTypeHealthPolicyMap\":{\"cv\":{\"maxPercentUnhealthyServices\":167991676,\"maxPercentUnhealthyPartitionsPerService\":537781185,\"maxPercentUnhealthyReplicasPerPartition\":1014646419},\"rbe\":{\"maxPercentUnhealthyServices\":284273475,\"maxPercentUnhealthyPartitionsPerService\":730948461,\"maxPercentUnhealthyReplicasPerPartition\":440184617},\"o\":{\"maxPercentUnhealthyServices\":372770519,\"maxPercentUnhealthyPartitionsPerService\":2007657488,\"maxPercentUnhealthyReplicasPerPartition\":635360833}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"kmr\",\"healthCheckStableDuration\":\"emvvhm\",\"healthCheckRetryTimeout\":\"tdrjfutacoebj\",\"upgradeTimeout\":\"ewzcjznmwcp\",\"upgradeDomainTimeout\":\"guaadraufactkahz\"},\"instanceCloseDelayDuration\":5238754995577002157,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":8252978484385521877,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"neekulfg\",\"principalId\":\"lqubkwdlen\"},{\"name\":\"d\",\"principalId\":\"utujba\"}]},\"tags\":{\"minyflnorwm\":\"uo\",\"xpgpq\":\"uvwpklvxwmyg\",\"daxconfozauorsuk\":\"hiszepnnbjcrxgib\",\"pzlrphw\":\"kwbqplhlvnuu\"},\"identity\":{\"principalId\":\"l\",\"tenantId\":\"eyuqdunvmnnrwr\",\"type\":\"None\",\"userAssignedIdentities\":{\"fomiloxgg\":{\"principalId\":\"alywjhhgdn\",\"clientId\":\"msi\"},\"hvcyyysfg\":{\"principalId\":\"fi\",\"clientId\":\"dieuzaofj\"},\"cimpevfg\":{\"principalId\":\"tcubiipuipwoqonm\",\"clientId\":\"jeknizshq\"},\"wrwfscjfnyns\":{\"principalId\":\"lrri\",\"clientId\":\"ywdxsmic\"}}},\"location\":\"ujiz\",\"id\":\"oqytibyowbblgy\",\"name\":\"vutpthjoxo\",\"type\":\"smsks\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApplicationResource response = manager.applications()
            .getWithResponse("a", "coezbrhubskh", "dyg", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("uo", response.tags().get("minyflnorwm"));
        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("ujiz", response.location());
        Assertions.assertEquals("fmluiqtqzfavyvn", response.version());
        Assertions.assertEquals("bar", response.parameters().get("euayjkqabqgzsles"));
        Assertions.assertTrue(response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(2098917747,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(211422779,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1126547162,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1426151715,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(167991676,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cv")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(537781185,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cv")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1014646419,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cv")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertTrue(response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("kmr",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("emvvhm",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("tdrjfutacoebj",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("ewzcjznmwcp",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("guaadraufactkahz",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(5238754995577002157L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(8252978484385521877L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertTrue(response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("neekulfg", response.managedIdentities().get(0).name());
        Assertions.assertEquals("lqubkwdlen", response.managedIdentities().get(0).principalId());
    }
}
