// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ServiceResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Partition;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"pqsxvnmicy\",\"serviceTypeName\":\"vce\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"lo\",\"placementConstraints\":\"oty\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"njbkcnxdhbttkph\"}],\"serviceLoadMetrics\":[{\"name\":\"nv\",\"weight\":\"Medium\",\"primaryDefaultLoad\":1564311717,\"secondaryDefaultLoad\":963875156,\"defaultLoad\":927719856},{\"name\":\"lfplp\",\"weight\":\"Zero\",\"primaryDefaultLoad\":1467620924,\"secondaryDefaultLoad\":1106219716,\"defaultLoad\":1022629586},{\"name\":\"bgyepsbj\",\"weight\":\"Zero\",\"primaryDefaultLoad\":610868240,\"secondaryDefaultLoad\":2003590668,\"defaultLoad\":2007801220},{\"name\":\"pmueefjzwfqk\",\"weight\":\"High\",\"primaryDefaultLoad\":766591584,\"secondaryDefaultLoad\":674100660,\"defaultLoad\":611347280}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Low\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"tlmoyrx\":\"qxtccmgyudx\"},\"location\":\"fudwpznt\",\"id\":\"dzhlrq\",\"name\":\"bh\",\"type\":\"kfrlhrxsbky\"}")
            .toObject(ServiceResourceInner.class);
        Assertions.assertEquals("oty", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("njbkcnxdhbttkph", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("nv", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM,
            model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1564311717, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(963875156, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(927719856, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, model.properties().defaultMoveCost());
        Assertions.assertEquals("vce", model.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS,
            model.properties().servicePackageActivationMode());
        Assertions.assertEquals("lo", model.properties().serviceDnsName());
        Assertions.assertEquals("qxtccmgyudx", model.tags().get("tlmoyrx"));
        Assertions.assertEquals("fudwpznt", model.location());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceInner model = new ServiceResourceInner().withProperties(new ServiceResourceProperties()
            .withPlacementConstraints("oty")
            .withCorrelationScheme(
                Arrays.asList(new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("njbkcnxdhbttkph")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetric().withName("nv")
                    .withWeight(ServiceLoadMetricWeight.MEDIUM)
                    .withPrimaryDefaultLoad(1564311717)
                    .withSecondaryDefaultLoad(963875156)
                    .withDefaultLoad(927719856),
                new ServiceLoadMetric().withName("lfplp")
                    .withWeight(ServiceLoadMetricWeight.ZERO)
                    .withPrimaryDefaultLoad(1467620924)
                    .withSecondaryDefaultLoad(1106219716)
                    .withDefaultLoad(1022629586),
                new ServiceLoadMetric().withName("bgyepsbj")
                    .withWeight(ServiceLoadMetricWeight.ZERO)
                    .withPrimaryDefaultLoad(610868240)
                    .withSecondaryDefaultLoad(2003590668)
                    .withDefaultLoad(2007801220),
                new ServiceLoadMetric().withName("pmueefjzwfqk")
                    .withWeight(ServiceLoadMetricWeight.HIGH)
                    .withPrimaryDefaultLoad(766591584)
                    .withSecondaryDefaultLoad(674100660)
                    .withDefaultLoad(611347280)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicy(), new ServicePlacementPolicy(), new ServicePlacementPolicy()))
            .withDefaultMoveCost(MoveCost.LOW)
            .withScalingPolicies(Arrays.asList(
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger()),
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger()),
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger())))
            .withServiceTypeName("vce")
            .withPartitionDescription(new Partition())
            .withServicePackageActivationMode(ServicePackageActivationMode.SHARED_PROCESS)
            .withServiceDnsName("lo")).withTags(mapOf("tlmoyrx", "qxtccmgyudx")).withLocation("fudwpznt");
        model = BinaryData.fromObject(model).toObject(ServiceResourceInner.class);
        Assertions.assertEquals("oty", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("njbkcnxdhbttkph", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("nv", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM,
            model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1564311717, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(963875156, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(927719856, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, model.properties().defaultMoveCost());
        Assertions.assertEquals("vce", model.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS,
            model.properties().servicePackageActivationMode());
        Assertions.assertEquals("lo", model.properties().serviceDnsName());
        Assertions.assertEquals("qxtccmgyudx", model.tags().get("tlmoyrx"));
        Assertions.assertEquals("fudwpznt", model.location());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
