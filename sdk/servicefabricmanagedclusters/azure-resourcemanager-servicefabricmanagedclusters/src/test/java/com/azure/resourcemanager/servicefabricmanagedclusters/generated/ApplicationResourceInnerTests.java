// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"abifpikxwczbys\",\"version\":\"pqxu\",\"parameters\":{\"n\":\"y\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":355535904,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":143848779,\"maxPercentUnhealthyPartitionsPerService\":768699380,\"maxPercentUnhealthyReplicasPerPartition\":519347031},\"serviceTypeHealthPolicyMap\":{\"rtfw\":{\"maxPercentUnhealthyServices\":832798449,\"maxPercentUnhealthyPartitionsPerService\":920256064,\"maxPercentUnhealthyReplicasPerPartition\":1629282531},\"gaudcc\":{\"maxPercentUnhealthyServices\":1656802567,\"maxPercentUnhealthyPartitionsPerService\":7252116,\"maxPercentUnhealthyReplicasPerPartition\":2033205532},\"jcny\":{\"maxPercentUnhealthyServices\":157917305,\"maxPercentUnhealthyPartitionsPerService\":70776342,\"maxPercentUnhealthyReplicasPerPartition\":14804050}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"yhtnapczwlokjye\",\"healthCheckStableDuration\":\"kkvnipjox\",\"healthCheckRetryTimeout\":\"jnchgej\",\"upgradeTimeout\":\"podmailzydehojwy\",\"upgradeDomainTimeout\":\"huxinpmqnj\"},\"instanceCloseDelayDuration\":4109191801055295881,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":8676926822483952686,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"putegjvwmfd\",\"principalId\":\"t\"},{\"name\":\"cmdv\",\"principalId\":\"jhulsuuvmkjo\"},{\"name\":\"k\",\"principalId\":\"wfndiodjpsl\"},{\"name\":\"ej\",\"principalId\":\"pvwryoqpsoacc\"}]},\"tags\":{\"lahbcryff\":\"akl\",\"xpaojakhmsbz\":\"fdosyg\",\"hlxaolthqtr\":\"hcrzevd\"},\"identity\":{\"principalId\":\"bpf\",\"tenantId\":\"s\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ofpdvh\":{\"principalId\":\"cjrwzoxxjtfellu\",\"clientId\":\"zitonpeqfpjkjl\"}}},\"location\":\"xxypininmay\",\"id\":\"ybb\",\"name\":\"podepoo\",\"type\":\"inuvamiheogn\"}")
            .toObject(ApplicationResourceInner.class);
        Assertions.assertEquals("akl", model.tags().get("lahbcryff"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xxypininmay", model.location());
        Assertions.assertEquals("pqxu", model.version());
        Assertions.assertEquals("y", model.parameters().get("n"));
        Assertions.assertEquals(false, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(355535904,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(143848779,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(768699380,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(519347031,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(832798449,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("rtfw")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(920256064,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("rtfw")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1629282531,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("rtfw")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("yhtnapczwlokjye",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("kkvnipjox",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("jnchgej",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("podmailzydehojwy",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("huxinpmqnj",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(4109191801055295881L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(8676926822483952686L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals("putegjvwmfd", model.managedIdentities().get(0).name());
        Assertions.assertEquals("t", model.managedIdentities().get(0).principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceInner model = new ApplicationResourceInner()
            .withTags(mapOf("lahbcryff", "akl", "xpaojakhmsbz", "fdosyg", "hlxaolthqtr", "hcrzevd"))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("ofpdvh", new UserAssignedIdentity())))
            .withLocation("xxypininmay")
            .withVersion("pqxu")
            .withParameters(mapOf("n", "y"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                    .withMaxPercentUnhealthyDeployedApplications(355535904)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(143848779)
                            .withMaxPercentUnhealthyPartitionsPerService(768699380)
                            .withMaxPercentUnhealthyReplicasPerPartition(519347031))
                    .withServiceTypeHealthPolicyMap(mapOf("rtfw",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(832798449)
                            .withMaxPercentUnhealthyPartitionsPerService(920256064)
                            .withMaxPercentUnhealthyReplicasPerPartition(1629282531),
                        "gaudcc",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1656802567)
                            .withMaxPercentUnhealthyPartitionsPerService(7252116)
                            .withMaxPercentUnhealthyReplicasPerPartition(2033205532),
                        "jcny",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(157917305)
                            .withMaxPercentUnhealthyPartitionsPerService(70776342)
                            .withMaxPercentUnhealthyReplicasPerPartition(14804050))))
                .withForceRestart(false)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("yhtnapczwlokjye")
                        .withHealthCheckStableDuration("kkvnipjox")
                        .withHealthCheckRetryTimeout("jnchgej")
                        .withUpgradeTimeout("podmailzydehojwy")
                        .withUpgradeDomainTimeout("huxinpmqnj"))
                .withInstanceCloseDelayDuration(4109191801055295881L)
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                .withUpgradeReplicaSetCheckTimeout(8676926822483952686L)
                .withRecreateApplication(true))
            .withManagedIdentities(
                Arrays.asList(new ApplicationUserAssignedIdentity().withName("putegjvwmfd").withPrincipalId("t"),
                    new ApplicationUserAssignedIdentity().withName("cmdv").withPrincipalId("jhulsuuvmkjo"),
                    new ApplicationUserAssignedIdentity().withName("k").withPrincipalId("wfndiodjpsl"),
                    new ApplicationUserAssignedIdentity().withName("ej").withPrincipalId("pvwryoqpsoacc")));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceInner.class);
        Assertions.assertEquals("akl", model.tags().get("lahbcryff"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xxypininmay", model.location());
        Assertions.assertEquals("pqxu", model.version());
        Assertions.assertEquals("y", model.parameters().get("n"));
        Assertions.assertEquals(false, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(355535904,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(143848779,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(768699380,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(519347031,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(832798449,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("rtfw")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(920256064,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("rtfw")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1629282531,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("rtfw")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("yhtnapczwlokjye",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("kkvnipjox",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("jnchgej",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("podmailzydehojwy",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("huxinpmqnj",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(4109191801055295881L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(8676926822483952686L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals("putegjvwmfd", model.managedIdentities().get(0).name());
        Assertions.assertEquals("t", model.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
