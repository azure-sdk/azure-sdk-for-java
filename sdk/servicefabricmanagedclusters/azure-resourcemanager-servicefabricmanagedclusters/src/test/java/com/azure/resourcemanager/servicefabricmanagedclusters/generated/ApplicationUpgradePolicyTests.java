// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationUpgradePolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationUpgradePolicy model = BinaryData.fromString(
            "{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":559319579,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1369496360,\"maxPercentUnhealthyPartitionsPerService\":900623903,\"maxPercentUnhealthyReplicasPerPartition\":1946901948},\"serviceTypeHealthPolicyMap\":{\"cukjf\":{\"maxPercentUnhealthyServices\":1932583113,\"maxPercentUnhealthyPartitionsPerService\":1438714337,\"maxPercentUnhealthyReplicasPerPartition\":1204354379},\"w\":{\"maxPercentUnhealthyServices\":1260528380,\"maxPercentUnhealthyPartitionsPerService\":1945467900,\"maxPercentUnhealthyReplicasPerPartition\":1549614368}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"plwckbas\",\"healthCheckStableDuration\":\"ypnddhsgcb\",\"healthCheckRetryTimeout\":\"cph\",\"upgradeTimeout\":\"jkot\",\"upgradeDomainTimeout\":\"nqgoulzndli\"},\"instanceCloseDelayDuration\":6280199240757284109,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":5618896848529183780,\"recreateApplication\":true}")
            .toObject(ApplicationUpgradePolicy.class);
        Assertions.assertEquals(true, model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(559319579, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1369496360,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(900623903,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1946901948,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1932583113,
            model.applicationHealthPolicy().serviceTypeHealthPolicyMap().get("cukjf").maxPercentUnhealthyServices());
        Assertions.assertEquals(1438714337,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cukjf")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1204354379,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cukjf")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, model.forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("plwckbas", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ypnddhsgcb", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("cph", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("jkot", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("nqgoulzndli", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(6280199240757284109L, model.instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradeMode());
        Assertions.assertEquals(5618896848529183780L, model.upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.recreateApplication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationUpgradePolicy model = new ApplicationUpgradePolicy()
            .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                .withMaxPercentUnhealthyDeployedApplications(559319579)
                .withDefaultServiceTypeHealthPolicy(
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1369496360)
                        .withMaxPercentUnhealthyPartitionsPerService(900623903)
                        .withMaxPercentUnhealthyReplicasPerPartition(1946901948))
                .withServiceTypeHealthPolicyMap(mapOf("cukjf",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1932583113)
                        .withMaxPercentUnhealthyPartitionsPerService(1438714337)
                        .withMaxPercentUnhealthyReplicasPerPartition(1204354379),
                    "w",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1260528380)
                        .withMaxPercentUnhealthyPartitionsPerService(1945467900)
                        .withMaxPercentUnhealthyReplicasPerPartition(1549614368))))
            .withForceRestart(true)
            .withRollingUpgradeMonitoringPolicy(
                new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.ROLLBACK)
                    .withHealthCheckWaitDuration("plwckbas")
                    .withHealthCheckStableDuration("ypnddhsgcb")
                    .withHealthCheckRetryTimeout("cph")
                    .withUpgradeTimeout("jkot")
                    .withUpgradeDomainTimeout("nqgoulzndli"))
            .withInstanceCloseDelayDuration(6280199240757284109L)
            .withUpgradeMode(RollingUpgradeMode.MONITORED)
            .withUpgradeReplicaSetCheckTimeout(5618896848529183780L)
            .withRecreateApplication(true);
        model = BinaryData.fromObject(model).toObject(ApplicationUpgradePolicy.class);
        Assertions.assertEquals(true, model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(559319579, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1369496360,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(900623903,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1946901948,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1932583113,
            model.applicationHealthPolicy().serviceTypeHealthPolicyMap().get("cukjf").maxPercentUnhealthyServices());
        Assertions.assertEquals(1438714337,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cukjf")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1204354379,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cukjf")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, model.forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("plwckbas", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ypnddhsgcb", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("cph", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("jkot", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("nqgoulzndli", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(6280199240757284109L, model.instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradeMode());
        Assertions.assertEquals(5618896848529183780L, model.upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.recreateApplication());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
