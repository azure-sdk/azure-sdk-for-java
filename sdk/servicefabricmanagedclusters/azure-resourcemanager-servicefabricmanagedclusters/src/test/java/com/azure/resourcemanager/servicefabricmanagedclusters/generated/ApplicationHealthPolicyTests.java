// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationHealthPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationHealthPolicy model = BinaryData.fromString(
            "{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":863181749,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1288567604,\"maxPercentUnhealthyPartitionsPerService\":1464742216,\"maxPercentUnhealthyReplicasPerPartition\":1720928556},\"serviceTypeHealthPolicyMap\":{\"bzqqedqytbciq\":{\"maxPercentUnhealthyServices\":1093417192,\"maxPercentUnhealthyPartitionsPerService\":954363887,\"maxPercentUnhealthyReplicasPerPartition\":384573586}}}")
            .toObject(ApplicationHealthPolicy.class);
        Assertions.assertEquals(true, model.considerWarningAsError());
        Assertions.assertEquals(863181749, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1288567604, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1464742216,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1720928556,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1093417192,
            model.serviceTypeHealthPolicyMap().get("bzqqedqytbciq").maxPercentUnhealthyServices());
        Assertions.assertEquals(954363887,
            model.serviceTypeHealthPolicyMap().get("bzqqedqytbciq").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(384573586,
            model.serviceTypeHealthPolicyMap().get("bzqqedqytbciq").maxPercentUnhealthyReplicasPerPartition());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationHealthPolicy model = new ApplicationHealthPolicy().withConsiderWarningAsError(true)
            .withMaxPercentUnhealthyDeployedApplications(863181749)
            .withDefaultServiceTypeHealthPolicy(
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1288567604)
                    .withMaxPercentUnhealthyPartitionsPerService(1464742216)
                    .withMaxPercentUnhealthyReplicasPerPartition(1720928556))
            .withServiceTypeHealthPolicyMap(mapOf("bzqqedqytbciq",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1093417192)
                    .withMaxPercentUnhealthyPartitionsPerService(954363887)
                    .withMaxPercentUnhealthyReplicasPerPartition(384573586)));
        model = BinaryData.fromObject(model).toObject(ApplicationHealthPolicy.class);
        Assertions.assertEquals(true, model.considerWarningAsError());
        Assertions.assertEquals(863181749, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1288567604, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1464742216,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1720928556,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1093417192,
            model.serviceTypeHealthPolicyMap().get("bzqqedqytbciq").maxPercentUnhealthyServices());
        Assertions.assertEquals(954363887,
            model.serviceTypeHealthPolicyMap().get("bzqqedqytbciq").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(384573586,
            model.serviceTypeHealthPolicyMap().get("bzqqedqytbciq").maxPercentUnhealthyReplicasPerPartition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
