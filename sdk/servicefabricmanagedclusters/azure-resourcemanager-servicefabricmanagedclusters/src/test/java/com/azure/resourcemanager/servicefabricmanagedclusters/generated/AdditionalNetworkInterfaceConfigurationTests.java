// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IPConfigurationPublicIPAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIPAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIPAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AdditionalNetworkInterfaceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model = BinaryData.fromString(
            "{\"name\":\"qvpsvuoymg\",\"enableAcceleratedNetworking\":true,\"dscpConfiguration\":{\"id\":\"ezrypql\"},\"ipConfigurations\":[{\"name\":\"eokerqwkyhkobopg\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"owepbqpcrfkb\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"njv\"},{\"id\":\"wxlp\"},{\"id\":\"kftnkhtjsyin\"},{\"id\":\"fq\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"dhtmdvypgikd\"}],\"subnet\":{\"id\":\"ywkbirryuzhlhkjo\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"qaatjinrv\",\"ipTags\":[{\"ipTagType\":\"pmfi\",\"tag\":\"bfggjioolvr\"},{\"ipTagType\":\"x\",\"tag\":\"v\"},{\"ipTagType\":\"kkgll\",\"tag\":\"wjygvjayvblmhvk\"}],\"publicIPAddressVersion\":\"IPv6\"}}]}")
            .toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("qvpsvuoymg", model.name());
        Assertions.assertTrue(model.enableAcceleratedNetworking());
        Assertions.assertEquals("ezrypql", model.dscpConfiguration().id());
        Assertions.assertEquals("eokerqwkyhkobopg", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("owepbqpcrfkb",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("njv", model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("dhtmdvypgikd",
            model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("ywkbirryuzhlhkjo", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV6,
            model.ipConfigurations().get(0).privateIPAddressVersion());
        Assertions.assertEquals("qaatjinrv", model.ipConfigurations().get(0).publicIPAddressConfiguration().name());
        Assertions.assertEquals("pmfi",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("bfggjioolvr",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.ipConfigurations().get(0).publicIPAddressConfiguration().publicIPAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model
            = new AdditionalNetworkInterfaceConfiguration().withName("qvpsvuoymg")
                .withEnableAcceleratedNetworking(true)
                .withDscpConfiguration(new SubResource().withId("ezrypql"))
                .withIpConfigurations(Arrays.asList(new IpConfiguration().withName("eokerqwkyhkobopg")
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("owepbqpcrfkb")))
                    .withLoadBalancerBackendAddressPools(
                        Arrays.asList(new SubResource().withId("njv"), new SubResource().withId("wxlp"),
                            new SubResource().withId("kftnkhtjsyin"), new SubResource().withId("fq")))
                    .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("dhtmdvypgikd")))
                    .withSubnet(new SubResource().withId("ywkbirryuzhlhkjo"))
                    .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV6)
                    .withPublicIPAddressConfiguration(
                        new IPConfigurationPublicIPAddressConfiguration().withName("qaatjinrv")
                            .withIpTags(Arrays.asList(new IpTag().withIpTagType("pmfi").withTag("bfggjioolvr"),
                                new IpTag().withIpTagType("x").withTag("v"),
                                new IpTag().withIpTagType("kkgll").withTag("wjygvjayvblmhvk")))
                            .withPublicIPAddressVersion(PublicIPAddressVersion.IPV6))));
        model = BinaryData.fromObject(model).toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("qvpsvuoymg", model.name());
        Assertions.assertTrue(model.enableAcceleratedNetworking());
        Assertions.assertEquals("ezrypql", model.dscpConfiguration().id());
        Assertions.assertEquals("eokerqwkyhkobopg", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("owepbqpcrfkb",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("njv", model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("dhtmdvypgikd",
            model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("ywkbirryuzhlhkjo", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV6,
            model.ipConfigurations().get(0).privateIPAddressVersion());
        Assertions.assertEquals("qaatjinrv", model.ipConfigurations().get(0).publicIPAddressConfiguration().name());
        Assertions.assertEquals("pmfi",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("bfggjioolvr",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.ipConfigurations().get(0).publicIPAddressConfiguration().publicIPAddressVersion());
    }
}
