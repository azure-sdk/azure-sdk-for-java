// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IPConfigurationPublicIPAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIPAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIPAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AdditionalNetworkInterfaceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model = BinaryData.fromString(
            "{\"name\":\"ool\",\"enableAcceleratedNetworking\":true,\"dscpConfiguration\":{\"id\":\"v\"},\"ipConfigurations\":[{\"name\":\"k\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"wjygvjayvblmhvk\"},{\"id\":\"hbxvvyhgsopbyrqu\"},{\"id\":\"g\"},{\"id\":\"vwz\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"lmctlpd\"},{\"id\":\"itvgbmhrixkwm\"},{\"id\":\"jejveg\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"nai\"},{\"id\":\"xccbdreaxhcex\"},{\"id\":\"rvqahqkghtpwi\"},{\"id\":\"hyjsvfycx\"}],\"subnet\":{\"id\":\"voowvr\"},\"privateIPAddressVersion\":\"IPv4\",\"publicIPAddressConfiguration\":{\"name\":\"jqppyostronzmy\",\"ipTags\":[{\"ipTagType\":\"ipn\",\"tag\":\"xkmcwaekrrjre\"},{\"ipTagType\":\"fxtsgum\",\"tag\":\"jglikkxwslolb\"}],\"publicIPAddressVersion\":\"IPv4\"}},{\"name\":\"uzlm\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"fktgplc\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"xeznoi\"},{\"id\":\"rnjwmw\"},{\"id\":\"nbsazejjoqkag\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ttaugzxnfaazp\"},{\"id\":\"tnkdmkqj\"}],\"subnet\":{\"id\":\"uenvrkp\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"ibreb\",\"ipTags\":[{\"ipTagType\":\"ysjkixqtnqttez\",\"tag\":\"wfff\"},{\"ipTagType\":\"akpjpqqmtedlt\",\"tag\":\"mjihyeozphv\"},{\"ipTagType\":\"auyqncygupkv\",\"tag\":\"p\"},{\"ipTagType\":\"dscwxqupevzhf\",\"tag\":\"totxhojujb\"}],\"publicIPAddressVersion\":\"IPv6\"}}]}")
            .toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("ool", model.name());
        Assertions.assertTrue(model.enableAcceleratedNetworking());
        Assertions.assertEquals("v", model.dscpConfiguration().id());
        Assertions.assertEquals("k", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("wjygvjayvblmhvk",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("lmctlpd",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("nai", model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("voowvr", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV4,
            model.ipConfigurations().get(0).privateIPAddressVersion());
        Assertions.assertEquals("jqppyostronzmy",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().name());
        Assertions.assertEquals("ipn",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("xkmcwaekrrjre",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV4,
            model.ipConfigurations().get(0).publicIPAddressConfiguration().publicIPAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model = new AdditionalNetworkInterfaceConfiguration().withName("ool")
            .withEnableAcceleratedNetworking(true)
            .withDscpConfiguration(new SubResource().withId("v"))
            .withIpConfigurations(Arrays.asList(
                new IpConfiguration().withName("k")
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(
                        new SubResource().withId("wjygvjayvblmhvk"), new SubResource().withId("hbxvvyhgsopbyrqu"),
                        new SubResource().withId("g"), new SubResource().withId("vwz")))
                    .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("lmctlpd"),
                        new SubResource().withId("itvgbmhrixkwm"), new SubResource().withId("jejveg")))
                    .withLoadBalancerInboundNatPools(
                        Arrays.asList(new SubResource().withId("nai"), new SubResource().withId("xccbdreaxhcex"),
                            new SubResource().withId("rvqahqkghtpwi"), new SubResource().withId("hyjsvfycx")))
                    .withSubnet(new SubResource().withId("voowvr"))
                    .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV4)
                    .withPublicIPAddressConfiguration(
                        new IPConfigurationPublicIPAddressConfiguration().withName("jqppyostronzmy")
                            .withIpTags(Arrays.asList(new IpTag().withIpTagType("ipn").withTag("xkmcwaekrrjre"),
                                new IpTag().withIpTagType("fxtsgum").withTag("jglikkxwslolb")))
                            .withPublicIPAddressVersion(PublicIPAddressVersion.IPV4)),
                new IpConfiguration().withName("uzlm")
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("fktgplc")))
                    .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("xeznoi"),
                        new SubResource().withId("rnjwmw"), new SubResource().withId("nbsazejjoqkag")))
                    .withLoadBalancerInboundNatPools(
                        Arrays.asList(new SubResource().withId("ttaugzxnfaazp"), new SubResource().withId("tnkdmkqj")))
                    .withSubnet(new SubResource().withId("uenvrkp"))
                    .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV6)
                    .withPublicIPAddressConfiguration(
                        new IPConfigurationPublicIPAddressConfiguration().withName("ibreb")
                            .withIpTags(Arrays.asList(new IpTag().withIpTagType("ysjkixqtnqttez").withTag("wfff"),
                                new IpTag().withIpTagType("akpjpqqmtedlt").withTag("mjihyeozphv"),
                                new IpTag().withIpTagType("auyqncygupkv").withTag("p"),
                                new IpTag().withIpTagType("dscwxqupevzhf").withTag("totxhojujb")))
                            .withPublicIPAddressVersion(PublicIPAddressVersion.IPV6))));
        model = BinaryData.fromObject(model).toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("ool", model.name());
        Assertions.assertTrue(model.enableAcceleratedNetworking());
        Assertions.assertEquals("v", model.dscpConfiguration().id());
        Assertions.assertEquals("k", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("wjygvjayvblmhvk",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("lmctlpd",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("nai", model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("voowvr", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV4,
            model.ipConfigurations().get(0).privateIPAddressVersion());
        Assertions.assertEquals("jqppyostronzmy",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().name());
        Assertions.assertEquals("ipn",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("xkmcwaekrrjre",
            model.ipConfigurations().get(0).publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV4,
            model.ipConfigurations().get(0).publicIPAddressConfiguration().publicIPAddressVersion());
    }
}
