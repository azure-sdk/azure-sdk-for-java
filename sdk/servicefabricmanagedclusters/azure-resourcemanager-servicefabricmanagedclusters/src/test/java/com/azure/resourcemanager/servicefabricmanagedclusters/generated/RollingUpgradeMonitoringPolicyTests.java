// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import org.junit.jupiter.api.Assertions;

public final class RollingUpgradeMonitoringPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RollingUpgradeMonitoringPolicy model = BinaryData.fromString(
            "{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"mmnkzsmodmgl\",\"healthCheckStableDuration\":\"ugpbkw\",\"healthCheckRetryTimeout\":\"mutduqktaps\",\"upgradeTimeout\":\"wgcu\",\"upgradeDomainTimeout\":\"rtumkdosvq\"}")
            .toObject(RollingUpgradeMonitoringPolicy.class);
        Assertions.assertEquals(FailureAction.MANUAL, model.failureAction());
        Assertions.assertEquals("mmnkzsmodmgl", model.healthCheckWaitDuration());
        Assertions.assertEquals("ugpbkw", model.healthCheckStableDuration());
        Assertions.assertEquals("mutduqktaps", model.healthCheckRetryTimeout());
        Assertions.assertEquals("wgcu", model.upgradeTimeout());
        Assertions.assertEquals("rtumkdosvq", model.upgradeDomainTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RollingUpgradeMonitoringPolicy model
            = new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                .withHealthCheckWaitDuration("mmnkzsmodmgl")
                .withHealthCheckStableDuration("ugpbkw")
                .withHealthCheckRetryTimeout("mutduqktaps")
                .withUpgradeTimeout("wgcu")
                .withUpgradeDomainTimeout("rtumkdosvq");
        model = BinaryData.fromObject(model).toObject(RollingUpgradeMonitoringPolicy.class);
        Assertions.assertEquals(FailureAction.MANUAL, model.failureAction());
        Assertions.assertEquals("mmnkzsmodmgl", model.healthCheckWaitDuration());
        Assertions.assertEquals("ugpbkw", model.healthCheckStableDuration());
        Assertions.assertEquals("mutduqktaps", model.healthCheckRetryTimeout());
        Assertions.assertEquals("wgcu", model.upgradeTimeout());
        Assertions.assertEquals("rtumkdosvq", model.upgradeDomainTimeout());
    }
}
