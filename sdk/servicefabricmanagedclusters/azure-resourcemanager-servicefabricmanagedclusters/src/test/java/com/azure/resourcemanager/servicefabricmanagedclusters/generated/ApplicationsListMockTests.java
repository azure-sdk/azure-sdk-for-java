// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"ewzcjznmwcp\",\"version\":\"uaadraufactkahzo\",\"parameters\":{\"iuxxpshneekulfg\":\"j\",\"d\":\"lqubkwdlen\",\"pjuohminyfl\":\"utujba\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":1272205160,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":875787207,\"maxPercentUnhealthyPartitionsPerService\":1535649405,\"maxPercentUnhealthyReplicasPerPartition\":1769195626},\"serviceTypeHealthPolicyMap\":{\"w\":{\"maxPercentUnhealthyServices\":1696480260,\"maxPercentUnhealthyPartitionsPerService\":1862028450,\"maxPercentUnhealthyReplicasPerPartition\":937766926},\"xpgpq\":{\"maxPercentUnhealthyServices\":1040061881,\"maxPercentUnhealthyPartitionsPerService\":1194335789,\"maxPercentUnhealthyReplicasPerPartition\":1917702529}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"epn\",\"healthCheckStableDuration\":\"bjcrxgibbdaxco\",\"healthCheckRetryTimeout\":\"fozauorsuk\",\"upgradeTimeout\":\"kwbqplhlvnuu\",\"upgradeDomainTimeout\":\"pzlrphw\"},\"instanceCloseDelayDuration\":1586614318517999656,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":5542031390718229960,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"vmnnrw\",\"principalId\":\"biorktal\"},{\"name\":\"wjhhgdnhxmsivf\",\"principalId\":\"miloxggdufiqndie\"},{\"name\":\"zaofjchvcyy\",\"principalId\":\"s\"},{\"name\":\"gdotcubiipuipwo\",\"principalId\":\"onmacjekniz\"}]},\"tags\":{\"gmblrri\":\"vcimpev\"},\"identity\":{\"principalId\":\"wdxsm\",\"tenantId\":\"cwrwfs\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"hjoxo\":{\"principalId\":\"szqujizdvoq\",\"clientId\":\"ibyowbblgyavutp\"},\"xkcgxxlxsffgcvi\":{\"principalId\":\"msksbp\",\"clientId\":\"lqol\"}}},\"location\":\"zdwlvwlyoupfgfb\",\"id\":\"ubdyhgk\",\"name\":\"minsgowzf\",\"type\":\"tsttktlahbq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ApplicationResource> response
            = manager.applications().list("mvvhmxtdrjfuta", "oe", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("vcimpev", response.iterator().next().tags().get("gmblrri"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("zdwlvwlyoupfgfb", response.iterator().next().location());
        Assertions.assertEquals("uaadraufactkahzo", response.iterator().next().version());
        Assertions.assertEquals("j", response.iterator().next().parameters().get("iuxxpshneekulfg"));
        Assertions
            .assertFalse(response.iterator().next().upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1272205160,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(875787207,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1535649405,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1769195626,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1696480260,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("w")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1862028450,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("w")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(937766926,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("w")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertFalse(response.iterator().next().upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("epn",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("bjcrxgibbdaxco",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("fozauorsuk",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("kwbqplhlvnuu",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("pzlrphw",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(1586614318517999656L,
            response.iterator().next().upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, response.iterator().next().upgradePolicy().upgradeMode());
        Assertions.assertEquals(5542031390718229960L,
            response.iterator().next().upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertTrue(response.iterator().next().upgradePolicy().recreateApplication());
        Assertions.assertEquals("vmnnrw", response.iterator().next().managedIdentities().get(0).name());
        Assertions.assertEquals("biorktal", response.iterator().next().managedIdentities().get(0).principalId());
    }
}
