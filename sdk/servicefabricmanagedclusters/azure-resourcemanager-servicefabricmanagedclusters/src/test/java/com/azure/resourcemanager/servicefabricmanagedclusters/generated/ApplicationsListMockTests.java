// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"cgxxlxs\",\"version\":\"gcvizqzdwlvwlyou\",\"parameters\":{\"sgow\":\"fbkjubdyhgkfmi\",\"lahb\":\"fttsttk\",\"qtgqqqxhrnxr\":\"actxtgzukxitm\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":2074998294,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":58328549,\"maxPercentUnhealthyPartitionsPerService\":449055657,\"maxPercentUnhealthyReplicasPerPartition\":1960010520},\"serviceTypeHealthPolicyMap\":{\"fvazivjlfrqttba\":{\"maxPercentUnhealthyServices\":2065255812,\"maxPercentUnhealthyPartitionsPerService\":744996388,\"maxPercentUnhealthyReplicasPerPartition\":1487761087}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"nwxyiop\",\"healthCheckStableDuration\":\"dkqqfkuvscxkd\",\"healthCheckRetryTimeout\":\"ligovibrxkpm\",\"upgradeTimeout\":\"oaz\",\"upgradeDomainTimeout\":\"ruocbgo\"},\"instanceCloseDelayDuration\":7064966884365247591,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":5142686726452135703,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"kvvjgslordilmyww\",\"principalId\":\"kgkxn\"},{\"name\":\"edabgyvudtjue\",\"principalId\":\"bcihxuuwhc\"},{\"name\":\"yxccyb\",\"principalId\":\"payakkud\"}]},\"tags\":{\"tcyohpfkyrk\":\"gwjplmag\",\"nwqjnoba\":\"bdgiogsjk\",\"egfnmntfpmvmemfn\":\"yhddvia\",\"lchpodbzevwrdn\":\"zdwvvbalxl\"},\"identity\":{\"principalId\":\"kuvsjcswsm\",\"tenantId\":\"tuluq\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"idfcxsspuunnoxyh\":{\"principalId\":\"er\",\"clientId\":\"pqbmfpjbab\"},\"mdjvlpj\":{\"principalId\":\"g\",\"clientId\":\"drihpfhoqcaaewda\"},\"xonbzoggculapz\":{\"principalId\":\"kzbrmsgeivsiy\",\"clientId\":\"kdncj\"},\"jlyjtlvofq\":{\"principalId\":\"rpgogtqxep\",\"clientId\":\"lbfu\"}}},\"location\":\"vfcibyfmowux\",\"id\":\"jpvd\",\"name\":\"xfzwi\",\"type\":\"vwzjbhyz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ApplicationResource> response
            = manager.applications().list("pi", "lqol", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gwjplmag", response.iterator().next().tags().get("tcyohpfkyrk"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("vfcibyfmowux", response.iterator().next().location());
        Assertions.assertEquals("gcvizqzdwlvwlyou", response.iterator().next().version());
        Assertions.assertEquals("fbkjubdyhgkfmi", response.iterator().next().parameters().get("sgow"));
        Assertions
            .assertTrue(response.iterator().next().upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(2074998294,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(58328549,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(449055657,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1960010520,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(2065255812,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("fvazivjlfrqttba")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(744996388,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("fvazivjlfrqttba")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1487761087,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("fvazivjlfrqttba")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertFalse(response.iterator().next().upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("nwxyiop",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("dkqqfkuvscxkd",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("ligovibrxkpm",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("oaz",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("ruocbgo",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(7064966884365247591L,
            response.iterator().next().upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO,
            response.iterator().next().upgradePolicy().upgradeMode());
        Assertions.assertEquals(5142686726452135703L,
            response.iterator().next().upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertFalse(response.iterator().next().upgradePolicy().recreateApplication());
        Assertions.assertEquals("kvvjgslordilmyww", response.iterator().next().managedIdentities().get(0).name());
        Assertions.assertEquals("kgkxn", response.iterator().next().managedIdentities().get(0).principalId());
    }
}
