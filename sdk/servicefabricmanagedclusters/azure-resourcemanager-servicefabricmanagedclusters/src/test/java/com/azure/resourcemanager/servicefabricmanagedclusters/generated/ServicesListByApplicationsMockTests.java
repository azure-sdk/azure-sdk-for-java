// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesListByApplicationsMockTests {
    @Test
    public void testListByApplications() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"svecuijpxtxs\",\"serviceTypeName\":\"wprtu\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"wddji\",\"placementConstraints\":\"bxv\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"v\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"eexavo\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"fglecdmdqbwp\"}],\"serviceLoadMetrics\":[{\"name\":\"tgsfja\",\"weight\":\"Medium\",\"primaryDefaultLoad\":1318047091,\"secondaryDefaultLoad\":901001519,\"defaultLoad\":413815833}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"High\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"gzrcxfailcfxwmdb\":\"sirudhzmmesckdlp\",\"lnacgcc\":\"xdfgsftufqobr\"},\"location\":\"nhxk\",\"id\":\"v\",\"name\":\"tnrzvuljra\",\"type\":\"eranokqgukkjqnv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ServiceResource> response = manager.services()
            .listByApplications("ymerteeammxq", "ekkkzd", "rtkgdojbmxvavref", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bxv", response.iterator().next().properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.iterator().next().properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("v", response.iterator().next().properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("tgsfja", response.iterator().next().properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM,
            response.iterator().next().properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1318047091,
            response.iterator().next().properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(901001519,
            response.iterator().next().properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(413815833,
            response.iterator().next().properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.HIGH, response.iterator().next().properties().defaultMoveCost());
        Assertions.assertEquals("wprtu", response.iterator().next().properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.iterator().next().properties().servicePackageActivationMode());
        Assertions.assertEquals("wddji", response.iterator().next().properties().serviceDnsName());
        Assertions.assertEquals("sirudhzmmesckdlp", response.iterator().next().tags().get("gzrcxfailcfxwmdb"));
        Assertions.assertEquals("nhxk", response.iterator().next().location());
    }
}
