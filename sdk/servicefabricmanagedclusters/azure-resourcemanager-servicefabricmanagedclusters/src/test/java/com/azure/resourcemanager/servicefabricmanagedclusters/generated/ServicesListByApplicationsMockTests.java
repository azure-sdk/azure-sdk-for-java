// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesListByApplicationsMockTests {
    @Test
    public void testListByApplications() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"zexrxzbujrt\",\"serviceTypeName\":\"hqvwrevkhgnlnzon\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"i\",\"placementConstraints\":\"wncvjtszcofiz\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"hgbjkvrelje\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"urvzmlovuanashc\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"pmjerbdkelvidiz\"}],\"serviceLoadMetrics\":[{\"name\":\"db\",\"weight\":\"Low\",\"primaryDefaultLoad\":1920486563,\"secondaryDefaultLoad\":1331407717,\"defaultLoad\":1408228263},{\"name\":\"gnwncypuuwwlt\",\"weight\":\"Medium\",\"primaryDefaultLoad\":1798680046,\"secondaryDefaultLoad\":1231214883,\"defaultLoad\":1577867001},{\"name\":\"keifzzhmkdasv\",\"weight\":\"Medium\",\"primaryDefaultLoad\":1940706470,\"secondaryDefaultLoad\":432756215,\"defaultLoad\":1487873625},{\"name\":\"chxgs\",\"weight\":\"Medium\",\"primaryDefaultLoad\":96639942,\"secondaryDefaultLoad\":477372699,\"defaultLoad\":82251270}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Low\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"cqpbtuo\":\"fhfovv\",\"bbelawumuaslzk\":\"xesz\",\"mdr\":\"rrwoycqucwyhahn\"},\"location\":\"wuhpsvfuur\",\"id\":\"lwexxwl\",\"name\":\"lniexz\",\"type\":\"rzpgep\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ServiceResource> response = manager.services()
            .listByApplications("dlcgqlsismjqfr", "dgamquhiosrsj", "ivfcdisyirnx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wncvjtszcofiz", response.iterator().next().properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.iterator().next().properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("hgbjkvrelje",
            response.iterator().next().properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("db", response.iterator().next().properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW,
            response.iterator().next().properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1920486563,
            response.iterator().next().properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1331407717,
            response.iterator().next().properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1408228263,
            response.iterator().next().properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, response.iterator().next().properties().defaultMoveCost());
        Assertions.assertEquals("hqvwrevkhgnlnzon", response.iterator().next().properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.iterator().next().properties().servicePackageActivationMode());
        Assertions.assertEquals("i", response.iterator().next().properties().serviceDnsName());
        Assertions.assertEquals("fhfovv", response.iterator().next().tags().get("cqpbtuo"));
        Assertions.assertEquals("wuhpsvfuur", response.iterator().next().location());
    }
}
