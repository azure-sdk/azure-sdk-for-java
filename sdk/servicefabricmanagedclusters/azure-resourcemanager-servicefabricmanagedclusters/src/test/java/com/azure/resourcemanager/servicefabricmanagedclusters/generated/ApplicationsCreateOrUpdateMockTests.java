// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"version\":\"nbzydvfvfcj\",\"parameters\":{\"is\":\"oisrvhmgorffu\",\"btgn\":\"vwmzhwplefaxvxil\",\"zqlqhyc\":\"nzeyqxtjj\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1258622098,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":817001941,\"maxPercentUnhealthyPartitionsPerService\":1896221438,\"maxPercentUnhealthyReplicasPerPartition\":996464751},\"serviceTypeHealthPolicyMap\":{\"eknlra\":{\"maxPercentUnhealthyServices\":45499984,\"maxPercentUnhealthyPartitionsPerService\":685965708,\"maxPercentUnhealthyReplicasPerPartition\":1327302833}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"iuagydwqfbylyrfg\",\"healthCheckStableDuration\":\"agt\",\"healthCheckRetryTimeout\":\"ojocqwogf\",\"upgradeTimeout\":\"zjvusfzldmo\",\"upgradeDomainTimeout\":\"uxylfsbtkadpy\"},\"instanceCloseDelayDuration\":1856181923182418144,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":1415996361573968952,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"qctojcmisof\",\"principalId\":\"eypefojyqd\"},{\"name\":\"cuplcplcwkhih\",\"principalId\":\"hlhzdsqtzbsrgno\"},{\"name\":\"cjhfgmvecactxmw\",\"principalId\":\"teyowclu\"},{\"name\":\"ovekqvgqouwi\",\"principalId\":\"zmpjwyiv\"}]},\"tags\":{\"cvhrfsp\":\"f\",\"kvyklxubyjaffmm\":\"uagrttikteusqc\",\"qcuubgqibrta\":\"bl\"},\"identity\":{\"principalId\":\"tttwgdslqxih\",\"tenantId\":\"moo\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"etoge\":{\"principalId\":\"pxiutc\",\"clientId\":\"pzhyr\"},\"kkzjcjbtrga\":{\"principalId\":\"oxslh\",\"clientId\":\"hlabrq\"},\"toqbeitpkxztmoob\":{\"principalId\":\"vvib\",\"clientId\":\"jj\"},\"yhohujswtwkozzwc\":{\"principalId\":\"ft\",\"clientId\":\"gfcwqmpimaqxzhem\"}}},\"location\":\"kb\",\"id\":\"pfajnjwltlwtjj\",\"name\":\"uktalhsnvkcdmxz\",\"type\":\"poaimlnwiaaomyl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApplicationResource response = manager.applications()
            .define("eqvldspast")
            .withExistingManagedCluster("xjrk", "mbtrnegvmnvu")
            .withRegion("oudaspavehhrvk")
            .withTags(mapOf("uyav", "vfonkphhqyikvyl"))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("mtk", new UserAssignedIdentity(), "frbbc", new UserAssignedIdentity(), "dcnifmz",
                        new UserAssignedIdentity(), "khocxvdfffwaf", new UserAssignedIdentity())))
            .withVersion("ilozapeewchpxlk")
            .withParameters(mapOf("vu", "uziycsl", "gzulwmmrqzzr", "uztcktyhjtqed", "vqeevtoep", "jvpglydzgk"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                    .withMaxPercentUnhealthyDeployedApplications(726969242)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(584463560)
                            .withMaxPercentUnhealthyPartitionsPerService(2045022432)
                            .withMaxPercentUnhealthyReplicasPerPartition(989782858))
                    .withServiceTypeHealthPolicyMap(mapOf("zvfvaawz",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(559055127)
                            .withMaxPercentUnhealthyPartitionsPerService(111539193)
                            .withMaxPercentUnhealthyReplicasPerPartition(1383258036),
                        "lgzurig",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1654754432)
                            .withMaxPercentUnhealthyPartitionsPerService(1921390640)
                            .withMaxPercentUnhealthyReplicasPerPartition(230826239),
                        "xndticokpvzmlqtm",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(60723986)
                            .withMaxPercentUnhealthyPartitionsPerService(1058037553)
                            .withMaxPercentUnhealthyReplicasPerPartition(335381913))))
                .withForceRestart(true)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("bf")
                        .withHealthCheckStableDuration("rclnpkc")
                        .withHealthCheckRetryTimeout("ayzri")
                        .withUpgradeTimeout("khyawfvjlboxqv")
                        .withUpgradeDomainTimeout("jlmxhomdynhd"))
                .withInstanceCloseDelayDuration(2742511706808371729L)
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                .withUpgradeReplicaSetCheckTimeout(7859433782987628678L)
                .withRecreateApplication(true))
            .withManagedIdentities(
                Arrays.asList(new ApplicationUserAssignedIdentity().withName("zptjazysd").withPrincipalId("hezwwvaiq")))
            .create();

        Assertions.assertEquals("f", response.tags().get("cvhrfsp"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("kb", response.location());
        Assertions.assertEquals("nbzydvfvfcj", response.version());
        Assertions.assertEquals("oisrvhmgorffu", response.parameters().get("is"));
        Assertions.assertTrue(response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1258622098,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(817001941,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1896221438,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(996464751,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(45499984,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("eknlra")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(685965708,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("eknlra")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1327302833,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("eknlra")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertTrue(response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("iuagydwqfbylyrfg",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("agt",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("ojocqwogf",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("zjvusfzldmo",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("uxylfsbtkadpy",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(1856181923182418144L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(1415996361573968952L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertTrue(response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("qctojcmisof", response.managedIdentities().get(0).name());
        Assertions.assertEquals("eypefojyqd", response.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
