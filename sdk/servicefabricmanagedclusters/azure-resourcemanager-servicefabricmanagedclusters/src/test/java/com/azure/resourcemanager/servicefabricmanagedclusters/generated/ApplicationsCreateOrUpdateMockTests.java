// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServicefabricmanagedclustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"version\":\"iivwzjbhyzsxjrka\",\"parameters\":{\"uqeqv\":\"rnegvmn\",\"est\":\"dspastjbkkdmfl\",\"ilozapeewchpxlk\":\"jlxr\",\"ziycslevufuztck\":\"wk\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":717163299,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":844620276,\"maxPercentUnhealthyPartitionsPerService\":1558169297,\"maxPercentUnhealthyReplicasPerPartition\":1336110134},\"serviceTypeHealthPolicyMap\":{\"mmrqz\":{\"maxPercentUnhealthyServices\":950056847,\"maxPercentUnhealthyPartitionsPerService\":923449348,\"maxPercentUnhealthyReplicasPerPartition\":1199003595},\"vpglydz\":{\"maxPercentUnhealthyServices\":401684399,\"maxPercentUnhealthyPartitionsPerService\":2097189339,\"maxPercentUnhealthyReplicasPerPartition\":360309363},\"qeevt\":{\"maxPercentUnhealthyServices\":928156540,\"maxPercentUnhealthyPartitionsPerService\":1736841336,\"maxPercentUnhealthyReplicasPerPartition\":255591451},\"yutnwytpzdmov\":{\"maxPercentUnhealthyServices\":800770493,\"maxPercentUnhealthyPartitionsPerService\":1014603209,\"maxPercentUnhealthyReplicasPerPartition\":254109783}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"awzqadfl\",\"healthCheckStableDuration\":\"z\",\"healthCheckRetryTimeout\":\"riglaec\",\"upgradeTimeout\":\"ndtic\",\"upgradeDomainTimeout\":\"kpvzmlq\"},\"instanceCloseDelayDuration\":1772635066957823519,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":1962664267869044370,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"npkc\",\"principalId\":\"ayzri\"},{\"name\":\"khyawfvjlboxqv\",\"principalId\":\"jlmxhomdynhd\"}]},\"tags\":{\"ysdzhez\":\"gumbnraauzzptja\"},\"identity\":{\"principalId\":\"aiqyuvvfo\",\"tenantId\":\"p\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"jfybvpoekrsgsgb\":{\"principalId\":\"vyl\",\"clientId\":\"yavluwmncstt\"},\"u\":{\"principalId\":\"uzqgnjdgkynsc\",\"clientId\":\"qhzvhxnkomt\"},\"hihfrbbcevqagtlt\":{\"principalId\":\"tppn\",\"clientId\":\"xz\"}}},\"location\":\"lfkqojpy\",\"id\":\"gtrd\",\"name\":\"nifmzzsdymbrnysu\",\"type\":\"m\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServicefabricmanagedclustersManager manager = ServicefabricmanagedclustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApplicationResource response = manager.applications()
            .define("xrxc")
            .withExistingManagedCluster("ctxtgzukxi", "mmqtgqqqxhr")
            .withRegion("rpgogtqxep")
            .withTags(mapOf("n", "baiyhddviaceg", "dwvvba", "ntfpmvmemfnc", "db", "xlllchp", "vsjcswsmystuluqy",
                "evwrdnhfuk"))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("wdaomdjvlpjxxkzb", new UserAssignedIdentity(), "xonbzoggculapz",
                    new UserAssignedIdentity())))
            .withVersion("zfvazi")
            .withParameters(mapOf("yiopi", "frqttbajlkatnw"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                    .withMaxPercentUnhealthyDeployedApplications(613758841)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1078913468)
                            .withMaxPercentUnhealthyPartitionsPerService(901895840)
                            .withMaxPercentUnhealthyReplicasPerPartition(113648851))
                    .withServiceTypeHealthPolicyMap(mapOf("ligovibrxkpm",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(71458526)
                            .withMaxPercentUnhealthyPartitionsPerService(997116324)
                            .withMaxPercentUnhealthyReplicasPerPartition(1380729071),
                        "uruocbgo",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(577604583)
                            .withMaxPercentUnhealthyPartitionsPerService(839136561)
                            .withMaxPercentUnhealthyReplicasPerPartition(125599476))))
                .withForceRestart(false)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("oybfhjxakvvj")
                        .withHealthCheckStableDuration("slordilmyww")
                        .withHealthCheckRetryTimeout("kgkxn")
                        .withUpgradeTimeout("edabgyvudtjue")
                        .withUpgradeDomainTimeout("bcihxuuwhc"))
                .withInstanceCloseDelayDuration(8836529440782745734L)
                .withUpgradeMode(RollingUpgradeMode.MONITORED)
                .withUpgradeReplicaSetCheckTimeout(4169856614299930706L)
                .withRecreateApplication(false))
            .withManagedIdentities(
                Arrays.asList(new ApplicationUserAssignedIdentity().withName("kudzpxgwj").withPrincipalId("lma"),
                    new ApplicationUserAssignedIdentity().withName("stcyohpfkyrkdbd").withPrincipalId("iogsjkmnwq")))
            .create();

        Assertions.assertEquals("gumbnraauzzptja", response.tags().get("ysdzhez"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("lfkqojpy", response.location());
        Assertions.assertEquals("iivwzjbhyzsxjrka", response.version());
        Assertions.assertEquals("rnegvmn", response.parameters().get("uqeqv"));
        Assertions.assertTrue(response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(717163299,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(844620276,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1558169297,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1336110134,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(950056847,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("mmrqz")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(923449348,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("mmrqz")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1199003595,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("mmrqz")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertFalse(response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("awzqadfl",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("z",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("riglaec",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("ndtic", response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("kpvzmlq",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(1772635066957823519L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(1962664267869044370L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertFalse(response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("npkc", response.managedIdentities().get(0).name());
        Assertions.assertEquals("ayzri", response.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
