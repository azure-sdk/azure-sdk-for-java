// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResourcePropertiesBase;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourcePropertiesBaseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourcePropertiesBase model = BinaryData.fromString(
            "{\"placementConstraints\":\"qpsrknftguvri\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"wmdyvxqtay\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"ww\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"yqbexrmcqibycno\"}],\"serviceLoadMetrics\":[{\"name\":\"nmefqsgzvahapj\",\"weight\":\"Low\",\"primaryDefaultLoad\":407951655,\"secondaryDefaultLoad\":139980296,\"defaultLoad\":1827531187}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]}")
            .toObject(ServiceResourcePropertiesBase.class);
        Assertions.assertEquals("qpsrknftguvri", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("wmdyvxqtay", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("nmefqsgzvahapj", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(407951655, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(139980296, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1827531187, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourcePropertiesBase model = new ServiceResourcePropertiesBase()
            .withPlacementConstraints("qpsrknftguvri")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("wmdyvxqtay"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("ww"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY)
                    .withServiceName("yqbexrmcqibycno")))
            .withServiceLoadMetrics(Arrays.asList(new ServiceLoadMetric().withName("nmefqsgzvahapj")
                .withWeight(ServiceLoadMetricWeight.LOW)
                .withPrimaryDefaultLoad(407951655)
                .withSecondaryDefaultLoad(139980296)
                .withDefaultLoad(1827531187)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicy(), new ServicePlacementPolicy(), new ServicePlacementPolicy()))
            .withDefaultMoveCost(MoveCost.MEDIUM)
            .withScalingPolicies(Arrays.asList(
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger()),
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger())));
        model = BinaryData.fromObject(model).toObject(ServiceResourcePropertiesBase.class);
        Assertions.assertEquals("qpsrknftguvri", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("wmdyvxqtay", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("nmefqsgzvahapj", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(407951655, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(139980296, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1827531187, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
    }
}
