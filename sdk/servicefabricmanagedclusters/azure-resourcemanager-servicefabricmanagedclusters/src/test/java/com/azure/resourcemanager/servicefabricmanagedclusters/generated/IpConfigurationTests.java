// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IPConfigurationPublicIPAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIPAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIPAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfiguration model = BinaryData.fromString(
            "{\"name\":\"lmcuvhixb\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"w\"},{\"id\":\"lrcoolsttpki\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"nujrywvtyl\"},{\"id\":\"pncur\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"iithtywu\"}],\"subnet\":{\"id\":\"bihwqknfdnt\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"rdgoihxumw\",\"ipTags\":[{\"ipTagType\":\"ndz\",\"tag\":\"luudfdlwggytsb\"}],\"publicIPAddressVersion\":\"IPv6\"}}")
            .toObject(IpConfiguration.class);
        Assertions.assertEquals("lmcuvhixb", model.name());
        Assertions.assertEquals("w", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("nujrywvtyl", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("iithtywu", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("bihwqknfdnt", model.subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV6, model.privateIPAddressVersion());
        Assertions.assertEquals("rdgoihxumw", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals("ndz", model.publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("luudfdlwggytsb", model.publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.publicIPAddressConfiguration().publicIPAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfiguration model = new IpConfiguration().withName("lmcuvhixb")
            .withApplicationGatewayBackendAddressPools(
                Arrays.asList(new SubResource().withId("w"), new SubResource().withId("lrcoolsttpki")))
            .withLoadBalancerBackendAddressPools(
                Arrays.asList(new SubResource().withId("nujrywvtyl"), new SubResource().withId("pncur")))
            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("iithtywu")))
            .withSubnet(new SubResource().withId("bihwqknfdnt"))
            .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV6)
            .withPublicIPAddressConfiguration(new IPConfigurationPublicIPAddressConfiguration().withName("rdgoihxumw")
                .withIpTags(Arrays.asList(new IpTag().withIpTagType("ndz").withTag("luudfdlwggytsb")))
                .withPublicIPAddressVersion(PublicIPAddressVersion.IPV6));
        model = BinaryData.fromObject(model).toObject(IpConfiguration.class);
        Assertions.assertEquals("lmcuvhixb", model.name());
        Assertions.assertEquals("w", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("nujrywvtyl", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("iithtywu", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("bihwqknfdnt", model.subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV6, model.privateIPAddressVersion());
        Assertions.assertEquals("rdgoihxumw", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals("ndz", model.publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("luudfdlwggytsb", model.publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV6,
            model.publicIPAddressConfiguration().publicIPAddressVersion());
    }
}
