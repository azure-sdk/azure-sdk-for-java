// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IPConfigurationPublicIPAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIPAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIPAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfiguration model = BinaryData.fromString(
            "{\"name\":\"bxvvyhg\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"yrqufegxuvwz\"},{\"id\":\"nhlmctlpdng\"},{\"id\":\"vgbmhr\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"myijejvegr\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"aixexccbdreaxh\"}],\"subnet\":{\"id\":\"drrvqahqkght\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"nhyjsv\",\"ipTags\":[{\"ipTagType\":\"xzb\",\"tag\":\"voowvr\"},{\"ipTagType\":\"mtg\",\"tag\":\"qp\"},{\"ipTagType\":\"y\",\"tag\":\"s\"}],\"publicIPAddressVersion\":\"IPv4\"}}")
            .toObject(IpConfiguration.class);
        Assertions.assertEquals("bxvvyhg", model.name());
        Assertions.assertEquals("yrqufegxuvwz", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("myijejvegr", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("aixexccbdreaxh", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("drrvqahqkght", model.subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV6, model.privateIPAddressVersion());
        Assertions.assertEquals("nhyjsv", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals("xzb", model.publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("voowvr", model.publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV4,
            model.publicIPAddressConfiguration().publicIPAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfiguration model = new IpConfiguration().withName("bxvvyhg")
            .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("yrqufegxuvwz"),
                new SubResource().withId("nhlmctlpdng"), new SubResource().withId("vgbmhr")))
            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("myijejvegr")))
            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("aixexccbdreaxh")))
            .withSubnet(new SubResource().withId("drrvqahqkght"))
            .withPrivateIPAddressVersion(PrivateIPAddressVersion.IPV6)
            .withPublicIPAddressConfiguration(new IPConfigurationPublicIPAddressConfiguration().withName("nhyjsv")
                .withIpTags(Arrays.asList(new IpTag().withIpTagType("xzb").withTag("voowvr"),
                    new IpTag().withIpTagType("mtg").withTag("qp"), new IpTag().withIpTagType("y").withTag("s")))
                .withPublicIPAddressVersion(PublicIPAddressVersion.IPV4));
        model = BinaryData.fromObject(model).toObject(IpConfiguration.class);
        Assertions.assertEquals("bxvvyhg", model.name());
        Assertions.assertEquals("yrqufegxuvwz", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("myijejvegr", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("aixexccbdreaxh", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("drrvqahqkght", model.subnet().id());
        Assertions.assertEquals(PrivateIPAddressVersion.IPV6, model.privateIPAddressVersion());
        Assertions.assertEquals("nhyjsv", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals("xzb", model.publicIPAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("voowvr", model.publicIPAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIPAddressVersion.IPV4,
            model.publicIPAddressConfiguration().publicIPAddressVersion());
    }
}
