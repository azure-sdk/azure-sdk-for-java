// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceProperties;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"xzxtheo\",\"version\":\"si\",\"parameters\":{\"ciqihnhung\":\"v\",\"mvtzfkufub\":\"wjzrnfygxgisp\",\"fjaeq\":\"jofxqe\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":158340850,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":5903092,\"maxPercentUnhealthyPartitionsPerService\":91789189,\"maxPercentUnhealthyReplicasPerPartition\":1154409847},\"serviceTypeHealthPolicyMap\":{\"lngsntnbybkzgcwr\":{\"maxPercentUnhealthyServices\":928331689,\"maxPercentUnhealthyPartitionsPerService\":1952793695,\"maxPercentUnhealthyReplicasPerPartition\":2070892597},\"xwrljdouskcqvkoc\":{\"maxPercentUnhealthyServices\":306155012,\"maxPercentUnhealthyPartitionsPerService\":1161449621,\"maxPercentUnhealthyReplicasPerPartition\":967406306},\"kwt\":{\"maxPercentUnhealthyServices\":1419244382,\"maxPercentUnhealthyPartitionsPerService\":1066142513,\"maxPercentUnhealthyReplicasPerPartition\":1012894603}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"jbiksqrglssai\",\"healthCheckStableDuration\":\"qpjwnzlljfm\",\"healthCheckRetryTimeout\":\"pee\",\"upgradeTimeout\":\"vmgxsab\",\"upgradeDomainTimeout\":\"yqduujit\"},\"instanceCloseDelayDuration\":6217208352538226041,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":4308312091572651603,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"wpdappdsbdkv\",\"principalId\":\"rwjfe\"},{\"name\":\"snhu\",\"principalId\":\"je\"},{\"name\":\"tmrldhugjzzdatq\",\"principalId\":\"hocdgeab\"},{\"name\":\"gphuticndvka\",\"principalId\":\"zwyiftyhxhur\"}]}")
            .toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("si", model.version());
        Assertions.assertEquals("v", model.parameters().get("ciqihnhung"));
        Assertions.assertEquals(true, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(158340850,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(5903092,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(91789189,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1154409847,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(928331689,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("lngsntnbybkzgcwr")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1952793695,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("lngsntnbybkzgcwr")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2070892597,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("lngsntnbybkzgcwr")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("jbiksqrglssai",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("qpjwnzlljfm",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("pee",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("vmgxsab", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("yqduujit",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(6217208352538226041L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(4308312091572651603L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals("wpdappdsbdkv", model.managedIdentities().get(0).name());
        Assertions.assertEquals("rwjfe", model.managedIdentities().get(0).principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceProperties model
            = new ApplicationResourceProperties().withVersion("si")
                .withParameters(mapOf("ciqihnhung", "v", "mvtzfkufub", "wjzrnfygxgisp", "fjaeq", "jofxqe"))
                .withUpgradePolicy(
                    new ApplicationUpgradePolicy()
                        .withApplicationHealthPolicy(
                            new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                                .withMaxPercentUnhealthyDeployedApplications(158340850)
                                .withDefaultServiceTypeHealthPolicy(
                                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(5903092)
                                        .withMaxPercentUnhealthyPartitionsPerService(91789189)
                                        .withMaxPercentUnhealthyReplicasPerPartition(1154409847))
                                .withServiceTypeHealthPolicyMap(
                                    mapOf("lngsntnbybkzgcwr",
                                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(928331689)
                                            .withMaxPercentUnhealthyPartitionsPerService(1952793695)
                                            .withMaxPercentUnhealthyReplicasPerPartition(2070892597),
                                        "xwrljdouskcqvkoc",
                                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(306155012)
                                            .withMaxPercentUnhealthyPartitionsPerService(1161449621)
                                            .withMaxPercentUnhealthyReplicasPerPartition(967406306),
                                        "kwt",
                                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1419244382)
                                            .withMaxPercentUnhealthyPartitionsPerService(1066142513)
                                            .withMaxPercentUnhealthyReplicasPerPartition(1012894603))))
                        .withForceRestart(true)
                        .withRollingUpgradeMonitoringPolicy(
                            new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                                .withHealthCheckWaitDuration("jbiksqrglssai")
                                .withHealthCheckStableDuration("qpjwnzlljfm")
                                .withHealthCheckRetryTimeout("pee")
                                .withUpgradeTimeout("vmgxsab")
                                .withUpgradeDomainTimeout("yqduujit"))
                        .withInstanceCloseDelayDuration(6217208352538226041L)
                        .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                        .withUpgradeReplicaSetCheckTimeout(4308312091572651603L)
                        .withRecreateApplication(false))
                .withManagedIdentities(Arrays.asList(
                    new ApplicationUserAssignedIdentity().withName("wpdappdsbdkv").withPrincipalId("rwjfe"),
                    new ApplicationUserAssignedIdentity().withName("snhu").withPrincipalId("je"),
                    new ApplicationUserAssignedIdentity().withName("tmrldhugjzzdatq").withPrincipalId("hocdgeab"),
                    new ApplicationUserAssignedIdentity().withName("gphuticndvka").withPrincipalId("zwyiftyhxhur")));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("si", model.version());
        Assertions.assertEquals("v", model.parameters().get("ciqihnhung"));
        Assertions.assertEquals(true, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(158340850,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(5903092,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(91789189,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1154409847,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(928331689,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("lngsntnbybkzgcwr")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1952793695,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("lngsntnbybkzgcwr")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2070892597,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("lngsntnbybkzgcwr")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("jbiksqrglssai",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("qpjwnzlljfm",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("pee",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("vmgxsab", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("yqduujit",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(6217208352538226041L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(4308312091572651603L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals("wpdappdsbdkv", model.managedIdentities().get(0).name());
        Assertions.assertEquals("rwjfe", model.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
