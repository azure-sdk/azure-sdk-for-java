// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The public IP address configuration of the network interface.
 */
@Fluent
public final class IPConfigurationPublicIPAddressConfiguration
    implements JsonSerializable<IPConfigurationPublicIPAddressConfiguration> {
    /*
     * Name of the network interface.
     */
    private String name;

    /*
     * Specifies the list of IP tags associated with the public IP address.
     */
    private List<IpTag> ipTags;

    /*
     * Specifies whether the IP configuration's public IP is IPv4 or IPv6. Default is IPv4.
     */
    private PublicIPAddressVersion publicIPAddressVersion;

    /**
     * Creates an instance of IPConfigurationPublicIPAddressConfiguration class.
     */
    public IPConfigurationPublicIPAddressConfiguration() {
    }

    /**
     * Get the name property: Name of the network interface.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the network interface.
     * 
     * @param name the name value to set.
     * @return the IPConfigurationPublicIPAddressConfiguration object itself.
     */
    public IPConfigurationPublicIPAddressConfiguration withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the ipTags property: Specifies the list of IP tags associated with the public IP address.
     * 
     * @return the ipTags value.
     */
    public List<IpTag> ipTags() {
        return this.ipTags;
    }

    /**
     * Set the ipTags property: Specifies the list of IP tags associated with the public IP address.
     * 
     * @param ipTags the ipTags value to set.
     * @return the IPConfigurationPublicIPAddressConfiguration object itself.
     */
    public IPConfigurationPublicIPAddressConfiguration withIpTags(List<IpTag> ipTags) {
        this.ipTags = ipTags;
        return this;
    }

    /**
     * Get the publicIPAddressVersion property: Specifies whether the IP configuration's public IP is IPv4 or IPv6.
     * Default is IPv4.
     * 
     * @return the publicIPAddressVersion value.
     */
    public PublicIPAddressVersion publicIPAddressVersion() {
        return this.publicIPAddressVersion;
    }

    /**
     * Set the publicIPAddressVersion property: Specifies whether the IP configuration's public IP is IPv4 or IPv6.
     * Default is IPv4.
     * 
     * @param publicIPAddressVersion the publicIPAddressVersion value to set.
     * @return the IPConfigurationPublicIPAddressConfiguration object itself.
     */
    public IPConfigurationPublicIPAddressConfiguration
        withPublicIPAddressVersion(PublicIPAddressVersion publicIPAddressVersion) {
        this.publicIPAddressVersion = publicIPAddressVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model IPConfigurationPublicIPAddressConfiguration"));
        }
        if (ipTags() != null) {
            ipTags().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IPConfigurationPublicIPAddressConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("ipTags", this.ipTags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("publicIPAddressVersion",
            this.publicIPAddressVersion == null ? null : this.publicIPAddressVersion.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IPConfigurationPublicIPAddressConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IPConfigurationPublicIPAddressConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IPConfigurationPublicIPAddressConfiguration.
     */
    public static IPConfigurationPublicIPAddressConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IPConfigurationPublicIPAddressConfiguration deserializedIPConfigurationPublicIPAddressConfiguration
                = new IPConfigurationPublicIPAddressConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIPConfigurationPublicIPAddressConfiguration.name = reader.getString();
                } else if ("ipTags".equals(fieldName)) {
                    List<IpTag> ipTags = reader.readArray(reader1 -> IpTag.fromJson(reader1));
                    deserializedIPConfigurationPublicIPAddressConfiguration.ipTags = ipTags;
                } else if ("publicIPAddressVersion".equals(fieldName)) {
                    deserializedIPConfigurationPublicIPAddressConfiguration.publicIPAddressVersion
                        = PublicIPAddressVersion.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIPConfigurationPublicIPAddressConfiguration;
        });
    }
}
