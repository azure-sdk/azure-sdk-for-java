// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ErrorModelError;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Long running operation result.
 */
@Immutable
public final class LongRunningOperationResultInner implements JsonSerializable<LongRunningOperationResultInner> {
    /*
     * The name of the operation.
     */
    private String name;

    /*
     * The start time of the operation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the operation.
     */
    private OffsetDateTime endTime;

    /*
     * The completion percentage of the operation.
     */
    private Double percentComplete;

    /*
     * The status of the operation.
     */
    private String status;

    /*
     * The operation error.
     */
    private ErrorModelError error;

    /**
     * Creates an instance of LongRunningOperationResultInner class.
     */
    private LongRunningOperationResultInner() {
    }

    /**
     * Get the name property: The name of the operation.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the startTime property: The start time of the operation.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the operation.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the percentComplete property: The completion percentage of the operation.
     * 
     * @return the percentComplete value.
     */
    public Double percentComplete() {
        return this.percentComplete;
    }

    /**
     * Get the status property: The status of the operation.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the error property: The operation error.
     * 
     * @return the error value.
     */
    public ErrorModelError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeNumberField("percentComplete", this.percentComplete);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LongRunningOperationResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LongRunningOperationResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LongRunningOperationResultInner.
     */
    public static LongRunningOperationResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LongRunningOperationResultInner deserializedLongRunningOperationResultInner
                = new LongRunningOperationResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLongRunningOperationResultInner.name = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedLongRunningOperationResultInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedLongRunningOperationResultInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedLongRunningOperationResultInner.percentComplete
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("status".equals(fieldName)) {
                    deserializedLongRunningOperationResultInner.status = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedLongRunningOperationResultInner.error = ErrorModelError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLongRunningOperationResultInner;
        });
    }
}
