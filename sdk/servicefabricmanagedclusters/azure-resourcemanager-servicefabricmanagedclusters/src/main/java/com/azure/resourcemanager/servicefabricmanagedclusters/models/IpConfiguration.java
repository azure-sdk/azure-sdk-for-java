// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SubResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specifies an IP configuration of the network interface.
 */
@Fluent
public final class IpConfiguration implements JsonSerializable<IpConfiguration> {
    /*
     * Name of the network interface.
     */
    private String name;

    /*
     * Specifies an array of references to backend address pools of application gateways. A node type can reference
     * backend address pools of multiple application gateways. Multiple node types cannot use the same application
     * gateway.
     */
    private List<SubResource> applicationGatewayBackendAddressPools;

    /*
     * Specifies an array of references to backend address pools of load balancers. A node type can reference backend
     * address pools of one public and one internal load balancer. Multiple node types cannot use the same basic sku
     * load balancer.
     */
    private List<SubResource> loadBalancerBackendAddressPools;

    /*
     * Specifies an array of references to inbound Nat pools of the load balancers. A node type can reference inbound
     * nat pools of one public and one internal load balancer. Multiple node types cannot use the same basic sku load
     * balancer.
     */
    private List<SubResource> loadBalancerInboundNatPools;

    /*
     * Specifies the subnet of the network interface.
     */
    private SubResource subnet;

    /*
     * Specifies whether the IP configuration's private IP is IPv4 or IPv6. Default is IPv4.
     */
    private PrivateIPAddressVersion privateIPAddressVersion;

    /*
     * The public IP address configuration of the network interface.
     */
    private IPConfigurationPublicIPAddressConfiguration publicIPAddressConfiguration;

    /**
     * Creates an instance of IpConfiguration class.
     */
    public IpConfiguration() {
    }

    /**
     * Get the name property: Name of the network interface.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the network interface.
     * 
     * @param name the name value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the applicationGatewayBackendAddressPools property: Specifies an array of references to backend address pools
     * of application gateways. A node type can reference backend address pools of multiple application gateways.
     * Multiple node types cannot use the same application gateway.
     * 
     * @return the applicationGatewayBackendAddressPools value.
     */
    public List<SubResource> applicationGatewayBackendAddressPools() {
        return this.applicationGatewayBackendAddressPools;
    }

    /**
     * Set the applicationGatewayBackendAddressPools property: Specifies an array of references to backend address pools
     * of application gateways. A node type can reference backend address pools of multiple application gateways.
     * Multiple node types cannot use the same application gateway.
     * 
     * @param applicationGatewayBackendAddressPools the applicationGatewayBackendAddressPools value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration
        withApplicationGatewayBackendAddressPools(List<SubResource> applicationGatewayBackendAddressPools) {
        this.applicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
        return this;
    }

    /**
     * Get the loadBalancerBackendAddressPools property: Specifies an array of references to backend address pools of
     * load balancers. A node type can reference backend address pools of one public and one internal load balancer.
     * Multiple node types cannot use the same basic sku load balancer.
     * 
     * @return the loadBalancerBackendAddressPools value.
     */
    public List<SubResource> loadBalancerBackendAddressPools() {
        return this.loadBalancerBackendAddressPools;
    }

    /**
     * Set the loadBalancerBackendAddressPools property: Specifies an array of references to backend address pools of
     * load balancers. A node type can reference backend address pools of one public and one internal load balancer.
     * Multiple node types cannot use the same basic sku load balancer.
     * 
     * @param loadBalancerBackendAddressPools the loadBalancerBackendAddressPools value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration withLoadBalancerBackendAddressPools(List<SubResource> loadBalancerBackendAddressPools) {
        this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
        return this;
    }

    /**
     * Get the loadBalancerInboundNatPools property: Specifies an array of references to inbound Nat pools of the load
     * balancers. A node type can reference inbound nat pools of one public and one internal load balancer. Multiple
     * node types cannot use the same basic sku load balancer.
     * 
     * @return the loadBalancerInboundNatPools value.
     */
    public List<SubResource> loadBalancerInboundNatPools() {
        return this.loadBalancerInboundNatPools;
    }

    /**
     * Set the loadBalancerInboundNatPools property: Specifies an array of references to inbound Nat pools of the load
     * balancers. A node type can reference inbound nat pools of one public and one internal load balancer. Multiple
     * node types cannot use the same basic sku load balancer.
     * 
     * @param loadBalancerInboundNatPools the loadBalancerInboundNatPools value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration withLoadBalancerInboundNatPools(List<SubResource> loadBalancerInboundNatPools) {
        this.loadBalancerInboundNatPools = loadBalancerInboundNatPools;
        return this;
    }

    /**
     * Get the subnet property: Specifies the subnet of the network interface.
     * 
     * @return the subnet value.
     */
    public SubResource subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Specifies the subnet of the network interface.
     * 
     * @param subnet the subnet value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration withSubnet(SubResource subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Get the privateIPAddressVersion property: Specifies whether the IP configuration's private IP is IPv4 or IPv6.
     * Default is IPv4.
     * 
     * @return the privateIPAddressVersion value.
     */
    public PrivateIPAddressVersion privateIPAddressVersion() {
        return this.privateIPAddressVersion;
    }

    /**
     * Set the privateIPAddressVersion property: Specifies whether the IP configuration's private IP is IPv4 or IPv6.
     * Default is IPv4.
     * 
     * @param privateIPAddressVersion the privateIPAddressVersion value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration withPrivateIPAddressVersion(PrivateIPAddressVersion privateIPAddressVersion) {
        this.privateIPAddressVersion = privateIPAddressVersion;
        return this;
    }

    /**
     * Get the publicIPAddressConfiguration property: The public IP address configuration of the network interface.
     * 
     * @return the publicIPAddressConfiguration value.
     */
    public IPConfigurationPublicIPAddressConfiguration publicIPAddressConfiguration() {
        return this.publicIPAddressConfiguration;
    }

    /**
     * Set the publicIPAddressConfiguration property: The public IP address configuration of the network interface.
     * 
     * @param publicIPAddressConfiguration the publicIPAddressConfiguration value to set.
     * @return the IpConfiguration object itself.
     */
    public IpConfiguration
        withPublicIPAddressConfiguration(IPConfigurationPublicIPAddressConfiguration publicIPAddressConfiguration) {
        this.publicIPAddressConfiguration = publicIPAddressConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model IpConfiguration"));
        }
        if (publicIPAddressConfiguration() != null) {
            publicIPAddressConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IpConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("applicationGatewayBackendAddressPools", this.applicationGatewayBackendAddressPools,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("loadBalancerBackendAddressPools", this.loadBalancerBackendAddressPools,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("loadBalancerInboundNatPools", this.loadBalancerInboundNatPools,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("subnet", this.subnet);
        jsonWriter.writeStringField("privateIPAddressVersion",
            this.privateIPAddressVersion == null ? null : this.privateIPAddressVersion.toString());
        jsonWriter.writeJsonField("publicIPAddressConfiguration", this.publicIPAddressConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IpConfiguration.
     */
    public static IpConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpConfiguration deserializedIpConfiguration = new IpConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIpConfiguration.name = reader.getString();
                } else if ("applicationGatewayBackendAddressPools".equals(fieldName)) {
                    List<SubResource> applicationGatewayBackendAddressPools
                        = reader.readArray(reader1 -> SubResource.fromJson(reader1));
                    deserializedIpConfiguration.applicationGatewayBackendAddressPools
                        = applicationGatewayBackendAddressPools;
                } else if ("loadBalancerBackendAddressPools".equals(fieldName)) {
                    List<SubResource> loadBalancerBackendAddressPools
                        = reader.readArray(reader1 -> SubResource.fromJson(reader1));
                    deserializedIpConfiguration.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
                } else if ("loadBalancerInboundNatPools".equals(fieldName)) {
                    List<SubResource> loadBalancerInboundNatPools
                        = reader.readArray(reader1 -> SubResource.fromJson(reader1));
                    deserializedIpConfiguration.loadBalancerInboundNatPools = loadBalancerInboundNatPools;
                } else if ("subnet".equals(fieldName)) {
                    deserializedIpConfiguration.subnet = SubResource.fromJson(reader);
                } else if ("privateIPAddressVersion".equals(fieldName)) {
                    deserializedIpConfiguration.privateIPAddressVersion
                        = PrivateIPAddressVersion.fromString(reader.getString());
                } else if ("publicIPAddressConfiguration".equals(fieldName)) {
                    deserializedIpConfiguration.publicIPAddressConfiguration
                        = IPConfigurationPublicIPAddressConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpConfiguration;
        });
    }
}
