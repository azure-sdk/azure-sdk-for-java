// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.containerservicemicrosoftcontainerserviceaks.generated.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Logs profile for the Azure Monitor Infrastructure and Application Logs. Collect out-of-the-box Kubernetes
 * infrastructure &amp; application logs to send to Azure Monitor. See aka.ms/AzureMonitorContainerInsights for an
 * overview.
 */
@Fluent
public final class ManagedClusterAzureMonitorProfileLogs {
    /*
     * Azure Monitor Container Insights Profile for Kubernetes Events, Inventory and Container stdout & stderr logs
     * etc. See aka.ms/AzureMonitorContainerInsights for an overview.
     */
    @JsonProperty(value = "containerInsights")
    private ManagedClusterAzureMonitorProfileContainerInsights containerInsights;

    /*
     * Application Monitoring Profile for Kubernetes Application Container. Collects application logs, metrics and
     * traces through auto-instrumentation of the application using Azure Monitor OpenTelemetry based SDKs. See
     * aka.ms/AzureMonitorApplicationMonitoring for an overview.
     */
    @JsonProperty(value = "appMonitoring")
    private ManagedClusterAzureMonitorProfileAppMonitoring appMonitoring;

    /** Creates an instance of ManagedClusterAzureMonitorProfileLogs class. */
    public ManagedClusterAzureMonitorProfileLogs() {
    }

    /**
     * Get the containerInsights property: Azure Monitor Container Insights Profile for Kubernetes Events, Inventory and
     * Container stdout &amp; stderr logs etc. See aka.ms/AzureMonitorContainerInsights for an overview.
     *
     * @return the containerInsights value.
     */
    public ManagedClusterAzureMonitorProfileContainerInsights containerInsights() {
        return this.containerInsights;
    }

    /**
     * Set the containerInsights property: Azure Monitor Container Insights Profile for Kubernetes Events, Inventory and
     * Container stdout &amp; stderr logs etc. See aka.ms/AzureMonitorContainerInsights for an overview.
     *
     * @param containerInsights the containerInsights value to set.
     * @return the ManagedClusterAzureMonitorProfileLogs object itself.
     */
    public ManagedClusterAzureMonitorProfileLogs withContainerInsights(
        ManagedClusterAzureMonitorProfileContainerInsights containerInsights) {
        this.containerInsights = containerInsights;
        return this;
    }

    /**
     * Get the appMonitoring property: Application Monitoring Profile for Kubernetes Application Container. Collects
     * application logs, metrics and traces through auto-instrumentation of the application using Azure Monitor
     * OpenTelemetry based SDKs. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     *
     * @return the appMonitoring value.
     */
    public ManagedClusterAzureMonitorProfileAppMonitoring appMonitoring() {
        return this.appMonitoring;
    }

    /**
     * Set the appMonitoring property: Application Monitoring Profile for Kubernetes Application Container. Collects
     * application logs, metrics and traces through auto-instrumentation of the application using Azure Monitor
     * OpenTelemetry based SDKs. See aka.ms/AzureMonitorApplicationMonitoring for an overview.
     *
     * @param appMonitoring the appMonitoring value to set.
     * @return the ManagedClusterAzureMonitorProfileLogs object itself.
     */
    public ManagedClusterAzureMonitorProfileLogs withAppMonitoring(
        ManagedClusterAzureMonitorProfileAppMonitoring appMonitoring) {
        this.appMonitoring = appMonitoring;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerInsights() != null) {
            containerInsights().validate();
        }
        if (appMonitoring() != null) {
            appMonitoring().validate();
        }
    }
}
